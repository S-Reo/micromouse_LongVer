
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000ce40  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000328  08014e40  08014e40  00024e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08015168  08015168  000301e0  2**0
                  CONTENTS
  6 .ARM          00000008  08015168  08015168  00025168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08015170  08015170  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08015170  08015170  00025170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08015174  08015174  00025174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e0  20000000  08015178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000077c  200001e0  08015358  000301e0  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000095c  08015358  0003095c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f355  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000046b7  00000000  00000000  0004f565  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001628  00000000  00000000  00053c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013f8  00000000  00000000  00055248  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000243c7  00000000  00000000  00056640  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00015545  00000000  00000000  0007aa07  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8d0a  00000000  00000000  0008ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00158c56  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006700  00000000  00000000  00158cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e0 	.word	0x200001e0
 800801c:	00000000 	.word	0x00000000
 8008020:	08014e28 	.word	0x08014e28

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e4 	.word	0x200001e4
 800803c:	08014e28 	.word	0x08014e28

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <RotateAccel>:
	keep_counter[LEFT] = INITIAL_PULSE;
	keep_counter[RIGHT] = INITIAL_PULSE;
}

void RotateAccel(float deg, float rotate_ang_v)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	61fb      	str	r3, [r7, #28]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - angular_v;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	61fb      	str	r3, [r7, #28]
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)

		//周期、角速度、距離


	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008dd4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8008fd8 <RotateAccel+0x220>
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a374      	add	r3, pc, #464	; (adr r3, 8008fb8 <RotateAccel+0x200>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff fde7 	bl	80089c8 <__aeabi_d2iz>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	61bb      	str	r3, [r7, #24]
	float move_angle = deg * M_PI/ 180;
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fada 	bl	80083b8 <__aeabi_f2d>
 8008e04:	a36e      	add	r3, pc, #440	; (adr r3, 8008fc0 <RotateAccel+0x208>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7ff fb2d 	bl	8008468 <__aeabi_dmul>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	460c      	mov	r4, r1
 8008e12:	4618      	mov	r0, r3
 8008e14:	4621      	mov	r1, r4
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	4b70      	ldr	r3, [pc, #448]	; (8008fdc <RotateAccel+0x224>)
 8008e1c:	f7ff fc4e 	bl	80086bc <__aeabi_ddiv>
 8008e20:	4603      	mov	r3, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	4618      	mov	r0, r3
 8008e26:	4621      	mov	r1, r4
 8008e28:	f7ff fdf6 	bl	8008a18 <__aeabi_d2f>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	617b      	str	r3, [r7, #20]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008e30:	4b6b      	ldr	r3, [pc, #428]	; (8008fe0 <RotateAccel+0x228>)
 8008e32:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008e34:	60fb      	str	r3, [r7, #12]
			total_pulse[RIGHT]
 8008e36:	4b6a      	ldr	r3, [pc, #424]	; (8008fe0 <RotateAccel+0x228>)
 8008e38:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008e3a:	613b      	str	r3, [r7, #16]
	};

	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)	//右回転
 8008e3c:	edd7 7a00 	vldr	s15, [r7]
 8008e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e48:	dd52      	ble.n	8008ef0 <RotateAccel+0x138>
	{
		move_angle = move_angle + angle;
 8008e4a:	4b66      	ldr	r3, [pc, #408]	; (8008fe4 <RotateAccel+0x22c>)
 8008e4c:	edd3 7a00 	vldr	s15, [r3]
 8008e50:	ed97 7a05 	vldr	s14, [r7, #20]
 8008e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e58:	edc7 7a05 	vstr	s15, [r7, #20]
		while( (move_angle > angle) && (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) ))
 8008e5c:	e02f      	b.n	8008ebe <RotateAccel+0x106>
		{
			angular_acceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008e5e:	69f8      	ldr	r0, [r7, #28]
 8008e60:	f7ff faaa 	bl	80083b8 <__aeabi_f2d>
 8008e64:	a358      	add	r3, pc, #352	; (adr r3, 8008fc8 <RotateAccel+0x210>)
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f7ff fafd 	bl	8008468 <__aeabi_dmul>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	460c      	mov	r4, r1
 8008e72:	4625      	mov	r5, r4
 8008e74:	461c      	mov	r4, r3
 8008e76:	69f8      	ldr	r0, [r7, #28]
 8008e78:	f7ff fa9e 	bl	80083b8 <__aeabi_f2d>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7ff faf0 	bl	8008468 <__aeabi_dmul>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4625      	mov	r5, r4
 8008e8e:	461c      	mov	r4, r3
 8008e90:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e98:	ee17 0a90 	vmov	r0, s15
 8008e9c:	f7ff fa8c 	bl	80083b8 <__aeabi_f2d>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7ff fc08 	bl	80086bc <__aeabi_ddiv>
 8008eac:	4603      	mov	r3, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f7ff fdb0 	bl	8008a18 <__aeabi_d2f>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4b4b      	ldr	r3, [pc, #300]	; (8008fe8 <RotateAccel+0x230>)
 8008ebc:	601a      	str	r2, [r3, #0]
		while( (move_angle > angle) && (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) ))
 8008ebe:	4b49      	ldr	r3, [pc, #292]	; (8008fe4 <RotateAccel+0x22c>)
 8008ec0:	edd3 7a00 	vldr	s15, [r3]
 8008ec4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed0:	dd67      	ble.n	8008fa2 <RotateAccel+0x1ea>
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	4b41      	ldr	r3, [pc, #260]	; (8008fe0 <RotateAccel+0x228>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	dd60      	ble.n	8008fa2 <RotateAccel+0x1ea>
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	1ad2      	subs	r2, r2, r3
 8008ee6:	4b3e      	ldr	r3, [pc, #248]	; (8008fe0 <RotateAccel+0x228>)
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	dbb7      	blt.n	8008e5e <RotateAccel+0xa6>
 8008eee:	e058      	b.n	8008fa2 <RotateAccel+0x1ea>
		}

	}
	else if( rotate_ang_v < 0)
 8008ef0:	edd7 7a00 	vldr	s15, [r7]
 8008ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efc:	d551      	bpl.n	8008fa2 <RotateAccel+0x1ea>
	{
		move_angle = -move_angle + angle;
 8008efe:	4b39      	ldr	r3, [pc, #228]	; (8008fe4 <RotateAccel+0x22c>)
 8008f00:	ed93 7a00 	vldr	s14, [r3]
 8008f04:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f0c:	edc7 7a05 	vstr	s15, [r7, #20]
		//printf("加速 負\r\n");
		while( (move_angle < angle) && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) ) )
 8008f10:	e02f      	b.n	8008f72 <RotateAccel+0x1ba>
		{
			angular_acceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008f12:	69f8      	ldr	r0, [r7, #28]
 8008f14:	f7ff fa50 	bl	80083b8 <__aeabi_f2d>
 8008f18:	a32d      	add	r3, pc, #180	; (adr r3, 8008fd0 <RotateAccel+0x218>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7ff faa3 	bl	8008468 <__aeabi_dmul>
 8008f22:	4603      	mov	r3, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	4625      	mov	r5, r4
 8008f28:	461c      	mov	r4, r3
 8008f2a:	69f8      	ldr	r0, [r7, #28]
 8008f2c:	f7ff fa44 	bl	80083b8 <__aeabi_f2d>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7ff fa96 	bl	8008468 <__aeabi_dmul>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4625      	mov	r5, r4
 8008f42:	461c      	mov	r4, r3
 8008f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f4c:	ee17 0a90 	vmov	r0, s15
 8008f50:	f7ff fa32 	bl	80083b8 <__aeabi_f2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7ff fbae 	bl	80086bc <__aeabi_ddiv>
 8008f60:	4603      	mov	r3, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4618      	mov	r0, r3
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff fd56 	bl	8008a18 <__aeabi_d2f>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <RotateAccel+0x230>)
 8008f70:	601a      	str	r2, [r3, #0]
		while( (move_angle < angle) && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) ) )
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <RotateAccel+0x22c>)
 8008f74:	edd3 7a00 	vldr	s15, [r3]
 8008f78:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f84:	d50d      	bpl.n	8008fa2 <RotateAccel+0x1ea>
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <RotateAccel+0x228>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	da06      	bge.n	8008fa2 <RotateAccel+0x1ea>
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	441a      	add	r2, r3
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <RotateAccel+0x228>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	dcb7      	bgt.n	8008f12 <RotateAccel+0x15a>
		}

	}
	angular_acceleration = 0;
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <RotateAccel+0x230>)
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	c95204f7 	.word	0xc95204f7
 8008fbc:	40fc5979 	.word	0x40fc5979
 8008fc0:	54442d18 	.word	0x54442d18
 8008fc4:	400921fb 	.word	0x400921fb
 8008fc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008fcc:	3fb0624d 	.word	0x3fb0624d
 8008fd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008fd4:	bfb0624d 	.word	0xbfb0624d
 8008fd8:	43b40000 	.word	0x43b40000
 8008fdc:	40668000 	.word	0x40668000
 8008fe0:	20000288 	.word	0x20000288
 8008fe4:	20000298 	.word	0x20000298
 8008fe8:	200002b4 	.word	0x200002b4
 8008fec:	00000000 	.word	0x00000000

08008ff0 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	ed87 0a01 	vstr	s0, [r7, #4]
 8008ffa:	edc7 0a00 	vstr	s1, [r7]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009002:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009140 <RotateConst+0x150>
 8009006:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800900a:	ee16 0a90 	vmov	r0, s13
 800900e:	f7ff f9d3 	bl	80083b8 <__aeabi_f2d>
 8009012:	a347      	add	r3, pc, #284	; (adr r3, 8009130 <RotateConst+0x140>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7ff fa26 	bl	8008468 <__aeabi_dmul>
 800901c:	4603      	mov	r3, r0
 800901e:	460c      	mov	r4, r1
 8009020:	4618      	mov	r0, r3
 8009022:	4621      	mov	r1, r4
 8009024:	f7ff fcd0 	bl	80089c8 <__aeabi_d2iz>
 8009028:	4603      	mov	r3, r0
 800902a:	617b      	str	r3, [r7, #20]
	float move_angle = deg * M_PI/ 180;
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff f9c3 	bl	80083b8 <__aeabi_f2d>
 8009032:	a341      	add	r3, pc, #260	; (adr r3, 8009138 <RotateConst+0x148>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7ff fa16 	bl	8008468 <__aeabi_dmul>
 800903c:	4603      	mov	r3, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4618      	mov	r0, r3
 8009042:	4621      	mov	r1, r4
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	4b3e      	ldr	r3, [pc, #248]	; (8009144 <RotateConst+0x154>)
 800904a:	f7ff fb37 	bl	80086bc <__aeabi_ddiv>
 800904e:	4603      	mov	r3, r0
 8009050:	460c      	mov	r4, r1
 8009052:	4618      	mov	r0, r3
 8009054:	4621      	mov	r1, r4
 8009056:	f7ff fcdf 	bl	8008a18 <__aeabi_d2f>
 800905a:	4603      	mov	r3, r0
 800905c:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 800905e:	4b3a      	ldr	r3, [pc, #232]	; (8009148 <RotateConst+0x158>)
 8009060:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8009062:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 8009064:	4b38      	ldr	r3, [pc, #224]	; (8009148 <RotateConst+0x158>)
 8009066:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8009068:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 800906a:	edd7 7a00 	vldr	s15, [r7]
 800906e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009076:	dd26      	ble.n	80090c6 <RotateConst+0xd6>
	{
		move_angle += angle;
 8009078:	4b34      	ldr	r3, [pc, #208]	; (800914c <RotateConst+0x15c>)
 800907a:	edd3 7a00 	vldr	s15, [r3]
 800907e:	ed97 7a04 	vldr	s14, [r7, #16]
 8009082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009086:	edc7 7a04 	vstr	s15, [r7, #16]
		while( (move_angle > angle) &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) )) )
 800908a:	e003      	b.n	8009094 <RotateConst+0xa4>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 800908c:	4b30      	ldr	r3, [pc, #192]	; (8009150 <RotateConst+0x160>)
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
		while( (move_angle > angle) &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) )) )
 8009094:	4b2d      	ldr	r3, [pc, #180]	; (800914c <RotateConst+0x15c>)
 8009096:	edd3 7a00 	vldr	s15, [r3]
 800909a:	ed97 7a04 	vldr	s14, [r7, #16]
 800909e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	dd3b      	ble.n	8009120 <RotateConst+0x130>
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	441a      	add	r2, r3
 80090ae:	4b26      	ldr	r3, [pc, #152]	; (8009148 <RotateConst+0x158>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	dd34      	ble.n	8009120 <RotateConst+0x130>
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <RotateConst+0x158>)
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	dbe3      	blt.n	800908c <RotateConst+0x9c>
 80090c4:	e02c      	b.n	8009120 <RotateConst+0x130>
		}

	}
	else if (rotate_ang_v < 0)
 80090c6:	edd7 7a00 	vldr	s15, [r7]
 80090ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d2:	d525      	bpl.n	8009120 <RotateConst+0x130>
	{
		move_angle = -move_angle + angle;
 80090d4:	4b1d      	ldr	r3, [pc, #116]	; (800914c <RotateConst+0x15c>)
 80090d6:	ed93 7a00 	vldr	s14, [r3]
 80090da:	edd7 7a04 	vldr	s15, [r7, #16]
 80090de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090e2:	edc7 7a04 	vstr	s15, [r7, #16]
		//printf("定速 負\r\n");
		while( (move_angle < angle) &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) )) )
 80090e6:	e003      	b.n	80090f0 <RotateConst+0x100>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 80090e8:	4b19      	ldr	r3, [pc, #100]	; (8009150 <RotateConst+0x160>)
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		while( (move_angle < angle) &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) )) )
 80090f0:	4b16      	ldr	r3, [pc, #88]	; (800914c <RotateConst+0x15c>)
 80090f2:	edd3 7a00 	vldr	s15, [r3]
 80090f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80090fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	d50d      	bpl.n	8009120 <RotateConst+0x130>
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <RotateConst+0x158>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	da06      	bge.n	8009120 <RotateConst+0x130>
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	441a      	add	r2, r3
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <RotateConst+0x158>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	dce3      	bgt.n	80090e8 <RotateConst+0xf8>
		}

	}
	angular_acceleration = 0;
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <RotateConst+0x160>)
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 8009128:	bf00      	nop
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd90      	pop	{r4, r7, pc}
 8009130:	c95204f7 	.word	0xc95204f7
 8009134:	40fc5979 	.word	0x40fc5979
 8009138:	54442d18 	.word	0x54442d18
 800913c:	400921fb 	.word	0x400921fb
 8009140:	43b40000 	.word	0x43b40000
 8009144:	40668000 	.word	0x40668000
 8009148:	20000288 	.word	0x20000288
 800914c:	20000298 	.word	0x20000298
 8009150:	200002b4 	.word	0x200002b4
 8009154:	00000000 	.word	0x00000000

08009158 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009158:	b5b0      	push	{r4, r5, r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009162:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	61fb      	str	r3, [r7, #28]
	additional_ang_v = rotate_ang_v;// - angular_v;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	61fb      	str	r3, [r7, #28]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;
		//周期、角速度、距離

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009170:	edd7 7a01 	vldr	s15, [r7, #4]
 8009174:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80093c0 <RotateDecel+0x268>
 8009178:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800917c:	ee16 0a90 	vmov	r0, s13
 8009180:	f7ff f91a 	bl	80083b8 <__aeabi_f2d>
 8009184:	a388      	add	r3, pc, #544	; (adr r3, 80093a8 <RotateDecel+0x250>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7ff f96d 	bl	8008468 <__aeabi_dmul>
 800918e:	4603      	mov	r3, r0
 8009190:	460c      	mov	r4, r1
 8009192:	4618      	mov	r0, r3
 8009194:	4621      	mov	r1, r4
 8009196:	f7ff fc17 	bl	80089c8 <__aeabi_d2iz>
 800919a:	4603      	mov	r3, r0
 800919c:	61bb      	str	r3, [r7, #24]
	float move_angle = deg * M_PI / 180;
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff f90a 	bl	80083b8 <__aeabi_f2d>
 80091a4:	a382      	add	r3, pc, #520	; (adr r3, 80093b0 <RotateDecel+0x258>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7ff f95d 	bl	8008468 <__aeabi_dmul>
 80091ae:	4603      	mov	r3, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	4618      	mov	r0, r3
 80091b4:	4621      	mov	r1, r4
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	4b82      	ldr	r3, [pc, #520]	; (80093c4 <RotateDecel+0x26c>)
 80091bc:	f7ff fa7e 	bl	80086bc <__aeabi_ddiv>
 80091c0:	4603      	mov	r3, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	4618      	mov	r0, r3
 80091c6:	4621      	mov	r1, r4
 80091c8:	f7ff fc26 	bl	8008a18 <__aeabi_d2f>
 80091cc:	4603      	mov	r3, r0
 80091ce:	617b      	str	r3, [r7, #20]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 80091d0:	4b7d      	ldr	r3, [pc, #500]	; (80093c8 <RotateDecel+0x270>)
 80091d2:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 80091d4:	60fb      	str	r3, [r7, #12]
			total_pulse[RIGHT]
 80091d6:	4b7c      	ldr	r3, [pc, #496]	; (80093c8 <RotateDecel+0x270>)
 80091d8:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 80091da:	613b      	str	r3, [r7, #16]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 80091dc:	edd7 7a00 	vldr	s15, [r7]
 80091e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e8:	dd64      	ble.n	80092b4 <RotateDecel+0x15c>
	{
		move_angle += angle;
 80091ea:	4b78      	ldr	r3, [pc, #480]	; (80093cc <RotateDecel+0x274>)
 80091ec:	edd3 7a00 	vldr	s15, [r3]
 80091f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80091f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091f8:	edc7 7a05 	vstr	s15, [r7, #20]

		while( (move_angle > angle) &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) )) )
 80091fc:	e041      	b.n	8009282 <RotateDecel+0x12a>
		{
			angular_acceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80091fe:	69f8      	ldr	r0, [r7, #28]
 8009200:	f7ff f8da 	bl	80083b8 <__aeabi_f2d>
 8009204:	a36c      	add	r3, pc, #432	; (adr r3, 80093b8 <RotateDecel+0x260>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7ff f92d 	bl	8008468 <__aeabi_dmul>
 800920e:	4603      	mov	r3, r0
 8009210:	460c      	mov	r4, r1
 8009212:	4625      	mov	r5, r4
 8009214:	461c      	mov	r4, r3
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f7ff f8ce 	bl	80083b8 <__aeabi_f2d>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4620      	mov	r0, r4
 8009222:	4629      	mov	r1, r5
 8009224:	f7ff f920 	bl	8008468 <__aeabi_dmul>
 8009228:	4603      	mov	r3, r0
 800922a:	460c      	mov	r4, r1
 800922c:	4625      	mov	r5, r4
 800922e:	461c      	mov	r4, r3
 8009230:	edd7 7a01 	vldr	s15, [r7, #4]
 8009234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009238:	ee17 0a90 	vmov	r0, s15
 800923c:	f7ff f8bc 	bl	80083b8 <__aeabi_f2d>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7ff fa38 	bl	80086bc <__aeabi_ddiv>
 800924c:	4603      	mov	r3, r0
 800924e:	460c      	mov	r4, r1
 8009250:	4618      	mov	r0, r3
 8009252:	4621      	mov	r1, r4
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	4b5d      	ldr	r3, [pc, #372]	; (80093d0 <RotateDecel+0x278>)
 800925a:	f7ff f905 	bl	8008468 <__aeabi_dmul>
 800925e:	4603      	mov	r3, r0
 8009260:	460c      	mov	r4, r1
 8009262:	4618      	mov	r0, r3
 8009264:	4621      	mov	r1, r4
 8009266:	f7ff fbd7 	bl	8008a18 <__aeabi_d2f>
 800926a:	4602      	mov	r2, r0
 800926c:	4b59      	ldr	r3, [pc, #356]	; (80093d4 <RotateDecel+0x27c>)
 800926e:	601a      	str	r2, [r3, #0]
			if( angular_v <= 0)
 8009270:	4b59      	ldr	r3, [pc, #356]	; (80093d8 <RotateDecel+0x280>)
 8009272:	edd3 7a00 	vldr	s15, [r3]
 8009276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800927a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927e:	f240 8084 	bls.w	800938a <RotateDecel+0x232>
		while( (move_angle > angle) &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) )) )
 8009282:	4b52      	ldr	r3, [pc, #328]	; (80093cc <RotateDecel+0x274>)
 8009284:	edd3 7a00 	vldr	s15, [r3]
 8009288:	ed97 7a05 	vldr	s14, [r7, #20]
 800928c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	dd7c      	ble.n	8009390 <RotateDecel+0x238>
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	441a      	add	r2, r3
 800929c:	4b4a      	ldr	r3, [pc, #296]	; (80093c8 <RotateDecel+0x270>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	dd75      	ble.n	8009390 <RotateDecel+0x238>
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	4b47      	ldr	r3, [pc, #284]	; (80093c8 <RotateDecel+0x270>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	dba5      	blt.n	80091fe <RotateDecel+0xa6>
 80092b2:	e06d      	b.n	8009390 <RotateDecel+0x238>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 80092b4:	edd7 7a00 	vldr	s15, [r7]
 80092b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	d566      	bpl.n	8009390 <RotateDecel+0x238>
	{
		move_angle = -move_angle + angle;
 80092c2:	4b42      	ldr	r3, [pc, #264]	; (80093cc <RotateDecel+0x274>)
 80092c4:	ed93 7a00 	vldr	s14, [r3]
 80092c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80092cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092d0:	edc7 7a05 	vstr	s15, [r7, #20]
		//printf("減速 負\r\n");
		while( (move_angle < angle) &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) )) )
 80092d4:	e040      	b.n	8009358 <RotateDecel+0x200>
		{
			angular_acceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80092d6:	69f8      	ldr	r0, [r7, #28]
 80092d8:	f7ff f86e 	bl	80083b8 <__aeabi_f2d>
 80092dc:	a336      	add	r3, pc, #216	; (adr r3, 80093b8 <RotateDecel+0x260>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	f7ff f8c1 	bl	8008468 <__aeabi_dmul>
 80092e6:	4603      	mov	r3, r0
 80092e8:	460c      	mov	r4, r1
 80092ea:	4625      	mov	r5, r4
 80092ec:	461c      	mov	r4, r3
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	f7ff f862 	bl	80083b8 <__aeabi_f2d>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4620      	mov	r0, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7ff f8b4 	bl	8008468 <__aeabi_dmul>
 8009300:	4603      	mov	r3, r0
 8009302:	460c      	mov	r4, r1
 8009304:	4625      	mov	r5, r4
 8009306:	461c      	mov	r4, r3
 8009308:	edd7 7a01 	vldr	s15, [r7, #4]
 800930c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009310:	ee17 0a90 	vmov	r0, s15
 8009314:	f7ff f850 	bl	80083b8 <__aeabi_f2d>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4620      	mov	r0, r4
 800931e:	4629      	mov	r1, r5
 8009320:	f7ff f9cc 	bl	80086bc <__aeabi_ddiv>
 8009324:	4603      	mov	r3, r0
 8009326:	460c      	mov	r4, r1
 8009328:	4618      	mov	r0, r3
 800932a:	4621      	mov	r1, r4
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <RotateDecel+0x284>)
 8009332:	f7ff f899 	bl	8008468 <__aeabi_dmul>
 8009336:	4603      	mov	r3, r0
 8009338:	460c      	mov	r4, r1
 800933a:	4618      	mov	r0, r3
 800933c:	4621      	mov	r1, r4
 800933e:	f7ff fb6b 	bl	8008a18 <__aeabi_d2f>
 8009342:	4602      	mov	r2, r0
 8009344:	4b23      	ldr	r3, [pc, #140]	; (80093d4 <RotateDecel+0x27c>)
 8009346:	601a      	str	r2, [r3, #0]
			if( angular_v >= 0)
 8009348:	4b23      	ldr	r3, [pc, #140]	; (80093d8 <RotateDecel+0x280>)
 800934a:	edd3 7a00 	vldr	s15, [r3]
 800934e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	da1a      	bge.n	800938e <RotateDecel+0x236>
		while( (move_angle < angle) &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) )) )
 8009358:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <RotateDecel+0x274>)
 800935a:	edd3 7a00 	vldr	s15, [r3]
 800935e:	ed97 7a05 	vldr	s14, [r7, #20]
 8009362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936a:	d511      	bpl.n	8009390 <RotateDecel+0x238>
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	1ad2      	subs	r2, r2, r3
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <RotateDecel+0x270>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	da0a      	bge.n	8009390 <RotateDecel+0x238>
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	441a      	add	r2, r3
 8009380:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <RotateDecel+0x270>)
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	dca6      	bgt.n	80092d6 <RotateDecel+0x17e>
 8009388:	e002      	b.n	8009390 <RotateDecel+0x238>
				break;
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <RotateDecel+0x238>
				break;
 800938e:	bf00      	nop
		}

	}
	angular_acceleration = 0;
 8009390:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <RotateDecel+0x27c>)
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <RotateDecel+0x288>)
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
}
 80093a0:	bf00      	nop
 80093a2:	3720      	adds	r7, #32
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bdb0      	pop	{r4, r5, r7, pc}
 80093a8:	c95204f7 	.word	0xc95204f7
 80093ac:	40fc5979 	.word	0x40fc5979
 80093b0:	54442d18 	.word	0x54442d18
 80093b4:	400921fb 	.word	0x400921fb
 80093b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80093bc:	3f50624d 	.word	0x3f50624d
 80093c0:	43b40000 	.word	0x43b40000
 80093c4:	40668000 	.word	0x40668000
 80093c8:	20000288 	.word	0x20000288
 80093cc:	20000298 	.word	0x20000298
 80093d0:	c0500000 	.word	0xc0500000
 80093d4:	200002b4 	.word	0x200002b4
 80093d8:	20000294 	.word	0x20000294
 80093dc:	40500000 	.word	0x40500000
 80093e0:	200002b0 	.word	0x200002b0

080093e4 <Rotate>:
void Rotate(float deg, float ang_accel)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80093ee:	edc7 0a00 	vstr	s1, [r7]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	RotateAccel(deg*15/90, ang_accel);
 80093f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80093f6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80093fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009464 <Rotate+0x80>
 8009402:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009406:	edd7 0a00 	vldr	s1, [r7]
 800940a:	eeb0 0a66 	vmov.f32	s0, s13
 800940e:	f7ff fcd3 	bl	8008db8 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",angular_v);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",angular_acceleration);
	RotateConst(deg*25/90, ang_accel);
 8009412:	edd7 7a01 	vldr	s15, [r7, #4]
 8009416:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800941a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800941e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009464 <Rotate+0x80>
 8009422:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009426:	edd7 0a00 	vldr	s1, [r7]
 800942a:	eeb0 0a66 	vmov.f32	s0, s13
 800942e:	f7ff fddf 	bl	8008ff0 <RotateConst>
	RotateDecel(deg*50/90, ang_accel);
 8009432:	edd7 7a01 	vldr	s15, [r7, #4]
 8009436:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009468 <Rotate+0x84>
 800943a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800943e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009464 <Rotate+0x80>
 8009442:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009446:	edd7 0a00 	vldr	s1, [r7]
 800944a:	eeb0 0a66 	vmov.f32	s0, s13
 800944e:	f7ff fe83 	bl	8009158 <RotateDecel>
//			target_angular_v = ang_accel;
//			printf("deg:負, angle, angular_v : %f, %f\r\n",angle, angular_v );
//		}
//
//	}
	target_angular_v = 0;
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <Rotate+0x88>)
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	//printf("回転終了\r\n");
}
 800945a:	bf00      	nop
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	42b40000 	.word	0x42b40000
 8009468:	42480000 	.word	0x42480000
 800946c:	200002b0 	.word	0x200002b0

08009470 <Calib>:
{

}

void Calib()
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	//壁使ってセンサ補正か、背中あて補正。状況に応じて補正パターンを変える

	//フラグと変数の状態に応じてフラグを変更し、動作を変える

}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
	...

08009480 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009480:	b5b0      	push	{r4, r5, r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = explore_velocity;       //スラローム時の重心速度
 8009486:	4b78      	ldr	r3, [pc, #480]	; (8009668 <SlalomRight+0x1e8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 6;         //スラローム前距離
 800948c:	4b77      	ldr	r3, [pc, #476]	; (800966c <SlalomRight+0x1ec>)
 800948e:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 8009490:	4b76      	ldr	r3, [pc, #472]	; (800966c <SlalomRight+0x1ec>)
 8009492:	61fb      	str	r3, [r7, #28]
	float alpha_turn = 0.010;//0.015*13;  //スラローム時の角加速度
 8009494:	4b76      	ldr	r3, [pc, #472]	; (8009670 <SlalomRight+0x1f0>)
 8009496:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009498:	4b76      	ldr	r3, [pc, #472]	; (8009674 <SlalomRight+0x1f4>)
 800949a:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 800949c:	4b76      	ldr	r3, [pc, #472]	; (8009678 <SlalomRight+0x1f8>)
 800949e:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 80094a0:	4b76      	ldr	r3, [pc, #472]	; (800967c <SlalomRight+0x1fc>)
 80094a2:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 80094a4:	4b76      	ldr	r3, [pc, #472]	; (8009680 <SlalomRight+0x200>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	4b75      	ldr	r3, [pc, #468]	; (8009680 <SlalomRight+0x200>)
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 80094b0:	e00a      	b.n	80094c8 <SlalomRight+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 80094b2:	4b74      	ldr	r3, [pc, #464]	; (8009684 <SlalomRight+0x204>)
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 80094ba:	4b73      	ldr	r3, [pc, #460]	; (8009688 <SlalomRight+0x208>)
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 80094c2:	4a72      	ldr	r2, [pc, #456]	; (800968c <SlalomRight+0x20c>)
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 80094c8:	68b8      	ldr	r0, [r7, #8]
 80094ca:	f7fe ff63 	bl	8008394 <__aeabi_i2d>
 80094ce:	4604      	mov	r4, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80094d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80094da:	ee17 0a90 	vmov	r0, s15
 80094de:	f7fe ff6b 	bl	80083b8 <__aeabi_f2d>
 80094e2:	a35f      	add	r3, pc, #380	; (adr r3, 8009660 <SlalomRight+0x1e0>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7ff f8e8 	bl	80086bc <__aeabi_ddiv>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4620      	mov	r0, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	f7fe fe02 	bl	80080fc <__adddf3>
 80094f8:	4603      	mov	r3, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	4625      	mov	r5, r4
 80094fe:	461c      	mov	r4, r3
 8009500:	4b5f      	ldr	r3, [pc, #380]	; (8009680 <SlalomRight+0x200>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	4b5e      	ldr	r3, [pc, #376]	; (8009680 <SlalomRight+0x200>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4413      	add	r3, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe ff42 	bl	8008394 <__aeabi_i2d>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	f7ff fa36 	bl	8008988 <__aeabi_dcmpgt>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1c7      	bne.n	80094b2 <SlalomRight+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 8009522:	4b5b      	ldr	r3, [pc, #364]	; (8009690 <SlalomRight+0x210>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	607b      	str	r3, [r7, #4]
	while(start_angle + ang1 > angle)
 8009528:	e005      	b.n	8009536 <SlalomRight+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 800952a:	4a57      	ldr	r2, [pc, #348]	; (8009688 <SlalomRight+0x208>)
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 8009530:	4a56      	ldr	r2, [pc, #344]	; (800968c <SlalomRight+0x20c>)
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > angle)
 8009536:	ed97 7a01 	vldr	s14, [r7, #4]
 800953a:	edd7 7a05 	vldr	s15, [r7, #20]
 800953e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009542:	4b53      	ldr	r3, [pc, #332]	; (8009690 <SlalomRight+0x210>)
 8009544:	edd3 7a00 	vldr	s15, [r3]
 8009548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009550:	dceb      	bgt.n	800952a <SlalomRight+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 8009552:	4b4d      	ldr	r3, [pc, #308]	; (8009688 <SlalomRight+0x208>)
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle + ang2 > angle)
 800955a:	e006      	b.n	800956a <SlalomRight+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 800955c:	4b49      	ldr	r3, [pc, #292]	; (8009684 <SlalomRight+0x204>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a48      	ldr	r2, [pc, #288]	; (8009684 <SlalomRight+0x204>)
 8009562:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 8009564:	4a49      	ldr	r2, [pc, #292]	; (800968c <SlalomRight+0x20c>)
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > angle)
 800956a:	ed97 7a01 	vldr	s14, [r7, #4]
 800956e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009576:	4b46      	ldr	r3, [pc, #280]	; (8009690 <SlalomRight+0x210>)
 8009578:	edd3 7a00 	vldr	s15, [r3]
 800957c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009584:	dcea      	bgt.n	800955c <SlalomRight+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle + ang3 > angle)
 8009586:	e016      	b.n	80095b6 <SlalomRight+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 8009588:	edd7 7a06 	vldr	s15, [r7, #24]
 800958c:	eef1 7a67 	vneg.f32	s15, s15
 8009590:	4b3d      	ldr	r3, [pc, #244]	; (8009688 <SlalomRight+0x208>)
 8009592:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v < 0)
 8009596:	4b3b      	ldr	r3, [pc, #236]	; (8009684 <SlalomRight+0x204>)
 8009598:	edd3 7a00 	vldr	s15, [r3]
 800959c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a4:	d504      	bpl.n	80095b0 <SlalomRight+0x130>
			{
				target_angular_v = 0;
 80095a6:	4b37      	ldr	r3, [pc, #220]	; (8009684 <SlalomRight+0x204>)
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
				break;
 80095ae:	e010      	b.n	80095d2 <SlalomRight+0x152>
			}
			target_velocity[BODY] = v_turn;
 80095b0:	4a36      	ldr	r2, [pc, #216]	; (800968c <SlalomRight+0x20c>)
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > angle)
 80095b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80095ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80095be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095c2:	4b33      	ldr	r3, [pc, #204]	; (8009690 <SlalomRight+0x210>)
 80095c4:	edd3 7a00 	vldr	s15, [r3]
 80095c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d0:	dcda      	bgt.n	8009588 <SlalomRight+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 80095d2:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <SlalomRight+0x208>)
 80095d4:	f04f 0200 	mov.w	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 80095da:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <SlalomRight+0x204>)
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 80095e2:	4b27      	ldr	r3, [pc, #156]	; (8009680 <SlalomRight+0x200>)
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	4b26      	ldr	r3, [pc, #152]	; (8009680 <SlalomRight+0x200>)
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	4413      	add	r3, r2
 80095ec:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 80095ee:	e006      	b.n	80095fe <SlalomRight+0x17e>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 80095f0:	4b24      	ldr	r3, [pc, #144]	; (8009684 <SlalomRight+0x204>)
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 80095f8:	4a24      	ldr	r2, [pc, #144]	; (800968c <SlalomRight+0x20c>)
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 80095fe:	68b8      	ldr	r0, [r7, #8]
 8009600:	f7fe fec8 	bl	8008394 <__aeabi_i2d>
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	edd7 7a07 	vldr	s15, [r7, #28]
 800960c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009610:	ee17 0a90 	vmov	r0, s15
 8009614:	f7fe fed0 	bl	80083b8 <__aeabi_f2d>
 8009618:	a311      	add	r3, pc, #68	; (adr r3, 8009660 <SlalomRight+0x1e0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7ff f84d 	bl	80086bc <__aeabi_ddiv>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7fe fd67 	bl	80080fc <__adddf3>
 800962e:	4603      	mov	r3, r0
 8009630:	460c      	mov	r4, r1
 8009632:	4625      	mov	r5, r4
 8009634:	461c      	mov	r4, r3
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <SlalomRight+0x200>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <SlalomRight+0x200>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4413      	add	r3, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fea7 	bl	8008394 <__aeabi_i2d>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7ff f99b 	bl	8008988 <__aeabi_dcmpgt>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1cb      	bne.n	80095f0 <SlalomRight+0x170>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009658:	bf00      	nop
 800965a:	3728      	adds	r7, #40	; 0x28
 800965c:	46bd      	mov	sp, r7
 800965e:	bdb0      	pop	{r4, r5, r7, pc}
 8009660:	317249d5 	.word	0x317249d5
 8009664:	3f502de0 	.word	0x3f502de0
 8009668:	20000000 	.word	0x20000000
 800966c:	40c00000 	.word	0x40c00000
 8009670:	3c23d70a 	.word	0x3c23d70a
 8009674:	3f060a92 	.word	0x3f060a92
 8009678:	3f860a92 	.word	0x3f860a92
 800967c:	3fc90fdb 	.word	0x3fc90fdb
 8009680:	20000288 	.word	0x20000288
 8009684:	200002b0 	.word	0x200002b0
 8009688:	200002b4 	.word	0x200002b4
 800968c:	2000029c 	.word	0x2000029c
 8009690:	20000298 	.word	0x20000298
 8009694:	00000000 	.word	0x00000000

08009698 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009698:	b5b0      	push	{r4, r5, r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = explore_velocity;       //スラローム時の重心速度
 800969e:	4b78      	ldr	r3, [pc, #480]	; (8009880 <SlalomLeft+0x1e8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 6;         //スラローム前距離
 80096a4:	4b77      	ldr	r3, [pc, #476]	; (8009884 <SlalomLeft+0x1ec>)
 80096a6:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 80096a8:	4b76      	ldr	r3, [pc, #472]	; (8009884 <SlalomLeft+0x1ec>)
 80096aa:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -0.010;//0.015*13;  //スラローム時の角加速度
 80096ac:	4b76      	ldr	r3, [pc, #472]	; (8009888 <SlalomLeft+0x1f0>)
 80096ae:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 80096b0:	4b76      	ldr	r3, [pc, #472]	; (800988c <SlalomLeft+0x1f4>)
 80096b2:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 80096b4:	4b76      	ldr	r3, [pc, #472]	; (8009890 <SlalomLeft+0x1f8>)
 80096b6:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 80096b8:	4b76      	ldr	r3, [pc, #472]	; (8009894 <SlalomLeft+0x1fc>)
 80096ba:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 80096bc:	4b76      	ldr	r3, [pc, #472]	; (8009898 <SlalomLeft+0x200>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b75      	ldr	r3, [pc, #468]	; (8009898 <SlalomLeft+0x200>)
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4413      	add	r3, r2
 80096c6:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 80096c8:	e00a      	b.n	80096e0 <SlalomLeft+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 80096ca:	4b74      	ldr	r3, [pc, #464]	; (800989c <SlalomLeft+0x204>)
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 80096d2:	4b73      	ldr	r3, [pc, #460]	; (80098a0 <SlalomLeft+0x208>)
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 80096da:	4a72      	ldr	r2, [pc, #456]	; (80098a4 <SlalomLeft+0x20c>)
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f7fe fe57 	bl	8008394 <__aeabi_i2d>
 80096e6:	4604      	mov	r4, r0
 80096e8:	460d      	mov	r5, r1
 80096ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80096ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80096f2:	ee17 0a90 	vmov	r0, s15
 80096f6:	f7fe fe5f 	bl	80083b8 <__aeabi_f2d>
 80096fa:	a35f      	add	r3, pc, #380	; (adr r3, 8009878 <SlalomLeft+0x1e0>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7fe ffdc 	bl	80086bc <__aeabi_ddiv>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4620      	mov	r0, r4
 800970a:	4629      	mov	r1, r5
 800970c:	f7fe fcf6 	bl	80080fc <__adddf3>
 8009710:	4603      	mov	r3, r0
 8009712:	460c      	mov	r4, r1
 8009714:	4625      	mov	r5, r4
 8009716:	461c      	mov	r4, r3
 8009718:	4b5f      	ldr	r3, [pc, #380]	; (8009898 <SlalomLeft+0x200>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4b5e      	ldr	r3, [pc, #376]	; (8009898 <SlalomLeft+0x200>)
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	4413      	add	r3, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fe36 	bl	8008394 <__aeabi_i2d>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7ff f92a 	bl	8008988 <__aeabi_dcmpgt>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1c7      	bne.n	80096ca <SlalomLeft+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 800973a:	4b5b      	ldr	r3, [pc, #364]	; (80098a8 <SlalomLeft+0x210>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < angle)
 8009740:	e005      	b.n	800974e <SlalomLeft+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 8009742:	4a57      	ldr	r2, [pc, #348]	; (80098a0 <SlalomLeft+0x208>)
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 8009748:	4a56      	ldr	r2, [pc, #344]	; (80098a4 <SlalomLeft+0x20c>)
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < angle)
 800974e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009752:	edd7 7a05 	vldr	s15, [r7, #20]
 8009756:	ee37 7a67 	vsub.f32	s14, s14, s15
 800975a:	4b53      	ldr	r3, [pc, #332]	; (80098a8 <SlalomLeft+0x210>)
 800975c:	edd3 7a00 	vldr	s15, [r3]
 8009760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009768:	d4eb      	bmi.n	8009742 <SlalomLeft+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 800976a:	4b4d      	ldr	r3, [pc, #308]	; (80098a0 <SlalomLeft+0x208>)
 800976c:	f04f 0200 	mov.w	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < angle)
 8009772:	e006      	b.n	8009782 <SlalomLeft+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 8009774:	4b49      	ldr	r3, [pc, #292]	; (800989c <SlalomLeft+0x204>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a48      	ldr	r2, [pc, #288]	; (800989c <SlalomLeft+0x204>)
 800977a:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 800977c:	4a49      	ldr	r2, [pc, #292]	; (80098a4 <SlalomLeft+0x20c>)
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < angle)
 8009782:	ed97 7a01 	vldr	s14, [r7, #4]
 8009786:	edd7 7a04 	vldr	s15, [r7, #16]
 800978a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800978e:	4b46      	ldr	r3, [pc, #280]	; (80098a8 <SlalomLeft+0x210>)
 8009790:	edd3 7a00 	vldr	s15, [r3]
 8009794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979c:	d4ea      	bmi.n	8009774 <SlalomLeft+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < angle)
 800979e:	e016      	b.n	80097ce <SlalomLeft+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 80097a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80097a4:	eef1 7a67 	vneg.f32	s15, s15
 80097a8:	4b3d      	ldr	r3, [pc, #244]	; (80098a0 <SlalomLeft+0x208>)
 80097aa:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v > 0)
 80097ae:	4b3b      	ldr	r3, [pc, #236]	; (800989c <SlalomLeft+0x204>)
 80097b0:	edd3 7a00 	vldr	s15, [r3]
 80097b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097bc:	dd04      	ble.n	80097c8 <SlalomLeft+0x130>
			{
				target_angular_v = 0;
 80097be:	4b37      	ldr	r3, [pc, #220]	; (800989c <SlalomLeft+0x204>)
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
				break;
 80097c6:	e010      	b.n	80097ea <SlalomLeft+0x152>
			}
			target_velocity[BODY] = v_turn;
 80097c8:	4a36      	ldr	r2, [pc, #216]	; (80098a4 <SlalomLeft+0x20c>)
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < angle)
 80097ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80097d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80097d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097da:	4b33      	ldr	r3, [pc, #204]	; (80098a8 <SlalomLeft+0x210>)
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e8:	d4da      	bmi.n	80097a0 <SlalomLeft+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 80097ea:	4b2d      	ldr	r3, [pc, #180]	; (80098a0 <SlalomLeft+0x208>)
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 80097f2:	4b2a      	ldr	r3, [pc, #168]	; (800989c <SlalomLeft+0x204>)
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 80097fa:	4b27      	ldr	r3, [pc, #156]	; (8009898 <SlalomLeft+0x200>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4b26      	ldr	r3, [pc, #152]	; (8009898 <SlalomLeft+0x200>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	4413      	add	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009806:	e006      	b.n	8009816 <SlalomLeft+0x17e>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009808:	4b24      	ldr	r3, [pc, #144]	; (800989c <SlalomLeft+0x204>)
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009810:	4a24      	ldr	r2, [pc, #144]	; (80098a4 <SlalomLeft+0x20c>)
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f7fe fdbc 	bl	8008394 <__aeabi_i2d>
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	edd7 7a07 	vldr	s15, [r7, #28]
 8009824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009828:	ee17 0a90 	vmov	r0, s15
 800982c:	f7fe fdc4 	bl	80083b8 <__aeabi_f2d>
 8009830:	a311      	add	r3, pc, #68	; (adr r3, 8009878 <SlalomLeft+0x1e0>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7fe ff41 	bl	80086bc <__aeabi_ddiv>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7fe fc5b 	bl	80080fc <__adddf3>
 8009846:	4603      	mov	r3, r0
 8009848:	460c      	mov	r4, r1
 800984a:	4625      	mov	r5, r4
 800984c:	461c      	mov	r4, r3
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <SlalomLeft+0x200>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <SlalomLeft+0x200>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	4413      	add	r3, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe fd9b 	bl	8008394 <__aeabi_i2d>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4620      	mov	r0, r4
 8009864:	4629      	mov	r1, r5
 8009866:	f7ff f88f 	bl	8008988 <__aeabi_dcmpgt>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1cb      	bne.n	8009808 <SlalomLeft+0x170>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009870:	bf00      	nop
 8009872:	3728      	adds	r7, #40	; 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bdb0      	pop	{r4, r5, r7, pc}
 8009878:	317249d5 	.word	0x317249d5
 800987c:	3f502de0 	.word	0x3f502de0
 8009880:	20000000 	.word	0x20000000
 8009884:	40c00000 	.word	0x40c00000
 8009888:	bc23d70a 	.word	0xbc23d70a
 800988c:	3f060a92 	.word	0x3f060a92
 8009890:	3f860a92 	.word	0x3f860a92
 8009894:	3fc90fdb 	.word	0x3fc90fdb
 8009898:	20000288 	.word	0x20000288
 800989c:	200002b0 	.word	0x200002b0
 80098a0:	200002b4 	.word	0x200002b4
 80098a4:	2000029c 	.word	0x2000029c
 80098a8:	20000298 	.word	0x20000298
 80098ac:	00000000 	.word	0x00000000

080098b0 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 80098b0:	b5b0      	push	{r4, r5, r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80098ba:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 80098c4:	4b34      	ldr	r3, [pc, #208]	; (8009998 <Accel+0xe8>)
 80098c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80098ca:	ed97 7a00 	vldr	s14, [r7]
 80098ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d2:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f7fe fd6e 	bl	80083b8 <__aeabi_f2d>
 80098dc:	a32a      	add	r3, pc, #168	; (adr r3, 8009988 <Accel+0xd8>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7fe fdc1 	bl	8008468 <__aeabi_dmul>
 80098e6:	4603      	mov	r3, r0
 80098e8:	460c      	mov	r4, r1
 80098ea:	4625      	mov	r5, r4
 80098ec:	461c      	mov	r4, r3
 80098ee:	6978      	ldr	r0, [r7, #20]
 80098f0:	f7fe fd62 	bl	80083b8 <__aeabi_f2d>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4620      	mov	r0, r4
 80098fa:	4629      	mov	r1, r5
 80098fc:	f7fe fdb4 	bl	8008468 <__aeabi_dmul>
 8009900:	4603      	mov	r3, r0
 8009902:	460c      	mov	r4, r1
 8009904:	4625      	mov	r5, r4
 8009906:	461c      	mov	r4, r3
 8009908:	edd7 7a01 	vldr	s15, [r7, #4]
 800990c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009910:	ee17 0a90 	vmov	r0, s15
 8009914:	f7fe fd50 	bl	80083b8 <__aeabi_f2d>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7fe fecc 	bl	80086bc <__aeabi_ddiv>
 8009924:	4603      	mov	r3, r0
 8009926:	460c      	mov	r4, r1
 8009928:	4618      	mov	r0, r3
 800992a:	4621      	mov	r1, r4
 800992c:	f7ff f874 	bl	8008a18 <__aeabi_d2f>
 8009930:	4602      	mov	r2, r0
 8009932:	4b1a      	ldr	r3, [pc, #104]	; (800999c <Accel+0xec>)
 8009934:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009936:	edd7 7a01 	vldr	s15, [r7, #4]
 800993a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800993e:	ee17 0a90 	vmov	r0, s15
 8009942:	f7fe fd39 	bl	80083b8 <__aeabi_f2d>
 8009946:	a312      	add	r3, pc, #72	; (adr r3, 8009990 <Accel+0xe0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7fe feb6 	bl	80086bc <__aeabi_ddiv>
 8009950:	4603      	mov	r3, r0
 8009952:	460c      	mov	r4, r1
 8009954:	4618      	mov	r0, r3
 8009956:	4621      	mov	r1, r4
 8009958:	f7ff f836 	bl	80089c8 <__aeabi_d2iz>
 800995c:	4603      	mov	r3, r0
 800995e:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8009960:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <Accel+0xf0>)
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	while( ( keep_pulse ) > ( total_pulse[BODY] ) )
 800996a:	bf00      	nop
 800996c:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <Accel+0xf0>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	429a      	cmp	r2, r3
 8009974:	dcfa      	bgt.n	800996c <Accel+0xbc>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			keep_counter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	acceleration = 0;
 8009976:	4b09      	ldr	r3, [pc, #36]	; (800999c <Accel+0xec>)
 8009978:	f04f 0200 	mov.w	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800997e:	bf00      	nop
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bdb0      	pop	{r4, r5, r7, pc}
 8009986:	bf00      	nop
 8009988:	d2f1a9fc 	.word	0xd2f1a9fc
 800998c:	3f50624d 	.word	0x3f50624d
 8009990:	317249d5 	.word	0x317249d5
 8009994:	3f502de0 	.word	0x3f502de0
 8009998:	2000029c 	.word	0x2000029c
 800999c:	200002ac 	.word	0x200002ac
 80099a0:	20000288 	.word	0x20000288
 80099a4:	00000000 	.word	0x00000000

080099a8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80099a8:	b5b0      	push	{r4, r5, r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80099b2:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 80099b6:	f04f 0300 	mov.w	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 80099bc:	4b46      	ldr	r3, [pc, #280]	; (8009ad8 <Decel+0x130>)
 80099be:	ed93 7a02 	vldr	s14, [r3, #8]
 80099c2:	edd7 7a00 	vldr	s15, [r7]
 80099c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ca:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80099ce:	6978      	ldr	r0, [r7, #20]
 80099d0:	f7fe fcf2 	bl	80083b8 <__aeabi_f2d>
 80099d4:	a33c      	add	r3, pc, #240	; (adr r3, 8009ac8 <Decel+0x120>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7fe fd45 	bl	8008468 <__aeabi_dmul>
 80099de:	4603      	mov	r3, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	4625      	mov	r5, r4
 80099e4:	461c      	mov	r4, r3
 80099e6:	6978      	ldr	r0, [r7, #20]
 80099e8:	f7fe fce6 	bl	80083b8 <__aeabi_f2d>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7fe fd38 	bl	8008468 <__aeabi_dmul>
 80099f8:	4603      	mov	r3, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	4625      	mov	r5, r4
 80099fe:	461c      	mov	r4, r3
 8009a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a08:	ee17 0a90 	vmov	r0, s15
 8009a0c:	f7fe fcd4 	bl	80083b8 <__aeabi_f2d>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7fe fe50 	bl	80086bc <__aeabi_ddiv>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4618      	mov	r0, r3
 8009a22:	4621      	mov	r1, r4
 8009a24:	f7fe fff8 	bl	8008a18 <__aeabi_d2f>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef1 7a67 	vneg.f32	s15, s15
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <Decel+0x134>)
 8009a34:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a40:	ee17 0a90 	vmov	r0, s15
 8009a44:	f7fe fcb8 	bl	80083b8 <__aeabi_f2d>
 8009a48:	a321      	add	r3, pc, #132	; (adr r3, 8009ad0 <Decel+0x128>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7fe fe35 	bl	80086bc <__aeabi_ddiv>
 8009a52:	4603      	mov	r3, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	4618      	mov	r0, r3
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f7fe ffb5 	bl	80089c8 <__aeabi_d2iz>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8009a62:	4b1f      	ldr	r3, [pc, #124]	; (8009ae0 <Decel+0x138>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]

	while( (	(photo[FR]+photo[FL]) < 2600) && ( keep_pulse ) > ( total_pulse[BODY]) )
 8009a6c:	e007      	b.n	8009a7e <Decel+0xd6>
//		if( (abs(TIM4->CNT - INITIAL_PULSE) >= 29000) )
//		{
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			keep_counter[RIGHT] = INITIAL_PULSE;
//		}
		if(target_velocity[BODY] <= 0)
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <Decel+0x130>)
 8009a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	d914      	bls.n	8009aa8 <Decel+0x100>
	while( (	(photo[FR]+photo[FL]) < 2600) && ( keep_pulse ) > ( total_pulse[BODY]) )
 8009a7e:	4b19      	ldr	r3, [pc, #100]	; (8009ae4 <Decel+0x13c>)
 8009a80:	ed93 7a03 	vldr	s14, [r3, #12]
 8009a84:	4b17      	ldr	r3, [pc, #92]	; (8009ae4 <Decel+0x13c>)
 8009a86:	edd3 7a00 	vldr	s15, [r3]
 8009a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a8e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8009ae8 <Decel+0x140>
 8009a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9a:	d506      	bpl.n	8009aaa <Decel+0x102>
 8009a9c:	4b10      	ldr	r3, [pc, #64]	; (8009ae0 <Decel+0x138>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	dce3      	bgt.n	8009a6e <Decel+0xc6>
 8009aa6:	e000      	b.n	8009aaa <Decel+0x102>
			break;
 8009aa8:	bf00      	nop
	}
	target_velocity[BODY] = 0;
 8009aaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <Decel+0x130>)
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	609a      	str	r2, [r3, #8]
	acceleration = 0;
 8009ab2:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <Decel+0x134>)
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8009acc:	3f50624d 	.word	0x3f50624d
 8009ad0:	317249d5 	.word	0x317249d5
 8009ad4:	3f502de0 	.word	0x3f502de0
 8009ad8:	2000029c 	.word	0x2000029c
 8009adc:	200002ac 	.word	0x200002ac
 8009ae0:	20000288 	.word	0x20000288
 8009ae4:	20000250 	.word	0x20000250
 8009ae8:	45228000 	.word	0x45228000
 8009aec:	00000000 	.word	0x00000000

08009af0 <GoStraight>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。

void GoStraight(float move_distance,  float explore_speed, float accel)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8009afa:	edc7 0a02 	vstr	s1, [r7, #8]
 8009afe:	ed87 1a01 	vstr	s2, [r7, #4]
	//v = v0 + at
	//x = v0t + 0.5*at^2
		//target_velocity[BODY] = explore_speed;
	//加速なら
//	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
	explore_speed += accel;
 8009b02:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b0e:	edc7 7a02 	vstr	s15, [r7, #8]

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009b12:	edd7 0a02 	vldr	s1, [r7, #8]
 8009b16:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8009b90 <GoStraight+0xa0>
 8009b1a:	f7ff fec9 	bl	80098b0 <Accel>
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	int target_pulse = (int)(2*(move_distance-45)/MM_PER_PULSE);
 8009b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b22:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009b90 <GoStraight+0xa0>
 8009b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b2e:	ee17 0a90 	vmov	r0, s15
 8009b32:	f7fe fc41 	bl	80083b8 <__aeabi_f2d>
 8009b36:	a314      	add	r3, pc, #80	; (adr r3, 8009b88 <GoStraight+0x98>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7fe fdbe 	bl	80086bc <__aeabi_ddiv>
 8009b40:	4603      	mov	r3, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	4618      	mov	r0, r3
 8009b46:	4621      	mov	r1, r4
 8009b48:	f7fe ff3e 	bl	80089c8 <__aeabi_d2iz>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	617b      	str	r3, [r7, #20]
	int keep_pulse = total_pulse[BODY];
 8009b50:	4b10      	ldr	r3, [pc, #64]	; (8009b94 <GoStraight+0xa4>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	613b      	str	r3, [r7, #16]

	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 8009b56:	e00b      	b.n	8009b70 <GoStraight+0x80>
	{
		//最初の45mmで加速をストップ

		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if( ( keep_pulse + (int)(2*45/MM_PER_PULSE) )  <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8009b5e:	3303      	adds	r3, #3
 8009b60:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <GoStraight+0xa4>)
 8009b62:	6892      	ldr	r2, [r2, #8]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	dc03      	bgt.n	8009b70 <GoStraight+0x80>
		{
			acceleration = 0;
 8009b68:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <GoStraight+0xa8>)
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	441a      	add	r2, r3
 8009b76:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <GoStraight+0xa4>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	dcec      	bgt.n	8009b58 <GoStraight+0x68>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd90      	pop	{r4, r7, pc}
 8009b86:	bf00      	nop
 8009b88:	317249d5 	.word	0x317249d5
 8009b8c:	3f502de0 	.word	0x3f502de0
 8009b90:	42340000 	.word	0x42340000
 8009b94:	20000288 	.word	0x20000288
 8009b98:	200002ac 	.word	0x200002ac

08009b9c <TurnRight>:
void TurnRight(char mode)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	2b53      	cmp	r3, #83	; 0x53
 8009baa:	d020      	beq.n	8009bee <TurnRight+0x52>
 8009bac:	2b54      	cmp	r3, #84	; 0x54
 8009bae:	d000      	beq.n	8009bb2 <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 8009bb0:	e020      	b.n	8009bf4 <TurnRight+0x58>
		Decel(40, 0);
 8009bb2:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009bfc <TurnRight+0x60>
 8009bb6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009c00 <TurnRight+0x64>
 8009bba:	f7ff fef5 	bl	80099a8 <Decel>
		HAL_Delay(500);
 8009bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bc2:	f003 fd93 	bl	800d6ec <HAL_Delay>
		Rotate( 90 , M_PI);
 8009bc6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009c04 <TurnRight+0x68>
 8009bca:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009c08 <TurnRight+0x6c>
 8009bce:	f7ff fc09 	bl	80093e4 <Rotate>
		HAL_Delay(500);
 8009bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bd6:	f003 fd89 	bl	800d6ec <HAL_Delay>
		Accel(40, explore_velocity);
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <TurnRight+0x70>)
 8009bdc:	edd3 7a00 	vldr	s15, [r3]
 8009be0:	eef0 0a67 	vmov.f32	s1, s15
 8009be4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009c00 <TurnRight+0x64>
 8009be8:	f7ff fe62 	bl	80098b0 <Accel>
		break;
 8009bec:	e002      	b.n	8009bf4 <TurnRight+0x58>
		SlalomRight();
 8009bee:	f7ff fc47 	bl	8009480 <SlalomRight>
		break;
 8009bf2:	bf00      	nop
	}


}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	00000000 	.word	0x00000000
 8009c00:	42200000 	.word	0x42200000
 8009c04:	40490fdb 	.word	0x40490fdb
 8009c08:	42b40000 	.word	0x42b40000
 8009c0c:	20000000 	.word	0x20000000

08009c10 <TurnLeft>:
void TurnLeft(char mode)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	2b53      	cmp	r3, #83	; 0x53
 8009c1e:	d020      	beq.n	8009c62 <TurnLeft+0x52>
 8009c20:	2b54      	cmp	r3, #84	; 0x54
 8009c22:	d000      	beq.n	8009c26 <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 8009c24:	e020      	b.n	8009c68 <TurnLeft+0x58>
		Decel(40, 0);
 8009c26:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009c70 <TurnLeft+0x60>
 8009c2a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009c74 <TurnLeft+0x64>
 8009c2e:	f7ff febb 	bl	80099a8 <Decel>
		HAL_Delay(500);
 8009c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c36:	f003 fd59 	bl	800d6ec <HAL_Delay>
		Rotate( 90 , -M_PI);
 8009c3a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009c78 <TurnLeft+0x68>
 8009c3e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009c7c <TurnLeft+0x6c>
 8009c42:	f7ff fbcf 	bl	80093e4 <Rotate>
		HAL_Delay(500);
 8009c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c4a:	f003 fd4f 	bl	800d6ec <HAL_Delay>
		Accel(40, explore_velocity);
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <TurnLeft+0x70>)
 8009c50:	edd3 7a00 	vldr	s15, [r3]
 8009c54:	eef0 0a67 	vmov.f32	s1, s15
 8009c58:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009c74 <TurnLeft+0x64>
 8009c5c:	f7ff fe28 	bl	80098b0 <Accel>
		break;
 8009c60:	e002      	b.n	8009c68 <TurnLeft+0x58>
		SlalomLeft();
 8009c62:	f7ff fd19 	bl	8009698 <SlalomLeft>
		break;
 8009c66:	bf00      	nop
	}

}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	00000000 	.word	0x00000000
 8009c74:	42200000 	.word	0x42200000
 8009c78:	c0490fdb 	.word	0xc0490fdb
 8009c7c:	42b40000 	.word	0x42b40000
 8009c80:	20000000 	.word	0x20000000

08009c84 <GoBack>:
void GoBack()
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 8009c88:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009ce4 <GoBack+0x60>
 8009c8c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009ce8 <GoBack+0x64>
 8009c90:	f7ff fe8a 	bl	80099a8 <Decel>
	HAL_Delay(500);
 8009c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c98:	f003 fd28 	bl	800d6ec <HAL_Delay>
	//補正して
	Calib();
 8009c9c:	f7ff fbe8 	bl	8009470 <Calib>
	//回転して
	Rotate(90, M_PI);//もしくは二回とも左
 8009ca0:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009cec <GoBack+0x68>
 8009ca4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009cf0 <GoBack+0x6c>
 8009ca8:	f7ff fb9c 	bl	80093e4 <Rotate>
	HAL_Delay(500);
 8009cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cb0:	f003 fd1c 	bl	800d6ec <HAL_Delay>
	//補正して
	Calib();
 8009cb4:	f7ff fbdc 	bl	8009470 <Calib>
	//回転して
	Rotate(90, M_PI);
 8009cb8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009cec <GoBack+0x68>
 8009cbc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009cf0 <GoBack+0x6c>
 8009cc0:	f7ff fb90 	bl	80093e4 <Rotate>
	HAL_Delay(500);
 8009cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cc8:	f003 fd10 	bl	800d6ec <HAL_Delay>
	//加速する
	Accel(45, explore_velocity);
 8009ccc:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <GoBack+0x70>)
 8009cce:	edd3 7a00 	vldr	s15, [r3]
 8009cd2:	eef0 0a67 	vmov.f32	s1, s15
 8009cd6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009ce8 <GoBack+0x64>
 8009cda:	f7ff fde9 	bl	80098b0 <Accel>
	//ここまでで目標走行距離を完了する

}
 8009cde:	bf00      	nop
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	00000000 	.word	0x00000000
 8009ce8:	42340000 	.word	0x42340000
 8009cec:	40490fdb 	.word	0x40490fdb
 8009cf0:	42b40000 	.word	0x42b40000
 8009cf4:	20000000 	.word	0x20000000

08009cf8 <SelectAction>:


//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char direction)	//前後左右であらわす
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(direction)
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	3b42      	subs	r3, #66	; 0x42
 8009d06:	2b11      	cmp	r3, #17
 8009d08:	d840      	bhi.n	8009d8c <SelectAction+0x94>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <SelectAction+0x18>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d87 	.word	0x08009d87
 8009d14:	08009d8d 	.word	0x08009d8d
 8009d18:	08009d8d 	.word	0x08009d8d
 8009d1c:	08009d8d 	.word	0x08009d8d
 8009d20:	08009d8d 	.word	0x08009d8d
 8009d24:	08009d8d 	.word	0x08009d8d
 8009d28:	08009d8d 	.word	0x08009d8d
 8009d2c:	08009d8d 	.word	0x08009d8d
 8009d30:	08009d8d 	.word	0x08009d8d
 8009d34:	08009d8d 	.word	0x08009d8d
 8009d38:	08009d7f 	.word	0x08009d7f
 8009d3c:	08009d8d 	.word	0x08009d8d
 8009d40:	08009d8d 	.word	0x08009d8d
 8009d44:	08009d8d 	.word	0x08009d8d
 8009d48:	08009d8d 	.word	0x08009d8d
 8009d4c:	08009d8d 	.word	0x08009d8d
 8009d50:	08009d77 	.word	0x08009d77
 8009d54:	08009d59 	.word	0x08009d59
	{
	//直進
	case 'S':
		GoStraight(90, explore_velocity, add_velocity);
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <SelectAction+0xa0>)
 8009d5a:	edd3 7a00 	vldr	s15, [r3]
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <SelectAction+0xa4>)
 8009d60:	ed93 7a00 	vldr	s14, [r3]
 8009d64:	eeb0 1a47 	vmov.f32	s2, s14
 8009d68:	eef0 0a67 	vmov.f32	s1, s15
 8009d6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009da0 <SelectAction+0xa8>
 8009d70:	f7ff febe 	bl	8009af0 <GoStraight>
		break;
 8009d74:	e00b      	b.n	8009d8e <SelectAction+0x96>
	//右方向
	case 'R':	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight('T');
 8009d76:	2054      	movs	r0, #84	; 0x54
 8009d78:	f7ff ff10 	bl	8009b9c <TurnRight>
		break;
 8009d7c:	e007      	b.n	8009d8e <SelectAction+0x96>
	//左方向
	case 'L':
		TurnLeft('T');
 8009d7e:	2054      	movs	r0, #84	; 0x54
 8009d80:	f7ff ff46 	bl	8009c10 <TurnLeft>
		break;
 8009d84:	e003      	b.n	8009d8e <SelectAction+0x96>
	case 'B':
		GoBack();	//Uターン
 8009d86:	f7ff ff7d 	bl	8009c84 <GoBack>
		break;
 8009d8a:	e000      	b.n	8009d8e <SelectAction+0x96>


	default :
		break;
 8009d8c:	bf00      	nop

	}
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000000 	.word	0x20000000
 8009d9c:	200002a8 	.word	0x200002a8
 8009da0:	42b40000 	.word	0x42b40000

08009da4 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定
	//カウンタをリセットするのは別のところ
	int current_pulse = *timer_counter;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	60fb      	str	r3, [r7, #12]
	int pulse_displacement = -1* (current_pulse - initial_pulse);
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	60bb      	str	r3, [r7, #8]
	//前回値として保存

//	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff ffe2 	bl	8009da4 <InitPulse>

	return pulse_displacement;
 8009de0:	68bb      	ldr	r3, [r7, #8]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8009dfc:	4a2c      	ldr	r2, [pc, #176]	; (8009eb0 <GetWallDataAverage+0xc4>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bfb8      	it	lt
 8009e0c:	425b      	neglt	r3, r3
 8009e0e:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8009e10:	4927      	ldr	r1, [pc, #156]	; (8009eb0 <GetWallDataAverage+0xc4>)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8009e1a:	4a26      	ldr	r2, [pc, #152]	; (8009eb4 <GetWallDataAverage+0xc8>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	441a      	add	r2, r3
 8009e26:	4923      	ldr	r1, [pc, #140]	; (8009eb4 <GetWallDataAverage+0xc8>)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8009e2e:	4a22      	ldr	r2, [pc, #136]	; (8009eb8 <GetWallDataAverage+0xcc>)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	491f      	ldr	r1, [pc, #124]	; (8009eb8 <GetWallDataAverage+0xcc>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8009e40:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <GetWallDataAverage+0xcc>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d121      	bne.n	8009e92 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8009e4e:	4a19      	ldr	r2, [pc, #100]	; (8009eb4 <GetWallDataAverage+0xc8>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e5e:	4a16      	ldr	r2, [pc, #88]	; (8009eb8 <GetWallDataAverage+0xcc>)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e72:	4a12      	ldr	r2, [pc, #72]	; (8009ebc <GetWallDataAverage+0xd0>)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 8009e7e:	4a0d      	ldr	r2, [pc, #52]	; (8009eb4 <GetWallDataAverage+0xc8>)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2100      	movs	r1, #0
 8009e84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8009e88:	4a0b      	ldr	r2, [pc, #44]	; (8009eb8 <GetWallDataAverage+0xcc>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 8009e92:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <GetWallDataAverage+0xd0>)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	ee07 3a90 	vmov	s15, r3
}
 8009ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	200001fc 	.word	0x200001fc
 8009eb4:	2000020c 	.word	0x2000020c
 8009eb8:	2000021c 	.word	0x2000021c
 8009ebc:	2000022c 	.word	0x2000022c

08009ec0 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8009ecc:	edc7 0a01 	vstr	s1, [r7, #4]
 8009ed0:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8009ed4:	f04f 0300 	mov.w	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ef0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009ef4:	ed97 7a00 	vldr	s14, [r7]
 8009ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efc:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	ee07 3a90 	vmov	s15, r3
}
 8009f06:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009f22:	2300      	movs	r3, #0
 8009f24:	60bb      	str	r3, [r7, #8]
 8009f26:	e007      	b.n	8009f38 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	fb02 f303 	mul.w	r3, r2, r3
 8009f30:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	3301      	adds	r3, #1
 8009f36:	60bb      	str	r3, [r7, #8]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	dbf3      	blt.n	8009f28 <IntegerPower+0x14>
	}
	return pattern_num;
 8009f40:	68fb      	ldr	r3, [r7, #12]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b08b      	sub	sp, #44	; 0x2c
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	ed87 0a03 	vstr	s0, [r7, #12]
 8009f58:	edc7 0a02 	vstr	s1, [r7, #8]
 8009f5c:	ed87 1a01 	vstr	s2, [r7, #4]
 8009f60:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 8009f62:	edd7 6a03 	vldr	s13, [r7, #12]
 8009f66:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 8009f72:	edd7 6a02 	vldr	s13, [r7, #8]
 8009f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f7e:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 8009f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f86:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	ee07 3a90 	vmov	s15, r3
 8009f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	623b      	str	r3, [r7, #32]
 8009fa8:	e018      	b.n	8009fdc <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8009fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd0:	db01      	blt.n	8009fd6 <GetBatteryLevel+0x88>
		{
			pattern = i;
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	623b      	str	r3, [r7, #32]
 8009fdc:	6a3a      	ldr	r2, [r7, #32]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	dbe2      	blt.n	8009faa <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	372c      	adds	r7, #44	; 0x2c
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <TimeMonitor>:
int timer=0, t=0;

//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 8009ff6:	bf00      	nop
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <GetDataIMU>:

double GetDataIMU(){// IMUの値を取
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	//angle = imu_angle * 180 / PI;

	  return imu_accel;
#else
		double  LPF=0,/*imu_pre_angle=0,*/ imu_accel=0; //imu_pre_accel=0;
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	e9c7 2300 	strd	r2, r3, [r7]
		static double last=0;
	    read_gyro_data();
 800a01e:	f003 f819 	bl	800d054 <read_gyro_data>
	    read_accel_data();
 800a022:	f003 f84f 	bl	800d0c4 <read_accel_data>
	    //atan2(za,xa);
	    imu_accel =  ( ( (double)zg - zg_offset )/16.4) * M_PI /180;//rad/s or rad/0.001s
 800a026:	4b2c      	ldr	r3, [pc, #176]	; (800a0d8 <GetDataIMU+0xd8>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe f9b1 	bl	8008394 <__aeabi_i2d>
 800a032:	4b2a      	ldr	r3, [pc, #168]	; (800a0dc <GetDataIMU+0xdc>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	f7fe f85e 	bl	80080f8 <__aeabi_dsub>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4610      	mov	r0, r2
 800a042:	4619      	mov	r1, r3
 800a044:	a31e      	add	r3, pc, #120	; (adr r3, 800a0c0 <GetDataIMU+0xc0>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f7fe fb37 	bl	80086bc <__aeabi_ddiv>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4610      	mov	r0, r2
 800a054:	4619      	mov	r1, r3
 800a056:	a31c      	add	r3, pc, #112	; (adr r3, 800a0c8 <GetDataIMU+0xc8>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7fe fa04 	bl	8008468 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <GetDataIMU+0xe0>)
 800a06e:	f7fe fb25 	bl	80086bc <__aeabi_ddiv>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	e9c7 2300 	strd	r2, r3, [r7]
	    LPF = lowpass_filter(imu_accel, last,0.01);
 800a07a:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <GetDataIMU+0xe4>)
 800a07c:	ed93 7b00 	vldr	d7, [r3]
 800a080:	ed9f 2b13 	vldr	d2, [pc, #76]	; 800a0d0 <GetDataIMU+0xd0>
 800a084:	eeb0 1a47 	vmov.f32	s2, s14
 800a088:	eef0 1a67 	vmov.f32	s3, s15
 800a08c:	ed97 0b00 	vldr	d0, [r7]
 800a090:	f003 f8e4 	bl	800d25c <lowpass_filter>
 800a094:	ed87 0b02 	vstr	d0, [r7, #8]
	    //imu_angle += T1*LPF;
	    last = imu_accel;
 800a098:	4912      	ldr	r1, [pc, #72]	; (800a0e4 <GetDataIMU+0xe4>)
 800a09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a09e:	e9c1 2300 	strd	r2, r3, [r1]
		//imu_pre_accel = imu_accel;
		//imu_pre_angle = imu_angle;
		//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
		//Body_angle = imu_angle * 180 / PI;
		  return -LPF;
 800a0a2:	68bc      	ldr	r4, [r7, #8]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a0aa:	ec45 4b17 	vmov	d7, r4, r5
#endif
}
 800a0ae:	eeb0 0a47 	vmov.f32	s0, s14
 800a0b2:	eef0 0a67 	vmov.f32	s1, s15
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bdb0      	pop	{r4, r5, r7, pc}
 800a0bc:	f3af 8000 	nop.w
 800a0c0:	66666666 	.word	0x66666666
 800a0c4:	40306666 	.word	0x40306666
 800a0c8:	54442d18 	.word	0x54442d18
 800a0cc:	400921fb 	.word	0x400921fb
 800a0d0:	47ae147b 	.word	0x47ae147b
 800a0d4:	3f847ae1 	.word	0x3f847ae1
 800a0d8:	20000928 	.word	0x20000928
 800a0dc:	20000450 	.word	0x20000450
 800a0e0:	40668000 	.word	0x40668000
 800a0e4:	20000248 	.word	0x20000248

0800a0e8 <UpdatePhisicalDataFromEnc>:
void UpdatePhisicalDataFromEnc()
{
 800a0e8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ea:	af00      	add	r7, sp, #0

	//エンコーダパルスをどう扱うか。今のままだと1msでの変位が大きいと目標パルス量を大きく通り越してしまう。→速度の取得時にはリセットをしないで、前回のパルスからの差を取ればいいかも。
	//TIM3->CNT - INITIAL_PULSE <= target_pulse の間は直進。みたいなプログラムにして、breakした瞬間にパルスリセット。
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&keep_counter[LEFT]*/);
 800a0ec:	f247 512f 	movw	r1, #29999	; 0x752f
 800a0f0:	485d      	ldr	r0, [pc, #372]	; (800a268 <UpdatePhisicalDataFromEnc+0x180>)
 800a0f2:	f7ff fe65 	bl	8009dc0 <GetPulseDisplacement>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4b5c      	ldr	r3, [pc, #368]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a0fa:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&keep_counter[RIGHT]*/);
 800a0fc:	f247 512f 	movw	r1, #29999	; 0x752f
 800a100:	485b      	ldr	r0, [pc, #364]	; (800a270 <UpdatePhisicalDataFromEnc+0x188>)
 800a102:	f7ff fe5d 	bl	8009dc0 <GetPulseDisplacement>
 800a106:	4602      	mov	r2, r0
 800a108:	4b58      	ldr	r3, [pc, #352]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a10a:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 800a10c:	4b57      	ldr	r3, [pc, #348]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a118:	ee17 0a90 	vmov	r0, s15
 800a11c:	f7fe f94c 	bl	80083b8 <__aeabi_f2d>
 800a120:	a34d      	add	r3, pc, #308	; (adr r3, 800a258 <UpdatePhisicalDataFromEnc+0x170>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7fe f99f 	bl	8008468 <__aeabi_dmul>
 800a12a:	4603      	mov	r3, r0
 800a12c:	460c      	mov	r4, r1
 800a12e:	4618      	mov	r0, r3
 800a130:	4621      	mov	r1, r4
 800a132:	a34b      	add	r3, pc, #300	; (adr r3, 800a260 <UpdatePhisicalDataFromEnc+0x178>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7fe fac0 	bl	80086bc <__aeabi_ddiv>
 800a13c:	4603      	mov	r3, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	4618      	mov	r0, r3
 800a142:	4621      	mov	r1, r4
 800a144:	f7fe fc68 	bl	8008a18 <__aeabi_d2f>
 800a148:	4602      	mov	r2, r0
 800a14a:	4b4a      	ldr	r3, [pc, #296]	; (800a274 <UpdatePhisicalDataFromEnc+0x18c>)
 800a14c:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 800a14e:	4b47      	ldr	r3, [pc, #284]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	ee07 3a90 	vmov	s15, r3
 800a156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a15a:	ee17 0a90 	vmov	r0, s15
 800a15e:	f7fe f92b 	bl	80083b8 <__aeabi_f2d>
 800a162:	a33d      	add	r3, pc, #244	; (adr r3, 800a258 <UpdatePhisicalDataFromEnc+0x170>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7fe f97e 	bl	8008468 <__aeabi_dmul>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4618      	mov	r0, r3
 800a172:	4621      	mov	r1, r4
 800a174:	a33a      	add	r3, pc, #232	; (adr r3, 800a260 <UpdatePhisicalDataFromEnc+0x178>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7fe fa9f 	bl	80086bc <__aeabi_ddiv>
 800a17e:	4603      	mov	r3, r0
 800a180:	460c      	mov	r4, r1
 800a182:	4618      	mov	r0, r3
 800a184:	4621      	mov	r1, r4
 800a186:	f7fe fc47 	bl	8008a18 <__aeabi_d2f>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b39      	ldr	r3, [pc, #228]	; (800a274 <UpdatePhisicalDataFromEnc+0x18c>)
 800a18e:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 800a190:	4b39      	ldr	r3, [pc, #228]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4b35      	ldr	r3, [pc, #212]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	4a37      	ldr	r2, [pc, #220]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a19c:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 800a19e:	4b36      	ldr	r3, [pc, #216]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	4b32      	ldr	r3, [pc, #200]	; (800a26c <UpdatePhisicalDataFromEnc+0x184>)
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	4a33      	ldr	r2, [pc, #204]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a1aa:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 800a1ac:	4b32      	ldr	r3, [pc, #200]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b31      	ldr	r3, [pc, #196]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4a30      	ldr	r2, [pc, #192]	; (800a278 <UpdatePhisicalDataFromEnc+0x190>)
 800a1b8:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	//angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
	imu_ang_v = GetDataIMU();
 800a1ba:	f7ff ff21 	bl	800a000 <GetDataIMU>
 800a1be:	eeb0 7a40 	vmov.f32	s14, s0
 800a1c2:	eef0 7a60 	vmov.f32	s15, s1
 800a1c6:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <UpdatePhisicalDataFromEnc+0x194>)
 800a1c8:	ed83 7b00 	vstr	d7, [r3]
	angular_v = (float)imu_ang_v;
 800a1cc:	4b2b      	ldr	r3, [pc, #172]	; (800a27c <UpdatePhisicalDataFromEnc+0x194>)
 800a1ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	f7fe fc1f 	bl	8008a18 <__aeabi_d2f>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4b28      	ldr	r3, [pc, #160]	; (800a280 <UpdatePhisicalDataFromEnc+0x198>)
 800a1de:	601a      	str	r2, [r3, #0]
	//角度 rad/msを積算
	angle += angular_v * T1;
 800a1e0:	4b28      	ldr	r3, [pc, #160]	; (800a284 <UpdatePhisicalDataFromEnc+0x19c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe f8e7 	bl	80083b8 <__aeabi_f2d>
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	4b24      	ldr	r3, [pc, #144]	; (800a280 <UpdatePhisicalDataFromEnc+0x198>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe f8e0 	bl	80083b8 <__aeabi_f2d>
 800a1f8:	a319      	add	r3, pc, #100	; (adr r3, 800a260 <UpdatePhisicalDataFromEnc+0x178>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7fe f933 	bl	8008468 <__aeabi_dmul>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f7fd ff77 	bl	80080fc <__adddf3>
 800a20e:	4603      	mov	r3, r0
 800a210:	460c      	mov	r4, r1
 800a212:	4618      	mov	r0, r3
 800a214:	4621      	mov	r1, r4
 800a216:	f7fe fbff 	bl	8008a18 <__aeabi_d2f>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b19      	ldr	r3, [pc, #100]	; (800a284 <UpdatePhisicalDataFromEnc+0x19c>)
 800a21e:	601a      	str	r2, [r3, #0]
	imu_angle += imu_ang_v*T1;
 800a220:	4b16      	ldr	r3, [pc, #88]	; (800a27c <UpdatePhisicalDataFromEnc+0x194>)
 800a222:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a226:	a30e      	add	r3, pc, #56	; (adr r3, 800a260 <UpdatePhisicalDataFromEnc+0x178>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7fe f91c 	bl	8008468 <__aeabi_dmul>
 800a230:	4603      	mov	r3, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4618      	mov	r0, r3
 800a236:	4621      	mov	r1, r4
 800a238:	4b13      	ldr	r3, [pc, #76]	; (800a288 <UpdatePhisicalDataFromEnc+0x1a0>)
 800a23a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a23e:	461a      	mov	r2, r3
 800a240:	4623      	mov	r3, r4
 800a242:	f7fd ff5b 	bl	80080fc <__adddf3>
 800a246:	4603      	mov	r3, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	4a0f      	ldr	r2, [pc, #60]	; (800a288 <UpdatePhisicalDataFromEnc+0x1a0>)
 800a24c:	e9c2 3400 	strd	r3, r4, [r2]
	//ここまでがエンコーダからのUpdate
}
 800a250:	bf00      	nop
 800a252:	bdb0      	pop	{r4, r5, r7, pc}
 800a254:	f3af 8000 	nop.w
 800a258:	317249d5 	.word	0x317249d5
 800a25c:	3f502de0 	.word	0x3f502de0
 800a260:	d2f1a9fc 	.word	0xd2f1a9fc
 800a264:	3f50624d 	.word	0x3f50624d
 800a268:	40000424 	.word	0x40000424
 800a26c:	20000274 	.word	0x20000274
 800a270:	40000824 	.word	0x40000824
 800a274:	2000027c 	.word	0x2000027c
 800a278:	20000288 	.word	0x20000288
 800a27c:	20000508 	.word	0x20000508
 800a280:	20000294 	.word	0x20000294
 800a284:	20000298 	.word	0x20000298
 800a288:	20000510 	.word	0x20000510

0800a28c <ControlMotor>:
void ControlMotor()
{
 800a28c:	b5b0      	push	{r4, r5, r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 800a292:	f7ff ff29 	bl	800a0e8 <UpdatePhisicalDataFromEnc>
	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	//減速させすぎると、目標パルスに達する前にマイナスに振れてしまう

	target_velocity[BODY] += acceleration;
 800a296:	4b6b      	ldr	r3, [pc, #428]	; (800a444 <ControlMotor+0x1b8>)
 800a298:	ed93 7a02 	vldr	s14, [r3, #8]
 800a29c:	4b6a      	ldr	r3, [pc, #424]	; (800a448 <ControlMotor+0x1bc>)
 800a29e:	edd3 7a00 	vldr	s15, [r3]
 800a2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2a6:	4b67      	ldr	r3, [pc, #412]	; (800a444 <ControlMotor+0x1b8>)
 800a2a8:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 800a2ac:	4b67      	ldr	r3, [pc, #412]	; (800a44c <ControlMotor+0x1c0>)
 800a2ae:	ed93 7a00 	vldr	s14, [r3]
 800a2b2:	4b67      	ldr	r3, [pc, #412]	; (800a450 <ControlMotor+0x1c4>)
 800a2b4:	edd3 7a00 	vldr	s15, [r3]
 800a2b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2bc:	4b63      	ldr	r3, [pc, #396]	; (800a44c <ControlMotor+0x1c0>)
 800a2be:	edc3 7a00 	vstr	s15, [r3]

	if(target_angular_v == 0)
 800a2c2:	4b62      	ldr	r3, [pc, #392]	; (800a44c <ControlMotor+0x1c0>)
 800a2c4:	edd3 7a00 	vldr	s15, [r3]
 800a2c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d0:	d104      	bne.n	800a2dc <ControlMotor+0x50>
	{
		PIDChangeFlag(ANG_V, 1);
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	2004      	movs	r0, #4
 800a2d6:	f001 f8cb 	bl	800b470 <PIDChangeFlag>
 800a2da:	e003      	b.n	800a2e4 <ControlMotor+0x58>
	}
	else
	{
		PIDChangeFlag(ANG_V, 0);
 800a2dc:	2100      	movs	r1, #0
 800a2de:	2004      	movs	r0, #4
 800a2e0:	f001 f8c6 	bl	800b470 <PIDChangeFlag>
	}

	//壁制御を入れる条件
	//型壁制御は端の区画にいるとき。必ず。
	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 800a2e4:	4b57      	ldr	r3, [pc, #348]	; (800a444 <ControlMotor+0x1b8>)
 800a2e6:	edd3 7a02 	vldr	s15, [r3, #8]
 800a2ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2ee:	ee17 0a90 	vmov	r0, s15
 800a2f2:	f7fe f861 	bl	80083b8 <__aeabi_f2d>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	4b54      	ldr	r3, [pc, #336]	; (800a44c <ControlMotor+0x1c0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe f85a 	bl	80083b8 <__aeabi_f2d>
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	4b52      	ldr	r3, [pc, #328]	; (800a454 <ControlMotor+0x1c8>)
 800a30a:	f7fe f8ad 	bl	8008468 <__aeabi_dmul>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4620      	mov	r0, r4
 800a314:	4629      	mov	r1, r5
 800a316:	f7fd feef 	bl	80080f8 <__aeabi_dsub>
 800a31a:	4603      	mov	r3, r0
 800a31c:	460c      	mov	r4, r1
 800a31e:	4618      	mov	r0, r3
 800a320:	4621      	mov	r1, r4
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a32a:	f7fe f9c7 	bl	80086bc <__aeabi_ddiv>
 800a32e:	4603      	mov	r3, r0
 800a330:	460c      	mov	r4, r1
 800a332:	4618      	mov	r0, r3
 800a334:	4621      	mov	r1, r4
 800a336:	f7fe fb6f 	bl	8008a18 <__aeabi_d2f>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4b41      	ldr	r3, [pc, #260]	; (800a444 <ControlMotor+0x1b8>)
 800a33e:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 800a340:	4b42      	ldr	r3, [pc, #264]	; (800a44c <ControlMotor+0x1c0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe f837 	bl	80083b8 <__aeabi_f2d>
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	4b41      	ldr	r3, [pc, #260]	; (800a454 <ControlMotor+0x1c8>)
 800a350:	f7fe f88a 	bl	8008468 <__aeabi_dmul>
 800a354:	4603      	mov	r3, r0
 800a356:	460c      	mov	r4, r1
 800a358:	4625      	mov	r5, r4
 800a35a:	461c      	mov	r4, r3
 800a35c:	4b39      	ldr	r3, [pc, #228]	; (800a444 <ControlMotor+0x1b8>)
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe f829 	bl	80083b8 <__aeabi_f2d>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4620      	mov	r0, r4
 800a36c:	4629      	mov	r1, r5
 800a36e:	f7fd fec5 	bl	80080fc <__adddf3>
 800a372:	4603      	mov	r3, r0
 800a374:	460c      	mov	r4, r1
 800a376:	4618      	mov	r0, r3
 800a378:	4621      	mov	r1, r4
 800a37a:	f7fe fb4d 	bl	8008a18 <__aeabi_d2f>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b30      	ldr	r3, [pc, #192]	; (800a444 <ControlMotor+0x1b8>)
 800a382:	601a      	str	r2, [r3, #0]

	//目標角速度が0のときは角速度制御も入れる。
	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 800a384:	4b2f      	ldr	r3, [pc, #188]	; (800a444 <ControlMotor+0x1b8>)
 800a386:	edd3 7a00 	vldr	s15, [r3]
 800a38a:	4b33      	ldr	r3, [pc, #204]	; (800a458 <ControlMotor+0x1cc>)
 800a38c:	ed93 7a00 	vldr	s14, [r3]
 800a390:	eeb0 1a47 	vmov.f32	s2, s14
 800a394:	eef0 0a67 	vmov.f32	s1, s15
 800a398:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800a45c <ControlMotor+0x1d0>
 800a39c:	2000      	movs	r0, #0
 800a39e:	f001 f9af 	bl	800b700 <PIDControl>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <ControlMotor+0x1d4>)
 800a3a6:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 800a3a8:	4b26      	ldr	r3, [pc, #152]	; (800a444 <ControlMotor+0x1b8>)
 800a3aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3ae:	4b2a      	ldr	r3, [pc, #168]	; (800a458 <ControlMotor+0x1cc>)
 800a3b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800a3b4:	eeb0 1a47 	vmov.f32	s2, s14
 800a3b8:	eef0 0a67 	vmov.f32	s1, s15
 800a3bc:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800a45c <ControlMotor+0x1d0>
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	f001 f99d 	bl	800b700 <PIDControl>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	4b26      	ldr	r3, [pc, #152]	; (800a464 <ControlMotor+0x1d8>)
 800a3ca:	601a      	str	r2, [r3, #0]
	int straight_out=0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	607b      	str	r3, [r7, #4]
	//straight_out = PIDControl( ANG_V, T1, 0, angular_v);

	//PIDControl( B_VELO, T1, target, current, &left);
	wall_left_out = PIDControl( D_WALL, T1, photo[SL], photo[SR]+photo_diff);
 800a3d0:	4b25      	ldr	r3, [pc, #148]	; (800a468 <ControlMotor+0x1dc>)
 800a3d2:	edd3 6a02 	vldr	s13, [r3, #8]
 800a3d6:	4b24      	ldr	r3, [pc, #144]	; (800a468 <ControlMotor+0x1dc>)
 800a3d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a3dc:	4b23      	ldr	r3, [pc, #140]	; (800a46c <ControlMotor+0x1e0>)
 800a3de:	edd3 7a00 	vldr	s15, [r3]
 800a3e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3e6:	eeb0 1a67 	vmov.f32	s2, s15
 800a3ea:	eef0 0a66 	vmov.f32	s1, s13
 800a3ee:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800a45c <ControlMotor+0x1d0>
 800a3f2:	2003      	movs	r0, #3
 800a3f4:	f001 f984 	bl	800b700 <PIDControl>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <ControlMotor+0x1e4>)
 800a3fc:	601a      	str	r2, [r3, #0]

	wall_right_out = -wall_left_out;
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	; (800a470 <ControlMotor+0x1e4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	425b      	negs	r3, r3
 800a404:	4a1b      	ldr	r2, [pc, #108]	; (800a474 <ControlMotor+0x1e8>)
 800a406:	6013      	str	r3, [r2, #0]

	L_motor = straight_out + wall_left_out + velocity_left_out;
 800a408:	4b19      	ldr	r3, [pc, #100]	; (800a470 <ControlMotor+0x1e4>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	441a      	add	r2, r3
 800a410:	4b13      	ldr	r3, [pc, #76]	; (800a460 <ControlMotor+0x1d4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4413      	add	r3, r2
 800a416:	4a18      	ldr	r2, [pc, #96]	; (800a478 <ControlMotor+0x1ec>)
 800a418:	6013      	str	r3, [r2, #0]
	R_motor = -1*straight_out + wall_right_out + velocity_right_out;
 800a41a:	4b16      	ldr	r3, [pc, #88]	; (800a474 <ControlMotor+0x1e8>)
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	1ad2      	subs	r2, r2, r3
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <ControlMotor+0x1d8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4413      	add	r3, r2
 800a428:	4a14      	ldr	r2, [pc, #80]	; (800a47c <ControlMotor+0x1f0>)
 800a42a:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 800a42c:	4b12      	ldr	r3, [pc, #72]	; (800a478 <ControlMotor+0x1ec>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	4b12      	ldr	r3, [pc, #72]	; (800a47c <ControlMotor+0x1f0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f003 f85a 	bl	800d4f0 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bdb0      	pop	{r4, r5, r7, pc}
 800a444:	2000029c 	.word	0x2000029c
 800a448:	200002ac 	.word	0x200002ac
 800a44c:	200002b0 	.word	0x200002b0
 800a450:	200002b4 	.word	0x200002b4
 800a454:	40424000 	.word	0x40424000
 800a458:	2000027c 	.word	0x2000027c
 800a45c:	3a83126f 	.word	0x3a83126f
 800a460:	200002b8 	.word	0x200002b8
 800a464:	200002bc 	.word	0x200002bc
 800a468:	20000250 	.word	0x20000250
 800a46c:	20000270 	.word	0x20000270
 800a470:	200002c4 	.word	0x200002c4
 800a474:	200002c0 	.word	0x200002c0
 800a478:	200002c8 	.word	0x200002c8
 800a47c:	200002cc 	.word	0x200002cc

0800a480 <UpdatePhotoData>:

void UpdatePhotoData()
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a484:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <UpdatePhotoData+0x68>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2200      	movs	r2, #0
 800a48a:	4619      	mov	r1, r3
 800a48c:	200a      	movs	r0, #10
 800a48e:	f7ff fcad 	bl	8009dec <GetWallDataAverage>
 800a492:	eef0 7a40 	vmov.f32	s15, s0
 800a496:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <UpdatePhotoData+0x6c>)
 800a498:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a49c:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <UpdatePhotoData+0x68>)
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f7ff fca1 	bl	8009dec <GetWallDataAverage>
 800a4aa:	eef0 7a40 	vmov.f32	s15, s0
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <UpdatePhotoData+0x6c>)
 800a4b0:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4b4:	4b0e      	ldr	r3, [pc, #56]	; (800a4f0 <UpdatePhotoData+0x70>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	200a      	movs	r0, #10
 800a4be:	f7ff fc95 	bl	8009dec <GetWallDataAverage>
 800a4c2:	eef0 7a40 	vmov.f32	s15, s0
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <UpdatePhotoData+0x6c>)
 800a4c8:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4cc:	4b08      	ldr	r3, [pc, #32]	; (800a4f0 <UpdatePhotoData+0x70>)
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	200a      	movs	r0, #10
 800a4d6:	f7ff fc89 	bl	8009dec <GetWallDataAverage>
 800a4da:	eef0 7a40 	vmov.f32	s15, s0
 800a4de:	4b03      	ldr	r3, [pc, #12]	; (800a4ec <UpdatePhotoData+0x6c>)
 800a4e0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800a4e4:	bf00      	nop
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000438 	.word	0x20000438
 800a4ec:	20000250 	.word	0x20000250
 800a4f0:	20000444 	.word	0x20000444

0800a4f4 <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a0c      	ldr	r2, [pc, #48]	; (800a530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d103      	bne.n	800a50c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 800a504:	f7ff fd75 	bl	8009ff2 <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 800a508:	f7ff fec0 	bl	800a28c <ControlMotor>
	}

	if( htim == &htim8)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a09      	ldr	r2, [pc, #36]	; (800a534 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d108      	bne.n	800a526 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer += t;
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	4b08      	ldr	r3, [pc, #32]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4413      	add	r3, r2
 800a51e:	4a06      	ldr	r2, [pc, #24]	; (800a538 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a520:	6013      	str	r3, [r2, #0]
		//壁センサデータの更新だけ
		UpdatePhotoData();
 800a522:	f7ff ffad 	bl	800a480 <UpdatePhotoData>

	}
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20000844 	.word	0x20000844
 800a534:	200005bc 	.word	0x200005bc
 800a538:	2000023c 	.word	0x2000023c
 800a53c:	20000240 	.word	0x20000240

0800a540 <wall_store_running>:
	flash_store_init();

}
//壁データの書き込み(走行中)。修復用も作る。座標指定と書き込みデータ
void wall_store_running(uint8_t x, uint8_t y)
{
 800a540:	b590      	push	{r4, r7, lr}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	460a      	mov	r2, r1
 800a54a:	71fb      	strb	r3, [r7, #7]
 800a54c:	4613      	mov	r3, r2
 800a54e:	71bb      	strb	r3, [r7, #6]
	//xの数×4×区画数byte分アドレスオフセット
	//yの数×4byte分アドレスオフセット
	uint32_t address = start_adress_sector1;
 800a550:	4b2c      	ldr	r3, [pc, #176]	; (800a604 <wall_store_running+0xc4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]
	//1区画につき、4byte×4=16byte。xを1増やすと16byte先になる。yを1増やすと16byte×区画数分先になる。
	address += ( x*16) + (y*16*(NUMBER_OF_SQUARES) );//4×4区画とすると、(0,0)でスタートアドレス。1,
 800a556:	79f9      	ldrb	r1, [r7, #7]
 800a558:	79ba      	ldrb	r2, [r7, #6]
 800a55a:	4613      	mov	r3, r2
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	4413      	add	r3, r2
 800a560:	440b      	add	r3, r1
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	461a      	mov	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]

	//デフォが北(0)。時計回り
	FLASH_Write_Word(address+0, Wall[x][y].north);
 800a56c:	79fa      	ldrb	r2, [r7, #7]
 800a56e:	79b9      	ldrb	r1, [r7, #6]
 800a570:	4825      	ldr	r0, [pc, #148]	; (800a608 <wall_store_running+0xc8>)
 800a572:	4613      	mov	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	4413      	add	r3, r2
 800a578:	440b      	add	r3, r1
 800a57a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a57e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a582:	b2db      	uxtb	r3, r3
 800a584:	4619      	mov	r1, r3
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f002 fcba 	bl	800cf00 <FLASH_Write_Word>
	FLASH_Write_Word(address+4, Wall[x][y].east);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	1d1c      	adds	r4, r3, #4
 800a590:	79fa      	ldrb	r2, [r7, #7]
 800a592:	79b9      	ldrb	r1, [r7, #6]
 800a594:	481c      	ldr	r0, [pc, #112]	; (800a608 <wall_store_running+0xc8>)
 800a596:	4613      	mov	r3, r2
 800a598:	00db      	lsls	r3, r3, #3
 800a59a:	4413      	add	r3, r2
 800a59c:	440b      	add	r3, r1
 800a59e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a5a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f002 fca8 	bl	800cf00 <FLASH_Write_Word>
	FLASH_Write_Word(address+8, Wall[x][y].south);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f103 0408 	add.w	r4, r3, #8
 800a5b6:	79fa      	ldrb	r2, [r7, #7]
 800a5b8:	79b9      	ldrb	r1, [r7, #6]
 800a5ba:	4813      	ldr	r0, [pc, #76]	; (800a608 <wall_store_running+0xc8>)
 800a5bc:	4613      	mov	r3, r2
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	440b      	add	r3, r1
 800a5c4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a5c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f002 fc95 	bl	800cf00 <FLASH_Write_Word>
	FLASH_Write_Word(address+12, Wall[x][y].west);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f103 040c 	add.w	r4, r3, #12
 800a5dc:	79fa      	ldrb	r2, [r7, #7]
 800a5de:	79b9      	ldrb	r1, [r7, #6]
 800a5e0:	4809      	ldr	r0, [pc, #36]	; (800a608 <wall_store_running+0xc8>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a5ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f002 fc82 	bl	800cf00 <FLASH_Write_Word>

}
 800a5fc:	bf00      	nop
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	bd90      	pop	{r4, r7, pc}
 800a604:	08014e98 	.word	0x08014e98
 800a608:	20000518 	.word	0x20000518

0800a60c <wall_set>:
//壁の更新xyグローバル
void wall_set(uint8_t x, uint8_t y, float side_left, float side_right, float front_left, float front_right){
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b089      	sub	sp, #36	; 0x24
 800a610:	af00      	add	r7, sp, #0
 800a612:	4603      	mov	r3, r0
 800a614:	460a      	mov	r2, r1
 800a616:	ed87 0a04 	vstr	s0, [r7, #16]
 800a61a:	edc7 0a03 	vstr	s1, [r7, #12]
 800a61e:	ed87 1a02 	vstr	s2, [r7, #8]
 800a622:	edc7 1a01 	vstr	s3, [r7, #4]
 800a626:	75fb      	strb	r3, [r7, #23]
 800a628:	4613      	mov	r3, r2
 800a62a:	75bb      	strb	r3, [r7, #22]
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[my_direction] = (front_left + front_right)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800a62c:	ed97 7a02 	vldr	s14, [r7, #8]
 800a630:	edd7 7a01 	vldr	s15, [r7, #4]
 800a634:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a638:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a63c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a640:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a644:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64c:	bfcc      	ite	gt
 800a64e:	2301      	movgt	r3, #1
 800a650:	2300      	movle	r3, #0
 800a652:	b2da      	uxtb	r2, r3
 800a654:	4bbc      	ldr	r3, [pc, #752]	; (800a948 <wall_set+0x33c>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f107 0120 	add.w	r1, r7, #32
 800a65c:	440b      	add	r3, r1
 800a65e:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 1)%4] = side_right > RIGHT_WALL  ?  WALL :  NOWALL;
 800a662:	edd7 7a03 	vldr	s15, [r7, #12]
 800a666:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800a94c <wall_set+0x340>
 800a66a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	bfcc      	ite	gt
 800a674:	2301      	movgt	r3, #1
 800a676:	2300      	movle	r3, #0
 800a678:	b2d9      	uxtb	r1, r3
 800a67a:	4bb3      	ldr	r3, [pc, #716]	; (800a948 <wall_set+0x33c>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	425a      	negs	r2, r3
 800a682:	f003 0303 	and.w	r3, r3, #3
 800a686:	f002 0203 	and.w	r2, r2, #3
 800a68a:	bf58      	it	pl
 800a68c:	4253      	negpl	r3, r2
 800a68e:	460a      	mov	r2, r1
 800a690:	f107 0120 	add.w	r1, r7, #32
 800a694:	440b      	add	r3, r1
 800a696:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 2)%4] = NOWALL;
 800a69a:	4bab      	ldr	r3, [pc, #684]	; (800a948 <wall_set+0x33c>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	3302      	adds	r3, #2
 800a6a0:	425a      	negs	r2, r3
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	f002 0203 	and.w	r2, r2, #3
 800a6aa:	bf58      	it	pl
 800a6ac:	4253      	negpl	r3, r2
 800a6ae:	f107 0220 	add.w	r2, r7, #32
 800a6b2:	4413      	add	r3, r2
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 3)%4] = side_left > LEFT_WALL ?  WALL :  NOWALL;
 800a6ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800a6be:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800a950 <wall_set+0x344>
 800a6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ca:	bfcc      	ite	gt
 800a6cc:	2301      	movgt	r3, #1
 800a6ce:	2300      	movle	r3, #0
 800a6d0:	b2d9      	uxtb	r1, r3
 800a6d2:	4b9d      	ldr	r3, [pc, #628]	; (800a948 <wall_set+0x33c>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	3303      	adds	r3, #3
 800a6d8:	425a      	negs	r2, r3
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	f002 0203 	and.w	r2, r2, #3
 800a6e2:	bf58      	it	pl
 800a6e4:	4253      	negpl	r3, r2
 800a6e6:	460a      	mov	r2, r1
 800a6e8:	f107 0120 	add.w	r1, r7, #32
 800a6ec:	440b      	add	r3, r1
 800a6ee:	f803 2c08 	strb.w	r2, [r3, #-8]

	  //各方角の壁に壁の有無を代入
	  Wall[x][y].north = wall_dir[0];
 800a6f2:	7e3b      	ldrb	r3, [r7, #24]
 800a6f4:	7dfa      	ldrb	r2, [r7, #23]
 800a6f6:	7dbc      	ldrb	r4, [r7, #22]
 800a6f8:	f003 0303 	and.w	r3, r3, #3
 800a6fc:	b2d8      	uxtb	r0, r3
 800a6fe:	4995      	ldr	r1, [pc, #596]	; (800a954 <wall_set+0x348>)
 800a700:	4613      	mov	r3, r2
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	4413      	add	r3, r2
 800a706:	191a      	adds	r2, r3, r4
 800a708:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a70c:	f360 0301 	bfi	r3, r0, #0, #2
 800a710:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].east = wall_dir[1];
 800a714:	7e7b      	ldrb	r3, [r7, #25]
 800a716:	7dfa      	ldrb	r2, [r7, #23]
 800a718:	7dbc      	ldrb	r4, [r7, #22]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	b2d8      	uxtb	r0, r3
 800a720:	498c      	ldr	r1, [pc, #560]	; (800a954 <wall_set+0x348>)
 800a722:	4613      	mov	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	4413      	add	r3, r2
 800a728:	191a      	adds	r2, r3, r4
 800a72a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a72e:	f360 0383 	bfi	r3, r0, #2, #2
 800a732:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].south = wall_dir[2];
 800a736:	7ebb      	ldrb	r3, [r7, #26]
 800a738:	7dfa      	ldrb	r2, [r7, #23]
 800a73a:	7dbc      	ldrb	r4, [r7, #22]
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	b2d8      	uxtb	r0, r3
 800a742:	4984      	ldr	r1, [pc, #528]	; (800a954 <wall_set+0x348>)
 800a744:	4613      	mov	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	4413      	add	r3, r2
 800a74a:	191a      	adds	r2, r3, r4
 800a74c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a750:	f360 1305 	bfi	r3, r0, #4, #2
 800a754:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].west = wall_dir[3];
 800a758:	7efb      	ldrb	r3, [r7, #27]
 800a75a:	7dfa      	ldrb	r2, [r7, #23]
 800a75c:	7dbc      	ldrb	r4, [r7, #22]
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	b2d8      	uxtb	r0, r3
 800a764:	497b      	ldr	r1, [pc, #492]	; (800a954 <wall_set+0x348>)
 800a766:	4613      	mov	r3, r2
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	4413      	add	r3, r2
 800a76c:	191a      	adds	r2, r3, r4
 800a76e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a772:	f360 1387 	bfi	r3, r0, #6, #2
 800a776:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  uint32_t address;
	  if(y < (NUMBER_OF_SQUARES-1) )
 800a77a:	7dbb      	ldrb	r3, [r7, #22]
 800a77c:	2b07      	cmp	r3, #7
 800a77e:	d834      	bhi.n	800a7ea <wall_set+0x1de>
	  {
		  Wall[x][y+1].south = wall_dir[0];//北端でなければ
 800a780:	7e39      	ldrb	r1, [r7, #24]
 800a782:	7dfa      	ldrb	r2, [r7, #23]
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	1c5c      	adds	r4, r3, #1
 800a788:	460b      	mov	r3, r1
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	b2d8      	uxtb	r0, r3
 800a790:	4970      	ldr	r1, [pc, #448]	; (800a954 <wall_set+0x348>)
 800a792:	4613      	mov	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4413      	add	r3, r2
 800a798:	191a      	adds	r2, r3, r4
 800a79a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a79e:	f360 1305 	bfi	r3, r0, #4, #2
 800a7a2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y+1)*16*(NUMBER_OF_SQUARES) );
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	7dbb      	ldrb	r3, [r7, #22]
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	4413      	add	r3, r2
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	18ca      	adds	r2, r1, r3
 800a7ba:	4b67      	ldr	r3, [pc, #412]	; (800a958 <wall_set+0x34c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4413      	add	r3, r2
 800a7c0:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+8, Wall[x][y+1].south);
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	f103 0408 	add.w	r4, r3, #8
 800a7c8:	7dfa      	ldrb	r2, [r7, #23]
 800a7ca:	7dbb      	ldrb	r3, [r7, #22]
 800a7cc:	1c59      	adds	r1, r3, #1
 800a7ce:	4861      	ldr	r0, [pc, #388]	; (800a954 <wall_set+0x348>)
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a7dc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f002 fb8b 	bl	800cf00 <FLASH_Write_Word>
	  }
	  if(x < (NUMBER_OF_SQUARES-1) )
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b07      	cmp	r3, #7
 800a7ee:	d834      	bhi.n	800a85a <wall_set+0x24e>
	  {
		  Wall[x+1][y].west = wall_dir[1];//東端でなければ
 800a7f0:	7e79      	ldrb	r1, [r7, #25]
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	1c5a      	adds	r2, r3, #1
 800a7f6:	7dbc      	ldrb	r4, [r7, #22]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	b2d8      	uxtb	r0, r3
 800a800:	4954      	ldr	r1, [pc, #336]	; (800a954 <wall_set+0x348>)
 800a802:	4613      	mov	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	4413      	add	r3, r2
 800a808:	191a      	adds	r2, r3, r4
 800a80a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a80e:	f360 1387 	bfi	r3, r0, #6, #2
 800a812:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x+1)*16) + ( (y)*16*(NUMBER_OF_SQUARES) );
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	3301      	adds	r3, #1
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	7dba      	ldrb	r2, [r7, #22]
 800a820:	4613      	mov	r3, r2
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	4413      	add	r3, r2
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	18ca      	adds	r2, r1, r3
 800a82a:	4b4b      	ldr	r3, [pc, #300]	; (800a958 <wall_set+0x34c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4413      	add	r3, r2
 800a830:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+12, Wall[x+1][y].west);
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	f103 040c 	add.w	r4, r3, #12
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	7db9      	ldrb	r1, [r7, #22]
 800a83e:	4845      	ldr	r0, [pc, #276]	; (800a954 <wall_set+0x348>)
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	4413      	add	r3, r2
 800a846:	440b      	add	r3, r1
 800a848:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a84c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a850:	b2db      	uxtb	r3, r3
 800a852:	4619      	mov	r1, r3
 800a854:	4620      	mov	r0, r4
 800a856:	f002 fb53 	bl	800cf00 <FLASH_Write_Word>
	  }
	  if(y > 0 )
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d031      	beq.n	800a8c4 <wall_set+0x2b8>
	  {
		  Wall[x][y-1].north = wall_dir[2];//南端でなければ
 800a860:	7eb9      	ldrb	r1, [r7, #26]
 800a862:	7dfa      	ldrb	r2, [r7, #23]
 800a864:	7dbb      	ldrb	r3, [r7, #22]
 800a866:	1e5c      	subs	r4, r3, #1
 800a868:	460b      	mov	r3, r1
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	b2d8      	uxtb	r0, r3
 800a870:	4938      	ldr	r1, [pc, #224]	; (800a954 <wall_set+0x348>)
 800a872:	4613      	mov	r3, r2
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	4413      	add	r3, r2
 800a878:	191a      	adds	r2, r3, r4
 800a87a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a87e:	f360 0301 	bfi	r3, r0, #0, #2
 800a882:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y-1)*16*(NUMBER_OF_SQUARES) );
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	7dbb      	ldrb	r3, [r7, #22]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	4613      	mov	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4413      	add	r3, r2
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	18ca      	adds	r2, r1, r3
 800a89a:	4b2f      	ldr	r3, [pc, #188]	; (800a958 <wall_set+0x34c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4413      	add	r3, r2
 800a8a0:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+0, Wall[x][y-1].north);
 800a8a2:	7dfa      	ldrb	r2, [r7, #23]
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	1e59      	subs	r1, r3, #1
 800a8a8:	482a      	ldr	r0, [pc, #168]	; (800a954 <wall_set+0x348>)
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	440b      	add	r3, r1
 800a8b2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a8b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	4619      	mov	r1, r3
 800a8be:	69f8      	ldr	r0, [r7, #28]
 800a8c0:	f002 fb1e 	bl	800cf00 <FLASH_Write_Word>
	  }
	  if(x > 0 )
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d033      	beq.n	800a932 <wall_set+0x326>
	  {
		  Wall[x-1][y].east = wall_dir[3];//西端でなければ
 800a8ca:	7ef9      	ldrb	r1, [r7, #27]
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	1e5a      	subs	r2, r3, #1
 800a8d0:	7dbc      	ldrb	r4, [r7, #22]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	b2d8      	uxtb	r0, r3
 800a8da:	491e      	ldr	r1, [pc, #120]	; (800a954 <wall_set+0x348>)
 800a8dc:	4613      	mov	r3, r2
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	191a      	adds	r2, r3, r4
 800a8e4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a8e8:	f360 0383 	bfi	r3, r0, #2, #2
 800a8ec:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x-1)*16) + ( y*16*(NUMBER_OF_SQUARES) );
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	7dba      	ldrb	r2, [r7, #22]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4413      	add	r3, r2
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	18ca      	adds	r2, r1, r3
 800a904:	4b14      	ldr	r3, [pc, #80]	; (800a958 <wall_set+0x34c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4413      	add	r3, r2
 800a90a:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+4, Wall[x-1][y].east);
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	1d1c      	adds	r4, r3, #4
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	7db9      	ldrb	r1, [r7, #22]
 800a916:	480f      	ldr	r0, [pc, #60]	; (800a954 <wall_set+0x348>)
 800a918:	4613      	mov	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	4413      	add	r3, r2
 800a91e:	440b      	add	r3, r1
 800a920:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a924:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	4619      	mov	r1, r3
 800a92c:	4620      	mov	r0, r4
 800a92e:	f002 fae7 	bl	800cf00 <FLASH_Write_Word>
	  }

	  //flashに書き込む
	  wall_store_running(x,y);
 800a932:	7dba      	ldrb	r2, [r7, #22]
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	4611      	mov	r1, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fe01 	bl	800a540 <wall_store_running>
}
 800a93e:	bf00      	nop
 800a940:	3724      	adds	r7, #36	; 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
 800a946:	bf00      	nop
 800a948:	200002d0 	.word	0x200002d0
 800a94c:	42c80000 	.word	0x42c80000
 800a950:	430c0000 	.word	0x430c0000
 800a954:	20000518 	.word	0x20000518
 800a958:	08014e98 	.word	0x08014e98

0800a95c <UpdateWalkMap>:
	}

}
//評価値マップ生成。
uint16_t walk_map[NUMBER_OF_SQUARES][NUMBER_OF_SQUARES];
void UpdateWalkMap(){
 800a95c:	b490      	push	{r4, r7}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]
 800a96a:	2300      	movs	r3, #0
 800a96c:	607b      	str	r3, [r7, #4]
 800a96e:	2300      	movs	r3, #0
 800a970:	603b      	str	r3, [r7, #0]

	//区画数に応じて"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a972:	2300      	movs	r3, #0
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e015      	b.n	800a9a4 <UpdateWalkMap+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a978:	2300      	movs	r3, #0
 800a97a:	60bb      	str	r3, [r7, #8]
 800a97c:	e00c      	b.n	800a998 <UpdateWalkMap+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800a97e:	49aa      	ldr	r1, [pc, #680]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	4613      	mov	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4413      	add	r3, r2
 800a98c:	2250      	movs	r2, #80	; 0x50
 800a98e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	3301      	adds	r3, #1
 800a996:	60bb      	str	r3, [r7, #8]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	ddef      	ble.n	800a97e <UpdateWalkMap+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b08      	cmp	r3, #8
 800a9a8:	dde6      	ble.n	800a978 <UpdateWalkMap+0x1c>
		}
	}

	//ゴール区画?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?0に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a9aa:	2307      	movs	r3, #7
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e015      	b.n	800a9dc <UpdateWalkMap+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a9b0:	2307      	movs	r3, #7
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	e00c      	b.n	800a9d0 <UpdateWalkMap+0x74>
			walk_map[i][j] = 0;
 800a9b6:	499c      	ldr	r1, [pc, #624]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4413      	add	r3, r2
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60bb      	str	r3, [r7, #8]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b07      	cmp	r3, #7
 800a9d4:	ddef      	ble.n	800a9b6 <UpdateWalkMap+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b07      	cmp	r3, #7
 800a9e0:	dde6      	ble.n	800a9b0 <UpdateWalkMap+0x54>
		}
	}

	//壁が無?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?として????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��区画に歩数を割り当てる�??
	do{
		flag = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	e10c      	b.n	800ac06 <UpdateWalkMap+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60bb      	str	r3, [r7, #8]
 800a9f0:	e102      	b.n	800abf8 <UpdateWalkMap+0x29c>
				  //map?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"でなければ値を代入?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800a9f2:	498d      	ldr	r1, [pc, #564]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aa04:	461a      	mov	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	f040 80f2 	bne.w	800abf2 <UpdateWalkMap+0x296>

					  if(Wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800aa0e:	4987      	ldr	r1, [pc, #540]	; (800ac2c <UpdateWalkMap+0x2d0>)
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4613      	mov	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	4413      	add	r3, r2
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800aa20:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d02d      	beq.n	800aa86 <UpdateWalkMap+0x12a>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	1c59      	adds	r1, r3, #1
 800aa2e:	487e      	ldr	r0, [pc, #504]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4613      	mov	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	440b      	add	r3, r1
 800aa3a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800aa3e:	487a      	ldr	r0, [pc, #488]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4613      	mov	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	4413      	add	r3, r2
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800aa50:	4299      	cmp	r1, r3
 800aa52:	d918      	bls.n	800aa86 <UpdateWalkMap+0x12a>
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b07      	cmp	r3, #7
 800aa58:	dc15      	bgt.n	800aa86 <UpdateWalkMap+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800aa5a:	4973      	ldr	r1, [pc, #460]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	4413      	add	r3, r2
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	4413      	add	r3, r2
 800aa68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	1c51      	adds	r1, r2, #1
 800aa70:	3301      	adds	r3, #1
 800aa72:	b29c      	uxth	r4, r3
 800aa74:	486c      	ldr	r0, [pc, #432]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	440b      	add	r3, r1
 800aa80:	4622      	mov	r2, r4
 800aa82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800aa86:	4969      	ldr	r1, [pc, #420]	; (800ac2c <UpdateWalkMap+0x2d0>)
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	4413      	add	r3, r2
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	4413      	add	r3, r2
 800aa94:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800aa98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d02d      	beq.n	800aafe <UpdateWalkMap+0x1a2>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	4960      	ldr	r1, [pc, #384]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4413      	add	r3, r2
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800aab6:	485c      	ldr	r0, [pc, #368]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4613      	mov	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4413      	add	r3, r2
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	4413      	add	r3, r2
 800aac4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d918      	bls.n	800aafe <UpdateWalkMap+0x1a2>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	dc15      	bgt.n	800aafe <UpdateWalkMap+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800aad2:	4955      	ldr	r1, [pc, #340]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4613      	mov	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	4413      	add	r3, r2
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	4413      	add	r3, r2
 800aae0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	3201      	adds	r2, #1
 800aae8:	3301      	adds	r3, #1
 800aaea:	b298      	uxth	r0, r3
 800aaec:	494e      	ldr	r1, [pc, #312]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aaee:	4613      	mov	r3, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	4602      	mov	r2, r0
 800aafa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }
					  if(Wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800aafe:	494b      	ldr	r1, [pc, #300]	; (800ac2c <UpdateWalkMap+0x2d0>)
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	4413      	add	r3, r2
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800ab10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d02d      	beq.n	800ab76 <UpdateWalkMap+0x21a>
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	1e59      	subs	r1, r3, #1
 800ab1e:	4842      	ldr	r0, [pc, #264]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4613      	mov	r3, r2
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	4413      	add	r3, r2
 800ab28:	440b      	add	r3, r1
 800ab2a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800ab2e:	483e      	ldr	r0, [pc, #248]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4613      	mov	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	4413      	add	r3, r2
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800ab40:	4299      	cmp	r1, r3
 800ab42:	d918      	bls.n	800ab76 <UpdateWalkMap+0x21a>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dd15      	ble.n	800ab76 <UpdateWalkMap+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800ab4a:	4937      	ldr	r1, [pc, #220]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	4413      	add	r3, r2
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	4413      	add	r3, r2
 800ab58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	1e51      	subs	r1, r2, #1
 800ab60:	3301      	adds	r3, #1
 800ab62:	b29c      	uxth	r4, r3
 800ab64:	4830      	ldr	r0, [pc, #192]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	440b      	add	r3, r1
 800ab70:	4622      	mov	r2, r4
 800ab72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800ab76:	492d      	ldr	r1, [pc, #180]	; (800ac2c <UpdateWalkMap+0x2d0>)
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	00db      	lsls	r3, r3, #3
 800ab7e:	4413      	add	r3, r2
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	4413      	add	r3, r2
 800ab84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800ab88:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d02d      	beq.n	800abee <UpdateWalkMap+0x292>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	1e5a      	subs	r2, r3, #1
 800ab96:	4924      	ldr	r1, [pc, #144]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800ab98:	4613      	mov	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800aba6:	4820      	ldr	r0, [pc, #128]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4613      	mov	r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	4413      	add	r3, r2
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	4413      	add	r3, r2
 800abb4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800abb8:	4299      	cmp	r1, r3
 800abba:	d918      	bls.n	800abee <UpdateWalkMap+0x292>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd15      	ble.n	800abee <UpdateWalkMap+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800abc2:	4919      	ldr	r1, [pc, #100]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4613      	mov	r3, r2
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	4413      	add	r3, r2
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4413      	add	r3, r2
 800abd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	3a01      	subs	r2, #1
 800abd8:	3301      	adds	r3, #1
 800abda:	b298      	uxth	r0, r3
 800abdc:	4912      	ldr	r1, [pc, #72]	; (800ac28 <UpdateWalkMap+0x2cc>)
 800abde:	4613      	mov	r3, r2
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	4413      	add	r3, r2
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	4413      	add	r3, r2
 800abe8:	4602      	mov	r2, r0
 800abea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }

					  flag = 1;
 800abee:	2301      	movs	r3, #1
 800abf0:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	3301      	adds	r3, #1
 800abf6:	60bb      	str	r3, [r7, #8]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b08      	cmp	r3, #8
 800abfc:	f77f aef9 	ble.w	800a9f2 <UpdateWalkMap+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	f77f aeef 	ble.w	800a9ec <UpdateWalkMap+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		  hosu++;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	3301      	adds	r3, #1
 800ac12:	603b      	str	r3, [r7, #0]
	}while(flag);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f47f aee3 	bne.w	800a9e2 <UpdateWalkMap+0x86>

}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bc90      	pop	{r4, r7}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	20000460 	.word	0x20000460
 800ac2c:	20000518 	.word	0x20000518

0800ac30 <LeftHandJudge>:
//ノード
//左手法での方向決定
void LeftHandJudge(uint8_t *x, uint8_t *y, direction *dir, char *action_type){
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
	/*--旋回モード選?��?--*/

	/*-=1-=1*/
    	  switch(*dir){
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	f200 81b7 	bhi.w	800afb6 <LeftHandJudge+0x386>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <LeftHandJudge+0x20>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac61 	.word	0x0800ac61
 800ac54:	0800ad35 	.word	0x0800ad35
 800ac58:	0800ae09 	.word	0x0800ae09
 800ac5c:	0800aedd 	.word	0x0800aedd
    	  case north:

    		  if(Wall[*x][*y].west == NOWALL){
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	4619      	mov	r1, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	4aab      	ldr	r2, [pc, #684]	; (800af1c <LeftHandJudge+0x2ec>)
 800ac6e:	460b      	mov	r3, r1
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	440b      	add	r3, r1
 800ac74:	4403      	add	r3, r0
 800ac76:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ac7a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10c      	bne.n	800ac9e <LeftHandJudge+0x6e>
    			  SelectAction( 'L');
 800ac84:	204c      	movs	r0, #76	; 0x4c
 800ac86:	f7ff f837 	bl	8009cf8 <SelectAction>
    			  *dir = west;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2203      	movs	r2, #3
 800ac8e:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
    		  }



    		  break;
 800ac9c:	e18c      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	4619      	mov	r1, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	4618      	mov	r0, r3
 800acaa:	4a9c      	ldr	r2, [pc, #624]	; (800af1c <LeftHandJudge+0x2ec>)
 800acac:	460b      	mov	r3, r1
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	440b      	add	r3, r1
 800acb2:	4403      	add	r3, r0
 800acb4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800acb8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10c      	bne.n	800acdc <LeftHandJudge+0xac>
    			  SelectAction('S');
 800acc2:	2053      	movs	r0, #83	; 0x53
 800acc4:	f7ff f818 	bl	8009cf8 <SelectAction>
    			  *dir = north;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	701a      	strb	r2, [r3, #0]
    		  break;
 800acda:	e16d      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	4619      	mov	r1, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	4a8c      	ldr	r2, [pc, #560]	; (800af1c <LeftHandJudge+0x2ec>)
 800acea:	460b      	mov	r3, r1
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	440b      	add	r3, r1
 800acf0:	4403      	add	r3, r0
 800acf2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800acf6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10c      	bne.n	800ad1a <LeftHandJudge+0xea>
    			  SelectAction('R');
 800ad00:	2052      	movs	r0, #82	; 0x52
 800ad02:	f7fe fff9 	bl	8009cf8 <SelectAction>
    	          *dir = east;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	701a      	strb	r2, [r3, #0]
    		  break;
 800ad18:	e14e      	b.n	800afb8 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800ad1a:	2042      	movs	r0, #66	; 0x42
 800ad1c:	f7fe ffec 	bl	8009cf8 <SelectAction>
    	       	  *dir = south;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	701a      	strb	r2, [r3, #0]
    		  break;
 800ad32:	e141      	b.n	800afb8 <LeftHandJudge+0x388>
    	  case east:
    		  if(Wall[*x][*y].north== NOWALL){
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	4a76      	ldr	r2, [pc, #472]	; (800af1c <LeftHandJudge+0x2ec>)
 800ad42:	460b      	mov	r3, r1
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	440b      	add	r3, r1
 800ad48:	4403      	add	r3, r0
 800ad4a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ad4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10c      	bne.n	800ad72 <LeftHandJudge+0x142>
    			  SelectAction('L');
 800ad58:	204c      	movs	r0, #76	; 0x4c
 800ad5a:	f7fe ffcd 	bl	8009cf8 <SelectAction>
    			  *dir = north;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = west;
      		      *x-=1;
    		  }

    		  break;
 800ad70:	e122      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4a67      	ldr	r2, [pc, #412]	; (800af1c <LeftHandJudge+0x2ec>)
 800ad80:	460b      	mov	r3, r1
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	440b      	add	r3, r1
 800ad86:	4403      	add	r3, r0
 800ad88:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ad8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10c      	bne.n	800adb0 <LeftHandJudge+0x180>
    			  SelectAction('S');
 800ad96:	2053      	movs	r0, #83	; 0x53
 800ad98:	f7fe ffae 	bl	8009cf8 <SelectAction>
    	          *dir = east;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	701a      	strb	r2, [r3, #0]
    		  break;
 800adae:	e103      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	4619      	mov	r1, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	4a57      	ldr	r2, [pc, #348]	; (800af1c <LeftHandJudge+0x2ec>)
 800adbe:	460b      	mov	r3, r1
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	440b      	add	r3, r1
 800adc4:	4403      	add	r3, r0
 800adc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800adca:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10c      	bne.n	800adee <LeftHandJudge+0x1be>
    			  SelectAction('R');
 800add4:	2052      	movs	r0, #82	; 0x52
 800add6:	f7fe ff8f 	bl	8009cf8 <SelectAction>
    	       	  *dir = south;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2202      	movs	r2, #2
 800adde:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	701a      	strb	r2, [r3, #0]
    		  break;
 800adec:	e0e4      	b.n	800afb8 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800adee:	2042      	movs	r0, #66	; 0x42
 800adf0:	f7fe ff82 	bl	8009cf8 <SelectAction>
      			  *dir = west;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2203      	movs	r2, #3
 800adf8:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	701a      	strb	r2, [r3, #0]
    		  break;
 800ae06:	e0d7      	b.n	800afb8 <LeftHandJudge+0x388>
    	  case south:
    		  if(Wall[*x][*y].east == NOWALL){
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	4a41      	ldr	r2, [pc, #260]	; (800af1c <LeftHandJudge+0x2ec>)
 800ae16:	460b      	mov	r3, r1
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	4403      	add	r3, r0
 800ae1e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ae22:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10c      	bne.n	800ae46 <LeftHandJudge+0x216>
    			  SelectAction('L');
 800ae2c:	204c      	movs	r0, #76	; 0x4c
 800ae2e:	f7fe ff63 	bl	8009cf8 <SelectAction>
    	          *dir = east;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = north;
      			  *y+=1;
    		  }

    		  break;
 800ae44:	e0b8      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	4618      	mov	r0, r3
 800ae52:	4a32      	ldr	r2, [pc, #200]	; (800af1c <LeftHandJudge+0x2ec>)
 800ae54:	460b      	mov	r3, r1
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	440b      	add	r3, r1
 800ae5a:	4403      	add	r3, r0
 800ae5c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ae60:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10c      	bne.n	800ae84 <LeftHandJudge+0x254>
    			  SelectAction('S');
 800ae6a:	2053      	movs	r0, #83	; 0x53
 800ae6c:	f7fe ff44 	bl	8009cf8 <SelectAction>
    	       	  *dir = south;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2202      	movs	r2, #2
 800ae74:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	701a      	strb	r2, [r3, #0]
    		  break;
 800ae82:	e099      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].west == NOWALL){
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	4a22      	ldr	r2, [pc, #136]	; (800af1c <LeftHandJudge+0x2ec>)
 800ae92:	460b      	mov	r3, r1
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	4403      	add	r3, r0
 800ae9a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ae9e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10c      	bne.n	800aec2 <LeftHandJudge+0x292>
    			  SelectAction('R');
 800aea8:	2052      	movs	r0, #82	; 0x52
 800aeaa:	f7fe ff25 	bl	8009cf8 <SelectAction>
      			  *dir = west;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2203      	movs	r2, #3
 800aeb2:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	701a      	strb	r2, [r3, #0]
    		  break;
 800aec0:	e07a      	b.n	800afb8 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800aec2:	2042      	movs	r0, #66	; 0x42
 800aec4:	f7fe ff18 	bl	8009cf8 <SelectAction>
      			  *dir = north;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	701a      	strb	r2, [r3, #0]
    		  break;
 800aeda:	e06d      	b.n	800afb8 <LeftHandJudge+0x388>
    	  case west:
    		  if(Wall[*x][*y].south == NOWALL){
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	4a0c      	ldr	r2, [pc, #48]	; (800af1c <LeftHandJudge+0x2ec>)
 800aeea:	460b      	mov	r3, r1
 800aeec:	00db      	lsls	r3, r3, #3
 800aeee:	440b      	add	r3, r1
 800aef0:	4403      	add	r3, r0
 800aef2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aef6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10f      	bne.n	800af20 <LeftHandJudge+0x2f0>
    			  SelectAction('L');
 800af00:	204c      	movs	r0, #76	; 0x4c
 800af02:	f7fe fef9 	bl	8009cf8 <SelectAction>
    	       	  *dir = south;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	701a      	strb	r2, [r3, #0]
    	       	  *y -= 1;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
    	          *dir = east;
    	          *x+=1;
    		  }

    		  break;
 800af18:	e04e      	b.n	800afb8 <LeftHandJudge+0x388>
 800af1a:	bf00      	nop
 800af1c:	20000518 	.word	0x20000518
    		  else if(Wall[*x][*y].west == NOWALL){
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	4619      	mov	r1, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	4618      	mov	r0, r3
 800af2c:	4a24      	ldr	r2, [pc, #144]	; (800afc0 <LeftHandJudge+0x390>)
 800af2e:	460b      	mov	r3, r1
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	440b      	add	r3, r1
 800af34:	4403      	add	r3, r0
 800af36:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800af3a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10c      	bne.n	800af5e <LeftHandJudge+0x32e>
    			  SelectAction('S');
 800af44:	2053      	movs	r0, #83	; 0x53
 800af46:	f7fe fed7 	bl	8009cf8 <SelectAction>
    			  *dir = west;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2203      	movs	r2, #3
 800af4e:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	3b01      	subs	r3, #1
 800af56:	b2da      	uxtb	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	701a      	strb	r2, [r3, #0]
    		  break;
 800af5c:	e02c      	b.n	800afb8 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	4619      	mov	r1, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	4a15      	ldr	r2, [pc, #84]	; (800afc0 <LeftHandJudge+0x390>)
 800af6c:	460b      	mov	r3, r1
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	440b      	add	r3, r1
 800af72:	4403      	add	r3, r0
 800af74:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800af78:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10c      	bne.n	800af9c <LeftHandJudge+0x36c>
    			  SelectAction('R');
 800af82:	2052      	movs	r0, #82	; 0x52
 800af84:	f7fe feb8 	bl	8009cf8 <SelectAction>
      			  *dir = north;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	b2da      	uxtb	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	701a      	strb	r2, [r3, #0]
    		  break;
 800af9a:	e00d      	b.n	800afb8 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800af9c:	2042      	movs	r0, #66	; 0x42
 800af9e:	f7fe feab 	bl	8009cf8 <SelectAction>
    	          *dir = east;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	701a      	strb	r2, [r3, #0]
    		  break;
 800afb4:	e000      	b.n	800afb8 <LeftHandJudge+0x388>
    	  default:
    		  break;
 800afb6:	bf00      	nop
    	  }//swtich end
}
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20000518 	.word	0x20000518

0800afc4 <WritingFree>:
{

}

void WritingFree()
{
 800afc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afc8:	b0ac      	sub	sp, #176	; 0xb0
 800afca:	af04      	add	r7, sp, #16

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800afcc:	f002 fa76 	bl	800d4bc <Motor_PWM_Start>
	EncoderStart();
 800afd0:	f002 f97a 	bl	800d2c8 <EncoderStart>
	EmitterON();
 800afd4:	f002 f998 	bl	800d308 <EmitterON>
	ADCStart();
 800afd8:	f001 ff26 	bl	800ce28 <ADCStart>
	IMU_init();
 800afdc:	f002 f810 	bl	800d000 <IMU_init>

	PIDReset(L_VELO);
 800afe0:	2000      	movs	r0, #0
 800afe2:	f000 fa5b 	bl	800b49c <PIDReset>
	PIDReset(R_VELO);
 800afe6:	2001      	movs	r0, #1
 800afe8:	f000 fa58 	bl	800b49c <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800afec:	2101      	movs	r1, #1
 800afee:	2000      	movs	r0, #0
 800aff0:	f000 fa3e 	bl	800b470 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800aff4:	2101      	movs	r1, #1
 800aff6:	2001      	movs	r0, #1
 800aff8:	f000 fa3a 	bl	800b470 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800affc:	2100      	movs	r1, #0
 800affe:	2003      	movs	r0, #3
 800b000:	f000 fa36 	bl	800b470 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800b004:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b170 <WritingFree+0x1ac>
 800b008:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800b174 <WritingFree+0x1b0>
 800b00c:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800b178 <WritingFree+0x1b4>
 800b010:	2000      	movs	r0, #0
 800b012:	f000 fa01 	bl	800b418 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800b016:	ed9f 1a56 	vldr	s2, [pc, #344]	; 800b170 <WritingFree+0x1ac>
 800b01a:	eddf 0a56 	vldr	s1, [pc, #344]	; 800b174 <WritingFree+0x1b0>
 800b01e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800b178 <WritingFree+0x1b4>
 800b022:	2001      	movs	r0, #1
 800b024:	f000 f9f8 	bl	800b418 <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800b028:	ed9f 1a54 	vldr	s2, [pc, #336]	; 800b17c <WritingFree+0x1b8>
 800b02c:	eddf 0a54 	vldr	s1, [pc, #336]	; 800b180 <WritingFree+0x1bc>
 800b030:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b034:	2003      	movs	r0, #3
 800b036:	f000 f9ef 	bl	800b418 <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b03a:	f247 512f 	movw	r1, #29999	; 0x752f
 800b03e:	4851      	ldr	r0, [pc, #324]	; (800b184 <WritingFree+0x1c0>)
 800b040:	f7fe feb0 	bl	8009da4 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b044:	f247 512f 	movw	r1, #29999	; 0x752f
 800b048:	484f      	ldr	r0, [pc, #316]	; (800b188 <WritingFree+0x1c4>)
 800b04a:	f7fe feab 	bl	8009da4 <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800b04e:	484f      	ldr	r0, [pc, #316]	; (800b18c <WritingFree+0x1c8>)
 800b050:	f005 fb1d 	bl	801068e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b054:	484e      	ldr	r0, [pc, #312]	; (800b190 <WritingFree+0x1cc>)
 800b056:	f005 fb1a 	bl	801068e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800b05a:	4b4e      	ldr	r3, [pc, #312]	; (800b194 <WritingFree+0x1d0>)
 800b05c:	f04f 0200 	mov.w	r2, #0
 800b060:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800b062:	4b4d      	ldr	r3, [pc, #308]	; (800b198 <WritingFree+0x1d4>)
 800b064:	f04f 0200 	mov.w	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800b06a:	4b4c      	ldr	r3, [pc, #304]	; (800b19c <WritingFree+0x1d8>)
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800b072:	4b4b      	ldr	r3, [pc, #300]	; (800b1a0 <WritingFree+0x1dc>)
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800b07a:	4b4a      	ldr	r3, [pc, #296]	; (800b1a4 <WritingFree+0x1e0>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800b080:	4b48      	ldr	r3, [pc, #288]	; (800b1a4 <WritingFree+0x1e0>)
 800b082:	2200      	movs	r2, #0
 800b084:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800b086:	4b47      	ldr	r3, [pc, #284]	; (800b1a4 <WritingFree+0x1e0>)
 800b088:	2200      	movs	r2, #0
 800b08a:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();
 800b08c:	f002 f852 	bl	800d134 <IMU_Calib>
	target_photo[SL] = photo[SL];
 800b090:	4b45      	ldr	r3, [pc, #276]	; (800b1a8 <WritingFree+0x1e4>)
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	4a45      	ldr	r2, [pc, #276]	; (800b1ac <WritingFree+0x1e8>)
 800b096:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800b098:	4b43      	ldr	r3, [pc, #268]	; (800b1a8 <WritingFree+0x1e4>)
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	4a43      	ldr	r2, [pc, #268]	; (800b1ac <WritingFree+0x1e8>)
 800b09e:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800b0a0:	4b42      	ldr	r3, [pc, #264]	; (800b1ac <WritingFree+0x1e8>)
 800b0a2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b0a6:	4b41      	ldr	r3, [pc, #260]	; (800b1ac <WritingFree+0x1e8>)
 800b0a8:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b0:	4b3f      	ldr	r3, [pc, #252]	; (800b1b0 <WritingFree+0x1ec>)
 800b0b2:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO);
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	f000 f9f0 	bl	800b49c <PIDReset>
	PIDReset(R_VELO);
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f000 f9ed 	bl	800b49c <PIDReset>
	PIDReset(D_WALL);
 800b0c2:	2003      	movs	r0, #3
 800b0c4:	f000 f9ea 	bl	800b49c <PIDReset>

	HAL_Delay(500);
 800b0c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0cc:	f002 fb0e 	bl	800d6ec <HAL_Delay>
//	{
//		Accel(45, explore_velocity);
//		Decel(45, 0);
//		HAL_Delay(500);
//	}
	Accel(61.5, explore_velocity);
 800b0d0:	4b38      	ldr	r3, [pc, #224]	; (800b1b4 <WritingFree+0x1f0>)
 800b0d2:	edd3 7a00 	vldr	s15, [r3]
 800b0d6:	eef0 0a67 	vmov.f32	s1, s15
 800b0da:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800b1b8 <WritingFree+0x1f4>
 800b0de:	f7fe fbe7 	bl	80098b0 <Accel>
	Decel(45, 0);
 800b0e2:	eddf 0a36 	vldr	s1, [pc, #216]	; 800b1bc <WritingFree+0x1f8>
 800b0e6:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800b1c0 <WritingFree+0x1fc>
 800b0ea:	f7fe fc5d 	bl	80099a8 <Decel>
//	Accel(61.5, explore_velocity);
//	Accel(61.5, explore_velocity);

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	float wall_log_L[10]={0},wall_log_R[10]={0},out_log_L[10]={0},out_log_R[10]={0};
 800b0ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b0f2:	2228      	movs	r2, #40	; 0x28
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f007 fb0b 	bl	8012712 <memset>
 800b0fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b100:	2228      	movs	r2, #40	; 0x28
 800b102:	2100      	movs	r1, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f007 fb04 	bl	8012712 <memset>
 800b10a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b10e:	2228      	movs	r2, #40	; 0x28
 800b110:	2100      	movs	r1, #0
 800b112:	4618      	mov	r0, r3
 800b114:	f007 fafd 	bl	8012712 <memset>
 800b118:	463b      	mov	r3, r7
 800b11a:	2228      	movs	r2, #40	; 0x28
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f007 faf7 	bl	8012712 <memset>
while(1)
{
	//printf("zg : %d, %lf, %f\r\n",zg,(double)zg,(float)zg);	//zgは右回転が負。どの型でもおかしい値は出なかった。
	//printf("angular_v : %f, angle : %f\r\n",angular_v, angle);	//モータに出力する際は角速度を負に指定すると左回転。
	printf("%f, %f, %f\r\n", photo[FL],photo[FR],photo[FL]+photo[FR]);
 800b124:	4b20      	ldr	r3, [pc, #128]	; (800b1a8 <WritingFree+0x1e4>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd f945 	bl	80083b8 <__aeabi_f2d>
 800b12e:	4680      	mov	r8, r0
 800b130:	4689      	mov	r9, r1
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <WritingFree+0x1e4>)
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	f7fd f93e 	bl	80083b8 <__aeabi_f2d>
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	4b19      	ldr	r3, [pc, #100]	; (800b1a8 <WritingFree+0x1e4>)
 800b142:	ed93 7a00 	vldr	s14, [r3]
 800b146:	4b18      	ldr	r3, [pc, #96]	; (800b1a8 <WritingFree+0x1e4>)
 800b148:	edd3 7a03 	vldr	s15, [r3, #12]
 800b14c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b150:	ee17 0a90 	vmov	r0, s15
 800b154:	f7fd f930 	bl	80083b8 <__aeabi_f2d>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b160:	e9cd 4500 	strd	r4, r5, [sp]
 800b164:	4642      	mov	r2, r8
 800b166:	464b      	mov	r3, r9
 800b168:	4816      	ldr	r0, [pc, #88]	; (800b1c4 <WritingFree+0x200>)
 800b16a:	f007 ff37 	bl	8012fdc <iprintf>
 800b16e:	e7d9      	b.n	800b124 <WritingFree+0x160>
 800b170:	3bc45a38 	.word	0x3bc45a38
 800b174:	420617c2 	.word	0x420617c2
 800b178:	3f98d845 	.word	0x3f98d845
 800b17c:	3827c5ac 	.word	0x3827c5ac
 800b180:	3dcccccd 	.word	0x3dcccccd
 800b184:	40000424 	.word	0x40000424
 800b188:	40000824 	.word	0x40000824
 800b18c:	20000844 	.word	0x20000844
 800b190:	200005bc 	.word	0x200005bc
 800b194:	2000029c 	.word	0x2000029c
 800b198:	200002b0 	.word	0x200002b0
 800b19c:	200002ac 	.word	0x200002ac
 800b1a0:	200002b4 	.word	0x200002b4
 800b1a4:	20000288 	.word	0x20000288
 800b1a8:	20000250 	.word	0x20000250
 800b1ac:	20000260 	.word	0x20000260
 800b1b0:	20000270 	.word	0x20000270
 800b1b4:	20000000 	.word	0x20000000
 800b1b8:	42760000 	.word	0x42760000
 800b1bc:	00000000 	.word	0x00000000
 800b1c0:	42340000 	.word	0x42340000
 800b1c4:	08014e40 	.word	0x08014e40

0800b1c8 <Explore>:


}

void Explore()
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800b1ce:	f002 f975 	bl	800d4bc <Motor_PWM_Start>
	EncoderStart();
 800b1d2:	f002 f879 	bl	800d2c8 <EncoderStart>
	EmitterON();
 800b1d6:	f002 f897 	bl	800d308 <EmitterON>
	ADCStart();
 800b1da:	f001 fe25 	bl	800ce28 <ADCStart>
	IMU_init();
 800b1de:	f001 ff0f 	bl	800d000 <IMU_init>

	PIDReset(L_VELO);
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f000 f95a 	bl	800b49c <PIDReset>
	PIDReset(R_VELO);
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	f000 f957 	bl	800b49c <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f000 f93d 	bl	800b470 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	f000 f939 	bl	800b470 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800b1fe:	2100      	movs	r1, #0
 800b200:	2003      	movs	r0, #3
 800b202:	f000 f935 	bl	800b470 <PIDChangeFlag>
	PIDChangeFlag(ANG_V, 0);
 800b206:	2100      	movs	r1, #0
 800b208:	2004      	movs	r0, #4
 800b20a:	f000 f931 	bl	800b470 <PIDChangeFlag>
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800b20e:	ed9f 1a68 	vldr	s2, [pc, #416]	; 800b3b0 <Explore+0x1e8>
 800b212:	eddf 0a68 	vldr	s1, [pc, #416]	; 800b3b4 <Explore+0x1ec>
 800b216:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800b3b8 <Explore+0x1f0>
 800b21a:	2000      	movs	r0, #0
 800b21c:	f000 f8fc 	bl	800b418 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800b220:	ed9f 1a63 	vldr	s2, [pc, #396]	; 800b3b0 <Explore+0x1e8>
 800b224:	eddf 0a63 	vldr	s1, [pc, #396]	; 800b3b4 <Explore+0x1ec>
 800b228:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800b3b8 <Explore+0x1f0>
 800b22c:	2001      	movs	r0, #1
 800b22e:	f000 f8f3 	bl	800b418 <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800b232:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b3bc <Explore+0x1f4>
 800b236:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b3c0 <Explore+0x1f8>
 800b23a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b23e:	2003      	movs	r0, #3
 800b240:	f000 f8ea 	bl	800b418 <PIDSetGain>
	PIDSetGain(ANG_V, 17.4394, 321.233, 0.12492);
 800b244:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800b3c4 <Explore+0x1fc>
 800b248:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800b3c8 <Explore+0x200>
 800b24c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800b3cc <Explore+0x204>
 800b250:	2004      	movs	r0, #4
 800b252:	f000 f8e1 	bl	800b418 <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b256:	f247 512f 	movw	r1, #29999	; 0x752f
 800b25a:	485d      	ldr	r0, [pc, #372]	; (800b3d0 <Explore+0x208>)
 800b25c:	f7fe fda2 	bl	8009da4 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b260:	f247 512f 	movw	r1, #29999	; 0x752f
 800b264:	485b      	ldr	r0, [pc, #364]	; (800b3d4 <Explore+0x20c>)
 800b266:	f7fe fd9d 	bl	8009da4 <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800b26a:	485b      	ldr	r0, [pc, #364]	; (800b3d8 <Explore+0x210>)
 800b26c:	f005 fa0f 	bl	801068e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b270:	485a      	ldr	r0, [pc, #360]	; (800b3dc <Explore+0x214>)
 800b272:	f005 fa0c 	bl	801068e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800b276:	4b5a      	ldr	r3, [pc, #360]	; (800b3e0 <Explore+0x218>)
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800b27e:	4b59      	ldr	r3, [pc, #356]	; (800b3e4 <Explore+0x21c>)
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800b286:	4b58      	ldr	r3, [pc, #352]	; (800b3e8 <Explore+0x220>)
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800b28e:	4b57      	ldr	r3, [pc, #348]	; (800b3ec <Explore+0x224>)
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800b296:	4b56      	ldr	r3, [pc, #344]	; (800b3f0 <Explore+0x228>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800b29c:	4b54      	ldr	r3, [pc, #336]	; (800b3f0 <Explore+0x228>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800b2a2:	4b53      	ldr	r3, [pc, #332]	; (800b3f0 <Explore+0x228>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();
 800b2a8:	f001 ff44 	bl	800d134 <IMU_Calib>
	target_photo[SL] = photo[SL];
 800b2ac:	4b51      	ldr	r3, [pc, #324]	; (800b3f4 <Explore+0x22c>)
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	4a51      	ldr	r2, [pc, #324]	; (800b3f8 <Explore+0x230>)
 800b2b2:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800b2b4:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <Explore+0x22c>)
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4a4f      	ldr	r2, [pc, #316]	; (800b3f8 <Explore+0x230>)
 800b2ba:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800b2bc:	4b4e      	ldr	r3, [pc, #312]	; (800b3f8 <Explore+0x230>)
 800b2be:	ed93 7a02 	vldr	s14, [r3, #8]
 800b2c2:	4b4d      	ldr	r3, [pc, #308]	; (800b3f8 <Explore+0x230>)
 800b2c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2cc:	4b4b      	ldr	r3, [pc, #300]	; (800b3fc <Explore+0x234>)
 800b2ce:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO);
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f000 f8e2 	bl	800b49c <PIDReset>
	PIDReset(R_VELO);
 800b2d8:	2001      	movs	r0, #1
 800b2da:	f000 f8df 	bl	800b49c <PIDReset>
	PIDReset(D_WALL);
 800b2de:	2003      	movs	r0, #3
 800b2e0:	f000 f8dc 	bl	800b49c <PIDReset>
	PIDReset(ANG_V);
 800b2e4:	2004      	movs	r0, #4
 800b2e6:	f000 f8d9 	bl	800b49c <PIDReset>

	HAL_Delay(500);
 800b2ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b2ee:	f002 f9fd 	bl	800d6ec <HAL_Delay>
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	uint8_t x, y;
	my_direction = north;
 800b2f2:	4b43      	ldr	r3, [pc, #268]	; (800b400 <Explore+0x238>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
	x=0,y=0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	70fb      	strb	r3, [r7, #3]
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	70bb      	strb	r3, [r7, #2]
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 800b300:	4b3b      	ldr	r3, [pc, #236]	; (800b3f0 <Explore+0x228>)
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 800b306:	4b3a      	ldr	r3, [pc, #232]	; (800b3f0 <Explore+0x228>)
 800b308:	2200      	movs	r2, #0
 800b30a:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 800b30c:	4b38      	ldr	r3, [pc, #224]	; (800b3f0 <Explore+0x228>)
 800b30e:	2200      	movs	r2, #0
 800b310:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 800b312:	2353      	movs	r3, #83	; 0x53
 800b314:	707b      	strb	r3, [r7, #1]
//		break;
//	default:
//		break;
//	}
//}
	explore_velocity=300;
 800b316:	4b3b      	ldr	r3, [pc, #236]	; (800b404 <Explore+0x23c>)
 800b318:	4a3b      	ldr	r2, [pc, #236]	; (800b408 <Explore+0x240>)
 800b31a:	601a      	str	r2, [r3, #0]
	Accel(61.5, explore_velocity);
 800b31c:	4b39      	ldr	r3, [pc, #228]	; (800b404 <Explore+0x23c>)
 800b31e:	edd3 7a00 	vldr	s15, [r3]
 800b322:	eef0 0a67 	vmov.f32	s1, s15
 800b326:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800b40c <Explore+0x244>
 800b32a:	f7fe fac1 	bl	80098b0 <Accel>
	y++;
 800b32e:	78bb      	ldrb	r3, [r7, #2]
 800b330:	3301      	adds	r3, #1
 800b332:	b2db      	uxtb	r3, r3
 800b334:	70bb      	strb	r3, [r7, #2]
	//uint8_t xlog[10]={0},ylog[10]={0};
	int i=0;
 800b336:	2300      	movs	r3, #0
 800b338:	607b      	str	r3, [r7, #4]
	while( (x != 3) || (y != 3))
 800b33a:	e020      	b.n	800b37e <Explore+0x1b6>
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		wall_set(x,y,photo[SL], photo[SR], photo[FL], photo[FR]);
 800b33c:	78fa      	ldrb	r2, [r7, #3]
 800b33e:	78b9      	ldrb	r1, [r7, #2]
 800b340:	4b2c      	ldr	r3, [pc, #176]	; (800b3f4 <Explore+0x22c>)
 800b342:	edd3 7a02 	vldr	s15, [r3, #8]
 800b346:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <Explore+0x22c>)
 800b348:	ed93 7a01 	vldr	s14, [r3, #4]
 800b34c:	4b29      	ldr	r3, [pc, #164]	; (800b3f4 <Explore+0x22c>)
 800b34e:	edd3 6a00 	vldr	s13, [r3]
 800b352:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <Explore+0x22c>)
 800b354:	ed93 6a03 	vldr	s12, [r3, #12]
 800b358:	eef0 1a46 	vmov.f32	s3, s12
 800b35c:	eeb0 1a66 	vmov.f32	s2, s13
 800b360:	eef0 0a47 	vmov.f32	s1, s14
 800b364:	eeb0 0a67 	vmov.f32	s0, s15
 800b368:	4610      	mov	r0, r2
 800b36a:	f7ff f94f 	bl	800a60c <wall_set>

		UpdateWalkMap();
 800b36e:	f7ff faf5 	bl	800a95c <UpdateWalkMap>

		//方向決定と、座標方角の更新。
		LeftHandJudge(&x, &y, &my_direction, &action_type);
 800b372:	1c7b      	adds	r3, r7, #1
 800b374:	1cb9      	adds	r1, r7, #2
 800b376:	1cf8      	adds	r0, r7, #3
 800b378:	4a21      	ldr	r2, [pc, #132]	; (800b400 <Explore+0x238>)
 800b37a:	f7ff fc59 	bl	800ac30 <LeftHandJudge>
	while( (x != 3) || (y != 3))
 800b37e:	78fb      	ldrb	r3, [r7, #3]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d1db      	bne.n	800b33c <Explore+0x174>
 800b384:	78bb      	ldrb	r3, [r7, #2]
 800b386:	2b03      	cmp	r3, #3
 800b388:	d1d8      	bne.n	800b33c <Explore+0x174>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(45, 0);
 800b38a:	eddf 0a21 	vldr	s1, [pc, #132]	; 800b410 <Explore+0x248>
 800b38e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b414 <Explore+0x24c>
 800b392:	f7fe fb09 	bl	80099a8 <Decel>
	//flashに保存

	Signal(7);
 800b396:	2007      	movs	r0, #7
 800b398:	f000 f9e4 	bl	800b764 <Signal>
	while(1)
	{
		for(i=0;i < 10; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	607b      	str	r3, [r7, #4]
 800b3a0:	e002      	b.n	800b3a8 <Explore+0x1e0>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b09      	cmp	r3, #9
 800b3ac:	ddf9      	ble.n	800b3a2 <Explore+0x1da>
 800b3ae:	e7f5      	b.n	800b39c <Explore+0x1d4>
 800b3b0:	3bc45a38 	.word	0x3bc45a38
 800b3b4:	420617c2 	.word	0x420617c2
 800b3b8:	3f98d845 	.word	0x3f98d845
 800b3bc:	3827c5ac 	.word	0x3827c5ac
 800b3c0:	3dcccccd 	.word	0x3dcccccd
 800b3c4:	3dffd60f 	.word	0x3dffd60f
 800b3c8:	43a09dd3 	.word	0x43a09dd3
 800b3cc:	418b83e4 	.word	0x418b83e4
 800b3d0:	40000424 	.word	0x40000424
 800b3d4:	40000824 	.word	0x40000824
 800b3d8:	20000844 	.word	0x20000844
 800b3dc:	200005bc 	.word	0x200005bc
 800b3e0:	2000029c 	.word	0x2000029c
 800b3e4:	200002b0 	.word	0x200002b0
 800b3e8:	200002ac 	.word	0x200002ac
 800b3ec:	200002b4 	.word	0x200002b4
 800b3f0:	20000288 	.word	0x20000288
 800b3f4:	20000250 	.word	0x20000250
 800b3f8:	20000260 	.word	0x20000260
 800b3fc:	20000270 	.word	0x20000270
 800b400:	200002d0 	.word	0x200002d0
 800b404:	20000000 	.word	0x20000000
 800b408:	43960000 	.word	0x43960000
 800b40c:	42760000 	.word	0x42760000
 800b410:	00000000 	.word	0x00000000
 800b414:	42340000 	.word	0x42340000

0800b418 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	ed87 0a02 	vstr	s0, [r7, #8]
 800b424:	edc7 0a01 	vstr	s1, [r7, #4]
 800b428:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 800b42c:	4a0f      	ldr	r2, [pc, #60]	; (800b46c <PIDSetGain+0x54>)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	212c      	movs	r1, #44	; 0x2c
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	4413      	add	r3, r2
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 800b43c:	4a0b      	ldr	r2, [pc, #44]	; (800b46c <PIDSetGain+0x54>)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	212c      	movs	r1, #44	; 0x2c
 800b442:	fb01 f303 	mul.w	r3, r1, r3
 800b446:	4413      	add	r3, r2
 800b448:	3304      	adds	r3, #4
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 800b44e:	4a07      	ldr	r2, [pc, #28]	; (800b46c <PIDSetGain+0x54>)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	212c      	movs	r1, #44	; 0x2c
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	4413      	add	r3, r2
 800b45a:	3308      	adds	r3, #8
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	200002d4 	.word	0x200002d4

0800b470 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 800b47a:	4a07      	ldr	r2, [pc, #28]	; (800b498 <PIDChangeFlag+0x28>)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	212c      	movs	r1, #44	; 0x2c
 800b480:	fb01 f303 	mul.w	r3, r1, r3
 800b484:	4413      	add	r3, r2
 800b486:	3328      	adds	r3, #40	; 0x28
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	601a      	str	r2, [r3, #0]
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	200002d4 	.word	0x200002d4

0800b49c <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 800b4a4:	4a1b      	ldr	r2, [pc, #108]	; (800b514 <PIDReset+0x78>)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	212c      	movs	r1, #44	; 0x2c
 800b4aa:	fb01 f303 	mul.w	r3, r1, r3
 800b4ae:	4413      	add	r3, r2
 800b4b0:	330c      	adds	r3, #12
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 800b4b8:	4a16      	ldr	r2, [pc, #88]	; (800b514 <PIDReset+0x78>)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	212c      	movs	r1, #44	; 0x2c
 800b4be:	fb01 f303 	mul.w	r3, r1, r3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	3310      	adds	r3, #16
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 800b4cc:	4a11      	ldr	r2, [pc, #68]	; (800b514 <PIDReset+0x78>)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	212c      	movs	r1, #44	; 0x2c
 800b4d2:	fb01 f303 	mul.w	r3, r1, r3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3314      	adds	r3, #20
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 800b4e0:	4a0c      	ldr	r2, [pc, #48]	; (800b514 <PIDReset+0x78>)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	212c      	movs	r1, #44	; 0x2c
 800b4e6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3318      	adds	r3, #24
 800b4ee:	f04f 0200 	mov.w	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 800b4f4:	4a07      	ldr	r2, [pc, #28]	; (800b514 <PIDReset+0x78>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	212c      	movs	r1, #44	; 0x2c
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	4413      	add	r3, r2
 800b500:	3324      	adds	r3, #36	; 0x24
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	200002d4 	.word	0x200002d4

0800b518 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 800b518:	b590      	push	{r4, r7, lr}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 800b524:	4a64      	ldr	r2, [pc, #400]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	212c      	movs	r1, #44	; 0x2c
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	4413      	add	r3, r2
 800b530:	3320      	adds	r3, #32
 800b532:	ed93 7a00 	vldr	s14, [r3]
 800b536:	4a60      	ldr	r2, [pc, #384]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	212c      	movs	r1, #44	; 0x2c
 800b53c:	fb01 f303 	mul.w	r3, r1, r3
 800b540:	4413      	add	r3, r2
 800b542:	331c      	adds	r3, #28
 800b544:	edd3 7a00 	vldr	s15, [r3]
 800b548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b54c:	4a5a      	ldr	r2, [pc, #360]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	212c      	movs	r1, #44	; 0x2c
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	330c      	adds	r3, #12
 800b55a:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 800b55e:	4a56      	ldr	r2, [pc, #344]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	212c      	movs	r1, #44	; 0x2c
 800b564:	fb01 f303 	mul.w	r3, r1, r3
 800b568:	4413      	add	r3, r2
 800b56a:	3310      	adds	r3, #16
 800b56c:	ed93 7a00 	vldr	s14, [r3]
 800b570:	4a51      	ldr	r2, [pc, #324]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	212c      	movs	r1, #44	; 0x2c
 800b576:	fb01 f303 	mul.w	r3, r1, r3
 800b57a:	4413      	add	r3, r2
 800b57c:	330c      	adds	r3, #12
 800b57e:	edd3 6a00 	vldr	s13, [r3]
 800b582:	edd7 7a00 	vldr	s15, [r7]
 800b586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b58e:	4a4a      	ldr	r2, [pc, #296]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	212c      	movs	r1, #44	; 0x2c
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	4413      	add	r3, r2
 800b59a:	3310      	adds	r3, #16
 800b59c:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 800b5a0:	4a45      	ldr	r2, [pc, #276]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	212c      	movs	r1, #44	; 0x2c
 800b5a6:	fb01 f303 	mul.w	r3, r1, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	330c      	adds	r3, #12
 800b5ae:	ed93 7a00 	vldr	s14, [r3]
 800b5b2:	4a41      	ldr	r2, [pc, #260]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	212c      	movs	r1, #44	; 0x2c
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	4413      	add	r3, r2
 800b5be:	3318      	adds	r3, #24
 800b5c0:	edd3 7a00 	vldr	s15, [r3]
 800b5c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b5c8:	ed97 7a00 	vldr	s14, [r7]
 800b5cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5d0:	4a39      	ldr	r2, [pc, #228]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	212c      	movs	r1, #44	; 0x2c
 800b5d6:	fb01 f303 	mul.w	r3, r1, r3
 800b5da:	4413      	add	r3, r2
 800b5dc:	3314      	adds	r3, #20
 800b5de:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 800b5e2:	4a35      	ldr	r2, [pc, #212]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	212c      	movs	r1, #44	; 0x2c
 800b5e8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ec:	4413      	add	r3, r2
 800b5ee:	330c      	adds	r3, #12
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4931      	ldr	r1, [pc, #196]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	202c      	movs	r0, #44	; 0x2c
 800b5f8:	fb00 f303 	mul.w	r3, r0, r3
 800b5fc:	440b      	add	r3, r1
 800b5fe:	3318      	adds	r3, #24
 800b600:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 800b602:	4a2d      	ldr	r2, [pc, #180]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	212c      	movs	r1, #44	; 0x2c
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	ed93 7a00 	vldr	s14, [r3]
 800b612:	4a29      	ldr	r2, [pc, #164]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	212c      	movs	r1, #44	; 0x2c
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	330c      	adds	r3, #12
 800b620:	edd3 7a00 	vldr	s15, [r3]
 800b624:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b628:	4a23      	ldr	r2, [pc, #140]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	212c      	movs	r1, #44	; 0x2c
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	3304      	adds	r3, #4
 800b636:	edd3 6a00 	vldr	s13, [r3]
 800b63a:	4a1f      	ldr	r2, [pc, #124]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	212c      	movs	r1, #44	; 0x2c
 800b640:	fb01 f303 	mul.w	r3, r1, r3
 800b644:	4413      	add	r3, r2
 800b646:	3310      	adds	r3, #16
 800b648:	edd3 7a00 	vldr	s15, [r3]
 800b64c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b650:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b654:	4a18      	ldr	r2, [pc, #96]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	212c      	movs	r1, #44	; 0x2c
 800b65a:	fb01 f303 	mul.w	r3, r1, r3
 800b65e:	4413      	add	r3, r2
 800b660:	3308      	adds	r3, #8
 800b662:	edd3 6a00 	vldr	s13, [r3]
 800b666:	4a14      	ldr	r2, [pc, #80]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	212c      	movs	r1, #44	; 0x2c
 800b66c:	fb01 f303 	mul.w	r3, r1, r3
 800b670:	4413      	add	r3, r2
 800b672:	3314      	adds	r3, #20
 800b674:	edd3 7a00 	vldr	s15, [r3]
 800b678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b67c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b680:	ee17 0a90 	vmov	r0, s15
 800b684:	f7fc fe98 	bl	80083b8 <__aeabi_f2d>
 800b688:	4603      	mov	r3, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	ec44 3b10 	vmov	d0, r3, r4
 800b690:	f006 ffc0 	bl	8012614 <round>
 800b694:	ec54 3b10 	vmov	r3, r4, d0
 800b698:	4618      	mov	r0, r3
 800b69a:	4621      	mov	r1, r4
 800b69c:	f7fd f994 	bl	80089c8 <__aeabi_d2iz>
 800b6a0:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <PIDCalculate+0x1a0>)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	212c      	movs	r1, #44	; 0x2c
 800b6a6:	fb01 f303 	mul.w	r3, r1, r3
 800b6aa:	4413      	add	r3, r2
 800b6ac:	3324      	adds	r3, #36	; 0x24
 800b6ae:	6018      	str	r0, [r3, #0]
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd90      	pop	{r4, r7, pc}
 800b6b8:	200002d4 	.word	0x200002d4

0800b6bc <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b6c8:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 800b6cc:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <PIDInput+0x40>)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	212c      	movs	r1, #44	; 0x2c
 800b6d2:	fb01 f303 	mul.w	r3, r1, r3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3320      	adds	r3, #32
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 800b6de:	4a07      	ldr	r2, [pc, #28]	; (800b6fc <PIDInput+0x40>)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	212c      	movs	r1, #44	; 0x2c
 800b6e4:	fb01 f303 	mul.w	r3, r1, r3
 800b6e8:	4413      	add	r3, r2
 800b6ea:	331c      	adds	r3, #28
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	200002d4 	.word	0x200002d4

0800b700 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	ed87 0a02 	vstr	s0, [r7, #8]
 800b70c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b710:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 800b714:	edd7 0a00 	vldr	s1, [r7]
 800b718:	ed97 0a01 	vldr	s0, [r7, #4]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff ffcd 	bl	800b6bc <PIDInput>
	PIDCalculate( n, T );
 800b722:	ed97 0a02 	vldr	s0, [r7, #8]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fef6 	bl	800b518 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 800b72c:	4a0c      	ldr	r2, [pc, #48]	; (800b760 <PIDControl+0x60>)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	212c      	movs	r1, #44	; 0x2c
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	4413      	add	r3, r2
 800b738:	3328      	adds	r3, #40	; 0x28
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <PIDControl+0x46>
	{
		PIDReset(n);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff feab 	bl	800b49c <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 800b746:	4a06      	ldr	r2, [pc, #24]	; (800b760 <PIDControl+0x60>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	212c      	movs	r1, #44	; 0x2c
 800b74c:	fb01 f303 	mul.w	r3, r1, r3
 800b750:	4413      	add	r3, r2
 800b752:	3324      	adds	r3, #36	; 0x24
 800b754:	681b      	ldr	r3, [r3, #0]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	200002d4 	.word	0x200002d4

0800b764 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e00e      	b.n	800b790 <Signal+0x2c>
	{
		ChangeLED(mode);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 fde4 	bl	800d340 <ChangeLED>
		HAL_Delay(100);
 800b778:	2064      	movs	r0, #100	; 0x64
 800b77a:	f001 ffb7 	bl	800d6ec <HAL_Delay>
		ChangeLED(0);
 800b77e:	2000      	movs	r0, #0
 800b780:	f001 fdde 	bl	800d340 <ChangeLED>
		HAL_Delay(100);
 800b784:	2064      	movs	r0, #100	; 0x64
 800b786:	f001 ffb1 	bl	800d6ec <HAL_Delay>
	for(int i=0; i < 5; i++)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3301      	adds	r3, #1
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b04      	cmp	r3, #4
 800b794:	dded      	ble.n	800b772 <Signal+0xe>
	}
}
 800b796:	bf00      	nop
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800b7a8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800b7f4 <BatteryCheck+0x54>
 800b7ac:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b7f8 <BatteryCheck+0x58>
 800b7b0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7fe fb83 	bl	8009ec0 <ADCToBatteryVoltage>
 800b7ba:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800b7be:	2103      	movs	r1, #3
 800b7c0:	2002      	movs	r0, #2
 800b7c2:	f7fe fba7 	bl	8009f14 <IntegerPower>
 800b7c6:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800b7c8:	6938      	ldr	r0, [r7, #16]
 800b7ca:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800b7fc <BatteryCheck+0x5c>
 800b7ce:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800b800 <BatteryCheck+0x60>
 800b7d2:	ed97 0a05 	vldr	s0, [r7, #20]
 800b7d6:	f7fe fbba 	bl	8009f4e <GetBatteryLevel>
 800b7da:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800b7dc:	68f9      	ldr	r1, [r7, #12]
 800b7de:	4809      	ldr	r0, [pc, #36]	; (800b804 <BatteryCheck+0x64>)
 800b7e0:	f007 fbfc 	bl	8012fdc <iprintf>
	Signal( battery_level );
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff ffbd 	bl	800b764 <Signal>
}
 800b7ea:	bf00      	nop
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	45800000 	.word	0x45800000
 800b7f8:	40533333 	.word	0x40533333
 800b7fc:	41066666 	.word	0x41066666
 800b800:	40e66666 	.word	0x40e66666
 800b804:	08014e50 	.word	0x08014e50

0800b808 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800b808:	b590      	push	{r4, r7, lr}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	603a      	str	r2, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
 800b814:	460b      	mov	r3, r1
 800b816:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800b818:	f001 fd76 	bl	800d308 <EmitterON>
	ADCStart();
 800b81c:	f001 fb04 	bl	800ce28 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800b820:	4840      	ldr	r0, [pc, #256]	; (800b924 <ModeSelect+0x11c>)
 800b822:	f004 ff34 	bl	801068e <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800b826:	f001 fd4f 	bl	800d2c8 <EncoderStart>

	//while中で選択
	*pMode=min;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	79fa      	ldrb	r2, [r7, #7]
 800b82e:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b830:	f247 512f 	movw	r1, #29999	; 0x752f
 800b834:	483c      	ldr	r0, [pc, #240]	; (800b928 <ModeSelect+0x120>)
 800b836:	f7fe fab5 	bl	8009da4 <InitPulse>

	int ENC3_LEFT;
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b83a:	e05c      	b.n	800b8f6 <ModeSelect+0xee>
	{
		printf("photo[FR] : %f\r\n", photo[FR]);
 800b83c:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <ModeSelect+0x124>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4618      	mov	r0, r3
 800b842:	f7fc fdb9 	bl	80083b8 <__aeabi_f2d>
 800b846:	4603      	mov	r3, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	461a      	mov	r2, r3
 800b84c:	4623      	mov	r3, r4
 800b84e:	4838      	ldr	r0, [pc, #224]	; (800b930 <ModeSelect+0x128>)
 800b850:	f007 fbc4 	bl	8012fdc <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800b854:	4b37      	ldr	r3, [pc, #220]	; (800b934 <ModeSelect+0x12c>)
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800b860:	4293      	cmp	r3, r2
 800b862:	dd21      	ble.n	800b8a8 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	f993 3000 	ldrsb.w	r3, [r3]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	3301      	adds	r3, #1
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	b25a      	sxtb	r2, r3
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	f993 3000 	ldrsb.w	r3, [r3]
 800b87c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800b880:	429a      	cmp	r2, r3
 800b882:	da02      	bge.n	800b88a <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	79fa      	ldrb	r2, [r7, #7]
 800b888:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	f993 3000 	ldrsb.w	r3, [r3]
 800b890:	4618      	mov	r0, r3
 800b892:	f001 fd55 	bl	800d340 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b896:	f247 512f 	movw	r1, #29999	; 0x752f
 800b89a:	4823      	ldr	r0, [pc, #140]	; (800b928 <ModeSelect+0x120>)
 800b89c:	f7fe fa82 	bl	8009da4 <InitPulse>
		  	  HAL_Delay(500);
 800b8a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8a4:	f001 ff22 	bl	800d6ec <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f243 522f 	movw	r2, #13615	; 0x352f
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	dc21      	bgt.n	800b8f6 <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f993 3000 	ldrsb.w	r3, [r3]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	b25a      	sxtb	r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	f993 3000 	ldrsb.w	r3, [r3]
 800b8ca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	dd02      	ble.n	800b8d8 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	79ba      	ldrb	r2, [r7, #6]
 800b8d6:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f993 3000 	ldrsb.w	r3, [r3]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f001 fd2e 	bl	800d340 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 800b8e4:	f247 512f 	movw	r1, #29999	; 0x752f
 800b8e8:	480f      	ldr	r0, [pc, #60]	; (800b928 <ModeSelect+0x120>)
 800b8ea:	f7fe fa5b 	bl	8009da4 <InitPulse>
		  	  HAL_Delay(500);
 800b8ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8f2:	f001 fefb 	bl	800d6ec <HAL_Delay>
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <ModeSelect+0x124>)
 800b8f8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b8fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b938 <ModeSelect+0x130>
 800b900:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b908:	d498      	bmi.n	800b83c <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 800b90a:	f001 fd0b 	bl	800d324 <EmitterOFF>
	ADCStop();
 800b90e:	f001 faab 	bl	800ce68 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800b912:	4804      	ldr	r0, [pc, #16]	; (800b924 <ModeSelect+0x11c>)
 800b914:	f004 fedf 	bl	80106d6 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800b918:	f001 fce6 	bl	800d2e8 <EncoderStop>

	//モード選択後どうするか
}
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	bd90      	pop	{r4, r7, pc}
 800b924:	200005bc 	.word	0x200005bc
 800b928:	40000424 	.word	0x40000424
 800b92c:	20000250 	.word	0x20000250
 800b930:	08014e58 	.word	0x08014e58
 800b934:	40000400 	.word	0x40000400
 800b938:	437a0000 	.word	0x437a0000

0800b93c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800b944:	1d39      	adds	r1, r7, #4
 800b946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b94a:	2201      	movs	r2, #1
 800b94c:	4803      	ldr	r0, [pc, #12]	; (800b95c <__io_putchar+0x20>)
 800b94e:	f006 fa01 	bl	8011d54 <HAL_UART_Transmit>
	return ch;
 800b952:	687b      	ldr	r3, [r7, #4]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200007a4 	.word	0x200007a4

0800b960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b966:	f001 fe4f 	bl	800d608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b96a:	f000 f85f 	bl	800ba2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b96e:	f000 fca9 	bl	800c2c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800b972:	f000 fc7f 	bl	800c274 <MX_DMA_Init>
  MX_ADC1_Init();
 800b976:	f000 f8c3 	bl	800bb00 <MX_ADC1_Init>
  MX_ADC2_Init();
 800b97a:	f000 f92f 	bl	800bbdc <MX_ADC2_Init>
  MX_TIM3_Init();
 800b97e:	f000 fa89 	bl	800be94 <MX_TIM3_Init>
  MX_TIM2_Init();
 800b982:	f000 fa11 	bl	800bda8 <MX_TIM2_Init>
  MX_SPI3_Init();
 800b986:	f000 f989 	bl	800bc9c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800b98a:	f000 fc49 	bl	800c220 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800b98e:	f000 fb29 	bl	800bfe4 <MX_TIM5_Init>
  MX_TIM4_Init();
 800b992:	f000 fad3 	bl	800bf3c <MX_TIM4_Init>
  MX_TIM8_Init();
 800b996:	f000 fb9b 	bl	800c0d0 <MX_TIM8_Init>
  MX_TIM1_Init();
 800b99a:	f000 f9b5 	bl	800bd08 <MX_TIM1_Init>
//
//  while(1)
//  {
//
//  }
  ADCStart();
 800b99e:	f001 fa43 	bl	800ce28 <ADCStart>
  HAL_Delay(500);
 800b9a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9a6:	f001 fea1 	bl	800d6ec <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <main+0xc0>)
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fef6 	bl	800b7a0 <BatteryCheck>

  int8_t mode=0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 800b9b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4819      	ldr	r0, [pc, #100]	; (800ba24 <main+0xc4>)
 800b9c0:	f007 fb0c 	bl	8012fdc <iprintf>
  ModeSelect( 0, 7, &mode);
 800b9c4:	1dfb      	adds	r3, r7, #7
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	2107      	movs	r1, #7
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f7ff ff1c 	bl	800b808 <ModeSelect>
  Signal( mode );
 800b9d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fec5 	bl	800b764 <Signal>
  	  printf("ドン\r\n");
 800b9da:	4813      	ldr	r0, [pc, #76]	; (800ba28 <main+0xc8>)
 800b9dc:	f007 fb72 	bl	80130c4 <puts>

  while (1)
  {

	  switch( mode )
 800b9e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9e4:	2b07      	cmp	r3, #7
 800b9e6:	d819      	bhi.n	800ba1c <main+0xbc>
 800b9e8:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <main+0x90>)
 800b9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ee:	bf00      	nop
 800b9f0:	0800ba1d 	.word	0x0800ba1d
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba1d 	.word	0x0800ba1d
 800b9fc:	0800ba1d 	.word	0x0800ba1d
 800ba00:	0800ba1d 	.word	0x0800ba1d
 800ba04:	0800ba1d 	.word	0x0800ba1d
 800ba08:	0800ba11 	.word	0x0800ba11
 800ba0c:	0800ba17 	.word	0x0800ba17
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 800ba10:	f7ff fbda 	bl	800b1c8 <Explore>
		  break;
 800ba14:	e003      	b.n	800ba1e <main+0xbe>
	  case 7:
		  WritingFree();
 800ba16:	f7ff fad5 	bl	800afc4 <WritingFree>
		  break;
 800ba1a:	e000      	b.n	800ba1e <main+0xbe>
	  default :
		  break;
 800ba1c:	bf00      	nop
	  switch( mode )
 800ba1e:	e7df      	b.n	800b9e0 <main+0x80>
 800ba20:	20000438 	.word	0x20000438
 800ba24:	08014e6c 	.word	0x08014e6c
 800ba28:	08014e78 	.word	0x08014e78

0800ba2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b094      	sub	sp, #80	; 0x50
 800ba30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba32:	f107 0320 	add.w	r3, r7, #32
 800ba36:	2230      	movs	r2, #48	; 0x30
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f006 fe69 	bl	8012712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba40:	f107 030c 	add.w	r3, r7, #12
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	605a      	str	r2, [r3, #4]
 800ba4a:	609a      	str	r2, [r3, #8]
 800ba4c:	60da      	str	r2, [r3, #12]
 800ba4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba50:	2300      	movs	r3, #0
 800ba52:	60bb      	str	r3, [r7, #8]
 800ba54:	4b28      	ldr	r3, [pc, #160]	; (800baf8 <SystemClock_Config+0xcc>)
 800ba56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba58:	4a27      	ldr	r2, [pc, #156]	; (800baf8 <SystemClock_Config+0xcc>)
 800ba5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba5e:	6413      	str	r3, [r2, #64]	; 0x40
 800ba60:	4b25      	ldr	r3, [pc, #148]	; (800baf8 <SystemClock_Config+0xcc>)
 800ba62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba68:	60bb      	str	r3, [r7, #8]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	607b      	str	r3, [r7, #4]
 800ba70:	4b22      	ldr	r3, [pc, #136]	; (800bafc <SystemClock_Config+0xd0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a21      	ldr	r2, [pc, #132]	; (800bafc <SystemClock_Config+0xd0>)
 800ba76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	4b1f      	ldr	r3, [pc, #124]	; (800bafc <SystemClock_Config+0xd0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba84:	607b      	str	r3, [r7, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ba8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba92:	2302      	movs	r3, #2
 800ba94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ba96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800baa0:	23a8      	movs	r3, #168	; 0xa8
 800baa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800baa4:	2302      	movs	r3, #2
 800baa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800baa8:	2304      	movs	r3, #4
 800baaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800baac:	f107 0320 	add.w	r3, r7, #32
 800bab0:	4618      	mov	r0, r3
 800bab2:	f003 fc0b 	bl	800f2cc <HAL_RCC_OscConfig>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800babc:	f000 fccc 	bl	800c458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bac0:	230f      	movs	r3, #15
 800bac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bac4:	2302      	movs	r3, #2
 800bac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bac8:	2300      	movs	r3, #0
 800baca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bacc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800bad8:	f107 030c 	add.w	r3, r7, #12
 800badc:	2105      	movs	r1, #5
 800bade:	4618      	mov	r0, r3
 800bae0:	f003 fe64 	bl	800f7ac <HAL_RCC_ClockConfig>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800baea:	f000 fcb5 	bl	800c458 <Error_Handler>
  }
}
 800baee:	bf00      	nop
 800baf0:	3750      	adds	r7, #80	; 0x50
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	40023800 	.word	0x40023800
 800bafc:	40007000 	.word	0x40007000

0800bb00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800bb06:	463b      	mov	r3, r7
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	605a      	str	r2, [r3, #4]
 800bb0e:	609a      	str	r2, [r3, #8]
 800bb10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800bb12:	4b2f      	ldr	r3, [pc, #188]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb14:	4a2f      	ldr	r2, [pc, #188]	; (800bbd4 <MX_ADC1_Init+0xd4>)
 800bb16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800bb18:	4b2d      	ldr	r3, [pc, #180]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bb1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bb20:	4b2b      	ldr	r3, [pc, #172]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800bb26:	4b2a      	ldr	r3, [pc, #168]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb28:	2201      	movs	r2, #1
 800bb2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800bb2c:	4b28      	ldr	r3, [pc, #160]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb2e:	2201      	movs	r2, #1
 800bb30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bb32:	4b27      	ldr	r3, [pc, #156]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bb3a:	4b25      	ldr	r3, [pc, #148]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bb40:	4b23      	ldr	r3, [pc, #140]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb42:	4a25      	ldr	r2, [pc, #148]	; (800bbd8 <MX_ADC1_Init+0xd8>)
 800bb44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bb46:	4b22      	ldr	r3, [pc, #136]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800bb4c:	4b20      	ldr	r3, [pc, #128]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb4e:	2203      	movs	r2, #3
 800bb50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800bb52:	4b1f      	ldr	r3, [pc, #124]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bb60:	481b      	ldr	r0, [pc, #108]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb62:	f001 fde5 	bl	800d730 <HAL_ADC_Init>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800bb6c:	f000 fc74 	bl	800c458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800bb70:	230a      	movs	r3, #10
 800bb72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800bb74:	2301      	movs	r3, #1
 800bb76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4813      	ldr	r0, [pc, #76]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb82:	f002 f8bd 	bl	800dd00 <HAL_ADC_ConfigChannel>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800bb8c:	f000 fc64 	bl	800c458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800bb90:	230e      	movs	r3, #14
 800bb92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800bb94:	2302      	movs	r3, #2
 800bb96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bb98:	463b      	mov	r3, r7
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	480c      	ldr	r0, [pc, #48]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bb9e:	f002 f8af 	bl	800dd00 <HAL_ADC_ConfigChannel>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800bba8:	f000 fc56 	bl	800c458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800bbac:	2309      	movs	r3, #9
 800bbae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4805      	ldr	r0, [pc, #20]	; (800bbd0 <MX_ADC1_Init+0xd0>)
 800bbba:	f002 f8a1 	bl	800dd00 <HAL_ADC_ConfigChannel>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800bbc4:	f000 fc48 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bbc8:	bf00      	nop
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	2000075c 	.word	0x2000075c
 800bbd4:	40012000 	.word	0x40012000
 800bbd8:	0f000001 	.word	0x0f000001

0800bbdc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800bbe2:	463b      	mov	r3, r7
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	609a      	str	r2, [r3, #8]
 800bbec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800bbee:	4b28      	ldr	r3, [pc, #160]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bbf0:	4a28      	ldr	r2, [pc, #160]	; (800bc94 <MX_ADC2_Init+0xb8>)
 800bbf2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800bbf4:	4b26      	ldr	r3, [pc, #152]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bbf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bbfa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800bbfc:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800bc02:	4b23      	ldr	r3, [pc, #140]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc04:	2201      	movs	r2, #1
 800bc06:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800bc08:	4b21      	ldr	r3, [pc, #132]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bc0e:	4b20      	ldr	r3, [pc, #128]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bc16:	4b1e      	ldr	r3, [pc, #120]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bc1c:	4b1c      	ldr	r3, [pc, #112]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc1e:	4a1e      	ldr	r2, [pc, #120]	; (800bc98 <MX_ADC2_Init+0xbc>)
 800bc20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bc22:	4b1b      	ldr	r3, [pc, #108]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800bc28:	4b19      	ldr	r3, [pc, #100]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bc36:	4b16      	ldr	r3, [pc, #88]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc38:	2201      	movs	r2, #1
 800bc3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bc3c:	4814      	ldr	r0, [pc, #80]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc3e:	f001 fd77 	bl	800d730 <HAL_ADC_Init>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800bc48:	f000 fc06 	bl	800c458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800bc4c:	230b      	movs	r3, #11
 800bc4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800bc50:	2301      	movs	r3, #1
 800bc52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800bc54:	2303      	movs	r3, #3
 800bc56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bc58:	463b      	mov	r3, r7
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	480c      	ldr	r0, [pc, #48]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc5e:	f002 f84f 	bl	800dd00 <HAL_ADC_ConfigChannel>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800bc68:	f000 fbf6 	bl	800c458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800bc6c:	230f      	movs	r3, #15
 800bc6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800bc70:	2302      	movs	r3, #2
 800bc72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bc74:	463b      	mov	r3, r7
 800bc76:	4619      	mov	r1, r3
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <MX_ADC2_Init+0xb4>)
 800bc7a:	f002 f841 	bl	800dd00 <HAL_ADC_ConfigChannel>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800bc84:	f000 fbe8 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	2000063c 	.word	0x2000063c
 800bc94:	40012100 	.word	0x40012100
 800bc98:	0f000001 	.word	0x0f000001

0800bc9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bca2:	4a18      	ldr	r2, [pc, #96]	; (800bd04 <MX_SPI3_Init+0x68>)
 800bca4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bca6:	4b16      	ldr	r3, [pc, #88]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bcac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bcae:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800bcba:	4b11      	ldr	r3, [pc, #68]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bccc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bcce:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcd0:	2228      	movs	r2, #40	; 0x28
 800bcd2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bcda:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800bce6:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bce8:	220a      	movs	r2, #10
 800bcea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bcec:	4804      	ldr	r0, [pc, #16]	; (800bd00 <MX_SPI3_Init+0x64>)
 800bcee:	f003 ff4f 	bl	800fb90 <HAL_SPI_Init>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800bcf8:	f000 fbae 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bcfc:	bf00      	nop
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20000704 	.word	0x20000704
 800bd04:	40003c00 	.word	0x40003c00

0800bd08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bd0e:	f107 0308 	add.w	r3, r7, #8
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	605a      	str	r2, [r3, #4]
 800bd18:	609a      	str	r2, [r3, #8]
 800bd1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800bd24:	4b1e      	ldr	r3, [pc, #120]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd26:	4a1f      	ldr	r2, [pc, #124]	; (800bda4 <MX_TIM1_Init+0x9c>)
 800bd28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800bd2a:	4b1d      	ldr	r3, [pc, #116]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd2c:	22a7      	movs	r2, #167	; 0xa7
 800bd2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bd30:	4b1b      	ldr	r3, [pc, #108]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800bd36:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd38:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bd3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd3e:	4b18      	ldr	r3, [pc, #96]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bd44:	4b16      	ldr	r3, [pc, #88]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bd50:	4813      	ldr	r0, [pc, #76]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd52:	f004 fc71 	bl	8010638 <HAL_TIM_Base_Init>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800bd5c:	f000 fb7c 	bl	800c458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bd60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	480c      	ldr	r0, [pc, #48]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd6e:	f005 f9e3 	bl	8011138 <HAL_TIM_ConfigClockSource>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800bd78:	f000 fb6e 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bd84:	463b      	mov	r3, r7
 800bd86:	4619      	mov	r1, r3
 800bd88:	4805      	ldr	r0, [pc, #20]	; (800bda0 <MX_TIM1_Init+0x98>)
 800bd8a:	f005 fe8f 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800bd94:	f000 fb60 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800bd98:	bf00      	nop
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20000844 	.word	0x20000844
 800bda4:	40010000 	.word	0x40010000

0800bda8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	; 0x38
 800bdac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bdae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	605a      	str	r2, [r3, #4]
 800bdb8:	609a      	str	r2, [r3, #8]
 800bdba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bdbc:	f107 0320 	add.w	r3, r7, #32
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bdc6:	1d3b      	adds	r3, r7, #4
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	605a      	str	r2, [r3, #4]
 800bdce:	609a      	str	r2, [r3, #8]
 800bdd0:	60da      	str	r2, [r3, #12]
 800bdd2:	611a      	str	r2, [r3, #16]
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bdd8:	4b2d      	ldr	r3, [pc, #180]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bdda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bdde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bde0:	4b2b      	ldr	r3, [pc, #172]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bde6:	4b2a      	ldr	r3, [pc, #168]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800bdec:	4b28      	ldr	r3, [pc, #160]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bdee:	f241 0267 	movw	r2, #4199	; 0x1067
 800bdf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bdf4:	4b26      	ldr	r3, [pc, #152]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bdfa:	4b25      	ldr	r3, [pc, #148]	; (800be90 <MX_TIM2_Init+0xe8>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800be00:	4823      	ldr	r0, [pc, #140]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be02:	f004 fc19 	bl	8010638 <HAL_TIM_Base_Init>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800be0c:	f000 fb24 	bl	800c458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800be10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800be16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be1a:	4619      	mov	r1, r3
 800be1c:	481c      	ldr	r0, [pc, #112]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be1e:	f005 f98b 	bl	8011138 <HAL_TIM_ConfigClockSource>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800be28:	f000 fb16 	bl	800c458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800be2c:	4818      	ldr	r0, [pc, #96]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be2e:	f004 fdd1 	bl	80109d4 <HAL_TIM_PWM_Init>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800be38:	f000 fb0e 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be3c:	2300      	movs	r3, #0
 800be3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be40:	2300      	movs	r3, #0
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800be44:	f107 0320 	add.w	r3, r7, #32
 800be48:	4619      	mov	r1, r3
 800be4a:	4811      	ldr	r0, [pc, #68]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be4c:	f005 fe2e 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800be56:	f000 faff 	bl	800c458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800be5a:	2360      	movs	r3, #96	; 0x60
 800be5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800be6a:	1d3b      	adds	r3, r7, #4
 800be6c:	220c      	movs	r2, #12
 800be6e:	4619      	mov	r1, r3
 800be70:	4807      	ldr	r0, [pc, #28]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be72:	f005 f89b 	bl	8010fac <HAL_TIM_PWM_ConfigChannel>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800be7c:	f000 faec 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800be80:	4803      	ldr	r0, [pc, #12]	; (800be90 <MX_TIM2_Init+0xe8>)
 800be82:	f000 fd89 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800be86:	bf00      	nop
 800be88:	3738      	adds	r7, #56	; 0x38
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000884 	.word	0x20000884

0800be94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08c      	sub	sp, #48	; 0x30
 800be98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800be9a:	f107 030c 	add.w	r3, r7, #12
 800be9e:	2224      	movs	r2, #36	; 0x24
 800bea0:	2100      	movs	r1, #0
 800bea2:	4618      	mov	r0, r3
 800bea4:	f006 fc35 	bl	8012712 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bea8:	1d3b      	adds	r3, r7, #4
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800beb0:	4b20      	ldr	r3, [pc, #128]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800beb2:	4a21      	ldr	r2, [pc, #132]	; (800bf38 <MX_TIM3_Init+0xa4>)
 800beb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800beb6:	4b1f      	ldr	r3, [pc, #124]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800beb8:	2200      	movs	r2, #0
 800beba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bebc:	4b1d      	ldr	r3, [pc, #116]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800bec4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800bec8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800beca:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800becc:	2200      	movs	r2, #0
 800bece:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bed0:	4b18      	ldr	r3, [pc, #96]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800bed6:	2303      	movs	r3, #3
 800bed8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800beda:	2300      	movs	r3, #0
 800bedc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800bede:	2301      	movs	r3, #1
 800bee0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800bee2:	2300      	movs	r3, #0
 800bee4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800beea:	2300      	movs	r3, #0
 800beec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800beee:	2301      	movs	r3, #1
 800bef0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800bef2:	2300      	movs	r3, #0
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	4619      	mov	r1, r3
 800bf00:	480c      	ldr	r0, [pc, #48]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800bf02:	f004 fddb 	bl	8010abc <HAL_TIM_Encoder_Init>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800bf0c:	f000 faa4 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf10:	2300      	movs	r3, #0
 800bf12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4805      	ldr	r0, [pc, #20]	; (800bf34 <MX_TIM3_Init+0xa0>)
 800bf1e:	f005 fdc5 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800bf28:	f000 fa96 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800bf2c:	bf00      	nop
 800bf2e:	3730      	adds	r7, #48	; 0x30
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	200006c4 	.word	0x200006c4
 800bf38:	40000400 	.word	0x40000400

0800bf3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	; 0x30
 800bf40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	2224      	movs	r2, #36	; 0x24
 800bf48:	2100      	movs	r1, #0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f006 fbe1 	bl	8012712 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf50:	1d3b      	adds	r3, r7, #4
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800bf58:	4b20      	ldr	r3, [pc, #128]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf5a:	4a21      	ldr	r2, [pc, #132]	; (800bfe0 <MX_TIM4_Init+0xa4>)
 800bf5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800bf5e:	4b1f      	ldr	r3, [pc, #124]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf64:	4b1d      	ldr	r3, [pc, #116]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800bf6a:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf6c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800bf70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf72:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf78:	4b18      	ldr	r3, [pc, #96]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800bf82:	2300      	movs	r3, #0
 800bf84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800bf86:	2301      	movs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800bf92:	2300      	movs	r3, #0
 800bf94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800bf96:	2301      	movs	r3, #1
 800bf98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	480c      	ldr	r0, [pc, #48]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bfaa:	f004 fd87 	bl	8010abc <HAL_TIM_Encoder_Init>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800bfb4:	f000 fa50 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800bfc0:	1d3b      	adds	r3, r7, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4805      	ldr	r0, [pc, #20]	; (800bfdc <MX_TIM4_Init+0xa0>)
 800bfc6:	f005 fd71 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800bfd0:	f000 fa42 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800bfd4:	bf00      	nop
 800bfd6:	3730      	adds	r7, #48	; 0x30
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	200005fc 	.word	0x200005fc
 800bfe0:	40000800 	.word	0x40000800

0800bfe4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08e      	sub	sp, #56	; 0x38
 800bfe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bfea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfee:	2200      	movs	r2, #0
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	605a      	str	r2, [r3, #4]
 800bff4:	609a      	str	r2, [r3, #8]
 800bff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bff8:	f107 0320 	add.w	r3, r7, #32
 800bffc:	2200      	movs	r2, #0
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c002:	1d3b      	adds	r3, r7, #4
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	609a      	str	r2, [r3, #8]
 800c00c:	60da      	str	r2, [r3, #12]
 800c00e:	611a      	str	r2, [r3, #16]
 800c010:	615a      	str	r2, [r3, #20]
 800c012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800c014:	4b2c      	ldr	r3, [pc, #176]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c016:	4a2d      	ldr	r2, [pc, #180]	; (800c0cc <MX_TIM5_Init+0xe8>)
 800c018:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800c01a:	4b2b      	ldr	r3, [pc, #172]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c020:	4b29      	ldr	r3, [pc, #164]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c022:	2200      	movs	r2, #0
 800c024:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800c026:	4b28      	ldr	r3, [pc, #160]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c028:	f241 0267 	movw	r2, #4199	; 0x1067
 800c02c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c02e:	4b26      	ldr	r3, [pc, #152]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c030:	2200      	movs	r2, #0
 800c032:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c034:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c036:	2200      	movs	r2, #0
 800c038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c03a:	4823      	ldr	r0, [pc, #140]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c03c:	f004 fafc 	bl	8010638 <HAL_TIM_Base_Init>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800c046:	f000 fa07 	bl	800c458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c054:	4619      	mov	r1, r3
 800c056:	481c      	ldr	r0, [pc, #112]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c058:	f005 f86e 	bl	8011138 <HAL_TIM_ConfigClockSource>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800c062:	f000 f9f9 	bl	800c458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c066:	4818      	ldr	r0, [pc, #96]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c068:	f004 fcb4 	bl	80109d4 <HAL_TIM_PWM_Init>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800c072:	f000 f9f1 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c076:	2300      	movs	r3, #0
 800c078:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c07e:	f107 0320 	add.w	r3, r7, #32
 800c082:	4619      	mov	r1, r3
 800c084:	4810      	ldr	r0, [pc, #64]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c086:	f005 fd11 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800c090:	f000 f9e2 	bl	800c458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c094:	2360      	movs	r3, #96	; 0x60
 800c096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c09c:	2300      	movs	r3, #0
 800c09e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c0a4:	1d3b      	adds	r3, r7, #4
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4807      	ldr	r0, [pc, #28]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c0ac:	f004 ff7e 	bl	8010fac <HAL_TIM_PWM_ConfigChannel>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800c0b6:	f000 f9cf 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800c0ba:	4803      	ldr	r0, [pc, #12]	; (800c0c8 <MX_TIM5_Init+0xe4>)
 800c0bc:	f000 fc6c 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800c0c0:	bf00      	nop
 800c0c2:	3738      	adds	r7, #56	; 0x38
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	20000684 	.word	0x20000684
 800c0cc:	40000c00 	.word	0x40000c00

0800c0d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b096      	sub	sp, #88	; 0x58
 800c0d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c0d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	605a      	str	r2, [r3, #4]
 800c0e0:	609a      	str	r2, [r3, #8]
 800c0e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c0e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	605a      	str	r2, [r3, #4]
 800c0f8:	609a      	str	r2, [r3, #8]
 800c0fa:	60da      	str	r2, [r3, #12]
 800c0fc:	611a      	str	r2, [r3, #16]
 800c0fe:	615a      	str	r2, [r3, #20]
 800c100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c102:	1d3b      	adds	r3, r7, #4
 800c104:	2220      	movs	r2, #32
 800c106:	2100      	movs	r1, #0
 800c108:	4618      	mov	r0, r3
 800c10a:	f006 fb02 	bl	8012712 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800c10e:	4b42      	ldr	r3, [pc, #264]	; (800c218 <MX_TIM8_Init+0x148>)
 800c110:	4a42      	ldr	r2, [pc, #264]	; (800c21c <MX_TIM8_Init+0x14c>)
 800c112:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800c114:	4b40      	ldr	r3, [pc, #256]	; (800c218 <MX_TIM8_Init+0x148>)
 800c116:	22a7      	movs	r2, #167	; 0xa7
 800c118:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c11a:	4b3f      	ldr	r3, [pc, #252]	; (800c218 <MX_TIM8_Init+0x148>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800c120:	4b3d      	ldr	r3, [pc, #244]	; (800c218 <MX_TIM8_Init+0x148>)
 800c122:	2231      	movs	r2, #49	; 0x31
 800c124:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c126:	4b3c      	ldr	r3, [pc, #240]	; (800c218 <MX_TIM8_Init+0x148>)
 800c128:	2200      	movs	r2, #0
 800c12a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800c12c:	4b3a      	ldr	r3, [pc, #232]	; (800c218 <MX_TIM8_Init+0x148>)
 800c12e:	2200      	movs	r2, #0
 800c130:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c132:	4b39      	ldr	r3, [pc, #228]	; (800c218 <MX_TIM8_Init+0x148>)
 800c134:	2280      	movs	r2, #128	; 0x80
 800c136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c138:	4837      	ldr	r0, [pc, #220]	; (800c218 <MX_TIM8_Init+0x148>)
 800c13a:	f004 fa7d 	bl	8010638 <HAL_TIM_Base_Init>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800c144:	f000 f988 	bl	800c458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c14c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c14e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c152:	4619      	mov	r1, r3
 800c154:	4830      	ldr	r0, [pc, #192]	; (800c218 <MX_TIM8_Init+0x148>)
 800c156:	f004 ffef 	bl	8011138 <HAL_TIM_ConfigClockSource>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800c160:	f000 f97a 	bl	800c458 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c164:	482c      	ldr	r0, [pc, #176]	; (800c218 <MX_TIM8_Init+0x148>)
 800c166:	f004 fae1 	bl	801072c <HAL_TIM_OC_Init>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800c170:	f000 f972 	bl	800c458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c174:	2300      	movs	r3, #0
 800c176:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c178:	2300      	movs	r3, #0
 800c17a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c17c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c180:	4619      	mov	r1, r3
 800c182:	4825      	ldr	r0, [pc, #148]	; (800c218 <MX_TIM8_Init+0x148>)
 800c184:	f005 fc92 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800c18e:	f000 f963 	bl	800c458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c192:	2330      	movs	r3, #48	; 0x30
 800c194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800c196:	2318      	movs	r3, #24
 800c198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c19a:	2300      	movs	r3, #0
 800c19c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c1ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4818      	ldr	r0, [pc, #96]	; (800c218 <MX_TIM8_Init+0x148>)
 800c1b8:	f004 fe98 	bl	8010eec <HAL_TIM_OC_ConfigChannel>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800c1c2:	f000 f949 	bl	800c458 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c1c6:	4b14      	ldr	r3, [pc, #80]	; (800c218 <MX_TIM8_Init+0x148>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	699a      	ldr	r2, [r3, #24]
 800c1cc:	4b12      	ldr	r3, [pc, #72]	; (800c218 <MX_TIM8_Init+0x148>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f042 0208 	orr.w	r2, r2, #8
 800c1d4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c1ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c1f4:	1d3b      	adds	r3, r7, #4
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4807      	ldr	r0, [pc, #28]	; (800c218 <MX_TIM8_Init+0x148>)
 800c1fa:	f005 fcd3 	bl	8011ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800c204:	f000 f928 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800c208:	4803      	ldr	r0, [pc, #12]	; (800c218 <MX_TIM8_Init+0x148>)
 800c20a:	f000 fbc5 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800c20e:	bf00      	nop
 800c210:	3758      	adds	r7, #88	; 0x58
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	200005bc 	.word	0x200005bc
 800c21c:	40010400 	.word	0x40010400

0800c220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c224:	4b11      	ldr	r3, [pc, #68]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c226:	4a12      	ldr	r2, [pc, #72]	; (800c270 <MX_USART1_UART_Init+0x50>)
 800c228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c22a:	4b10      	ldr	r3, [pc, #64]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c22c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c232:	4b0e      	ldr	r3, [pc, #56]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c234:	2200      	movs	r2, #0
 800c236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c23e:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c240:	2200      	movs	r2, #0
 800c242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c244:	4b09      	ldr	r3, [pc, #36]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c246:	220c      	movs	r2, #12
 800c248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c24a:	4b08      	ldr	r3, [pc, #32]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c250:	4b06      	ldr	r3, [pc, #24]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c252:	2200      	movs	r2, #0
 800c254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c256:	4805      	ldr	r0, [pc, #20]	; (800c26c <MX_USART1_UART_Init+0x4c>)
 800c258:	f005 fd2f 	bl	8011cba <HAL_UART_Init>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c262:	f000 f8f9 	bl	800c458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c266:	bf00      	nop
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	200007a4 	.word	0x200007a4
 800c270:	40011000 	.word	0x40011000

0800c274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c27a:	2300      	movs	r3, #0
 800c27c:	607b      	str	r3, [r7, #4]
 800c27e:	4b10      	ldr	r3, [pc, #64]	; (800c2c0 <MX_DMA_Init+0x4c>)
 800c280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c282:	4a0f      	ldr	r2, [pc, #60]	; (800c2c0 <MX_DMA_Init+0x4c>)
 800c284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c288:	6313      	str	r3, [r2, #48]	; 0x30
 800c28a:	4b0d      	ldr	r3, [pc, #52]	; (800c2c0 <MX_DMA_Init+0x4c>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c292:	607b      	str	r3, [r7, #4]
 800c294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c296:	2200      	movs	r2, #0
 800c298:	2100      	movs	r1, #0
 800c29a:	2038      	movs	r0, #56	; 0x38
 800c29c:	f002 f8b5 	bl	800e40a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c2a0:	2038      	movs	r0, #56	; 0x38
 800c2a2:	f002 f8ce 	bl	800e442 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	203a      	movs	r0, #58	; 0x3a
 800c2ac:	f002 f8ad 	bl	800e40a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c2b0:	203a      	movs	r0, #58	; 0x3a
 800c2b2:	f002 f8c6 	bl	800e442 <HAL_NVIC_EnableIRQ>

}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	40023800 	.word	0x40023800

0800c2c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	; 0x28
 800c2c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2ca:	f107 0314 	add.w	r3, r7, #20
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	609a      	str	r2, [r3, #8]
 800c2d6:	60da      	str	r2, [r3, #12]
 800c2d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c2da:	2300      	movs	r3, #0
 800c2dc:	613b      	str	r3, [r7, #16]
 800c2de:	4b59      	ldr	r3, [pc, #356]	; (800c444 <MX_GPIO_Init+0x180>)
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e2:	4a58      	ldr	r2, [pc, #352]	; (800c444 <MX_GPIO_Init+0x180>)
 800c2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c2ea:	4b56      	ldr	r3, [pc, #344]	; (800c444 <MX_GPIO_Init+0x180>)
 800c2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f2:	613b      	str	r3, [r7, #16]
 800c2f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	4b52      	ldr	r3, [pc, #328]	; (800c444 <MX_GPIO_Init+0x180>)
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fe:	4a51      	ldr	r2, [pc, #324]	; (800c444 <MX_GPIO_Init+0x180>)
 800c300:	f043 0304 	orr.w	r3, r3, #4
 800c304:	6313      	str	r3, [r2, #48]	; 0x30
 800c306:	4b4f      	ldr	r3, [pc, #316]	; (800c444 <MX_GPIO_Init+0x180>)
 800c308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30a:	f003 0304 	and.w	r3, r3, #4
 800c30e:	60fb      	str	r3, [r7, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	60bb      	str	r3, [r7, #8]
 800c316:	4b4b      	ldr	r3, [pc, #300]	; (800c444 <MX_GPIO_Init+0x180>)
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	4a4a      	ldr	r2, [pc, #296]	; (800c444 <MX_GPIO_Init+0x180>)
 800c31c:	f043 0301 	orr.w	r3, r3, #1
 800c320:	6313      	str	r3, [r2, #48]	; 0x30
 800c322:	4b48      	ldr	r3, [pc, #288]	; (800c444 <MX_GPIO_Init+0x180>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	60bb      	str	r3, [r7, #8]
 800c32c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c32e:	2300      	movs	r3, #0
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	4b44      	ldr	r3, [pc, #272]	; (800c444 <MX_GPIO_Init+0x180>)
 800c334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c336:	4a43      	ldr	r2, [pc, #268]	; (800c444 <MX_GPIO_Init+0x180>)
 800c338:	f043 0302 	orr.w	r3, r3, #2
 800c33c:	6313      	str	r3, [r2, #48]	; 0x30
 800c33e:	4b41      	ldr	r3, [pc, #260]	; (800c444 <MX_GPIO_Init+0x180>)
 800c340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	607b      	str	r3, [r7, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c34a:	2300      	movs	r3, #0
 800c34c:	603b      	str	r3, [r7, #0]
 800c34e:	4b3d      	ldr	r3, [pc, #244]	; (800c444 <MX_GPIO_Init+0x180>)
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	4a3c      	ldr	r2, [pc, #240]	; (800c444 <MX_GPIO_Init+0x180>)
 800c354:	f043 0308 	orr.w	r3, r3, #8
 800c358:	6313      	str	r3, [r2, #48]	; 0x30
 800c35a:	4b3a      	ldr	r3, [pc, #232]	; (800c444 <MX_GPIO_Init+0x180>)
 800c35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c366:	2200      	movs	r2, #0
 800c368:	f44f 7141 	mov.w	r1, #772	; 0x304
 800c36c:	4836      	ldr	r0, [pc, #216]	; (800c448 <MX_GPIO_Init+0x184>)
 800c36e:	f002 ff93 	bl	800f298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c372:	2200      	movs	r2, #0
 800c374:	2105      	movs	r1, #5
 800c376:	4835      	ldr	r0, [pc, #212]	; (800c44c <MX_GPIO_Init+0x188>)
 800c378:	f002 ff8e 	bl	800f298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c37c:	2200      	movs	r2, #0
 800c37e:	2104      	movs	r1, #4
 800c380:	4833      	ldr	r0, [pc, #204]	; (800c450 <MX_GPIO_Init+0x18c>)
 800c382:	f002 ff89 	bl	800f298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c386:	2200      	movs	r2, #0
 800c388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c38c:	4831      	ldr	r0, [pc, #196]	; (800c454 <MX_GPIO_Init+0x190>)
 800c38e:	f002 ff83 	bl	800f298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800c392:	f44f 7341 	mov.w	r3, #772	; 0x304
 800c396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c398:	2301      	movs	r3, #1
 800c39a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c3a4:	f107 0314 	add.w	r3, r7, #20
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4827      	ldr	r0, [pc, #156]	; (800c448 <MX_GPIO_Init+0x184>)
 800c3ac:	f002 fdda 	bl	800ef64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c3b0:	2305      	movs	r3, #5
 800c3b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4821      	ldr	r0, [pc, #132]	; (800c44c <MX_GPIO_Init+0x188>)
 800c3c8:	f002 fdcc 	bl	800ef64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800c3cc:	f241 0304 	movw	r3, #4100	; 0x1004
 800c3d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3da:	f107 0314 	add.w	r3, r7, #20
 800c3de:	4619      	mov	r1, r3
 800c3e0:	481c      	ldr	r0, [pc, #112]	; (800c454 <MX_GPIO_Init+0x190>)
 800c3e2:	f002 fdbf 	bl	800ef64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c3e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3f4:	f107 0314 	add.w	r3, r7, #20
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4814      	ldr	r0, [pc, #80]	; (800c44c <MX_GPIO_Init+0x188>)
 800c3fc:	f002 fdb2 	bl	800ef64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c400:	2304      	movs	r3, #4
 800c402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c404:	2301      	movs	r3, #1
 800c406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c40c:	2300      	movs	r3, #0
 800c40e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c410:	f107 0314 	add.w	r3, r7, #20
 800c414:	4619      	mov	r1, r3
 800c416:	480e      	ldr	r0, [pc, #56]	; (800c450 <MX_GPIO_Init+0x18c>)
 800c418:	f002 fda4 	bl	800ef64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c41c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c422:	2301      	movs	r3, #1
 800c424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c426:	2300      	movs	r3, #0
 800c428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c42a:	2300      	movs	r3, #0
 800c42c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c42e:	f107 0314 	add.w	r3, r7, #20
 800c432:	4619      	mov	r1, r3
 800c434:	4807      	ldr	r0, [pc, #28]	; (800c454 <MX_GPIO_Init+0x190>)
 800c436:	f002 fd95 	bl	800ef64 <HAL_GPIO_Init>

}
 800c43a:	bf00      	nop
 800c43c:	3728      	adds	r7, #40	; 0x28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	40023800 	.word	0x40023800
 800c448:	40020800 	.word	0x40020800
 800c44c:	40020000 	.word	0x40020000
 800c450:	40020c00 	.word	0x40020c00
 800c454:	40020400 	.word	0x40020400

0800c458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c45c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c45e:	e7fe      	b.n	800c45e <Error_Handler+0x6>

0800c460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c466:	2300      	movs	r3, #0
 800c468:	607b      	str	r3, [r7, #4]
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <HAL_MspInit+0x58>)
 800c46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46e:	4a12      	ldr	r2, [pc, #72]	; (800c4b8 <HAL_MspInit+0x58>)
 800c470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c474:	6453      	str	r3, [r2, #68]	; 0x44
 800c476:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <HAL_MspInit+0x58>)
 800c478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c47a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c482:	2300      	movs	r3, #0
 800c484:	603b      	str	r3, [r7, #0]
 800c486:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <HAL_MspInit+0x58>)
 800c488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48a:	4a0b      	ldr	r2, [pc, #44]	; (800c4b8 <HAL_MspInit+0x58>)
 800c48c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c490:	6413      	str	r3, [r2, #64]	; 0x40
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <HAL_MspInit+0x58>)
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	2004      	movs	r0, #4
 800c4a4:	f001 ffb1 	bl	800e40a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800c4a8:	2004      	movs	r0, #4
 800c4aa:	f001 ffca 	bl	800e442 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40023800 	.word	0x40023800

0800c4bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08c      	sub	sp, #48	; 0x30
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c4:	f107 031c 	add.w	r3, r7, #28
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	605a      	str	r2, [r3, #4]
 800c4ce:	609a      	str	r2, [r3, #8]
 800c4d0:	60da      	str	r2, [r3, #12]
 800c4d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a73      	ldr	r2, [pc, #460]	; (800c6a8 <HAL_ADC_MspInit+0x1ec>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d17a      	bne.n	800c5d4 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c4de:	2300      	movs	r3, #0
 800c4e0:	61bb      	str	r3, [r7, #24]
 800c4e2:	4b72      	ldr	r3, [pc, #456]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e6:	4a71      	ldr	r2, [pc, #452]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c4e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c4ee:	4b6f      	ldr	r3, [pc, #444]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f6:	61bb      	str	r3, [r7, #24]
 800c4f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	617b      	str	r3, [r7, #20]
 800c4fe:	4b6b      	ldr	r3, [pc, #428]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c502:	4a6a      	ldr	r2, [pc, #424]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c504:	f043 0304 	orr.w	r3, r3, #4
 800c508:	6313      	str	r3, [r2, #48]	; 0x30
 800c50a:	4b68      	ldr	r3, [pc, #416]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50e:	f003 0304 	and.w	r3, r3, #4
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c516:	2300      	movs	r3, #0
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	4b64      	ldr	r3, [pc, #400]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51e:	4a63      	ldr	r2, [pc, #396]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c520:	f043 0302 	orr.w	r3, r3, #2
 800c524:	6313      	str	r3, [r2, #48]	; 0x30
 800c526:	4b61      	ldr	r3, [pc, #388]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	613b      	str	r3, [r7, #16]
 800c530:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c532:	2311      	movs	r3, #17
 800c534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c536:	2303      	movs	r3, #3
 800c538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c53e:	f107 031c 	add.w	r3, r7, #28
 800c542:	4619      	mov	r1, r3
 800c544:	485a      	ldr	r0, [pc, #360]	; (800c6b0 <HAL_ADC_MspInit+0x1f4>)
 800c546:	f002 fd0d 	bl	800ef64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c54a:	2302      	movs	r3, #2
 800c54c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c54e:	2303      	movs	r3, #3
 800c550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c552:	2300      	movs	r3, #0
 800c554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c556:	f107 031c 	add.w	r3, r7, #28
 800c55a:	4619      	mov	r1, r3
 800c55c:	4855      	ldr	r0, [pc, #340]	; (800c6b4 <HAL_ADC_MspInit+0x1f8>)
 800c55e:	f002 fd01 	bl	800ef64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c562:	4b55      	ldr	r3, [pc, #340]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c564:	4a55      	ldr	r2, [pc, #340]	; (800c6bc <HAL_ADC_MspInit+0x200>)
 800c566:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c568:	4b53      	ldr	r3, [pc, #332]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c56e:	4b52      	ldr	r3, [pc, #328]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c570:	2200      	movs	r2, #0
 800c572:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c574:	4b50      	ldr	r3, [pc, #320]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c576:	2200      	movs	r2, #0
 800c578:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c57a:	4b4f      	ldr	r3, [pc, #316]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c57c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c580:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c582:	4b4d      	ldr	r3, [pc, #308]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c588:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c58a:	4b4b      	ldr	r3, [pc, #300]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c58c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c590:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c592:	4b49      	ldr	r3, [pc, #292]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c594:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c598:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c59a:	4b47      	ldr	r3, [pc, #284]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c5a0:	4b45      	ldr	r3, [pc, #276]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c5a6:	4844      	ldr	r0, [pc, #272]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c5a8:	f001 ff66 	bl	800e478 <HAL_DMA_Init>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800c5b2:	f7ff ff51 	bl	800c458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a3f      	ldr	r2, [pc, #252]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38
 800c5bc:	4a3e      	ldr	r2, [pc, #248]	; (800c6b8 <HAL_ADC_MspInit+0x1fc>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	2012      	movs	r0, #18
 800c5c8:	f001 ff1f 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c5cc:	2012      	movs	r0, #18
 800c5ce:	f001 ff38 	bl	800e442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800c5d2:	e065      	b.n	800c6a0 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a39      	ldr	r2, [pc, #228]	; (800c6c0 <HAL_ADC_MspInit+0x204>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d160      	bne.n	800c6a0 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c5de:	2300      	movs	r3, #0
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	4b32      	ldr	r3, [pc, #200]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e6:	4a31      	ldr	r2, [pc, #196]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c5e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c5ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c5ee:	4b2f      	ldr	r3, [pc, #188]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
 800c5fe:	4b2b      	ldr	r3, [pc, #172]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	4a2a      	ldr	r2, [pc, #168]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c604:	f043 0304 	orr.w	r3, r3, #4
 800c608:	6313      	str	r3, [r2, #48]	; 0x30
 800c60a:	4b28      	ldr	r3, [pc, #160]	; (800c6ac <HAL_ADC_MspInit+0x1f0>)
 800c60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	60bb      	str	r3, [r7, #8]
 800c614:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c616:	2322      	movs	r3, #34	; 0x22
 800c618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c61a:	2303      	movs	r3, #3
 800c61c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c622:	f107 031c 	add.w	r3, r7, #28
 800c626:	4619      	mov	r1, r3
 800c628:	4821      	ldr	r0, [pc, #132]	; (800c6b0 <HAL_ADC_MspInit+0x1f4>)
 800c62a:	f002 fc9b 	bl	800ef64 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c62e:	4b25      	ldr	r3, [pc, #148]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c630:	4a25      	ldr	r2, [pc, #148]	; (800c6c8 <HAL_ADC_MspInit+0x20c>)
 800c632:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c634:	4b23      	ldr	r3, [pc, #140]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c63a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c63c:	4b21      	ldr	r3, [pc, #132]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c63e:	2200      	movs	r2, #0
 800c640:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c642:	4b20      	ldr	r3, [pc, #128]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c644:	2200      	movs	r2, #0
 800c646:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c648:	4b1e      	ldr	r3, [pc, #120]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c64a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c64e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c650:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c656:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c658:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c65a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c65e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c660:	4b18      	ldr	r3, [pc, #96]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c662:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c666:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800c668:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c66e:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c670:	2200      	movs	r2, #0
 800c672:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c674:	4813      	ldr	r0, [pc, #76]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c676:	f001 feff 	bl	800e478 <HAL_DMA_Init>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800c680:	f7ff feea 	bl	800c458 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a0f      	ldr	r2, [pc, #60]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c688:	639a      	str	r2, [r3, #56]	; 0x38
 800c68a:	4a0e      	ldr	r2, [pc, #56]	; (800c6c4 <HAL_ADC_MspInit+0x208>)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c690:	2200      	movs	r2, #0
 800c692:	2100      	movs	r1, #0
 800c694:	2012      	movs	r0, #18
 800c696:	f001 feb8 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c69a:	2012      	movs	r0, #18
 800c69c:	f001 fed1 	bl	800e442 <HAL_NVIC_EnableIRQ>
}
 800c6a0:	bf00      	nop
 800c6a2:	3730      	adds	r7, #48	; 0x30
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	40012000 	.word	0x40012000
 800c6ac:	40023800 	.word	0x40023800
 800c6b0:	40020800 	.word	0x40020800
 800c6b4:	40020400 	.word	0x40020400
 800c6b8:	200007e4 	.word	0x200007e4
 800c6bc:	40026410 	.word	0x40026410
 800c6c0:	40012100 	.word	0x40012100
 800c6c4:	200008c4 	.word	0x200008c4
 800c6c8:	40026440 	.word	0x40026440

0800c6cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6d4:	f107 0314 	add.w	r3, r7, #20
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	605a      	str	r2, [r3, #4]
 800c6de:	609a      	str	r2, [r3, #8]
 800c6e0:	60da      	str	r2, [r3, #12]
 800c6e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a19      	ldr	r2, [pc, #100]	; (800c750 <HAL_SPI_MspInit+0x84>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d12c      	bne.n	800c748 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	613b      	str	r3, [r7, #16]
 800c6f2:	4b18      	ldr	r3, [pc, #96]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	4a17      	ldr	r2, [pc, #92]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c6fe:	4b15      	ldr	r3, [pc, #84]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c706:	613b      	str	r3, [r7, #16]
 800c708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	4b11      	ldr	r3, [pc, #68]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c712:	4a10      	ldr	r2, [pc, #64]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c714:	f043 0304 	orr.w	r3, r3, #4
 800c718:	6313      	str	r3, [r2, #48]	; 0x30
 800c71a:	4b0e      	ldr	r3, [pc, #56]	; (800c754 <HAL_SPI_MspInit+0x88>)
 800c71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71e:	f003 0304 	and.w	r3, r3, #4
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c726:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c72a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c72c:	2302      	movs	r3, #2
 800c72e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c730:	2300      	movs	r3, #0
 800c732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c734:	2303      	movs	r3, #3
 800c736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c738:	2306      	movs	r3, #6
 800c73a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c73c:	f107 0314 	add.w	r3, r7, #20
 800c740:	4619      	mov	r1, r3
 800c742:	4805      	ldr	r0, [pc, #20]	; (800c758 <HAL_SPI_MspInit+0x8c>)
 800c744:	f002 fc0e 	bl	800ef64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800c748:	bf00      	nop
 800c74a:	3728      	adds	r7, #40	; 0x28
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	40003c00 	.word	0x40003c00
 800c754:	40023800 	.word	0x40023800
 800c758:	40020800 	.word	0x40020800

0800c75c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a40      	ldr	r2, [pc, #256]	; (800c86c <HAL_TIM_Base_MspInit+0x110>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d116      	bne.n	800c79c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	4b3f      	ldr	r3, [pc, #252]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c776:	4a3e      	ldr	r2, [pc, #248]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	6453      	str	r3, [r2, #68]	; 0x44
 800c77e:	4b3c      	ldr	r3, [pc, #240]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	617b      	str	r3, [r7, #20]
 800c788:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800c78a:	2200      	movs	r2, #0
 800c78c:	2101      	movs	r1, #1
 800c78e:	2019      	movs	r0, #25
 800c790:	f001 fe3b 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c794:	2019      	movs	r0, #25
 800c796:	f001 fe54 	bl	800e442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c79a:	e062      	b.n	800c862 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7a4:	d116      	bne.n	800c7d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]
 800c7aa:	4b31      	ldr	r3, [pc, #196]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	4a30      	ldr	r2, [pc, #192]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7b0:	f043 0301 	orr.w	r3, r3, #1
 800c7b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c7b6:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	201c      	movs	r0, #28
 800c7c8:	f001 fe1f 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c7cc:	201c      	movs	r0, #28
 800c7ce:	f001 fe38 	bl	800e442 <HAL_NVIC_EnableIRQ>
}
 800c7d2:	e046      	b.n	800c862 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a26      	ldr	r2, [pc, #152]	; (800c874 <HAL_TIM_Base_MspInit+0x118>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d116      	bne.n	800c80c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	4b23      	ldr	r3, [pc, #140]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	4a22      	ldr	r2, [pc, #136]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7e8:	f043 0308 	orr.w	r3, r3, #8
 800c7ec:	6413      	str	r3, [r2, #64]	; 0x40
 800c7ee:	4b20      	ldr	r3, [pc, #128]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f2:	f003 0308 	and.w	r3, r3, #8
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	2032      	movs	r0, #50	; 0x32
 800c800:	f001 fe03 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c804:	2032      	movs	r0, #50	; 0x32
 800c806:	f001 fe1c 	bl	800e442 <HAL_NVIC_EnableIRQ>
}
 800c80a:	e02a      	b.n	800c862 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a19      	ldr	r2, [pc, #100]	; (800c878 <HAL_TIM_Base_MspInit+0x11c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d125      	bne.n	800c862 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c816:	2300      	movs	r3, #0
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	4b15      	ldr	r3, [pc, #84]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81e:	4a14      	ldr	r2, [pc, #80]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c820:	f043 0302 	orr.w	r3, r3, #2
 800c824:	6453      	str	r3, [r2, #68]	; 0x44
 800c826:	4b12      	ldr	r3, [pc, #72]	; (800c870 <HAL_TIM_Base_MspInit+0x114>)
 800c828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82a:	f003 0302 	and.w	r3, r3, #2
 800c82e:	60bb      	str	r3, [r7, #8]
 800c830:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800c832:	2200      	movs	r2, #0
 800c834:	2102      	movs	r1, #2
 800c836:	202c      	movs	r0, #44	; 0x2c
 800c838:	f001 fde7 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c83c:	202c      	movs	r0, #44	; 0x2c
 800c83e:	f001 fe00 	bl	800e442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c842:	2200      	movs	r2, #0
 800c844:	2100      	movs	r1, #0
 800c846:	202d      	movs	r0, #45	; 0x2d
 800c848:	f001 fddf 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c84c:	202d      	movs	r0, #45	; 0x2d
 800c84e:	f001 fdf8 	bl	800e442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800c852:	2200      	movs	r2, #0
 800c854:	2100      	movs	r1, #0
 800c856:	202e      	movs	r0, #46	; 0x2e
 800c858:	f001 fdd7 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800c85c:	202e      	movs	r0, #46	; 0x2e
 800c85e:	f001 fdf0 	bl	800e442 <HAL_NVIC_EnableIRQ>
}
 800c862:	bf00      	nop
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	40010000 	.word	0x40010000
 800c870:	40023800 	.word	0x40023800
 800c874:	40000c00 	.word	0x40000c00
 800c878:	40010400 	.word	0x40010400

0800c87c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	; 0x30
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c884:	f107 031c 	add.w	r3, r7, #28
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	605a      	str	r2, [r3, #4]
 800c88e:	609a      	str	r2, [r3, #8]
 800c890:	60da      	str	r2, [r3, #12]
 800c892:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a3a      	ldr	r2, [pc, #232]	; (800c984 <HAL_TIM_Encoder_MspInit+0x108>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d134      	bne.n	800c908 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c89e:	2300      	movs	r3, #0
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	4b39      	ldr	r3, [pc, #228]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	4a38      	ldr	r2, [pc, #224]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8a8:	f043 0302 	orr.w	r3, r3, #2
 800c8ac:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ae:	4b36      	ldr	r3, [pc, #216]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	61bb      	str	r3, [r7, #24]
 800c8b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
 800c8be:	4b32      	ldr	r3, [pc, #200]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c2:	4a31      	ldr	r2, [pc, #196]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8c4:	f043 0301 	orr.w	r3, r3, #1
 800c8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c8ca:	4b2f      	ldr	r3, [pc, #188]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c8d6:	23c0      	movs	r3, #192	; 0xc0
 800c8d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8da:	2302      	movs	r3, #2
 800c8dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8ea:	f107 031c 	add.w	r3, r7, #28
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	4826      	ldr	r0, [pc, #152]	; (800c98c <HAL_TIM_Encoder_MspInit+0x110>)
 800c8f2:	f002 fb37 	bl	800ef64 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	201d      	movs	r0, #29
 800c8fc:	f001 fd85 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c900:	201d      	movs	r0, #29
 800c902:	f001 fd9e 	bl	800e442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c906:	e038      	b.n	800c97a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a20      	ldr	r2, [pc, #128]	; (800c990 <HAL_TIM_Encoder_MspInit+0x114>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d133      	bne.n	800c97a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c912:	2300      	movs	r3, #0
 800c914:	613b      	str	r3, [r7, #16]
 800c916:	4b1c      	ldr	r3, [pc, #112]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91a:	4a1b      	ldr	r2, [pc, #108]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c91c:	f043 0304 	orr.w	r3, r3, #4
 800c920:	6413      	str	r3, [r2, #64]	; 0x40
 800c922:	4b19      	ldr	r3, [pc, #100]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c926:	f003 0304 	and.w	r3, r3, #4
 800c92a:	613b      	str	r3, [r7, #16]
 800c92c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c936:	4a14      	ldr	r2, [pc, #80]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c938:	f043 0302 	orr.w	r3, r3, #2
 800c93c:	6313      	str	r3, [r2, #48]	; 0x30
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <HAL_TIM_Encoder_MspInit+0x10c>)
 800c940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c94a:	23c0      	movs	r3, #192	; 0xc0
 800c94c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c94e:	2302      	movs	r3, #2
 800c950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c952:	2300      	movs	r3, #0
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c956:	2300      	movs	r3, #0
 800c958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c95a:	2302      	movs	r3, #2
 800c95c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c95e:	f107 031c 	add.w	r3, r7, #28
 800c962:	4619      	mov	r1, r3
 800c964:	480b      	ldr	r0, [pc, #44]	; (800c994 <HAL_TIM_Encoder_MspInit+0x118>)
 800c966:	f002 fafd 	bl	800ef64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800c96a:	2200      	movs	r2, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	201e      	movs	r0, #30
 800c970:	f001 fd4b 	bl	800e40a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c974:	201e      	movs	r0, #30
 800c976:	f001 fd64 	bl	800e442 <HAL_NVIC_EnableIRQ>
}
 800c97a:	bf00      	nop
 800c97c:	3730      	adds	r7, #48	; 0x30
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	40000400 	.word	0x40000400
 800c988:	40023800 	.word	0x40023800
 800c98c:	40020000 	.word	0x40020000
 800c990:	40000800 	.word	0x40000800
 800c994:	40020400 	.word	0x40020400

0800c998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08c      	sub	sp, #48	; 0x30
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9a0:	f107 031c 	add.w	r3, r7, #28
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	605a      	str	r2, [r3, #4]
 800c9aa:	609a      	str	r2, [r3, #8]
 800c9ac:	60da      	str	r2, [r3, #12]
 800c9ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b8:	d11e      	bne.n	800c9f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	61bb      	str	r3, [r7, #24]
 800c9be:	4b43      	ldr	r3, [pc, #268]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c2:	4a42      	ldr	r2, [pc, #264]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800c9c4:	f043 0301 	orr.w	r3, r3, #1
 800c9c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ca:	4b40      	ldr	r3, [pc, #256]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800c9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c9d6:	2308      	movs	r3, #8
 800c9d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9da:	2302      	movs	r3, #2
 800c9dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9ea:	f107 031c 	add.w	r3, r7, #28
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	4837      	ldr	r0, [pc, #220]	; (800cad0 <HAL_TIM_MspPostInit+0x138>)
 800c9f2:	f002 fab7 	bl	800ef64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800c9f6:	e064      	b.n	800cac2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a35      	ldr	r2, [pc, #212]	; (800cad4 <HAL_TIM_MspPostInit+0x13c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d11e      	bne.n	800ca40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
 800ca06:	4b31      	ldr	r3, [pc, #196]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0a:	4a30      	ldr	r2, [pc, #192]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca0c:	f043 0301 	orr.w	r3, r3, #1
 800ca10:	6313      	str	r3, [r2, #48]	; 0x30
 800ca12:	4b2e      	ldr	r3, [pc, #184]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
 800ca1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ca1e:	2302      	movs	r3, #2
 800ca20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca22:	2302      	movs	r3, #2
 800ca24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ca2e:	2302      	movs	r3, #2
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca32:	f107 031c 	add.w	r3, r7, #28
 800ca36:	4619      	mov	r1, r3
 800ca38:	4825      	ldr	r0, [pc, #148]	; (800cad0 <HAL_TIM_MspPostInit+0x138>)
 800ca3a:	f002 fa93 	bl	800ef64 <HAL_GPIO_Init>
}
 800ca3e:	e040      	b.n	800cac2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a24      	ldr	r2, [pc, #144]	; (800cad8 <HAL_TIM_MspPostInit+0x140>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d13b      	bne.n	800cac2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca52:	4a1e      	ldr	r2, [pc, #120]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	6313      	str	r3, [r2, #48]	; 0x30
 800ca5a:	4b1c      	ldr	r3, [pc, #112]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	613b      	str	r3, [r7, #16]
 800ca64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	4b18      	ldr	r3, [pc, #96]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	4a17      	ldr	r2, [pc, #92]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca70:	f043 0304 	orr.w	r3, r3, #4
 800ca74:	6313      	str	r3, [r2, #48]	; 0x30
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <HAL_TIM_MspPostInit+0x134>)
 800ca78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7a:	f003 0304 	and.w	r3, r3, #4
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ca82:	2320      	movs	r3, #32
 800ca84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca86:	2302      	movs	r3, #2
 800ca88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ca92:	2303      	movs	r3, #3
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca96:	f107 031c 	add.w	r3, r7, #28
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	480c      	ldr	r0, [pc, #48]	; (800cad0 <HAL_TIM_MspPostInit+0x138>)
 800ca9e:	f002 fa61 	bl	800ef64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800caa2:	2340      	movs	r3, #64	; 0x40
 800caa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caa6:	2302      	movs	r3, #2
 800caa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caae:	2300      	movs	r3, #0
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cab2:	2303      	movs	r3, #3
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cab6:	f107 031c 	add.w	r3, r7, #28
 800caba:	4619      	mov	r1, r3
 800cabc:	4807      	ldr	r0, [pc, #28]	; (800cadc <HAL_TIM_MspPostInit+0x144>)
 800cabe:	f002 fa51 	bl	800ef64 <HAL_GPIO_Init>
}
 800cac2:	bf00      	nop
 800cac4:	3730      	adds	r7, #48	; 0x30
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	40023800 	.word	0x40023800
 800cad0:	40020000 	.word	0x40020000
 800cad4:	40000c00 	.word	0x40000c00
 800cad8:	40010400 	.word	0x40010400
 800cadc:	40020800 	.word	0x40020800

0800cae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08a      	sub	sp, #40	; 0x28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cae8:	f107 0314 	add.w	r3, r7, #20
 800caec:	2200      	movs	r2, #0
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	605a      	str	r2, [r3, #4]
 800caf2:	609a      	str	r2, [r3, #8]
 800caf4:	60da      	str	r2, [r3, #12]
 800caf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a19      	ldr	r2, [pc, #100]	; (800cb64 <HAL_UART_MspInit+0x84>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d12c      	bne.n	800cb5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cb02:	2300      	movs	r3, #0
 800cb04:	613b      	str	r3, [r7, #16]
 800cb06:	4b18      	ldr	r3, [pc, #96]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb0c:	f043 0310 	orr.w	r3, r3, #16
 800cb10:	6453      	str	r3, [r2, #68]	; 0x44
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb16:	f003 0310 	and.w	r3, r3, #16
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb26:	4a10      	ldr	r2, [pc, #64]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb28:	f043 0301 	orr.w	r3, r3, #1
 800cb2c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <HAL_UART_MspInit+0x88>)
 800cb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cb3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cb3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb40:	2302      	movs	r3, #2
 800cb42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cb4c:	2307      	movs	r3, #7
 800cb4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb50:	f107 0314 	add.w	r3, r7, #20
 800cb54:	4619      	mov	r1, r3
 800cb56:	4805      	ldr	r0, [pc, #20]	; (800cb6c <HAL_UART_MspInit+0x8c>)
 800cb58:	f002 fa04 	bl	800ef64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cb5c:	bf00      	nop
 800cb5e:	3728      	adds	r7, #40	; 0x28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	40011000 	.word	0x40011000
 800cb68:	40023800 	.word	0x40023800
 800cb6c:	40020000 	.word	0x40020000

0800cb70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cb74:	e7fe      	b.n	800cb74 <NMI_Handler+0x4>

0800cb76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cb76:	b480      	push	{r7}
 800cb78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cb7a:	e7fe      	b.n	800cb7a <HardFault_Handler+0x4>

0800cb7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cb80:	e7fe      	b.n	800cb80 <MemManage_Handler+0x4>

0800cb82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cb82:	b480      	push	{r7}
 800cb84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cb86:	e7fe      	b.n	800cb86 <BusFault_Handler+0x4>

0800cb88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cb8c:	e7fe      	b.n	800cb8c <UsageFault_Handler+0x4>

0800cb8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cb92:	bf00      	nop
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cba0:	bf00      	nop
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cbae:	bf00      	nop
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbbc:	f000 fd76 	bl	800d6ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cbc0:	bf00      	nop
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800cbc8:	f002 f834 	bl	800ec34 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800cbcc:	bf00      	nop
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800cbd4:	4803      	ldr	r0, [pc, #12]	; (800cbe4 <ADC_IRQHandler+0x14>)
 800cbd6:	f000 fdee 	bl	800d7b6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800cbda:	4803      	ldr	r0, [pc, #12]	; (800cbe8 <ADC_IRQHandler+0x18>)
 800cbdc:	f000 fdeb 	bl	800d7b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800cbe0:	bf00      	nop
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	2000075c 	.word	0x2000075c
 800cbe8:	2000063c 	.word	0x2000063c

0800cbec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cbf0:	4802      	ldr	r0, [pc, #8]	; (800cbfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cbf2:	f004 f873 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cbf6:	bf00      	nop
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20000844 	.word	0x20000844

0800cc00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cc04:	4802      	ldr	r0, [pc, #8]	; (800cc10 <TIM2_IRQHandler+0x10>)
 800cc06:	f004 f869 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cc0a:	bf00      	nop
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000884 	.word	0x20000884

0800cc14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cc18:	4802      	ldr	r0, [pc, #8]	; (800cc24 <TIM3_IRQHandler+0x10>)
 800cc1a:	f004 f85f 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800cc1e:	bf00      	nop
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200006c4 	.word	0x200006c4

0800cc28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800cc2c:	4802      	ldr	r0, [pc, #8]	; (800cc38 <TIM4_IRQHandler+0x10>)
 800cc2e:	f004 f855 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800cc32:	bf00      	nop
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	200005fc 	.word	0x200005fc

0800cc3c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cc40:	4802      	ldr	r0, [pc, #8]	; (800cc4c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cc42:	f004 f84b 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cc46:	bf00      	nop
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200005bc 	.word	0x200005bc

0800cc50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cc54:	4802      	ldr	r0, [pc, #8]	; (800cc60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800cc56:	f004 f841 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cc5a:	bf00      	nop
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	200005bc 	.word	0x200005bc

0800cc64 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cc68:	4802      	ldr	r0, [pc, #8]	; (800cc74 <TIM8_CC_IRQHandler+0x10>)
 800cc6a:	f004 f837 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800cc6e:	bf00      	nop
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	200005bc 	.word	0x200005bc

0800cc78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cc7c:	4802      	ldr	r0, [pc, #8]	; (800cc88 <TIM5_IRQHandler+0x10>)
 800cc7e:	f004 f82d 	bl	8010cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000684 	.word	0x20000684

0800cc8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cc90:	4802      	ldr	r0, [pc, #8]	; (800cc9c <DMA2_Stream0_IRQHandler+0x10>)
 800cc92:	f001 fd67 	bl	800e764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800cc96:	bf00      	nop
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	200007e4 	.word	0x200007e4

0800cca0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cca4:	4802      	ldr	r0, [pc, #8]	; (800ccb0 <DMA2_Stream2_IRQHandler+0x10>)
 800cca6:	f001 fd5d 	bl	800e764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ccaa:	bf00      	nop
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	200008c4 	.word	0x200008c4

0800ccb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ccb8:	4b08      	ldr	r3, [pc, #32]	; (800ccdc <SystemInit+0x28>)
 800ccba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccbe:	4a07      	ldr	r2, [pc, #28]	; (800ccdc <SystemInit+0x28>)
 800ccc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ccc8:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <SystemInit+0x28>)
 800ccca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ccce:	609a      	str	r2, [r3, #8]
#endif
}
 800ccd0:	bf00      	nop
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	e000ed00 	.word	0xe000ed00

0800cce0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ccec:	2300      	movs	r3, #0
 800ccee:	617b      	str	r3, [r7, #20]
 800ccf0:	e00a      	b.n	800cd08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ccf2:	f3af 8000 	nop.w
 800ccf6:	4601      	mov	r1, r0
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	60ba      	str	r2, [r7, #8]
 800ccfe:	b2ca      	uxtb	r2, r1
 800cd00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	3301      	adds	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	dbf0      	blt.n	800ccf2 <_read+0x12>
	}

return len;
 800cd10:	687b      	ldr	r3, [r7, #4]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	60b9      	str	r1, [r7, #8]
 800cd24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd26:	2300      	movs	r3, #0
 800cd28:	617b      	str	r3, [r7, #20]
 800cd2a:	e009      	b.n	800cd40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	60ba      	str	r2, [r7, #8]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fe fe01 	bl	800b93c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	dbf1      	blt.n	800cd2c <_write+0x12>
	}
	return len;
 800cd48:	687b      	ldr	r3, [r7, #4]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <_close>:

int _close(int file)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
	return -1;
 800cd5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cd7a:	605a      	str	r2, [r3, #4]
	return 0;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <_isatty>:

int _isatty(int file)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
	return 1;
 800cd92:	2301      	movs	r3, #1
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
	return 0;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
	...

0800cdbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cdc4:	4a14      	ldr	r2, [pc, #80]	; (800ce18 <_sbrk+0x5c>)
 800cdc6:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <_sbrk+0x60>)
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cdd0:	4b13      	ldr	r3, [pc, #76]	; (800ce20 <_sbrk+0x64>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cdd8:	4b11      	ldr	r3, [pc, #68]	; (800ce20 <_sbrk+0x64>)
 800cdda:	4a12      	ldr	r2, [pc, #72]	; (800ce24 <_sbrk+0x68>)
 800cddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cdde:	4b10      	ldr	r3, [pc, #64]	; (800ce20 <_sbrk+0x64>)
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4413      	add	r3, r2
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d207      	bcs.n	800cdfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cdec:	f005 fc5c 	bl	80126a8 <__errno>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800cdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfa:	e009      	b.n	800ce10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cdfc:	4b08      	ldr	r3, [pc, #32]	; (800ce20 <_sbrk+0x64>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <_sbrk+0x64>)
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4413      	add	r3, r2
 800ce0a:	4a05      	ldr	r2, [pc, #20]	; (800ce20 <_sbrk+0x64>)
 800ce0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3718      	adds	r7, #24
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	20020000 	.word	0x20020000
 800ce1c:	00000400 	.word	0x00000400
 800ce20:	20000434 	.word	0x20000434
 800ce24:	20000960 	.word	0x20000960

0800ce28 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	490a      	ldr	r1, [pc, #40]	; (800ce58 <ADCStart+0x30>)
 800ce30:	480a      	ldr	r0, [pc, #40]	; (800ce5c <ADCStart+0x34>)
 800ce32:	f000 fe01 	bl	800da38 <HAL_ADC_Start_DMA>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <ADCStart+0x18>
	{
		Error_Handler();
 800ce3c:	f7ff fb0c 	bl	800c458 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800ce40:	2202      	movs	r2, #2
 800ce42:	4907      	ldr	r1, [pc, #28]	; (800ce60 <ADCStart+0x38>)
 800ce44:	4807      	ldr	r0, [pc, #28]	; (800ce64 <ADCStart+0x3c>)
 800ce46:	f000 fdf7 	bl	800da38 <HAL_ADC_Start_DMA>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <ADCStart+0x2c>
	{
		Error_Handler();
 800ce50:	f7ff fb02 	bl	800c458 <Error_Handler>
	}

}
 800ce54:	bf00      	nop
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	20000438 	.word	0x20000438
 800ce5c:	2000075c 	.word	0x2000075c
 800ce60:	20000444 	.word	0x20000444
 800ce64:	2000063c 	.word	0x2000063c

0800ce68 <ADCStop>:
void ADCStop()
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800ce6c:	4808      	ldr	r0, [pc, #32]	; (800ce90 <ADCStop+0x28>)
 800ce6e:	f000 fed5 	bl	800dc1c <HAL_ADC_Stop_DMA>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <ADCStop+0x14>
	{
		Error_Handler();
 800ce78:	f7ff faee 	bl	800c458 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800ce7c:	4805      	ldr	r0, [pc, #20]	; (800ce94 <ADCStop+0x2c>)
 800ce7e:	f000 fecd 	bl	800dc1c <HAL_ADC_Stop_DMA>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <ADCStop+0x24>
	{
		Error_Handler();
 800ce88:	f7ff fae6 	bl	800c458 <Error_Handler>
	}
}
 800ce8c:	bf00      	nop
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	2000075c 	.word	0x2000075c
 800ce94:	2000063c 	.word	0x2000063c

0800ce98 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800ce9c:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <FLASH_Unlock+0x1c>)
 800ce9e:	4a06      	ldr	r2, [pc, #24]	; (800ceb8 <FLASH_Unlock+0x20>)
 800cea0:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800cea2:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <FLASH_Unlock+0x1c>)
 800cea4:	4a05      	ldr	r2, [pc, #20]	; (800cebc <FLASH_Unlock+0x24>)
 800cea6:	605a      	str	r2, [r3, #4]
}
 800cea8:	bf00      	nop
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	40023c00 	.word	0x40023c00
 800ceb8:	45670123 	.word	0x45670123
 800cebc:	cdef89ab 	.word	0xcdef89ab

0800cec0 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800cec0:	b480      	push	{r7}
 800cec2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800cec4:	4b05      	ldr	r3, [pc, #20]	; (800cedc <FLASH_Lock+0x1c>)
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	4a04      	ldr	r2, [pc, #16]	; (800cedc <FLASH_Lock+0x1c>)
 800ceca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cece:	6113      	str	r3, [r2, #16]

}
 800ced0:	bf00      	nop
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	40023c00 	.word	0x40023c00

0800cee0 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800cee4:	bf00      	nop
 800cee6:	4b05      	ldr	r3, [pc, #20]	; (800cefc <FLASH_WaitBusy+0x1c>)
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1f9      	bne.n	800cee6 <FLASH_WaitBusy+0x6>
}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	40023c00 	.word	0x40023c00

0800cf00 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800cf0a:	f7ff ffc5 	bl	800ce98 <FLASH_Unlock>

	FLASH_WaitBusy();
 800cf0e:	f7ff ffe7 	bl	800cee0 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800cf12:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	4a0d      	ldr	r2, [pc, #52]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf1c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800cf1e:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	4a0a      	ldr	r2, [pc, #40]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf24:	f043 0301 	orr.w	r3, r3, #1
 800cf28:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800cf30:	f7ff ffd6 	bl	800cee0 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800cf34:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	4a04      	ldr	r2, [pc, #16]	; (800cf4c <FLASH_Write_Word+0x4c>)
 800cf3a:	f023 0301 	bic.w	r3, r3, #1
 800cf3e:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800cf40:	f7ff ffbe 	bl	800cec0 <FLASH_Lock>
}
 800cf44:	bf00      	nop
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	40023c00 	.word	0x40023c00

0800cf50 <read_byte>:
#include "ICM_20648.h"
#include <stdio.h>
volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)
double zg_offset=0;
uint8_t read_byte( uint8_t reg ) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800cf64:	2200      	movs	r2, #0
 800cf66:	2104      	movs	r1, #4
 800cf68:	480d      	ldr	r0, [pc, #52]	; (800cfa0 <read_byte+0x50>)
 800cf6a:	f002 f995 	bl	800f298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800cf6e:	f107 010f 	add.w	r1, r7, #15
 800cf72:	2364      	movs	r3, #100	; 0x64
 800cf74:	2201      	movs	r2, #1
 800cf76:	480b      	ldr	r0, [pc, #44]	; (800cfa4 <read_byte+0x54>)
 800cf78:	f002 fe6e 	bl	800fc58 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800cf7c:	f107 010e 	add.w	r1, r7, #14
 800cf80:	2364      	movs	r3, #100	; 0x64
 800cf82:	2201      	movs	r2, #1
 800cf84:	4807      	ldr	r0, [pc, #28]	; (800cfa4 <read_byte+0x54>)
 800cf86:	f002 ff9b 	bl	800fec0 <HAL_SPI_Receive>
	CS_SET;
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	2104      	movs	r1, #4
 800cf8e:	4804      	ldr	r0, [pc, #16]	; (800cfa0 <read_byte+0x50>)
 800cf90:	f002 f982 	bl	800f298 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800cf94:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	40020c00 	.word	0x40020c00
 800cfa4:	20000704 	.word	0x20000704

0800cfa8 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	460a      	mov	r2, r1
 800cfb2:	71fb      	strb	r3, [r7, #7]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800cfb8:	79fb      	ldrb	r3, [r7, #7]
 800cfba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2104      	movs	r1, #4
 800cfc6:	480c      	ldr	r0, [pc, #48]	; (800cff8 <write_byte+0x50>)
 800cfc8:	f002 f966 	bl	800f298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800cfcc:	f107 010f 	add.w	r1, r7, #15
 800cfd0:	2364      	movs	r3, #100	; 0x64
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	4809      	ldr	r0, [pc, #36]	; (800cffc <write_byte+0x54>)
 800cfd6:	f002 fe3f 	bl	800fc58 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800cfda:	1db9      	adds	r1, r7, #6
 800cfdc:	2364      	movs	r3, #100	; 0x64
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4806      	ldr	r0, [pc, #24]	; (800cffc <write_byte+0x54>)
 800cfe2:	f002 fe39 	bl	800fc58 <HAL_SPI_Transmit>
	CS_SET;
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	2104      	movs	r1, #4
 800cfea:	4803      	ldr	r0, [pc, #12]	; (800cff8 <write_byte+0x50>)
 800cfec:	f002 f954 	bl	800f298 <HAL_GPIO_WritePin>
}
 800cff0:	bf00      	nop
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	40020c00 	.word	0x40020c00
 800cffc:	20000704 	.word	0x20000704

0800d000 <IMU_init>:

uint8_t IMU_init() {
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800d006:	2000      	movs	r0, #0
 800d008:	f7ff ffa2 	bl	800cf50 <read_byte>
 800d00c:	4603      	mov	r3, r0
 800d00e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800d010:	79bb      	ldrb	r3, [r7, #6]
 800d012:	2be0      	cmp	r3, #224	; 0xe0
 800d014:	d119      	bne.n	800d04a <IMU_init+0x4a>
		ret = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800d01a:	2101      	movs	r1, #1
 800d01c:	2006      	movs	r0, #6
 800d01e:	f7ff ffc3 	bl	800cfa8 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800d022:	2110      	movs	r1, #16
 800d024:	2003      	movs	r0, #3
 800d026:	f7ff ffbf 	bl	800cfa8 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800d02a:	2120      	movs	r1, #32
 800d02c:	207f      	movs	r0, #127	; 0x7f
 800d02e:	f7ff ffbb 	bl	800cfa8 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800d032:	2117      	movs	r1, #23
 800d034:	2001      	movs	r0, #1
 800d036:	f7ff ffb7 	bl	800cfa8 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800d03a:	2106      	movs	r1, #6
 800d03c:	2014      	movs	r0, #20
 800d03e:	f7ff ffb3 	bl	800cfa8 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800d042:	2100      	movs	r1, #0
 800d044:	207f      	movs	r0, #127	; 0x7f
 800d046:	f7ff ffaf 	bl	800cfa8 <write_byte>
	}
	return ret;
 800d04a:	79fb      	ldrb	r3, [r7, #7]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <read_gyro_data>:

void read_gyro_data() {
 800d054:	b598      	push	{r3, r4, r7, lr}
 800d056:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800d058:	2033      	movs	r0, #51	; 0x33
 800d05a:	f7ff ff79 	bl	800cf50 <read_byte>
 800d05e:	4603      	mov	r3, r0
 800d060:	021b      	lsls	r3, r3, #8
 800d062:	b21c      	sxth	r4, r3
 800d064:	2034      	movs	r0, #52	; 0x34
 800d066:	f7ff ff73 	bl	800cf50 <read_byte>
 800d06a:	4603      	mov	r3, r0
 800d06c:	b21b      	sxth	r3, r3
 800d06e:	4323      	orrs	r3, r4
 800d070:	b21a      	sxth	r2, r3
 800d072:	4b11      	ldr	r3, [pc, #68]	; (800d0b8 <read_gyro_data+0x64>)
 800d074:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800d076:	2035      	movs	r0, #53	; 0x35
 800d078:	f7ff ff6a 	bl	800cf50 <read_byte>
 800d07c:	4603      	mov	r3, r0
 800d07e:	021b      	lsls	r3, r3, #8
 800d080:	b21c      	sxth	r4, r3
 800d082:	2036      	movs	r0, #54	; 0x36
 800d084:	f7ff ff64 	bl	800cf50 <read_byte>
 800d088:	4603      	mov	r3, r0
 800d08a:	b21b      	sxth	r3, r3
 800d08c:	4323      	orrs	r3, r4
 800d08e:	b21a      	sxth	r2, r3
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <read_gyro_data+0x68>)
 800d092:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800d094:	2037      	movs	r0, #55	; 0x37
 800d096:	f7ff ff5b 	bl	800cf50 <read_byte>
 800d09a:	4603      	mov	r3, r0
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	b21c      	sxth	r4, r3
 800d0a0:	2038      	movs	r0, #56	; 0x38
 800d0a2:	f7ff ff55 	bl	800cf50 <read_byte>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	4323      	orrs	r3, r4
 800d0ac:	b21a      	sxth	r2, r3
 800d0ae:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <read_gyro_data+0x6c>)
 800d0b0:	801a      	strh	r2, [r3, #0]
}
 800d0b2:	bf00      	nop
 800d0b4:	bd98      	pop	{r3, r4, r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20000930 	.word	0x20000930
 800d0bc:	2000092e 	.word	0x2000092e
 800d0c0:	20000928 	.word	0x20000928

0800d0c4 <read_accel_data>:

void read_accel_data() {
 800d0c4:	b598      	push	{r3, r4, r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 800d0c8:	202d      	movs	r0, #45	; 0x2d
 800d0ca:	f7ff ff41 	bl	800cf50 <read_byte>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	021b      	lsls	r3, r3, #8
 800d0d2:	b21c      	sxth	r4, r3
 800d0d4:	202e      	movs	r0, #46	; 0x2e
 800d0d6:	f7ff ff3b 	bl	800cf50 <read_byte>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	b21b      	sxth	r3, r3
 800d0de:	4323      	orrs	r3, r4
 800d0e0:	b21a      	sxth	r2, r3
 800d0e2:	4b11      	ldr	r3, [pc, #68]	; (800d128 <read_accel_data+0x64>)
 800d0e4:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 800d0e6:	202f      	movs	r0, #47	; 0x2f
 800d0e8:	f7ff ff32 	bl	800cf50 <read_byte>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	b21c      	sxth	r4, r3
 800d0f2:	2030      	movs	r0, #48	; 0x30
 800d0f4:	f7ff ff2c 	bl	800cf50 <read_byte>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	b21b      	sxth	r3, r3
 800d0fc:	4323      	orrs	r3, r4
 800d0fe:	b21a      	sxth	r2, r3
 800d100:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <read_accel_data+0x68>)
 800d102:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 800d104:	2031      	movs	r0, #49	; 0x31
 800d106:	f7ff ff23 	bl	800cf50 <read_byte>
 800d10a:	4603      	mov	r3, r0
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	b21c      	sxth	r4, r3
 800d110:	2032      	movs	r0, #50	; 0x32
 800d112:	f7ff ff1d 	bl	800cf50 <read_byte>
 800d116:	4603      	mov	r3, r0
 800d118:	b21b      	sxth	r3, r3
 800d11a:	4323      	orrs	r3, r4
 800d11c:	b21a      	sxth	r2, r3
 800d11e:	4b04      	ldr	r3, [pc, #16]	; (800d130 <read_accel_data+0x6c>)
 800d120:	801a      	strh	r2, [r3, #0]
}
 800d122:	bf00      	nop
 800d124:	bd98      	pop	{r3, r4, r7, pc}
 800d126:	bf00      	nop
 800d128:	2000092c 	.word	0x2000092c
 800d12c:	20000932 	.word	0x20000932
 800d130:	2000092a 	.word	0x2000092a

0800d134 <IMU_Calib>:

void IMU_Calib(){
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 800d13e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d142:	f000 fad3 	bl	800d6ec <HAL_Delay>

	int num = 2000;
 800d146:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d14a:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d14e:	6013      	str	r3, [r2, #0]
	double zg_vals[2000]={0};
 800d150:	f107 0310 	add.w	r3, r7, #16
 800d154:	3b10      	subs	r3, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800d15c:	461a      	mov	r2, r3
 800d15e:	2100      	movs	r1, #0
 800d160:	f005 fad7 	bl	8012712 <memset>
	double sum=0;
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	f04f 0400 	mov.w	r4, #0
 800d16c:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d170:	f102 0208 	add.w	r2, r2, #8
 800d174:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 0; i < num; i++){
 800d178:	2300      	movs	r3, #0
 800d17a:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d17e:	f102 0204 	add.w	r2, r2, #4
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	e03f      	b.n	800d206 <IMU_Calib+0xd2>
		zg_vals[i] = (double)zg;
 800d186:	4b33      	ldr	r3, [pc, #204]	; (800d254 <IMU_Calib+0x120>)
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	b21b      	sxth	r3, r3
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fb f901 	bl	8008394 <__aeabi_i2d>
 800d192:	460a      	mov	r2, r1
 800d194:	4601      	mov	r1, r0
 800d196:	f107 0310 	add.w	r3, r7, #16
 800d19a:	3b10      	subs	r3, #16
 800d19c:	f507 507a 	add.w	r0, r7, #16000	; 0x3e80
 800d1a0:	f100 0004 	add.w	r0, r0, #4
 800d1a4:	6800      	ldr	r0, [r0, #0]
 800d1a6:	00c0      	lsls	r0, r0, #3
 800d1a8:	4403      	add	r3, r0
 800d1aa:	e9c3 1200 	strd	r1, r2, [r3]
		sum += zg_vals[i];
 800d1ae:	f107 0310 	add.w	r3, r7, #16
 800d1b2:	3b10      	subs	r3, #16
 800d1b4:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d1b8:	f102 0204 	add.w	r2, r2, #4
 800d1bc:	6812      	ldr	r2, [r2, #0]
 800d1be:	00d2      	lsls	r2, r2, #3
 800d1c0:	4413      	add	r3, r2
 800d1c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	f507 517a 	add.w	r1, r7, #16000	; 0x3e80
 800d1ce:	f101 0108 	add.w	r1, r1, #8
 800d1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d6:	f7fa ff91 	bl	80080fc <__adddf3>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d1e2:	f102 0208 	add.w	r2, r2, #8
 800d1e6:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 800d1ea:	2002      	movs	r0, #2
 800d1ec:	f000 fa7e 	bl	800d6ec <HAL_Delay>
	for(int i = 0; i < num; i++){
 800d1f0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 800d1f4:	f103 0304 	add.w	r3, r3, #4
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 800d200:	f102 0204 	add.w	r2, r2, #4
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 800d20a:	f103 0304 	add.w	r3, r3, #4
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	dbb5      	blt.n	800d186 <IMU_Calib+0x52>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / (double)num;
 800d21a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	f7fb f8b8 	bl	8008394 <__aeabi_i2d>
 800d224:	4603      	mov	r3, r0
 800d226:	460c      	mov	r4, r1
 800d228:	461a      	mov	r2, r3
 800d22a:	4623      	mov	r3, r4
 800d22c:	f507 517a 	add.w	r1, r7, #16000	; 0x3e80
 800d230:	f101 0108 	add.w	r1, r1, #8
 800d234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d238:	f7fb fa40 	bl	80086bc <__aeabi_ddiv>
 800d23c:	4603      	mov	r3, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	4a05      	ldr	r2, [pc, #20]	; (800d258 <IMU_Calib+0x124>)
 800d242:	e9c2 3400 	strd	r3, r4, [r2]
}
 800d246:	bf00      	nop
 800d248:	f507 577a 	add.w	r7, r7, #16000	; 0x3e80
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd90      	pop	{r4, r7, pc}
 800d252:	bf00      	nop
 800d254:	20000928 	.word	0x20000928
 800d258:	20000450 	.word	0x20000450

0800d25c <lowpass_filter>:
double lowpass_filter(double x, double x0, double r)
{
 800d25c:	b5b0      	push	{r4, r5, r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	ed87 0b04 	vstr	d0, [r7, #16]
 800d266:	ed87 1b02 	vstr	d1, [r7, #8]
 800d26a:	ed87 2b00 	vstr	d2, [r7]
	return ((r)*(x) + (1.0 - (r))* (x0));
 800d26e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d272:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d276:	f7fb f8f7 	bl	8008468 <__aeabi_dmul>
 800d27a:	4603      	mov	r3, r0
 800d27c:	460c      	mov	r4, r1
 800d27e:	4625      	mov	r5, r4
 800d280:	461c      	mov	r4, r3
 800d282:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d286:	f04f 0000 	mov.w	r0, #0
 800d28a:	490e      	ldr	r1, [pc, #56]	; (800d2c4 <lowpass_filter+0x68>)
 800d28c:	f7fa ff34 	bl	80080f8 <__aeabi_dsub>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	4610      	mov	r0, r2
 800d296:	4619      	mov	r1, r3
 800d298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d29c:	f7fb f8e4 	bl	8008468 <__aeabi_dmul>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7fa ff28 	bl	80080fc <__adddf3>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	ec44 3b17 	vmov	d7, r3, r4
}
 800d2b4:	eeb0 0a47 	vmov.f32	s0, s14
 800d2b8:	eef0 0a67 	vmov.f32	s1, s15
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	3ff00000 	.word	0x3ff00000

0800d2c8 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800d2cc:	213c      	movs	r1, #60	; 0x3c
 800d2ce:	4804      	ldr	r0, [pc, #16]	; (800d2e0 <EncoderStart+0x18>)
 800d2d0:	f003 fc86 	bl	8010be0 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d2d4:	213c      	movs	r1, #60	; 0x3c
 800d2d6:	4803      	ldr	r0, [pc, #12]	; (800d2e4 <EncoderStart+0x1c>)
 800d2d8:	f003 fc82 	bl	8010be0 <HAL_TIM_Encoder_Start>
}
 800d2dc:	bf00      	nop
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	200006c4 	.word	0x200006c4
 800d2e4:	200005fc 	.word	0x200005fc

0800d2e8 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800d2ec:	213c      	movs	r1, #60	; 0x3c
 800d2ee:	4804      	ldr	r0, [pc, #16]	; (800d300 <EncoderStop+0x18>)
 800d2f0:	f003 fcad 	bl	8010c4e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800d2f4:	213c      	movs	r1, #60	; 0x3c
 800d2f6:	4803      	ldr	r0, [pc, #12]	; (800d304 <EncoderStop+0x1c>)
 800d2f8:	f003 fca9 	bl	8010c4e <HAL_TIM_Encoder_Stop>
}
 800d2fc:	bf00      	nop
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	200006c4 	.word	0x200006c4
 800d304:	200005fc 	.word	0x200005fc

0800d308 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800d30c:	2100      	movs	r1, #0
 800d30e:	4804      	ldr	r0, [pc, #16]	; (800d320 <EmitterON+0x18>)
 800d310:	f003 fa42 	bl	8010798 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d314:	2100      	movs	r1, #0
 800d316:	4802      	ldr	r0, [pc, #8]	; (800d320 <EmitterON+0x18>)
 800d318:	f004 fafd 	bl	8011916 <HAL_TIMEx_OCN_Start_IT>

}
 800d31c:	bf00      	nop
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	200005bc 	.word	0x200005bc

0800d324 <EmitterOFF>:
void EmitterOFF()
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800d328:	2100      	movs	r1, #0
 800d32a:	4804      	ldr	r0, [pc, #16]	; (800d33c <EmitterOFF+0x18>)
 800d32c:	f003 fab8 	bl	80108a0 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d330:	2100      	movs	r1, #0
 800d332:	4802      	ldr	r0, [pc, #8]	; (800d33c <EmitterOFF+0x18>)
 800d334:	f004 fb44 	bl	80119c0 <HAL_TIMEx_OCN_Stop_IT>

}
 800d338:	bf00      	nop
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	200005bc 	.word	0x200005bc

0800d340 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b07      	cmp	r3, #7
 800d34c:	f200 80ac 	bhi.w	800d4a8 <ChangeLED+0x168>
 800d350:	a201      	add	r2, pc, #4	; (adr r2, 800d358 <ChangeLED+0x18>)
 800d352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d356:	bf00      	nop
 800d358:	0800d379 	.word	0x0800d379
 800d35c:	0800d39f 	.word	0x0800d39f
 800d360:	0800d3c5 	.word	0x0800d3c5
 800d364:	0800d3eb 	.word	0x0800d3eb
 800d368:	0800d411 	.word	0x0800d411
 800d36c:	0800d437 	.word	0x0800d437
 800d370:	0800d45d 	.word	0x0800d45d
 800d374:	0800d483 	.word	0x0800d483
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d378:	2200      	movs	r2, #0
 800d37a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d37e:	484d      	ldr	r0, [pc, #308]	; (800d4b4 <ChangeLED+0x174>)
 800d380:	f001 ff8a 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d384:	2200      	movs	r2, #0
 800d386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d38a:	484a      	ldr	r0, [pc, #296]	; (800d4b4 <ChangeLED+0x174>)
 800d38c:	f001 ff84 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d390:	2200      	movs	r2, #0
 800d392:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d396:	4848      	ldr	r0, [pc, #288]	; (800d4b8 <ChangeLED+0x178>)
 800d398:	f001 ff7e 	bl	800f298 <HAL_GPIO_WritePin>
		break;
 800d39c:	e085      	b.n	800d4aa <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3a4:	4843      	ldr	r0, [pc, #268]	; (800d4b4 <ChangeLED+0x174>)
 800d3a6:	f001 ff77 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3b0:	4840      	ldr	r0, [pc, #256]	; (800d4b4 <ChangeLED+0x174>)
 800d3b2:	f001 ff71 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3bc:	483e      	ldr	r0, [pc, #248]	; (800d4b8 <ChangeLED+0x178>)
 800d3be:	f001 ff6b 	bl	800f298 <HAL_GPIO_WritePin>
		break;
 800d3c2:	e072      	b.n	800d4aa <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3ca:	483a      	ldr	r0, [pc, #232]	; (800d4b4 <ChangeLED+0x174>)
 800d3cc:	f001 ff64 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3d6:	4837      	ldr	r0, [pc, #220]	; (800d4b4 <ChangeLED+0x174>)
 800d3d8:	f001 ff5e 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3e2:	4835      	ldr	r0, [pc, #212]	; (800d4b8 <ChangeLED+0x178>)
 800d3e4:	f001 ff58 	bl	800f298 <HAL_GPIO_WritePin>

		break;
 800d3e8:	e05f      	b.n	800d4aa <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3f0:	4830      	ldr	r0, [pc, #192]	; (800d4b4 <ChangeLED+0x174>)
 800d3f2:	f001 ff51 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3fc:	482d      	ldr	r0, [pc, #180]	; (800d4b4 <ChangeLED+0x174>)
 800d3fe:	f001 ff4b 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d402:	2200      	movs	r2, #0
 800d404:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d408:	482b      	ldr	r0, [pc, #172]	; (800d4b8 <ChangeLED+0x178>)
 800d40a:	f001 ff45 	bl	800f298 <HAL_GPIO_WritePin>
		break;
 800d40e:	e04c      	b.n	800d4aa <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d410:	2200      	movs	r2, #0
 800d412:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d416:	4827      	ldr	r0, [pc, #156]	; (800d4b4 <ChangeLED+0x174>)
 800d418:	f001 ff3e 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d41c:	2200      	movs	r2, #0
 800d41e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d422:	4824      	ldr	r0, [pc, #144]	; (800d4b4 <ChangeLED+0x174>)
 800d424:	f001 ff38 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d428:	2201      	movs	r2, #1
 800d42a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d42e:	4822      	ldr	r0, [pc, #136]	; (800d4b8 <ChangeLED+0x178>)
 800d430:	f001 ff32 	bl	800f298 <HAL_GPIO_WritePin>
		break;
 800d434:	e039      	b.n	800d4aa <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d436:	2201      	movs	r2, #1
 800d438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d43c:	481d      	ldr	r0, [pc, #116]	; (800d4b4 <ChangeLED+0x174>)
 800d43e:	f001 ff2b 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d442:	2200      	movs	r2, #0
 800d444:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d448:	481a      	ldr	r0, [pc, #104]	; (800d4b4 <ChangeLED+0x174>)
 800d44a:	f001 ff25 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d44e:	2201      	movs	r2, #1
 800d450:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d454:	4818      	ldr	r0, [pc, #96]	; (800d4b8 <ChangeLED+0x178>)
 800d456:	f001 ff1f 	bl	800f298 <HAL_GPIO_WritePin>
		break;
 800d45a:	e026      	b.n	800d4aa <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d45c:	2200      	movs	r2, #0
 800d45e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d462:	4814      	ldr	r0, [pc, #80]	; (800d4b4 <ChangeLED+0x174>)
 800d464:	f001 ff18 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d468:	2201      	movs	r2, #1
 800d46a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d46e:	4811      	ldr	r0, [pc, #68]	; (800d4b4 <ChangeLED+0x174>)
 800d470:	f001 ff12 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d474:	2201      	movs	r2, #1
 800d476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d47a:	480f      	ldr	r0, [pc, #60]	; (800d4b8 <ChangeLED+0x178>)
 800d47c:	f001 ff0c 	bl	800f298 <HAL_GPIO_WritePin>

		break;
 800d480:	e013      	b.n	800d4aa <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d482:	2201      	movs	r2, #1
 800d484:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d488:	480a      	ldr	r0, [pc, #40]	; (800d4b4 <ChangeLED+0x174>)
 800d48a:	f001 ff05 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d48e:	2201      	movs	r2, #1
 800d490:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d494:	4807      	ldr	r0, [pc, #28]	; (800d4b4 <ChangeLED+0x174>)
 800d496:	f001 feff 	bl	800f298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d49a:	2201      	movs	r2, #1
 800d49c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4a0:	4805      	ldr	r0, [pc, #20]	; (800d4b8 <ChangeLED+0x178>)
 800d4a2:	f001 fef9 	bl	800f298 <HAL_GPIO_WritePin>

		break;
 800d4a6:	e000      	b.n	800d4aa <ChangeLED+0x16a>
	default: break;
 800d4a8:	bf00      	nop

	}
}
 800d4aa:	bf00      	nop
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	40020800 	.word	0x40020800
 800d4b8:	40020400 	.word	0x40020400

0800d4bc <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800d4c0:	210c      	movs	r1, #12
 800d4c2:	4809      	ldr	r0, [pc, #36]	; (800d4e8 <Motor_PWM_Start+0x2c>)
 800d4c4:	f003 fabc 	bl	8010a40 <HAL_TIM_PWM_Start>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800d4ce:	f7fe ffc3 	bl	800c458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800d4d2:	2104      	movs	r1, #4
 800d4d4:	4805      	ldr	r0, [pc, #20]	; (800d4ec <Motor_PWM_Start+0x30>)
 800d4d6:	f003 fab3 	bl	8010a40 <HAL_TIM_PWM_Start>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800d4e0:	f7fe ffba 	bl	800c458 <Error_Handler>
  }
#endif
}
 800d4e4:	bf00      	nop
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000884 	.word	0x20000884
 800d4ec:	20000684 	.word	0x20000684

0800d4f0 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dd05      	ble.n	800d50c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800d500:	2201      	movs	r2, #1
 800d502:	2104      	movs	r1, #4
 800d504:	4828      	ldr	r0, [pc, #160]	; (800d5a8 <Motor_Switch+0xb8>)
 800d506:	f001 fec7 	bl	800f298 <HAL_GPIO_WritePin>
 800d50a:	e00a      	b.n	800d522 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	da07      	bge.n	800d522 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800d512:	2200      	movs	r2, #0
 800d514:	2104      	movs	r1, #4
 800d516:	4824      	ldr	r0, [pc, #144]	; (800d5a8 <Motor_Switch+0xb8>)
 800d518:	f001 febe 	bl	800f298 <HAL_GPIO_WritePin>
		left = -left;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	425b      	negs	r3, r3
 800d520:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd05      	ble.n	800d534 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800d528:	2200      	movs	r2, #0
 800d52a:	2101      	movs	r1, #1
 800d52c:	481e      	ldr	r0, [pc, #120]	; (800d5a8 <Motor_Switch+0xb8>)
 800d52e:	f001 feb3 	bl	800f298 <HAL_GPIO_WritePin>
 800d532:	e00a      	b.n	800d54a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	da07      	bge.n	800d54a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800d53a:	2201      	movs	r2, #1
 800d53c:	2101      	movs	r1, #1
 800d53e:	481a      	ldr	r0, [pc, #104]	; (800d5a8 <Motor_Switch+0xb8>)
 800d540:	f001 feaa 	bl	800f298 <HAL_GPIO_WritePin>
	  	right = -right;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	425b      	negs	r3, r3
 800d548:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7fa ff22 	bl	8008394 <__aeabi_i2d>
 800d550:	a313      	add	r3, pc, #76	; (adr r3, 800d5a0 <Motor_Switch+0xb0>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7fb fa17 	bl	8008988 <__aeabi_dcmpgt>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <Motor_Switch+0x76>
 800d560:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d564:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800d566:	6838      	ldr	r0, [r7, #0]
 800d568:	f7fa ff14 	bl	8008394 <__aeabi_i2d>
 800d56c:	a30c      	add	r3, pc, #48	; (adr r3, 800d5a0 <Motor_Switch+0xb0>)
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	f7fb fa09 	bl	8008988 <__aeabi_dcmpgt>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d002      	beq.n	800d582 <Motor_Switch+0x92>
 800d57c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d580:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d582:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <Motor_Switch+0xbc>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d58a:	4b09      	ldr	r3, [pc, #36]	; (800d5b0 <Motor_Switch+0xc0>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d592:	bf00      	nop
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	40a3b000 	.word	0x40a3b000
 800d5a8:	40020000 	.word	0x40020000
 800d5ac:	20000884 	.word	0x20000884
 800d5b0:	20000684 	.word	0x20000684

0800d5b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d5b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d5ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d5b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d5ba:	e003      	b.n	800d5c4 <LoopCopyDataInit>

0800d5bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d5bc:	4b0c      	ldr	r3, [pc, #48]	; (800d5f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d5be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d5c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d5c2:	3104      	adds	r1, #4

0800d5c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d5c4:	480b      	ldr	r0, [pc, #44]	; (800d5f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d5c6:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d5c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d5ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d5cc:	d3f6      	bcc.n	800d5bc <CopyDataInit>
  ldr  r2, =_sbss
 800d5ce:	4a0b      	ldr	r2, [pc, #44]	; (800d5fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d5d0:	e002      	b.n	800d5d8 <LoopFillZerobss>

0800d5d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d5d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d5d4:	f842 3b04 	str.w	r3, [r2], #4

0800d5d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d5d8:	4b09      	ldr	r3, [pc, #36]	; (800d600 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d5da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d5dc:	d3f9      	bcc.n	800d5d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d5de:	f7ff fb69 	bl	800ccb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d5e2:	f005 f867 	bl	80126b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d5e6:	f7fe f9bb 	bl	800b960 <main>
  bx  lr    
 800d5ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d5ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d5f0:	08015178 	.word	0x08015178
  ldr  r0, =_sdata
 800d5f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d5f8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800d5fc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800d600:	2000095c 	.word	0x2000095c

0800d604 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d604:	e7fe      	b.n	800d604 <CAN1_RX0_IRQHandler>
	...

0800d608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d60c:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <HAL_Init+0x40>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a0d      	ldr	r2, [pc, #52]	; (800d648 <HAL_Init+0x40>)
 800d612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d618:	4b0b      	ldr	r3, [pc, #44]	; (800d648 <HAL_Init+0x40>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a0a      	ldr	r2, [pc, #40]	; (800d648 <HAL_Init+0x40>)
 800d61e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d624:	4b08      	ldr	r3, [pc, #32]	; (800d648 <HAL_Init+0x40>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a07      	ldr	r2, [pc, #28]	; (800d648 <HAL_Init+0x40>)
 800d62a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d62e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d630:	2003      	movs	r0, #3
 800d632:	f000 fedf 	bl	800e3f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d636:	2000      	movs	r0, #0
 800d638:	f000 f808 	bl	800d64c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d63c:	f7fe ff10 	bl	800c460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	40023c00 	.word	0x40023c00

0800d64c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d654:	4b12      	ldr	r3, [pc, #72]	; (800d6a0 <HAL_InitTick+0x54>)
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	4b12      	ldr	r3, [pc, #72]	; (800d6a4 <HAL_InitTick+0x58>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	4619      	mov	r1, r3
 800d65e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d662:	fbb3 f3f1 	udiv	r3, r3, r1
 800d666:	fbb2 f3f3 	udiv	r3, r2, r3
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 fef7 	bl	800e45e <HAL_SYSTICK_Config>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e00e      	b.n	800d698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b0f      	cmp	r3, #15
 800d67e:	d80a      	bhi.n	800d696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d680:	2200      	movs	r2, #0
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	f000 febf 	bl	800e40a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d68c:	4a06      	ldr	r2, [pc, #24]	; (800d6a8 <HAL_InitTick+0x5c>)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	e000      	b.n	800d698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d696:	2301      	movs	r3, #1
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000004 	.word	0x20000004
 800d6a4:	2000000c 	.word	0x2000000c
 800d6a8:	20000008 	.word	0x20000008

0800d6ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d6b0:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <HAL_IncTick+0x20>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <HAL_IncTick+0x24>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4a04      	ldr	r2, [pc, #16]	; (800d6d0 <HAL_IncTick+0x24>)
 800d6be:	6013      	str	r3, [r2, #0]
}
 800d6c0:	bf00      	nop
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	2000000c 	.word	0x2000000c
 800d6d0:	20000934 	.word	0x20000934

0800d6d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	af00      	add	r7, sp, #0
  return uwTick;
 800d6d8:	4b03      	ldr	r3, [pc, #12]	; (800d6e8 <HAL_GetTick+0x14>)
 800d6da:	681b      	ldr	r3, [r3, #0]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	20000934 	.word	0x20000934

0800d6ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d6f4:	f7ff ffee 	bl	800d6d4 <HAL_GetTick>
 800d6f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d704:	d005      	beq.n	800d712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d706:	4b09      	ldr	r3, [pc, #36]	; (800d72c <HAL_Delay+0x40>)
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4413      	add	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d712:	bf00      	nop
 800d714:	f7ff ffde 	bl	800d6d4 <HAL_GetTick>
 800d718:	4602      	mov	r2, r0
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	429a      	cmp	r2, r3
 800d722:	d8f7      	bhi.n	800d714 <HAL_Delay+0x28>
  {
  }
}
 800d724:	bf00      	nop
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	2000000c 	.word	0x2000000c

0800d730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	e033      	b.n	800d7ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d109      	bne.n	800d762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7fe feb4 	bl	800c4bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d766:	f003 0310 	and.w	r3, r3, #16
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d118      	bne.n	800d7a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d776:	f023 0302 	bic.w	r3, r3, #2
 800d77a:	f043 0202 	orr.w	r2, r3, #2
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fbde 	bl	800df44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	f023 0303 	bic.w	r3, r3, #3
 800d796:	f043 0201 	orr.w	r2, r3, #1
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	641a      	str	r2, [r3, #64]	; 0x40
 800d79e:	e001      	b.n	800d7a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0302 	and.w	r3, r3, #2
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	bf0c      	ite	eq
 800d7d4:	2301      	moveq	r3, #1
 800d7d6:	2300      	movne	r3, #0
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f003 0320 	and.w	r3, r3, #32
 800d7e6:	2b20      	cmp	r3, #32
 800d7e8:	bf0c      	ite	eq
 800d7ea:	2301      	moveq	r3, #1
 800d7ec:	2300      	movne	r3, #0
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d049      	beq.n	800d88c <HAL_ADC_IRQHandler+0xd6>
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d046      	beq.n	800d88c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d802:	f003 0310 	and.w	r3, r3, #16
 800d806:	2b00      	cmp	r3, #0
 800d808:	d105      	bne.n	800d816 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d12b      	bne.n	800d87c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d127      	bne.n	800d87c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d832:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d836:	2b00      	cmp	r3, #0
 800d838:	d006      	beq.n	800d848 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d844:	2b00      	cmp	r3, #0
 800d846:	d119      	bne.n	800d87c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f022 0220 	bic.w	r2, r2, #32
 800d856:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d105      	bne.n	800d87c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d874:	f043 0201 	orr.w	r2, r3, #1
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fa17 	bl	800dcb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f06f 0212 	mvn.w	r2, #18
 800d88a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f003 0304 	and.w	r3, r3, #4
 800d896:	2b04      	cmp	r3, #4
 800d898:	bf0c      	ite	eq
 800d89a:	2301      	moveq	r3, #1
 800d89c:	2300      	movne	r3, #0
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ac:	2b80      	cmp	r3, #128	; 0x80
 800d8ae:	bf0c      	ite	eq
 800d8b0:	2301      	moveq	r3, #1
 800d8b2:	2300      	movne	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d057      	beq.n	800d96e <HAL_ADC_IRQHandler+0x1b8>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d054      	beq.n	800d96e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	f003 0310 	and.w	r3, r3, #16
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d105      	bne.n	800d8dc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d139      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d006      	beq.n	800d906 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d902:	2b00      	cmp	r3, #0
 800d904:	d12b      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d910:	2b00      	cmp	r3, #0
 800d912:	d124      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d11d      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d926:	2b00      	cmp	r3, #0
 800d928:	d119      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d938:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d956:	f043 0201 	orr.w	r2, r3, #1
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fc6e 	bl	800e240 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f06f 020c 	mvn.w	r2, #12
 800d96c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b01      	cmp	r3, #1
 800d97a:	bf0c      	ite	eq
 800d97c:	2301      	moveq	r3, #1
 800d97e:	2300      	movne	r3, #0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d98e:	2b40      	cmp	r3, #64	; 0x40
 800d990:	bf0c      	ite	eq
 800d992:	2301      	moveq	r3, #1
 800d994:	2300      	movne	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d017      	beq.n	800d9d0 <HAL_ADC_IRQHandler+0x21a>
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d014      	beq.n	800d9d0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d10d      	bne.n	800d9d0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f989 	bl	800dcd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f06f 0201 	mvn.w	r2, #1
 800d9ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b20      	cmp	r3, #32
 800d9dc:	bf0c      	ite	eq
 800d9de:	2301      	moveq	r3, #1
 800d9e0:	2300      	movne	r3, #0
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9f4:	bf0c      	ite	eq
 800d9f6:	2301      	moveq	r3, #1
 800d9f8:	2300      	movne	r3, #0
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d015      	beq.n	800da30 <HAL_ADC_IRQHandler+0x27a>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d012      	beq.n	800da30 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0e:	f043 0202 	orr.w	r2, r3, #2
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f06f 0220 	mvn.w	r2, #32
 800da1e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f963 	bl	800dcec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f06f 0220 	mvn.w	r2, #32
 800da2e:	601a      	str	r2, [r3, #0]
  }
}
 800da30:	bf00      	nop
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800da44:	2300      	movs	r3, #0
 800da46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d101      	bne.n	800da56 <HAL_ADC_Start_DMA+0x1e>
 800da52:	2302      	movs	r3, #2
 800da54:	e0cc      	b.n	800dbf0 <HAL_ADC_Start_DMA+0x1b8>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d018      	beq.n	800da9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	689a      	ldr	r2, [r3, #8]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f042 0201 	orr.w	r2, r2, #1
 800da7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800da7c:	4b5e      	ldr	r3, [pc, #376]	; (800dbf8 <HAL_ADC_Start_DMA+0x1c0>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a5e      	ldr	r2, [pc, #376]	; (800dbfc <HAL_ADC_Start_DMA+0x1c4>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	0c9a      	lsrs	r2, r3, #18
 800da88:	4613      	mov	r3, r2
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	4413      	add	r3, r2
 800da8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800da90:	e002      	b.n	800da98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	3b01      	subs	r3, #1
 800da96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f9      	bne.n	800da92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	f040 80a0 	bne.w	800dbee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800dab6:	f023 0301 	bic.w	r3, r3, #1
 800daba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dad8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daec:	d106      	bne.n	800dafc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daf2:	f023 0206 	bic.w	r2, r3, #6
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	645a      	str	r2, [r3, #68]	; 0x44
 800dafa:	e002      	b.n	800db02 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800db0a:	4b3d      	ldr	r3, [pc, #244]	; (800dc00 <HAL_ADC_Start_DMA+0x1c8>)
 800db0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	4a3c      	ldr	r2, [pc, #240]	; (800dc04 <HAL_ADC_Start_DMA+0x1cc>)
 800db14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	4a3b      	ldr	r2, [pc, #236]	; (800dc08 <HAL_ADC_Start_DMA+0x1d0>)
 800db1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db22:	4a3a      	ldr	r2, [pc, #232]	; (800dc0c <HAL_ADC_Start_DMA+0x1d4>)
 800db24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800db2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800db3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689a      	ldr	r2, [r3, #8]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	334c      	adds	r3, #76	; 0x4c
 800db5a:	4619      	mov	r1, r3
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f000 fd38 	bl	800e5d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	f003 031f 	and.w	r3, r3, #31
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d12a      	bne.n	800dbc6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a26      	ldr	r2, [pc, #152]	; (800dc10 <HAL_ADC_Start_DMA+0x1d8>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d015      	beq.n	800dba6 <HAL_ADC_Start_DMA+0x16e>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a25      	ldr	r2, [pc, #148]	; (800dc14 <HAL_ADC_Start_DMA+0x1dc>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d105      	bne.n	800db90 <HAL_ADC_Start_DMA+0x158>
 800db84:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <HAL_ADC_Start_DMA+0x1c8>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	f003 031f 	and.w	r3, r3, #31
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00a      	beq.n	800dba6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a20      	ldr	r2, [pc, #128]	; (800dc18 <HAL_ADC_Start_DMA+0x1e0>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d129      	bne.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
 800db9a:	4b19      	ldr	r3, [pc, #100]	; (800dc00 <HAL_ADC_Start_DMA+0x1c8>)
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	f003 031f 	and.w	r3, r3, #31
 800dba2:	2b0f      	cmp	r3, #15
 800dba4:	d823      	bhi.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d11c      	bne.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	689a      	ldr	r2, [r3, #8]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dbc2:	609a      	str	r2, [r3, #8]
 800dbc4:	e013      	b.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a11      	ldr	r2, [pc, #68]	; (800dc10 <HAL_ADC_Start_DMA+0x1d8>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10e      	bne.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d107      	bne.n	800dbee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689a      	ldr	r2, [r3, #8]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dbec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000004 	.word	0x20000004
 800dbfc:	431bde83 	.word	0x431bde83
 800dc00:	40012300 	.word	0x40012300
 800dc04:	0800e13d 	.word	0x0800e13d
 800dc08:	0800e1f7 	.word	0x0800e1f7
 800dc0c:	0800e213 	.word	0x0800e213
 800dc10:	40012000 	.word	0x40012000
 800dc14:	40012100 	.word	0x40012100
 800dc18:	40012200 	.word	0x40012200

0800dc1c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d101      	bne.n	800dc36 <HAL_ADC_Stop_DMA+0x1a>
 800dc32:	2302      	movs	r3, #2
 800dc34:	e038      	b.n	800dca8 <HAL_ADC_Stop_DMA+0x8c>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	689a      	ldr	r2, [r3, #8]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f022 0201 	bic.w	r2, r2, #1
 800dc4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	f003 0301 	and.w	r3, r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d120      	bne.n	800dc9e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	689a      	ldr	r2, [r3, #8]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc6a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 fd07 	bl	800e684 <HAL_DMA_Abort>
 800dc76:	4603      	mov	r3, r0
 800dc78:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800dc88:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800dc92:	f023 0301 	bic.w	r3, r3, #1
 800dc96:	f043 0201 	orr.w	r2, r3, #1
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d101      	bne.n	800dd1c <HAL_ADC_ConfigChannel+0x1c>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	e105      	b.n	800df28 <HAL_ADC_ConfigChannel+0x228>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d925      	bls.n	800dd78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68d9      	ldr	r1, [r3, #12]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4413      	add	r3, r2
 800dd40:	3b1e      	subs	r3, #30
 800dd42:	2207      	movs	r2, #7
 800dd44:	fa02 f303 	lsl.w	r3, r2, r3
 800dd48:	43da      	mvns	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	400a      	ands	r2, r1
 800dd50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68d9      	ldr	r1, [r3, #12]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	689a      	ldr	r2, [r3, #8]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	4618      	mov	r0, r3
 800dd64:	4603      	mov	r3, r0
 800dd66:	005b      	lsls	r3, r3, #1
 800dd68:	4403      	add	r3, r0
 800dd6a:	3b1e      	subs	r3, #30
 800dd6c:	409a      	lsls	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	430a      	orrs	r2, r1
 800dd74:	60da      	str	r2, [r3, #12]
 800dd76:	e022      	b.n	800ddbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6919      	ldr	r1, [r3, #16]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	4613      	mov	r3, r2
 800dd88:	005b      	lsls	r3, r3, #1
 800dd8a:	4413      	add	r3, r2
 800dd8c:	2207      	movs	r2, #7
 800dd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd92:	43da      	mvns	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	400a      	ands	r2, r1
 800dd9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6919      	ldr	r1, [r3, #16]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	689a      	ldr	r2, [r3, #8]
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4618      	mov	r0, r3
 800ddae:	4603      	mov	r3, r0
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	4403      	add	r3, r0
 800ddb4:	409a      	lsls	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	2b06      	cmp	r3, #6
 800ddc4:	d824      	bhi.n	800de10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	685a      	ldr	r2, [r3, #4]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	3b05      	subs	r3, #5
 800ddd8:	221f      	movs	r2, #31
 800ddda:	fa02 f303 	lsl.w	r3, r2, r3
 800ddde:	43da      	mvns	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	400a      	ands	r2, r1
 800dde6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	3b05      	subs	r3, #5
 800de02:	fa00 f203 	lsl.w	r2, r0, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	635a      	str	r2, [r3, #52]	; 0x34
 800de0e:	e04c      	b.n	800deaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	2b0c      	cmp	r3, #12
 800de16:	d824      	bhi.n	800de62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	685a      	ldr	r2, [r3, #4]
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	3b23      	subs	r3, #35	; 0x23
 800de2a:	221f      	movs	r2, #31
 800de2c:	fa02 f303 	lsl.w	r3, r2, r3
 800de30:	43da      	mvns	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	400a      	ands	r2, r1
 800de38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	b29b      	uxth	r3, r3
 800de46:	4618      	mov	r0, r3
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	3b23      	subs	r3, #35	; 0x23
 800de54:	fa00 f203 	lsl.w	r2, r0, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	430a      	orrs	r2, r1
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30
 800de60:	e023      	b.n	800deaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	3b41      	subs	r3, #65	; 0x41
 800de74:	221f      	movs	r2, #31
 800de76:	fa02 f303 	lsl.w	r3, r2, r3
 800de7a:	43da      	mvns	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	400a      	ands	r2, r1
 800de82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	3b41      	subs	r3, #65	; 0x41
 800de9e:	fa00 f203 	lsl.w	r2, r0, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800deaa:	4b22      	ldr	r3, [pc, #136]	; (800df34 <HAL_ADC_ConfigChannel+0x234>)
 800deac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a21      	ldr	r2, [pc, #132]	; (800df38 <HAL_ADC_ConfigChannel+0x238>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d109      	bne.n	800decc <HAL_ADC_ConfigChannel+0x1cc>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b12      	cmp	r3, #18
 800debe:	d105      	bne.n	800decc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a19      	ldr	r2, [pc, #100]	; (800df38 <HAL_ADC_ConfigChannel+0x238>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d123      	bne.n	800df1e <HAL_ADC_ConfigChannel+0x21e>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b10      	cmp	r3, #16
 800dedc:	d003      	beq.n	800dee6 <HAL_ADC_ConfigChannel+0x1e6>
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b11      	cmp	r3, #17
 800dee4:	d11b      	bne.n	800df1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b10      	cmp	r3, #16
 800def8:	d111      	bne.n	800df1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800defa:	4b10      	ldr	r3, [pc, #64]	; (800df3c <HAL_ADC_ConfigChannel+0x23c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a10      	ldr	r2, [pc, #64]	; (800df40 <HAL_ADC_ConfigChannel+0x240>)
 800df00:	fba2 2303 	umull	r2, r3, r2, r3
 800df04:	0c9a      	lsrs	r2, r3, #18
 800df06:	4613      	mov	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800df10:	e002      	b.n	800df18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3b01      	subs	r3, #1
 800df16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1f9      	bne.n	800df12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	40012300 	.word	0x40012300
 800df38:	40012000 	.word	0x40012000
 800df3c:	20000004 	.word	0x20000004
 800df40:	431bde83 	.word	0x431bde83

0800df44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800df4c:	4b79      	ldr	r3, [pc, #484]	; (800e134 <ADC_Init+0x1f0>)
 800df4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	431a      	orrs	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	685a      	ldr	r2, [r3, #4]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6859      	ldr	r1, [r3, #4]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	021a      	lsls	r2, r3, #8
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	430a      	orrs	r2, r1
 800df8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800df9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6859      	ldr	r1, [r3, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	689a      	ldr	r2, [r3, #8]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	430a      	orrs	r2, r1
 800dfae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689a      	ldr	r2, [r3, #8]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6899      	ldr	r1, [r3, #8]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	68da      	ldr	r2, [r3, #12]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd6:	4a58      	ldr	r2, [pc, #352]	; (800e138 <ADC_Init+0x1f4>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d022      	beq.n	800e022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	689a      	ldr	r2, [r3, #8]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dfea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6899      	ldr	r1, [r3, #8]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	430a      	orrs	r2, r1
 800dffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e00c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6899      	ldr	r1, [r3, #8]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	430a      	orrs	r2, r1
 800e01e:	609a      	str	r2, [r3, #8]
 800e020:	e00f      	b.n	800e042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689a      	ldr	r2, [r3, #8]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689a      	ldr	r2, [r3, #8]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f022 0202 	bic.w	r2, r2, #2
 800e050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	6899      	ldr	r1, [r3, #8]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7e1b      	ldrb	r3, [r3, #24]
 800e05c:	005a      	lsls	r2, r3, #1
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	430a      	orrs	r2, r1
 800e064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d01b      	beq.n	800e0a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e07e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e08e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6859      	ldr	r1, [r3, #4]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09a:	3b01      	subs	r3, #1
 800e09c:	035a      	lsls	r2, r3, #13
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	605a      	str	r2, [r3, #4]
 800e0a6:	e007      	b.n	800e0b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e0c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	051a      	lsls	r2, r3, #20
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	430a      	orrs	r2, r1
 800e0dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e0ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6899      	ldr	r1, [r3, #8]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0fa:	025a      	lsls	r2, r3, #9
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	430a      	orrs	r2, r1
 800e102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	689a      	ldr	r2, [r3, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6899      	ldr	r1, [r3, #8]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	695b      	ldr	r3, [r3, #20]
 800e11e:	029a      	lsls	r2, r3, #10
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	430a      	orrs	r2, r1
 800e126:	609a      	str	r2, [r3, #8]
}
 800e128:	bf00      	nop
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	40012300 	.word	0x40012300
 800e138:	0f000001 	.word	0x0f000001

0800e13c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e148:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e152:	2b00      	cmp	r3, #0
 800e154:	d13c      	bne.n	800e1d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d12b      	bne.n	800e1c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e174:	2b00      	cmp	r3, #0
 800e176:	d127      	bne.n	800e1c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e182:	2b00      	cmp	r3, #0
 800e184:	d006      	beq.n	800e194 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e190:	2b00      	cmp	r3, #0
 800e192:	d119      	bne.n	800e1c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 0220 	bic.w	r2, r2, #32
 800e1a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c0:	f043 0201 	orr.w	r2, r3, #1
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff fd71 	bl	800dcb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e1ce:	e00e      	b.n	800e1ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d4:	f003 0310 	and.w	r3, r3, #16
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff fd85 	bl	800dcec <HAL_ADC_ErrorCallback>
}
 800e1e2:	e004      	b.n	800e1ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	4798      	blx	r3
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e202:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f7ff fd5d 	bl	800dcc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2240      	movs	r2, #64	; 0x40
 800e224:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e22a:	f043 0204 	orr.w	r2, r3, #4
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff fd5a 	bl	800dcec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e238:	bf00      	nop
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f003 0307 	and.w	r3, r3, #7
 800e262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <__NVIC_SetPriorityGrouping+0x44>)
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e270:	4013      	ands	r3, r2
 800e272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e27c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e286:	4a04      	ldr	r2, [pc, #16]	; (800e298 <__NVIC_SetPriorityGrouping+0x44>)
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	60d3      	str	r3, [r2, #12]
}
 800e28c:	bf00      	nop
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	e000ed00 	.word	0xe000ed00

0800e29c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e2a0:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <__NVIC_GetPriorityGrouping+0x18>)
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	0a1b      	lsrs	r3, r3, #8
 800e2a6:	f003 0307 	and.w	r3, r3, #7
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	e000ed00 	.word	0xe000ed00

0800e2b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e2c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	db0b      	blt.n	800e2e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	f003 021f 	and.w	r2, r3, #31
 800e2d0:	4907      	ldr	r1, [pc, #28]	; (800e2f0 <__NVIC_EnableIRQ+0x38>)
 800e2d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2d6:	095b      	lsrs	r3, r3, #5
 800e2d8:	2001      	movs	r0, #1
 800e2da:	fa00 f202 	lsl.w	r2, r0, r2
 800e2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e2e2:	bf00      	nop
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	e000e100 	.word	0xe000e100

0800e2f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	6039      	str	r1, [r7, #0]
 800e2fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e304:	2b00      	cmp	r3, #0
 800e306:	db0a      	blt.n	800e31e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	b2da      	uxtb	r2, r3
 800e30c:	490c      	ldr	r1, [pc, #48]	; (800e340 <__NVIC_SetPriority+0x4c>)
 800e30e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e312:	0112      	lsls	r2, r2, #4
 800e314:	b2d2      	uxtb	r2, r2
 800e316:	440b      	add	r3, r1
 800e318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e31c:	e00a      	b.n	800e334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	b2da      	uxtb	r2, r3
 800e322:	4908      	ldr	r1, [pc, #32]	; (800e344 <__NVIC_SetPriority+0x50>)
 800e324:	79fb      	ldrb	r3, [r7, #7]
 800e326:	f003 030f 	and.w	r3, r3, #15
 800e32a:	3b04      	subs	r3, #4
 800e32c:	0112      	lsls	r2, r2, #4
 800e32e:	b2d2      	uxtb	r2, r2
 800e330:	440b      	add	r3, r1
 800e332:	761a      	strb	r2, [r3, #24]
}
 800e334:	bf00      	nop
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	e000e100 	.word	0xe000e100
 800e344:	e000ed00 	.word	0xe000ed00

0800e348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e348:	b480      	push	{r7}
 800e34a:	b089      	sub	sp, #36	; 0x24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f003 0307 	and.w	r3, r3, #7
 800e35a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	f1c3 0307 	rsb	r3, r3, #7
 800e362:	2b04      	cmp	r3, #4
 800e364:	bf28      	it	cs
 800e366:	2304      	movcs	r3, #4
 800e368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	3304      	adds	r3, #4
 800e36e:	2b06      	cmp	r3, #6
 800e370:	d902      	bls.n	800e378 <NVIC_EncodePriority+0x30>
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	3b03      	subs	r3, #3
 800e376:	e000      	b.n	800e37a <NVIC_EncodePriority+0x32>
 800e378:	2300      	movs	r3, #0
 800e37a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e37c:	f04f 32ff 	mov.w	r2, #4294967295
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	fa02 f303 	lsl.w	r3, r2, r3
 800e386:	43da      	mvns	r2, r3
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	401a      	ands	r2, r3
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e390:	f04f 31ff 	mov.w	r1, #4294967295
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	fa01 f303 	lsl.w	r3, r1, r3
 800e39a:	43d9      	mvns	r1, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e3a0:	4313      	orrs	r3, r2
         );
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3724      	adds	r7, #36	; 0x24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
	...

0800e3b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e3c0:	d301      	bcc.n	800e3c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e00f      	b.n	800e3e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e3c6:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <SysTick_Config+0x40>)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e3ce:	210f      	movs	r1, #15
 800e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d4:	f7ff ff8e 	bl	800e2f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <SysTick_Config+0x40>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e3de:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <SysTick_Config+0x40>)
 800e3e0:	2207      	movs	r2, #7
 800e3e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	e000e010 	.word	0xe000e010

0800e3f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff ff29 	bl	800e254 <__NVIC_SetPriorityGrouping>
}
 800e402:	bf00      	nop
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	4603      	mov	r3, r0
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
 800e416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e418:	2300      	movs	r3, #0
 800e41a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e41c:	f7ff ff3e 	bl	800e29c <__NVIC_GetPriorityGrouping>
 800e420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f7ff ff8e 	bl	800e348 <NVIC_EncodePriority>
 800e42c:	4602      	mov	r2, r0
 800e42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e432:	4611      	mov	r1, r2
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff ff5d 	bl	800e2f4 <__NVIC_SetPriority>
}
 800e43a:	bf00      	nop
 800e43c:	3718      	adds	r7, #24
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b082      	sub	sp, #8
 800e446:	af00      	add	r7, sp, #0
 800e448:	4603      	mov	r3, r0
 800e44a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e44c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff ff31 	bl	800e2b8 <__NVIC_EnableIRQ>
}
 800e456:	bf00      	nop
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b082      	sub	sp, #8
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff ffa2 	bl	800e3b0 <SysTick_Config>
 800e46c:	4603      	mov	r3, r0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
	...

0800e478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e484:	f7ff f926 	bl	800d6d4 <HAL_GetTick>
 800e488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e490:	2301      	movs	r3, #1
 800e492:	e099      	b.n	800e5c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2202      	movs	r2, #2
 800e4a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f022 0201 	bic.w	r2, r2, #1
 800e4b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e4b4:	e00f      	b.n	800e4d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e4b6:	f7ff f90d 	bl	800d6d4 <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	d908      	bls.n	800e4d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2203      	movs	r2, #3
 800e4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	e078      	b.n	800e5c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 0301 	and.w	r3, r3, #1
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e8      	bne.n	800e4b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	4b38      	ldr	r3, [pc, #224]	; (800e5d0 <HAL_DMA_Init+0x158>)
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685a      	ldr	r2, [r3, #4]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e50e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	699b      	ldr	r3, [r3, #24]
 800e514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e51a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e522:	697a      	ldr	r2, [r7, #20]
 800e524:	4313      	orrs	r3, r2
 800e526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	d107      	bne.n	800e540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e538:	4313      	orrs	r3, r2
 800e53a:	697a      	ldr	r2, [r7, #20]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	4313      	orrs	r3, r2
 800e560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	2b04      	cmp	r3, #4
 800e568:	d117      	bne.n	800e59a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	4313      	orrs	r3, r2
 800e572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00e      	beq.n	800e59a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fadf 	bl	800eb40 <DMA_CheckFifoParam>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d008      	beq.n	800e59a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2240      	movs	r2, #64	; 0x40
 800e58c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e596:	2301      	movs	r3, #1
 800e598:	e016      	b.n	800e5c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa96 	bl	800ead4 <DMA_CalcBaseAndBitshift>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5b0:	223f      	movs	r2, #63	; 0x3f
 800e5b2:	409a      	lsls	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e5c6:	2300      	movs	r3, #0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3718      	adds	r7, #24
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	f010803f 	.word	0xf010803f

0800e5d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d101      	bne.n	800e5fa <HAL_DMA_Start_IT+0x26>
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	e040      	b.n	800e67c <HAL_DMA_Start_IT+0xa8>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d12f      	bne.n	800e66e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2202      	movs	r2, #2
 800e612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	68b9      	ldr	r1, [r7, #8]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f000 fa28 	bl	800ea78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e62c:	223f      	movs	r2, #63	; 0x3f
 800e62e:	409a      	lsls	r2, r3
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f042 0216 	orr.w	r2, r2, #22
 800e642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d007      	beq.n	800e65c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f042 0208 	orr.w	r2, r2, #8
 800e65a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f042 0201 	orr.w	r2, r2, #1
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	e005      	b.n	800e67a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e676:	2302      	movs	r3, #2
 800e678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3718      	adds	r7, #24
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e692:	f7ff f81f 	bl	800d6d4 <HAL_GetTick>
 800e696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	2b02      	cmp	r3, #2
 800e6a2:	d008      	beq.n	800e6b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2280      	movs	r2, #128	; 0x80
 800e6a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e052      	b.n	800e75c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f022 0216 	bic.w	r2, r2, #22
 800e6c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	695a      	ldr	r2, [r3, #20]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d103      	bne.n	800e6e6 <HAL_DMA_Abort+0x62>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d007      	beq.n	800e6f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f022 0208 	bic.w	r2, r2, #8
 800e6f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f022 0201 	bic.w	r2, r2, #1
 800e704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e706:	e013      	b.n	800e730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e708:	f7fe ffe4 	bl	800d6d4 <HAL_GetTick>
 800e70c:	4602      	mov	r2, r0
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	2b05      	cmp	r3, #5
 800e714:	d90c      	bls.n	800e730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2220      	movs	r2, #32
 800e71a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2203      	movs	r2, #3
 800e728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800e72c:	2303      	movs	r3, #3
 800e72e:	e015      	b.n	800e75c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e4      	bne.n	800e708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e742:	223f      	movs	r2, #63	; 0x3f
 800e744:	409a      	lsls	r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e76c:	2300      	movs	r3, #0
 800e76e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e770:	4b92      	ldr	r3, [pc, #584]	; (800e9bc <HAL_DMA_IRQHandler+0x258>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a92      	ldr	r2, [pc, #584]	; (800e9c0 <HAL_DMA_IRQHandler+0x25c>)
 800e776:	fba2 2303 	umull	r2, r3, r2, r3
 800e77a:	0a9b      	lsrs	r3, r3, #10
 800e77c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e78e:	2208      	movs	r2, #8
 800e790:	409a      	lsls	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4013      	ands	r3, r2
 800e796:	2b00      	cmp	r3, #0
 800e798:	d01a      	beq.n	800e7d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f003 0304 	and.w	r3, r3, #4
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d013      	beq.n	800e7d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f022 0204 	bic.w	r2, r2, #4
 800e7b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7bc:	2208      	movs	r2, #8
 800e7be:	409a      	lsls	r2, r3
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c8:	f043 0201 	orr.w	r2, r3, #1
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	409a      	lsls	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4013      	ands	r3, r2
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d012      	beq.n	800e806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00b      	beq.n	800e806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	409a      	lsls	r2, r3
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7fe:	f043 0202 	orr.w	r2, r3, #2
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e80a:	2204      	movs	r2, #4
 800e80c:	409a      	lsls	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	4013      	ands	r3, r2
 800e812:	2b00      	cmp	r3, #0
 800e814:	d012      	beq.n	800e83c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e828:	2204      	movs	r2, #4
 800e82a:	409a      	lsls	r2, r3
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e834:	f043 0204 	orr.w	r2, r3, #4
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e840:	2210      	movs	r2, #16
 800e842:	409a      	lsls	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	4013      	ands	r3, r2
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d043      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0308 	and.w	r3, r3, #8
 800e856:	2b00      	cmp	r3, #0
 800e858:	d03c      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e85e:	2210      	movs	r2, #16
 800e860:	409a      	lsls	r2, r3
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d018      	beq.n	800e8a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d108      	bne.n	800e894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e886:	2b00      	cmp	r3, #0
 800e888:	d024      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	4798      	blx	r3
 800e892:	e01f      	b.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d01b      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	4798      	blx	r3
 800e8a4:	e016      	b.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d107      	bne.n	800e8c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0208 	bic.w	r2, r2, #8
 800e8c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8d8:	2220      	movs	r2, #32
 800e8da:	409a      	lsls	r2, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4013      	ands	r3, r2
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 808e 	beq.w	800ea02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 0310 	and.w	r3, r3, #16
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f000 8086 	beq.w	800ea02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8fa:	2220      	movs	r2, #32
 800e8fc:	409a      	lsls	r2, r3
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b05      	cmp	r3, #5
 800e90c:	d136      	bne.n	800e97c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f022 0216 	bic.w	r2, r2, #22
 800e91c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	695a      	ldr	r2, [r3, #20]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e92c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e932:	2b00      	cmp	r3, #0
 800e934:	d103      	bne.n	800e93e <HAL_DMA_IRQHandler+0x1da>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d007      	beq.n	800e94e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 0208 	bic.w	r2, r2, #8
 800e94c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e952:	223f      	movs	r2, #63	; 0x3f
 800e954:	409a      	lsls	r2, r3
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d07d      	beq.n	800ea6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	4798      	blx	r3
        }
        return;
 800e97a:	e078      	b.n	800ea6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e986:	2b00      	cmp	r3, #0
 800e988:	d01c      	beq.n	800e9c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e994:	2b00      	cmp	r3, #0
 800e996:	d108      	bne.n	800e9aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d030      	beq.n	800ea02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	4798      	blx	r3
 800e9a8:	e02b      	b.n	800ea02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d027      	beq.n	800ea02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	4798      	blx	r3
 800e9ba:	e022      	b.n	800ea02 <HAL_DMA_IRQHandler+0x29e>
 800e9bc:	20000004 	.word	0x20000004
 800e9c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10f      	bne.n	800e9f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f022 0210 	bic.w	r2, r2, #16
 800e9e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d032      	beq.n	800ea70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d022      	beq.n	800ea5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2205      	movs	r2, #5
 800ea1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f022 0201 	bic.w	r2, r2, #1
 800ea2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	3301      	adds	r3, #1
 800ea32:	60bb      	str	r3, [r7, #8]
 800ea34:	697a      	ldr	r2, [r7, #20]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d307      	bcc.n	800ea4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 0301 	and.w	r3, r3, #1
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1f2      	bne.n	800ea2e <HAL_DMA_IRQHandler+0x2ca>
 800ea48:	e000      	b.n	800ea4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ea4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	4798      	blx	r3
 800ea6c:	e000      	b.n	800ea70 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ea6e:	bf00      	nop
    }
  }
}
 800ea70:	3718      	adds	r7, #24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop

0800ea78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
 800ea84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ea94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	2b40      	cmp	r3, #64	; 0x40
 800eaa4:	d108      	bne.n	800eab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800eab6:	e007      	b.n	800eac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	60da      	str	r2, [r3, #12]
}
 800eac8:	bf00      	nop
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	3b10      	subs	r3, #16
 800eae4:	4a14      	ldr	r2, [pc, #80]	; (800eb38 <DMA_CalcBaseAndBitshift+0x64>)
 800eae6:	fba2 2303 	umull	r2, r3, r2, r3
 800eaea:	091b      	lsrs	r3, r3, #4
 800eaec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eaee:	4a13      	ldr	r2, [pc, #76]	; (800eb3c <DMA_CalcBaseAndBitshift+0x68>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	d909      	bls.n	800eb16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eb0a:	f023 0303 	bic.w	r3, r3, #3
 800eb0e:	1d1a      	adds	r2, r3, #4
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	659a      	str	r2, [r3, #88]	; 0x58
 800eb14:	e007      	b.n	800eb26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eb1e:	f023 0303 	bic.w	r3, r3, #3
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	aaaaaaab 	.word	0xaaaaaaab
 800eb3c:	08014e9c 	.word	0x08014e9c

0800eb40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d11f      	bne.n	800eb9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d855      	bhi.n	800ec0c <DMA_CheckFifoParam+0xcc>
 800eb60:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <DMA_CheckFifoParam+0x28>)
 800eb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb66:	bf00      	nop
 800eb68:	0800eb79 	.word	0x0800eb79
 800eb6c:	0800eb8b 	.word	0x0800eb8b
 800eb70:	0800eb79 	.word	0x0800eb79
 800eb74:	0800ec0d 	.word	0x0800ec0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d045      	beq.n	800ec10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eb88:	e042      	b.n	800ec10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800eb92:	d13f      	bne.n	800ec14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eb98:	e03c      	b.n	800ec14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eba2:	d121      	bne.n	800ebe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d836      	bhi.n	800ec18 <DMA_CheckFifoParam+0xd8>
 800ebaa:	a201      	add	r2, pc, #4	; (adr r2, 800ebb0 <DMA_CheckFifoParam+0x70>)
 800ebac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb0:	0800ebc1 	.word	0x0800ebc1
 800ebb4:	0800ebc7 	.word	0x0800ebc7
 800ebb8:	0800ebc1 	.word	0x0800ebc1
 800ebbc:	0800ebd9 	.word	0x0800ebd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc4:	e02f      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d024      	beq.n	800ec1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebd6:	e021      	b.n	800ec1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ebe0:	d11e      	bne.n	800ec20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ebe6:	e01b      	b.n	800ec20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d902      	bls.n	800ebf4 <DMA_CheckFifoParam+0xb4>
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d003      	beq.n	800ebfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ebf2:	e018      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf8:	e015      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00e      	beq.n	800ec24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	73fb      	strb	r3, [r7, #15]
      break;
 800ec0a:	e00b      	b.n	800ec24 <DMA_CheckFifoParam+0xe4>
      break;
 800ec0c:	bf00      	nop
 800ec0e:	e00a      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;
 800ec10:	bf00      	nop
 800ec12:	e008      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;
 800ec14:	bf00      	nop
 800ec16:	e006      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;
 800ec18:	bf00      	nop
 800ec1a:	e004      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;
 800ec1c:	bf00      	nop
 800ec1e:	e002      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;   
 800ec20:	bf00      	nop
 800ec22:	e000      	b.n	800ec26 <DMA_CheckFifoParam+0xe6>
      break;
 800ec24:	bf00      	nop
    }
  } 
  
  return status; 
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3714      	adds	r7, #20
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ec3e:	4b4b      	ldr	r3, [pc, #300]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d020      	beq.n	800ec8c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800ec4a:	4b49      	ldr	r3, [pc, #292]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d107      	bne.n	800ec64 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800ec54:	4b46      	ldr	r3, [pc, #280]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800ec5a:	4b45      	ldr	r3, [pc, #276]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec60:	60da      	str	r2, [r3, #12]
 800ec62:	e00b      	b.n	800ec7c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800ec64:	4b42      	ldr	r3, [pc, #264]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d103      	bne.n	800ec76 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800ec6e:	4b40      	ldr	r3, [pc, #256]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	607b      	str	r3, [r7, #4]
 800ec74:	e002      	b.n	800ec7c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800ec76:	4b3e      	ldr	r3, [pc, #248]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800ec7c:	f000 f88e 	bl	800ed9c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f881 	bl	800ed88 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800ec86:	4b3a      	ldr	r3, [pc, #232]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ec8c:	4b37      	ldr	r3, [pc, #220]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d04a      	beq.n	800ed2e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ec98:	4b34      	ldr	r3, [pc, #208]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800ec9e:	4b34      	ldr	r3, [pc, #208]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d12d      	bne.n	800ed04 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800eca8:	4b31      	ldr	r3, [pc, #196]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	4a30      	ldr	r2, [pc, #192]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecb0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800ecb2:	4b2f      	ldr	r3, [pc, #188]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d015      	beq.n	800ece6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800ecba:	4b2d      	ldr	r3, [pc, #180]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f857 	bl	800ed74 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800ecc6:	4b2a      	ldr	r3, [pc, #168]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	3301      	adds	r3, #1
 800eccc:	4a28      	ldr	r2, [pc, #160]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecce:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800ecd0:	4b27      	ldr	r3, [pc, #156]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800ecd6:	4b26      	ldr	r3, [pc, #152]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecd8:	7a1b      	ldrb	r3, [r3, #8]
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	4619      	mov	r1, r3
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f8b2 	bl	800ee48 <FLASH_Erase_Sector>
 800ece4:	e023      	b.n	800ed2e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800ece6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecea:	607b      	str	r3, [r7, #4]
 800ecec:	4a20      	ldr	r2, [pc, #128]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800ecf2:	4b1f      	ldr	r3, [pc, #124]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800ecf8:	f000 f8ee 	bl	800eed8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 f839 	bl	800ed74 <HAL_FLASH_EndOfOperationCallback>
 800ed02:	e014      	b.n	800ed2e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	d107      	bne.n	800ed1e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800ed0e:	f000 f8e3 	bl	800eed8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800ed12:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 f82c 	bl	800ed74 <HAL_FLASH_EndOfOperationCallback>
 800ed1c:	e004      	b.n	800ed28 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800ed1e:	4b14      	ldr	r3, [pc, #80]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 f826 	bl	800ed74 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800ed28:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800ed2e:	4b10      	ldr	r3, [pc, #64]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d114      	bne.n	800ed62 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800ed38:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	4a0b      	ldr	r2, [pc, #44]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed42:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800ed44:	4b09      	ldr	r3, [pc, #36]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	4a08      	ldr	r2, [pc, #32]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed4e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	4a05      	ldr	r2, [pc, #20]	; (800ed6c <HAL_FLASH_IRQHandler+0x138>)
 800ed56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ed5a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800ed5c:	4b04      	ldr	r3, [pc, #16]	; (800ed70 <HAL_FLASH_IRQHandler+0x13c>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	761a      	strb	r2, [r3, #24]
  }
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	40023c00 	.word	0x40023c00
 800ed70:	20000938 	.word	0x20000938

0800ed74 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800eda0:	4b27      	ldr	r3, [pc, #156]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	f003 0310 	and.w	r3, r3, #16
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d008      	beq.n	800edbe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800edac:	4b25      	ldr	r3, [pc, #148]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	f043 0310 	orr.w	r3, r3, #16
 800edb4:	4a23      	ldr	r2, [pc, #140]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edb6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800edb8:	4b21      	ldr	r3, [pc, #132]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edba:	2210      	movs	r2, #16
 800edbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800edbe:	4b20      	ldr	r3, [pc, #128]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	f003 0320 	and.w	r3, r3, #32
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d008      	beq.n	800eddc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800edca:	4b1e      	ldr	r3, [pc, #120]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edcc:	69db      	ldr	r3, [r3, #28]
 800edce:	f043 0308 	orr.w	r3, r3, #8
 800edd2:	4a1c      	ldr	r2, [pc, #112]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edd4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800edd6:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edd8:	2220      	movs	r2, #32
 800edda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800eddc:	4b18      	ldr	r3, [pc, #96]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d008      	beq.n	800edfa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ede8:	4b16      	ldr	r3, [pc, #88]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	f043 0304 	orr.w	r3, r3, #4
 800edf0:	4a14      	ldr	r2, [pc, #80]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800edf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800edf4:	4b12      	ldr	r3, [pc, #72]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edf6:	2240      	movs	r2, #64	; 0x40
 800edf8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800edfa:	4b11      	ldr	r3, [pc, #68]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d008      	beq.n	800ee18 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ee06:	4b0f      	ldr	r3, [pc, #60]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800ee08:	69db      	ldr	r3, [r3, #28]
 800ee0a:	f043 0302 	orr.w	r3, r3, #2
 800ee0e:	4a0d      	ldr	r2, [pc, #52]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800ee10:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ee12:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800ee14:	2280      	movs	r2, #128	; 0x80
 800ee16:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ee18:	4b09      	ldr	r3, [pc, #36]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d008      	beq.n	800ee36 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ee24:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	f043 0320 	orr.w	r3, r3, #32
 800ee2c:	4a05      	ldr	r2, [pc, #20]	; (800ee44 <FLASH_SetErrorCode+0xa8>)
 800ee2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <FLASH_SetErrorCode+0xa4>)
 800ee32:	2202      	movs	r2, #2
 800ee34:	60da      	str	r2, [r3, #12]
  }
}
 800ee36:	bf00      	nop
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	40023c00 	.word	0x40023c00
 800ee44:	20000938 	.word	0x20000938

0800ee48 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ee58:	78fb      	ldrb	r3, [r7, #3]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d102      	bne.n	800ee64 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	60fb      	str	r3, [r7, #12]
 800ee62:	e010      	b.n	800ee86 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ee64:	78fb      	ldrb	r3, [r7, #3]
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d103      	bne.n	800ee72 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ee6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee6e:	60fb      	str	r3, [r7, #12]
 800ee70:	e009      	b.n	800ee86 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ee72:	78fb      	ldrb	r3, [r7, #3]
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d103      	bne.n	800ee80 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ee78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e002      	b.n	800ee86 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ee80:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee84:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee86:	4b13      	ldr	r3, [pc, #76]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800ee88:	691b      	ldr	r3, [r3, #16]
 800ee8a:	4a12      	ldr	r2, [pc, #72]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800ee8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ee92:	4b10      	ldr	r3, [pc, #64]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800ee94:	691a      	ldr	r2, [r3, #16]
 800ee96:	490f      	ldr	r1, [pc, #60]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ee9e:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	4a0c      	ldr	r2, [pc, #48]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eea4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800eea8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800eeaa:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eeac:	691a      	ldr	r2, [r3, #16]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	4a07      	ldr	r2, [pc, #28]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eeb6:	f043 0302 	orr.w	r3, r3, #2
 800eeba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800eebc:	4b05      	ldr	r3, [pc, #20]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	4a04      	ldr	r2, [pc, #16]	; (800eed4 <FLASH_Erase_Sector+0x8c>)
 800eec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eec6:	6113      	str	r3, [r2, #16]
}
 800eec8:	bf00      	nop
 800eeca:	3714      	adds	r7, #20
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	40023c00 	.word	0x40023c00

0800eed8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800eedc:	4b20      	ldr	r3, [pc, #128]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d017      	beq.n	800ef18 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800eee8:	4b1d      	ldr	r3, [pc, #116]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a1c      	ldr	r2, [pc, #112]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800eeee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eef2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800eef4:	4b1a      	ldr	r3, [pc, #104]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a19      	ldr	r2, [pc, #100]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800eefa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eefe:	6013      	str	r3, [r2, #0]
 800ef00:	4b17      	ldr	r3, [pc, #92]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a16      	ldr	r2, [pc, #88]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ef0c:	4b14      	ldr	r3, [pc, #80]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a13      	ldr	r2, [pc, #76]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef16:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800ef18:	4b11      	ldr	r3, [pc, #68]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d017      	beq.n	800ef54 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ef24:	4b0e      	ldr	r3, [pc, #56]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a0d      	ldr	r2, [pc, #52]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ef30:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a0a      	ldr	r2, [pc, #40]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	4b08      	ldr	r3, [pc, #32]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a07      	ldr	r2, [pc, #28]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ef48:	4b05      	ldr	r3, [pc, #20]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a04      	ldr	r2, [pc, #16]	; (800ef60 <FLASH_FlushCaches+0x88>)
 800ef4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef52:	6013      	str	r3, [r2, #0]
  }
}
 800ef54:	bf00      	nop
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	40023c00 	.word	0x40023c00

0800ef64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b089      	sub	sp, #36	; 0x24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ef72:	2300      	movs	r3, #0
 800ef74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	61fb      	str	r3, [r7, #28]
 800ef7e:	e16b      	b.n	800f258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ef80:	2201      	movs	r2, #1
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	fa02 f303 	lsl.w	r3, r2, r3
 800ef88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	4013      	ands	r3, r2
 800ef92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	f040 815a 	bne.w	800f252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d00b      	beq.n	800efbe <HAL_GPIO_Init+0x5a>
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d007      	beq.n	800efbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800efb2:	2b11      	cmp	r3, #17
 800efb4:	d003      	beq.n	800efbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	2b12      	cmp	r3, #18
 800efbc:	d130      	bne.n	800f020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	2203      	movs	r2, #3
 800efca:	fa02 f303 	lsl.w	r3, r2, r3
 800efce:	43db      	mvns	r3, r3
 800efd0:	69ba      	ldr	r2, [r7, #24]
 800efd2:	4013      	ands	r3, r2
 800efd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	68da      	ldr	r2, [r3, #12]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	fa02 f303 	lsl.w	r3, r2, r3
 800efe2:	69ba      	ldr	r2, [r7, #24]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	69ba      	ldr	r2, [r7, #24]
 800efec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eff4:	2201      	movs	r2, #1
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	fa02 f303 	lsl.w	r3, r2, r3
 800effc:	43db      	mvns	r3, r3
 800effe:	69ba      	ldr	r2, [r7, #24]
 800f000:	4013      	ands	r3, r2
 800f002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	091b      	lsrs	r3, r3, #4
 800f00a:	f003 0201 	and.w	r2, r3, #1
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	fa02 f303 	lsl.w	r3, r2, r3
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	4313      	orrs	r3, r2
 800f018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	69ba      	ldr	r2, [r7, #24]
 800f01e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	2203      	movs	r2, #3
 800f02c:	fa02 f303 	lsl.w	r3, r2, r3
 800f030:	43db      	mvns	r3, r3
 800f032:	69ba      	ldr	r2, [r7, #24]
 800f034:	4013      	ands	r3, r2
 800f036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	689a      	ldr	r2, [r3, #8]
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	fa02 f303 	lsl.w	r3, r2, r3
 800f044:	69ba      	ldr	r2, [r7, #24]
 800f046:	4313      	orrs	r3, r2
 800f048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	2b02      	cmp	r3, #2
 800f056:	d003      	beq.n	800f060 <HAL_GPIO_Init+0xfc>
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	2b12      	cmp	r3, #18
 800f05e:	d123      	bne.n	800f0a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	08da      	lsrs	r2, r3, #3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3208      	adds	r2, #8
 800f068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	f003 0307 	and.w	r3, r3, #7
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	220f      	movs	r2, #15
 800f078:	fa02 f303 	lsl.w	r3, r2, r3
 800f07c:	43db      	mvns	r3, r3
 800f07e:	69ba      	ldr	r2, [r7, #24]
 800f080:	4013      	ands	r3, r2
 800f082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	691a      	ldr	r2, [r3, #16]
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	f003 0307 	and.w	r3, r3, #7
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	fa02 f303 	lsl.w	r3, r2, r3
 800f094:	69ba      	ldr	r2, [r7, #24]
 800f096:	4313      	orrs	r3, r2
 800f098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	08da      	lsrs	r2, r3, #3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3208      	adds	r2, #8
 800f0a2:	69b9      	ldr	r1, [r7, #24]
 800f0a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	005b      	lsls	r3, r3, #1
 800f0b2:	2203      	movs	r2, #3
 800f0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b8:	43db      	mvns	r3, r3
 800f0ba:	69ba      	ldr	r2, [r7, #24]
 800f0bc:	4013      	ands	r3, r2
 800f0be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	f003 0203 	and.w	r2, r3, #3
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	005b      	lsls	r3, r3, #1
 800f0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f0d0:	69ba      	ldr	r2, [r7, #24]
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	69ba      	ldr	r2, [r7, #24]
 800f0da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f000 80b4 	beq.w	800f252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	4b5f      	ldr	r3, [pc, #380]	; (800f26c <HAL_GPIO_Init+0x308>)
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f2:	4a5e      	ldr	r2, [pc, #376]	; (800f26c <HAL_GPIO_Init+0x308>)
 800f0f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f0f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f0fa:	4b5c      	ldr	r3, [pc, #368]	; (800f26c <HAL_GPIO_Init+0x308>)
 800f0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f106:	4a5a      	ldr	r2, [pc, #360]	; (800f270 <HAL_GPIO_Init+0x30c>)
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	089b      	lsrs	r3, r3, #2
 800f10c:	3302      	adds	r3, #2
 800f10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	f003 0303 	and.w	r3, r3, #3
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	220f      	movs	r2, #15
 800f11e:	fa02 f303 	lsl.w	r3, r2, r3
 800f122:	43db      	mvns	r3, r3
 800f124:	69ba      	ldr	r2, [r7, #24]
 800f126:	4013      	ands	r3, r2
 800f128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4a51      	ldr	r2, [pc, #324]	; (800f274 <HAL_GPIO_Init+0x310>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d02b      	beq.n	800f18a <HAL_GPIO_Init+0x226>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a50      	ldr	r2, [pc, #320]	; (800f278 <HAL_GPIO_Init+0x314>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d025      	beq.n	800f186 <HAL_GPIO_Init+0x222>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a4f      	ldr	r2, [pc, #316]	; (800f27c <HAL_GPIO_Init+0x318>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d01f      	beq.n	800f182 <HAL_GPIO_Init+0x21e>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a4e      	ldr	r2, [pc, #312]	; (800f280 <HAL_GPIO_Init+0x31c>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d019      	beq.n	800f17e <HAL_GPIO_Init+0x21a>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a4d      	ldr	r2, [pc, #308]	; (800f284 <HAL_GPIO_Init+0x320>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d013      	beq.n	800f17a <HAL_GPIO_Init+0x216>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a4c      	ldr	r2, [pc, #304]	; (800f288 <HAL_GPIO_Init+0x324>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d00d      	beq.n	800f176 <HAL_GPIO_Init+0x212>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a4b      	ldr	r2, [pc, #300]	; (800f28c <HAL_GPIO_Init+0x328>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d007      	beq.n	800f172 <HAL_GPIO_Init+0x20e>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a4a      	ldr	r2, [pc, #296]	; (800f290 <HAL_GPIO_Init+0x32c>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d101      	bne.n	800f16e <HAL_GPIO_Init+0x20a>
 800f16a:	2307      	movs	r3, #7
 800f16c:	e00e      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f16e:	2308      	movs	r3, #8
 800f170:	e00c      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f172:	2306      	movs	r3, #6
 800f174:	e00a      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f176:	2305      	movs	r3, #5
 800f178:	e008      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f17a:	2304      	movs	r3, #4
 800f17c:	e006      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f17e:	2303      	movs	r3, #3
 800f180:	e004      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f182:	2302      	movs	r3, #2
 800f184:	e002      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f186:	2301      	movs	r3, #1
 800f188:	e000      	b.n	800f18c <HAL_GPIO_Init+0x228>
 800f18a:	2300      	movs	r3, #0
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	f002 0203 	and.w	r2, r2, #3
 800f192:	0092      	lsls	r2, r2, #2
 800f194:	4093      	lsls	r3, r2
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	4313      	orrs	r3, r2
 800f19a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f19c:	4934      	ldr	r1, [pc, #208]	; (800f270 <HAL_GPIO_Init+0x30c>)
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	089b      	lsrs	r3, r3, #2
 800f1a2:	3302      	adds	r3, #2
 800f1a4:	69ba      	ldr	r2, [r7, #24]
 800f1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f1aa:	4b3a      	ldr	r3, [pc, #232]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	43db      	mvns	r3, r3
 800f1b4:	69ba      	ldr	r2, [r7, #24]
 800f1b6:	4013      	ands	r3, r2
 800f1b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d003      	beq.n	800f1ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800f1c6:	69ba      	ldr	r2, [r7, #24]
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f1ce:	4a31      	ldr	r2, [pc, #196]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f1d4:	4b2f      	ldr	r3, [pc, #188]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	43db      	mvns	r3, r3
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800f1f0:	69ba      	ldr	r2, [r7, #24]
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f1f8:	4a26      	ldr	r2, [pc, #152]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f1fe:	4b25      	ldr	r3, [pc, #148]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	43db      	mvns	r3, r3
 800f208:	69ba      	ldr	r2, [r7, #24]
 800f20a:	4013      	ands	r3, r2
 800f20c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d003      	beq.n	800f222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800f21a:	69ba      	ldr	r2, [r7, #24]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	4313      	orrs	r3, r2
 800f220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f222:	4a1c      	ldr	r2, [pc, #112]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f228:	4b1a      	ldr	r3, [pc, #104]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	43db      	mvns	r3, r3
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	4013      	ands	r3, r2
 800f236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f240:	2b00      	cmp	r3, #0
 800f242:	d003      	beq.n	800f24c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800f244:	69ba      	ldr	r2, [r7, #24]
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	4313      	orrs	r3, r2
 800f24a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f24c:	4a11      	ldr	r2, [pc, #68]	; (800f294 <HAL_GPIO_Init+0x330>)
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	3301      	adds	r3, #1
 800f256:	61fb      	str	r3, [r7, #28]
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	2b0f      	cmp	r3, #15
 800f25c:	f67f ae90 	bls.w	800ef80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f260:	bf00      	nop
 800f262:	3724      	adds	r7, #36	; 0x24
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	40023800 	.word	0x40023800
 800f270:	40013800 	.word	0x40013800
 800f274:	40020000 	.word	0x40020000
 800f278:	40020400 	.word	0x40020400
 800f27c:	40020800 	.word	0x40020800
 800f280:	40020c00 	.word	0x40020c00
 800f284:	40021000 	.word	0x40021000
 800f288:	40021400 	.word	0x40021400
 800f28c:	40021800 	.word	0x40021800
 800f290:	40021c00 	.word	0x40021c00
 800f294:	40013c00 	.word	0x40013c00

0800f298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	807b      	strh	r3, [r7, #2]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f2a8:	787b      	ldrb	r3, [r7, #1]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f2ae:	887a      	ldrh	r2, [r7, #2]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f2b4:	e003      	b.n	800f2be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f2b6:	887b      	ldrh	r3, [r7, #2]
 800f2b8:	041a      	lsls	r2, r3, #16
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	619a      	str	r2, [r3, #24]
}
 800f2be:	bf00      	nop
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
	...

0800f2cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e25b      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d075      	beq.n	800f3d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f2ea:	4ba3      	ldr	r3, [pc, #652]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f2ec:	689b      	ldr	r3, [r3, #8]
 800f2ee:	f003 030c 	and.w	r3, r3, #12
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d00c      	beq.n	800f310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f2f6:	4ba0      	ldr	r3, [pc, #640]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f2fe:	2b08      	cmp	r3, #8
 800f300:	d112      	bne.n	800f328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f302:	4b9d      	ldr	r3, [pc, #628]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f30a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f30e:	d10b      	bne.n	800f328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f310:	4b99      	ldr	r3, [pc, #612]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d05b      	beq.n	800f3d4 <HAL_RCC_OscConfig+0x108>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d157      	bne.n	800f3d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f324:	2301      	movs	r3, #1
 800f326:	e236      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f330:	d106      	bne.n	800f340 <HAL_RCC_OscConfig+0x74>
 800f332:	4b91      	ldr	r3, [pc, #580]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a90      	ldr	r2, [pc, #576]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	e01d      	b.n	800f37c <HAL_RCC_OscConfig+0xb0>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f348:	d10c      	bne.n	800f364 <HAL_RCC_OscConfig+0x98>
 800f34a:	4b8b      	ldr	r3, [pc, #556]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a8a      	ldr	r2, [pc, #552]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	4b88      	ldr	r3, [pc, #544]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a87      	ldr	r2, [pc, #540]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f35c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f360:	6013      	str	r3, [r2, #0]
 800f362:	e00b      	b.n	800f37c <HAL_RCC_OscConfig+0xb0>
 800f364:	4b84      	ldr	r3, [pc, #528]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a83      	ldr	r2, [pc, #524]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f36a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f36e:	6013      	str	r3, [r2, #0]
 800f370:	4b81      	ldr	r3, [pc, #516]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a80      	ldr	r2, [pc, #512]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f37a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d013      	beq.n	800f3ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f384:	f7fe f9a6 	bl	800d6d4 <HAL_GetTick>
 800f388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f38a:	e008      	b.n	800f39e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f38c:	f7fe f9a2 	bl	800d6d4 <HAL_GetTick>
 800f390:	4602      	mov	r2, r0
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	1ad3      	subs	r3, r2, r3
 800f396:	2b64      	cmp	r3, #100	; 0x64
 800f398:	d901      	bls.n	800f39e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f39a:	2303      	movs	r3, #3
 800f39c:	e1fb      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f39e:	4b76      	ldr	r3, [pc, #472]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0f0      	beq.n	800f38c <HAL_RCC_OscConfig+0xc0>
 800f3aa:	e014      	b.n	800f3d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f3ac:	f7fe f992 	bl	800d6d4 <HAL_GetTick>
 800f3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f3b2:	e008      	b.n	800f3c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3b4:	f7fe f98e 	bl	800d6d4 <HAL_GetTick>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	2b64      	cmp	r3, #100	; 0x64
 800f3c0:	d901      	bls.n	800f3c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	e1e7      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f3c6:	4b6c      	ldr	r3, [pc, #432]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1f0      	bne.n	800f3b4 <HAL_RCC_OscConfig+0xe8>
 800f3d2:	e000      	b.n	800f3d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f3d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f003 0302 	and.w	r3, r3, #2
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d063      	beq.n	800f4aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f3e2:	4b65      	ldr	r3, [pc, #404]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f003 030c 	and.w	r3, r3, #12
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d00b      	beq.n	800f406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f3ee:	4b62      	ldr	r3, [pc, #392]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f3f6:	2b08      	cmp	r3, #8
 800f3f8:	d11c      	bne.n	800f434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f3fa:	4b5f      	ldr	r3, [pc, #380]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f402:	2b00      	cmp	r3, #0
 800f404:	d116      	bne.n	800f434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f406:	4b5c      	ldr	r3, [pc, #368]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0302 	and.w	r3, r3, #2
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d005      	beq.n	800f41e <HAL_RCC_OscConfig+0x152>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d001      	beq.n	800f41e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e1bb      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f41e:	4b56      	ldr	r3, [pc, #344]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	00db      	lsls	r3, r3, #3
 800f42c:	4952      	ldr	r1, [pc, #328]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f42e:	4313      	orrs	r3, r2
 800f430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f432:	e03a      	b.n	800f4aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d020      	beq.n	800f47e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f43c:	4b4f      	ldr	r3, [pc, #316]	; (800f57c <HAL_RCC_OscConfig+0x2b0>)
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f442:	f7fe f947 	bl	800d6d4 <HAL_GetTick>
 800f446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f448:	e008      	b.n	800f45c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f44a:	f7fe f943 	bl	800d6d4 <HAL_GetTick>
 800f44e:	4602      	mov	r2, r0
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	2b02      	cmp	r3, #2
 800f456:	d901      	bls.n	800f45c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f458:	2303      	movs	r3, #3
 800f45a:	e19c      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f45c:	4b46      	ldr	r3, [pc, #280]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f003 0302 	and.w	r3, r3, #2
 800f464:	2b00      	cmp	r3, #0
 800f466:	d0f0      	beq.n	800f44a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f468:	4b43      	ldr	r3, [pc, #268]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	4940      	ldr	r1, [pc, #256]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f478:	4313      	orrs	r3, r2
 800f47a:	600b      	str	r3, [r1, #0]
 800f47c:	e015      	b.n	800f4aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f47e:	4b3f      	ldr	r3, [pc, #252]	; (800f57c <HAL_RCC_OscConfig+0x2b0>)
 800f480:	2200      	movs	r2, #0
 800f482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f484:	f7fe f926 	bl	800d6d4 <HAL_GetTick>
 800f488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f48a:	e008      	b.n	800f49e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f48c:	f7fe f922 	bl	800d6d4 <HAL_GetTick>
 800f490:	4602      	mov	r2, r0
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	2b02      	cmp	r3, #2
 800f498:	d901      	bls.n	800f49e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f49a:	2303      	movs	r3, #3
 800f49c:	e17b      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f49e:	4b36      	ldr	r3, [pc, #216]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f003 0302 	and.w	r3, r3, #2
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1f0      	bne.n	800f48c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f003 0308 	and.w	r3, r3, #8
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d030      	beq.n	800f518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d016      	beq.n	800f4ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f4be:	4b30      	ldr	r3, [pc, #192]	; (800f580 <HAL_RCC_OscConfig+0x2b4>)
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4c4:	f7fe f906 	bl	800d6d4 <HAL_GetTick>
 800f4c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f4ca:	e008      	b.n	800f4de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f4cc:	f7fe f902 	bl	800d6d4 <HAL_GetTick>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d901      	bls.n	800f4de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	e15b      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f4de:	4b26      	ldr	r3, [pc, #152]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e2:	f003 0302 	and.w	r3, r3, #2
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d0f0      	beq.n	800f4cc <HAL_RCC_OscConfig+0x200>
 800f4ea:	e015      	b.n	800f518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f4ec:	4b24      	ldr	r3, [pc, #144]	; (800f580 <HAL_RCC_OscConfig+0x2b4>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f4f2:	f7fe f8ef 	bl	800d6d4 <HAL_GetTick>
 800f4f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f4f8:	e008      	b.n	800f50c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f4fa:	f7fe f8eb 	bl	800d6d4 <HAL_GetTick>
 800f4fe:	4602      	mov	r2, r0
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	2b02      	cmp	r3, #2
 800f506:	d901      	bls.n	800f50c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f508:	2303      	movs	r3, #3
 800f50a:	e144      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f50c:	4b1a      	ldr	r3, [pc, #104]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f510:	f003 0302 	and.w	r3, r3, #2
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1f0      	bne.n	800f4fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 80a0 	beq.w	800f666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f526:	2300      	movs	r3, #0
 800f528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f52a:	4b13      	ldr	r3, [pc, #76]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10f      	bne.n	800f556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f536:	2300      	movs	r3, #0
 800f538:	60bb      	str	r3, [r7, #8]
 800f53a:	4b0f      	ldr	r3, [pc, #60]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53e:	4a0e      	ldr	r2, [pc, #56]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f544:	6413      	str	r3, [r2, #64]	; 0x40
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <HAL_RCC_OscConfig+0x2ac>)
 800f548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f54e:	60bb      	str	r3, [r7, #8]
 800f550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f552:	2301      	movs	r3, #1
 800f554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f556:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <HAL_RCC_OscConfig+0x2b8>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d121      	bne.n	800f5a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f562:	4b08      	ldr	r3, [pc, #32]	; (800f584 <HAL_RCC_OscConfig+0x2b8>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a07      	ldr	r2, [pc, #28]	; (800f584 <HAL_RCC_OscConfig+0x2b8>)
 800f568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f56c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f56e:	f7fe f8b1 	bl	800d6d4 <HAL_GetTick>
 800f572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f574:	e011      	b.n	800f59a <HAL_RCC_OscConfig+0x2ce>
 800f576:	bf00      	nop
 800f578:	40023800 	.word	0x40023800
 800f57c:	42470000 	.word	0x42470000
 800f580:	42470e80 	.word	0x42470e80
 800f584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f588:	f7fe f8a4 	bl	800d6d4 <HAL_GetTick>
 800f58c:	4602      	mov	r2, r0
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	2b02      	cmp	r3, #2
 800f594:	d901      	bls.n	800f59a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f596:	2303      	movs	r3, #3
 800f598:	e0fd      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f59a:	4b81      	ldr	r3, [pc, #516]	; (800f7a0 <HAL_RCC_OscConfig+0x4d4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0f0      	beq.n	800f588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d106      	bne.n	800f5bc <HAL_RCC_OscConfig+0x2f0>
 800f5ae:	4b7d      	ldr	r3, [pc, #500]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5b2:	4a7c      	ldr	r2, [pc, #496]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5b4:	f043 0301 	orr.w	r3, r3, #1
 800f5b8:	6713      	str	r3, [r2, #112]	; 0x70
 800f5ba:	e01c      	b.n	800f5f6 <HAL_RCC_OscConfig+0x32a>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	2b05      	cmp	r3, #5
 800f5c2:	d10c      	bne.n	800f5de <HAL_RCC_OscConfig+0x312>
 800f5c4:	4b77      	ldr	r3, [pc, #476]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c8:	4a76      	ldr	r2, [pc, #472]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5ca:	f043 0304 	orr.w	r3, r3, #4
 800f5ce:	6713      	str	r3, [r2, #112]	; 0x70
 800f5d0:	4b74      	ldr	r3, [pc, #464]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d4:	4a73      	ldr	r2, [pc, #460]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5d6:	f043 0301 	orr.w	r3, r3, #1
 800f5da:	6713      	str	r3, [r2, #112]	; 0x70
 800f5dc:	e00b      	b.n	800f5f6 <HAL_RCC_OscConfig+0x32a>
 800f5de:	4b71      	ldr	r3, [pc, #452]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e2:	4a70      	ldr	r2, [pc, #448]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5e4:	f023 0301 	bic.w	r3, r3, #1
 800f5e8:	6713      	str	r3, [r2, #112]	; 0x70
 800f5ea:	4b6e      	ldr	r3, [pc, #440]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ee:	4a6d      	ldr	r2, [pc, #436]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f5f0:	f023 0304 	bic.w	r3, r3, #4
 800f5f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d015      	beq.n	800f62a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5fe:	f7fe f869 	bl	800d6d4 <HAL_GetTick>
 800f602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f604:	e00a      	b.n	800f61c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f606:	f7fe f865 	bl	800d6d4 <HAL_GetTick>
 800f60a:	4602      	mov	r2, r0
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	f241 3288 	movw	r2, #5000	; 0x1388
 800f614:	4293      	cmp	r3, r2
 800f616:	d901      	bls.n	800f61c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f618:	2303      	movs	r3, #3
 800f61a:	e0bc      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f61c:	4b61      	ldr	r3, [pc, #388]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f620:	f003 0302 	and.w	r3, r3, #2
 800f624:	2b00      	cmp	r3, #0
 800f626:	d0ee      	beq.n	800f606 <HAL_RCC_OscConfig+0x33a>
 800f628:	e014      	b.n	800f654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f62a:	f7fe f853 	bl	800d6d4 <HAL_GetTick>
 800f62e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f630:	e00a      	b.n	800f648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f632:	f7fe f84f 	bl	800d6d4 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f640:	4293      	cmp	r3, r2
 800f642:	d901      	bls.n	800f648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f644:	2303      	movs	r3, #3
 800f646:	e0a6      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f648:	4b56      	ldr	r3, [pc, #344]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f64c:	f003 0302 	and.w	r3, r3, #2
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1ee      	bne.n	800f632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	2b01      	cmp	r3, #1
 800f658:	d105      	bne.n	800f666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f65a:	4b52      	ldr	r3, [pc, #328]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f65e:	4a51      	ldr	r2, [pc, #324]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f000 8092 	beq.w	800f794 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f670:	4b4c      	ldr	r3, [pc, #304]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f003 030c 	and.w	r3, r3, #12
 800f678:	2b08      	cmp	r3, #8
 800f67a:	d05c      	beq.n	800f736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	699b      	ldr	r3, [r3, #24]
 800f680:	2b02      	cmp	r3, #2
 800f682:	d141      	bne.n	800f708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f684:	4b48      	ldr	r3, [pc, #288]	; (800f7a8 <HAL_RCC_OscConfig+0x4dc>)
 800f686:	2200      	movs	r2, #0
 800f688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f68a:	f7fe f823 	bl	800d6d4 <HAL_GetTick>
 800f68e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f690:	e008      	b.n	800f6a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f692:	f7fe f81f 	bl	800d6d4 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	d901      	bls.n	800f6a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	e078      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6a4:	4b3f      	ldr	r3, [pc, #252]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1f0      	bne.n	800f692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	69da      	ldr	r2, [r3, #28]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	431a      	orrs	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	019b      	lsls	r3, r3, #6
 800f6c0:	431a      	orrs	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c6:	085b      	lsrs	r3, r3, #1
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	041b      	lsls	r3, r3, #16
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d2:	061b      	lsls	r3, r3, #24
 800f6d4:	4933      	ldr	r1, [pc, #204]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f6da:	4b33      	ldr	r3, [pc, #204]	; (800f7a8 <HAL_RCC_OscConfig+0x4dc>)
 800f6dc:	2201      	movs	r2, #1
 800f6de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6e0:	f7fd fff8 	bl	800d6d4 <HAL_GetTick>
 800f6e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f6e6:	e008      	b.n	800f6fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6e8:	f7fd fff4 	bl	800d6d4 <HAL_GetTick>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d901      	bls.n	800f6fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e04d      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f6fa:	4b2a      	ldr	r3, [pc, #168]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f702:	2b00      	cmp	r3, #0
 800f704:	d0f0      	beq.n	800f6e8 <HAL_RCC_OscConfig+0x41c>
 800f706:	e045      	b.n	800f794 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f708:	4b27      	ldr	r3, [pc, #156]	; (800f7a8 <HAL_RCC_OscConfig+0x4dc>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f70e:	f7fd ffe1 	bl	800d6d4 <HAL_GetTick>
 800f712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f714:	e008      	b.n	800f728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f716:	f7fd ffdd 	bl	800d6d4 <HAL_GetTick>
 800f71a:	4602      	mov	r2, r0
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	2b02      	cmp	r3, #2
 800f722:	d901      	bls.n	800f728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f724:	2303      	movs	r3, #3
 800f726:	e036      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f728:	4b1e      	ldr	r3, [pc, #120]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1f0      	bne.n	800f716 <HAL_RCC_OscConfig+0x44a>
 800f734:	e02e      	b.n	800f794 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d101      	bne.n	800f742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e029      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f742:	4b18      	ldr	r3, [pc, #96]	; (800f7a4 <HAL_RCC_OscConfig+0x4d8>)
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	69db      	ldr	r3, [r3, #28]
 800f752:	429a      	cmp	r2, r3
 800f754:	d11c      	bne.n	800f790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f760:	429a      	cmp	r2, r3
 800f762:	d115      	bne.n	800f790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f76a:	4013      	ands	r3, r2
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f770:	4293      	cmp	r3, r2
 800f772:	d10d      	bne.n	800f790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f77e:	429a      	cmp	r2, r3
 800f780:	d106      	bne.n	800f790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d001      	beq.n	800f794 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800f790:	2301      	movs	r3, #1
 800f792:	e000      	b.n	800f796 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	40007000 	.word	0x40007000
 800f7a4:	40023800 	.word	0x40023800
 800f7a8:	42470060 	.word	0x42470060

0800f7ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d101      	bne.n	800f7c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e0cc      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f7c0:	4b68      	ldr	r3, [pc, #416]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f003 030f 	and.w	r3, r3, #15
 800f7c8:	683a      	ldr	r2, [r7, #0]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d90c      	bls.n	800f7e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f7ce:	4b65      	ldr	r3, [pc, #404]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	b2d2      	uxtb	r2, r2
 800f7d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f7d6:	4b63      	ldr	r3, [pc, #396]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f003 030f 	and.w	r3, r3, #15
 800f7de:	683a      	ldr	r2, [r7, #0]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d001      	beq.n	800f7e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e0b8      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f003 0302 	and.w	r3, r3, #2
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d020      	beq.n	800f836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 0304 	and.w	r3, r3, #4
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d005      	beq.n	800f80c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f800:	4b59      	ldr	r3, [pc, #356]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	4a58      	ldr	r2, [pc, #352]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f80a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 0308 	and.w	r3, r3, #8
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f818:	4b53      	ldr	r3, [pc, #332]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	4a52      	ldr	r2, [pc, #328]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f81e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f824:	4b50      	ldr	r3, [pc, #320]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	494d      	ldr	r1, [pc, #308]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f832:	4313      	orrs	r3, r2
 800f834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f003 0301 	and.w	r3, r3, #1
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d044      	beq.n	800f8cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	2b01      	cmp	r3, #1
 800f848:	d107      	bne.n	800f85a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f84a:	4b47      	ldr	r3, [pc, #284]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f852:	2b00      	cmp	r3, #0
 800f854:	d119      	bne.n	800f88a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f856:	2301      	movs	r3, #1
 800f858:	e07f      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d003      	beq.n	800f86a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f866:	2b03      	cmp	r3, #3
 800f868:	d107      	bne.n	800f87a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f86a:	4b3f      	ldr	r3, [pc, #252]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f872:	2b00      	cmp	r3, #0
 800f874:	d109      	bne.n	800f88a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e06f      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f87a:	4b3b      	ldr	r3, [pc, #236]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f003 0302 	and.w	r3, r3, #2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	e067      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f88a:	4b37      	ldr	r3, [pc, #220]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f023 0203 	bic.w	r2, r3, #3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	4934      	ldr	r1, [pc, #208]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f898:	4313      	orrs	r3, r2
 800f89a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f89c:	f7fd ff1a 	bl	800d6d4 <HAL_GetTick>
 800f8a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8a2:	e00a      	b.n	800f8ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f8a4:	f7fd ff16 	bl	800d6d4 <HAL_GetTick>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d901      	bls.n	800f8ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	e04f      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8ba:	4b2b      	ldr	r3, [pc, #172]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	f003 020c 	and.w	r2, r3, #12
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d1eb      	bne.n	800f8a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f8cc:	4b25      	ldr	r3, [pc, #148]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f003 030f 	and.w	r3, r3, #15
 800f8d4:	683a      	ldr	r2, [r7, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d20c      	bcs.n	800f8f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8da:	4b22      	ldr	r3, [pc, #136]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	b2d2      	uxtb	r2, r2
 800f8e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8e2:	4b20      	ldr	r3, [pc, #128]	; (800f964 <HAL_RCC_ClockConfig+0x1b8>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f003 030f 	and.w	r3, r3, #15
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d001      	beq.n	800f8f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e032      	b.n	800f95a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f003 0304 	and.w	r3, r3, #4
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d008      	beq.n	800f912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f900:	4b19      	ldr	r3, [pc, #100]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	4916      	ldr	r1, [pc, #88]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f90e:	4313      	orrs	r3, r2
 800f910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f003 0308 	and.w	r3, r3, #8
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d009      	beq.n	800f932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f91e:	4b12      	ldr	r3, [pc, #72]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	00db      	lsls	r3, r3, #3
 800f92c:	490e      	ldr	r1, [pc, #56]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f92e:	4313      	orrs	r3, r2
 800f930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f932:	f000 f821 	bl	800f978 <HAL_RCC_GetSysClockFreq>
 800f936:	4601      	mov	r1, r0
 800f938:	4b0b      	ldr	r3, [pc, #44]	; (800f968 <HAL_RCC_ClockConfig+0x1bc>)
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	091b      	lsrs	r3, r3, #4
 800f93e:	f003 030f 	and.w	r3, r3, #15
 800f942:	4a0a      	ldr	r2, [pc, #40]	; (800f96c <HAL_RCC_ClockConfig+0x1c0>)
 800f944:	5cd3      	ldrb	r3, [r2, r3]
 800f946:	fa21 f303 	lsr.w	r3, r1, r3
 800f94a:	4a09      	ldr	r2, [pc, #36]	; (800f970 <HAL_RCC_ClockConfig+0x1c4>)
 800f94c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f94e:	4b09      	ldr	r3, [pc, #36]	; (800f974 <HAL_RCC_ClockConfig+0x1c8>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4618      	mov	r0, r3
 800f954:	f7fd fe7a 	bl	800d64c <HAL_InitTick>

  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	40023c00 	.word	0x40023c00
 800f968:	40023800 	.word	0x40023800
 800f96c:	08014e80 	.word	0x08014e80
 800f970:	20000004 	.word	0x20000004
 800f974:	20000008 	.word	0x20000008

0800f978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	607b      	str	r3, [r7, #4]
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
 800f986:	2300      	movs	r3, #0
 800f988:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f98a:	2300      	movs	r3, #0
 800f98c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f98e:	4b63      	ldr	r3, [pc, #396]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	f003 030c 	and.w	r3, r3, #12
 800f996:	2b04      	cmp	r3, #4
 800f998:	d007      	beq.n	800f9aa <HAL_RCC_GetSysClockFreq+0x32>
 800f99a:	2b08      	cmp	r3, #8
 800f99c:	d008      	beq.n	800f9b0 <HAL_RCC_GetSysClockFreq+0x38>
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f040 80b4 	bne.w	800fb0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f9a4:	4b5e      	ldr	r3, [pc, #376]	; (800fb20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f9a6:	60bb      	str	r3, [r7, #8]
       break;
 800f9a8:	e0b3      	b.n	800fb12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f9aa:	4b5e      	ldr	r3, [pc, #376]	; (800fb24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800f9ac:	60bb      	str	r3, [r7, #8]
      break;
 800f9ae:	e0b0      	b.n	800fb12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f9b0:	4b5a      	ldr	r3, [pc, #360]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f9ba:	4b58      	ldr	r3, [pc, #352]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d04a      	beq.n	800fa5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f9c6:	4b55      	ldr	r3, [pc, #340]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	099b      	lsrs	r3, r3, #6
 800f9cc:	f04f 0400 	mov.w	r4, #0
 800f9d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f9d4:	f04f 0200 	mov.w	r2, #0
 800f9d8:	ea03 0501 	and.w	r5, r3, r1
 800f9dc:	ea04 0602 	and.w	r6, r4, r2
 800f9e0:	4629      	mov	r1, r5
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	f04f 0300 	mov.w	r3, #0
 800f9e8:	f04f 0400 	mov.w	r4, #0
 800f9ec:	0154      	lsls	r4, r2, #5
 800f9ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f9f2:	014b      	lsls	r3, r1, #5
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	1b49      	subs	r1, r1, r5
 800f9fa:	eb62 0206 	sbc.w	r2, r2, r6
 800f9fe:	f04f 0300 	mov.w	r3, #0
 800fa02:	f04f 0400 	mov.w	r4, #0
 800fa06:	0194      	lsls	r4, r2, #6
 800fa08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800fa0c:	018b      	lsls	r3, r1, #6
 800fa0e:	1a5b      	subs	r3, r3, r1
 800fa10:	eb64 0402 	sbc.w	r4, r4, r2
 800fa14:	f04f 0100 	mov.w	r1, #0
 800fa18:	f04f 0200 	mov.w	r2, #0
 800fa1c:	00e2      	lsls	r2, r4, #3
 800fa1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800fa22:	00d9      	lsls	r1, r3, #3
 800fa24:	460b      	mov	r3, r1
 800fa26:	4614      	mov	r4, r2
 800fa28:	195b      	adds	r3, r3, r5
 800fa2a:	eb44 0406 	adc.w	r4, r4, r6
 800fa2e:	f04f 0100 	mov.w	r1, #0
 800fa32:	f04f 0200 	mov.w	r2, #0
 800fa36:	0262      	lsls	r2, r4, #9
 800fa38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800fa3c:	0259      	lsls	r1, r3, #9
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4614      	mov	r4, r2
 800fa42:	4618      	mov	r0, r3
 800fa44:	4621      	mov	r1, r4
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f04f 0400 	mov.w	r4, #0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4623      	mov	r3, r4
 800fa50:	f7f9 f832 	bl	8008ab8 <__aeabi_uldivmod>
 800fa54:	4603      	mov	r3, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	e049      	b.n	800faf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fa5c:	4b2f      	ldr	r3, [pc, #188]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	099b      	lsrs	r3, r3, #6
 800fa62:	f04f 0400 	mov.w	r4, #0
 800fa66:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fa6a:	f04f 0200 	mov.w	r2, #0
 800fa6e:	ea03 0501 	and.w	r5, r3, r1
 800fa72:	ea04 0602 	and.w	r6, r4, r2
 800fa76:	4629      	mov	r1, r5
 800fa78:	4632      	mov	r2, r6
 800fa7a:	f04f 0300 	mov.w	r3, #0
 800fa7e:	f04f 0400 	mov.w	r4, #0
 800fa82:	0154      	lsls	r4, r2, #5
 800fa84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800fa88:	014b      	lsls	r3, r1, #5
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	4622      	mov	r2, r4
 800fa8e:	1b49      	subs	r1, r1, r5
 800fa90:	eb62 0206 	sbc.w	r2, r2, r6
 800fa94:	f04f 0300 	mov.w	r3, #0
 800fa98:	f04f 0400 	mov.w	r4, #0
 800fa9c:	0194      	lsls	r4, r2, #6
 800fa9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800faa2:	018b      	lsls	r3, r1, #6
 800faa4:	1a5b      	subs	r3, r3, r1
 800faa6:	eb64 0402 	sbc.w	r4, r4, r2
 800faaa:	f04f 0100 	mov.w	r1, #0
 800faae:	f04f 0200 	mov.w	r2, #0
 800fab2:	00e2      	lsls	r2, r4, #3
 800fab4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800fab8:	00d9      	lsls	r1, r3, #3
 800faba:	460b      	mov	r3, r1
 800fabc:	4614      	mov	r4, r2
 800fabe:	195b      	adds	r3, r3, r5
 800fac0:	eb44 0406 	adc.w	r4, r4, r6
 800fac4:	f04f 0100 	mov.w	r1, #0
 800fac8:	f04f 0200 	mov.w	r2, #0
 800facc:	02a2      	lsls	r2, r4, #10
 800face:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800fad2:	0299      	lsls	r1, r3, #10
 800fad4:	460b      	mov	r3, r1
 800fad6:	4614      	mov	r4, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	4621      	mov	r1, r4
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f04f 0400 	mov.w	r4, #0
 800fae2:	461a      	mov	r2, r3
 800fae4:	4623      	mov	r3, r4
 800fae6:	f7f8 ffe7 	bl	8008ab8 <__aeabi_uldivmod>
 800faea:	4603      	mov	r3, r0
 800faec:	460c      	mov	r4, r1
 800faee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800faf0:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	0c1b      	lsrs	r3, r3, #16
 800faf6:	f003 0303 	and.w	r3, r3, #3
 800fafa:	3301      	adds	r3, #1
 800fafc:	005b      	lsls	r3, r3, #1
 800fafe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb08:	60bb      	str	r3, [r7, #8]
      break;
 800fb0a:	e002      	b.n	800fb12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fb0c:	4b04      	ldr	r3, [pc, #16]	; (800fb20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800fb0e:	60bb      	str	r3, [r7, #8]
      break;
 800fb10:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fb12:	68bb      	ldr	r3, [r7, #8]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1c:	40023800 	.word	0x40023800
 800fb20:	00f42400 	.word	0x00f42400
 800fb24:	007a1200 	.word	0x007a1200

0800fb28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fb2c:	4b03      	ldr	r3, [pc, #12]	; (800fb3c <HAL_RCC_GetHCLKFreq+0x14>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	20000004 	.word	0x20000004

0800fb40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fb44:	f7ff fff0 	bl	800fb28 <HAL_RCC_GetHCLKFreq>
 800fb48:	4601      	mov	r1, r0
 800fb4a:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	0a9b      	lsrs	r3, r3, #10
 800fb50:	f003 0307 	and.w	r3, r3, #7
 800fb54:	4a03      	ldr	r2, [pc, #12]	; (800fb64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fb56:	5cd3      	ldrb	r3, [r2, r3]
 800fb58:	fa21 f303 	lsr.w	r3, r1, r3
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	40023800 	.word	0x40023800
 800fb64:	08014e90 	.word	0x08014e90

0800fb68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fb6c:	f7ff ffdc 	bl	800fb28 <HAL_RCC_GetHCLKFreq>
 800fb70:	4601      	mov	r1, r0
 800fb72:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	0b5b      	lsrs	r3, r3, #13
 800fb78:	f003 0307 	and.w	r3, r3, #7
 800fb7c:	4a03      	ldr	r2, [pc, #12]	; (800fb8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800fb7e:	5cd3      	ldrb	r3, [r2, r3]
 800fb80:	fa21 f303 	lsr.w	r3, r1, r3
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	40023800 	.word	0x40023800
 800fb8c:	08014e90 	.word	0x08014e90

0800fb90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e056      	b.n	800fc50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d106      	bne.n	800fbc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7fc fd85 	bl	800c6cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	431a      	orrs	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	431a      	orrs	r2, r3
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	431a      	orrs	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	431a      	orrs	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	699b      	ldr	r3, [r3, #24]
 800fbfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	69db      	ldr	r3, [r3, #28]
 800fc04:	431a      	orrs	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	ea42 0103 	orr.w	r1, r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	430a      	orrs	r2, r1
 800fc18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	699b      	ldr	r3, [r3, #24]
 800fc1e:	0c1b      	lsrs	r3, r3, #16
 800fc20:	f003 0104 	and.w	r1, r3, #4
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	430a      	orrs	r2, r1
 800fc2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	69da      	ldr	r2, [r3, #28]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b088      	sub	sp, #32
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	603b      	str	r3, [r7, #0]
 800fc64:	4613      	mov	r3, r2
 800fc66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d101      	bne.n	800fc7a <HAL_SPI_Transmit+0x22>
 800fc76:	2302      	movs	r3, #2
 800fc78:	e11e      	b.n	800feb8 <HAL_SPI_Transmit+0x260>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc82:	f7fd fd27 	bl	800d6d4 <HAL_GetTick>
 800fc86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fc88:	88fb      	ldrh	r3, [r7, #6]
 800fc8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d002      	beq.n	800fc9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fc98:	2302      	movs	r3, #2
 800fc9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fc9c:	e103      	b.n	800fea6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <HAL_SPI_Transmit+0x52>
 800fca4:	88fb      	ldrh	r3, [r7, #6]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d102      	bne.n	800fcb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcae:	e0fa      	b.n	800fea6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2203      	movs	r2, #3
 800fcb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	88fa      	ldrh	r2, [r7, #6]
 800fcc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	88fa      	ldrh	r2, [r7, #6]
 800fcce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2200      	movs	r2, #0
 800fce6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2200      	movs	r2, #0
 800fcec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcf6:	d107      	bne.n	800fd08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd12:	2b40      	cmp	r3, #64	; 0x40
 800fd14:	d007      	beq.n	800fd26 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd2e:	d14b      	bne.n	800fdc8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d002      	beq.n	800fd3e <HAL_SPI_Transmit+0xe6>
 800fd38:	8afb      	ldrh	r3, [r7, #22]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d13e      	bne.n	800fdbc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd42:	881a      	ldrh	r2, [r3, #0]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd4e:	1c9a      	adds	r2, r3, #2
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fd62:	e02b      	b.n	800fdbc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	f003 0302 	and.w	r3, r3, #2
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d112      	bne.n	800fd98 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd76:	881a      	ldrh	r2, [r3, #0]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd82:	1c9a      	adds	r2, r3, #2
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	3b01      	subs	r3, #1
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	86da      	strh	r2, [r3, #54]	; 0x36
 800fd96:	e011      	b.n	800fdbc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd98:	f7fd fc9c 	bl	800d6d4 <HAL_GetTick>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d803      	bhi.n	800fdb0 <HAL_SPI_Transmit+0x158>
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdae:	d102      	bne.n	800fdb6 <HAL_SPI_Transmit+0x15e>
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d102      	bne.n	800fdbc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fdba:	e074      	b.n	800fea6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1ce      	bne.n	800fd64 <HAL_SPI_Transmit+0x10c>
 800fdc6:	e04c      	b.n	800fe62 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <HAL_SPI_Transmit+0x17e>
 800fdd0:	8afb      	ldrh	r3, [r7, #22]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d140      	bne.n	800fe58 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	330c      	adds	r3, #12
 800fde0:	7812      	ldrb	r2, [r2, #0]
 800fde2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde8:	1c5a      	adds	r2, r3, #1
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fdfc:	e02c      	b.n	800fe58 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	f003 0302 	and.w	r3, r3, #2
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d113      	bne.n	800fe34 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	330c      	adds	r3, #12
 800fe16:	7812      	ldrb	r2, [r2, #0]
 800fe18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	86da      	strh	r2, [r3, #54]	; 0x36
 800fe32:	e011      	b.n	800fe58 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe34:	f7fd fc4e 	bl	800d6d4 <HAL_GetTick>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	683a      	ldr	r2, [r7, #0]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d803      	bhi.n	800fe4c <HAL_SPI_Transmit+0x1f4>
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4a:	d102      	bne.n	800fe52 <HAL_SPI_Transmit+0x1fa>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800fe52:	2303      	movs	r3, #3
 800fe54:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fe56:	e026      	b.n	800fea6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d1cd      	bne.n	800fdfe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fe62:	69ba      	ldr	r2, [r7, #24]
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f000 fba4 	bl	80105b4 <SPI_EndRxTxTransaction>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2220      	movs	r2, #32
 800fe76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d10a      	bne.n	800fe96 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fe80:	2300      	movs	r3, #0
 800fe82:	613b      	str	r3, [r7, #16]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	613b      	str	r3, [r7, #16]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d002      	beq.n	800fea4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	77fb      	strb	r3, [r7, #31]
 800fea2:	e000      	b.n	800fea6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800fea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2201      	movs	r2, #1
 800feaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800feb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3720      	adds	r7, #32
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b088      	sub	sp, #32
 800fec4:	af02      	add	r7, sp, #8
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	603b      	str	r3, [r7, #0]
 800fecc:	4613      	mov	r3, r2
 800fece:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fed0:	2300      	movs	r3, #0
 800fed2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fedc:	d112      	bne.n	800ff04 <HAL_SPI_Receive+0x44>
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d10e      	bne.n	800ff04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2204      	movs	r2, #4
 800feea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800feee:	88fa      	ldrh	r2, [r7, #6]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	4613      	mov	r3, r2
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	68b9      	ldr	r1, [r7, #8]
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f000 f8e9 	bl	80100d2 <HAL_SPI_TransmitReceive>
 800ff00:	4603      	mov	r3, r0
 800ff02:	e0e2      	b.n	80100ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d101      	bne.n	800ff12 <HAL_SPI_Receive+0x52>
 800ff0e:	2302      	movs	r3, #2
 800ff10:	e0db      	b.n	80100ca <HAL_SPI_Receive+0x20a>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff1a:	f7fd fbdb 	bl	800d6d4 <HAL_GetTick>
 800ff1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d002      	beq.n	800ff32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ff30:	e0c2      	b.n	80100b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <HAL_SPI_Receive+0x7e>
 800ff38:	88fb      	ldrh	r3, [r7, #6]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d102      	bne.n	800ff44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ff42:	e0b9      	b.n	80100b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2204      	movs	r2, #4
 800ff48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	88fa      	ldrh	r2, [r7, #6]
 800ff5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	88fa      	ldrh	r2, [r7, #6]
 800ff62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2200      	movs	r2, #0
 800ff68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2200      	movs	r2, #0
 800ff74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff8a:	d107      	bne.n	800ff9c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ff9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa6:	2b40      	cmp	r3, #64	; 0x40
 800ffa8:	d007      	beq.n	800ffba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ffb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d162      	bne.n	8010088 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ffc2:	e02e      	b.n	8010022 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	689b      	ldr	r3, [r3, #8]
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d115      	bne.n	800fffe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f103 020c 	add.w	r2, r3, #12
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffde:	7812      	ldrb	r2, [r2, #0]
 800ffe0:	b2d2      	uxtb	r2, r2
 800ffe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	3b01      	subs	r3, #1
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fffc:	e011      	b.n	8010022 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fffe:	f7fd fb69 	bl	800d6d4 <HAL_GetTick>
 8010002:	4602      	mov	r2, r0
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	429a      	cmp	r2, r3
 801000c:	d803      	bhi.n	8010016 <HAL_SPI_Receive+0x156>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010014:	d102      	bne.n	801001c <HAL_SPI_Receive+0x15c>
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d102      	bne.n	8010022 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 801001c:	2303      	movs	r3, #3
 801001e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010020:	e04a      	b.n	80100b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010026:	b29b      	uxth	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	d1cb      	bne.n	800ffc4 <HAL_SPI_Receive+0x104>
 801002c:	e031      	b.n	8010092 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b01      	cmp	r3, #1
 801003a:	d113      	bne.n	8010064 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	68da      	ldr	r2, [r3, #12]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010046:	b292      	uxth	r2, r2
 8010048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801004e:	1c9a      	adds	r2, r3, #2
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010058:	b29b      	uxth	r3, r3
 801005a:	3b01      	subs	r3, #1
 801005c:	b29a      	uxth	r2, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010062:	e011      	b.n	8010088 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010064:	f7fd fb36 	bl	800d6d4 <HAL_GetTick>
 8010068:	4602      	mov	r2, r0
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d803      	bhi.n	801007c <HAL_SPI_Receive+0x1bc>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007a:	d102      	bne.n	8010082 <HAL_SPI_Receive+0x1c2>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8010082:	2303      	movs	r3, #3
 8010084:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010086:	e017      	b.n	80100b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801008c:	b29b      	uxth	r3, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1cd      	bne.n	801002e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f000 fa27 	bl	80104ea <SPI_EndRxTransaction>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2220      	movs	r2, #32
 80100a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	75fb      	strb	r3, [r7, #23]
 80100b4:	e000      	b.n	80100b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80100b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2201      	movs	r2, #1
 80100bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80100c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b08c      	sub	sp, #48	; 0x30
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	60f8      	str	r0, [r7, #12]
 80100da:	60b9      	str	r1, [r7, #8]
 80100dc:	607a      	str	r2, [r7, #4]
 80100de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80100e0:	2301      	movs	r3, #1
 80100e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80100e4:	2300      	movs	r3, #0
 80100e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d101      	bne.n	80100f8 <HAL_SPI_TransmitReceive+0x26>
 80100f4:	2302      	movs	r3, #2
 80100f6:	e18a      	b.n	801040e <HAL_SPI_TransmitReceive+0x33c>
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010100:	f7fd fae8 	bl	800d6d4 <HAL_GetTick>
 8010104:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801010c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010116:	887b      	ldrh	r3, [r7, #2]
 8010118:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801011a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801011e:	2b01      	cmp	r3, #1
 8010120:	d00f      	beq.n	8010142 <HAL_SPI_TransmitReceive+0x70>
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010128:	d107      	bne.n	801013a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d103      	bne.n	801013a <HAL_SPI_TransmitReceive+0x68>
 8010132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010136:	2b04      	cmp	r3, #4
 8010138:	d003      	beq.n	8010142 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801013a:	2302      	movs	r3, #2
 801013c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010140:	e15b      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d005      	beq.n	8010154 <HAL_SPI_TransmitReceive+0x82>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d002      	beq.n	8010154 <HAL_SPI_TransmitReceive+0x82>
 801014e:	887b      	ldrh	r3, [r7, #2]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d103      	bne.n	801015c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010154:	2301      	movs	r3, #1
 8010156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801015a:	e14e      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010162:	b2db      	uxtb	r3, r3
 8010164:	2b04      	cmp	r3, #4
 8010166:	d003      	beq.n	8010170 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2205      	movs	r2, #5
 801016c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2200      	movs	r2, #0
 8010174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	887a      	ldrh	r2, [r7, #2]
 8010180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	887a      	ldrh	r2, [r7, #2]
 8010186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	887a      	ldrh	r2, [r7, #2]
 8010192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	887a      	ldrh	r2, [r7, #2]
 8010198:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2200      	movs	r2, #0
 801019e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101b0:	2b40      	cmp	r3, #64	; 0x40
 80101b2:	d007      	beq.n	80101c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101cc:	d178      	bne.n	80102c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <HAL_SPI_TransmitReceive+0x10a>
 80101d6:	8b7b      	ldrh	r3, [r7, #26]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d166      	bne.n	80102aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e0:	881a      	ldrh	r2, [r3, #0]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ec:	1c9a      	adds	r2, r3, #2
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	3b01      	subs	r3, #1
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010200:	e053      	b.n	80102aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	f003 0302 	and.w	r3, r3, #2
 801020c:	2b02      	cmp	r3, #2
 801020e:	d11b      	bne.n	8010248 <HAL_SPI_TransmitReceive+0x176>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010214:	b29b      	uxth	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d016      	beq.n	8010248 <HAL_SPI_TransmitReceive+0x176>
 801021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021c:	2b01      	cmp	r3, #1
 801021e:	d113      	bne.n	8010248 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010224:	881a      	ldrh	r2, [r3, #0]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010230:	1c9a      	adds	r2, r3, #2
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801023a:	b29b      	uxth	r3, r3
 801023c:	3b01      	subs	r3, #1
 801023e:	b29a      	uxth	r2, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010244:	2300      	movs	r3, #0
 8010246:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b01      	cmp	r3, #1
 8010254:	d119      	bne.n	801028a <HAL_SPI_TransmitReceive+0x1b8>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801025a:	b29b      	uxth	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d014      	beq.n	801028a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	68da      	ldr	r2, [r3, #12]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801026a:	b292      	uxth	r2, r2
 801026c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010272:	1c9a      	adds	r2, r3, #2
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801027c:	b29b      	uxth	r3, r3
 801027e:	3b01      	subs	r3, #1
 8010280:	b29a      	uxth	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010286:	2301      	movs	r3, #1
 8010288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801028a:	f7fd fa23 	bl	800d6d4 <HAL_GetTick>
 801028e:	4602      	mov	r2, r0
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010296:	429a      	cmp	r2, r3
 8010298:	d807      	bhi.n	80102aa <HAL_SPI_TransmitReceive+0x1d8>
 801029a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a0:	d003      	beq.n	80102aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80102a8:	e0a7      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1a6      	bne.n	8010202 <HAL_SPI_TransmitReceive+0x130>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1a1      	bne.n	8010202 <HAL_SPI_TransmitReceive+0x130>
 80102be:	e07c      	b.n	80103ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <HAL_SPI_TransmitReceive+0x1fc>
 80102c8:	8b7b      	ldrh	r3, [r7, #26]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d16b      	bne.n	80103a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	330c      	adds	r3, #12
 80102d8:	7812      	ldrb	r2, [r2, #0]
 80102da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e0:	1c5a      	adds	r2, r3, #1
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	3b01      	subs	r3, #1
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102f4:	e057      	b.n	80103a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	f003 0302 	and.w	r3, r3, #2
 8010300:	2b02      	cmp	r3, #2
 8010302:	d11c      	bne.n	801033e <HAL_SPI_TransmitReceive+0x26c>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010308:	b29b      	uxth	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d017      	beq.n	801033e <HAL_SPI_TransmitReceive+0x26c>
 801030e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010310:	2b01      	cmp	r3, #1
 8010312:	d114      	bne.n	801033e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	330c      	adds	r3, #12
 801031e:	7812      	ldrb	r2, [r2, #0]
 8010320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010330:	b29b      	uxth	r3, r3
 8010332:	3b01      	subs	r3, #1
 8010334:	b29a      	uxth	r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801033a:	2300      	movs	r3, #0
 801033c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b01      	cmp	r3, #1
 801034a:	d119      	bne.n	8010380 <HAL_SPI_TransmitReceive+0x2ae>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010350:	b29b      	uxth	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d014      	beq.n	8010380 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	68da      	ldr	r2, [r3, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010360:	b2d2      	uxtb	r2, r2
 8010362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010372:	b29b      	uxth	r3, r3
 8010374:	3b01      	subs	r3, #1
 8010376:	b29a      	uxth	r2, r3
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801037c:	2301      	movs	r3, #1
 801037e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010380:	f7fd f9a8 	bl	800d6d4 <HAL_GetTick>
 8010384:	4602      	mov	r2, r0
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038c:	429a      	cmp	r2, r3
 801038e:	d803      	bhi.n	8010398 <HAL_SPI_TransmitReceive+0x2c6>
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010396:	d102      	bne.n	801039e <HAL_SPI_TransmitReceive+0x2cc>
 8010398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039a:	2b00      	cmp	r3, #0
 801039c:	d103      	bne.n	80103a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801039e:	2303      	movs	r3, #3
 80103a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80103a4:	e029      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1a2      	bne.n	80102f6 <HAL_SPI_TransmitReceive+0x224>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d19d      	bne.n	80102f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80103ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f000 f8f8 	bl	80105b4 <SPI_EndRxTxTransaction>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d006      	beq.n	80103d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80103ca:	2301      	movs	r3, #1
 80103cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2220      	movs	r2, #32
 80103d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80103d6:	e010      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10b      	bne.n	80103f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80103e0:	2300      	movs	r3, #0
 80103e2:	617b      	str	r3, [r7, #20]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	617b      	str	r3, [r7, #20]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	617b      	str	r3, [r7, #20]
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	e000      	b.n	80103fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80103f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801040a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801040e:	4618      	mov	r0, r3
 8010410:	3730      	adds	r7, #48	; 0x30
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b084      	sub	sp, #16
 801041a:	af00      	add	r7, sp, #0
 801041c:	60f8      	str	r0, [r7, #12]
 801041e:	60b9      	str	r1, [r7, #8]
 8010420:	603b      	str	r3, [r7, #0]
 8010422:	4613      	mov	r3, r2
 8010424:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010426:	e04c      	b.n	80104c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042e:	d048      	beq.n	80104c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010430:	f7fd f950 	bl	800d6d4 <HAL_GetTick>
 8010434:	4602      	mov	r2, r0
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	683a      	ldr	r2, [r7, #0]
 801043c:	429a      	cmp	r2, r3
 801043e:	d902      	bls.n	8010446 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d13d      	bne.n	80104c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	685a      	ldr	r2, [r3, #4]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801045e:	d111      	bne.n	8010484 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010468:	d004      	beq.n	8010474 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010472:	d107      	bne.n	8010484 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801048c:	d10f      	bne.n	80104ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80104ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80104be:	2303      	movs	r3, #3
 80104c0:	e00f      	b.n	80104e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	689a      	ldr	r2, [r3, #8]
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	4013      	ands	r3, r2
 80104cc:	68ba      	ldr	r2, [r7, #8]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	bf0c      	ite	eq
 80104d2:	2301      	moveq	r3, #1
 80104d4:	2300      	movne	r3, #0
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	461a      	mov	r2, r3
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d1a3      	bne.n	8010428 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b086      	sub	sp, #24
 80104ee:	af02      	add	r7, sp, #8
 80104f0:	60f8      	str	r0, [r7, #12]
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104fe:	d111      	bne.n	8010524 <SPI_EndRxTransaction+0x3a>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010508:	d004      	beq.n	8010514 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010512:	d107      	bne.n	8010524 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010522:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801052c:	d12a      	bne.n	8010584 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010536:	d012      	beq.n	801055e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	2200      	movs	r2, #0
 8010540:	2180      	movs	r1, #128	; 0x80
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f7ff ff67 	bl	8010416 <SPI_WaitFlagStateUntilTimeout>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d02d      	beq.n	80105aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010552:	f043 0220 	orr.w	r2, r3, #32
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801055a:	2303      	movs	r3, #3
 801055c:	e026      	b.n	80105ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	2200      	movs	r2, #0
 8010566:	2101      	movs	r1, #1
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7ff ff54 	bl	8010416 <SPI_WaitFlagStateUntilTimeout>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d01a      	beq.n	80105aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010578:	f043 0220 	orr.w	r2, r3, #32
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010580:	2303      	movs	r3, #3
 8010582:	e013      	b.n	80105ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2200      	movs	r2, #0
 801058c:	2101      	movs	r1, #1
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff ff41 	bl	8010416 <SPI_WaitFlagStateUntilTimeout>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d007      	beq.n	80105aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801059e:	f043 0220 	orr.w	r2, r3, #32
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80105a6:	2303      	movs	r3, #3
 80105a8:	e000      	b.n	80105ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b088      	sub	sp, #32
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80105c0:	4b1b      	ldr	r3, [pc, #108]	; (8010630 <SPI_EndRxTxTransaction+0x7c>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4a1b      	ldr	r2, [pc, #108]	; (8010634 <SPI_EndRxTxTransaction+0x80>)
 80105c6:	fba2 2303 	umull	r2, r3, r2, r3
 80105ca:	0d5b      	lsrs	r3, r3, #21
 80105cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80105d0:	fb02 f303 	mul.w	r3, r2, r3
 80105d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105de:	d112      	bne.n	8010606 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2200      	movs	r2, #0
 80105e8:	2180      	movs	r1, #128	; 0x80
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7ff ff13 	bl	8010416 <SPI_WaitFlagStateUntilTimeout>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d016      	beq.n	8010624 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105fa:	f043 0220 	orr.w	r2, r3, #32
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010602:	2303      	movs	r3, #3
 8010604:	e00f      	b.n	8010626 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00a      	beq.n	8010622 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	3b01      	subs	r3, #1
 8010610:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801061c:	2b80      	cmp	r3, #128	; 0x80
 801061e:	d0f2      	beq.n	8010606 <SPI_EndRxTxTransaction+0x52>
 8010620:	e000      	b.n	8010624 <SPI_EndRxTxTransaction+0x70>
        break;
 8010622:	bf00      	nop
  }

  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3718      	adds	r7, #24
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	20000004 	.word	0x20000004
 8010634:	165e9f81 	.word	0x165e9f81

08010638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010646:	2301      	movs	r3, #1
 8010648:	e01d      	b.n	8010686 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7fc f87c 	bl	800c75c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2202      	movs	r2, #2
 8010668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3304      	adds	r3, #4
 8010674:	4619      	mov	r1, r3
 8010676:	4610      	mov	r0, r2
 8010678:	f000 fe3e 	bl	80112f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2201      	movs	r2, #1
 8010680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801068e:	b480      	push	{r7}
 8010690:	b085      	sub	sp, #20
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	68da      	ldr	r2, [r3, #12]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f042 0201 	orr.w	r2, r2, #1
 80106a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	f003 0307 	and.w	r3, r3, #7
 80106b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b06      	cmp	r3, #6
 80106b6:	d007      	beq.n	80106c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f042 0201 	orr.w	r2, r2, #1
 80106c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b083      	sub	sp, #12
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68da      	ldr	r2, [r3, #12]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f022 0201 	bic.w	r2, r2, #1
 80106ec:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6a1a      	ldr	r2, [r3, #32]
 80106f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80106f8:	4013      	ands	r3, r2
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d10f      	bne.n	801071e <HAL_TIM_Base_Stop_IT+0x48>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	6a1a      	ldr	r2, [r3, #32]
 8010704:	f240 4344 	movw	r3, #1092	; 0x444
 8010708:	4013      	ands	r3, r2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d107      	bne.n	801071e <HAL_TIM_Base_Stop_IT+0x48>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f022 0201 	bic.w	r2, r2, #1
 801071c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d101      	bne.n	801073e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801073a:	2301      	movs	r3, #1
 801073c:	e01d      	b.n	801077a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010744:	b2db      	uxtb	r3, r3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f815 	bl	8010782 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2202      	movs	r2, #2
 801075c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3304      	adds	r3, #4
 8010768:	4619      	mov	r1, r3
 801076a:	4610      	mov	r0, r2
 801076c:	f000 fdc4 	bl	80112f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2201      	movs	r2, #1
 8010774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8010782:	b480      	push	{r7}
 8010784:	b083      	sub	sp, #12
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801078a:	bf00      	nop
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr
	...

08010798 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	2b0c      	cmp	r3, #12
 80107a6:	d841      	bhi.n	801082c <HAL_TIM_OC_Start_IT+0x94>
 80107a8:	a201      	add	r2, pc, #4	; (adr r2, 80107b0 <HAL_TIM_OC_Start_IT+0x18>)
 80107aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ae:	bf00      	nop
 80107b0:	080107e5 	.word	0x080107e5
 80107b4:	0801082d 	.word	0x0801082d
 80107b8:	0801082d 	.word	0x0801082d
 80107bc:	0801082d 	.word	0x0801082d
 80107c0:	080107f7 	.word	0x080107f7
 80107c4:	0801082d 	.word	0x0801082d
 80107c8:	0801082d 	.word	0x0801082d
 80107cc:	0801082d 	.word	0x0801082d
 80107d0:	08010809 	.word	0x08010809
 80107d4:	0801082d 	.word	0x0801082d
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	0801082d 	.word	0x0801082d
 80107e0:	0801081b 	.word	0x0801081b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	68da      	ldr	r2, [r3, #12]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f042 0202 	orr.w	r2, r2, #2
 80107f2:	60da      	str	r2, [r3, #12]
      break;
 80107f4:	e01b      	b.n	801082e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68da      	ldr	r2, [r3, #12]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f042 0204 	orr.w	r2, r2, #4
 8010804:	60da      	str	r2, [r3, #12]
      break;
 8010806:	e012      	b.n	801082e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68da      	ldr	r2, [r3, #12]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f042 0208 	orr.w	r2, r2, #8
 8010816:	60da      	str	r2, [r3, #12]
      break;
 8010818:	e009      	b.n	801082e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	68da      	ldr	r2, [r3, #12]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f042 0210 	orr.w	r2, r2, #16
 8010828:	60da      	str	r2, [r3, #12]
      break;
 801082a:	e000      	b.n	801082e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 801082c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2201      	movs	r2, #1
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	4618      	mov	r0, r3
 8010838:	f001 f848 	bl	80118cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a15      	ldr	r2, [pc, #84]	; (8010898 <HAL_TIM_OC_Start_IT+0x100>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d004      	beq.n	8010850 <HAL_TIM_OC_Start_IT+0xb8>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a14      	ldr	r2, [pc, #80]	; (801089c <HAL_TIM_OC_Start_IT+0x104>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d101      	bne.n	8010854 <HAL_TIM_OC_Start_IT+0xbc>
 8010850:	2301      	movs	r3, #1
 8010852:	e000      	b.n	8010856 <HAL_TIM_OC_Start_IT+0xbe>
 8010854:	2300      	movs	r3, #0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d007      	beq.n	801086a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	f003 0307 	and.w	r3, r3, #7
 8010874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2b06      	cmp	r3, #6
 801087a:	d007      	beq.n	801088c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f042 0201 	orr.w	r2, r2, #1
 801088a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	40010000 	.word	0x40010000
 801089c:	40010400 	.word	0x40010400

080108a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2b0c      	cmp	r3, #12
 80108ae:	d841      	bhi.n	8010934 <HAL_TIM_OC_Stop_IT+0x94>
 80108b0:	a201      	add	r2, pc, #4	; (adr r2, 80108b8 <HAL_TIM_OC_Stop_IT+0x18>)
 80108b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b6:	bf00      	nop
 80108b8:	080108ed 	.word	0x080108ed
 80108bc:	08010935 	.word	0x08010935
 80108c0:	08010935 	.word	0x08010935
 80108c4:	08010935 	.word	0x08010935
 80108c8:	080108ff 	.word	0x080108ff
 80108cc:	08010935 	.word	0x08010935
 80108d0:	08010935 	.word	0x08010935
 80108d4:	08010935 	.word	0x08010935
 80108d8:	08010911 	.word	0x08010911
 80108dc:	08010935 	.word	0x08010935
 80108e0:	08010935 	.word	0x08010935
 80108e4:	08010935 	.word	0x08010935
 80108e8:	08010923 	.word	0x08010923
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68da      	ldr	r2, [r3, #12]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f022 0202 	bic.w	r2, r2, #2
 80108fa:	60da      	str	r2, [r3, #12]
      break;
 80108fc:	e01b      	b.n	8010936 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	68da      	ldr	r2, [r3, #12]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f022 0204 	bic.w	r2, r2, #4
 801090c:	60da      	str	r2, [r3, #12]
      break;
 801090e:	e012      	b.n	8010936 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f022 0208 	bic.w	r2, r2, #8
 801091e:	60da      	str	r2, [r3, #12]
      break;
 8010920:	e009      	b.n	8010936 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68da      	ldr	r2, [r3, #12]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f022 0210 	bic.w	r2, r2, #16
 8010930:	60da      	str	r2, [r3, #12]
      break;
 8010932:	e000      	b.n	8010936 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8010934:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2200      	movs	r2, #0
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	4618      	mov	r0, r3
 8010940:	f000 ffc4 	bl	80118cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a20      	ldr	r2, [pc, #128]	; (80109cc <HAL_TIM_OC_Stop_IT+0x12c>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d004      	beq.n	8010958 <HAL_TIM_OC_Stop_IT+0xb8>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a1f      	ldr	r2, [pc, #124]	; (80109d0 <HAL_TIM_OC_Stop_IT+0x130>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d101      	bne.n	801095c <HAL_TIM_OC_Stop_IT+0xbc>
 8010958:	2301      	movs	r3, #1
 801095a:	e000      	b.n	801095e <HAL_TIM_OC_Stop_IT+0xbe>
 801095c:	2300      	movs	r3, #0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d017      	beq.n	8010992 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	6a1a      	ldr	r2, [r3, #32]
 8010968:	f241 1311 	movw	r3, #4369	; 0x1111
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10f      	bne.n	8010992 <HAL_TIM_OC_Stop_IT+0xf2>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6a1a      	ldr	r2, [r3, #32]
 8010978:	f240 4344 	movw	r3, #1092	; 0x444
 801097c:	4013      	ands	r3, r2
 801097e:	2b00      	cmp	r3, #0
 8010980:	d107      	bne.n	8010992 <HAL_TIM_OC_Stop_IT+0xf2>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6a1a      	ldr	r2, [r3, #32]
 8010998:	f241 1311 	movw	r3, #4369	; 0x1111
 801099c:	4013      	ands	r3, r2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d10f      	bne.n	80109c2 <HAL_TIM_OC_Stop_IT+0x122>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6a1a      	ldr	r2, [r3, #32]
 80109a8:	f240 4344 	movw	r3, #1092	; 0x444
 80109ac:	4013      	ands	r3, r2
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d107      	bne.n	80109c2 <HAL_TIM_OC_Stop_IT+0x122>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f022 0201 	bic.w	r2, r2, #1
 80109c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	40010000 	.word	0x40010000
 80109d0:	40010400 	.word	0x40010400

080109d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d101      	bne.n	80109e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	e01d      	b.n	8010a22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f815 	bl	8010a2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2202      	movs	r2, #2
 8010a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	3304      	adds	r3, #4
 8010a10:	4619      	mov	r1, r3
 8010a12:	4610      	mov	r0, r2
 8010a14:	f000 fc70 	bl	80112f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010a2a:	b480      	push	{r7}
 8010a2c:	b083      	sub	sp, #12
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010a32:	bf00      	nop
 8010a34:	370c      	adds	r7, #12
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
	...

08010a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 ff3a 	bl	80118cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a15      	ldr	r2, [pc, #84]	; (8010ab4 <HAL_TIM_PWM_Start+0x74>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d004      	beq.n	8010a6c <HAL_TIM_PWM_Start+0x2c>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4a14      	ldr	r2, [pc, #80]	; (8010ab8 <HAL_TIM_PWM_Start+0x78>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d101      	bne.n	8010a70 <HAL_TIM_PWM_Start+0x30>
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e000      	b.n	8010a72 <HAL_TIM_PWM_Start+0x32>
 8010a70:	2300      	movs	r3, #0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d007      	beq.n	8010a86 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	f003 0307 	and.w	r3, r3, #7
 8010a90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2b06      	cmp	r3, #6
 8010a96:	d007      	beq.n	8010aa8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f042 0201 	orr.w	r2, r2, #1
 8010aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	40010000 	.word	0x40010000
 8010ab8:	40010400 	.word	0x40010400

08010abc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010acc:	2301      	movs	r3, #1
 8010ace:	e083      	b.n	8010bd8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d106      	bne.n	8010aea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7fb fec9 	bl	800c87c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2202      	movs	r2, #2
 8010aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	6812      	ldr	r2, [r2, #0]
 8010afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b00:	f023 0307 	bic.w	r3, r3, #7
 8010b04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	4619      	mov	r1, r3
 8010b10:	4610      	mov	r0, r2
 8010b12:	f000 fbf1 	bl	80112f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	699b      	ldr	r3, [r3, #24]
 8010b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6a1b      	ldr	r3, [r3, #32]
 8010b2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	697a      	ldr	r2, [r7, #20]
 8010b34:	4313      	orrs	r3, r2
 8010b36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b3e:	f023 0303 	bic.w	r3, r3, #3
 8010b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	689a      	ldr	r2, [r3, #8]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	021b      	lsls	r3, r3, #8
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	693a      	ldr	r2, [r7, #16]
 8010b52:	4313      	orrs	r3, r2
 8010b54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010b5c:	f023 030c 	bic.w	r3, r3, #12
 8010b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	69db      	ldr	r3, [r3, #28]
 8010b76:	021b      	lsls	r3, r3, #8
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	693a      	ldr	r2, [r7, #16]
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	011a      	lsls	r2, r3, #4
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	031b      	lsls	r3, r3, #12
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	693a      	ldr	r2, [r7, #16]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010b9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010ba2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	695b      	ldr	r3, [r3, #20]
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	693a      	ldr	r2, [r7, #16]
 8010bc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3718      	adds	r7, #24
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <HAL_TIM_Encoder_Start+0x16>
 8010bf0:	2b04      	cmp	r3, #4
 8010bf2:	d008      	beq.n	8010c06 <HAL_TIM_Encoder_Start+0x26>
 8010bf4:	e00f      	b.n	8010c16 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 fe64 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010c04:	e016      	b.n	8010c34 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	2104      	movs	r1, #4
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 fe5c 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010c14:	e00e      	b.n	8010c34 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 fe54 	bl	80118cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	2104      	movs	r1, #4
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 fe4d 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010c32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f042 0201 	orr.w	r2, r2, #1
 8010c42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d002      	beq.n	8010c64 <HAL_TIM_Encoder_Stop+0x16>
 8010c5e:	2b04      	cmp	r3, #4
 8010c60:	d008      	beq.n	8010c74 <HAL_TIM_Encoder_Stop+0x26>
 8010c62:	e00f      	b.n	8010c84 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f000 fe2d 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010c72:	e016      	b.n	8010ca2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	2104      	movs	r1, #4
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 fe25 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010c82:	e00e      	b.n	8010ca2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 fe1d 	bl	80118cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2200      	movs	r2, #0
 8010c98:	2104      	movs	r1, #4
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 fe16 	bl	80118cc <TIM_CCxChannelCmd>
      break;
 8010ca0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6a1a      	ldr	r2, [r3, #32]
 8010ca8:	f241 1311 	movw	r3, #4369	; 0x1111
 8010cac:	4013      	ands	r3, r2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d10f      	bne.n	8010cd2 <HAL_TIM_Encoder_Stop+0x84>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	6a1a      	ldr	r2, [r3, #32]
 8010cb8:	f240 4344 	movw	r3, #1092	; 0x444
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d107      	bne.n	8010cd2 <HAL_TIM_Encoder_Stop+0x84>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f022 0201 	bic.w	r2, r2, #1
 8010cd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	f003 0302 	and.w	r3, r3, #2
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	d122      	bne.n	8010d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	f003 0302 	and.w	r3, r3, #2
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d11b      	bne.n	8010d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f06f 0202 	mvn.w	r2, #2
 8010d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	699b      	ldr	r3, [r3, #24]
 8010d16:	f003 0303 	and.w	r3, r3, #3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d003      	beq.n	8010d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 facb 	bl	80112ba <HAL_TIM_IC_CaptureCallback>
 8010d24:	e005      	b.n	8010d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 fabd 	bl	80112a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 face 	bl	80112ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	f003 0304 	and.w	r3, r3, #4
 8010d42:	2b04      	cmp	r3, #4
 8010d44:	d122      	bne.n	8010d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	f003 0304 	and.w	r3, r3, #4
 8010d50:	2b04      	cmp	r3, #4
 8010d52:	d11b      	bne.n	8010d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f06f 0204 	mvn.w	r2, #4
 8010d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2202      	movs	r2, #2
 8010d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 faa1 	bl	80112ba <HAL_TIM_IC_CaptureCallback>
 8010d78:	e005      	b.n	8010d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 fa93 	bl	80112a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f000 faa4 	bl	80112ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	f003 0308 	and.w	r3, r3, #8
 8010d96:	2b08      	cmp	r3, #8
 8010d98:	d122      	bne.n	8010de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	f003 0308 	and.w	r3, r3, #8
 8010da4:	2b08      	cmp	r3, #8
 8010da6:	d11b      	bne.n	8010de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f06f 0208 	mvn.w	r2, #8
 8010db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2204      	movs	r2, #4
 8010db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d003      	beq.n	8010dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 fa77 	bl	80112ba <HAL_TIM_IC_CaptureCallback>
 8010dcc:	e005      	b.n	8010dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 fa69 	bl	80112a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 fa7a 	bl	80112ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	f003 0310 	and.w	r3, r3, #16
 8010dea:	2b10      	cmp	r3, #16
 8010dec:	d122      	bne.n	8010e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	f003 0310 	and.w	r3, r3, #16
 8010df8:	2b10      	cmp	r3, #16
 8010dfa:	d11b      	bne.n	8010e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f06f 0210 	mvn.w	r2, #16
 8010e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2208      	movs	r2, #8
 8010e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	69db      	ldr	r3, [r3, #28]
 8010e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d003      	beq.n	8010e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fa4d 	bl	80112ba <HAL_TIM_IC_CaptureCallback>
 8010e20:	e005      	b.n	8010e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa3f 	bl	80112a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 fa50 	bl	80112ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	691b      	ldr	r3, [r3, #16]
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d10e      	bne.n	8010e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d107      	bne.n	8010e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f06f 0201 	mvn.w	r2, #1
 8010e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f7f9 fb4a 	bl	800a4f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e6a:	2b80      	cmp	r3, #128	; 0x80
 8010e6c:	d10e      	bne.n	8010e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e78:	2b80      	cmp	r3, #128	; 0x80
 8010e7a:	d107      	bne.n	8010e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fee8 	bl	8011c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e96:	2b40      	cmp	r3, #64	; 0x40
 8010e98:	d10e      	bne.n	8010eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ea4:	2b40      	cmp	r3, #64	; 0x40
 8010ea6:	d107      	bne.n	8010eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 fa15 	bl	80112e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	f003 0320 	and.w	r3, r3, #32
 8010ec2:	2b20      	cmp	r3, #32
 8010ec4:	d10e      	bne.n	8010ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	f003 0320 	and.w	r3, r3, #32
 8010ed0:	2b20      	cmp	r3, #32
 8010ed2:	d107      	bne.n	8010ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f06f 0220 	mvn.w	r2, #32
 8010edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 feb2 	bl	8011c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d101      	bne.n	8010f06 <HAL_TIM_OC_ConfigChannel+0x1a>
 8010f02:	2302      	movs	r3, #2
 8010f04:	e04e      	b.n	8010fa4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2202      	movs	r2, #2
 8010f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b0c      	cmp	r3, #12
 8010f1a:	d839      	bhi.n	8010f90 <HAL_TIM_OC_ConfigChannel+0xa4>
 8010f1c:	a201      	add	r2, pc, #4	; (adr r2, 8010f24 <HAL_TIM_OC_ConfigChannel+0x38>)
 8010f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f22:	bf00      	nop
 8010f24:	08010f59 	.word	0x08010f59
 8010f28:	08010f91 	.word	0x08010f91
 8010f2c:	08010f91 	.word	0x08010f91
 8010f30:	08010f91 	.word	0x08010f91
 8010f34:	08010f67 	.word	0x08010f67
 8010f38:	08010f91 	.word	0x08010f91
 8010f3c:	08010f91 	.word	0x08010f91
 8010f40:	08010f91 	.word	0x08010f91
 8010f44:	08010f75 	.word	0x08010f75
 8010f48:	08010f91 	.word	0x08010f91
 8010f4c:	08010f91 	.word	0x08010f91
 8010f50:	08010f91 	.word	0x08010f91
 8010f54:	08010f83 	.word	0x08010f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	68b9      	ldr	r1, [r7, #8]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f000 fa6a 	bl	8011438 <TIM_OC1_SetConfig>
      break;
 8010f64:	e015      	b.n	8010f92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68b9      	ldr	r1, [r7, #8]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 fad3 	bl	8011518 <TIM_OC2_SetConfig>
      break;
 8010f72:	e00e      	b.n	8010f92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	68b9      	ldr	r1, [r7, #8]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f000 fb42 	bl	8011604 <TIM_OC3_SetConfig>
      break;
 8010f80:	e007      	b.n	8010f92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	68b9      	ldr	r1, [r7, #8]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f000 fbaf 	bl	80116ec <TIM_OC4_SetConfig>
      break;
 8010f8e:	e000      	b.n	8010f92 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8010f90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2201      	movs	r2, #1
 8010f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d101      	bne.n	8010fc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010fc2:	2302      	movs	r3, #2
 8010fc4:	e0b4      	b.n	8011130 <HAL_TIM_PWM_ConfigChannel+0x184>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2202      	movs	r2, #2
 8010fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b0c      	cmp	r3, #12
 8010fda:	f200 809f 	bhi.w	801111c <HAL_TIM_PWM_ConfigChannel+0x170>
 8010fde:	a201      	add	r2, pc, #4	; (adr r2, 8010fe4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe4:	08011019 	.word	0x08011019
 8010fe8:	0801111d 	.word	0x0801111d
 8010fec:	0801111d 	.word	0x0801111d
 8010ff0:	0801111d 	.word	0x0801111d
 8010ff4:	08011059 	.word	0x08011059
 8010ff8:	0801111d 	.word	0x0801111d
 8010ffc:	0801111d 	.word	0x0801111d
 8011000:	0801111d 	.word	0x0801111d
 8011004:	0801109b 	.word	0x0801109b
 8011008:	0801111d 	.word	0x0801111d
 801100c:	0801111d 	.word	0x0801111d
 8011010:	0801111d 	.word	0x0801111d
 8011014:	080110db 	.word	0x080110db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	4618      	mov	r0, r3
 8011020:	f000 fa0a 	bl	8011438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	699a      	ldr	r2, [r3, #24]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f042 0208 	orr.w	r2, r2, #8
 8011032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	699a      	ldr	r2, [r3, #24]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f022 0204 	bic.w	r2, r2, #4
 8011042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	6999      	ldr	r1, [r3, #24]
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	691a      	ldr	r2, [r3, #16]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	430a      	orrs	r2, r1
 8011054:	619a      	str	r2, [r3, #24]
      break;
 8011056:	e062      	b.n	801111e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68b9      	ldr	r1, [r7, #8]
 801105e:	4618      	mov	r0, r3
 8011060:	f000 fa5a 	bl	8011518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	699a      	ldr	r2, [r3, #24]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	699a      	ldr	r2, [r3, #24]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	6999      	ldr	r1, [r3, #24]
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	021a      	lsls	r2, r3, #8
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	430a      	orrs	r2, r1
 8011096:	619a      	str	r2, [r3, #24]
      break;
 8011098:	e041      	b.n	801111e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68b9      	ldr	r1, [r7, #8]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 faaf 	bl	8011604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	69da      	ldr	r2, [r3, #28]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f042 0208 	orr.w	r2, r2, #8
 80110b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	69da      	ldr	r2, [r3, #28]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f022 0204 	bic.w	r2, r2, #4
 80110c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	69d9      	ldr	r1, [r3, #28]
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	691a      	ldr	r2, [r3, #16]
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	430a      	orrs	r2, r1
 80110d6:	61da      	str	r2, [r3, #28]
      break;
 80110d8:	e021      	b.n	801111e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	68b9      	ldr	r1, [r7, #8]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 fb03 	bl	80116ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	69da      	ldr	r2, [r3, #28]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	69da      	ldr	r2, [r3, #28]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	69d9      	ldr	r1, [r3, #28]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	021a      	lsls	r2, r3, #8
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	430a      	orrs	r2, r1
 8011118:	61da      	str	r2, [r3, #28]
      break;
 801111a:	e000      	b.n	801111e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801111c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2201      	movs	r2, #1
 8011122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011148:	2b01      	cmp	r3, #1
 801114a:	d101      	bne.n	8011150 <HAL_TIM_ConfigClockSource+0x18>
 801114c:	2302      	movs	r3, #2
 801114e:	e0a6      	b.n	801129e <HAL_TIM_ConfigClockSource+0x166>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2201      	movs	r2, #1
 8011154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2202      	movs	r2, #2
 801115c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801116e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011176:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	68fa      	ldr	r2, [r7, #12]
 801117e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b40      	cmp	r3, #64	; 0x40
 8011186:	d067      	beq.n	8011258 <HAL_TIM_ConfigClockSource+0x120>
 8011188:	2b40      	cmp	r3, #64	; 0x40
 801118a:	d80b      	bhi.n	80111a4 <HAL_TIM_ConfigClockSource+0x6c>
 801118c:	2b10      	cmp	r3, #16
 801118e:	d073      	beq.n	8011278 <HAL_TIM_ConfigClockSource+0x140>
 8011190:	2b10      	cmp	r3, #16
 8011192:	d802      	bhi.n	801119a <HAL_TIM_ConfigClockSource+0x62>
 8011194:	2b00      	cmp	r3, #0
 8011196:	d06f      	beq.n	8011278 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8011198:	e078      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801119a:	2b20      	cmp	r3, #32
 801119c:	d06c      	beq.n	8011278 <HAL_TIM_ConfigClockSource+0x140>
 801119e:	2b30      	cmp	r3, #48	; 0x30
 80111a0:	d06a      	beq.n	8011278 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80111a2:	e073      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80111a4:	2b70      	cmp	r3, #112	; 0x70
 80111a6:	d00d      	beq.n	80111c4 <HAL_TIM_ConfigClockSource+0x8c>
 80111a8:	2b70      	cmp	r3, #112	; 0x70
 80111aa:	d804      	bhi.n	80111b6 <HAL_TIM_ConfigClockSource+0x7e>
 80111ac:	2b50      	cmp	r3, #80	; 0x50
 80111ae:	d033      	beq.n	8011218 <HAL_TIM_ConfigClockSource+0xe0>
 80111b0:	2b60      	cmp	r3, #96	; 0x60
 80111b2:	d041      	beq.n	8011238 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80111b4:	e06a      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80111b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111ba:	d066      	beq.n	801128a <HAL_TIM_ConfigClockSource+0x152>
 80111bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111c0:	d017      	beq.n	80111f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80111c2:	e063      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6818      	ldr	r0, [r3, #0]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	6899      	ldr	r1, [r3, #8]
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	685a      	ldr	r2, [r3, #4]
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	f000 fb5a 	bl	801188c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80111e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	609a      	str	r2, [r3, #8]
      break;
 80111f0:	e04c      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6818      	ldr	r0, [r3, #0]
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	6899      	ldr	r1, [r3, #8]
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	685a      	ldr	r2, [r3, #4]
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	f000 fb43 	bl	801188c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	689a      	ldr	r2, [r3, #8]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011214:	609a      	str	r2, [r3, #8]
      break;
 8011216:	e039      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6818      	ldr	r0, [r3, #0]
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	6859      	ldr	r1, [r3, #4]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	461a      	mov	r2, r3
 8011226:	f000 fab7 	bl	8011798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	2150      	movs	r1, #80	; 0x50
 8011230:	4618      	mov	r0, r3
 8011232:	f000 fb10 	bl	8011856 <TIM_ITRx_SetConfig>
      break;
 8011236:	e029      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6818      	ldr	r0, [r3, #0]
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	6859      	ldr	r1, [r3, #4]
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	461a      	mov	r2, r3
 8011246:	f000 fad6 	bl	80117f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2160      	movs	r1, #96	; 0x60
 8011250:	4618      	mov	r0, r3
 8011252:	f000 fb00 	bl	8011856 <TIM_ITRx_SetConfig>
      break;
 8011256:	e019      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6818      	ldr	r0, [r3, #0]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	6859      	ldr	r1, [r3, #4]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	461a      	mov	r2, r3
 8011266:	f000 fa97 	bl	8011798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2140      	movs	r1, #64	; 0x40
 8011270:	4618      	mov	r0, r3
 8011272:	f000 faf0 	bl	8011856 <TIM_ITRx_SetConfig>
      break;
 8011276:	e009      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4619      	mov	r1, r3
 8011282:	4610      	mov	r0, r2
 8011284:	f000 fae7 	bl	8011856 <TIM_ITRx_SetConfig>
      break;
 8011288:	e000      	b.n	801128c <HAL_TIM_ConfigClockSource+0x154>
      break;
 801128a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2200      	movs	r2, #0
 8011298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80112a6:	b480      	push	{r7}
 80112a8:	b083      	sub	sp, #12
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80112ae:	bf00      	nop
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80112ba:	b480      	push	{r7}
 80112bc:	b083      	sub	sp, #12
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80112c2:	bf00      	nop
 80112c4:	370c      	adds	r7, #12
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr

080112ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80112ce:	b480      	push	{r7}
 80112d0:	b083      	sub	sp, #12
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80112d6:	bf00      	nop
 80112d8:	370c      	adds	r7, #12
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80112e2:	b480      	push	{r7}
 80112e4:	b083      	sub	sp, #12
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80112ea:	bf00      	nop
 80112ec:	370c      	adds	r7, #12
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr
	...

080112f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	4a40      	ldr	r2, [pc, #256]	; (801140c <TIM_Base_SetConfig+0x114>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d013      	beq.n	8011338 <TIM_Base_SetConfig+0x40>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011316:	d00f      	beq.n	8011338 <TIM_Base_SetConfig+0x40>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a3d      	ldr	r2, [pc, #244]	; (8011410 <TIM_Base_SetConfig+0x118>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d00b      	beq.n	8011338 <TIM_Base_SetConfig+0x40>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4a3c      	ldr	r2, [pc, #240]	; (8011414 <TIM_Base_SetConfig+0x11c>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d007      	beq.n	8011338 <TIM_Base_SetConfig+0x40>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	4a3b      	ldr	r2, [pc, #236]	; (8011418 <TIM_Base_SetConfig+0x120>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d003      	beq.n	8011338 <TIM_Base_SetConfig+0x40>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4a3a      	ldr	r2, [pc, #232]	; (801141c <TIM_Base_SetConfig+0x124>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d108      	bne.n	801134a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801133e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	4313      	orrs	r3, r2
 8011348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4a2f      	ldr	r2, [pc, #188]	; (801140c <TIM_Base_SetConfig+0x114>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d02b      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011358:	d027      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4a2c      	ldr	r2, [pc, #176]	; (8011410 <TIM_Base_SetConfig+0x118>)
 801135e:	4293      	cmp	r3, r2
 8011360:	d023      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4a2b      	ldr	r2, [pc, #172]	; (8011414 <TIM_Base_SetConfig+0x11c>)
 8011366:	4293      	cmp	r3, r2
 8011368:	d01f      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	4a2a      	ldr	r2, [pc, #168]	; (8011418 <TIM_Base_SetConfig+0x120>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d01b      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4a29      	ldr	r2, [pc, #164]	; (801141c <TIM_Base_SetConfig+0x124>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d017      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4a28      	ldr	r2, [pc, #160]	; (8011420 <TIM_Base_SetConfig+0x128>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d013      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4a27      	ldr	r2, [pc, #156]	; (8011424 <TIM_Base_SetConfig+0x12c>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d00f      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4a26      	ldr	r2, [pc, #152]	; (8011428 <TIM_Base_SetConfig+0x130>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d00b      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4a25      	ldr	r2, [pc, #148]	; (801142c <TIM_Base_SetConfig+0x134>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d007      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a24      	ldr	r2, [pc, #144]	; (8011430 <TIM_Base_SetConfig+0x138>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d003      	beq.n	80113aa <TIM_Base_SetConfig+0xb2>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4a23      	ldr	r2, [pc, #140]	; (8011434 <TIM_Base_SetConfig+0x13c>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d108      	bne.n	80113bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	695b      	ldr	r3, [r3, #20]
 80113c6:	4313      	orrs	r3, r2
 80113c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	689a      	ldr	r2, [r3, #8]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4a0a      	ldr	r2, [pc, #40]	; (801140c <TIM_Base_SetConfig+0x114>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d003      	beq.n	80113f0 <TIM_Base_SetConfig+0xf8>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4a0c      	ldr	r2, [pc, #48]	; (801141c <TIM_Base_SetConfig+0x124>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d103      	bne.n	80113f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	691a      	ldr	r2, [r3, #16]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	615a      	str	r2, [r3, #20]
}
 80113fe:	bf00      	nop
 8011400:	3714      	adds	r7, #20
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	40010000 	.word	0x40010000
 8011410:	40000400 	.word	0x40000400
 8011414:	40000800 	.word	0x40000800
 8011418:	40000c00 	.word	0x40000c00
 801141c:	40010400 	.word	0x40010400
 8011420:	40014000 	.word	0x40014000
 8011424:	40014400 	.word	0x40014400
 8011428:	40014800 	.word	0x40014800
 801142c:	40001800 	.word	0x40001800
 8011430:	40001c00 	.word	0x40001c00
 8011434:	40002000 	.word	0x40002000

08011438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011438:	b480      	push	{r7}
 801143a:	b087      	sub	sp, #28
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	f023 0201 	bic.w	r2, r3, #1
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a1b      	ldr	r3, [r3, #32]
 8011452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	699b      	ldr	r3, [r3, #24]
 801145e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f023 0303 	bic.w	r3, r3, #3
 801146e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	4313      	orrs	r3, r2
 8011478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	f023 0302 	bic.w	r3, r3, #2
 8011480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	697a      	ldr	r2, [r7, #20]
 8011488:	4313      	orrs	r3, r2
 801148a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4a20      	ldr	r2, [pc, #128]	; (8011510 <TIM_OC1_SetConfig+0xd8>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d003      	beq.n	801149c <TIM_OC1_SetConfig+0x64>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4a1f      	ldr	r2, [pc, #124]	; (8011514 <TIM_OC1_SetConfig+0xdc>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d10c      	bne.n	80114b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	f023 0308 	bic.w	r3, r3, #8
 80114a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	697a      	ldr	r2, [r7, #20]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f023 0304 	bic.w	r3, r3, #4
 80114b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4a15      	ldr	r2, [pc, #84]	; (8011510 <TIM_OC1_SetConfig+0xd8>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d003      	beq.n	80114c6 <TIM_OC1_SetConfig+0x8e>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4a14      	ldr	r2, [pc, #80]	; (8011514 <TIM_OC1_SetConfig+0xdc>)
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d111      	bne.n	80114ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	693a      	ldr	r2, [r7, #16]
 80114dc:	4313      	orrs	r3, r2
 80114de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	699b      	ldr	r3, [r3, #24]
 80114e4:	693a      	ldr	r2, [r7, #16]
 80114e6:	4313      	orrs	r3, r2
 80114e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	693a      	ldr	r2, [r7, #16]
 80114ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	621a      	str	r2, [r3, #32]
}
 8011504:	bf00      	nop
 8011506:	371c      	adds	r7, #28
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	40010000 	.word	0x40010000
 8011514:	40010400 	.word	0x40010400

08011518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011518:	b480      	push	{r7}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a1b      	ldr	r3, [r3, #32]
 8011526:	f023 0210 	bic.w	r2, r3, #16
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a1b      	ldr	r3, [r3, #32]
 8011532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801154e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	021b      	lsls	r3, r3, #8
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	4313      	orrs	r3, r2
 801155a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	f023 0320 	bic.w	r3, r3, #32
 8011562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	011b      	lsls	r3, r3, #4
 801156a:	697a      	ldr	r2, [r7, #20]
 801156c:	4313      	orrs	r3, r2
 801156e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4a22      	ldr	r2, [pc, #136]	; (80115fc <TIM_OC2_SetConfig+0xe4>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d003      	beq.n	8011580 <TIM_OC2_SetConfig+0x68>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4a21      	ldr	r2, [pc, #132]	; (8011600 <TIM_OC2_SetConfig+0xe8>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d10d      	bne.n	801159c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	697a      	ldr	r2, [r7, #20]
 8011590:	4313      	orrs	r3, r2
 8011592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801159a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	4a17      	ldr	r2, [pc, #92]	; (80115fc <TIM_OC2_SetConfig+0xe4>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d003      	beq.n	80115ac <TIM_OC2_SetConfig+0x94>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a16      	ldr	r2, [pc, #88]	; (8011600 <TIM_OC2_SetConfig+0xe8>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d113      	bne.n	80115d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	695b      	ldr	r3, [r3, #20]
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	699b      	ldr	r3, [r3, #24]
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	693a      	ldr	r2, [r7, #16]
 80115d0:	4313      	orrs	r3, r2
 80115d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	693a      	ldr	r2, [r7, #16]
 80115d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	685a      	ldr	r2, [r3, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	697a      	ldr	r2, [r7, #20]
 80115ec:	621a      	str	r2, [r3, #32]
}
 80115ee:	bf00      	nop
 80115f0:	371c      	adds	r7, #28
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	40010000 	.word	0x40010000
 8011600:	40010400 	.word	0x40010400

08011604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011604:	b480      	push	{r7}
 8011606:	b087      	sub	sp, #28
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6a1b      	ldr	r3, [r3, #32]
 801161e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	69db      	ldr	r3, [r3, #28]
 801162a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f023 0303 	bic.w	r3, r3, #3
 801163a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	4313      	orrs	r3, r2
 8011644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801164c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	021b      	lsls	r3, r3, #8
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	4313      	orrs	r3, r2
 8011658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4a21      	ldr	r2, [pc, #132]	; (80116e4 <TIM_OC3_SetConfig+0xe0>)
 801165e:	4293      	cmp	r3, r2
 8011660:	d003      	beq.n	801166a <TIM_OC3_SetConfig+0x66>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4a20      	ldr	r2, [pc, #128]	; (80116e8 <TIM_OC3_SetConfig+0xe4>)
 8011666:	4293      	cmp	r3, r2
 8011668:	d10d      	bne.n	8011686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	021b      	lsls	r3, r3, #8
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	4313      	orrs	r3, r2
 801167c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a16      	ldr	r2, [pc, #88]	; (80116e4 <TIM_OC3_SetConfig+0xe0>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d003      	beq.n	8011696 <TIM_OC3_SetConfig+0x92>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a15      	ldr	r2, [pc, #84]	; (80116e8 <TIM_OC3_SetConfig+0xe4>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d113      	bne.n	80116be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801169c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	695b      	ldr	r3, [r3, #20]
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	693a      	ldr	r2, [r7, #16]
 80116ae:	4313      	orrs	r3, r2
 80116b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	699b      	ldr	r3, [r3, #24]
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	68fa      	ldr	r2, [r7, #12]
 80116c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	621a      	str	r2, [r3, #32]
}
 80116d8:	bf00      	nop
 80116da:	371c      	adds	r7, #28
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr
 80116e4:	40010000 	.word	0x40010000
 80116e8:	40010400 	.word	0x40010400

080116ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b087      	sub	sp, #28
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a1b      	ldr	r3, [r3, #32]
 8011706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801171a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	021b      	lsls	r3, r3, #8
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	4313      	orrs	r3, r2
 801172e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	031b      	lsls	r3, r3, #12
 801173e:	693a      	ldr	r2, [r7, #16]
 8011740:	4313      	orrs	r3, r2
 8011742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4a12      	ldr	r2, [pc, #72]	; (8011790 <TIM_OC4_SetConfig+0xa4>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d003      	beq.n	8011754 <TIM_OC4_SetConfig+0x68>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	4a11      	ldr	r2, [pc, #68]	; (8011794 <TIM_OC4_SetConfig+0xa8>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d109      	bne.n	8011768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801175a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	695b      	ldr	r3, [r3, #20]
 8011760:	019b      	lsls	r3, r3, #6
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	4313      	orrs	r3, r2
 8011766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	693a      	ldr	r2, [r7, #16]
 8011780:	621a      	str	r2, [r3, #32]
}
 8011782:	bf00      	nop
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	40010000 	.word	0x40010000
 8011794:	40010400 	.word	0x40010400

08011798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011798:	b480      	push	{r7}
 801179a:	b087      	sub	sp, #28
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6a1b      	ldr	r3, [r3, #32]
 80117a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6a1b      	ldr	r3, [r3, #32]
 80117ae:	f023 0201 	bic.w	r2, r3, #1
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	699b      	ldr	r3, [r3, #24]
 80117ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80117c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	011b      	lsls	r3, r3, #4
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	f023 030a 	bic.w	r3, r3, #10
 80117d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	4313      	orrs	r3, r2
 80117dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	693a      	ldr	r2, [r7, #16]
 80117e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	697a      	ldr	r2, [r7, #20]
 80117e8:	621a      	str	r2, [r3, #32]
}
 80117ea:	bf00      	nop
 80117ec:	371c      	adds	r7, #28
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b087      	sub	sp, #28
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	60b9      	str	r1, [r7, #8]
 8011800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6a1b      	ldr	r3, [r3, #32]
 8011806:	f023 0210 	bic.w	r2, r3, #16
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	699b      	ldr	r3, [r3, #24]
 8011812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6a1b      	ldr	r3, [r3, #32]
 8011818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	031b      	lsls	r3, r3, #12
 8011826:	697a      	ldr	r2, [r7, #20]
 8011828:	4313      	orrs	r3, r2
 801182a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	011b      	lsls	r3, r3, #4
 8011838:	693a      	ldr	r2, [r7, #16]
 801183a:	4313      	orrs	r3, r2
 801183c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	697a      	ldr	r2, [r7, #20]
 8011842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	693a      	ldr	r2, [r7, #16]
 8011848:	621a      	str	r2, [r3, #32]
}
 801184a:	bf00      	nop
 801184c:	371c      	adds	r7, #28
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr

08011856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011856:	b480      	push	{r7}
 8011858:	b085      	sub	sp, #20
 801185a:	af00      	add	r7, sp, #0
 801185c:	6078      	str	r0, [r7, #4]
 801185e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801186c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801186e:	683a      	ldr	r2, [r7, #0]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4313      	orrs	r3, r2
 8011874:	f043 0307 	orr.w	r3, r3, #7
 8011878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	609a      	str	r2, [r3, #8]
}
 8011880:	bf00      	nop
 8011882:	3714      	adds	r7, #20
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr

0801188c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801188c:	b480      	push	{r7}
 801188e:	b087      	sub	sp, #28
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
 8011898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80118a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	021a      	lsls	r2, r3, #8
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	431a      	orrs	r2, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	4313      	orrs	r3, r2
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	697a      	ldr	r2, [r7, #20]
 80118be:	609a      	str	r2, [r3, #8]
}
 80118c0:	bf00      	nop
 80118c2:	371c      	adds	r7, #28
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	f003 031f 	and.w	r3, r3, #31
 80118de:	2201      	movs	r2, #1
 80118e0:	fa02 f303 	lsl.w	r3, r2, r3
 80118e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6a1a      	ldr	r2, [r3, #32]
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	43db      	mvns	r3, r3
 80118ee:	401a      	ands	r2, r3
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6a1a      	ldr	r2, [r3, #32]
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	f003 031f 	and.w	r3, r3, #31
 80118fe:	6879      	ldr	r1, [r7, #4]
 8011900:	fa01 f303 	lsl.w	r3, r1, r3
 8011904:	431a      	orrs	r2, r3
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	621a      	str	r2, [r3, #32]
}
 801190a:	bf00      	nop
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b084      	sub	sp, #16
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2b04      	cmp	r3, #4
 8011924:	d00d      	beq.n	8011942 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8011926:	2b08      	cmp	r3, #8
 8011928:	d014      	beq.n	8011954 <HAL_TIMEx_OCN_Start_IT+0x3e>
 801192a:	2b00      	cmp	r3, #0
 801192c:	d000      	beq.n	8011930 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 801192e:	e01a      	b.n	8011966 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f042 0202 	orr.w	r2, r2, #2
 801193e:	60da      	str	r2, [r3, #12]
      break;
 8011940:	e011      	b.n	8011966 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	68da      	ldr	r2, [r3, #12]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f042 0204 	orr.w	r2, r2, #4
 8011950:	60da      	str	r2, [r3, #12]
      break;
 8011952:	e008      	b.n	8011966 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	68da      	ldr	r2, [r3, #12]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f042 0208 	orr.w	r2, r2, #8
 8011962:	60da      	str	r2, [r3, #12]
      break;
 8011964:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	68da      	ldr	r2, [r3, #12]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011974:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2204      	movs	r2, #4
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	4618      	mov	r0, r3
 8011980:	f000 f976 	bl	8011c70 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011992:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	f003 0307 	and.w	r3, r3, #7
 801199e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b06      	cmp	r3, #6
 80119a4:	d007      	beq.n	80119b6 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f042 0201 	orr.w	r2, r2, #1
 80119b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80119b6:	2300      	movs	r3, #0
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b04      	cmp	r3, #4
 80119ce:	d00d      	beq.n	80119ec <HAL_TIMEx_OCN_Stop_IT+0x2c>
 80119d0:	2b08      	cmp	r3, #8
 80119d2:	d014      	beq.n	80119fe <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d000      	beq.n	80119da <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80119d8:	e01a      	b.n	8011a10 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	68da      	ldr	r2, [r3, #12]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f022 0202 	bic.w	r2, r2, #2
 80119e8:	60da      	str	r2, [r3, #12]
      break;
 80119ea:	e011      	b.n	8011a10 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68da      	ldr	r2, [r3, #12]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f022 0204 	bic.w	r2, r2, #4
 80119fa:	60da      	str	r2, [r3, #12]
      break;
 80119fc:	e008      	b.n	8011a10 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	68da      	ldr	r2, [r3, #12]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f022 0208 	bic.w	r2, r2, #8
 8011a0c:	60da      	str	r2, [r3, #12]
      break;
 8011a0e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2200      	movs	r2, #0
 8011a16:	6839      	ldr	r1, [r7, #0]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f000 f929 	bl	8011c70 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	6a1b      	ldr	r3, [r3, #32]
 8011a24:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	f240 4344 	movw	r3, #1092	; 0x444
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d107      	bne.n	8011a42 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	68da      	ldr	r2, [r3, #12]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011a40:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	6a1a      	ldr	r2, [r3, #32]
 8011a48:	f241 1311 	movw	r3, #4369	; 0x1111
 8011a4c:	4013      	ands	r3, r2
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10f      	bne.n	8011a72 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	6a1a      	ldr	r2, [r3, #32]
 8011a58:	f240 4344 	movw	r3, #1092	; 0x444
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d107      	bne.n	8011a72 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011a70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	6a1a      	ldr	r2, [r3, #32]
 8011a78:	f241 1311 	movw	r3, #4369	; 0x1111
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d10f      	bne.n	8011aa2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6a1a      	ldr	r2, [r3, #32]
 8011a88:	f240 4344 	movw	r3, #1092	; 0x444
 8011a8c:	4013      	ands	r3, r2
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f022 0201 	bic.w	r2, r2, #1
 8011aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011aa2:	2300      	movs	r3, #0
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3710      	adds	r7, #16
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d101      	bne.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	e05a      	b.n	8011b7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2202      	movs	r2, #2
 8011ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	689b      	ldr	r3, [r3, #8]
 8011ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4a21      	ldr	r2, [pc, #132]	; (8011b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d022      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b10:	d01d      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	4a1d      	ldr	r2, [pc, #116]	; (8011b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	d018      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a1b      	ldr	r2, [pc, #108]	; (8011b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d013      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4a1a      	ldr	r2, [pc, #104]	; (8011b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d00e      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a18      	ldr	r2, [pc, #96]	; (8011b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d009      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a17      	ldr	r2, [pc, #92]	; (8011b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d004      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a15      	ldr	r2, [pc, #84]	; (8011ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d10c      	bne.n	8011b68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3714      	adds	r7, #20
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	40010000 	.word	0x40010000
 8011b8c:	40000400 	.word	0x40000400
 8011b90:	40000800 	.word	0x40000800
 8011b94:	40000c00 	.word	0x40000c00
 8011b98:	40010400 	.word	0x40010400
 8011b9c:	40014000 	.word	0x40014000
 8011ba0:	40001800 	.word	0x40001800

08011ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d101      	bne.n	8011bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	e03d      	b.n	8011c3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	4313      	orrs	r3, r2
 8011be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	69db      	ldr	r3, [r3, #28]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3714      	adds	r7, #20
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b083      	sub	sp, #12
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011c64:	bf00      	nop
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr

08011c70 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b087      	sub	sp, #28
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	f003 031f 	and.w	r3, r3, #31
 8011c82:	2204      	movs	r2, #4
 8011c84:	fa02 f303 	lsl.w	r3, r2, r3
 8011c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	6a1a      	ldr	r2, [r3, #32]
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	43db      	mvns	r3, r3
 8011c92:	401a      	ands	r2, r3
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6a1a      	ldr	r2, [r3, #32]
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	f003 031f 	and.w	r3, r3, #31
 8011ca2:	6879      	ldr	r1, [r7, #4]
 8011ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8011ca8:	431a      	orrs	r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	621a      	str	r2, [r3, #32]
}
 8011cae:	bf00      	nop
 8011cb0:	371c      	adds	r7, #28
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b082      	sub	sp, #8
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d101      	bne.n	8011ccc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e03f      	b.n	8011d4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7fa fefd 	bl	800cae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2224      	movs	r2, #36	; 0x24
 8011cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	68da      	ldr	r2, [r3, #12]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011cfc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 f90c 	bl	8011f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	691a      	ldr	r2, [r3, #16]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011d12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	695a      	ldr	r2, [r3, #20]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011d22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	68da      	ldr	r2, [r3, #12]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011d32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2220      	movs	r2, #32
 8011d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2220      	movs	r2, #32
 8011d46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b088      	sub	sp, #32
 8011d58:	af02      	add	r7, sp, #8
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	603b      	str	r3, [r7, #0]
 8011d60:	4613      	mov	r3, r2
 8011d62:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	2b20      	cmp	r3, #32
 8011d72:	f040 8083 	bne.w	8011e7c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d002      	beq.n	8011d82 <HAL_UART_Transmit+0x2e>
 8011d7c:	88fb      	ldrh	r3, [r7, #6]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8011d82:	2301      	movs	r3, #1
 8011d84:	e07b      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d101      	bne.n	8011d94 <HAL_UART_Transmit+0x40>
 8011d90:	2302      	movs	r3, #2
 8011d92:	e074      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2221      	movs	r2, #33	; 0x21
 8011da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8011daa:	f7fb fc93 	bl	800d6d4 <HAL_GetTick>
 8011dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	88fa      	ldrh	r2, [r7, #6]
 8011db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	88fa      	ldrh	r2, [r7, #6]
 8011dba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8011dc4:	e042      	b.n	8011e4c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	689b      	ldr	r3, [r3, #8]
 8011dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ddc:	d122      	bne.n	8011e24 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2200      	movs	r2, #0
 8011de6:	2180      	movs	r1, #128	; 0x80
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f000 f84c 	bl	8011e86 <UART_WaitOnFlagUntilTimeout>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d001      	beq.n	8011df8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8011df4:	2303      	movs	r3, #3
 8011df6:	e042      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e0a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d103      	bne.n	8011e1c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	3302      	adds	r3, #2
 8011e18:	60bb      	str	r3, [r7, #8]
 8011e1a:	e017      	b.n	8011e4c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	60bb      	str	r3, [r7, #8]
 8011e22:	e013      	b.n	8011e4c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	2180      	movs	r1, #128	; 0x80
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 f829 	bl	8011e86 <UART_WaitOnFlagUntilTimeout>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d001      	beq.n	8011e3e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	e01f      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	1c5a      	adds	r2, r3, #1
 8011e42:	60ba      	str	r2, [r7, #8]
 8011e44:	781a      	ldrb	r2, [r3, #0]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1b7      	bne.n	8011dc6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	2140      	movs	r1, #64	; 0x40
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f000 f810 	bl	8011e86 <UART_WaitOnFlagUntilTimeout>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	e006      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2220      	movs	r2, #32
 8011e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	e000      	b.n	8011e7e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8011e7c:	2302      	movs	r3, #2
  }
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3718      	adds	r7, #24
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b084      	sub	sp, #16
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	60f8      	str	r0, [r7, #12]
 8011e8e:	60b9      	str	r1, [r7, #8]
 8011e90:	603b      	str	r3, [r7, #0]
 8011e92:	4613      	mov	r3, r2
 8011e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e96:	e02c      	b.n	8011ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e9e:	d028      	beq.n	8011ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d007      	beq.n	8011eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ea6:	f7fb fc15 	bl	800d6d4 <HAL_GetTick>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	69ba      	ldr	r2, [r7, #24]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d21d      	bcs.n	8011ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68da      	ldr	r2, [r3, #12]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011ec4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	695a      	ldr	r2, [r3, #20]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f022 0201 	bic.w	r2, r2, #1
 8011ed4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2220      	movs	r2, #32
 8011eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2220      	movs	r2, #32
 8011ee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8011eee:	2303      	movs	r3, #3
 8011ef0:	e00f      	b.n	8011f12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	4013      	ands	r3, r2
 8011efc:	68ba      	ldr	r2, [r7, #8]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	bf0c      	ite	eq
 8011f02:	2301      	moveq	r3, #1
 8011f04:	2300      	movne	r3, #0
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	461a      	mov	r2, r3
 8011f0a:	79fb      	ldrb	r3, [r7, #7]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d0c3      	beq.n	8011e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
	...

08011f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f20:	b085      	sub	sp, #20
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	691b      	ldr	r3, [r3, #16]
 8011f2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	68da      	ldr	r2, [r3, #12]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	430a      	orrs	r2, r1
 8011f3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	689a      	ldr	r2, [r3, #8]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	691b      	ldr	r3, [r3, #16]
 8011f44:	431a      	orrs	r2, r3
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	695b      	ldr	r3, [r3, #20]
 8011f4a:	431a      	orrs	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	69db      	ldr	r3, [r3, #28]
 8011f50:	4313      	orrs	r3, r2
 8011f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011f5e:	f023 030c 	bic.w	r3, r3, #12
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	6812      	ldr	r2, [r2, #0]
 8011f66:	68f9      	ldr	r1, [r7, #12]
 8011f68:	430b      	orrs	r3, r1
 8011f6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	695b      	ldr	r3, [r3, #20]
 8011f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	699a      	ldr	r2, [r3, #24]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	430a      	orrs	r2, r1
 8011f80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	69db      	ldr	r3, [r3, #28]
 8011f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f8a:	f040 818b 	bne.w	80122a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4ac1      	ldr	r2, [pc, #772]	; (8012298 <UART_SetConfig+0x37c>)
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d005      	beq.n	8011fa4 <UART_SetConfig+0x88>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4abf      	ldr	r2, [pc, #764]	; (801229c <UART_SetConfig+0x380>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	f040 80bd 	bne.w	801211e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011fa4:	f7fd fde0 	bl	800fb68 <HAL_RCC_GetPCLK2Freq>
 8011fa8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	461d      	mov	r5, r3
 8011fae:	f04f 0600 	mov.w	r6, #0
 8011fb2:	46a8      	mov	r8, r5
 8011fb4:	46b1      	mov	r9, r6
 8011fb6:	eb18 0308 	adds.w	r3, r8, r8
 8011fba:	eb49 0409 	adc.w	r4, r9, r9
 8011fbe:	4698      	mov	r8, r3
 8011fc0:	46a1      	mov	r9, r4
 8011fc2:	eb18 0805 	adds.w	r8, r8, r5
 8011fc6:	eb49 0906 	adc.w	r9, r9, r6
 8011fca:	f04f 0100 	mov.w	r1, #0
 8011fce:	f04f 0200 	mov.w	r2, #0
 8011fd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011fd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011fda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011fde:	4688      	mov	r8, r1
 8011fe0:	4691      	mov	r9, r2
 8011fe2:	eb18 0005 	adds.w	r0, r8, r5
 8011fe6:	eb49 0106 	adc.w	r1, r9, r6
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	461d      	mov	r5, r3
 8011ff0:	f04f 0600 	mov.w	r6, #0
 8011ff4:	196b      	adds	r3, r5, r5
 8011ff6:	eb46 0406 	adc.w	r4, r6, r6
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	4623      	mov	r3, r4
 8011ffe:	f7f6 fd5b 	bl	8008ab8 <__aeabi_uldivmod>
 8012002:	4603      	mov	r3, r0
 8012004:	460c      	mov	r4, r1
 8012006:	461a      	mov	r2, r3
 8012008:	4ba5      	ldr	r3, [pc, #660]	; (80122a0 <UART_SetConfig+0x384>)
 801200a:	fba3 2302 	umull	r2, r3, r3, r2
 801200e:	095b      	lsrs	r3, r3, #5
 8012010:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	461d      	mov	r5, r3
 8012018:	f04f 0600 	mov.w	r6, #0
 801201c:	46a9      	mov	r9, r5
 801201e:	46b2      	mov	sl, r6
 8012020:	eb19 0309 	adds.w	r3, r9, r9
 8012024:	eb4a 040a 	adc.w	r4, sl, sl
 8012028:	4699      	mov	r9, r3
 801202a:	46a2      	mov	sl, r4
 801202c:	eb19 0905 	adds.w	r9, r9, r5
 8012030:	eb4a 0a06 	adc.w	sl, sl, r6
 8012034:	f04f 0100 	mov.w	r1, #0
 8012038:	f04f 0200 	mov.w	r2, #0
 801203c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012048:	4689      	mov	r9, r1
 801204a:	4692      	mov	sl, r2
 801204c:	eb19 0005 	adds.w	r0, r9, r5
 8012050:	eb4a 0106 	adc.w	r1, sl, r6
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	461d      	mov	r5, r3
 801205a:	f04f 0600 	mov.w	r6, #0
 801205e:	196b      	adds	r3, r5, r5
 8012060:	eb46 0406 	adc.w	r4, r6, r6
 8012064:	461a      	mov	r2, r3
 8012066:	4623      	mov	r3, r4
 8012068:	f7f6 fd26 	bl	8008ab8 <__aeabi_uldivmod>
 801206c:	4603      	mov	r3, r0
 801206e:	460c      	mov	r4, r1
 8012070:	461a      	mov	r2, r3
 8012072:	4b8b      	ldr	r3, [pc, #556]	; (80122a0 <UART_SetConfig+0x384>)
 8012074:	fba3 1302 	umull	r1, r3, r3, r2
 8012078:	095b      	lsrs	r3, r3, #5
 801207a:	2164      	movs	r1, #100	; 0x64
 801207c:	fb01 f303 	mul.w	r3, r1, r3
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	3332      	adds	r3, #50	; 0x32
 8012086:	4a86      	ldr	r2, [pc, #536]	; (80122a0 <UART_SetConfig+0x384>)
 8012088:	fba2 2303 	umull	r2, r3, r2, r3
 801208c:	095b      	lsrs	r3, r3, #5
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012094:	4498      	add	r8, r3
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	461d      	mov	r5, r3
 801209a:	f04f 0600 	mov.w	r6, #0
 801209e:	46a9      	mov	r9, r5
 80120a0:	46b2      	mov	sl, r6
 80120a2:	eb19 0309 	adds.w	r3, r9, r9
 80120a6:	eb4a 040a 	adc.w	r4, sl, sl
 80120aa:	4699      	mov	r9, r3
 80120ac:	46a2      	mov	sl, r4
 80120ae:	eb19 0905 	adds.w	r9, r9, r5
 80120b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80120b6:	f04f 0100 	mov.w	r1, #0
 80120ba:	f04f 0200 	mov.w	r2, #0
 80120be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80120c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80120c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80120ca:	4689      	mov	r9, r1
 80120cc:	4692      	mov	sl, r2
 80120ce:	eb19 0005 	adds.w	r0, r9, r5
 80120d2:	eb4a 0106 	adc.w	r1, sl, r6
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	461d      	mov	r5, r3
 80120dc:	f04f 0600 	mov.w	r6, #0
 80120e0:	196b      	adds	r3, r5, r5
 80120e2:	eb46 0406 	adc.w	r4, r6, r6
 80120e6:	461a      	mov	r2, r3
 80120e8:	4623      	mov	r3, r4
 80120ea:	f7f6 fce5 	bl	8008ab8 <__aeabi_uldivmod>
 80120ee:	4603      	mov	r3, r0
 80120f0:	460c      	mov	r4, r1
 80120f2:	461a      	mov	r2, r3
 80120f4:	4b6a      	ldr	r3, [pc, #424]	; (80122a0 <UART_SetConfig+0x384>)
 80120f6:	fba3 1302 	umull	r1, r3, r3, r2
 80120fa:	095b      	lsrs	r3, r3, #5
 80120fc:	2164      	movs	r1, #100	; 0x64
 80120fe:	fb01 f303 	mul.w	r3, r1, r3
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	3332      	adds	r3, #50	; 0x32
 8012108:	4a65      	ldr	r2, [pc, #404]	; (80122a0 <UART_SetConfig+0x384>)
 801210a:	fba2 2303 	umull	r2, r3, r2, r3
 801210e:	095b      	lsrs	r3, r3, #5
 8012110:	f003 0207 	and.w	r2, r3, #7
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4442      	add	r2, r8
 801211a:	609a      	str	r2, [r3, #8]
 801211c:	e26f      	b.n	80125fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801211e:	f7fd fd0f 	bl	800fb40 <HAL_RCC_GetPCLK1Freq>
 8012122:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	461d      	mov	r5, r3
 8012128:	f04f 0600 	mov.w	r6, #0
 801212c:	46a8      	mov	r8, r5
 801212e:	46b1      	mov	r9, r6
 8012130:	eb18 0308 	adds.w	r3, r8, r8
 8012134:	eb49 0409 	adc.w	r4, r9, r9
 8012138:	4698      	mov	r8, r3
 801213a:	46a1      	mov	r9, r4
 801213c:	eb18 0805 	adds.w	r8, r8, r5
 8012140:	eb49 0906 	adc.w	r9, r9, r6
 8012144:	f04f 0100 	mov.w	r1, #0
 8012148:	f04f 0200 	mov.w	r2, #0
 801214c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8012150:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8012154:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8012158:	4688      	mov	r8, r1
 801215a:	4691      	mov	r9, r2
 801215c:	eb18 0005 	adds.w	r0, r8, r5
 8012160:	eb49 0106 	adc.w	r1, r9, r6
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	461d      	mov	r5, r3
 801216a:	f04f 0600 	mov.w	r6, #0
 801216e:	196b      	adds	r3, r5, r5
 8012170:	eb46 0406 	adc.w	r4, r6, r6
 8012174:	461a      	mov	r2, r3
 8012176:	4623      	mov	r3, r4
 8012178:	f7f6 fc9e 	bl	8008ab8 <__aeabi_uldivmod>
 801217c:	4603      	mov	r3, r0
 801217e:	460c      	mov	r4, r1
 8012180:	461a      	mov	r2, r3
 8012182:	4b47      	ldr	r3, [pc, #284]	; (80122a0 <UART_SetConfig+0x384>)
 8012184:	fba3 2302 	umull	r2, r3, r3, r2
 8012188:	095b      	lsrs	r3, r3, #5
 801218a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	461d      	mov	r5, r3
 8012192:	f04f 0600 	mov.w	r6, #0
 8012196:	46a9      	mov	r9, r5
 8012198:	46b2      	mov	sl, r6
 801219a:	eb19 0309 	adds.w	r3, r9, r9
 801219e:	eb4a 040a 	adc.w	r4, sl, sl
 80121a2:	4699      	mov	r9, r3
 80121a4:	46a2      	mov	sl, r4
 80121a6:	eb19 0905 	adds.w	r9, r9, r5
 80121aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80121ae:	f04f 0100 	mov.w	r1, #0
 80121b2:	f04f 0200 	mov.w	r2, #0
 80121b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80121be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80121c2:	4689      	mov	r9, r1
 80121c4:	4692      	mov	sl, r2
 80121c6:	eb19 0005 	adds.w	r0, r9, r5
 80121ca:	eb4a 0106 	adc.w	r1, sl, r6
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	461d      	mov	r5, r3
 80121d4:	f04f 0600 	mov.w	r6, #0
 80121d8:	196b      	adds	r3, r5, r5
 80121da:	eb46 0406 	adc.w	r4, r6, r6
 80121de:	461a      	mov	r2, r3
 80121e0:	4623      	mov	r3, r4
 80121e2:	f7f6 fc69 	bl	8008ab8 <__aeabi_uldivmod>
 80121e6:	4603      	mov	r3, r0
 80121e8:	460c      	mov	r4, r1
 80121ea:	461a      	mov	r2, r3
 80121ec:	4b2c      	ldr	r3, [pc, #176]	; (80122a0 <UART_SetConfig+0x384>)
 80121ee:	fba3 1302 	umull	r1, r3, r3, r2
 80121f2:	095b      	lsrs	r3, r3, #5
 80121f4:	2164      	movs	r1, #100	; 0x64
 80121f6:	fb01 f303 	mul.w	r3, r1, r3
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	3332      	adds	r3, #50	; 0x32
 8012200:	4a27      	ldr	r2, [pc, #156]	; (80122a0 <UART_SetConfig+0x384>)
 8012202:	fba2 2303 	umull	r2, r3, r2, r3
 8012206:	095b      	lsrs	r3, r3, #5
 8012208:	005b      	lsls	r3, r3, #1
 801220a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801220e:	4498      	add	r8, r3
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	461d      	mov	r5, r3
 8012214:	f04f 0600 	mov.w	r6, #0
 8012218:	46a9      	mov	r9, r5
 801221a:	46b2      	mov	sl, r6
 801221c:	eb19 0309 	adds.w	r3, r9, r9
 8012220:	eb4a 040a 	adc.w	r4, sl, sl
 8012224:	4699      	mov	r9, r3
 8012226:	46a2      	mov	sl, r4
 8012228:	eb19 0905 	adds.w	r9, r9, r5
 801222c:	eb4a 0a06 	adc.w	sl, sl, r6
 8012230:	f04f 0100 	mov.w	r1, #0
 8012234:	f04f 0200 	mov.w	r2, #0
 8012238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801223c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012244:	4689      	mov	r9, r1
 8012246:	4692      	mov	sl, r2
 8012248:	eb19 0005 	adds.w	r0, r9, r5
 801224c:	eb4a 0106 	adc.w	r1, sl, r6
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	461d      	mov	r5, r3
 8012256:	f04f 0600 	mov.w	r6, #0
 801225a:	196b      	adds	r3, r5, r5
 801225c:	eb46 0406 	adc.w	r4, r6, r6
 8012260:	461a      	mov	r2, r3
 8012262:	4623      	mov	r3, r4
 8012264:	f7f6 fc28 	bl	8008ab8 <__aeabi_uldivmod>
 8012268:	4603      	mov	r3, r0
 801226a:	460c      	mov	r4, r1
 801226c:	461a      	mov	r2, r3
 801226e:	4b0c      	ldr	r3, [pc, #48]	; (80122a0 <UART_SetConfig+0x384>)
 8012270:	fba3 1302 	umull	r1, r3, r3, r2
 8012274:	095b      	lsrs	r3, r3, #5
 8012276:	2164      	movs	r1, #100	; 0x64
 8012278:	fb01 f303 	mul.w	r3, r1, r3
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	3332      	adds	r3, #50	; 0x32
 8012282:	4a07      	ldr	r2, [pc, #28]	; (80122a0 <UART_SetConfig+0x384>)
 8012284:	fba2 2303 	umull	r2, r3, r2, r3
 8012288:	095b      	lsrs	r3, r3, #5
 801228a:	f003 0207 	and.w	r2, r3, #7
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	4442      	add	r2, r8
 8012294:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8012296:	e1b2      	b.n	80125fe <UART_SetConfig+0x6e2>
 8012298:	40011000 	.word	0x40011000
 801229c:	40011400 	.word	0x40011400
 80122a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4ad7      	ldr	r2, [pc, #860]	; (8012608 <UART_SetConfig+0x6ec>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d005      	beq.n	80122ba <UART_SetConfig+0x39e>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4ad6      	ldr	r2, [pc, #856]	; (801260c <UART_SetConfig+0x6f0>)
 80122b4:	4293      	cmp	r3, r2
 80122b6:	f040 80d1 	bne.w	801245c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80122ba:	f7fd fc55 	bl	800fb68 <HAL_RCC_GetPCLK2Freq>
 80122be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	469a      	mov	sl, r3
 80122c4:	f04f 0b00 	mov.w	fp, #0
 80122c8:	46d0      	mov	r8, sl
 80122ca:	46d9      	mov	r9, fp
 80122cc:	eb18 0308 	adds.w	r3, r8, r8
 80122d0:	eb49 0409 	adc.w	r4, r9, r9
 80122d4:	4698      	mov	r8, r3
 80122d6:	46a1      	mov	r9, r4
 80122d8:	eb18 080a 	adds.w	r8, r8, sl
 80122dc:	eb49 090b 	adc.w	r9, r9, fp
 80122e0:	f04f 0100 	mov.w	r1, #0
 80122e4:	f04f 0200 	mov.w	r2, #0
 80122e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80122ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80122f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80122f4:	4688      	mov	r8, r1
 80122f6:	4691      	mov	r9, r2
 80122f8:	eb1a 0508 	adds.w	r5, sl, r8
 80122fc:	eb4b 0609 	adc.w	r6, fp, r9
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	4619      	mov	r1, r3
 8012306:	f04f 0200 	mov.w	r2, #0
 801230a:	f04f 0300 	mov.w	r3, #0
 801230e:	f04f 0400 	mov.w	r4, #0
 8012312:	0094      	lsls	r4, r2, #2
 8012314:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8012318:	008b      	lsls	r3, r1, #2
 801231a:	461a      	mov	r2, r3
 801231c:	4623      	mov	r3, r4
 801231e:	4628      	mov	r0, r5
 8012320:	4631      	mov	r1, r6
 8012322:	f7f6 fbc9 	bl	8008ab8 <__aeabi_uldivmod>
 8012326:	4603      	mov	r3, r0
 8012328:	460c      	mov	r4, r1
 801232a:	461a      	mov	r2, r3
 801232c:	4bb8      	ldr	r3, [pc, #736]	; (8012610 <UART_SetConfig+0x6f4>)
 801232e:	fba3 2302 	umull	r2, r3, r3, r2
 8012332:	095b      	lsrs	r3, r3, #5
 8012334:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	469b      	mov	fp, r3
 801233c:	f04f 0c00 	mov.w	ip, #0
 8012340:	46d9      	mov	r9, fp
 8012342:	46e2      	mov	sl, ip
 8012344:	eb19 0309 	adds.w	r3, r9, r9
 8012348:	eb4a 040a 	adc.w	r4, sl, sl
 801234c:	4699      	mov	r9, r3
 801234e:	46a2      	mov	sl, r4
 8012350:	eb19 090b 	adds.w	r9, r9, fp
 8012354:	eb4a 0a0c 	adc.w	sl, sl, ip
 8012358:	f04f 0100 	mov.w	r1, #0
 801235c:	f04f 0200 	mov.w	r2, #0
 8012360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012364:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012368:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801236c:	4689      	mov	r9, r1
 801236e:	4692      	mov	sl, r2
 8012370:	eb1b 0509 	adds.w	r5, fp, r9
 8012374:	eb4c 060a 	adc.w	r6, ip, sl
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	4619      	mov	r1, r3
 801237e:	f04f 0200 	mov.w	r2, #0
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	f04f 0400 	mov.w	r4, #0
 801238a:	0094      	lsls	r4, r2, #2
 801238c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8012390:	008b      	lsls	r3, r1, #2
 8012392:	461a      	mov	r2, r3
 8012394:	4623      	mov	r3, r4
 8012396:	4628      	mov	r0, r5
 8012398:	4631      	mov	r1, r6
 801239a:	f7f6 fb8d 	bl	8008ab8 <__aeabi_uldivmod>
 801239e:	4603      	mov	r3, r0
 80123a0:	460c      	mov	r4, r1
 80123a2:	461a      	mov	r2, r3
 80123a4:	4b9a      	ldr	r3, [pc, #616]	; (8012610 <UART_SetConfig+0x6f4>)
 80123a6:	fba3 1302 	umull	r1, r3, r3, r2
 80123aa:	095b      	lsrs	r3, r3, #5
 80123ac:	2164      	movs	r1, #100	; 0x64
 80123ae:	fb01 f303 	mul.w	r3, r1, r3
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	011b      	lsls	r3, r3, #4
 80123b6:	3332      	adds	r3, #50	; 0x32
 80123b8:	4a95      	ldr	r2, [pc, #596]	; (8012610 <UART_SetConfig+0x6f4>)
 80123ba:	fba2 2303 	umull	r2, r3, r2, r3
 80123be:	095b      	lsrs	r3, r3, #5
 80123c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123c4:	4498      	add	r8, r3
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	469b      	mov	fp, r3
 80123ca:	f04f 0c00 	mov.w	ip, #0
 80123ce:	46d9      	mov	r9, fp
 80123d0:	46e2      	mov	sl, ip
 80123d2:	eb19 0309 	adds.w	r3, r9, r9
 80123d6:	eb4a 040a 	adc.w	r4, sl, sl
 80123da:	4699      	mov	r9, r3
 80123dc:	46a2      	mov	sl, r4
 80123de:	eb19 090b 	adds.w	r9, r9, fp
 80123e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80123e6:	f04f 0100 	mov.w	r1, #0
 80123ea:	f04f 0200 	mov.w	r2, #0
 80123ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80123f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80123f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80123fa:	4689      	mov	r9, r1
 80123fc:	4692      	mov	sl, r2
 80123fe:	eb1b 0509 	adds.w	r5, fp, r9
 8012402:	eb4c 060a 	adc.w	r6, ip, sl
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	4619      	mov	r1, r3
 801240c:	f04f 0200 	mov.w	r2, #0
 8012410:	f04f 0300 	mov.w	r3, #0
 8012414:	f04f 0400 	mov.w	r4, #0
 8012418:	0094      	lsls	r4, r2, #2
 801241a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801241e:	008b      	lsls	r3, r1, #2
 8012420:	461a      	mov	r2, r3
 8012422:	4623      	mov	r3, r4
 8012424:	4628      	mov	r0, r5
 8012426:	4631      	mov	r1, r6
 8012428:	f7f6 fb46 	bl	8008ab8 <__aeabi_uldivmod>
 801242c:	4603      	mov	r3, r0
 801242e:	460c      	mov	r4, r1
 8012430:	461a      	mov	r2, r3
 8012432:	4b77      	ldr	r3, [pc, #476]	; (8012610 <UART_SetConfig+0x6f4>)
 8012434:	fba3 1302 	umull	r1, r3, r3, r2
 8012438:	095b      	lsrs	r3, r3, #5
 801243a:	2164      	movs	r1, #100	; 0x64
 801243c:	fb01 f303 	mul.w	r3, r1, r3
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	011b      	lsls	r3, r3, #4
 8012444:	3332      	adds	r3, #50	; 0x32
 8012446:	4a72      	ldr	r2, [pc, #456]	; (8012610 <UART_SetConfig+0x6f4>)
 8012448:	fba2 2303 	umull	r2, r3, r2, r3
 801244c:	095b      	lsrs	r3, r3, #5
 801244e:	f003 020f 	and.w	r2, r3, #15
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4442      	add	r2, r8
 8012458:	609a      	str	r2, [r3, #8]
 801245a:	e0d0      	b.n	80125fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801245c:	f7fd fb70 	bl	800fb40 <HAL_RCC_GetPCLK1Freq>
 8012460:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	469a      	mov	sl, r3
 8012466:	f04f 0b00 	mov.w	fp, #0
 801246a:	46d0      	mov	r8, sl
 801246c:	46d9      	mov	r9, fp
 801246e:	eb18 0308 	adds.w	r3, r8, r8
 8012472:	eb49 0409 	adc.w	r4, r9, r9
 8012476:	4698      	mov	r8, r3
 8012478:	46a1      	mov	r9, r4
 801247a:	eb18 080a 	adds.w	r8, r8, sl
 801247e:	eb49 090b 	adc.w	r9, r9, fp
 8012482:	f04f 0100 	mov.w	r1, #0
 8012486:	f04f 0200 	mov.w	r2, #0
 801248a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801248e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8012492:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8012496:	4688      	mov	r8, r1
 8012498:	4691      	mov	r9, r2
 801249a:	eb1a 0508 	adds.w	r5, sl, r8
 801249e:	eb4b 0609 	adc.w	r6, fp, r9
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	4619      	mov	r1, r3
 80124a8:	f04f 0200 	mov.w	r2, #0
 80124ac:	f04f 0300 	mov.w	r3, #0
 80124b0:	f04f 0400 	mov.w	r4, #0
 80124b4:	0094      	lsls	r4, r2, #2
 80124b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80124ba:	008b      	lsls	r3, r1, #2
 80124bc:	461a      	mov	r2, r3
 80124be:	4623      	mov	r3, r4
 80124c0:	4628      	mov	r0, r5
 80124c2:	4631      	mov	r1, r6
 80124c4:	f7f6 faf8 	bl	8008ab8 <__aeabi_uldivmod>
 80124c8:	4603      	mov	r3, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	461a      	mov	r2, r3
 80124ce:	4b50      	ldr	r3, [pc, #320]	; (8012610 <UART_SetConfig+0x6f4>)
 80124d0:	fba3 2302 	umull	r2, r3, r3, r2
 80124d4:	095b      	lsrs	r3, r3, #5
 80124d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	469b      	mov	fp, r3
 80124de:	f04f 0c00 	mov.w	ip, #0
 80124e2:	46d9      	mov	r9, fp
 80124e4:	46e2      	mov	sl, ip
 80124e6:	eb19 0309 	adds.w	r3, r9, r9
 80124ea:	eb4a 040a 	adc.w	r4, sl, sl
 80124ee:	4699      	mov	r9, r3
 80124f0:	46a2      	mov	sl, r4
 80124f2:	eb19 090b 	adds.w	r9, r9, fp
 80124f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80124fa:	f04f 0100 	mov.w	r1, #0
 80124fe:	f04f 0200 	mov.w	r2, #0
 8012502:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012506:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801250a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801250e:	4689      	mov	r9, r1
 8012510:	4692      	mov	sl, r2
 8012512:	eb1b 0509 	adds.w	r5, fp, r9
 8012516:	eb4c 060a 	adc.w	r6, ip, sl
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	4619      	mov	r1, r3
 8012520:	f04f 0200 	mov.w	r2, #0
 8012524:	f04f 0300 	mov.w	r3, #0
 8012528:	f04f 0400 	mov.w	r4, #0
 801252c:	0094      	lsls	r4, r2, #2
 801252e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8012532:	008b      	lsls	r3, r1, #2
 8012534:	461a      	mov	r2, r3
 8012536:	4623      	mov	r3, r4
 8012538:	4628      	mov	r0, r5
 801253a:	4631      	mov	r1, r6
 801253c:	f7f6 fabc 	bl	8008ab8 <__aeabi_uldivmod>
 8012540:	4603      	mov	r3, r0
 8012542:	460c      	mov	r4, r1
 8012544:	461a      	mov	r2, r3
 8012546:	4b32      	ldr	r3, [pc, #200]	; (8012610 <UART_SetConfig+0x6f4>)
 8012548:	fba3 1302 	umull	r1, r3, r3, r2
 801254c:	095b      	lsrs	r3, r3, #5
 801254e:	2164      	movs	r1, #100	; 0x64
 8012550:	fb01 f303 	mul.w	r3, r1, r3
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	011b      	lsls	r3, r3, #4
 8012558:	3332      	adds	r3, #50	; 0x32
 801255a:	4a2d      	ldr	r2, [pc, #180]	; (8012610 <UART_SetConfig+0x6f4>)
 801255c:	fba2 2303 	umull	r2, r3, r2, r3
 8012560:	095b      	lsrs	r3, r3, #5
 8012562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012566:	4498      	add	r8, r3
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	469b      	mov	fp, r3
 801256c:	f04f 0c00 	mov.w	ip, #0
 8012570:	46d9      	mov	r9, fp
 8012572:	46e2      	mov	sl, ip
 8012574:	eb19 0309 	adds.w	r3, r9, r9
 8012578:	eb4a 040a 	adc.w	r4, sl, sl
 801257c:	4699      	mov	r9, r3
 801257e:	46a2      	mov	sl, r4
 8012580:	eb19 090b 	adds.w	r9, r9, fp
 8012584:	eb4a 0a0c 	adc.w	sl, sl, ip
 8012588:	f04f 0100 	mov.w	r1, #0
 801258c:	f04f 0200 	mov.w	r2, #0
 8012590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012594:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012598:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801259c:	4689      	mov	r9, r1
 801259e:	4692      	mov	sl, r2
 80125a0:	eb1b 0509 	adds.w	r5, fp, r9
 80125a4:	eb4c 060a 	adc.w	r6, ip, sl
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	4619      	mov	r1, r3
 80125ae:	f04f 0200 	mov.w	r2, #0
 80125b2:	f04f 0300 	mov.w	r3, #0
 80125b6:	f04f 0400 	mov.w	r4, #0
 80125ba:	0094      	lsls	r4, r2, #2
 80125bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80125c0:	008b      	lsls	r3, r1, #2
 80125c2:	461a      	mov	r2, r3
 80125c4:	4623      	mov	r3, r4
 80125c6:	4628      	mov	r0, r5
 80125c8:	4631      	mov	r1, r6
 80125ca:	f7f6 fa75 	bl	8008ab8 <__aeabi_uldivmod>
 80125ce:	4603      	mov	r3, r0
 80125d0:	460c      	mov	r4, r1
 80125d2:	461a      	mov	r2, r3
 80125d4:	4b0e      	ldr	r3, [pc, #56]	; (8012610 <UART_SetConfig+0x6f4>)
 80125d6:	fba3 1302 	umull	r1, r3, r3, r2
 80125da:	095b      	lsrs	r3, r3, #5
 80125dc:	2164      	movs	r1, #100	; 0x64
 80125de:	fb01 f303 	mul.w	r3, r1, r3
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	011b      	lsls	r3, r3, #4
 80125e6:	3332      	adds	r3, #50	; 0x32
 80125e8:	4a09      	ldr	r2, [pc, #36]	; (8012610 <UART_SetConfig+0x6f4>)
 80125ea:	fba2 2303 	umull	r2, r3, r2, r3
 80125ee:	095b      	lsrs	r3, r3, #5
 80125f0:	f003 020f 	and.w	r2, r3, #15
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4442      	add	r2, r8
 80125fa:	609a      	str	r2, [r3, #8]
}
 80125fc:	e7ff      	b.n	80125fe <UART_SetConfig+0x6e2>
 80125fe:	bf00      	nop
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012608:	40011000 	.word	0x40011000
 801260c:	40011400 	.word	0x40011400
 8012610:	51eb851f 	.word	0x51eb851f

08012614 <round>:
 8012614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012616:	ec57 6b10 	vmov	r6, r7, d0
 801261a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801261e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8012622:	2c13      	cmp	r4, #19
 8012624:	463b      	mov	r3, r7
 8012626:	463d      	mov	r5, r7
 8012628:	dc17      	bgt.n	801265a <round+0x46>
 801262a:	2c00      	cmp	r4, #0
 801262c:	da09      	bge.n	8012642 <round+0x2e>
 801262e:	3401      	adds	r4, #1
 8012630:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8012634:	d103      	bne.n	801263e <round+0x2a>
 8012636:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801263a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801263e:	2100      	movs	r1, #0
 8012640:	e02c      	b.n	801269c <round+0x88>
 8012642:	4a18      	ldr	r2, [pc, #96]	; (80126a4 <round+0x90>)
 8012644:	4122      	asrs	r2, r4
 8012646:	4217      	tst	r7, r2
 8012648:	d100      	bne.n	801264c <round+0x38>
 801264a:	b19e      	cbz	r6, 8012674 <round+0x60>
 801264c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012650:	4123      	asrs	r3, r4
 8012652:	442b      	add	r3, r5
 8012654:	ea23 0302 	bic.w	r3, r3, r2
 8012658:	e7f1      	b.n	801263e <round+0x2a>
 801265a:	2c33      	cmp	r4, #51	; 0x33
 801265c:	dd0d      	ble.n	801267a <round+0x66>
 801265e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012662:	d107      	bne.n	8012674 <round+0x60>
 8012664:	4630      	mov	r0, r6
 8012666:	4639      	mov	r1, r7
 8012668:	ee10 2a10 	vmov	r2, s0
 801266c:	f7f5 fd46 	bl	80080fc <__adddf3>
 8012670:	4606      	mov	r6, r0
 8012672:	460f      	mov	r7, r1
 8012674:	ec47 6b10 	vmov	d0, r6, r7
 8012678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801267a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801267e:	f04f 30ff 	mov.w	r0, #4294967295
 8012682:	40d0      	lsrs	r0, r2
 8012684:	4206      	tst	r6, r0
 8012686:	d0f5      	beq.n	8012674 <round+0x60>
 8012688:	2201      	movs	r2, #1
 801268a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801268e:	fa02 f404 	lsl.w	r4, r2, r4
 8012692:	1931      	adds	r1, r6, r4
 8012694:	bf28      	it	cs
 8012696:	189b      	addcs	r3, r3, r2
 8012698:	ea21 0100 	bic.w	r1, r1, r0
 801269c:	461f      	mov	r7, r3
 801269e:	460e      	mov	r6, r1
 80126a0:	e7e8      	b.n	8012674 <round+0x60>
 80126a2:	bf00      	nop
 80126a4:	000fffff 	.word	0x000fffff

080126a8 <__errno>:
 80126a8:	4b01      	ldr	r3, [pc, #4]	; (80126b0 <__errno+0x8>)
 80126aa:	6818      	ldr	r0, [r3, #0]
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20000010 	.word	0x20000010

080126b4 <__libc_init_array>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	4e0d      	ldr	r6, [pc, #52]	; (80126ec <__libc_init_array+0x38>)
 80126b8:	4c0d      	ldr	r4, [pc, #52]	; (80126f0 <__libc_init_array+0x3c>)
 80126ba:	1ba4      	subs	r4, r4, r6
 80126bc:	10a4      	asrs	r4, r4, #2
 80126be:	2500      	movs	r5, #0
 80126c0:	42a5      	cmp	r5, r4
 80126c2:	d109      	bne.n	80126d8 <__libc_init_array+0x24>
 80126c4:	4e0b      	ldr	r6, [pc, #44]	; (80126f4 <__libc_init_array+0x40>)
 80126c6:	4c0c      	ldr	r4, [pc, #48]	; (80126f8 <__libc_init_array+0x44>)
 80126c8:	f002 fbae 	bl	8014e28 <_init>
 80126cc:	1ba4      	subs	r4, r4, r6
 80126ce:	10a4      	asrs	r4, r4, #2
 80126d0:	2500      	movs	r5, #0
 80126d2:	42a5      	cmp	r5, r4
 80126d4:	d105      	bne.n	80126e2 <__libc_init_array+0x2e>
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126dc:	4798      	blx	r3
 80126de:	3501      	adds	r5, #1
 80126e0:	e7ee      	b.n	80126c0 <__libc_init_array+0xc>
 80126e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126e6:	4798      	blx	r3
 80126e8:	3501      	adds	r5, #1
 80126ea:	e7f2      	b.n	80126d2 <__libc_init_array+0x1e>
 80126ec:	08015170 	.word	0x08015170
 80126f0:	08015170 	.word	0x08015170
 80126f4:	08015170 	.word	0x08015170
 80126f8:	08015174 	.word	0x08015174

080126fc <memcpy>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	1e43      	subs	r3, r0, #1
 8012700:	440a      	add	r2, r1
 8012702:	4291      	cmp	r1, r2
 8012704:	d100      	bne.n	8012708 <memcpy+0xc>
 8012706:	bd10      	pop	{r4, pc}
 8012708:	f811 4b01 	ldrb.w	r4, [r1], #1
 801270c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012710:	e7f7      	b.n	8012702 <memcpy+0x6>

08012712 <memset>:
 8012712:	4402      	add	r2, r0
 8012714:	4603      	mov	r3, r0
 8012716:	4293      	cmp	r3, r2
 8012718:	d100      	bne.n	801271c <memset+0xa>
 801271a:	4770      	bx	lr
 801271c:	f803 1b01 	strb.w	r1, [r3], #1
 8012720:	e7f9      	b.n	8012716 <memset+0x4>

08012722 <__cvt>:
 8012722:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012726:	ec55 4b10 	vmov	r4, r5, d0
 801272a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801272c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012730:	2d00      	cmp	r5, #0
 8012732:	460e      	mov	r6, r1
 8012734:	4691      	mov	r9, r2
 8012736:	4619      	mov	r1, r3
 8012738:	bfb8      	it	lt
 801273a:	4622      	movlt	r2, r4
 801273c:	462b      	mov	r3, r5
 801273e:	f027 0720 	bic.w	r7, r7, #32
 8012742:	bfbb      	ittet	lt
 8012744:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012748:	461d      	movlt	r5, r3
 801274a:	2300      	movge	r3, #0
 801274c:	232d      	movlt	r3, #45	; 0x2d
 801274e:	bfb8      	it	lt
 8012750:	4614      	movlt	r4, r2
 8012752:	2f46      	cmp	r7, #70	; 0x46
 8012754:	700b      	strb	r3, [r1, #0]
 8012756:	d004      	beq.n	8012762 <__cvt+0x40>
 8012758:	2f45      	cmp	r7, #69	; 0x45
 801275a:	d100      	bne.n	801275e <__cvt+0x3c>
 801275c:	3601      	adds	r6, #1
 801275e:	2102      	movs	r1, #2
 8012760:	e000      	b.n	8012764 <__cvt+0x42>
 8012762:	2103      	movs	r1, #3
 8012764:	ab03      	add	r3, sp, #12
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	ab02      	add	r3, sp, #8
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	4632      	mov	r2, r6
 801276e:	4653      	mov	r3, sl
 8012770:	ec45 4b10 	vmov	d0, r4, r5
 8012774:	f000 fdfc 	bl	8013370 <_dtoa_r>
 8012778:	2f47      	cmp	r7, #71	; 0x47
 801277a:	4680      	mov	r8, r0
 801277c:	d102      	bne.n	8012784 <__cvt+0x62>
 801277e:	f019 0f01 	tst.w	r9, #1
 8012782:	d026      	beq.n	80127d2 <__cvt+0xb0>
 8012784:	2f46      	cmp	r7, #70	; 0x46
 8012786:	eb08 0906 	add.w	r9, r8, r6
 801278a:	d111      	bne.n	80127b0 <__cvt+0x8e>
 801278c:	f898 3000 	ldrb.w	r3, [r8]
 8012790:	2b30      	cmp	r3, #48	; 0x30
 8012792:	d10a      	bne.n	80127aa <__cvt+0x88>
 8012794:	2200      	movs	r2, #0
 8012796:	2300      	movs	r3, #0
 8012798:	4620      	mov	r0, r4
 801279a:	4629      	mov	r1, r5
 801279c:	f7f6 f8cc 	bl	8008938 <__aeabi_dcmpeq>
 80127a0:	b918      	cbnz	r0, 80127aa <__cvt+0x88>
 80127a2:	f1c6 0601 	rsb	r6, r6, #1
 80127a6:	f8ca 6000 	str.w	r6, [sl]
 80127aa:	f8da 3000 	ldr.w	r3, [sl]
 80127ae:	4499      	add	r9, r3
 80127b0:	2200      	movs	r2, #0
 80127b2:	2300      	movs	r3, #0
 80127b4:	4620      	mov	r0, r4
 80127b6:	4629      	mov	r1, r5
 80127b8:	f7f6 f8be 	bl	8008938 <__aeabi_dcmpeq>
 80127bc:	b938      	cbnz	r0, 80127ce <__cvt+0xac>
 80127be:	2230      	movs	r2, #48	; 0x30
 80127c0:	9b03      	ldr	r3, [sp, #12]
 80127c2:	454b      	cmp	r3, r9
 80127c4:	d205      	bcs.n	80127d2 <__cvt+0xb0>
 80127c6:	1c59      	adds	r1, r3, #1
 80127c8:	9103      	str	r1, [sp, #12]
 80127ca:	701a      	strb	r2, [r3, #0]
 80127cc:	e7f8      	b.n	80127c0 <__cvt+0x9e>
 80127ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80127d2:	9b03      	ldr	r3, [sp, #12]
 80127d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127d6:	eba3 0308 	sub.w	r3, r3, r8
 80127da:	4640      	mov	r0, r8
 80127dc:	6013      	str	r3, [r2, #0]
 80127de:	b004      	add	sp, #16
 80127e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080127e4 <__exponent>:
 80127e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127e6:	2900      	cmp	r1, #0
 80127e8:	4604      	mov	r4, r0
 80127ea:	bfba      	itte	lt
 80127ec:	4249      	neglt	r1, r1
 80127ee:	232d      	movlt	r3, #45	; 0x2d
 80127f0:	232b      	movge	r3, #43	; 0x2b
 80127f2:	2909      	cmp	r1, #9
 80127f4:	f804 2b02 	strb.w	r2, [r4], #2
 80127f8:	7043      	strb	r3, [r0, #1]
 80127fa:	dd20      	ble.n	801283e <__exponent+0x5a>
 80127fc:	f10d 0307 	add.w	r3, sp, #7
 8012800:	461f      	mov	r7, r3
 8012802:	260a      	movs	r6, #10
 8012804:	fb91 f5f6 	sdiv	r5, r1, r6
 8012808:	fb06 1115 	mls	r1, r6, r5, r1
 801280c:	3130      	adds	r1, #48	; 0x30
 801280e:	2d09      	cmp	r5, #9
 8012810:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012814:	f103 32ff 	add.w	r2, r3, #4294967295
 8012818:	4629      	mov	r1, r5
 801281a:	dc09      	bgt.n	8012830 <__exponent+0x4c>
 801281c:	3130      	adds	r1, #48	; 0x30
 801281e:	3b02      	subs	r3, #2
 8012820:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012824:	42bb      	cmp	r3, r7
 8012826:	4622      	mov	r2, r4
 8012828:	d304      	bcc.n	8012834 <__exponent+0x50>
 801282a:	1a10      	subs	r0, r2, r0
 801282c:	b003      	add	sp, #12
 801282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012830:	4613      	mov	r3, r2
 8012832:	e7e7      	b.n	8012804 <__exponent+0x20>
 8012834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012838:	f804 2b01 	strb.w	r2, [r4], #1
 801283c:	e7f2      	b.n	8012824 <__exponent+0x40>
 801283e:	2330      	movs	r3, #48	; 0x30
 8012840:	4419      	add	r1, r3
 8012842:	7083      	strb	r3, [r0, #2]
 8012844:	1d02      	adds	r2, r0, #4
 8012846:	70c1      	strb	r1, [r0, #3]
 8012848:	e7ef      	b.n	801282a <__exponent+0x46>
	...

0801284c <_printf_float>:
 801284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012850:	b08d      	sub	sp, #52	; 0x34
 8012852:	460c      	mov	r4, r1
 8012854:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012858:	4616      	mov	r6, r2
 801285a:	461f      	mov	r7, r3
 801285c:	4605      	mov	r5, r0
 801285e:	f001 fcb9 	bl	80141d4 <_localeconv_r>
 8012862:	6803      	ldr	r3, [r0, #0]
 8012864:	9304      	str	r3, [sp, #16]
 8012866:	4618      	mov	r0, r3
 8012868:	f7f5 fbea 	bl	8008040 <strlen>
 801286c:	2300      	movs	r3, #0
 801286e:	930a      	str	r3, [sp, #40]	; 0x28
 8012870:	f8d8 3000 	ldr.w	r3, [r8]
 8012874:	9005      	str	r0, [sp, #20]
 8012876:	3307      	adds	r3, #7
 8012878:	f023 0307 	bic.w	r3, r3, #7
 801287c:	f103 0208 	add.w	r2, r3, #8
 8012880:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012884:	f8d4 b000 	ldr.w	fp, [r4]
 8012888:	f8c8 2000 	str.w	r2, [r8]
 801288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012894:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012898:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801289c:	9307      	str	r3, [sp, #28]
 801289e:	f8cd 8018 	str.w	r8, [sp, #24]
 80128a2:	f04f 32ff 	mov.w	r2, #4294967295
 80128a6:	4ba7      	ldr	r3, [pc, #668]	; (8012b44 <_printf_float+0x2f8>)
 80128a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128ac:	f7f6 f876 	bl	800899c <__aeabi_dcmpun>
 80128b0:	bb70      	cbnz	r0, 8012910 <_printf_float+0xc4>
 80128b2:	f04f 32ff 	mov.w	r2, #4294967295
 80128b6:	4ba3      	ldr	r3, [pc, #652]	; (8012b44 <_printf_float+0x2f8>)
 80128b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128bc:	f7f6 f850 	bl	8008960 <__aeabi_dcmple>
 80128c0:	bb30      	cbnz	r0, 8012910 <_printf_float+0xc4>
 80128c2:	2200      	movs	r2, #0
 80128c4:	2300      	movs	r3, #0
 80128c6:	4640      	mov	r0, r8
 80128c8:	4649      	mov	r1, r9
 80128ca:	f7f6 f83f 	bl	800894c <__aeabi_dcmplt>
 80128ce:	b110      	cbz	r0, 80128d6 <_printf_float+0x8a>
 80128d0:	232d      	movs	r3, #45	; 0x2d
 80128d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128d6:	4a9c      	ldr	r2, [pc, #624]	; (8012b48 <_printf_float+0x2fc>)
 80128d8:	4b9c      	ldr	r3, [pc, #624]	; (8012b4c <_printf_float+0x300>)
 80128da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80128de:	bf8c      	ite	hi
 80128e0:	4690      	movhi	r8, r2
 80128e2:	4698      	movls	r8, r3
 80128e4:	2303      	movs	r3, #3
 80128e6:	f02b 0204 	bic.w	r2, fp, #4
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	6022      	str	r2, [r4, #0]
 80128ee:	f04f 0900 	mov.w	r9, #0
 80128f2:	9700      	str	r7, [sp, #0]
 80128f4:	4633      	mov	r3, r6
 80128f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80128f8:	4621      	mov	r1, r4
 80128fa:	4628      	mov	r0, r5
 80128fc:	f000 f9e6 	bl	8012ccc <_printf_common>
 8012900:	3001      	adds	r0, #1
 8012902:	f040 808d 	bne.w	8012a20 <_printf_float+0x1d4>
 8012906:	f04f 30ff 	mov.w	r0, #4294967295
 801290a:	b00d      	add	sp, #52	; 0x34
 801290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012910:	4642      	mov	r2, r8
 8012912:	464b      	mov	r3, r9
 8012914:	4640      	mov	r0, r8
 8012916:	4649      	mov	r1, r9
 8012918:	f7f6 f840 	bl	800899c <__aeabi_dcmpun>
 801291c:	b110      	cbz	r0, 8012924 <_printf_float+0xd8>
 801291e:	4a8c      	ldr	r2, [pc, #560]	; (8012b50 <_printf_float+0x304>)
 8012920:	4b8c      	ldr	r3, [pc, #560]	; (8012b54 <_printf_float+0x308>)
 8012922:	e7da      	b.n	80128da <_printf_float+0x8e>
 8012924:	6861      	ldr	r1, [r4, #4]
 8012926:	1c4b      	adds	r3, r1, #1
 8012928:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801292c:	a80a      	add	r0, sp, #40	; 0x28
 801292e:	d13e      	bne.n	80129ae <_printf_float+0x162>
 8012930:	2306      	movs	r3, #6
 8012932:	6063      	str	r3, [r4, #4]
 8012934:	2300      	movs	r3, #0
 8012936:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801293a:	ab09      	add	r3, sp, #36	; 0x24
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	ec49 8b10 	vmov	d0, r8, r9
 8012942:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012946:	6022      	str	r2, [r4, #0]
 8012948:	f8cd a004 	str.w	sl, [sp, #4]
 801294c:	6861      	ldr	r1, [r4, #4]
 801294e:	4628      	mov	r0, r5
 8012950:	f7ff fee7 	bl	8012722 <__cvt>
 8012954:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012958:	2b47      	cmp	r3, #71	; 0x47
 801295a:	4680      	mov	r8, r0
 801295c:	d109      	bne.n	8012972 <_printf_float+0x126>
 801295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012960:	1cd8      	adds	r0, r3, #3
 8012962:	db02      	blt.n	801296a <_printf_float+0x11e>
 8012964:	6862      	ldr	r2, [r4, #4]
 8012966:	4293      	cmp	r3, r2
 8012968:	dd47      	ble.n	80129fa <_printf_float+0x1ae>
 801296a:	f1aa 0a02 	sub.w	sl, sl, #2
 801296e:	fa5f fa8a 	uxtb.w	sl, sl
 8012972:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012978:	d824      	bhi.n	80129c4 <_printf_float+0x178>
 801297a:	3901      	subs	r1, #1
 801297c:	4652      	mov	r2, sl
 801297e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012982:	9109      	str	r1, [sp, #36]	; 0x24
 8012984:	f7ff ff2e 	bl	80127e4 <__exponent>
 8012988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801298a:	1813      	adds	r3, r2, r0
 801298c:	2a01      	cmp	r2, #1
 801298e:	4681      	mov	r9, r0
 8012990:	6123      	str	r3, [r4, #16]
 8012992:	dc02      	bgt.n	801299a <_printf_float+0x14e>
 8012994:	6822      	ldr	r2, [r4, #0]
 8012996:	07d1      	lsls	r1, r2, #31
 8012998:	d501      	bpl.n	801299e <_printf_float+0x152>
 801299a:	3301      	adds	r3, #1
 801299c:	6123      	str	r3, [r4, #16]
 801299e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d0a5      	beq.n	80128f2 <_printf_float+0xa6>
 80129a6:	232d      	movs	r3, #45	; 0x2d
 80129a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129ac:	e7a1      	b.n	80128f2 <_printf_float+0xa6>
 80129ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80129b2:	f000 8177 	beq.w	8012ca4 <_printf_float+0x458>
 80129b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80129ba:	d1bb      	bne.n	8012934 <_printf_float+0xe8>
 80129bc:	2900      	cmp	r1, #0
 80129be:	d1b9      	bne.n	8012934 <_printf_float+0xe8>
 80129c0:	2301      	movs	r3, #1
 80129c2:	e7b6      	b.n	8012932 <_printf_float+0xe6>
 80129c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80129c8:	d119      	bne.n	80129fe <_printf_float+0x1b2>
 80129ca:	2900      	cmp	r1, #0
 80129cc:	6863      	ldr	r3, [r4, #4]
 80129ce:	dd0c      	ble.n	80129ea <_printf_float+0x19e>
 80129d0:	6121      	str	r1, [r4, #16]
 80129d2:	b913      	cbnz	r3, 80129da <_printf_float+0x18e>
 80129d4:	6822      	ldr	r2, [r4, #0]
 80129d6:	07d2      	lsls	r2, r2, #31
 80129d8:	d502      	bpl.n	80129e0 <_printf_float+0x194>
 80129da:	3301      	adds	r3, #1
 80129dc:	440b      	add	r3, r1
 80129de:	6123      	str	r3, [r4, #16]
 80129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80129e4:	f04f 0900 	mov.w	r9, #0
 80129e8:	e7d9      	b.n	801299e <_printf_float+0x152>
 80129ea:	b913      	cbnz	r3, 80129f2 <_printf_float+0x1a6>
 80129ec:	6822      	ldr	r2, [r4, #0]
 80129ee:	07d0      	lsls	r0, r2, #31
 80129f0:	d501      	bpl.n	80129f6 <_printf_float+0x1aa>
 80129f2:	3302      	adds	r3, #2
 80129f4:	e7f3      	b.n	80129de <_printf_float+0x192>
 80129f6:	2301      	movs	r3, #1
 80129f8:	e7f1      	b.n	80129de <_printf_float+0x192>
 80129fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80129fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012a02:	4293      	cmp	r3, r2
 8012a04:	db05      	blt.n	8012a12 <_printf_float+0x1c6>
 8012a06:	6822      	ldr	r2, [r4, #0]
 8012a08:	6123      	str	r3, [r4, #16]
 8012a0a:	07d1      	lsls	r1, r2, #31
 8012a0c:	d5e8      	bpl.n	80129e0 <_printf_float+0x194>
 8012a0e:	3301      	adds	r3, #1
 8012a10:	e7e5      	b.n	80129de <_printf_float+0x192>
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	bfd4      	ite	le
 8012a16:	f1c3 0302 	rsble	r3, r3, #2
 8012a1a:	2301      	movgt	r3, #1
 8012a1c:	4413      	add	r3, r2
 8012a1e:	e7de      	b.n	80129de <_printf_float+0x192>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	055a      	lsls	r2, r3, #21
 8012a24:	d407      	bmi.n	8012a36 <_printf_float+0x1ea>
 8012a26:	6923      	ldr	r3, [r4, #16]
 8012a28:	4642      	mov	r2, r8
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	47b8      	blx	r7
 8012a30:	3001      	adds	r0, #1
 8012a32:	d12b      	bne.n	8012a8c <_printf_float+0x240>
 8012a34:	e767      	b.n	8012906 <_printf_float+0xba>
 8012a36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012a3a:	f240 80dc 	bls.w	8012bf6 <_printf_float+0x3aa>
 8012a3e:	2200      	movs	r2, #0
 8012a40:	2300      	movs	r3, #0
 8012a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a46:	f7f5 ff77 	bl	8008938 <__aeabi_dcmpeq>
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d033      	beq.n	8012ab6 <_printf_float+0x26a>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	4a41      	ldr	r2, [pc, #260]	; (8012b58 <_printf_float+0x30c>)
 8012a52:	4631      	mov	r1, r6
 8012a54:	4628      	mov	r0, r5
 8012a56:	47b8      	blx	r7
 8012a58:	3001      	adds	r0, #1
 8012a5a:	f43f af54 	beq.w	8012906 <_printf_float+0xba>
 8012a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a62:	429a      	cmp	r2, r3
 8012a64:	db02      	blt.n	8012a6c <_printf_float+0x220>
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	07d8      	lsls	r0, r3, #31
 8012a6a:	d50f      	bpl.n	8012a8c <_printf_float+0x240>
 8012a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a70:	4631      	mov	r1, r6
 8012a72:	4628      	mov	r0, r5
 8012a74:	47b8      	blx	r7
 8012a76:	3001      	adds	r0, #1
 8012a78:	f43f af45 	beq.w	8012906 <_printf_float+0xba>
 8012a7c:	f04f 0800 	mov.w	r8, #0
 8012a80:	f104 091a 	add.w	r9, r4, #26
 8012a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a86:	3b01      	subs	r3, #1
 8012a88:	4543      	cmp	r3, r8
 8012a8a:	dc09      	bgt.n	8012aa0 <_printf_float+0x254>
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	079b      	lsls	r3, r3, #30
 8012a90:	f100 8103 	bmi.w	8012c9a <_printf_float+0x44e>
 8012a94:	68e0      	ldr	r0, [r4, #12]
 8012a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a98:	4298      	cmp	r0, r3
 8012a9a:	bfb8      	it	lt
 8012a9c:	4618      	movlt	r0, r3
 8012a9e:	e734      	b.n	801290a <_printf_float+0xbe>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	464a      	mov	r2, r9
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	47b8      	blx	r7
 8012aaa:	3001      	adds	r0, #1
 8012aac:	f43f af2b 	beq.w	8012906 <_printf_float+0xba>
 8012ab0:	f108 0801 	add.w	r8, r8, #1
 8012ab4:	e7e6      	b.n	8012a84 <_printf_float+0x238>
 8012ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	dc2b      	bgt.n	8012b14 <_printf_float+0x2c8>
 8012abc:	2301      	movs	r3, #1
 8012abe:	4a26      	ldr	r2, [pc, #152]	; (8012b58 <_printf_float+0x30c>)
 8012ac0:	4631      	mov	r1, r6
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	47b8      	blx	r7
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	f43f af1d 	beq.w	8012906 <_printf_float+0xba>
 8012acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ace:	b923      	cbnz	r3, 8012ada <_printf_float+0x28e>
 8012ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ad2:	b913      	cbnz	r3, 8012ada <_printf_float+0x28e>
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	07d9      	lsls	r1, r3, #31
 8012ad8:	d5d8      	bpl.n	8012a8c <_printf_float+0x240>
 8012ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ade:	4631      	mov	r1, r6
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	47b8      	blx	r7
 8012ae4:	3001      	adds	r0, #1
 8012ae6:	f43f af0e 	beq.w	8012906 <_printf_float+0xba>
 8012aea:	f04f 0900 	mov.w	r9, #0
 8012aee:	f104 0a1a 	add.w	sl, r4, #26
 8012af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af4:	425b      	negs	r3, r3
 8012af6:	454b      	cmp	r3, r9
 8012af8:	dc01      	bgt.n	8012afe <_printf_float+0x2b2>
 8012afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012afc:	e794      	b.n	8012a28 <_printf_float+0x1dc>
 8012afe:	2301      	movs	r3, #1
 8012b00:	4652      	mov	r2, sl
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f43f aefc 	beq.w	8012906 <_printf_float+0xba>
 8012b0e:	f109 0901 	add.w	r9, r9, #1
 8012b12:	e7ee      	b.n	8012af2 <_printf_float+0x2a6>
 8012b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	bfa8      	it	ge
 8012b1c:	461a      	movge	r2, r3
 8012b1e:	2a00      	cmp	r2, #0
 8012b20:	4691      	mov	r9, r2
 8012b22:	dd07      	ble.n	8012b34 <_printf_float+0x2e8>
 8012b24:	4613      	mov	r3, r2
 8012b26:	4631      	mov	r1, r6
 8012b28:	4642      	mov	r2, r8
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	47b8      	blx	r7
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f43f aee9 	beq.w	8012906 <_printf_float+0xba>
 8012b34:	f104 031a 	add.w	r3, r4, #26
 8012b38:	f04f 0b00 	mov.w	fp, #0
 8012b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b40:	9306      	str	r3, [sp, #24]
 8012b42:	e015      	b.n	8012b70 <_printf_float+0x324>
 8012b44:	7fefffff 	.word	0x7fefffff
 8012b48:	08014eac 	.word	0x08014eac
 8012b4c:	08014ea8 	.word	0x08014ea8
 8012b50:	08014eb4 	.word	0x08014eb4
 8012b54:	08014eb0 	.word	0x08014eb0
 8012b58:	08014eb8 	.word	0x08014eb8
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	9a06      	ldr	r2, [sp, #24]
 8012b60:	4631      	mov	r1, r6
 8012b62:	4628      	mov	r0, r5
 8012b64:	47b8      	blx	r7
 8012b66:	3001      	adds	r0, #1
 8012b68:	f43f aecd 	beq.w	8012906 <_printf_float+0xba>
 8012b6c:	f10b 0b01 	add.w	fp, fp, #1
 8012b70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012b74:	ebaa 0309 	sub.w	r3, sl, r9
 8012b78:	455b      	cmp	r3, fp
 8012b7a:	dcef      	bgt.n	8012b5c <_printf_float+0x310>
 8012b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b80:	429a      	cmp	r2, r3
 8012b82:	44d0      	add	r8, sl
 8012b84:	db15      	blt.n	8012bb2 <_printf_float+0x366>
 8012b86:	6823      	ldr	r3, [r4, #0]
 8012b88:	07da      	lsls	r2, r3, #31
 8012b8a:	d412      	bmi.n	8012bb2 <_printf_float+0x366>
 8012b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b90:	eba3 020a 	sub.w	r2, r3, sl
 8012b94:	eba3 0a01 	sub.w	sl, r3, r1
 8012b98:	4592      	cmp	sl, r2
 8012b9a:	bfa8      	it	ge
 8012b9c:	4692      	movge	sl, r2
 8012b9e:	f1ba 0f00 	cmp.w	sl, #0
 8012ba2:	dc0e      	bgt.n	8012bc2 <_printf_float+0x376>
 8012ba4:	f04f 0800 	mov.w	r8, #0
 8012ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012bac:	f104 091a 	add.w	r9, r4, #26
 8012bb0:	e019      	b.n	8012be6 <_printf_float+0x39a>
 8012bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bb6:	4631      	mov	r1, r6
 8012bb8:	4628      	mov	r0, r5
 8012bba:	47b8      	blx	r7
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	d1e5      	bne.n	8012b8c <_printf_float+0x340>
 8012bc0:	e6a1      	b.n	8012906 <_printf_float+0xba>
 8012bc2:	4653      	mov	r3, sl
 8012bc4:	4642      	mov	r2, r8
 8012bc6:	4631      	mov	r1, r6
 8012bc8:	4628      	mov	r0, r5
 8012bca:	47b8      	blx	r7
 8012bcc:	3001      	adds	r0, #1
 8012bce:	d1e9      	bne.n	8012ba4 <_printf_float+0x358>
 8012bd0:	e699      	b.n	8012906 <_printf_float+0xba>
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	464a      	mov	r2, r9
 8012bd6:	4631      	mov	r1, r6
 8012bd8:	4628      	mov	r0, r5
 8012bda:	47b8      	blx	r7
 8012bdc:	3001      	adds	r0, #1
 8012bde:	f43f ae92 	beq.w	8012906 <_printf_float+0xba>
 8012be2:	f108 0801 	add.w	r8, r8, #1
 8012be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bea:	1a9b      	subs	r3, r3, r2
 8012bec:	eba3 030a 	sub.w	r3, r3, sl
 8012bf0:	4543      	cmp	r3, r8
 8012bf2:	dcee      	bgt.n	8012bd2 <_printf_float+0x386>
 8012bf4:	e74a      	b.n	8012a8c <_printf_float+0x240>
 8012bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bf8:	2a01      	cmp	r2, #1
 8012bfa:	dc01      	bgt.n	8012c00 <_printf_float+0x3b4>
 8012bfc:	07db      	lsls	r3, r3, #31
 8012bfe:	d53a      	bpl.n	8012c76 <_printf_float+0x42a>
 8012c00:	2301      	movs	r3, #1
 8012c02:	4642      	mov	r2, r8
 8012c04:	4631      	mov	r1, r6
 8012c06:	4628      	mov	r0, r5
 8012c08:	47b8      	blx	r7
 8012c0a:	3001      	adds	r0, #1
 8012c0c:	f43f ae7b 	beq.w	8012906 <_printf_float+0xba>
 8012c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c14:	4631      	mov	r1, r6
 8012c16:	4628      	mov	r0, r5
 8012c18:	47b8      	blx	r7
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f108 0801 	add.w	r8, r8, #1
 8012c20:	f43f ae71 	beq.w	8012906 <_printf_float+0xba>
 8012c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c26:	2200      	movs	r2, #0
 8012c28:	f103 3aff 	add.w	sl, r3, #4294967295
 8012c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c30:	2300      	movs	r3, #0
 8012c32:	f7f5 fe81 	bl	8008938 <__aeabi_dcmpeq>
 8012c36:	b9c8      	cbnz	r0, 8012c6c <_printf_float+0x420>
 8012c38:	4653      	mov	r3, sl
 8012c3a:	4642      	mov	r2, r8
 8012c3c:	4631      	mov	r1, r6
 8012c3e:	4628      	mov	r0, r5
 8012c40:	47b8      	blx	r7
 8012c42:	3001      	adds	r0, #1
 8012c44:	d10e      	bne.n	8012c64 <_printf_float+0x418>
 8012c46:	e65e      	b.n	8012906 <_printf_float+0xba>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	4652      	mov	r2, sl
 8012c4c:	4631      	mov	r1, r6
 8012c4e:	4628      	mov	r0, r5
 8012c50:	47b8      	blx	r7
 8012c52:	3001      	adds	r0, #1
 8012c54:	f43f ae57 	beq.w	8012906 <_printf_float+0xba>
 8012c58:	f108 0801 	add.w	r8, r8, #1
 8012c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c5e:	3b01      	subs	r3, #1
 8012c60:	4543      	cmp	r3, r8
 8012c62:	dcf1      	bgt.n	8012c48 <_printf_float+0x3fc>
 8012c64:	464b      	mov	r3, r9
 8012c66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c6a:	e6de      	b.n	8012a2a <_printf_float+0x1de>
 8012c6c:	f04f 0800 	mov.w	r8, #0
 8012c70:	f104 0a1a 	add.w	sl, r4, #26
 8012c74:	e7f2      	b.n	8012c5c <_printf_float+0x410>
 8012c76:	2301      	movs	r3, #1
 8012c78:	e7df      	b.n	8012c3a <_printf_float+0x3ee>
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	464a      	mov	r2, r9
 8012c7e:	4631      	mov	r1, r6
 8012c80:	4628      	mov	r0, r5
 8012c82:	47b8      	blx	r7
 8012c84:	3001      	adds	r0, #1
 8012c86:	f43f ae3e 	beq.w	8012906 <_printf_float+0xba>
 8012c8a:	f108 0801 	add.w	r8, r8, #1
 8012c8e:	68e3      	ldr	r3, [r4, #12]
 8012c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c92:	1a9b      	subs	r3, r3, r2
 8012c94:	4543      	cmp	r3, r8
 8012c96:	dcf0      	bgt.n	8012c7a <_printf_float+0x42e>
 8012c98:	e6fc      	b.n	8012a94 <_printf_float+0x248>
 8012c9a:	f04f 0800 	mov.w	r8, #0
 8012c9e:	f104 0919 	add.w	r9, r4, #25
 8012ca2:	e7f4      	b.n	8012c8e <_printf_float+0x442>
 8012ca4:	2900      	cmp	r1, #0
 8012ca6:	f43f ae8b 	beq.w	80129c0 <_printf_float+0x174>
 8012caa:	2300      	movs	r3, #0
 8012cac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012cb0:	ab09      	add	r3, sp, #36	; 0x24
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	ec49 8b10 	vmov	d0, r8, r9
 8012cb8:	6022      	str	r2, [r4, #0]
 8012cba:	f8cd a004 	str.w	sl, [sp, #4]
 8012cbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7ff fd2d 	bl	8012722 <__cvt>
 8012cc8:	4680      	mov	r8, r0
 8012cca:	e648      	b.n	801295e <_printf_float+0x112>

08012ccc <_printf_common>:
 8012ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd0:	4691      	mov	r9, r2
 8012cd2:	461f      	mov	r7, r3
 8012cd4:	688a      	ldr	r2, [r1, #8]
 8012cd6:	690b      	ldr	r3, [r1, #16]
 8012cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	bfb8      	it	lt
 8012ce0:	4613      	movlt	r3, r2
 8012ce2:	f8c9 3000 	str.w	r3, [r9]
 8012ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cea:	4606      	mov	r6, r0
 8012cec:	460c      	mov	r4, r1
 8012cee:	b112      	cbz	r2, 8012cf6 <_printf_common+0x2a>
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	f8c9 3000 	str.w	r3, [r9]
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	0699      	lsls	r1, r3, #26
 8012cfa:	bf42      	ittt	mi
 8012cfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012d00:	3302      	addmi	r3, #2
 8012d02:	f8c9 3000 	strmi.w	r3, [r9]
 8012d06:	6825      	ldr	r5, [r4, #0]
 8012d08:	f015 0506 	ands.w	r5, r5, #6
 8012d0c:	d107      	bne.n	8012d1e <_printf_common+0x52>
 8012d0e:	f104 0a19 	add.w	sl, r4, #25
 8012d12:	68e3      	ldr	r3, [r4, #12]
 8012d14:	f8d9 2000 	ldr.w	r2, [r9]
 8012d18:	1a9b      	subs	r3, r3, r2
 8012d1a:	42ab      	cmp	r3, r5
 8012d1c:	dc28      	bgt.n	8012d70 <_printf_common+0xa4>
 8012d1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012d22:	6822      	ldr	r2, [r4, #0]
 8012d24:	3300      	adds	r3, #0
 8012d26:	bf18      	it	ne
 8012d28:	2301      	movne	r3, #1
 8012d2a:	0692      	lsls	r2, r2, #26
 8012d2c:	d42d      	bmi.n	8012d8a <_printf_common+0xbe>
 8012d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d32:	4639      	mov	r1, r7
 8012d34:	4630      	mov	r0, r6
 8012d36:	47c0      	blx	r8
 8012d38:	3001      	adds	r0, #1
 8012d3a:	d020      	beq.n	8012d7e <_printf_common+0xb2>
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	68e5      	ldr	r5, [r4, #12]
 8012d40:	f8d9 2000 	ldr.w	r2, [r9]
 8012d44:	f003 0306 	and.w	r3, r3, #6
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	bf08      	it	eq
 8012d4c:	1aad      	subeq	r5, r5, r2
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	6922      	ldr	r2, [r4, #16]
 8012d52:	bf0c      	ite	eq
 8012d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d58:	2500      	movne	r5, #0
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	bfc4      	itt	gt
 8012d5e:	1a9b      	subgt	r3, r3, r2
 8012d60:	18ed      	addgt	r5, r5, r3
 8012d62:	f04f 0900 	mov.w	r9, #0
 8012d66:	341a      	adds	r4, #26
 8012d68:	454d      	cmp	r5, r9
 8012d6a:	d11a      	bne.n	8012da2 <_printf_common+0xd6>
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	e008      	b.n	8012d82 <_printf_common+0xb6>
 8012d70:	2301      	movs	r3, #1
 8012d72:	4652      	mov	r2, sl
 8012d74:	4639      	mov	r1, r7
 8012d76:	4630      	mov	r0, r6
 8012d78:	47c0      	blx	r8
 8012d7a:	3001      	adds	r0, #1
 8012d7c:	d103      	bne.n	8012d86 <_printf_common+0xba>
 8012d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d86:	3501      	adds	r5, #1
 8012d88:	e7c3      	b.n	8012d12 <_printf_common+0x46>
 8012d8a:	18e1      	adds	r1, r4, r3
 8012d8c:	1c5a      	adds	r2, r3, #1
 8012d8e:	2030      	movs	r0, #48	; 0x30
 8012d90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d94:	4422      	add	r2, r4
 8012d96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d9e:	3302      	adds	r3, #2
 8012da0:	e7c5      	b.n	8012d2e <_printf_common+0x62>
 8012da2:	2301      	movs	r3, #1
 8012da4:	4622      	mov	r2, r4
 8012da6:	4639      	mov	r1, r7
 8012da8:	4630      	mov	r0, r6
 8012daa:	47c0      	blx	r8
 8012dac:	3001      	adds	r0, #1
 8012dae:	d0e6      	beq.n	8012d7e <_printf_common+0xb2>
 8012db0:	f109 0901 	add.w	r9, r9, #1
 8012db4:	e7d8      	b.n	8012d68 <_printf_common+0x9c>
	...

08012db8 <_printf_i>:
 8012db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012dc0:	460c      	mov	r4, r1
 8012dc2:	7e09      	ldrb	r1, [r1, #24]
 8012dc4:	b085      	sub	sp, #20
 8012dc6:	296e      	cmp	r1, #110	; 0x6e
 8012dc8:	4617      	mov	r7, r2
 8012dca:	4606      	mov	r6, r0
 8012dcc:	4698      	mov	r8, r3
 8012dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dd0:	f000 80b3 	beq.w	8012f3a <_printf_i+0x182>
 8012dd4:	d822      	bhi.n	8012e1c <_printf_i+0x64>
 8012dd6:	2963      	cmp	r1, #99	; 0x63
 8012dd8:	d036      	beq.n	8012e48 <_printf_i+0x90>
 8012dda:	d80a      	bhi.n	8012df2 <_printf_i+0x3a>
 8012ddc:	2900      	cmp	r1, #0
 8012dde:	f000 80b9 	beq.w	8012f54 <_printf_i+0x19c>
 8012de2:	2958      	cmp	r1, #88	; 0x58
 8012de4:	f000 8083 	beq.w	8012eee <_printf_i+0x136>
 8012de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012df0:	e032      	b.n	8012e58 <_printf_i+0xa0>
 8012df2:	2964      	cmp	r1, #100	; 0x64
 8012df4:	d001      	beq.n	8012dfa <_printf_i+0x42>
 8012df6:	2969      	cmp	r1, #105	; 0x69
 8012df8:	d1f6      	bne.n	8012de8 <_printf_i+0x30>
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	6813      	ldr	r3, [r2, #0]
 8012dfe:	0605      	lsls	r5, r0, #24
 8012e00:	f103 0104 	add.w	r1, r3, #4
 8012e04:	d52a      	bpl.n	8012e5c <_printf_i+0xa4>
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	6011      	str	r1, [r2, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	da03      	bge.n	8012e16 <_printf_i+0x5e>
 8012e0e:	222d      	movs	r2, #45	; 0x2d
 8012e10:	425b      	negs	r3, r3
 8012e12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012e16:	486f      	ldr	r0, [pc, #444]	; (8012fd4 <_printf_i+0x21c>)
 8012e18:	220a      	movs	r2, #10
 8012e1a:	e039      	b.n	8012e90 <_printf_i+0xd8>
 8012e1c:	2973      	cmp	r1, #115	; 0x73
 8012e1e:	f000 809d 	beq.w	8012f5c <_printf_i+0x1a4>
 8012e22:	d808      	bhi.n	8012e36 <_printf_i+0x7e>
 8012e24:	296f      	cmp	r1, #111	; 0x6f
 8012e26:	d020      	beq.n	8012e6a <_printf_i+0xb2>
 8012e28:	2970      	cmp	r1, #112	; 0x70
 8012e2a:	d1dd      	bne.n	8012de8 <_printf_i+0x30>
 8012e2c:	6823      	ldr	r3, [r4, #0]
 8012e2e:	f043 0320 	orr.w	r3, r3, #32
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	e003      	b.n	8012e3e <_printf_i+0x86>
 8012e36:	2975      	cmp	r1, #117	; 0x75
 8012e38:	d017      	beq.n	8012e6a <_printf_i+0xb2>
 8012e3a:	2978      	cmp	r1, #120	; 0x78
 8012e3c:	d1d4      	bne.n	8012de8 <_printf_i+0x30>
 8012e3e:	2378      	movs	r3, #120	; 0x78
 8012e40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e44:	4864      	ldr	r0, [pc, #400]	; (8012fd8 <_printf_i+0x220>)
 8012e46:	e055      	b.n	8012ef4 <_printf_i+0x13c>
 8012e48:	6813      	ldr	r3, [r2, #0]
 8012e4a:	1d19      	adds	r1, r3, #4
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	6011      	str	r1, [r2, #0]
 8012e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e58:	2301      	movs	r3, #1
 8012e5a:	e08c      	b.n	8012f76 <_printf_i+0x1be>
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	6011      	str	r1, [r2, #0]
 8012e60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e64:	bf18      	it	ne
 8012e66:	b21b      	sxthne	r3, r3
 8012e68:	e7cf      	b.n	8012e0a <_printf_i+0x52>
 8012e6a:	6813      	ldr	r3, [r2, #0]
 8012e6c:	6825      	ldr	r5, [r4, #0]
 8012e6e:	1d18      	adds	r0, r3, #4
 8012e70:	6010      	str	r0, [r2, #0]
 8012e72:	0628      	lsls	r0, r5, #24
 8012e74:	d501      	bpl.n	8012e7a <_printf_i+0xc2>
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	e002      	b.n	8012e80 <_printf_i+0xc8>
 8012e7a:	0668      	lsls	r0, r5, #25
 8012e7c:	d5fb      	bpl.n	8012e76 <_printf_i+0xbe>
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	4854      	ldr	r0, [pc, #336]	; (8012fd4 <_printf_i+0x21c>)
 8012e82:	296f      	cmp	r1, #111	; 0x6f
 8012e84:	bf14      	ite	ne
 8012e86:	220a      	movne	r2, #10
 8012e88:	2208      	moveq	r2, #8
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e90:	6865      	ldr	r5, [r4, #4]
 8012e92:	60a5      	str	r5, [r4, #8]
 8012e94:	2d00      	cmp	r5, #0
 8012e96:	f2c0 8095 	blt.w	8012fc4 <_printf_i+0x20c>
 8012e9a:	6821      	ldr	r1, [r4, #0]
 8012e9c:	f021 0104 	bic.w	r1, r1, #4
 8012ea0:	6021      	str	r1, [r4, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d13d      	bne.n	8012f22 <_printf_i+0x16a>
 8012ea6:	2d00      	cmp	r5, #0
 8012ea8:	f040 808e 	bne.w	8012fc8 <_printf_i+0x210>
 8012eac:	4665      	mov	r5, ip
 8012eae:	2a08      	cmp	r2, #8
 8012eb0:	d10b      	bne.n	8012eca <_printf_i+0x112>
 8012eb2:	6823      	ldr	r3, [r4, #0]
 8012eb4:	07db      	lsls	r3, r3, #31
 8012eb6:	d508      	bpl.n	8012eca <_printf_i+0x112>
 8012eb8:	6923      	ldr	r3, [r4, #16]
 8012eba:	6862      	ldr	r2, [r4, #4]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	bfde      	ittt	le
 8012ec0:	2330      	movle	r3, #48	; 0x30
 8012ec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ec6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012eca:	ebac 0305 	sub.w	r3, ip, r5
 8012ece:	6123      	str	r3, [r4, #16]
 8012ed0:	f8cd 8000 	str.w	r8, [sp]
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	aa03      	add	r2, sp, #12
 8012ed8:	4621      	mov	r1, r4
 8012eda:	4630      	mov	r0, r6
 8012edc:	f7ff fef6 	bl	8012ccc <_printf_common>
 8012ee0:	3001      	adds	r0, #1
 8012ee2:	d14d      	bne.n	8012f80 <_printf_i+0x1c8>
 8012ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee8:	b005      	add	sp, #20
 8012eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eee:	4839      	ldr	r0, [pc, #228]	; (8012fd4 <_printf_i+0x21c>)
 8012ef0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012ef4:	6813      	ldr	r3, [r2, #0]
 8012ef6:	6821      	ldr	r1, [r4, #0]
 8012ef8:	1d1d      	adds	r5, r3, #4
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	6015      	str	r5, [r2, #0]
 8012efe:	060a      	lsls	r2, r1, #24
 8012f00:	d50b      	bpl.n	8012f1a <_printf_i+0x162>
 8012f02:	07ca      	lsls	r2, r1, #31
 8012f04:	bf44      	itt	mi
 8012f06:	f041 0120 	orrmi.w	r1, r1, #32
 8012f0a:	6021      	strmi	r1, [r4, #0]
 8012f0c:	b91b      	cbnz	r3, 8012f16 <_printf_i+0x15e>
 8012f0e:	6822      	ldr	r2, [r4, #0]
 8012f10:	f022 0220 	bic.w	r2, r2, #32
 8012f14:	6022      	str	r2, [r4, #0]
 8012f16:	2210      	movs	r2, #16
 8012f18:	e7b7      	b.n	8012e8a <_printf_i+0xd2>
 8012f1a:	064d      	lsls	r5, r1, #25
 8012f1c:	bf48      	it	mi
 8012f1e:	b29b      	uxthmi	r3, r3
 8012f20:	e7ef      	b.n	8012f02 <_printf_i+0x14a>
 8012f22:	4665      	mov	r5, ip
 8012f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f28:	fb02 3311 	mls	r3, r2, r1, r3
 8012f2c:	5cc3      	ldrb	r3, [r0, r3]
 8012f2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012f32:	460b      	mov	r3, r1
 8012f34:	2900      	cmp	r1, #0
 8012f36:	d1f5      	bne.n	8012f24 <_printf_i+0x16c>
 8012f38:	e7b9      	b.n	8012eae <_printf_i+0xf6>
 8012f3a:	6813      	ldr	r3, [r2, #0]
 8012f3c:	6825      	ldr	r5, [r4, #0]
 8012f3e:	6961      	ldr	r1, [r4, #20]
 8012f40:	1d18      	adds	r0, r3, #4
 8012f42:	6010      	str	r0, [r2, #0]
 8012f44:	0628      	lsls	r0, r5, #24
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	d501      	bpl.n	8012f4e <_printf_i+0x196>
 8012f4a:	6019      	str	r1, [r3, #0]
 8012f4c:	e002      	b.n	8012f54 <_printf_i+0x19c>
 8012f4e:	066a      	lsls	r2, r5, #25
 8012f50:	d5fb      	bpl.n	8012f4a <_printf_i+0x192>
 8012f52:	8019      	strh	r1, [r3, #0]
 8012f54:	2300      	movs	r3, #0
 8012f56:	6123      	str	r3, [r4, #16]
 8012f58:	4665      	mov	r5, ip
 8012f5a:	e7b9      	b.n	8012ed0 <_printf_i+0x118>
 8012f5c:	6813      	ldr	r3, [r2, #0]
 8012f5e:	1d19      	adds	r1, r3, #4
 8012f60:	6011      	str	r1, [r2, #0]
 8012f62:	681d      	ldr	r5, [r3, #0]
 8012f64:	6862      	ldr	r2, [r4, #4]
 8012f66:	2100      	movs	r1, #0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f7f5 f871 	bl	8008050 <memchr>
 8012f6e:	b108      	cbz	r0, 8012f74 <_printf_i+0x1bc>
 8012f70:	1b40      	subs	r0, r0, r5
 8012f72:	6060      	str	r0, [r4, #4]
 8012f74:	6863      	ldr	r3, [r4, #4]
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	2300      	movs	r3, #0
 8012f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f7e:	e7a7      	b.n	8012ed0 <_printf_i+0x118>
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	462a      	mov	r2, r5
 8012f84:	4639      	mov	r1, r7
 8012f86:	4630      	mov	r0, r6
 8012f88:	47c0      	blx	r8
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	d0aa      	beq.n	8012ee4 <_printf_i+0x12c>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	079b      	lsls	r3, r3, #30
 8012f92:	d413      	bmi.n	8012fbc <_printf_i+0x204>
 8012f94:	68e0      	ldr	r0, [r4, #12]
 8012f96:	9b03      	ldr	r3, [sp, #12]
 8012f98:	4298      	cmp	r0, r3
 8012f9a:	bfb8      	it	lt
 8012f9c:	4618      	movlt	r0, r3
 8012f9e:	e7a3      	b.n	8012ee8 <_printf_i+0x130>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	464a      	mov	r2, r9
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	47c0      	blx	r8
 8012faa:	3001      	adds	r0, #1
 8012fac:	d09a      	beq.n	8012ee4 <_printf_i+0x12c>
 8012fae:	3501      	adds	r5, #1
 8012fb0:	68e3      	ldr	r3, [r4, #12]
 8012fb2:	9a03      	ldr	r2, [sp, #12]
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	42ab      	cmp	r3, r5
 8012fb8:	dcf2      	bgt.n	8012fa0 <_printf_i+0x1e8>
 8012fba:	e7eb      	b.n	8012f94 <_printf_i+0x1dc>
 8012fbc:	2500      	movs	r5, #0
 8012fbe:	f104 0919 	add.w	r9, r4, #25
 8012fc2:	e7f5      	b.n	8012fb0 <_printf_i+0x1f8>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d1ac      	bne.n	8012f22 <_printf_i+0x16a>
 8012fc8:	7803      	ldrb	r3, [r0, #0]
 8012fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fd2:	e76c      	b.n	8012eae <_printf_i+0xf6>
 8012fd4:	08014eba 	.word	0x08014eba
 8012fd8:	08014ecb 	.word	0x08014ecb

08012fdc <iprintf>:
 8012fdc:	b40f      	push	{r0, r1, r2, r3}
 8012fde:	4b0a      	ldr	r3, [pc, #40]	; (8013008 <iprintf+0x2c>)
 8012fe0:	b513      	push	{r0, r1, r4, lr}
 8012fe2:	681c      	ldr	r4, [r3, #0]
 8012fe4:	b124      	cbz	r4, 8012ff0 <iprintf+0x14>
 8012fe6:	69a3      	ldr	r3, [r4, #24]
 8012fe8:	b913      	cbnz	r3, 8012ff0 <iprintf+0x14>
 8012fea:	4620      	mov	r0, r4
 8012fec:	f001 f868 	bl	80140c0 <__sinit>
 8012ff0:	ab05      	add	r3, sp, #20
 8012ff2:	9a04      	ldr	r2, [sp, #16]
 8012ff4:	68a1      	ldr	r1, [r4, #8]
 8012ff6:	9301      	str	r3, [sp, #4]
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f001 fd21 	bl	8014a40 <_vfiprintf_r>
 8012ffe:	b002      	add	sp, #8
 8013000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013004:	b004      	add	sp, #16
 8013006:	4770      	bx	lr
 8013008:	20000010 	.word	0x20000010

0801300c <_puts_r>:
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	460e      	mov	r6, r1
 8013010:	4605      	mov	r5, r0
 8013012:	b118      	cbz	r0, 801301c <_puts_r+0x10>
 8013014:	6983      	ldr	r3, [r0, #24]
 8013016:	b90b      	cbnz	r3, 801301c <_puts_r+0x10>
 8013018:	f001 f852 	bl	80140c0 <__sinit>
 801301c:	69ab      	ldr	r3, [r5, #24]
 801301e:	68ac      	ldr	r4, [r5, #8]
 8013020:	b913      	cbnz	r3, 8013028 <_puts_r+0x1c>
 8013022:	4628      	mov	r0, r5
 8013024:	f001 f84c 	bl	80140c0 <__sinit>
 8013028:	4b23      	ldr	r3, [pc, #140]	; (80130b8 <_puts_r+0xac>)
 801302a:	429c      	cmp	r4, r3
 801302c:	d117      	bne.n	801305e <_puts_r+0x52>
 801302e:	686c      	ldr	r4, [r5, #4]
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	071b      	lsls	r3, r3, #28
 8013034:	d51d      	bpl.n	8013072 <_puts_r+0x66>
 8013036:	6923      	ldr	r3, [r4, #16]
 8013038:	b1db      	cbz	r3, 8013072 <_puts_r+0x66>
 801303a:	3e01      	subs	r6, #1
 801303c:	68a3      	ldr	r3, [r4, #8]
 801303e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013042:	3b01      	subs	r3, #1
 8013044:	60a3      	str	r3, [r4, #8]
 8013046:	b9e9      	cbnz	r1, 8013084 <_puts_r+0x78>
 8013048:	2b00      	cmp	r3, #0
 801304a:	da2e      	bge.n	80130aa <_puts_r+0x9e>
 801304c:	4622      	mov	r2, r4
 801304e:	210a      	movs	r1, #10
 8013050:	4628      	mov	r0, r5
 8013052:	f000 f83f 	bl	80130d4 <__swbuf_r>
 8013056:	3001      	adds	r0, #1
 8013058:	d011      	beq.n	801307e <_puts_r+0x72>
 801305a:	200a      	movs	r0, #10
 801305c:	e011      	b.n	8013082 <_puts_r+0x76>
 801305e:	4b17      	ldr	r3, [pc, #92]	; (80130bc <_puts_r+0xb0>)
 8013060:	429c      	cmp	r4, r3
 8013062:	d101      	bne.n	8013068 <_puts_r+0x5c>
 8013064:	68ac      	ldr	r4, [r5, #8]
 8013066:	e7e3      	b.n	8013030 <_puts_r+0x24>
 8013068:	4b15      	ldr	r3, [pc, #84]	; (80130c0 <_puts_r+0xb4>)
 801306a:	429c      	cmp	r4, r3
 801306c:	bf08      	it	eq
 801306e:	68ec      	ldreq	r4, [r5, #12]
 8013070:	e7de      	b.n	8013030 <_puts_r+0x24>
 8013072:	4621      	mov	r1, r4
 8013074:	4628      	mov	r0, r5
 8013076:	f000 f87f 	bl	8013178 <__swsetup_r>
 801307a:	2800      	cmp	r0, #0
 801307c:	d0dd      	beq.n	801303a <_puts_r+0x2e>
 801307e:	f04f 30ff 	mov.w	r0, #4294967295
 8013082:	bd70      	pop	{r4, r5, r6, pc}
 8013084:	2b00      	cmp	r3, #0
 8013086:	da04      	bge.n	8013092 <_puts_r+0x86>
 8013088:	69a2      	ldr	r2, [r4, #24]
 801308a:	429a      	cmp	r2, r3
 801308c:	dc06      	bgt.n	801309c <_puts_r+0x90>
 801308e:	290a      	cmp	r1, #10
 8013090:	d004      	beq.n	801309c <_puts_r+0x90>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	1c5a      	adds	r2, r3, #1
 8013096:	6022      	str	r2, [r4, #0]
 8013098:	7019      	strb	r1, [r3, #0]
 801309a:	e7cf      	b.n	801303c <_puts_r+0x30>
 801309c:	4622      	mov	r2, r4
 801309e:	4628      	mov	r0, r5
 80130a0:	f000 f818 	bl	80130d4 <__swbuf_r>
 80130a4:	3001      	adds	r0, #1
 80130a6:	d1c9      	bne.n	801303c <_puts_r+0x30>
 80130a8:	e7e9      	b.n	801307e <_puts_r+0x72>
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	200a      	movs	r0, #10
 80130ae:	1c5a      	adds	r2, r3, #1
 80130b0:	6022      	str	r2, [r4, #0]
 80130b2:	7018      	strb	r0, [r3, #0]
 80130b4:	e7e5      	b.n	8013082 <_puts_r+0x76>
 80130b6:	bf00      	nop
 80130b8:	08014f0c 	.word	0x08014f0c
 80130bc:	08014f2c 	.word	0x08014f2c
 80130c0:	08014eec 	.word	0x08014eec

080130c4 <puts>:
 80130c4:	4b02      	ldr	r3, [pc, #8]	; (80130d0 <puts+0xc>)
 80130c6:	4601      	mov	r1, r0
 80130c8:	6818      	ldr	r0, [r3, #0]
 80130ca:	f7ff bf9f 	b.w	801300c <_puts_r>
 80130ce:	bf00      	nop
 80130d0:	20000010 	.word	0x20000010

080130d4 <__swbuf_r>:
 80130d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130d6:	460e      	mov	r6, r1
 80130d8:	4614      	mov	r4, r2
 80130da:	4605      	mov	r5, r0
 80130dc:	b118      	cbz	r0, 80130e6 <__swbuf_r+0x12>
 80130de:	6983      	ldr	r3, [r0, #24]
 80130e0:	b90b      	cbnz	r3, 80130e6 <__swbuf_r+0x12>
 80130e2:	f000 ffed 	bl	80140c0 <__sinit>
 80130e6:	4b21      	ldr	r3, [pc, #132]	; (801316c <__swbuf_r+0x98>)
 80130e8:	429c      	cmp	r4, r3
 80130ea:	d12a      	bne.n	8013142 <__swbuf_r+0x6e>
 80130ec:	686c      	ldr	r4, [r5, #4]
 80130ee:	69a3      	ldr	r3, [r4, #24]
 80130f0:	60a3      	str	r3, [r4, #8]
 80130f2:	89a3      	ldrh	r3, [r4, #12]
 80130f4:	071a      	lsls	r2, r3, #28
 80130f6:	d52e      	bpl.n	8013156 <__swbuf_r+0x82>
 80130f8:	6923      	ldr	r3, [r4, #16]
 80130fa:	b363      	cbz	r3, 8013156 <__swbuf_r+0x82>
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	6820      	ldr	r0, [r4, #0]
 8013100:	1ac0      	subs	r0, r0, r3
 8013102:	6963      	ldr	r3, [r4, #20]
 8013104:	b2f6      	uxtb	r6, r6
 8013106:	4283      	cmp	r3, r0
 8013108:	4637      	mov	r7, r6
 801310a:	dc04      	bgt.n	8013116 <__swbuf_r+0x42>
 801310c:	4621      	mov	r1, r4
 801310e:	4628      	mov	r0, r5
 8013110:	f000 ff6c 	bl	8013fec <_fflush_r>
 8013114:	bb28      	cbnz	r0, 8013162 <__swbuf_r+0x8e>
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	3b01      	subs	r3, #1
 801311a:	60a3      	str	r3, [r4, #8]
 801311c:	6823      	ldr	r3, [r4, #0]
 801311e:	1c5a      	adds	r2, r3, #1
 8013120:	6022      	str	r2, [r4, #0]
 8013122:	701e      	strb	r6, [r3, #0]
 8013124:	6963      	ldr	r3, [r4, #20]
 8013126:	3001      	adds	r0, #1
 8013128:	4283      	cmp	r3, r0
 801312a:	d004      	beq.n	8013136 <__swbuf_r+0x62>
 801312c:	89a3      	ldrh	r3, [r4, #12]
 801312e:	07db      	lsls	r3, r3, #31
 8013130:	d519      	bpl.n	8013166 <__swbuf_r+0x92>
 8013132:	2e0a      	cmp	r6, #10
 8013134:	d117      	bne.n	8013166 <__swbuf_r+0x92>
 8013136:	4621      	mov	r1, r4
 8013138:	4628      	mov	r0, r5
 801313a:	f000 ff57 	bl	8013fec <_fflush_r>
 801313e:	b190      	cbz	r0, 8013166 <__swbuf_r+0x92>
 8013140:	e00f      	b.n	8013162 <__swbuf_r+0x8e>
 8013142:	4b0b      	ldr	r3, [pc, #44]	; (8013170 <__swbuf_r+0x9c>)
 8013144:	429c      	cmp	r4, r3
 8013146:	d101      	bne.n	801314c <__swbuf_r+0x78>
 8013148:	68ac      	ldr	r4, [r5, #8]
 801314a:	e7d0      	b.n	80130ee <__swbuf_r+0x1a>
 801314c:	4b09      	ldr	r3, [pc, #36]	; (8013174 <__swbuf_r+0xa0>)
 801314e:	429c      	cmp	r4, r3
 8013150:	bf08      	it	eq
 8013152:	68ec      	ldreq	r4, [r5, #12]
 8013154:	e7cb      	b.n	80130ee <__swbuf_r+0x1a>
 8013156:	4621      	mov	r1, r4
 8013158:	4628      	mov	r0, r5
 801315a:	f000 f80d 	bl	8013178 <__swsetup_r>
 801315e:	2800      	cmp	r0, #0
 8013160:	d0cc      	beq.n	80130fc <__swbuf_r+0x28>
 8013162:	f04f 37ff 	mov.w	r7, #4294967295
 8013166:	4638      	mov	r0, r7
 8013168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801316a:	bf00      	nop
 801316c:	08014f0c 	.word	0x08014f0c
 8013170:	08014f2c 	.word	0x08014f2c
 8013174:	08014eec 	.word	0x08014eec

08013178 <__swsetup_r>:
 8013178:	4b32      	ldr	r3, [pc, #200]	; (8013244 <__swsetup_r+0xcc>)
 801317a:	b570      	push	{r4, r5, r6, lr}
 801317c:	681d      	ldr	r5, [r3, #0]
 801317e:	4606      	mov	r6, r0
 8013180:	460c      	mov	r4, r1
 8013182:	b125      	cbz	r5, 801318e <__swsetup_r+0x16>
 8013184:	69ab      	ldr	r3, [r5, #24]
 8013186:	b913      	cbnz	r3, 801318e <__swsetup_r+0x16>
 8013188:	4628      	mov	r0, r5
 801318a:	f000 ff99 	bl	80140c0 <__sinit>
 801318e:	4b2e      	ldr	r3, [pc, #184]	; (8013248 <__swsetup_r+0xd0>)
 8013190:	429c      	cmp	r4, r3
 8013192:	d10f      	bne.n	80131b4 <__swsetup_r+0x3c>
 8013194:	686c      	ldr	r4, [r5, #4]
 8013196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801319a:	b29a      	uxth	r2, r3
 801319c:	0715      	lsls	r5, r2, #28
 801319e:	d42c      	bmi.n	80131fa <__swsetup_r+0x82>
 80131a0:	06d0      	lsls	r0, r2, #27
 80131a2:	d411      	bmi.n	80131c8 <__swsetup_r+0x50>
 80131a4:	2209      	movs	r2, #9
 80131a6:	6032      	str	r2, [r6, #0]
 80131a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131ac:	81a3      	strh	r3, [r4, #12]
 80131ae:	f04f 30ff 	mov.w	r0, #4294967295
 80131b2:	e03e      	b.n	8013232 <__swsetup_r+0xba>
 80131b4:	4b25      	ldr	r3, [pc, #148]	; (801324c <__swsetup_r+0xd4>)
 80131b6:	429c      	cmp	r4, r3
 80131b8:	d101      	bne.n	80131be <__swsetup_r+0x46>
 80131ba:	68ac      	ldr	r4, [r5, #8]
 80131bc:	e7eb      	b.n	8013196 <__swsetup_r+0x1e>
 80131be:	4b24      	ldr	r3, [pc, #144]	; (8013250 <__swsetup_r+0xd8>)
 80131c0:	429c      	cmp	r4, r3
 80131c2:	bf08      	it	eq
 80131c4:	68ec      	ldreq	r4, [r5, #12]
 80131c6:	e7e6      	b.n	8013196 <__swsetup_r+0x1e>
 80131c8:	0751      	lsls	r1, r2, #29
 80131ca:	d512      	bpl.n	80131f2 <__swsetup_r+0x7a>
 80131cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131ce:	b141      	cbz	r1, 80131e2 <__swsetup_r+0x6a>
 80131d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131d4:	4299      	cmp	r1, r3
 80131d6:	d002      	beq.n	80131de <__swsetup_r+0x66>
 80131d8:	4630      	mov	r0, r6
 80131da:	f001 fb5f 	bl	801489c <_free_r>
 80131de:	2300      	movs	r3, #0
 80131e0:	6363      	str	r3, [r4, #52]	; 0x34
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131e8:	81a3      	strh	r3, [r4, #12]
 80131ea:	2300      	movs	r3, #0
 80131ec:	6063      	str	r3, [r4, #4]
 80131ee:	6923      	ldr	r3, [r4, #16]
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	89a3      	ldrh	r3, [r4, #12]
 80131f4:	f043 0308 	orr.w	r3, r3, #8
 80131f8:	81a3      	strh	r3, [r4, #12]
 80131fa:	6923      	ldr	r3, [r4, #16]
 80131fc:	b94b      	cbnz	r3, 8013212 <__swsetup_r+0x9a>
 80131fe:	89a3      	ldrh	r3, [r4, #12]
 8013200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013208:	d003      	beq.n	8013212 <__swsetup_r+0x9a>
 801320a:	4621      	mov	r1, r4
 801320c:	4630      	mov	r0, r6
 801320e:	f001 f813 	bl	8014238 <__smakebuf_r>
 8013212:	89a2      	ldrh	r2, [r4, #12]
 8013214:	f012 0301 	ands.w	r3, r2, #1
 8013218:	d00c      	beq.n	8013234 <__swsetup_r+0xbc>
 801321a:	2300      	movs	r3, #0
 801321c:	60a3      	str	r3, [r4, #8]
 801321e:	6963      	ldr	r3, [r4, #20]
 8013220:	425b      	negs	r3, r3
 8013222:	61a3      	str	r3, [r4, #24]
 8013224:	6923      	ldr	r3, [r4, #16]
 8013226:	b953      	cbnz	r3, 801323e <__swsetup_r+0xc6>
 8013228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013230:	d1ba      	bne.n	80131a8 <__swsetup_r+0x30>
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	0792      	lsls	r2, r2, #30
 8013236:	bf58      	it	pl
 8013238:	6963      	ldrpl	r3, [r4, #20]
 801323a:	60a3      	str	r3, [r4, #8]
 801323c:	e7f2      	b.n	8013224 <__swsetup_r+0xac>
 801323e:	2000      	movs	r0, #0
 8013240:	e7f7      	b.n	8013232 <__swsetup_r+0xba>
 8013242:	bf00      	nop
 8013244:	20000010 	.word	0x20000010
 8013248:	08014f0c 	.word	0x08014f0c
 801324c:	08014f2c 	.word	0x08014f2c
 8013250:	08014eec 	.word	0x08014eec

08013254 <quorem>:
 8013254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	6903      	ldr	r3, [r0, #16]
 801325a:	690c      	ldr	r4, [r1, #16]
 801325c:	42a3      	cmp	r3, r4
 801325e:	4680      	mov	r8, r0
 8013260:	f2c0 8082 	blt.w	8013368 <quorem+0x114>
 8013264:	3c01      	subs	r4, #1
 8013266:	f101 0714 	add.w	r7, r1, #20
 801326a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801326e:	f100 0614 	add.w	r6, r0, #20
 8013272:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013276:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801327a:	eb06 030c 	add.w	r3, r6, ip
 801327e:	3501      	adds	r5, #1
 8013280:	eb07 090c 	add.w	r9, r7, ip
 8013284:	9301      	str	r3, [sp, #4]
 8013286:	fbb0 f5f5 	udiv	r5, r0, r5
 801328a:	b395      	cbz	r5, 80132f2 <quorem+0x9e>
 801328c:	f04f 0a00 	mov.w	sl, #0
 8013290:	4638      	mov	r0, r7
 8013292:	46b6      	mov	lr, r6
 8013294:	46d3      	mov	fp, sl
 8013296:	f850 2b04 	ldr.w	r2, [r0], #4
 801329a:	b293      	uxth	r3, r2
 801329c:	fb05 a303 	mla	r3, r5, r3, sl
 80132a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	ebab 0303 	sub.w	r3, fp, r3
 80132aa:	0c12      	lsrs	r2, r2, #16
 80132ac:	f8de b000 	ldr.w	fp, [lr]
 80132b0:	fb05 a202 	mla	r2, r5, r2, sl
 80132b4:	fa13 f38b 	uxtah	r3, r3, fp
 80132b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80132bc:	fa1f fb82 	uxth.w	fp, r2
 80132c0:	f8de 2000 	ldr.w	r2, [lr]
 80132c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80132c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132d2:	4581      	cmp	r9, r0
 80132d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80132d8:	f84e 3b04 	str.w	r3, [lr], #4
 80132dc:	d2db      	bcs.n	8013296 <quorem+0x42>
 80132de:	f856 300c 	ldr.w	r3, [r6, ip]
 80132e2:	b933      	cbnz	r3, 80132f2 <quorem+0x9e>
 80132e4:	9b01      	ldr	r3, [sp, #4]
 80132e6:	3b04      	subs	r3, #4
 80132e8:	429e      	cmp	r6, r3
 80132ea:	461a      	mov	r2, r3
 80132ec:	d330      	bcc.n	8013350 <quorem+0xfc>
 80132ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80132f2:	4640      	mov	r0, r8
 80132f4:	f001 f9fe 	bl	80146f4 <__mcmp>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	db25      	blt.n	8013348 <quorem+0xf4>
 80132fc:	3501      	adds	r5, #1
 80132fe:	4630      	mov	r0, r6
 8013300:	f04f 0c00 	mov.w	ip, #0
 8013304:	f857 2b04 	ldr.w	r2, [r7], #4
 8013308:	f8d0 e000 	ldr.w	lr, [r0]
 801330c:	b293      	uxth	r3, r2
 801330e:	ebac 0303 	sub.w	r3, ip, r3
 8013312:	0c12      	lsrs	r2, r2, #16
 8013314:	fa13 f38e 	uxtah	r3, r3, lr
 8013318:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801331c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013320:	b29b      	uxth	r3, r3
 8013322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013326:	45b9      	cmp	r9, r7
 8013328:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801332c:	f840 3b04 	str.w	r3, [r0], #4
 8013330:	d2e8      	bcs.n	8013304 <quorem+0xb0>
 8013332:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013336:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801333a:	b92a      	cbnz	r2, 8013348 <quorem+0xf4>
 801333c:	3b04      	subs	r3, #4
 801333e:	429e      	cmp	r6, r3
 8013340:	461a      	mov	r2, r3
 8013342:	d30b      	bcc.n	801335c <quorem+0x108>
 8013344:	f8c8 4010 	str.w	r4, [r8, #16]
 8013348:	4628      	mov	r0, r5
 801334a:	b003      	add	sp, #12
 801334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013350:	6812      	ldr	r2, [r2, #0]
 8013352:	3b04      	subs	r3, #4
 8013354:	2a00      	cmp	r2, #0
 8013356:	d1ca      	bne.n	80132ee <quorem+0x9a>
 8013358:	3c01      	subs	r4, #1
 801335a:	e7c5      	b.n	80132e8 <quorem+0x94>
 801335c:	6812      	ldr	r2, [r2, #0]
 801335e:	3b04      	subs	r3, #4
 8013360:	2a00      	cmp	r2, #0
 8013362:	d1ef      	bne.n	8013344 <quorem+0xf0>
 8013364:	3c01      	subs	r4, #1
 8013366:	e7ea      	b.n	801333e <quorem+0xea>
 8013368:	2000      	movs	r0, #0
 801336a:	e7ee      	b.n	801334a <quorem+0xf6>
 801336c:	0000      	movs	r0, r0
	...

08013370 <_dtoa_r>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	ec57 6b10 	vmov	r6, r7, d0
 8013378:	b097      	sub	sp, #92	; 0x5c
 801337a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801337c:	9106      	str	r1, [sp, #24]
 801337e:	4604      	mov	r4, r0
 8013380:	920b      	str	r2, [sp, #44]	; 0x2c
 8013382:	9312      	str	r3, [sp, #72]	; 0x48
 8013384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013388:	e9cd 6700 	strd	r6, r7, [sp]
 801338c:	b93d      	cbnz	r5, 801339e <_dtoa_r+0x2e>
 801338e:	2010      	movs	r0, #16
 8013390:	f000 ff92 	bl	80142b8 <malloc>
 8013394:	6260      	str	r0, [r4, #36]	; 0x24
 8013396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801339a:	6005      	str	r5, [r0, #0]
 801339c:	60c5      	str	r5, [r0, #12]
 801339e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133a0:	6819      	ldr	r1, [r3, #0]
 80133a2:	b151      	cbz	r1, 80133ba <_dtoa_r+0x4a>
 80133a4:	685a      	ldr	r2, [r3, #4]
 80133a6:	604a      	str	r2, [r1, #4]
 80133a8:	2301      	movs	r3, #1
 80133aa:	4093      	lsls	r3, r2
 80133ac:	608b      	str	r3, [r1, #8]
 80133ae:	4620      	mov	r0, r4
 80133b0:	f000 ffbe 	bl	8014330 <_Bfree>
 80133b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133b6:	2200      	movs	r2, #0
 80133b8:	601a      	str	r2, [r3, #0]
 80133ba:	1e3b      	subs	r3, r7, #0
 80133bc:	bfbb      	ittet	lt
 80133be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80133c2:	9301      	strlt	r3, [sp, #4]
 80133c4:	2300      	movge	r3, #0
 80133c6:	2201      	movlt	r2, #1
 80133c8:	bfac      	ite	ge
 80133ca:	f8c8 3000 	strge.w	r3, [r8]
 80133ce:	f8c8 2000 	strlt.w	r2, [r8]
 80133d2:	4baf      	ldr	r3, [pc, #700]	; (8013690 <_dtoa_r+0x320>)
 80133d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80133d8:	ea33 0308 	bics.w	r3, r3, r8
 80133dc:	d114      	bne.n	8013408 <_dtoa_r+0x98>
 80133de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80133e4:	6013      	str	r3, [r2, #0]
 80133e6:	9b00      	ldr	r3, [sp, #0]
 80133e8:	b923      	cbnz	r3, 80133f4 <_dtoa_r+0x84>
 80133ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80133ee:	2800      	cmp	r0, #0
 80133f0:	f000 8542 	beq.w	8013e78 <_dtoa_r+0xb08>
 80133f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80136a4 <_dtoa_r+0x334>
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	f000 8544 	beq.w	8013e88 <_dtoa_r+0xb18>
 8013400:	f10b 0303 	add.w	r3, fp, #3
 8013404:	f000 bd3e 	b.w	8013e84 <_dtoa_r+0xb14>
 8013408:	e9dd 6700 	ldrd	r6, r7, [sp]
 801340c:	2200      	movs	r2, #0
 801340e:	2300      	movs	r3, #0
 8013410:	4630      	mov	r0, r6
 8013412:	4639      	mov	r1, r7
 8013414:	f7f5 fa90 	bl	8008938 <__aeabi_dcmpeq>
 8013418:	4681      	mov	r9, r0
 801341a:	b168      	cbz	r0, 8013438 <_dtoa_r+0xc8>
 801341c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801341e:	2301      	movs	r3, #1
 8013420:	6013      	str	r3, [r2, #0]
 8013422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013424:	2b00      	cmp	r3, #0
 8013426:	f000 8524 	beq.w	8013e72 <_dtoa_r+0xb02>
 801342a:	4b9a      	ldr	r3, [pc, #616]	; (8013694 <_dtoa_r+0x324>)
 801342c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801342e:	f103 3bff 	add.w	fp, r3, #4294967295
 8013432:	6013      	str	r3, [r2, #0]
 8013434:	f000 bd28 	b.w	8013e88 <_dtoa_r+0xb18>
 8013438:	aa14      	add	r2, sp, #80	; 0x50
 801343a:	a915      	add	r1, sp, #84	; 0x54
 801343c:	ec47 6b10 	vmov	d0, r6, r7
 8013440:	4620      	mov	r0, r4
 8013442:	f001 f9ce 	bl	80147e2 <__d2b>
 8013446:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801344a:	9004      	str	r0, [sp, #16]
 801344c:	2d00      	cmp	r5, #0
 801344e:	d07c      	beq.n	801354a <_dtoa_r+0x1da>
 8013450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013454:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013458:	46b2      	mov	sl, r6
 801345a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801345e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013462:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013466:	2200      	movs	r2, #0
 8013468:	4b8b      	ldr	r3, [pc, #556]	; (8013698 <_dtoa_r+0x328>)
 801346a:	4650      	mov	r0, sl
 801346c:	4659      	mov	r1, fp
 801346e:	f7f4 fe43 	bl	80080f8 <__aeabi_dsub>
 8013472:	a381      	add	r3, pc, #516	; (adr r3, 8013678 <_dtoa_r+0x308>)
 8013474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013478:	f7f4 fff6 	bl	8008468 <__aeabi_dmul>
 801347c:	a380      	add	r3, pc, #512	; (adr r3, 8013680 <_dtoa_r+0x310>)
 801347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013482:	f7f4 fe3b 	bl	80080fc <__adddf3>
 8013486:	4606      	mov	r6, r0
 8013488:	4628      	mov	r0, r5
 801348a:	460f      	mov	r7, r1
 801348c:	f7f4 ff82 	bl	8008394 <__aeabi_i2d>
 8013490:	a37d      	add	r3, pc, #500	; (adr r3, 8013688 <_dtoa_r+0x318>)
 8013492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013496:	f7f4 ffe7 	bl	8008468 <__aeabi_dmul>
 801349a:	4602      	mov	r2, r0
 801349c:	460b      	mov	r3, r1
 801349e:	4630      	mov	r0, r6
 80134a0:	4639      	mov	r1, r7
 80134a2:	f7f4 fe2b 	bl	80080fc <__adddf3>
 80134a6:	4606      	mov	r6, r0
 80134a8:	460f      	mov	r7, r1
 80134aa:	f7f5 fa8d 	bl	80089c8 <__aeabi_d2iz>
 80134ae:	2200      	movs	r2, #0
 80134b0:	4682      	mov	sl, r0
 80134b2:	2300      	movs	r3, #0
 80134b4:	4630      	mov	r0, r6
 80134b6:	4639      	mov	r1, r7
 80134b8:	f7f5 fa48 	bl	800894c <__aeabi_dcmplt>
 80134bc:	b148      	cbz	r0, 80134d2 <_dtoa_r+0x162>
 80134be:	4650      	mov	r0, sl
 80134c0:	f7f4 ff68 	bl	8008394 <__aeabi_i2d>
 80134c4:	4632      	mov	r2, r6
 80134c6:	463b      	mov	r3, r7
 80134c8:	f7f5 fa36 	bl	8008938 <__aeabi_dcmpeq>
 80134cc:	b908      	cbnz	r0, 80134d2 <_dtoa_r+0x162>
 80134ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134d2:	f1ba 0f16 	cmp.w	sl, #22
 80134d6:	d859      	bhi.n	801358c <_dtoa_r+0x21c>
 80134d8:	4970      	ldr	r1, [pc, #448]	; (801369c <_dtoa_r+0x32c>)
 80134da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80134de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134e6:	f7f5 fa4f 	bl	8008988 <__aeabi_dcmpgt>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d050      	beq.n	8013590 <_dtoa_r+0x220>
 80134ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134f2:	2300      	movs	r3, #0
 80134f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80134f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134f8:	1b5d      	subs	r5, r3, r5
 80134fa:	f1b5 0801 	subs.w	r8, r5, #1
 80134fe:	bf49      	itett	mi
 8013500:	f1c5 0301 	rsbmi	r3, r5, #1
 8013504:	2300      	movpl	r3, #0
 8013506:	9305      	strmi	r3, [sp, #20]
 8013508:	f04f 0800 	movmi.w	r8, #0
 801350c:	bf58      	it	pl
 801350e:	9305      	strpl	r3, [sp, #20]
 8013510:	f1ba 0f00 	cmp.w	sl, #0
 8013514:	db3e      	blt.n	8013594 <_dtoa_r+0x224>
 8013516:	2300      	movs	r3, #0
 8013518:	44d0      	add	r8, sl
 801351a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801351e:	9307      	str	r3, [sp, #28]
 8013520:	9b06      	ldr	r3, [sp, #24]
 8013522:	2b09      	cmp	r3, #9
 8013524:	f200 8090 	bhi.w	8013648 <_dtoa_r+0x2d8>
 8013528:	2b05      	cmp	r3, #5
 801352a:	bfc4      	itt	gt
 801352c:	3b04      	subgt	r3, #4
 801352e:	9306      	strgt	r3, [sp, #24]
 8013530:	9b06      	ldr	r3, [sp, #24]
 8013532:	f1a3 0302 	sub.w	r3, r3, #2
 8013536:	bfcc      	ite	gt
 8013538:	2500      	movgt	r5, #0
 801353a:	2501      	movle	r5, #1
 801353c:	2b03      	cmp	r3, #3
 801353e:	f200 808f 	bhi.w	8013660 <_dtoa_r+0x2f0>
 8013542:	e8df f003 	tbb	[pc, r3]
 8013546:	7f7d      	.short	0x7f7d
 8013548:	7131      	.short	0x7131
 801354a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801354e:	441d      	add	r5, r3
 8013550:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013554:	2820      	cmp	r0, #32
 8013556:	dd13      	ble.n	8013580 <_dtoa_r+0x210>
 8013558:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801355c:	9b00      	ldr	r3, [sp, #0]
 801355e:	fa08 f800 	lsl.w	r8, r8, r0
 8013562:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013566:	fa23 f000 	lsr.w	r0, r3, r0
 801356a:	ea48 0000 	orr.w	r0, r8, r0
 801356e:	f7f4 ff01 	bl	8008374 <__aeabi_ui2d>
 8013572:	2301      	movs	r3, #1
 8013574:	4682      	mov	sl, r0
 8013576:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801357a:	3d01      	subs	r5, #1
 801357c:	9313      	str	r3, [sp, #76]	; 0x4c
 801357e:	e772      	b.n	8013466 <_dtoa_r+0xf6>
 8013580:	9b00      	ldr	r3, [sp, #0]
 8013582:	f1c0 0020 	rsb	r0, r0, #32
 8013586:	fa03 f000 	lsl.w	r0, r3, r0
 801358a:	e7f0      	b.n	801356e <_dtoa_r+0x1fe>
 801358c:	2301      	movs	r3, #1
 801358e:	e7b1      	b.n	80134f4 <_dtoa_r+0x184>
 8013590:	900f      	str	r0, [sp, #60]	; 0x3c
 8013592:	e7b0      	b.n	80134f6 <_dtoa_r+0x186>
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	eba3 030a 	sub.w	r3, r3, sl
 801359a:	9305      	str	r3, [sp, #20]
 801359c:	f1ca 0300 	rsb	r3, sl, #0
 80135a0:	9307      	str	r3, [sp, #28]
 80135a2:	2300      	movs	r3, #0
 80135a4:	930e      	str	r3, [sp, #56]	; 0x38
 80135a6:	e7bb      	b.n	8013520 <_dtoa_r+0x1b0>
 80135a8:	2301      	movs	r3, #1
 80135aa:	930a      	str	r3, [sp, #40]	; 0x28
 80135ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dd59      	ble.n	8013666 <_dtoa_r+0x2f6>
 80135b2:	9302      	str	r3, [sp, #8]
 80135b4:	4699      	mov	r9, r3
 80135b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80135b8:	2200      	movs	r2, #0
 80135ba:	6072      	str	r2, [r6, #4]
 80135bc:	2204      	movs	r2, #4
 80135be:	f102 0014 	add.w	r0, r2, #20
 80135c2:	4298      	cmp	r0, r3
 80135c4:	6871      	ldr	r1, [r6, #4]
 80135c6:	d953      	bls.n	8013670 <_dtoa_r+0x300>
 80135c8:	4620      	mov	r0, r4
 80135ca:	f000 fe7d 	bl	80142c8 <_Balloc>
 80135ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135d0:	6030      	str	r0, [r6, #0]
 80135d2:	f1b9 0f0e 	cmp.w	r9, #14
 80135d6:	f8d3 b000 	ldr.w	fp, [r3]
 80135da:	f200 80e6 	bhi.w	80137aa <_dtoa_r+0x43a>
 80135de:	2d00      	cmp	r5, #0
 80135e0:	f000 80e3 	beq.w	80137aa <_dtoa_r+0x43a>
 80135e4:	ed9d 7b00 	vldr	d7, [sp]
 80135e8:	f1ba 0f00 	cmp.w	sl, #0
 80135ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80135f0:	dd74      	ble.n	80136dc <_dtoa_r+0x36c>
 80135f2:	4a2a      	ldr	r2, [pc, #168]	; (801369c <_dtoa_r+0x32c>)
 80135f4:	f00a 030f 	and.w	r3, sl, #15
 80135f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80135fc:	ed93 7b00 	vldr	d7, [r3]
 8013600:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013604:	06f0      	lsls	r0, r6, #27
 8013606:	ed8d 7b08 	vstr	d7, [sp, #32]
 801360a:	d565      	bpl.n	80136d8 <_dtoa_r+0x368>
 801360c:	4b24      	ldr	r3, [pc, #144]	; (80136a0 <_dtoa_r+0x330>)
 801360e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013612:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013616:	f7f5 f851 	bl	80086bc <__aeabi_ddiv>
 801361a:	e9cd 0100 	strd	r0, r1, [sp]
 801361e:	f006 060f 	and.w	r6, r6, #15
 8013622:	2503      	movs	r5, #3
 8013624:	4f1e      	ldr	r7, [pc, #120]	; (80136a0 <_dtoa_r+0x330>)
 8013626:	e04c      	b.n	80136c2 <_dtoa_r+0x352>
 8013628:	2301      	movs	r3, #1
 801362a:	930a      	str	r3, [sp, #40]	; 0x28
 801362c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801362e:	4453      	add	r3, sl
 8013630:	f103 0901 	add.w	r9, r3, #1
 8013634:	9302      	str	r3, [sp, #8]
 8013636:	464b      	mov	r3, r9
 8013638:	2b01      	cmp	r3, #1
 801363a:	bfb8      	it	lt
 801363c:	2301      	movlt	r3, #1
 801363e:	e7ba      	b.n	80135b6 <_dtoa_r+0x246>
 8013640:	2300      	movs	r3, #0
 8013642:	e7b2      	b.n	80135aa <_dtoa_r+0x23a>
 8013644:	2300      	movs	r3, #0
 8013646:	e7f0      	b.n	801362a <_dtoa_r+0x2ba>
 8013648:	2501      	movs	r5, #1
 801364a:	2300      	movs	r3, #0
 801364c:	9306      	str	r3, [sp, #24]
 801364e:	950a      	str	r5, [sp, #40]	; 0x28
 8013650:	f04f 33ff 	mov.w	r3, #4294967295
 8013654:	9302      	str	r3, [sp, #8]
 8013656:	4699      	mov	r9, r3
 8013658:	2200      	movs	r2, #0
 801365a:	2312      	movs	r3, #18
 801365c:	920b      	str	r2, [sp, #44]	; 0x2c
 801365e:	e7aa      	b.n	80135b6 <_dtoa_r+0x246>
 8013660:	2301      	movs	r3, #1
 8013662:	930a      	str	r3, [sp, #40]	; 0x28
 8013664:	e7f4      	b.n	8013650 <_dtoa_r+0x2e0>
 8013666:	2301      	movs	r3, #1
 8013668:	9302      	str	r3, [sp, #8]
 801366a:	4699      	mov	r9, r3
 801366c:	461a      	mov	r2, r3
 801366e:	e7f5      	b.n	801365c <_dtoa_r+0x2ec>
 8013670:	3101      	adds	r1, #1
 8013672:	6071      	str	r1, [r6, #4]
 8013674:	0052      	lsls	r2, r2, #1
 8013676:	e7a2      	b.n	80135be <_dtoa_r+0x24e>
 8013678:	636f4361 	.word	0x636f4361
 801367c:	3fd287a7 	.word	0x3fd287a7
 8013680:	8b60c8b3 	.word	0x8b60c8b3
 8013684:	3fc68a28 	.word	0x3fc68a28
 8013688:	509f79fb 	.word	0x509f79fb
 801368c:	3fd34413 	.word	0x3fd34413
 8013690:	7ff00000 	.word	0x7ff00000
 8013694:	08014eb9 	.word	0x08014eb9
 8013698:	3ff80000 	.word	0x3ff80000
 801369c:	08014f78 	.word	0x08014f78
 80136a0:	08014f50 	.word	0x08014f50
 80136a4:	08014ee5 	.word	0x08014ee5
 80136a8:	07f1      	lsls	r1, r6, #31
 80136aa:	d508      	bpl.n	80136be <_dtoa_r+0x34e>
 80136ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80136b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136b4:	f7f4 fed8 	bl	8008468 <__aeabi_dmul>
 80136b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80136bc:	3501      	adds	r5, #1
 80136be:	1076      	asrs	r6, r6, #1
 80136c0:	3708      	adds	r7, #8
 80136c2:	2e00      	cmp	r6, #0
 80136c4:	d1f0      	bne.n	80136a8 <_dtoa_r+0x338>
 80136c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136ce:	f7f4 fff5 	bl	80086bc <__aeabi_ddiv>
 80136d2:	e9cd 0100 	strd	r0, r1, [sp]
 80136d6:	e01a      	b.n	801370e <_dtoa_r+0x39e>
 80136d8:	2502      	movs	r5, #2
 80136da:	e7a3      	b.n	8013624 <_dtoa_r+0x2b4>
 80136dc:	f000 80a0 	beq.w	8013820 <_dtoa_r+0x4b0>
 80136e0:	f1ca 0600 	rsb	r6, sl, #0
 80136e4:	4b9f      	ldr	r3, [pc, #636]	; (8013964 <_dtoa_r+0x5f4>)
 80136e6:	4fa0      	ldr	r7, [pc, #640]	; (8013968 <_dtoa_r+0x5f8>)
 80136e8:	f006 020f 	and.w	r2, r6, #15
 80136ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80136f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80136f8:	f7f4 feb6 	bl	8008468 <__aeabi_dmul>
 80136fc:	e9cd 0100 	strd	r0, r1, [sp]
 8013700:	1136      	asrs	r6, r6, #4
 8013702:	2300      	movs	r3, #0
 8013704:	2502      	movs	r5, #2
 8013706:	2e00      	cmp	r6, #0
 8013708:	d17f      	bne.n	801380a <_dtoa_r+0x49a>
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1e1      	bne.n	80136d2 <_dtoa_r+0x362>
 801370e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 8087 	beq.w	8013824 <_dtoa_r+0x4b4>
 8013716:	e9dd 6700 	ldrd	r6, r7, [sp]
 801371a:	2200      	movs	r2, #0
 801371c:	4b93      	ldr	r3, [pc, #588]	; (801396c <_dtoa_r+0x5fc>)
 801371e:	4630      	mov	r0, r6
 8013720:	4639      	mov	r1, r7
 8013722:	f7f5 f913 	bl	800894c <__aeabi_dcmplt>
 8013726:	2800      	cmp	r0, #0
 8013728:	d07c      	beq.n	8013824 <_dtoa_r+0x4b4>
 801372a:	f1b9 0f00 	cmp.w	r9, #0
 801372e:	d079      	beq.n	8013824 <_dtoa_r+0x4b4>
 8013730:	9b02      	ldr	r3, [sp, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	dd35      	ble.n	80137a2 <_dtoa_r+0x432>
 8013736:	f10a 33ff 	add.w	r3, sl, #4294967295
 801373a:	9308      	str	r3, [sp, #32]
 801373c:	4639      	mov	r1, r7
 801373e:	2200      	movs	r2, #0
 8013740:	4b8b      	ldr	r3, [pc, #556]	; (8013970 <_dtoa_r+0x600>)
 8013742:	4630      	mov	r0, r6
 8013744:	f7f4 fe90 	bl	8008468 <__aeabi_dmul>
 8013748:	e9cd 0100 	strd	r0, r1, [sp]
 801374c:	9f02      	ldr	r7, [sp, #8]
 801374e:	3501      	adds	r5, #1
 8013750:	4628      	mov	r0, r5
 8013752:	f7f4 fe1f 	bl	8008394 <__aeabi_i2d>
 8013756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801375a:	f7f4 fe85 	bl	8008468 <__aeabi_dmul>
 801375e:	2200      	movs	r2, #0
 8013760:	4b84      	ldr	r3, [pc, #528]	; (8013974 <_dtoa_r+0x604>)
 8013762:	f7f4 fccb 	bl	80080fc <__adddf3>
 8013766:	4605      	mov	r5, r0
 8013768:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801376c:	2f00      	cmp	r7, #0
 801376e:	d15d      	bne.n	801382c <_dtoa_r+0x4bc>
 8013770:	2200      	movs	r2, #0
 8013772:	4b81      	ldr	r3, [pc, #516]	; (8013978 <_dtoa_r+0x608>)
 8013774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013778:	f7f4 fcbe 	bl	80080f8 <__aeabi_dsub>
 801377c:	462a      	mov	r2, r5
 801377e:	4633      	mov	r3, r6
 8013780:	e9cd 0100 	strd	r0, r1, [sp]
 8013784:	f7f5 f900 	bl	8008988 <__aeabi_dcmpgt>
 8013788:	2800      	cmp	r0, #0
 801378a:	f040 8288 	bne.w	8013c9e <_dtoa_r+0x92e>
 801378e:	462a      	mov	r2, r5
 8013790:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013798:	f7f5 f8d8 	bl	800894c <__aeabi_dcmplt>
 801379c:	2800      	cmp	r0, #0
 801379e:	f040 827c 	bne.w	8013c9a <_dtoa_r+0x92a>
 80137a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80137a6:	e9cd 2300 	strd	r2, r3, [sp]
 80137aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f2c0 8150 	blt.w	8013a52 <_dtoa_r+0x6e2>
 80137b2:	f1ba 0f0e 	cmp.w	sl, #14
 80137b6:	f300 814c 	bgt.w	8013a52 <_dtoa_r+0x6e2>
 80137ba:	4b6a      	ldr	r3, [pc, #424]	; (8013964 <_dtoa_r+0x5f4>)
 80137bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80137c0:	ed93 7b00 	vldr	d7, [r3]
 80137c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137cc:	f280 80d8 	bge.w	8013980 <_dtoa_r+0x610>
 80137d0:	f1b9 0f00 	cmp.w	r9, #0
 80137d4:	f300 80d4 	bgt.w	8013980 <_dtoa_r+0x610>
 80137d8:	f040 825e 	bne.w	8013c98 <_dtoa_r+0x928>
 80137dc:	2200      	movs	r2, #0
 80137de:	4b66      	ldr	r3, [pc, #408]	; (8013978 <_dtoa_r+0x608>)
 80137e0:	ec51 0b17 	vmov	r0, r1, d7
 80137e4:	f7f4 fe40 	bl	8008468 <__aeabi_dmul>
 80137e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137ec:	f7f5 f8c2 	bl	8008974 <__aeabi_dcmpge>
 80137f0:	464f      	mov	r7, r9
 80137f2:	464e      	mov	r6, r9
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f040 8234 	bne.w	8013c62 <_dtoa_r+0x8f2>
 80137fa:	2331      	movs	r3, #49	; 0x31
 80137fc:	f10b 0501 	add.w	r5, fp, #1
 8013800:	f88b 3000 	strb.w	r3, [fp]
 8013804:	f10a 0a01 	add.w	sl, sl, #1
 8013808:	e22f      	b.n	8013c6a <_dtoa_r+0x8fa>
 801380a:	07f2      	lsls	r2, r6, #31
 801380c:	d505      	bpl.n	801381a <_dtoa_r+0x4aa>
 801380e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013812:	f7f4 fe29 	bl	8008468 <__aeabi_dmul>
 8013816:	3501      	adds	r5, #1
 8013818:	2301      	movs	r3, #1
 801381a:	1076      	asrs	r6, r6, #1
 801381c:	3708      	adds	r7, #8
 801381e:	e772      	b.n	8013706 <_dtoa_r+0x396>
 8013820:	2502      	movs	r5, #2
 8013822:	e774      	b.n	801370e <_dtoa_r+0x39e>
 8013824:	f8cd a020 	str.w	sl, [sp, #32]
 8013828:	464f      	mov	r7, r9
 801382a:	e791      	b.n	8013750 <_dtoa_r+0x3e0>
 801382c:	4b4d      	ldr	r3, [pc, #308]	; (8013964 <_dtoa_r+0x5f4>)
 801382e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013832:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013838:	2b00      	cmp	r3, #0
 801383a:	d047      	beq.n	80138cc <_dtoa_r+0x55c>
 801383c:	4602      	mov	r2, r0
 801383e:	460b      	mov	r3, r1
 8013840:	2000      	movs	r0, #0
 8013842:	494e      	ldr	r1, [pc, #312]	; (801397c <_dtoa_r+0x60c>)
 8013844:	f7f4 ff3a 	bl	80086bc <__aeabi_ddiv>
 8013848:	462a      	mov	r2, r5
 801384a:	4633      	mov	r3, r6
 801384c:	f7f4 fc54 	bl	80080f8 <__aeabi_dsub>
 8013850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013854:	465d      	mov	r5, fp
 8013856:	e9dd 0100 	ldrd	r0, r1, [sp]
 801385a:	f7f5 f8b5 	bl	80089c8 <__aeabi_d2iz>
 801385e:	4606      	mov	r6, r0
 8013860:	f7f4 fd98 	bl	8008394 <__aeabi_i2d>
 8013864:	4602      	mov	r2, r0
 8013866:	460b      	mov	r3, r1
 8013868:	e9dd 0100 	ldrd	r0, r1, [sp]
 801386c:	f7f4 fc44 	bl	80080f8 <__aeabi_dsub>
 8013870:	3630      	adds	r6, #48	; 0x30
 8013872:	f805 6b01 	strb.w	r6, [r5], #1
 8013876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801387a:	e9cd 0100 	strd	r0, r1, [sp]
 801387e:	f7f5 f865 	bl	800894c <__aeabi_dcmplt>
 8013882:	2800      	cmp	r0, #0
 8013884:	d163      	bne.n	801394e <_dtoa_r+0x5de>
 8013886:	e9dd 2300 	ldrd	r2, r3, [sp]
 801388a:	2000      	movs	r0, #0
 801388c:	4937      	ldr	r1, [pc, #220]	; (801396c <_dtoa_r+0x5fc>)
 801388e:	f7f4 fc33 	bl	80080f8 <__aeabi_dsub>
 8013892:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013896:	f7f5 f859 	bl	800894c <__aeabi_dcmplt>
 801389a:	2800      	cmp	r0, #0
 801389c:	f040 80b7 	bne.w	8013a0e <_dtoa_r+0x69e>
 80138a0:	eba5 030b 	sub.w	r3, r5, fp
 80138a4:	429f      	cmp	r7, r3
 80138a6:	f77f af7c 	ble.w	80137a2 <_dtoa_r+0x432>
 80138aa:	2200      	movs	r2, #0
 80138ac:	4b30      	ldr	r3, [pc, #192]	; (8013970 <_dtoa_r+0x600>)
 80138ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80138b2:	f7f4 fdd9 	bl	8008468 <__aeabi_dmul>
 80138b6:	2200      	movs	r2, #0
 80138b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80138bc:	4b2c      	ldr	r3, [pc, #176]	; (8013970 <_dtoa_r+0x600>)
 80138be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138c2:	f7f4 fdd1 	bl	8008468 <__aeabi_dmul>
 80138c6:	e9cd 0100 	strd	r0, r1, [sp]
 80138ca:	e7c4      	b.n	8013856 <_dtoa_r+0x4e6>
 80138cc:	462a      	mov	r2, r5
 80138ce:	4633      	mov	r3, r6
 80138d0:	f7f4 fdca 	bl	8008468 <__aeabi_dmul>
 80138d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80138d8:	eb0b 0507 	add.w	r5, fp, r7
 80138dc:	465e      	mov	r6, fp
 80138de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138e2:	f7f5 f871 	bl	80089c8 <__aeabi_d2iz>
 80138e6:	4607      	mov	r7, r0
 80138e8:	f7f4 fd54 	bl	8008394 <__aeabi_i2d>
 80138ec:	3730      	adds	r7, #48	; 0x30
 80138ee:	4602      	mov	r2, r0
 80138f0:	460b      	mov	r3, r1
 80138f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138f6:	f7f4 fbff 	bl	80080f8 <__aeabi_dsub>
 80138fa:	f806 7b01 	strb.w	r7, [r6], #1
 80138fe:	42ae      	cmp	r6, r5
 8013900:	e9cd 0100 	strd	r0, r1, [sp]
 8013904:	f04f 0200 	mov.w	r2, #0
 8013908:	d126      	bne.n	8013958 <_dtoa_r+0x5e8>
 801390a:	4b1c      	ldr	r3, [pc, #112]	; (801397c <_dtoa_r+0x60c>)
 801390c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013910:	f7f4 fbf4 	bl	80080fc <__adddf3>
 8013914:	4602      	mov	r2, r0
 8013916:	460b      	mov	r3, r1
 8013918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801391c:	f7f5 f834 	bl	8008988 <__aeabi_dcmpgt>
 8013920:	2800      	cmp	r0, #0
 8013922:	d174      	bne.n	8013a0e <_dtoa_r+0x69e>
 8013924:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013928:	2000      	movs	r0, #0
 801392a:	4914      	ldr	r1, [pc, #80]	; (801397c <_dtoa_r+0x60c>)
 801392c:	f7f4 fbe4 	bl	80080f8 <__aeabi_dsub>
 8013930:	4602      	mov	r2, r0
 8013932:	460b      	mov	r3, r1
 8013934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013938:	f7f5 f808 	bl	800894c <__aeabi_dcmplt>
 801393c:	2800      	cmp	r0, #0
 801393e:	f43f af30 	beq.w	80137a2 <_dtoa_r+0x432>
 8013942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013946:	2b30      	cmp	r3, #48	; 0x30
 8013948:	f105 32ff 	add.w	r2, r5, #4294967295
 801394c:	d002      	beq.n	8013954 <_dtoa_r+0x5e4>
 801394e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013952:	e04a      	b.n	80139ea <_dtoa_r+0x67a>
 8013954:	4615      	mov	r5, r2
 8013956:	e7f4      	b.n	8013942 <_dtoa_r+0x5d2>
 8013958:	4b05      	ldr	r3, [pc, #20]	; (8013970 <_dtoa_r+0x600>)
 801395a:	f7f4 fd85 	bl	8008468 <__aeabi_dmul>
 801395e:	e9cd 0100 	strd	r0, r1, [sp]
 8013962:	e7bc      	b.n	80138de <_dtoa_r+0x56e>
 8013964:	08014f78 	.word	0x08014f78
 8013968:	08014f50 	.word	0x08014f50
 801396c:	3ff00000 	.word	0x3ff00000
 8013970:	40240000 	.word	0x40240000
 8013974:	401c0000 	.word	0x401c0000
 8013978:	40140000 	.word	0x40140000
 801397c:	3fe00000 	.word	0x3fe00000
 8013980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013984:	465d      	mov	r5, fp
 8013986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801398a:	4630      	mov	r0, r6
 801398c:	4639      	mov	r1, r7
 801398e:	f7f4 fe95 	bl	80086bc <__aeabi_ddiv>
 8013992:	f7f5 f819 	bl	80089c8 <__aeabi_d2iz>
 8013996:	4680      	mov	r8, r0
 8013998:	f7f4 fcfc 	bl	8008394 <__aeabi_i2d>
 801399c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139a0:	f7f4 fd62 	bl	8008468 <__aeabi_dmul>
 80139a4:	4602      	mov	r2, r0
 80139a6:	460b      	mov	r3, r1
 80139a8:	4630      	mov	r0, r6
 80139aa:	4639      	mov	r1, r7
 80139ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80139b0:	f7f4 fba2 	bl	80080f8 <__aeabi_dsub>
 80139b4:	f805 6b01 	strb.w	r6, [r5], #1
 80139b8:	eba5 060b 	sub.w	r6, r5, fp
 80139bc:	45b1      	cmp	r9, r6
 80139be:	4602      	mov	r2, r0
 80139c0:	460b      	mov	r3, r1
 80139c2:	d139      	bne.n	8013a38 <_dtoa_r+0x6c8>
 80139c4:	f7f4 fb9a 	bl	80080fc <__adddf3>
 80139c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139cc:	4606      	mov	r6, r0
 80139ce:	460f      	mov	r7, r1
 80139d0:	f7f4 ffda 	bl	8008988 <__aeabi_dcmpgt>
 80139d4:	b9c8      	cbnz	r0, 8013a0a <_dtoa_r+0x69a>
 80139d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139da:	4630      	mov	r0, r6
 80139dc:	4639      	mov	r1, r7
 80139de:	f7f4 ffab 	bl	8008938 <__aeabi_dcmpeq>
 80139e2:	b110      	cbz	r0, 80139ea <_dtoa_r+0x67a>
 80139e4:	f018 0f01 	tst.w	r8, #1
 80139e8:	d10f      	bne.n	8013a0a <_dtoa_r+0x69a>
 80139ea:	9904      	ldr	r1, [sp, #16]
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 fc9f 	bl	8014330 <_Bfree>
 80139f2:	2300      	movs	r3, #0
 80139f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139f6:	702b      	strb	r3, [r5, #0]
 80139f8:	f10a 0301 	add.w	r3, sl, #1
 80139fc:	6013      	str	r3, [r2, #0]
 80139fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 8241 	beq.w	8013e88 <_dtoa_r+0xb18>
 8013a06:	601d      	str	r5, [r3, #0]
 8013a08:	e23e      	b.n	8013e88 <_dtoa_r+0xb18>
 8013a0a:	f8cd a020 	str.w	sl, [sp, #32]
 8013a0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013a12:	2a39      	cmp	r2, #57	; 0x39
 8013a14:	f105 33ff 	add.w	r3, r5, #4294967295
 8013a18:	d108      	bne.n	8013a2c <_dtoa_r+0x6bc>
 8013a1a:	459b      	cmp	fp, r3
 8013a1c:	d10a      	bne.n	8013a34 <_dtoa_r+0x6c4>
 8013a1e:	9b08      	ldr	r3, [sp, #32]
 8013a20:	3301      	adds	r3, #1
 8013a22:	9308      	str	r3, [sp, #32]
 8013a24:	2330      	movs	r3, #48	; 0x30
 8013a26:	f88b 3000 	strb.w	r3, [fp]
 8013a2a:	465b      	mov	r3, fp
 8013a2c:	781a      	ldrb	r2, [r3, #0]
 8013a2e:	3201      	adds	r2, #1
 8013a30:	701a      	strb	r2, [r3, #0]
 8013a32:	e78c      	b.n	801394e <_dtoa_r+0x5de>
 8013a34:	461d      	mov	r5, r3
 8013a36:	e7ea      	b.n	8013a0e <_dtoa_r+0x69e>
 8013a38:	2200      	movs	r2, #0
 8013a3a:	4b9b      	ldr	r3, [pc, #620]	; (8013ca8 <_dtoa_r+0x938>)
 8013a3c:	f7f4 fd14 	bl	8008468 <__aeabi_dmul>
 8013a40:	2200      	movs	r2, #0
 8013a42:	2300      	movs	r3, #0
 8013a44:	4606      	mov	r6, r0
 8013a46:	460f      	mov	r7, r1
 8013a48:	f7f4 ff76 	bl	8008938 <__aeabi_dcmpeq>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d09a      	beq.n	8013986 <_dtoa_r+0x616>
 8013a50:	e7cb      	b.n	80139ea <_dtoa_r+0x67a>
 8013a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a54:	2a00      	cmp	r2, #0
 8013a56:	f000 808b 	beq.w	8013b70 <_dtoa_r+0x800>
 8013a5a:	9a06      	ldr	r2, [sp, #24]
 8013a5c:	2a01      	cmp	r2, #1
 8013a5e:	dc6e      	bgt.n	8013b3e <_dtoa_r+0x7ce>
 8013a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a62:	2a00      	cmp	r2, #0
 8013a64:	d067      	beq.n	8013b36 <_dtoa_r+0x7c6>
 8013a66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013a6a:	9f07      	ldr	r7, [sp, #28]
 8013a6c:	9d05      	ldr	r5, [sp, #20]
 8013a6e:	9a05      	ldr	r2, [sp, #20]
 8013a70:	2101      	movs	r1, #1
 8013a72:	441a      	add	r2, r3
 8013a74:	4620      	mov	r0, r4
 8013a76:	9205      	str	r2, [sp, #20]
 8013a78:	4498      	add	r8, r3
 8013a7a:	f000 fcf9 	bl	8014470 <__i2b>
 8013a7e:	4606      	mov	r6, r0
 8013a80:	2d00      	cmp	r5, #0
 8013a82:	dd0c      	ble.n	8013a9e <_dtoa_r+0x72e>
 8013a84:	f1b8 0f00 	cmp.w	r8, #0
 8013a88:	dd09      	ble.n	8013a9e <_dtoa_r+0x72e>
 8013a8a:	4545      	cmp	r5, r8
 8013a8c:	9a05      	ldr	r2, [sp, #20]
 8013a8e:	462b      	mov	r3, r5
 8013a90:	bfa8      	it	ge
 8013a92:	4643      	movge	r3, r8
 8013a94:	1ad2      	subs	r2, r2, r3
 8013a96:	9205      	str	r2, [sp, #20]
 8013a98:	1aed      	subs	r5, r5, r3
 8013a9a:	eba8 0803 	sub.w	r8, r8, r3
 8013a9e:	9b07      	ldr	r3, [sp, #28]
 8013aa0:	b1eb      	cbz	r3, 8013ade <_dtoa_r+0x76e>
 8013aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d067      	beq.n	8013b78 <_dtoa_r+0x808>
 8013aa8:	b18f      	cbz	r7, 8013ace <_dtoa_r+0x75e>
 8013aaa:	4631      	mov	r1, r6
 8013aac:	463a      	mov	r2, r7
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f000 fd7e 	bl	80145b0 <__pow5mult>
 8013ab4:	9a04      	ldr	r2, [sp, #16]
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	4606      	mov	r6, r0
 8013aba:	4620      	mov	r0, r4
 8013abc:	f000 fce1 	bl	8014482 <__multiply>
 8013ac0:	9904      	ldr	r1, [sp, #16]
 8013ac2:	9008      	str	r0, [sp, #32]
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f000 fc33 	bl	8014330 <_Bfree>
 8013aca:	9b08      	ldr	r3, [sp, #32]
 8013acc:	9304      	str	r3, [sp, #16]
 8013ace:	9b07      	ldr	r3, [sp, #28]
 8013ad0:	1bda      	subs	r2, r3, r7
 8013ad2:	d004      	beq.n	8013ade <_dtoa_r+0x76e>
 8013ad4:	9904      	ldr	r1, [sp, #16]
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f000 fd6a 	bl	80145b0 <__pow5mult>
 8013adc:	9004      	str	r0, [sp, #16]
 8013ade:	2101      	movs	r1, #1
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f000 fcc5 	bl	8014470 <__i2b>
 8013ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ae8:	4607      	mov	r7, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	f000 81d0 	beq.w	8013e90 <_dtoa_r+0xb20>
 8013af0:	461a      	mov	r2, r3
 8013af2:	4601      	mov	r1, r0
 8013af4:	4620      	mov	r0, r4
 8013af6:	f000 fd5b 	bl	80145b0 <__pow5mult>
 8013afa:	9b06      	ldr	r3, [sp, #24]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	4607      	mov	r7, r0
 8013b00:	dc40      	bgt.n	8013b84 <_dtoa_r+0x814>
 8013b02:	9b00      	ldr	r3, [sp, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d139      	bne.n	8013b7c <_dtoa_r+0x80c>
 8013b08:	9b01      	ldr	r3, [sp, #4]
 8013b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d136      	bne.n	8013b80 <_dtoa_r+0x810>
 8013b12:	9b01      	ldr	r3, [sp, #4]
 8013b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b18:	0d1b      	lsrs	r3, r3, #20
 8013b1a:	051b      	lsls	r3, r3, #20
 8013b1c:	b12b      	cbz	r3, 8013b2a <_dtoa_r+0x7ba>
 8013b1e:	9b05      	ldr	r3, [sp, #20]
 8013b20:	3301      	adds	r3, #1
 8013b22:	9305      	str	r3, [sp, #20]
 8013b24:	f108 0801 	add.w	r8, r8, #1
 8013b28:	2301      	movs	r3, #1
 8013b2a:	9307      	str	r3, [sp, #28]
 8013b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d12a      	bne.n	8013b88 <_dtoa_r+0x818>
 8013b32:	2001      	movs	r0, #1
 8013b34:	e030      	b.n	8013b98 <_dtoa_r+0x828>
 8013b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013b3c:	e795      	b.n	8013a6a <_dtoa_r+0x6fa>
 8013b3e:	9b07      	ldr	r3, [sp, #28]
 8013b40:	f109 37ff 	add.w	r7, r9, #4294967295
 8013b44:	42bb      	cmp	r3, r7
 8013b46:	bfbf      	itttt	lt
 8013b48:	9b07      	ldrlt	r3, [sp, #28]
 8013b4a:	9707      	strlt	r7, [sp, #28]
 8013b4c:	1afa      	sublt	r2, r7, r3
 8013b4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013b50:	bfbb      	ittet	lt
 8013b52:	189b      	addlt	r3, r3, r2
 8013b54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013b56:	1bdf      	subge	r7, r3, r7
 8013b58:	2700      	movlt	r7, #0
 8013b5a:	f1b9 0f00 	cmp.w	r9, #0
 8013b5e:	bfb5      	itete	lt
 8013b60:	9b05      	ldrlt	r3, [sp, #20]
 8013b62:	9d05      	ldrge	r5, [sp, #20]
 8013b64:	eba3 0509 	sublt.w	r5, r3, r9
 8013b68:	464b      	movge	r3, r9
 8013b6a:	bfb8      	it	lt
 8013b6c:	2300      	movlt	r3, #0
 8013b6e:	e77e      	b.n	8013a6e <_dtoa_r+0x6fe>
 8013b70:	9f07      	ldr	r7, [sp, #28]
 8013b72:	9d05      	ldr	r5, [sp, #20]
 8013b74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013b76:	e783      	b.n	8013a80 <_dtoa_r+0x710>
 8013b78:	9a07      	ldr	r2, [sp, #28]
 8013b7a:	e7ab      	b.n	8013ad4 <_dtoa_r+0x764>
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	e7d4      	b.n	8013b2a <_dtoa_r+0x7ba>
 8013b80:	9b00      	ldr	r3, [sp, #0]
 8013b82:	e7d2      	b.n	8013b2a <_dtoa_r+0x7ba>
 8013b84:	2300      	movs	r3, #0
 8013b86:	9307      	str	r3, [sp, #28]
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013b8e:	6918      	ldr	r0, [r3, #16]
 8013b90:	f000 fc20 	bl	80143d4 <__hi0bits>
 8013b94:	f1c0 0020 	rsb	r0, r0, #32
 8013b98:	4440      	add	r0, r8
 8013b9a:	f010 001f 	ands.w	r0, r0, #31
 8013b9e:	d047      	beq.n	8013c30 <_dtoa_r+0x8c0>
 8013ba0:	f1c0 0320 	rsb	r3, r0, #32
 8013ba4:	2b04      	cmp	r3, #4
 8013ba6:	dd3b      	ble.n	8013c20 <_dtoa_r+0x8b0>
 8013ba8:	9b05      	ldr	r3, [sp, #20]
 8013baa:	f1c0 001c 	rsb	r0, r0, #28
 8013bae:	4403      	add	r3, r0
 8013bb0:	9305      	str	r3, [sp, #20]
 8013bb2:	4405      	add	r5, r0
 8013bb4:	4480      	add	r8, r0
 8013bb6:	9b05      	ldr	r3, [sp, #20]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	dd05      	ble.n	8013bc8 <_dtoa_r+0x858>
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	9904      	ldr	r1, [sp, #16]
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f000 fd43 	bl	801464c <__lshift>
 8013bc6:	9004      	str	r0, [sp, #16]
 8013bc8:	f1b8 0f00 	cmp.w	r8, #0
 8013bcc:	dd05      	ble.n	8013bda <_dtoa_r+0x86a>
 8013bce:	4639      	mov	r1, r7
 8013bd0:	4642      	mov	r2, r8
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 fd3a 	bl	801464c <__lshift>
 8013bd8:	4607      	mov	r7, r0
 8013bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bdc:	b353      	cbz	r3, 8013c34 <_dtoa_r+0x8c4>
 8013bde:	4639      	mov	r1, r7
 8013be0:	9804      	ldr	r0, [sp, #16]
 8013be2:	f000 fd87 	bl	80146f4 <__mcmp>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	da24      	bge.n	8013c34 <_dtoa_r+0x8c4>
 8013bea:	2300      	movs	r3, #0
 8013bec:	220a      	movs	r2, #10
 8013bee:	9904      	ldr	r1, [sp, #16]
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f000 fbb4 	bl	801435e <__multadd>
 8013bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bf8:	9004      	str	r0, [sp, #16]
 8013bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	f000 814d 	beq.w	8013e9e <_dtoa_r+0xb2e>
 8013c04:	2300      	movs	r3, #0
 8013c06:	4631      	mov	r1, r6
 8013c08:	220a      	movs	r2, #10
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f000 fba7 	bl	801435e <__multadd>
 8013c10:	9b02      	ldr	r3, [sp, #8]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	4606      	mov	r6, r0
 8013c16:	dc4f      	bgt.n	8013cb8 <_dtoa_r+0x948>
 8013c18:	9b06      	ldr	r3, [sp, #24]
 8013c1a:	2b02      	cmp	r3, #2
 8013c1c:	dd4c      	ble.n	8013cb8 <_dtoa_r+0x948>
 8013c1e:	e011      	b.n	8013c44 <_dtoa_r+0x8d4>
 8013c20:	d0c9      	beq.n	8013bb6 <_dtoa_r+0x846>
 8013c22:	9a05      	ldr	r2, [sp, #20]
 8013c24:	331c      	adds	r3, #28
 8013c26:	441a      	add	r2, r3
 8013c28:	9205      	str	r2, [sp, #20]
 8013c2a:	441d      	add	r5, r3
 8013c2c:	4498      	add	r8, r3
 8013c2e:	e7c2      	b.n	8013bb6 <_dtoa_r+0x846>
 8013c30:	4603      	mov	r3, r0
 8013c32:	e7f6      	b.n	8013c22 <_dtoa_r+0x8b2>
 8013c34:	f1b9 0f00 	cmp.w	r9, #0
 8013c38:	dc38      	bgt.n	8013cac <_dtoa_r+0x93c>
 8013c3a:	9b06      	ldr	r3, [sp, #24]
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	dd35      	ble.n	8013cac <_dtoa_r+0x93c>
 8013c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c44:	9b02      	ldr	r3, [sp, #8]
 8013c46:	b963      	cbnz	r3, 8013c62 <_dtoa_r+0x8f2>
 8013c48:	4639      	mov	r1, r7
 8013c4a:	2205      	movs	r2, #5
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f000 fb86 	bl	801435e <__multadd>
 8013c52:	4601      	mov	r1, r0
 8013c54:	4607      	mov	r7, r0
 8013c56:	9804      	ldr	r0, [sp, #16]
 8013c58:	f000 fd4c 	bl	80146f4 <__mcmp>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f73f adcc 	bgt.w	80137fa <_dtoa_r+0x48a>
 8013c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c64:	465d      	mov	r5, fp
 8013c66:	ea6f 0a03 	mvn.w	sl, r3
 8013c6a:	f04f 0900 	mov.w	r9, #0
 8013c6e:	4639      	mov	r1, r7
 8013c70:	4620      	mov	r0, r4
 8013c72:	f000 fb5d 	bl	8014330 <_Bfree>
 8013c76:	2e00      	cmp	r6, #0
 8013c78:	f43f aeb7 	beq.w	80139ea <_dtoa_r+0x67a>
 8013c7c:	f1b9 0f00 	cmp.w	r9, #0
 8013c80:	d005      	beq.n	8013c8e <_dtoa_r+0x91e>
 8013c82:	45b1      	cmp	r9, r6
 8013c84:	d003      	beq.n	8013c8e <_dtoa_r+0x91e>
 8013c86:	4649      	mov	r1, r9
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f000 fb51 	bl	8014330 <_Bfree>
 8013c8e:	4631      	mov	r1, r6
 8013c90:	4620      	mov	r0, r4
 8013c92:	f000 fb4d 	bl	8014330 <_Bfree>
 8013c96:	e6a8      	b.n	80139ea <_dtoa_r+0x67a>
 8013c98:	2700      	movs	r7, #0
 8013c9a:	463e      	mov	r6, r7
 8013c9c:	e7e1      	b.n	8013c62 <_dtoa_r+0x8f2>
 8013c9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013ca2:	463e      	mov	r6, r7
 8013ca4:	e5a9      	b.n	80137fa <_dtoa_r+0x48a>
 8013ca6:	bf00      	nop
 8013ca8:	40240000 	.word	0x40240000
 8013cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cae:	f8cd 9008 	str.w	r9, [sp, #8]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	f000 80fa 	beq.w	8013eac <_dtoa_r+0xb3c>
 8013cb8:	2d00      	cmp	r5, #0
 8013cba:	dd05      	ble.n	8013cc8 <_dtoa_r+0x958>
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	462a      	mov	r2, r5
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f000 fcc3 	bl	801464c <__lshift>
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	9b07      	ldr	r3, [sp, #28]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d04c      	beq.n	8013d68 <_dtoa_r+0x9f8>
 8013cce:	6871      	ldr	r1, [r6, #4]
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f000 faf9 	bl	80142c8 <_Balloc>
 8013cd6:	6932      	ldr	r2, [r6, #16]
 8013cd8:	3202      	adds	r2, #2
 8013cda:	4605      	mov	r5, r0
 8013cdc:	0092      	lsls	r2, r2, #2
 8013cde:	f106 010c 	add.w	r1, r6, #12
 8013ce2:	300c      	adds	r0, #12
 8013ce4:	f7fe fd0a 	bl	80126fc <memcpy>
 8013ce8:	2201      	movs	r2, #1
 8013cea:	4629      	mov	r1, r5
 8013cec:	4620      	mov	r0, r4
 8013cee:	f000 fcad 	bl	801464c <__lshift>
 8013cf2:	9b00      	ldr	r3, [sp, #0]
 8013cf4:	f8cd b014 	str.w	fp, [sp, #20]
 8013cf8:	f003 0301 	and.w	r3, r3, #1
 8013cfc:	46b1      	mov	r9, r6
 8013cfe:	9307      	str	r3, [sp, #28]
 8013d00:	4606      	mov	r6, r0
 8013d02:	4639      	mov	r1, r7
 8013d04:	9804      	ldr	r0, [sp, #16]
 8013d06:	f7ff faa5 	bl	8013254 <quorem>
 8013d0a:	4649      	mov	r1, r9
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013d12:	9804      	ldr	r0, [sp, #16]
 8013d14:	f000 fcee 	bl	80146f4 <__mcmp>
 8013d18:	4632      	mov	r2, r6
 8013d1a:	9000      	str	r0, [sp, #0]
 8013d1c:	4639      	mov	r1, r7
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f000 fd02 	bl	8014728 <__mdiff>
 8013d24:	68c3      	ldr	r3, [r0, #12]
 8013d26:	4602      	mov	r2, r0
 8013d28:	bb03      	cbnz	r3, 8013d6c <_dtoa_r+0x9fc>
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	9008      	str	r0, [sp, #32]
 8013d2e:	9804      	ldr	r0, [sp, #16]
 8013d30:	f000 fce0 	bl	80146f4 <__mcmp>
 8013d34:	9a08      	ldr	r2, [sp, #32]
 8013d36:	4603      	mov	r3, r0
 8013d38:	4611      	mov	r1, r2
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	9308      	str	r3, [sp, #32]
 8013d3e:	f000 faf7 	bl	8014330 <_Bfree>
 8013d42:	9b08      	ldr	r3, [sp, #32]
 8013d44:	b9a3      	cbnz	r3, 8013d70 <_dtoa_r+0xa00>
 8013d46:	9a06      	ldr	r2, [sp, #24]
 8013d48:	b992      	cbnz	r2, 8013d70 <_dtoa_r+0xa00>
 8013d4a:	9a07      	ldr	r2, [sp, #28]
 8013d4c:	b982      	cbnz	r2, 8013d70 <_dtoa_r+0xa00>
 8013d4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013d52:	d029      	beq.n	8013da8 <_dtoa_r+0xa38>
 8013d54:	9b00      	ldr	r3, [sp, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	dd01      	ble.n	8013d5e <_dtoa_r+0x9ee>
 8013d5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013d5e:	9b05      	ldr	r3, [sp, #20]
 8013d60:	1c5d      	adds	r5, r3, #1
 8013d62:	f883 8000 	strb.w	r8, [r3]
 8013d66:	e782      	b.n	8013c6e <_dtoa_r+0x8fe>
 8013d68:	4630      	mov	r0, r6
 8013d6a:	e7c2      	b.n	8013cf2 <_dtoa_r+0x982>
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e7e3      	b.n	8013d38 <_dtoa_r+0x9c8>
 8013d70:	9a00      	ldr	r2, [sp, #0]
 8013d72:	2a00      	cmp	r2, #0
 8013d74:	db04      	blt.n	8013d80 <_dtoa_r+0xa10>
 8013d76:	d125      	bne.n	8013dc4 <_dtoa_r+0xa54>
 8013d78:	9a06      	ldr	r2, [sp, #24]
 8013d7a:	bb1a      	cbnz	r2, 8013dc4 <_dtoa_r+0xa54>
 8013d7c:	9a07      	ldr	r2, [sp, #28]
 8013d7e:	bb0a      	cbnz	r2, 8013dc4 <_dtoa_r+0xa54>
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	ddec      	ble.n	8013d5e <_dtoa_r+0x9ee>
 8013d84:	2201      	movs	r2, #1
 8013d86:	9904      	ldr	r1, [sp, #16]
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f000 fc5f 	bl	801464c <__lshift>
 8013d8e:	4639      	mov	r1, r7
 8013d90:	9004      	str	r0, [sp, #16]
 8013d92:	f000 fcaf 	bl	80146f4 <__mcmp>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	dc03      	bgt.n	8013da2 <_dtoa_r+0xa32>
 8013d9a:	d1e0      	bne.n	8013d5e <_dtoa_r+0x9ee>
 8013d9c:	f018 0f01 	tst.w	r8, #1
 8013da0:	d0dd      	beq.n	8013d5e <_dtoa_r+0x9ee>
 8013da2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013da6:	d1d8      	bne.n	8013d5a <_dtoa_r+0x9ea>
 8013da8:	9b05      	ldr	r3, [sp, #20]
 8013daa:	9a05      	ldr	r2, [sp, #20]
 8013dac:	1c5d      	adds	r5, r3, #1
 8013dae:	2339      	movs	r3, #57	; 0x39
 8013db0:	7013      	strb	r3, [r2, #0]
 8013db2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013db6:	2b39      	cmp	r3, #57	; 0x39
 8013db8:	f105 32ff 	add.w	r2, r5, #4294967295
 8013dbc:	d04f      	beq.n	8013e5e <_dtoa_r+0xaee>
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	7013      	strb	r3, [r2, #0]
 8013dc2:	e754      	b.n	8013c6e <_dtoa_r+0x8fe>
 8013dc4:	9a05      	ldr	r2, [sp, #20]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f102 0501 	add.w	r5, r2, #1
 8013dcc:	dd06      	ble.n	8013ddc <_dtoa_r+0xa6c>
 8013dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013dd2:	d0e9      	beq.n	8013da8 <_dtoa_r+0xa38>
 8013dd4:	f108 0801 	add.w	r8, r8, #1
 8013dd8:	9b05      	ldr	r3, [sp, #20]
 8013dda:	e7c2      	b.n	8013d62 <_dtoa_r+0x9f2>
 8013ddc:	9a02      	ldr	r2, [sp, #8]
 8013dde:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013de2:	eba5 030b 	sub.w	r3, r5, fp
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d021      	beq.n	8013e2e <_dtoa_r+0xabe>
 8013dea:	2300      	movs	r3, #0
 8013dec:	220a      	movs	r2, #10
 8013dee:	9904      	ldr	r1, [sp, #16]
 8013df0:	4620      	mov	r0, r4
 8013df2:	f000 fab4 	bl	801435e <__multadd>
 8013df6:	45b1      	cmp	r9, r6
 8013df8:	9004      	str	r0, [sp, #16]
 8013dfa:	f04f 0300 	mov.w	r3, #0
 8013dfe:	f04f 020a 	mov.w	r2, #10
 8013e02:	4649      	mov	r1, r9
 8013e04:	4620      	mov	r0, r4
 8013e06:	d105      	bne.n	8013e14 <_dtoa_r+0xaa4>
 8013e08:	f000 faa9 	bl	801435e <__multadd>
 8013e0c:	4681      	mov	r9, r0
 8013e0e:	4606      	mov	r6, r0
 8013e10:	9505      	str	r5, [sp, #20]
 8013e12:	e776      	b.n	8013d02 <_dtoa_r+0x992>
 8013e14:	f000 faa3 	bl	801435e <__multadd>
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4681      	mov	r9, r0
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	220a      	movs	r2, #10
 8013e20:	4620      	mov	r0, r4
 8013e22:	f000 fa9c 	bl	801435e <__multadd>
 8013e26:	4606      	mov	r6, r0
 8013e28:	e7f2      	b.n	8013e10 <_dtoa_r+0xaa0>
 8013e2a:	f04f 0900 	mov.w	r9, #0
 8013e2e:	2201      	movs	r2, #1
 8013e30:	9904      	ldr	r1, [sp, #16]
 8013e32:	4620      	mov	r0, r4
 8013e34:	f000 fc0a 	bl	801464c <__lshift>
 8013e38:	4639      	mov	r1, r7
 8013e3a:	9004      	str	r0, [sp, #16]
 8013e3c:	f000 fc5a 	bl	80146f4 <__mcmp>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	dcb6      	bgt.n	8013db2 <_dtoa_r+0xa42>
 8013e44:	d102      	bne.n	8013e4c <_dtoa_r+0xadc>
 8013e46:	f018 0f01 	tst.w	r8, #1
 8013e4a:	d1b2      	bne.n	8013db2 <_dtoa_r+0xa42>
 8013e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e50:	2b30      	cmp	r3, #48	; 0x30
 8013e52:	f105 32ff 	add.w	r2, r5, #4294967295
 8013e56:	f47f af0a 	bne.w	8013c6e <_dtoa_r+0x8fe>
 8013e5a:	4615      	mov	r5, r2
 8013e5c:	e7f6      	b.n	8013e4c <_dtoa_r+0xadc>
 8013e5e:	4593      	cmp	fp, r2
 8013e60:	d105      	bne.n	8013e6e <_dtoa_r+0xafe>
 8013e62:	2331      	movs	r3, #49	; 0x31
 8013e64:	f10a 0a01 	add.w	sl, sl, #1
 8013e68:	f88b 3000 	strb.w	r3, [fp]
 8013e6c:	e6ff      	b.n	8013c6e <_dtoa_r+0x8fe>
 8013e6e:	4615      	mov	r5, r2
 8013e70:	e79f      	b.n	8013db2 <_dtoa_r+0xa42>
 8013e72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013ed8 <_dtoa_r+0xb68>
 8013e76:	e007      	b.n	8013e88 <_dtoa_r+0xb18>
 8013e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013edc <_dtoa_r+0xb6c>
 8013e7e:	b11b      	cbz	r3, 8013e88 <_dtoa_r+0xb18>
 8013e80:	f10b 0308 	add.w	r3, fp, #8
 8013e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e86:	6013      	str	r3, [r2, #0]
 8013e88:	4658      	mov	r0, fp
 8013e8a:	b017      	add	sp, #92	; 0x5c
 8013e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e90:	9b06      	ldr	r3, [sp, #24]
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	f77f ae35 	ble.w	8013b02 <_dtoa_r+0x792>
 8013e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e9a:	9307      	str	r3, [sp, #28]
 8013e9c:	e649      	b.n	8013b32 <_dtoa_r+0x7c2>
 8013e9e:	9b02      	ldr	r3, [sp, #8]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	dc03      	bgt.n	8013eac <_dtoa_r+0xb3c>
 8013ea4:	9b06      	ldr	r3, [sp, #24]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	f73f aecc 	bgt.w	8013c44 <_dtoa_r+0x8d4>
 8013eac:	465d      	mov	r5, fp
 8013eae:	4639      	mov	r1, r7
 8013eb0:	9804      	ldr	r0, [sp, #16]
 8013eb2:	f7ff f9cf 	bl	8013254 <quorem>
 8013eb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013eba:	f805 8b01 	strb.w	r8, [r5], #1
 8013ebe:	9a02      	ldr	r2, [sp, #8]
 8013ec0:	eba5 030b 	sub.w	r3, r5, fp
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	ddb0      	ble.n	8013e2a <_dtoa_r+0xaba>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	220a      	movs	r2, #10
 8013ecc:	9904      	ldr	r1, [sp, #16]
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f000 fa45 	bl	801435e <__multadd>
 8013ed4:	9004      	str	r0, [sp, #16]
 8013ed6:	e7ea      	b.n	8013eae <_dtoa_r+0xb3e>
 8013ed8:	08014eb8 	.word	0x08014eb8
 8013edc:	08014edc 	.word	0x08014edc

08013ee0 <__sflush_r>:
 8013ee0:	898a      	ldrh	r2, [r1, #12]
 8013ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	0710      	lsls	r0, r2, #28
 8013eea:	460c      	mov	r4, r1
 8013eec:	d458      	bmi.n	8013fa0 <__sflush_r+0xc0>
 8013eee:	684b      	ldr	r3, [r1, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	dc05      	bgt.n	8013f00 <__sflush_r+0x20>
 8013ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	dc02      	bgt.n	8013f00 <__sflush_r+0x20>
 8013efa:	2000      	movs	r0, #0
 8013efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f02:	2e00      	cmp	r6, #0
 8013f04:	d0f9      	beq.n	8013efa <__sflush_r+0x1a>
 8013f06:	2300      	movs	r3, #0
 8013f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f0c:	682f      	ldr	r7, [r5, #0]
 8013f0e:	6a21      	ldr	r1, [r4, #32]
 8013f10:	602b      	str	r3, [r5, #0]
 8013f12:	d032      	beq.n	8013f7a <__sflush_r+0x9a>
 8013f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f16:	89a3      	ldrh	r3, [r4, #12]
 8013f18:	075a      	lsls	r2, r3, #29
 8013f1a:	d505      	bpl.n	8013f28 <__sflush_r+0x48>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	1ac0      	subs	r0, r0, r3
 8013f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f22:	b10b      	cbz	r3, 8013f28 <__sflush_r+0x48>
 8013f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f26:	1ac0      	subs	r0, r0, r3
 8013f28:	2300      	movs	r3, #0
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f2e:	6a21      	ldr	r1, [r4, #32]
 8013f30:	4628      	mov	r0, r5
 8013f32:	47b0      	blx	r6
 8013f34:	1c43      	adds	r3, r0, #1
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	d106      	bne.n	8013f48 <__sflush_r+0x68>
 8013f3a:	6829      	ldr	r1, [r5, #0]
 8013f3c:	291d      	cmp	r1, #29
 8013f3e:	d848      	bhi.n	8013fd2 <__sflush_r+0xf2>
 8013f40:	4a29      	ldr	r2, [pc, #164]	; (8013fe8 <__sflush_r+0x108>)
 8013f42:	40ca      	lsrs	r2, r1
 8013f44:	07d6      	lsls	r6, r2, #31
 8013f46:	d544      	bpl.n	8013fd2 <__sflush_r+0xf2>
 8013f48:	2200      	movs	r2, #0
 8013f4a:	6062      	str	r2, [r4, #4]
 8013f4c:	04d9      	lsls	r1, r3, #19
 8013f4e:	6922      	ldr	r2, [r4, #16]
 8013f50:	6022      	str	r2, [r4, #0]
 8013f52:	d504      	bpl.n	8013f5e <__sflush_r+0x7e>
 8013f54:	1c42      	adds	r2, r0, #1
 8013f56:	d101      	bne.n	8013f5c <__sflush_r+0x7c>
 8013f58:	682b      	ldr	r3, [r5, #0]
 8013f5a:	b903      	cbnz	r3, 8013f5e <__sflush_r+0x7e>
 8013f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8013f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f60:	602f      	str	r7, [r5, #0]
 8013f62:	2900      	cmp	r1, #0
 8013f64:	d0c9      	beq.n	8013efa <__sflush_r+0x1a>
 8013f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f6a:	4299      	cmp	r1, r3
 8013f6c:	d002      	beq.n	8013f74 <__sflush_r+0x94>
 8013f6e:	4628      	mov	r0, r5
 8013f70:	f000 fc94 	bl	801489c <_free_r>
 8013f74:	2000      	movs	r0, #0
 8013f76:	6360      	str	r0, [r4, #52]	; 0x34
 8013f78:	e7c0      	b.n	8013efc <__sflush_r+0x1c>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	47b0      	blx	r6
 8013f80:	1c41      	adds	r1, r0, #1
 8013f82:	d1c8      	bne.n	8013f16 <__sflush_r+0x36>
 8013f84:	682b      	ldr	r3, [r5, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d0c5      	beq.n	8013f16 <__sflush_r+0x36>
 8013f8a:	2b1d      	cmp	r3, #29
 8013f8c:	d001      	beq.n	8013f92 <__sflush_r+0xb2>
 8013f8e:	2b16      	cmp	r3, #22
 8013f90:	d101      	bne.n	8013f96 <__sflush_r+0xb6>
 8013f92:	602f      	str	r7, [r5, #0]
 8013f94:	e7b1      	b.n	8013efa <__sflush_r+0x1a>
 8013f96:	89a3      	ldrh	r3, [r4, #12]
 8013f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f9c:	81a3      	strh	r3, [r4, #12]
 8013f9e:	e7ad      	b.n	8013efc <__sflush_r+0x1c>
 8013fa0:	690f      	ldr	r7, [r1, #16]
 8013fa2:	2f00      	cmp	r7, #0
 8013fa4:	d0a9      	beq.n	8013efa <__sflush_r+0x1a>
 8013fa6:	0793      	lsls	r3, r2, #30
 8013fa8:	680e      	ldr	r6, [r1, #0]
 8013faa:	bf08      	it	eq
 8013fac:	694b      	ldreq	r3, [r1, #20]
 8013fae:	600f      	str	r7, [r1, #0]
 8013fb0:	bf18      	it	ne
 8013fb2:	2300      	movne	r3, #0
 8013fb4:	eba6 0807 	sub.w	r8, r6, r7
 8013fb8:	608b      	str	r3, [r1, #8]
 8013fba:	f1b8 0f00 	cmp.w	r8, #0
 8013fbe:	dd9c      	ble.n	8013efa <__sflush_r+0x1a>
 8013fc0:	4643      	mov	r3, r8
 8013fc2:	463a      	mov	r2, r7
 8013fc4:	6a21      	ldr	r1, [r4, #32]
 8013fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013fc8:	4628      	mov	r0, r5
 8013fca:	47b0      	blx	r6
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	dc06      	bgt.n	8013fde <__sflush_r+0xfe>
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fd6:	81a3      	strh	r3, [r4, #12]
 8013fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fdc:	e78e      	b.n	8013efc <__sflush_r+0x1c>
 8013fde:	4407      	add	r7, r0
 8013fe0:	eba8 0800 	sub.w	r8, r8, r0
 8013fe4:	e7e9      	b.n	8013fba <__sflush_r+0xda>
 8013fe6:	bf00      	nop
 8013fe8:	20400001 	.word	0x20400001

08013fec <_fflush_r>:
 8013fec:	b538      	push	{r3, r4, r5, lr}
 8013fee:	690b      	ldr	r3, [r1, #16]
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	b1db      	cbz	r3, 801402e <_fflush_r+0x42>
 8013ff6:	b118      	cbz	r0, 8014000 <_fflush_r+0x14>
 8013ff8:	6983      	ldr	r3, [r0, #24]
 8013ffa:	b90b      	cbnz	r3, 8014000 <_fflush_r+0x14>
 8013ffc:	f000 f860 	bl	80140c0 <__sinit>
 8014000:	4b0c      	ldr	r3, [pc, #48]	; (8014034 <_fflush_r+0x48>)
 8014002:	429c      	cmp	r4, r3
 8014004:	d109      	bne.n	801401a <_fflush_r+0x2e>
 8014006:	686c      	ldr	r4, [r5, #4]
 8014008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801400c:	b17b      	cbz	r3, 801402e <_fflush_r+0x42>
 801400e:	4621      	mov	r1, r4
 8014010:	4628      	mov	r0, r5
 8014012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014016:	f7ff bf63 	b.w	8013ee0 <__sflush_r>
 801401a:	4b07      	ldr	r3, [pc, #28]	; (8014038 <_fflush_r+0x4c>)
 801401c:	429c      	cmp	r4, r3
 801401e:	d101      	bne.n	8014024 <_fflush_r+0x38>
 8014020:	68ac      	ldr	r4, [r5, #8]
 8014022:	e7f1      	b.n	8014008 <_fflush_r+0x1c>
 8014024:	4b05      	ldr	r3, [pc, #20]	; (801403c <_fflush_r+0x50>)
 8014026:	429c      	cmp	r4, r3
 8014028:	bf08      	it	eq
 801402a:	68ec      	ldreq	r4, [r5, #12]
 801402c:	e7ec      	b.n	8014008 <_fflush_r+0x1c>
 801402e:	2000      	movs	r0, #0
 8014030:	bd38      	pop	{r3, r4, r5, pc}
 8014032:	bf00      	nop
 8014034:	08014f0c 	.word	0x08014f0c
 8014038:	08014f2c 	.word	0x08014f2c
 801403c:	08014eec 	.word	0x08014eec

08014040 <std>:
 8014040:	2300      	movs	r3, #0
 8014042:	b510      	push	{r4, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	e9c0 3300 	strd	r3, r3, [r0]
 801404a:	6083      	str	r3, [r0, #8]
 801404c:	8181      	strh	r1, [r0, #12]
 801404e:	6643      	str	r3, [r0, #100]	; 0x64
 8014050:	81c2      	strh	r2, [r0, #14]
 8014052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014056:	6183      	str	r3, [r0, #24]
 8014058:	4619      	mov	r1, r3
 801405a:	2208      	movs	r2, #8
 801405c:	305c      	adds	r0, #92	; 0x5c
 801405e:	f7fe fb58 	bl	8012712 <memset>
 8014062:	4b05      	ldr	r3, [pc, #20]	; (8014078 <std+0x38>)
 8014064:	6263      	str	r3, [r4, #36]	; 0x24
 8014066:	4b05      	ldr	r3, [pc, #20]	; (801407c <std+0x3c>)
 8014068:	62a3      	str	r3, [r4, #40]	; 0x28
 801406a:	4b05      	ldr	r3, [pc, #20]	; (8014080 <std+0x40>)
 801406c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801406e:	4b05      	ldr	r3, [pc, #20]	; (8014084 <std+0x44>)
 8014070:	6224      	str	r4, [r4, #32]
 8014072:	6323      	str	r3, [r4, #48]	; 0x30
 8014074:	bd10      	pop	{r4, pc}
 8014076:	bf00      	nop
 8014078:	08014c8d 	.word	0x08014c8d
 801407c:	08014caf 	.word	0x08014caf
 8014080:	08014ce7 	.word	0x08014ce7
 8014084:	08014d0b 	.word	0x08014d0b

08014088 <_cleanup_r>:
 8014088:	4901      	ldr	r1, [pc, #4]	; (8014090 <_cleanup_r+0x8>)
 801408a:	f000 b885 	b.w	8014198 <_fwalk_reent>
 801408e:	bf00      	nop
 8014090:	08013fed 	.word	0x08013fed

08014094 <__sfmoreglue>:
 8014094:	b570      	push	{r4, r5, r6, lr}
 8014096:	1e4a      	subs	r2, r1, #1
 8014098:	2568      	movs	r5, #104	; 0x68
 801409a:	4355      	muls	r5, r2
 801409c:	460e      	mov	r6, r1
 801409e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140a2:	f000 fc49 	bl	8014938 <_malloc_r>
 80140a6:	4604      	mov	r4, r0
 80140a8:	b140      	cbz	r0, 80140bc <__sfmoreglue+0x28>
 80140aa:	2100      	movs	r1, #0
 80140ac:	e9c0 1600 	strd	r1, r6, [r0]
 80140b0:	300c      	adds	r0, #12
 80140b2:	60a0      	str	r0, [r4, #8]
 80140b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140b8:	f7fe fb2b 	bl	8012712 <memset>
 80140bc:	4620      	mov	r0, r4
 80140be:	bd70      	pop	{r4, r5, r6, pc}

080140c0 <__sinit>:
 80140c0:	6983      	ldr	r3, [r0, #24]
 80140c2:	b510      	push	{r4, lr}
 80140c4:	4604      	mov	r4, r0
 80140c6:	bb33      	cbnz	r3, 8014116 <__sinit+0x56>
 80140c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80140cc:	6503      	str	r3, [r0, #80]	; 0x50
 80140ce:	4b12      	ldr	r3, [pc, #72]	; (8014118 <__sinit+0x58>)
 80140d0:	4a12      	ldr	r2, [pc, #72]	; (801411c <__sinit+0x5c>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	6282      	str	r2, [r0, #40]	; 0x28
 80140d6:	4298      	cmp	r0, r3
 80140d8:	bf04      	itt	eq
 80140da:	2301      	moveq	r3, #1
 80140dc:	6183      	streq	r3, [r0, #24]
 80140de:	f000 f81f 	bl	8014120 <__sfp>
 80140e2:	6060      	str	r0, [r4, #4]
 80140e4:	4620      	mov	r0, r4
 80140e6:	f000 f81b 	bl	8014120 <__sfp>
 80140ea:	60a0      	str	r0, [r4, #8]
 80140ec:	4620      	mov	r0, r4
 80140ee:	f000 f817 	bl	8014120 <__sfp>
 80140f2:	2200      	movs	r2, #0
 80140f4:	60e0      	str	r0, [r4, #12]
 80140f6:	2104      	movs	r1, #4
 80140f8:	6860      	ldr	r0, [r4, #4]
 80140fa:	f7ff ffa1 	bl	8014040 <std>
 80140fe:	2201      	movs	r2, #1
 8014100:	2109      	movs	r1, #9
 8014102:	68a0      	ldr	r0, [r4, #8]
 8014104:	f7ff ff9c 	bl	8014040 <std>
 8014108:	2202      	movs	r2, #2
 801410a:	2112      	movs	r1, #18
 801410c:	68e0      	ldr	r0, [r4, #12]
 801410e:	f7ff ff97 	bl	8014040 <std>
 8014112:	2301      	movs	r3, #1
 8014114:	61a3      	str	r3, [r4, #24]
 8014116:	bd10      	pop	{r4, pc}
 8014118:	08014ea4 	.word	0x08014ea4
 801411c:	08014089 	.word	0x08014089

08014120 <__sfp>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	4b1b      	ldr	r3, [pc, #108]	; (8014190 <__sfp+0x70>)
 8014124:	681e      	ldr	r6, [r3, #0]
 8014126:	69b3      	ldr	r3, [r6, #24]
 8014128:	4607      	mov	r7, r0
 801412a:	b913      	cbnz	r3, 8014132 <__sfp+0x12>
 801412c:	4630      	mov	r0, r6
 801412e:	f7ff ffc7 	bl	80140c0 <__sinit>
 8014132:	3648      	adds	r6, #72	; 0x48
 8014134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014138:	3b01      	subs	r3, #1
 801413a:	d503      	bpl.n	8014144 <__sfp+0x24>
 801413c:	6833      	ldr	r3, [r6, #0]
 801413e:	b133      	cbz	r3, 801414e <__sfp+0x2e>
 8014140:	6836      	ldr	r6, [r6, #0]
 8014142:	e7f7      	b.n	8014134 <__sfp+0x14>
 8014144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014148:	b16d      	cbz	r5, 8014166 <__sfp+0x46>
 801414a:	3468      	adds	r4, #104	; 0x68
 801414c:	e7f4      	b.n	8014138 <__sfp+0x18>
 801414e:	2104      	movs	r1, #4
 8014150:	4638      	mov	r0, r7
 8014152:	f7ff ff9f 	bl	8014094 <__sfmoreglue>
 8014156:	6030      	str	r0, [r6, #0]
 8014158:	2800      	cmp	r0, #0
 801415a:	d1f1      	bne.n	8014140 <__sfp+0x20>
 801415c:	230c      	movs	r3, #12
 801415e:	603b      	str	r3, [r7, #0]
 8014160:	4604      	mov	r4, r0
 8014162:	4620      	mov	r0, r4
 8014164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014166:	4b0b      	ldr	r3, [pc, #44]	; (8014194 <__sfp+0x74>)
 8014168:	6665      	str	r5, [r4, #100]	; 0x64
 801416a:	e9c4 5500 	strd	r5, r5, [r4]
 801416e:	60a5      	str	r5, [r4, #8]
 8014170:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014174:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014178:	2208      	movs	r2, #8
 801417a:	4629      	mov	r1, r5
 801417c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014180:	f7fe fac7 	bl	8012712 <memset>
 8014184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801418c:	e7e9      	b.n	8014162 <__sfp+0x42>
 801418e:	bf00      	nop
 8014190:	08014ea4 	.word	0x08014ea4
 8014194:	ffff0001 	.word	0xffff0001

08014198 <_fwalk_reent>:
 8014198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801419c:	4680      	mov	r8, r0
 801419e:	4689      	mov	r9, r1
 80141a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80141a4:	2600      	movs	r6, #0
 80141a6:	b914      	cbnz	r4, 80141ae <_fwalk_reent+0x16>
 80141a8:	4630      	mov	r0, r6
 80141aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80141b2:	3f01      	subs	r7, #1
 80141b4:	d501      	bpl.n	80141ba <_fwalk_reent+0x22>
 80141b6:	6824      	ldr	r4, [r4, #0]
 80141b8:	e7f5      	b.n	80141a6 <_fwalk_reent+0xe>
 80141ba:	89ab      	ldrh	r3, [r5, #12]
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d907      	bls.n	80141d0 <_fwalk_reent+0x38>
 80141c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141c4:	3301      	adds	r3, #1
 80141c6:	d003      	beq.n	80141d0 <_fwalk_reent+0x38>
 80141c8:	4629      	mov	r1, r5
 80141ca:	4640      	mov	r0, r8
 80141cc:	47c8      	blx	r9
 80141ce:	4306      	orrs	r6, r0
 80141d0:	3568      	adds	r5, #104	; 0x68
 80141d2:	e7ee      	b.n	80141b2 <_fwalk_reent+0x1a>

080141d4 <_localeconv_r>:
 80141d4:	4b04      	ldr	r3, [pc, #16]	; (80141e8 <_localeconv_r+0x14>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	6a18      	ldr	r0, [r3, #32]
 80141da:	4b04      	ldr	r3, [pc, #16]	; (80141ec <_localeconv_r+0x18>)
 80141dc:	2800      	cmp	r0, #0
 80141de:	bf08      	it	eq
 80141e0:	4618      	moveq	r0, r3
 80141e2:	30f0      	adds	r0, #240	; 0xf0
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	20000010 	.word	0x20000010
 80141ec:	20000074 	.word	0x20000074

080141f0 <__swhatbuf_r>:
 80141f0:	b570      	push	{r4, r5, r6, lr}
 80141f2:	460e      	mov	r6, r1
 80141f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141f8:	2900      	cmp	r1, #0
 80141fa:	b096      	sub	sp, #88	; 0x58
 80141fc:	4614      	mov	r4, r2
 80141fe:	461d      	mov	r5, r3
 8014200:	da07      	bge.n	8014212 <__swhatbuf_r+0x22>
 8014202:	2300      	movs	r3, #0
 8014204:	602b      	str	r3, [r5, #0]
 8014206:	89b3      	ldrh	r3, [r6, #12]
 8014208:	061a      	lsls	r2, r3, #24
 801420a:	d410      	bmi.n	801422e <__swhatbuf_r+0x3e>
 801420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014210:	e00e      	b.n	8014230 <__swhatbuf_r+0x40>
 8014212:	466a      	mov	r2, sp
 8014214:	f000 fda0 	bl	8014d58 <_fstat_r>
 8014218:	2800      	cmp	r0, #0
 801421a:	dbf2      	blt.n	8014202 <__swhatbuf_r+0x12>
 801421c:	9a01      	ldr	r2, [sp, #4]
 801421e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014226:	425a      	negs	r2, r3
 8014228:	415a      	adcs	r2, r3
 801422a:	602a      	str	r2, [r5, #0]
 801422c:	e7ee      	b.n	801420c <__swhatbuf_r+0x1c>
 801422e:	2340      	movs	r3, #64	; 0x40
 8014230:	2000      	movs	r0, #0
 8014232:	6023      	str	r3, [r4, #0]
 8014234:	b016      	add	sp, #88	; 0x58
 8014236:	bd70      	pop	{r4, r5, r6, pc}

08014238 <__smakebuf_r>:
 8014238:	898b      	ldrh	r3, [r1, #12]
 801423a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801423c:	079d      	lsls	r5, r3, #30
 801423e:	4606      	mov	r6, r0
 8014240:	460c      	mov	r4, r1
 8014242:	d507      	bpl.n	8014254 <__smakebuf_r+0x1c>
 8014244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014248:	6023      	str	r3, [r4, #0]
 801424a:	6123      	str	r3, [r4, #16]
 801424c:	2301      	movs	r3, #1
 801424e:	6163      	str	r3, [r4, #20]
 8014250:	b002      	add	sp, #8
 8014252:	bd70      	pop	{r4, r5, r6, pc}
 8014254:	ab01      	add	r3, sp, #4
 8014256:	466a      	mov	r2, sp
 8014258:	f7ff ffca 	bl	80141f0 <__swhatbuf_r>
 801425c:	9900      	ldr	r1, [sp, #0]
 801425e:	4605      	mov	r5, r0
 8014260:	4630      	mov	r0, r6
 8014262:	f000 fb69 	bl	8014938 <_malloc_r>
 8014266:	b948      	cbnz	r0, 801427c <__smakebuf_r+0x44>
 8014268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801426c:	059a      	lsls	r2, r3, #22
 801426e:	d4ef      	bmi.n	8014250 <__smakebuf_r+0x18>
 8014270:	f023 0303 	bic.w	r3, r3, #3
 8014274:	f043 0302 	orr.w	r3, r3, #2
 8014278:	81a3      	strh	r3, [r4, #12]
 801427a:	e7e3      	b.n	8014244 <__smakebuf_r+0xc>
 801427c:	4b0d      	ldr	r3, [pc, #52]	; (80142b4 <__smakebuf_r+0x7c>)
 801427e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014280:	89a3      	ldrh	r3, [r4, #12]
 8014282:	6020      	str	r0, [r4, #0]
 8014284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014288:	81a3      	strh	r3, [r4, #12]
 801428a:	9b00      	ldr	r3, [sp, #0]
 801428c:	6163      	str	r3, [r4, #20]
 801428e:	9b01      	ldr	r3, [sp, #4]
 8014290:	6120      	str	r0, [r4, #16]
 8014292:	b15b      	cbz	r3, 80142ac <__smakebuf_r+0x74>
 8014294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014298:	4630      	mov	r0, r6
 801429a:	f000 fd6f 	bl	8014d7c <_isatty_r>
 801429e:	b128      	cbz	r0, 80142ac <__smakebuf_r+0x74>
 80142a0:	89a3      	ldrh	r3, [r4, #12]
 80142a2:	f023 0303 	bic.w	r3, r3, #3
 80142a6:	f043 0301 	orr.w	r3, r3, #1
 80142aa:	81a3      	strh	r3, [r4, #12]
 80142ac:	89a3      	ldrh	r3, [r4, #12]
 80142ae:	431d      	orrs	r5, r3
 80142b0:	81a5      	strh	r5, [r4, #12]
 80142b2:	e7cd      	b.n	8014250 <__smakebuf_r+0x18>
 80142b4:	08014089 	.word	0x08014089

080142b8 <malloc>:
 80142b8:	4b02      	ldr	r3, [pc, #8]	; (80142c4 <malloc+0xc>)
 80142ba:	4601      	mov	r1, r0
 80142bc:	6818      	ldr	r0, [r3, #0]
 80142be:	f000 bb3b 	b.w	8014938 <_malloc_r>
 80142c2:	bf00      	nop
 80142c4:	20000010 	.word	0x20000010

080142c8 <_Balloc>:
 80142c8:	b570      	push	{r4, r5, r6, lr}
 80142ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80142cc:	4604      	mov	r4, r0
 80142ce:	460e      	mov	r6, r1
 80142d0:	b93d      	cbnz	r5, 80142e2 <_Balloc+0x1a>
 80142d2:	2010      	movs	r0, #16
 80142d4:	f7ff fff0 	bl	80142b8 <malloc>
 80142d8:	6260      	str	r0, [r4, #36]	; 0x24
 80142da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142de:	6005      	str	r5, [r0, #0]
 80142e0:	60c5      	str	r5, [r0, #12]
 80142e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80142e4:	68eb      	ldr	r3, [r5, #12]
 80142e6:	b183      	cbz	r3, 801430a <_Balloc+0x42>
 80142e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80142f0:	b9b8      	cbnz	r0, 8014322 <_Balloc+0x5a>
 80142f2:	2101      	movs	r1, #1
 80142f4:	fa01 f506 	lsl.w	r5, r1, r6
 80142f8:	1d6a      	adds	r2, r5, #5
 80142fa:	0092      	lsls	r2, r2, #2
 80142fc:	4620      	mov	r0, r4
 80142fe:	f000 fabf 	bl	8014880 <_calloc_r>
 8014302:	b160      	cbz	r0, 801431e <_Balloc+0x56>
 8014304:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014308:	e00e      	b.n	8014328 <_Balloc+0x60>
 801430a:	2221      	movs	r2, #33	; 0x21
 801430c:	2104      	movs	r1, #4
 801430e:	4620      	mov	r0, r4
 8014310:	f000 fab6 	bl	8014880 <_calloc_r>
 8014314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014316:	60e8      	str	r0, [r5, #12]
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d1e4      	bne.n	80142e8 <_Balloc+0x20>
 801431e:	2000      	movs	r0, #0
 8014320:	bd70      	pop	{r4, r5, r6, pc}
 8014322:	6802      	ldr	r2, [r0, #0]
 8014324:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014328:	2300      	movs	r3, #0
 801432a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801432e:	e7f7      	b.n	8014320 <_Balloc+0x58>

08014330 <_Bfree>:
 8014330:	b570      	push	{r4, r5, r6, lr}
 8014332:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014334:	4606      	mov	r6, r0
 8014336:	460d      	mov	r5, r1
 8014338:	b93c      	cbnz	r4, 801434a <_Bfree+0x1a>
 801433a:	2010      	movs	r0, #16
 801433c:	f7ff ffbc 	bl	80142b8 <malloc>
 8014340:	6270      	str	r0, [r6, #36]	; 0x24
 8014342:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014346:	6004      	str	r4, [r0, #0]
 8014348:	60c4      	str	r4, [r0, #12]
 801434a:	b13d      	cbz	r5, 801435c <_Bfree+0x2c>
 801434c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801434e:	686a      	ldr	r2, [r5, #4]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014356:	6029      	str	r1, [r5, #0]
 8014358:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801435c:	bd70      	pop	{r4, r5, r6, pc}

0801435e <__multadd>:
 801435e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014362:	690d      	ldr	r5, [r1, #16]
 8014364:	461f      	mov	r7, r3
 8014366:	4606      	mov	r6, r0
 8014368:	460c      	mov	r4, r1
 801436a:	f101 0c14 	add.w	ip, r1, #20
 801436e:	2300      	movs	r3, #0
 8014370:	f8dc 0000 	ldr.w	r0, [ip]
 8014374:	b281      	uxth	r1, r0
 8014376:	fb02 7101 	mla	r1, r2, r1, r7
 801437a:	0c0f      	lsrs	r7, r1, #16
 801437c:	0c00      	lsrs	r0, r0, #16
 801437e:	fb02 7000 	mla	r0, r2, r0, r7
 8014382:	b289      	uxth	r1, r1
 8014384:	3301      	adds	r3, #1
 8014386:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801438a:	429d      	cmp	r5, r3
 801438c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014390:	f84c 1b04 	str.w	r1, [ip], #4
 8014394:	dcec      	bgt.n	8014370 <__multadd+0x12>
 8014396:	b1d7      	cbz	r7, 80143ce <__multadd+0x70>
 8014398:	68a3      	ldr	r3, [r4, #8]
 801439a:	42ab      	cmp	r3, r5
 801439c:	dc12      	bgt.n	80143c4 <__multadd+0x66>
 801439e:	6861      	ldr	r1, [r4, #4]
 80143a0:	4630      	mov	r0, r6
 80143a2:	3101      	adds	r1, #1
 80143a4:	f7ff ff90 	bl	80142c8 <_Balloc>
 80143a8:	6922      	ldr	r2, [r4, #16]
 80143aa:	3202      	adds	r2, #2
 80143ac:	f104 010c 	add.w	r1, r4, #12
 80143b0:	4680      	mov	r8, r0
 80143b2:	0092      	lsls	r2, r2, #2
 80143b4:	300c      	adds	r0, #12
 80143b6:	f7fe f9a1 	bl	80126fc <memcpy>
 80143ba:	4621      	mov	r1, r4
 80143bc:	4630      	mov	r0, r6
 80143be:	f7ff ffb7 	bl	8014330 <_Bfree>
 80143c2:	4644      	mov	r4, r8
 80143c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143c8:	3501      	adds	r5, #1
 80143ca:	615f      	str	r7, [r3, #20]
 80143cc:	6125      	str	r5, [r4, #16]
 80143ce:	4620      	mov	r0, r4
 80143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143d4 <__hi0bits>:
 80143d4:	0c02      	lsrs	r2, r0, #16
 80143d6:	0412      	lsls	r2, r2, #16
 80143d8:	4603      	mov	r3, r0
 80143da:	b9b2      	cbnz	r2, 801440a <__hi0bits+0x36>
 80143dc:	0403      	lsls	r3, r0, #16
 80143de:	2010      	movs	r0, #16
 80143e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80143e4:	bf04      	itt	eq
 80143e6:	021b      	lsleq	r3, r3, #8
 80143e8:	3008      	addeq	r0, #8
 80143ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80143ee:	bf04      	itt	eq
 80143f0:	011b      	lsleq	r3, r3, #4
 80143f2:	3004      	addeq	r0, #4
 80143f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80143f8:	bf04      	itt	eq
 80143fa:	009b      	lsleq	r3, r3, #2
 80143fc:	3002      	addeq	r0, #2
 80143fe:	2b00      	cmp	r3, #0
 8014400:	db06      	blt.n	8014410 <__hi0bits+0x3c>
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	d503      	bpl.n	801440e <__hi0bits+0x3a>
 8014406:	3001      	adds	r0, #1
 8014408:	4770      	bx	lr
 801440a:	2000      	movs	r0, #0
 801440c:	e7e8      	b.n	80143e0 <__hi0bits+0xc>
 801440e:	2020      	movs	r0, #32
 8014410:	4770      	bx	lr

08014412 <__lo0bits>:
 8014412:	6803      	ldr	r3, [r0, #0]
 8014414:	f013 0207 	ands.w	r2, r3, #7
 8014418:	4601      	mov	r1, r0
 801441a:	d00b      	beq.n	8014434 <__lo0bits+0x22>
 801441c:	07da      	lsls	r2, r3, #31
 801441e:	d423      	bmi.n	8014468 <__lo0bits+0x56>
 8014420:	0798      	lsls	r0, r3, #30
 8014422:	bf49      	itett	mi
 8014424:	085b      	lsrmi	r3, r3, #1
 8014426:	089b      	lsrpl	r3, r3, #2
 8014428:	2001      	movmi	r0, #1
 801442a:	600b      	strmi	r3, [r1, #0]
 801442c:	bf5c      	itt	pl
 801442e:	600b      	strpl	r3, [r1, #0]
 8014430:	2002      	movpl	r0, #2
 8014432:	4770      	bx	lr
 8014434:	b298      	uxth	r0, r3
 8014436:	b9a8      	cbnz	r0, 8014464 <__lo0bits+0x52>
 8014438:	0c1b      	lsrs	r3, r3, #16
 801443a:	2010      	movs	r0, #16
 801443c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014440:	bf04      	itt	eq
 8014442:	0a1b      	lsreq	r3, r3, #8
 8014444:	3008      	addeq	r0, #8
 8014446:	071a      	lsls	r2, r3, #28
 8014448:	bf04      	itt	eq
 801444a:	091b      	lsreq	r3, r3, #4
 801444c:	3004      	addeq	r0, #4
 801444e:	079a      	lsls	r2, r3, #30
 8014450:	bf04      	itt	eq
 8014452:	089b      	lsreq	r3, r3, #2
 8014454:	3002      	addeq	r0, #2
 8014456:	07da      	lsls	r2, r3, #31
 8014458:	d402      	bmi.n	8014460 <__lo0bits+0x4e>
 801445a:	085b      	lsrs	r3, r3, #1
 801445c:	d006      	beq.n	801446c <__lo0bits+0x5a>
 801445e:	3001      	adds	r0, #1
 8014460:	600b      	str	r3, [r1, #0]
 8014462:	4770      	bx	lr
 8014464:	4610      	mov	r0, r2
 8014466:	e7e9      	b.n	801443c <__lo0bits+0x2a>
 8014468:	2000      	movs	r0, #0
 801446a:	4770      	bx	lr
 801446c:	2020      	movs	r0, #32
 801446e:	4770      	bx	lr

08014470 <__i2b>:
 8014470:	b510      	push	{r4, lr}
 8014472:	460c      	mov	r4, r1
 8014474:	2101      	movs	r1, #1
 8014476:	f7ff ff27 	bl	80142c8 <_Balloc>
 801447a:	2201      	movs	r2, #1
 801447c:	6144      	str	r4, [r0, #20]
 801447e:	6102      	str	r2, [r0, #16]
 8014480:	bd10      	pop	{r4, pc}

08014482 <__multiply>:
 8014482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014486:	4614      	mov	r4, r2
 8014488:	690a      	ldr	r2, [r1, #16]
 801448a:	6923      	ldr	r3, [r4, #16]
 801448c:	429a      	cmp	r2, r3
 801448e:	bfb8      	it	lt
 8014490:	460b      	movlt	r3, r1
 8014492:	4688      	mov	r8, r1
 8014494:	bfbc      	itt	lt
 8014496:	46a0      	movlt	r8, r4
 8014498:	461c      	movlt	r4, r3
 801449a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801449e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80144a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80144a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80144aa:	eb07 0609 	add.w	r6, r7, r9
 80144ae:	42b3      	cmp	r3, r6
 80144b0:	bfb8      	it	lt
 80144b2:	3101      	addlt	r1, #1
 80144b4:	f7ff ff08 	bl	80142c8 <_Balloc>
 80144b8:	f100 0514 	add.w	r5, r0, #20
 80144bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80144c0:	462b      	mov	r3, r5
 80144c2:	2200      	movs	r2, #0
 80144c4:	4573      	cmp	r3, lr
 80144c6:	d316      	bcc.n	80144f6 <__multiply+0x74>
 80144c8:	f104 0214 	add.w	r2, r4, #20
 80144cc:	f108 0114 	add.w	r1, r8, #20
 80144d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80144d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	9b00      	ldr	r3, [sp, #0]
 80144dc:	9201      	str	r2, [sp, #4]
 80144de:	4293      	cmp	r3, r2
 80144e0:	d80c      	bhi.n	80144fc <__multiply+0x7a>
 80144e2:	2e00      	cmp	r6, #0
 80144e4:	dd03      	ble.n	80144ee <__multiply+0x6c>
 80144e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d05d      	beq.n	80145aa <__multiply+0x128>
 80144ee:	6106      	str	r6, [r0, #16]
 80144f0:	b003      	add	sp, #12
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f6:	f843 2b04 	str.w	r2, [r3], #4
 80144fa:	e7e3      	b.n	80144c4 <__multiply+0x42>
 80144fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8014500:	f1bb 0f00 	cmp.w	fp, #0
 8014504:	d023      	beq.n	801454e <__multiply+0xcc>
 8014506:	4689      	mov	r9, r1
 8014508:	46ac      	mov	ip, r5
 801450a:	f04f 0800 	mov.w	r8, #0
 801450e:	f859 4b04 	ldr.w	r4, [r9], #4
 8014512:	f8dc a000 	ldr.w	sl, [ip]
 8014516:	b2a3      	uxth	r3, r4
 8014518:	fa1f fa8a 	uxth.w	sl, sl
 801451c:	fb0b a303 	mla	r3, fp, r3, sl
 8014520:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014524:	f8dc 4000 	ldr.w	r4, [ip]
 8014528:	4443      	add	r3, r8
 801452a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801452e:	fb0b 840a 	mla	r4, fp, sl, r8
 8014532:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014536:	46e2      	mov	sl, ip
 8014538:	b29b      	uxth	r3, r3
 801453a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801453e:	454f      	cmp	r7, r9
 8014540:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014544:	f84a 3b04 	str.w	r3, [sl], #4
 8014548:	d82b      	bhi.n	80145a2 <__multiply+0x120>
 801454a:	f8cc 8004 	str.w	r8, [ip, #4]
 801454e:	9b01      	ldr	r3, [sp, #4]
 8014550:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014554:	3204      	adds	r2, #4
 8014556:	f1ba 0f00 	cmp.w	sl, #0
 801455a:	d020      	beq.n	801459e <__multiply+0x11c>
 801455c:	682b      	ldr	r3, [r5, #0]
 801455e:	4689      	mov	r9, r1
 8014560:	46a8      	mov	r8, r5
 8014562:	f04f 0b00 	mov.w	fp, #0
 8014566:	f8b9 c000 	ldrh.w	ip, [r9]
 801456a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801456e:	fb0a 440c 	mla	r4, sl, ip, r4
 8014572:	445c      	add	r4, fp
 8014574:	46c4      	mov	ip, r8
 8014576:	b29b      	uxth	r3, r3
 8014578:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801457c:	f84c 3b04 	str.w	r3, [ip], #4
 8014580:	f859 3b04 	ldr.w	r3, [r9], #4
 8014584:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014588:	0c1b      	lsrs	r3, r3, #16
 801458a:	fb0a b303 	mla	r3, sl, r3, fp
 801458e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014592:	454f      	cmp	r7, r9
 8014594:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014598:	d805      	bhi.n	80145a6 <__multiply+0x124>
 801459a:	f8c8 3004 	str.w	r3, [r8, #4]
 801459e:	3504      	adds	r5, #4
 80145a0:	e79b      	b.n	80144da <__multiply+0x58>
 80145a2:	46d4      	mov	ip, sl
 80145a4:	e7b3      	b.n	801450e <__multiply+0x8c>
 80145a6:	46e0      	mov	r8, ip
 80145a8:	e7dd      	b.n	8014566 <__multiply+0xe4>
 80145aa:	3e01      	subs	r6, #1
 80145ac:	e799      	b.n	80144e2 <__multiply+0x60>
	...

080145b0 <__pow5mult>:
 80145b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145b4:	4615      	mov	r5, r2
 80145b6:	f012 0203 	ands.w	r2, r2, #3
 80145ba:	4606      	mov	r6, r0
 80145bc:	460f      	mov	r7, r1
 80145be:	d007      	beq.n	80145d0 <__pow5mult+0x20>
 80145c0:	3a01      	subs	r2, #1
 80145c2:	4c21      	ldr	r4, [pc, #132]	; (8014648 <__pow5mult+0x98>)
 80145c4:	2300      	movs	r3, #0
 80145c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80145ca:	f7ff fec8 	bl	801435e <__multadd>
 80145ce:	4607      	mov	r7, r0
 80145d0:	10ad      	asrs	r5, r5, #2
 80145d2:	d035      	beq.n	8014640 <__pow5mult+0x90>
 80145d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80145d6:	b93c      	cbnz	r4, 80145e8 <__pow5mult+0x38>
 80145d8:	2010      	movs	r0, #16
 80145da:	f7ff fe6d 	bl	80142b8 <malloc>
 80145de:	6270      	str	r0, [r6, #36]	; 0x24
 80145e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145e4:	6004      	str	r4, [r0, #0]
 80145e6:	60c4      	str	r4, [r0, #12]
 80145e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80145ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80145f0:	b94c      	cbnz	r4, 8014606 <__pow5mult+0x56>
 80145f2:	f240 2171 	movw	r1, #625	; 0x271
 80145f6:	4630      	mov	r0, r6
 80145f8:	f7ff ff3a 	bl	8014470 <__i2b>
 80145fc:	2300      	movs	r3, #0
 80145fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014602:	4604      	mov	r4, r0
 8014604:	6003      	str	r3, [r0, #0]
 8014606:	f04f 0800 	mov.w	r8, #0
 801460a:	07eb      	lsls	r3, r5, #31
 801460c:	d50a      	bpl.n	8014624 <__pow5mult+0x74>
 801460e:	4639      	mov	r1, r7
 8014610:	4622      	mov	r2, r4
 8014612:	4630      	mov	r0, r6
 8014614:	f7ff ff35 	bl	8014482 <__multiply>
 8014618:	4639      	mov	r1, r7
 801461a:	4681      	mov	r9, r0
 801461c:	4630      	mov	r0, r6
 801461e:	f7ff fe87 	bl	8014330 <_Bfree>
 8014622:	464f      	mov	r7, r9
 8014624:	106d      	asrs	r5, r5, #1
 8014626:	d00b      	beq.n	8014640 <__pow5mult+0x90>
 8014628:	6820      	ldr	r0, [r4, #0]
 801462a:	b938      	cbnz	r0, 801463c <__pow5mult+0x8c>
 801462c:	4622      	mov	r2, r4
 801462e:	4621      	mov	r1, r4
 8014630:	4630      	mov	r0, r6
 8014632:	f7ff ff26 	bl	8014482 <__multiply>
 8014636:	6020      	str	r0, [r4, #0]
 8014638:	f8c0 8000 	str.w	r8, [r0]
 801463c:	4604      	mov	r4, r0
 801463e:	e7e4      	b.n	801460a <__pow5mult+0x5a>
 8014640:	4638      	mov	r0, r7
 8014642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014646:	bf00      	nop
 8014648:	08015040 	.word	0x08015040

0801464c <__lshift>:
 801464c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014650:	460c      	mov	r4, r1
 8014652:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014656:	6923      	ldr	r3, [r4, #16]
 8014658:	6849      	ldr	r1, [r1, #4]
 801465a:	eb0a 0903 	add.w	r9, sl, r3
 801465e:	68a3      	ldr	r3, [r4, #8]
 8014660:	4607      	mov	r7, r0
 8014662:	4616      	mov	r6, r2
 8014664:	f109 0501 	add.w	r5, r9, #1
 8014668:	42ab      	cmp	r3, r5
 801466a:	db32      	blt.n	80146d2 <__lshift+0x86>
 801466c:	4638      	mov	r0, r7
 801466e:	f7ff fe2b 	bl	80142c8 <_Balloc>
 8014672:	2300      	movs	r3, #0
 8014674:	4680      	mov	r8, r0
 8014676:	f100 0114 	add.w	r1, r0, #20
 801467a:	461a      	mov	r2, r3
 801467c:	4553      	cmp	r3, sl
 801467e:	db2b      	blt.n	80146d8 <__lshift+0x8c>
 8014680:	6920      	ldr	r0, [r4, #16]
 8014682:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014686:	f104 0314 	add.w	r3, r4, #20
 801468a:	f016 021f 	ands.w	r2, r6, #31
 801468e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014692:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014696:	d025      	beq.n	80146e4 <__lshift+0x98>
 8014698:	f1c2 0e20 	rsb	lr, r2, #32
 801469c:	2000      	movs	r0, #0
 801469e:	681e      	ldr	r6, [r3, #0]
 80146a0:	468a      	mov	sl, r1
 80146a2:	4096      	lsls	r6, r2
 80146a4:	4330      	orrs	r0, r6
 80146a6:	f84a 0b04 	str.w	r0, [sl], #4
 80146aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80146ae:	459c      	cmp	ip, r3
 80146b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80146b4:	d814      	bhi.n	80146e0 <__lshift+0x94>
 80146b6:	6048      	str	r0, [r1, #4]
 80146b8:	b108      	cbz	r0, 80146be <__lshift+0x72>
 80146ba:	f109 0502 	add.w	r5, r9, #2
 80146be:	3d01      	subs	r5, #1
 80146c0:	4638      	mov	r0, r7
 80146c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80146c6:	4621      	mov	r1, r4
 80146c8:	f7ff fe32 	bl	8014330 <_Bfree>
 80146cc:	4640      	mov	r0, r8
 80146ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d2:	3101      	adds	r1, #1
 80146d4:	005b      	lsls	r3, r3, #1
 80146d6:	e7c7      	b.n	8014668 <__lshift+0x1c>
 80146d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80146dc:	3301      	adds	r3, #1
 80146de:	e7cd      	b.n	801467c <__lshift+0x30>
 80146e0:	4651      	mov	r1, sl
 80146e2:	e7dc      	b.n	801469e <__lshift+0x52>
 80146e4:	3904      	subs	r1, #4
 80146e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80146ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80146ee:	459c      	cmp	ip, r3
 80146f0:	d8f9      	bhi.n	80146e6 <__lshift+0x9a>
 80146f2:	e7e4      	b.n	80146be <__lshift+0x72>

080146f4 <__mcmp>:
 80146f4:	6903      	ldr	r3, [r0, #16]
 80146f6:	690a      	ldr	r2, [r1, #16]
 80146f8:	1a9b      	subs	r3, r3, r2
 80146fa:	b530      	push	{r4, r5, lr}
 80146fc:	d10c      	bne.n	8014718 <__mcmp+0x24>
 80146fe:	0092      	lsls	r2, r2, #2
 8014700:	3014      	adds	r0, #20
 8014702:	3114      	adds	r1, #20
 8014704:	1884      	adds	r4, r0, r2
 8014706:	4411      	add	r1, r2
 8014708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801470c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014710:	4295      	cmp	r5, r2
 8014712:	d003      	beq.n	801471c <__mcmp+0x28>
 8014714:	d305      	bcc.n	8014722 <__mcmp+0x2e>
 8014716:	2301      	movs	r3, #1
 8014718:	4618      	mov	r0, r3
 801471a:	bd30      	pop	{r4, r5, pc}
 801471c:	42a0      	cmp	r0, r4
 801471e:	d3f3      	bcc.n	8014708 <__mcmp+0x14>
 8014720:	e7fa      	b.n	8014718 <__mcmp+0x24>
 8014722:	f04f 33ff 	mov.w	r3, #4294967295
 8014726:	e7f7      	b.n	8014718 <__mcmp+0x24>

08014728 <__mdiff>:
 8014728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801472c:	460d      	mov	r5, r1
 801472e:	4607      	mov	r7, r0
 8014730:	4611      	mov	r1, r2
 8014732:	4628      	mov	r0, r5
 8014734:	4614      	mov	r4, r2
 8014736:	f7ff ffdd 	bl	80146f4 <__mcmp>
 801473a:	1e06      	subs	r6, r0, #0
 801473c:	d108      	bne.n	8014750 <__mdiff+0x28>
 801473e:	4631      	mov	r1, r6
 8014740:	4638      	mov	r0, r7
 8014742:	f7ff fdc1 	bl	80142c8 <_Balloc>
 8014746:	2301      	movs	r3, #1
 8014748:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014750:	bfa4      	itt	ge
 8014752:	4623      	movge	r3, r4
 8014754:	462c      	movge	r4, r5
 8014756:	4638      	mov	r0, r7
 8014758:	6861      	ldr	r1, [r4, #4]
 801475a:	bfa6      	itte	ge
 801475c:	461d      	movge	r5, r3
 801475e:	2600      	movge	r6, #0
 8014760:	2601      	movlt	r6, #1
 8014762:	f7ff fdb1 	bl	80142c8 <_Balloc>
 8014766:	692b      	ldr	r3, [r5, #16]
 8014768:	60c6      	str	r6, [r0, #12]
 801476a:	6926      	ldr	r6, [r4, #16]
 801476c:	f105 0914 	add.w	r9, r5, #20
 8014770:	f104 0214 	add.w	r2, r4, #20
 8014774:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014778:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801477c:	f100 0514 	add.w	r5, r0, #20
 8014780:	f04f 0e00 	mov.w	lr, #0
 8014784:	f852 ab04 	ldr.w	sl, [r2], #4
 8014788:	f859 4b04 	ldr.w	r4, [r9], #4
 801478c:	fa1e f18a 	uxtah	r1, lr, sl
 8014790:	b2a3      	uxth	r3, r4
 8014792:	1ac9      	subs	r1, r1, r3
 8014794:	0c23      	lsrs	r3, r4, #16
 8014796:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801479a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801479e:	b289      	uxth	r1, r1
 80147a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80147a4:	45c8      	cmp	r8, r9
 80147a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80147aa:	4694      	mov	ip, r2
 80147ac:	f845 3b04 	str.w	r3, [r5], #4
 80147b0:	d8e8      	bhi.n	8014784 <__mdiff+0x5c>
 80147b2:	45bc      	cmp	ip, r7
 80147b4:	d304      	bcc.n	80147c0 <__mdiff+0x98>
 80147b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80147ba:	b183      	cbz	r3, 80147de <__mdiff+0xb6>
 80147bc:	6106      	str	r6, [r0, #16]
 80147be:	e7c5      	b.n	801474c <__mdiff+0x24>
 80147c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80147c4:	fa1e f381 	uxtah	r3, lr, r1
 80147c8:	141a      	asrs	r2, r3, #16
 80147ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80147d8:	f845 3b04 	str.w	r3, [r5], #4
 80147dc:	e7e9      	b.n	80147b2 <__mdiff+0x8a>
 80147de:	3e01      	subs	r6, #1
 80147e0:	e7e9      	b.n	80147b6 <__mdiff+0x8e>

080147e2 <__d2b>:
 80147e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80147e6:	460e      	mov	r6, r1
 80147e8:	2101      	movs	r1, #1
 80147ea:	ec59 8b10 	vmov	r8, r9, d0
 80147ee:	4615      	mov	r5, r2
 80147f0:	f7ff fd6a 	bl	80142c8 <_Balloc>
 80147f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80147f8:	4607      	mov	r7, r0
 80147fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80147fe:	bb34      	cbnz	r4, 801484e <__d2b+0x6c>
 8014800:	9301      	str	r3, [sp, #4]
 8014802:	f1b8 0300 	subs.w	r3, r8, #0
 8014806:	d027      	beq.n	8014858 <__d2b+0x76>
 8014808:	a802      	add	r0, sp, #8
 801480a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801480e:	f7ff fe00 	bl	8014412 <__lo0bits>
 8014812:	9900      	ldr	r1, [sp, #0]
 8014814:	b1f0      	cbz	r0, 8014854 <__d2b+0x72>
 8014816:	9a01      	ldr	r2, [sp, #4]
 8014818:	f1c0 0320 	rsb	r3, r0, #32
 801481c:	fa02 f303 	lsl.w	r3, r2, r3
 8014820:	430b      	orrs	r3, r1
 8014822:	40c2      	lsrs	r2, r0
 8014824:	617b      	str	r3, [r7, #20]
 8014826:	9201      	str	r2, [sp, #4]
 8014828:	9b01      	ldr	r3, [sp, #4]
 801482a:	61bb      	str	r3, [r7, #24]
 801482c:	2b00      	cmp	r3, #0
 801482e:	bf14      	ite	ne
 8014830:	2102      	movne	r1, #2
 8014832:	2101      	moveq	r1, #1
 8014834:	6139      	str	r1, [r7, #16]
 8014836:	b1c4      	cbz	r4, 801486a <__d2b+0x88>
 8014838:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801483c:	4404      	add	r4, r0
 801483e:	6034      	str	r4, [r6, #0]
 8014840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014844:	6028      	str	r0, [r5, #0]
 8014846:	4638      	mov	r0, r7
 8014848:	b003      	add	sp, #12
 801484a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801484e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014852:	e7d5      	b.n	8014800 <__d2b+0x1e>
 8014854:	6179      	str	r1, [r7, #20]
 8014856:	e7e7      	b.n	8014828 <__d2b+0x46>
 8014858:	a801      	add	r0, sp, #4
 801485a:	f7ff fdda 	bl	8014412 <__lo0bits>
 801485e:	9b01      	ldr	r3, [sp, #4]
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	2101      	movs	r1, #1
 8014864:	6139      	str	r1, [r7, #16]
 8014866:	3020      	adds	r0, #32
 8014868:	e7e5      	b.n	8014836 <__d2b+0x54>
 801486a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801486e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014872:	6030      	str	r0, [r6, #0]
 8014874:	6918      	ldr	r0, [r3, #16]
 8014876:	f7ff fdad 	bl	80143d4 <__hi0bits>
 801487a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801487e:	e7e1      	b.n	8014844 <__d2b+0x62>

08014880 <_calloc_r>:
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	fb02 f401 	mul.w	r4, r2, r1
 8014886:	4621      	mov	r1, r4
 8014888:	f000 f856 	bl	8014938 <_malloc_r>
 801488c:	4605      	mov	r5, r0
 801488e:	b118      	cbz	r0, 8014898 <_calloc_r+0x18>
 8014890:	4622      	mov	r2, r4
 8014892:	2100      	movs	r1, #0
 8014894:	f7fd ff3d 	bl	8012712 <memset>
 8014898:	4628      	mov	r0, r5
 801489a:	bd38      	pop	{r3, r4, r5, pc}

0801489c <_free_r>:
 801489c:	b538      	push	{r3, r4, r5, lr}
 801489e:	4605      	mov	r5, r0
 80148a0:	2900      	cmp	r1, #0
 80148a2:	d045      	beq.n	8014930 <_free_r+0x94>
 80148a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148a8:	1f0c      	subs	r4, r1, #4
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	bfb8      	it	lt
 80148ae:	18e4      	addlt	r4, r4, r3
 80148b0:	f000 fa98 	bl	8014de4 <__malloc_lock>
 80148b4:	4a1f      	ldr	r2, [pc, #124]	; (8014934 <_free_r+0x98>)
 80148b6:	6813      	ldr	r3, [r2, #0]
 80148b8:	4610      	mov	r0, r2
 80148ba:	b933      	cbnz	r3, 80148ca <_free_r+0x2e>
 80148bc:	6063      	str	r3, [r4, #4]
 80148be:	6014      	str	r4, [r2, #0]
 80148c0:	4628      	mov	r0, r5
 80148c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148c6:	f000 ba8e 	b.w	8014de6 <__malloc_unlock>
 80148ca:	42a3      	cmp	r3, r4
 80148cc:	d90c      	bls.n	80148e8 <_free_r+0x4c>
 80148ce:	6821      	ldr	r1, [r4, #0]
 80148d0:	1862      	adds	r2, r4, r1
 80148d2:	4293      	cmp	r3, r2
 80148d4:	bf04      	itt	eq
 80148d6:	681a      	ldreq	r2, [r3, #0]
 80148d8:	685b      	ldreq	r3, [r3, #4]
 80148da:	6063      	str	r3, [r4, #4]
 80148dc:	bf04      	itt	eq
 80148de:	1852      	addeq	r2, r2, r1
 80148e0:	6022      	streq	r2, [r4, #0]
 80148e2:	6004      	str	r4, [r0, #0]
 80148e4:	e7ec      	b.n	80148c0 <_free_r+0x24>
 80148e6:	4613      	mov	r3, r2
 80148e8:	685a      	ldr	r2, [r3, #4]
 80148ea:	b10a      	cbz	r2, 80148f0 <_free_r+0x54>
 80148ec:	42a2      	cmp	r2, r4
 80148ee:	d9fa      	bls.n	80148e6 <_free_r+0x4a>
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	1858      	adds	r0, r3, r1
 80148f4:	42a0      	cmp	r0, r4
 80148f6:	d10b      	bne.n	8014910 <_free_r+0x74>
 80148f8:	6820      	ldr	r0, [r4, #0]
 80148fa:	4401      	add	r1, r0
 80148fc:	1858      	adds	r0, r3, r1
 80148fe:	4282      	cmp	r2, r0
 8014900:	6019      	str	r1, [r3, #0]
 8014902:	d1dd      	bne.n	80148c0 <_free_r+0x24>
 8014904:	6810      	ldr	r0, [r2, #0]
 8014906:	6852      	ldr	r2, [r2, #4]
 8014908:	605a      	str	r2, [r3, #4]
 801490a:	4401      	add	r1, r0
 801490c:	6019      	str	r1, [r3, #0]
 801490e:	e7d7      	b.n	80148c0 <_free_r+0x24>
 8014910:	d902      	bls.n	8014918 <_free_r+0x7c>
 8014912:	230c      	movs	r3, #12
 8014914:	602b      	str	r3, [r5, #0]
 8014916:	e7d3      	b.n	80148c0 <_free_r+0x24>
 8014918:	6820      	ldr	r0, [r4, #0]
 801491a:	1821      	adds	r1, r4, r0
 801491c:	428a      	cmp	r2, r1
 801491e:	bf04      	itt	eq
 8014920:	6811      	ldreq	r1, [r2, #0]
 8014922:	6852      	ldreq	r2, [r2, #4]
 8014924:	6062      	str	r2, [r4, #4]
 8014926:	bf04      	itt	eq
 8014928:	1809      	addeq	r1, r1, r0
 801492a:	6021      	streq	r1, [r4, #0]
 801492c:	605c      	str	r4, [r3, #4]
 801492e:	e7c7      	b.n	80148c0 <_free_r+0x24>
 8014930:	bd38      	pop	{r3, r4, r5, pc}
 8014932:	bf00      	nop
 8014934:	20000458 	.word	0x20000458

08014938 <_malloc_r>:
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	1ccd      	adds	r5, r1, #3
 801493c:	f025 0503 	bic.w	r5, r5, #3
 8014940:	3508      	adds	r5, #8
 8014942:	2d0c      	cmp	r5, #12
 8014944:	bf38      	it	cc
 8014946:	250c      	movcc	r5, #12
 8014948:	2d00      	cmp	r5, #0
 801494a:	4606      	mov	r6, r0
 801494c:	db01      	blt.n	8014952 <_malloc_r+0x1a>
 801494e:	42a9      	cmp	r1, r5
 8014950:	d903      	bls.n	801495a <_malloc_r+0x22>
 8014952:	230c      	movs	r3, #12
 8014954:	6033      	str	r3, [r6, #0]
 8014956:	2000      	movs	r0, #0
 8014958:	bd70      	pop	{r4, r5, r6, pc}
 801495a:	f000 fa43 	bl	8014de4 <__malloc_lock>
 801495e:	4a21      	ldr	r2, [pc, #132]	; (80149e4 <_malloc_r+0xac>)
 8014960:	6814      	ldr	r4, [r2, #0]
 8014962:	4621      	mov	r1, r4
 8014964:	b991      	cbnz	r1, 801498c <_malloc_r+0x54>
 8014966:	4c20      	ldr	r4, [pc, #128]	; (80149e8 <_malloc_r+0xb0>)
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	b91b      	cbnz	r3, 8014974 <_malloc_r+0x3c>
 801496c:	4630      	mov	r0, r6
 801496e:	f000 f97d 	bl	8014c6c <_sbrk_r>
 8014972:	6020      	str	r0, [r4, #0]
 8014974:	4629      	mov	r1, r5
 8014976:	4630      	mov	r0, r6
 8014978:	f000 f978 	bl	8014c6c <_sbrk_r>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d124      	bne.n	80149ca <_malloc_r+0x92>
 8014980:	230c      	movs	r3, #12
 8014982:	6033      	str	r3, [r6, #0]
 8014984:	4630      	mov	r0, r6
 8014986:	f000 fa2e 	bl	8014de6 <__malloc_unlock>
 801498a:	e7e4      	b.n	8014956 <_malloc_r+0x1e>
 801498c:	680b      	ldr	r3, [r1, #0]
 801498e:	1b5b      	subs	r3, r3, r5
 8014990:	d418      	bmi.n	80149c4 <_malloc_r+0x8c>
 8014992:	2b0b      	cmp	r3, #11
 8014994:	d90f      	bls.n	80149b6 <_malloc_r+0x7e>
 8014996:	600b      	str	r3, [r1, #0]
 8014998:	50cd      	str	r5, [r1, r3]
 801499a:	18cc      	adds	r4, r1, r3
 801499c:	4630      	mov	r0, r6
 801499e:	f000 fa22 	bl	8014de6 <__malloc_unlock>
 80149a2:	f104 000b 	add.w	r0, r4, #11
 80149a6:	1d23      	adds	r3, r4, #4
 80149a8:	f020 0007 	bic.w	r0, r0, #7
 80149ac:	1ac3      	subs	r3, r0, r3
 80149ae:	d0d3      	beq.n	8014958 <_malloc_r+0x20>
 80149b0:	425a      	negs	r2, r3
 80149b2:	50e2      	str	r2, [r4, r3]
 80149b4:	e7d0      	b.n	8014958 <_malloc_r+0x20>
 80149b6:	428c      	cmp	r4, r1
 80149b8:	684b      	ldr	r3, [r1, #4]
 80149ba:	bf16      	itet	ne
 80149bc:	6063      	strne	r3, [r4, #4]
 80149be:	6013      	streq	r3, [r2, #0]
 80149c0:	460c      	movne	r4, r1
 80149c2:	e7eb      	b.n	801499c <_malloc_r+0x64>
 80149c4:	460c      	mov	r4, r1
 80149c6:	6849      	ldr	r1, [r1, #4]
 80149c8:	e7cc      	b.n	8014964 <_malloc_r+0x2c>
 80149ca:	1cc4      	adds	r4, r0, #3
 80149cc:	f024 0403 	bic.w	r4, r4, #3
 80149d0:	42a0      	cmp	r0, r4
 80149d2:	d005      	beq.n	80149e0 <_malloc_r+0xa8>
 80149d4:	1a21      	subs	r1, r4, r0
 80149d6:	4630      	mov	r0, r6
 80149d8:	f000 f948 	bl	8014c6c <_sbrk_r>
 80149dc:	3001      	adds	r0, #1
 80149de:	d0cf      	beq.n	8014980 <_malloc_r+0x48>
 80149e0:	6025      	str	r5, [r4, #0]
 80149e2:	e7db      	b.n	801499c <_malloc_r+0x64>
 80149e4:	20000458 	.word	0x20000458
 80149e8:	2000045c 	.word	0x2000045c

080149ec <__sfputc_r>:
 80149ec:	6893      	ldr	r3, [r2, #8]
 80149ee:	3b01      	subs	r3, #1
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	b410      	push	{r4}
 80149f4:	6093      	str	r3, [r2, #8]
 80149f6:	da08      	bge.n	8014a0a <__sfputc_r+0x1e>
 80149f8:	6994      	ldr	r4, [r2, #24]
 80149fa:	42a3      	cmp	r3, r4
 80149fc:	db01      	blt.n	8014a02 <__sfputc_r+0x16>
 80149fe:	290a      	cmp	r1, #10
 8014a00:	d103      	bne.n	8014a0a <__sfputc_r+0x1e>
 8014a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a06:	f7fe bb65 	b.w	80130d4 <__swbuf_r>
 8014a0a:	6813      	ldr	r3, [r2, #0]
 8014a0c:	1c58      	adds	r0, r3, #1
 8014a0e:	6010      	str	r0, [r2, #0]
 8014a10:	7019      	strb	r1, [r3, #0]
 8014a12:	4608      	mov	r0, r1
 8014a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <__sfputs_r>:
 8014a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	460f      	mov	r7, r1
 8014a20:	4614      	mov	r4, r2
 8014a22:	18d5      	adds	r5, r2, r3
 8014a24:	42ac      	cmp	r4, r5
 8014a26:	d101      	bne.n	8014a2c <__sfputs_r+0x12>
 8014a28:	2000      	movs	r0, #0
 8014a2a:	e007      	b.n	8014a3c <__sfputs_r+0x22>
 8014a2c:	463a      	mov	r2, r7
 8014a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a32:	4630      	mov	r0, r6
 8014a34:	f7ff ffda 	bl	80149ec <__sfputc_r>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d1f3      	bne.n	8014a24 <__sfputs_r+0xa>
 8014a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a40 <_vfiprintf_r>:
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a44:	460c      	mov	r4, r1
 8014a46:	b09d      	sub	sp, #116	; 0x74
 8014a48:	4617      	mov	r7, r2
 8014a4a:	461d      	mov	r5, r3
 8014a4c:	4606      	mov	r6, r0
 8014a4e:	b118      	cbz	r0, 8014a58 <_vfiprintf_r+0x18>
 8014a50:	6983      	ldr	r3, [r0, #24]
 8014a52:	b90b      	cbnz	r3, 8014a58 <_vfiprintf_r+0x18>
 8014a54:	f7ff fb34 	bl	80140c0 <__sinit>
 8014a58:	4b7c      	ldr	r3, [pc, #496]	; (8014c4c <_vfiprintf_r+0x20c>)
 8014a5a:	429c      	cmp	r4, r3
 8014a5c:	d158      	bne.n	8014b10 <_vfiprintf_r+0xd0>
 8014a5e:	6874      	ldr	r4, [r6, #4]
 8014a60:	89a3      	ldrh	r3, [r4, #12]
 8014a62:	0718      	lsls	r0, r3, #28
 8014a64:	d55e      	bpl.n	8014b24 <_vfiprintf_r+0xe4>
 8014a66:	6923      	ldr	r3, [r4, #16]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d05b      	beq.n	8014b24 <_vfiprintf_r+0xe4>
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a70:	2320      	movs	r3, #32
 8014a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a76:	2330      	movs	r3, #48	; 0x30
 8014a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a7c:	9503      	str	r5, [sp, #12]
 8014a7e:	f04f 0b01 	mov.w	fp, #1
 8014a82:	46b8      	mov	r8, r7
 8014a84:	4645      	mov	r5, r8
 8014a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014a8a:	b10b      	cbz	r3, 8014a90 <_vfiprintf_r+0x50>
 8014a8c:	2b25      	cmp	r3, #37	; 0x25
 8014a8e:	d154      	bne.n	8014b3a <_vfiprintf_r+0xfa>
 8014a90:	ebb8 0a07 	subs.w	sl, r8, r7
 8014a94:	d00b      	beq.n	8014aae <_vfiprintf_r+0x6e>
 8014a96:	4653      	mov	r3, sl
 8014a98:	463a      	mov	r2, r7
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4630      	mov	r0, r6
 8014a9e:	f7ff ffbc 	bl	8014a1a <__sfputs_r>
 8014aa2:	3001      	adds	r0, #1
 8014aa4:	f000 80c2 	beq.w	8014c2c <_vfiprintf_r+0x1ec>
 8014aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aaa:	4453      	add	r3, sl
 8014aac:	9309      	str	r3, [sp, #36]	; 0x24
 8014aae:	f898 3000 	ldrb.w	r3, [r8]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 80ba 	beq.w	8014c2c <_vfiprintf_r+0x1ec>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f04f 32ff 	mov.w	r2, #4294967295
 8014abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ac2:	9304      	str	r3, [sp, #16]
 8014ac4:	9307      	str	r3, [sp, #28]
 8014ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014aca:	931a      	str	r3, [sp, #104]	; 0x68
 8014acc:	46a8      	mov	r8, r5
 8014ace:	2205      	movs	r2, #5
 8014ad0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014ad4:	485e      	ldr	r0, [pc, #376]	; (8014c50 <_vfiprintf_r+0x210>)
 8014ad6:	f7f3 fabb 	bl	8008050 <memchr>
 8014ada:	9b04      	ldr	r3, [sp, #16]
 8014adc:	bb78      	cbnz	r0, 8014b3e <_vfiprintf_r+0xfe>
 8014ade:	06d9      	lsls	r1, r3, #27
 8014ae0:	bf44      	itt	mi
 8014ae2:	2220      	movmi	r2, #32
 8014ae4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014ae8:	071a      	lsls	r2, r3, #28
 8014aea:	bf44      	itt	mi
 8014aec:	222b      	movmi	r2, #43	; 0x2b
 8014aee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014af2:	782a      	ldrb	r2, [r5, #0]
 8014af4:	2a2a      	cmp	r2, #42	; 0x2a
 8014af6:	d02a      	beq.n	8014b4e <_vfiprintf_r+0x10e>
 8014af8:	9a07      	ldr	r2, [sp, #28]
 8014afa:	46a8      	mov	r8, r5
 8014afc:	2000      	movs	r0, #0
 8014afe:	250a      	movs	r5, #10
 8014b00:	4641      	mov	r1, r8
 8014b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b06:	3b30      	subs	r3, #48	; 0x30
 8014b08:	2b09      	cmp	r3, #9
 8014b0a:	d969      	bls.n	8014be0 <_vfiprintf_r+0x1a0>
 8014b0c:	b360      	cbz	r0, 8014b68 <_vfiprintf_r+0x128>
 8014b0e:	e024      	b.n	8014b5a <_vfiprintf_r+0x11a>
 8014b10:	4b50      	ldr	r3, [pc, #320]	; (8014c54 <_vfiprintf_r+0x214>)
 8014b12:	429c      	cmp	r4, r3
 8014b14:	d101      	bne.n	8014b1a <_vfiprintf_r+0xda>
 8014b16:	68b4      	ldr	r4, [r6, #8]
 8014b18:	e7a2      	b.n	8014a60 <_vfiprintf_r+0x20>
 8014b1a:	4b4f      	ldr	r3, [pc, #316]	; (8014c58 <_vfiprintf_r+0x218>)
 8014b1c:	429c      	cmp	r4, r3
 8014b1e:	bf08      	it	eq
 8014b20:	68f4      	ldreq	r4, [r6, #12]
 8014b22:	e79d      	b.n	8014a60 <_vfiprintf_r+0x20>
 8014b24:	4621      	mov	r1, r4
 8014b26:	4630      	mov	r0, r6
 8014b28:	f7fe fb26 	bl	8013178 <__swsetup_r>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d09d      	beq.n	8014a6c <_vfiprintf_r+0x2c>
 8014b30:	f04f 30ff 	mov.w	r0, #4294967295
 8014b34:	b01d      	add	sp, #116	; 0x74
 8014b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3a:	46a8      	mov	r8, r5
 8014b3c:	e7a2      	b.n	8014a84 <_vfiprintf_r+0x44>
 8014b3e:	4a44      	ldr	r2, [pc, #272]	; (8014c50 <_vfiprintf_r+0x210>)
 8014b40:	1a80      	subs	r0, r0, r2
 8014b42:	fa0b f000 	lsl.w	r0, fp, r0
 8014b46:	4318      	orrs	r0, r3
 8014b48:	9004      	str	r0, [sp, #16]
 8014b4a:	4645      	mov	r5, r8
 8014b4c:	e7be      	b.n	8014acc <_vfiprintf_r+0x8c>
 8014b4e:	9a03      	ldr	r2, [sp, #12]
 8014b50:	1d11      	adds	r1, r2, #4
 8014b52:	6812      	ldr	r2, [r2, #0]
 8014b54:	9103      	str	r1, [sp, #12]
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	db01      	blt.n	8014b5e <_vfiprintf_r+0x11e>
 8014b5a:	9207      	str	r2, [sp, #28]
 8014b5c:	e004      	b.n	8014b68 <_vfiprintf_r+0x128>
 8014b5e:	4252      	negs	r2, r2
 8014b60:	f043 0302 	orr.w	r3, r3, #2
 8014b64:	9207      	str	r2, [sp, #28]
 8014b66:	9304      	str	r3, [sp, #16]
 8014b68:	f898 3000 	ldrb.w	r3, [r8]
 8014b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8014b6e:	d10e      	bne.n	8014b8e <_vfiprintf_r+0x14e>
 8014b70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014b74:	2b2a      	cmp	r3, #42	; 0x2a
 8014b76:	d138      	bne.n	8014bea <_vfiprintf_r+0x1aa>
 8014b78:	9b03      	ldr	r3, [sp, #12]
 8014b7a:	1d1a      	adds	r2, r3, #4
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	9203      	str	r2, [sp, #12]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	bfb8      	it	lt
 8014b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b88:	f108 0802 	add.w	r8, r8, #2
 8014b8c:	9305      	str	r3, [sp, #20]
 8014b8e:	4d33      	ldr	r5, [pc, #204]	; (8014c5c <_vfiprintf_r+0x21c>)
 8014b90:	f898 1000 	ldrb.w	r1, [r8]
 8014b94:	2203      	movs	r2, #3
 8014b96:	4628      	mov	r0, r5
 8014b98:	f7f3 fa5a 	bl	8008050 <memchr>
 8014b9c:	b140      	cbz	r0, 8014bb0 <_vfiprintf_r+0x170>
 8014b9e:	2340      	movs	r3, #64	; 0x40
 8014ba0:	1b40      	subs	r0, r0, r5
 8014ba2:	fa03 f000 	lsl.w	r0, r3, r0
 8014ba6:	9b04      	ldr	r3, [sp, #16]
 8014ba8:	4303      	orrs	r3, r0
 8014baa:	f108 0801 	add.w	r8, r8, #1
 8014bae:	9304      	str	r3, [sp, #16]
 8014bb0:	f898 1000 	ldrb.w	r1, [r8]
 8014bb4:	482a      	ldr	r0, [pc, #168]	; (8014c60 <_vfiprintf_r+0x220>)
 8014bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bba:	2206      	movs	r2, #6
 8014bbc:	f108 0701 	add.w	r7, r8, #1
 8014bc0:	f7f3 fa46 	bl	8008050 <memchr>
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d037      	beq.n	8014c38 <_vfiprintf_r+0x1f8>
 8014bc8:	4b26      	ldr	r3, [pc, #152]	; (8014c64 <_vfiprintf_r+0x224>)
 8014bca:	bb1b      	cbnz	r3, 8014c14 <_vfiprintf_r+0x1d4>
 8014bcc:	9b03      	ldr	r3, [sp, #12]
 8014bce:	3307      	adds	r3, #7
 8014bd0:	f023 0307 	bic.w	r3, r3, #7
 8014bd4:	3308      	adds	r3, #8
 8014bd6:	9303      	str	r3, [sp, #12]
 8014bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bda:	444b      	add	r3, r9
 8014bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8014bde:	e750      	b.n	8014a82 <_vfiprintf_r+0x42>
 8014be0:	fb05 3202 	mla	r2, r5, r2, r3
 8014be4:	2001      	movs	r0, #1
 8014be6:	4688      	mov	r8, r1
 8014be8:	e78a      	b.n	8014b00 <_vfiprintf_r+0xc0>
 8014bea:	2300      	movs	r3, #0
 8014bec:	f108 0801 	add.w	r8, r8, #1
 8014bf0:	9305      	str	r3, [sp, #20]
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	250a      	movs	r5, #10
 8014bf6:	4640      	mov	r0, r8
 8014bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bfc:	3a30      	subs	r2, #48	; 0x30
 8014bfe:	2a09      	cmp	r2, #9
 8014c00:	d903      	bls.n	8014c0a <_vfiprintf_r+0x1ca>
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d0c3      	beq.n	8014b8e <_vfiprintf_r+0x14e>
 8014c06:	9105      	str	r1, [sp, #20]
 8014c08:	e7c1      	b.n	8014b8e <_vfiprintf_r+0x14e>
 8014c0a:	fb05 2101 	mla	r1, r5, r1, r2
 8014c0e:	2301      	movs	r3, #1
 8014c10:	4680      	mov	r8, r0
 8014c12:	e7f0      	b.n	8014bf6 <_vfiprintf_r+0x1b6>
 8014c14:	ab03      	add	r3, sp, #12
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	4622      	mov	r2, r4
 8014c1a:	4b13      	ldr	r3, [pc, #76]	; (8014c68 <_vfiprintf_r+0x228>)
 8014c1c:	a904      	add	r1, sp, #16
 8014c1e:	4630      	mov	r0, r6
 8014c20:	f7fd fe14 	bl	801284c <_printf_float>
 8014c24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014c28:	4681      	mov	r9, r0
 8014c2a:	d1d5      	bne.n	8014bd8 <_vfiprintf_r+0x198>
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	065b      	lsls	r3, r3, #25
 8014c30:	f53f af7e 	bmi.w	8014b30 <_vfiprintf_r+0xf0>
 8014c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c36:	e77d      	b.n	8014b34 <_vfiprintf_r+0xf4>
 8014c38:	ab03      	add	r3, sp, #12
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	4622      	mov	r2, r4
 8014c3e:	4b0a      	ldr	r3, [pc, #40]	; (8014c68 <_vfiprintf_r+0x228>)
 8014c40:	a904      	add	r1, sp, #16
 8014c42:	4630      	mov	r0, r6
 8014c44:	f7fe f8b8 	bl	8012db8 <_printf_i>
 8014c48:	e7ec      	b.n	8014c24 <_vfiprintf_r+0x1e4>
 8014c4a:	bf00      	nop
 8014c4c:	08014f0c 	.word	0x08014f0c
 8014c50:	0801504c 	.word	0x0801504c
 8014c54:	08014f2c 	.word	0x08014f2c
 8014c58:	08014eec 	.word	0x08014eec
 8014c5c:	08015052 	.word	0x08015052
 8014c60:	08015056 	.word	0x08015056
 8014c64:	0801284d 	.word	0x0801284d
 8014c68:	08014a1b 	.word	0x08014a1b

08014c6c <_sbrk_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	4c06      	ldr	r4, [pc, #24]	; (8014c88 <_sbrk_r+0x1c>)
 8014c70:	2300      	movs	r3, #0
 8014c72:	4605      	mov	r5, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	f7f8 f8a0 	bl	800cdbc <_sbrk>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_sbrk_r+0x1a>
 8014c80:	6823      	ldr	r3, [r4, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_sbrk_r+0x1a>
 8014c84:	602b      	str	r3, [r5, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	20000958 	.word	0x20000958

08014c8c <__sread>:
 8014c8c:	b510      	push	{r4, lr}
 8014c8e:	460c      	mov	r4, r1
 8014c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c94:	f000 f8a8 	bl	8014de8 <_read_r>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	bfab      	itete	ge
 8014c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8014ca0:	181b      	addge	r3, r3, r0
 8014ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ca6:	bfac      	ite	ge
 8014ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014caa:	81a3      	strhlt	r3, [r4, #12]
 8014cac:	bd10      	pop	{r4, pc}

08014cae <__swrite>:
 8014cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb2:	461f      	mov	r7, r3
 8014cb4:	898b      	ldrh	r3, [r1, #12]
 8014cb6:	05db      	lsls	r3, r3, #23
 8014cb8:	4605      	mov	r5, r0
 8014cba:	460c      	mov	r4, r1
 8014cbc:	4616      	mov	r6, r2
 8014cbe:	d505      	bpl.n	8014ccc <__swrite+0x1e>
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cc8:	f000 f868 	bl	8014d9c <_lseek_r>
 8014ccc:	89a3      	ldrh	r3, [r4, #12]
 8014cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cd6:	81a3      	strh	r3, [r4, #12]
 8014cd8:	4632      	mov	r2, r6
 8014cda:	463b      	mov	r3, r7
 8014cdc:	4628      	mov	r0, r5
 8014cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce2:	f000 b817 	b.w	8014d14 <_write_r>

08014ce6 <__sseek>:
 8014ce6:	b510      	push	{r4, lr}
 8014ce8:	460c      	mov	r4, r1
 8014cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cee:	f000 f855 	bl	8014d9c <_lseek_r>
 8014cf2:	1c43      	adds	r3, r0, #1
 8014cf4:	89a3      	ldrh	r3, [r4, #12]
 8014cf6:	bf15      	itete	ne
 8014cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d02:	81a3      	strheq	r3, [r4, #12]
 8014d04:	bf18      	it	ne
 8014d06:	81a3      	strhne	r3, [r4, #12]
 8014d08:	bd10      	pop	{r4, pc}

08014d0a <__sclose>:
 8014d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d0e:	f000 b813 	b.w	8014d38 <_close_r>
	...

08014d14 <_write_r>:
 8014d14:	b538      	push	{r3, r4, r5, lr}
 8014d16:	4c07      	ldr	r4, [pc, #28]	; (8014d34 <_write_r+0x20>)
 8014d18:	4605      	mov	r5, r0
 8014d1a:	4608      	mov	r0, r1
 8014d1c:	4611      	mov	r1, r2
 8014d1e:	2200      	movs	r2, #0
 8014d20:	6022      	str	r2, [r4, #0]
 8014d22:	461a      	mov	r2, r3
 8014d24:	f7f7 fff9 	bl	800cd1a <_write>
 8014d28:	1c43      	adds	r3, r0, #1
 8014d2a:	d102      	bne.n	8014d32 <_write_r+0x1e>
 8014d2c:	6823      	ldr	r3, [r4, #0]
 8014d2e:	b103      	cbz	r3, 8014d32 <_write_r+0x1e>
 8014d30:	602b      	str	r3, [r5, #0]
 8014d32:	bd38      	pop	{r3, r4, r5, pc}
 8014d34:	20000958 	.word	0x20000958

08014d38 <_close_r>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	4c06      	ldr	r4, [pc, #24]	; (8014d54 <_close_r+0x1c>)
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	4605      	mov	r5, r0
 8014d40:	4608      	mov	r0, r1
 8014d42:	6023      	str	r3, [r4, #0]
 8014d44:	f7f8 f805 	bl	800cd52 <_close>
 8014d48:	1c43      	adds	r3, r0, #1
 8014d4a:	d102      	bne.n	8014d52 <_close_r+0x1a>
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	b103      	cbz	r3, 8014d52 <_close_r+0x1a>
 8014d50:	602b      	str	r3, [r5, #0]
 8014d52:	bd38      	pop	{r3, r4, r5, pc}
 8014d54:	20000958 	.word	0x20000958

08014d58 <_fstat_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4c07      	ldr	r4, [pc, #28]	; (8014d78 <_fstat_r+0x20>)
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4605      	mov	r5, r0
 8014d60:	4608      	mov	r0, r1
 8014d62:	4611      	mov	r1, r2
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	f7f8 f800 	bl	800cd6a <_fstat>
 8014d6a:	1c43      	adds	r3, r0, #1
 8014d6c:	d102      	bne.n	8014d74 <_fstat_r+0x1c>
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	b103      	cbz	r3, 8014d74 <_fstat_r+0x1c>
 8014d72:	602b      	str	r3, [r5, #0]
 8014d74:	bd38      	pop	{r3, r4, r5, pc}
 8014d76:	bf00      	nop
 8014d78:	20000958 	.word	0x20000958

08014d7c <_isatty_r>:
 8014d7c:	b538      	push	{r3, r4, r5, lr}
 8014d7e:	4c06      	ldr	r4, [pc, #24]	; (8014d98 <_isatty_r+0x1c>)
 8014d80:	2300      	movs	r3, #0
 8014d82:	4605      	mov	r5, r0
 8014d84:	4608      	mov	r0, r1
 8014d86:	6023      	str	r3, [r4, #0]
 8014d88:	f7f7 ffff 	bl	800cd8a <_isatty>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_isatty_r+0x1a>
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_isatty_r+0x1a>
 8014d94:	602b      	str	r3, [r5, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	20000958 	.word	0x20000958

08014d9c <_lseek_r>:
 8014d9c:	b538      	push	{r3, r4, r5, lr}
 8014d9e:	4c07      	ldr	r4, [pc, #28]	; (8014dbc <_lseek_r+0x20>)
 8014da0:	4605      	mov	r5, r0
 8014da2:	4608      	mov	r0, r1
 8014da4:	4611      	mov	r1, r2
 8014da6:	2200      	movs	r2, #0
 8014da8:	6022      	str	r2, [r4, #0]
 8014daa:	461a      	mov	r2, r3
 8014dac:	f7f7 fff8 	bl	800cda0 <_lseek>
 8014db0:	1c43      	adds	r3, r0, #1
 8014db2:	d102      	bne.n	8014dba <_lseek_r+0x1e>
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	b103      	cbz	r3, 8014dba <_lseek_r+0x1e>
 8014db8:	602b      	str	r3, [r5, #0]
 8014dba:	bd38      	pop	{r3, r4, r5, pc}
 8014dbc:	20000958 	.word	0x20000958

08014dc0 <__ascii_mbtowc>:
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	b901      	cbnz	r1, 8014dc6 <__ascii_mbtowc+0x6>
 8014dc4:	a901      	add	r1, sp, #4
 8014dc6:	b142      	cbz	r2, 8014dda <__ascii_mbtowc+0x1a>
 8014dc8:	b14b      	cbz	r3, 8014dde <__ascii_mbtowc+0x1e>
 8014dca:	7813      	ldrb	r3, [r2, #0]
 8014dcc:	600b      	str	r3, [r1, #0]
 8014dce:	7812      	ldrb	r2, [r2, #0]
 8014dd0:	1c10      	adds	r0, r2, #0
 8014dd2:	bf18      	it	ne
 8014dd4:	2001      	movne	r0, #1
 8014dd6:	b002      	add	sp, #8
 8014dd8:	4770      	bx	lr
 8014dda:	4610      	mov	r0, r2
 8014ddc:	e7fb      	b.n	8014dd6 <__ascii_mbtowc+0x16>
 8014dde:	f06f 0001 	mvn.w	r0, #1
 8014de2:	e7f8      	b.n	8014dd6 <__ascii_mbtowc+0x16>

08014de4 <__malloc_lock>:
 8014de4:	4770      	bx	lr

08014de6 <__malloc_unlock>:
 8014de6:	4770      	bx	lr

08014de8 <_read_r>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4c07      	ldr	r4, [pc, #28]	; (8014e08 <_read_r+0x20>)
 8014dec:	4605      	mov	r5, r0
 8014dee:	4608      	mov	r0, r1
 8014df0:	4611      	mov	r1, r2
 8014df2:	2200      	movs	r2, #0
 8014df4:	6022      	str	r2, [r4, #0]
 8014df6:	461a      	mov	r2, r3
 8014df8:	f7f7 ff72 	bl	800cce0 <_read>
 8014dfc:	1c43      	adds	r3, r0, #1
 8014dfe:	d102      	bne.n	8014e06 <_read_r+0x1e>
 8014e00:	6823      	ldr	r3, [r4, #0]
 8014e02:	b103      	cbz	r3, 8014e06 <_read_r+0x1e>
 8014e04:	602b      	str	r3, [r5, #0]
 8014e06:	bd38      	pop	{r3, r4, r5, pc}
 8014e08:	20000958 	.word	0x20000958

08014e0c <__ascii_wctomb>:
 8014e0c:	b149      	cbz	r1, 8014e22 <__ascii_wctomb+0x16>
 8014e0e:	2aff      	cmp	r2, #255	; 0xff
 8014e10:	bf85      	ittet	hi
 8014e12:	238a      	movhi	r3, #138	; 0x8a
 8014e14:	6003      	strhi	r3, [r0, #0]
 8014e16:	700a      	strbls	r2, [r1, #0]
 8014e18:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e1c:	bf98      	it	ls
 8014e1e:	2001      	movls	r0, #1
 8014e20:	4770      	bx	lr
 8014e22:	4608      	mov	r0, r1
 8014e24:	4770      	bx	lr
	...

08014e28 <_init>:
 8014e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2a:	bf00      	nop
 8014e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e2e:	bc08      	pop	{r3}
 8014e30:	469e      	mov	lr, r3
 8014e32:	4770      	bx	lr

08014e34 <_fini>:
 8014e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e36:	bf00      	nop
 8014e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e3a:	bc08      	pop	{r3}
 8014e3c:	469e      	mov	lr, r3
 8014e3e:	4770      	bx	lr
