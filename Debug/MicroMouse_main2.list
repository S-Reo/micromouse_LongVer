
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000a250  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000310  08012250  08012250  00022250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08012560  08012560  000301dc  2**0
                  CONTENTS
  6 .ARM          00000008  08012560  08012560  00022560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08012568  08012568  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08012568  08012568  00022568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801256c  0801256c  0002256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001dc  20000000  08012570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005d8  200001dc  0801274c  000301dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007b4  0801274c  000307b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001add7  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003d3b  00000000  00000000  0004afe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001420  00000000  00000000  0004ed20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001220  00000000  00000000  00050140  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023794  00000000  00000000  00051360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001304a  00000000  00000000  00074af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c853d  00000000  00000000  00087b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015007b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005ee0  00000000  00000000  001500f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001dc 	.word	0x200001dc
 800801c:	00000000 	.word	0x00000000
 8008020:	08012238 	.word	0x08012238

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e0 	.word	0x200001e0
 800803c:	08012238 	.word	0x08012238

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Accel>:
////	距離folを速度v_turnで進む;
//}

//
void Accel(float add_distance, float explore_speed)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - target_velocity[BODY];
 8008dcc:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <Accel+0x98>)
 8008dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dd2:	ed97 7a00 	vldr	s14, [r7]
 8008dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dda:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a318      	add	r3, pc, #96	; (adr r3, 8008e48 <Accel+0x90>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4625      	mov	r5, r4
 8008df4:	461c      	mov	r4, r3
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff fade 	bl	80083b8 <__aeabi_f2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7ff fb30 	bl	8008468 <__aeabi_dmul>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4625      	mov	r5, r4
 8008e0e:	461c      	mov	r4, r3
 8008e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e18:	ee17 0a90 	vmov	r0, s15
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7ff fc48 	bl	80086bc <__aeabi_ddiv>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4618      	mov	r0, r3
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7ff fdf0 	bl	8008a18 <__aeabi_d2f>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <Accel+0x9c>)
 8008e3c:	601a      	str	r2, [r3, #0]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bdb0      	pop	{r4, r5, r7, pc}
 8008e46:	bf00      	nop
 8008e48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e4c:	3f50624d 	.word	0x3f50624d
 8008e50:	20000270 	.word	0x20000270
 8008e54:	2000027c 	.word	0x2000027c

08008e58 <GoStraight>:

//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void GoStraight(int accel, float explore_speed)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	ed87 0a00 	vstr	s0, [r7]

	//エンコーダの移動量チェックって、もっと細かい間隔でやったほうがいいのでは。

		//target_velocity[BODY] = explore_speed;
	//加速なら
	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d107      	bne.n	8008e7a <GoStraight+0x22>
		explore_speed += 0;
 8008e6a:	edd7 7a00 	vldr	s15, [r7]
 8008e6e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008ec8 <GoStraight+0x70>
 8008e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e76:	edc7 7a00 	vstr	s15, [r7]

	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8008e7a:	edd7 0a00 	vldr	s1, [r7]
 8008e7e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008ecc <GoStraight+0x74>
 8008e82:	f7ff ff99 	bl	8008db8 <Accel>

	int target_pulse = (int)(2*90/MM_PER_PULSE);
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <GoStraight+0x78>)
 8008e88:	60fb      	str	r3, [r7, #12]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <GoStraight+0x7c>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	60bb      	str	r3, [r7, #8]

	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8008e94:	e00f      	b.n	8008eb6 <GoStraight+0x5e>
	{
		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if(accel == TRUE && ( ( keep_pulse ) / 2 ) <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d10c      	bne.n	8008eb6 <GoStraight+0x5e>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	0fda      	lsrs	r2, r3, #31
 8008ea0:	4413      	add	r3, r2
 8008ea2:	105b      	asrs	r3, r3, #1
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <GoStraight+0x7c>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	dc03      	bgt.n	8008eb6 <GoStraight+0x5e>
		{
			acceleration = 0;
 8008eae:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <GoStraight+0x80>)
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <GoStraight+0x7c>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	daea      	bge.n	8008e96 <GoStraight+0x3e>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	42340000 	.word	0x42340000
 8008ed0:	0002c806 	.word	0x0002c806
 8008ed4:	2000025c 	.word	0x2000025c
 8008ed8:	2000027c 	.word	0x2000027c

08008edc <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定

	int pulse_displacement = *timer_counter;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
	pulse_displacement = -1* (pulse_displacement - initial_pulse);
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	60fb      	str	r3, [r7, #12]

	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ffe2 	bl	8008edc <InitPulse>

	return pulse_displacement;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8008f34:	4a2c      	ldr	r2, [pc, #176]	; (8008fe8 <GetWallDataAverage+0xc4>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfb8      	it	lt
 8008f44:	425b      	neglt	r3, r3
 8008f46:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8008f48:	4927      	ldr	r1, [pc, #156]	; (8008fe8 <GetWallDataAverage+0xc4>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8008f52:	4a26      	ldr	r2, [pc, #152]	; (8008fec <GetWallDataAverage+0xc8>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	441a      	add	r2, r3
 8008f5e:	4923      	ldr	r1, [pc, #140]	; (8008fec <GetWallDataAverage+0xc8>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8008f66:	4a22      	ldr	r2, [pc, #136]	; (8008ff0 <GetWallDataAverage+0xcc>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	491f      	ldr	r1, [pc, #124]	; (8008ff0 <GetWallDataAverage+0xcc>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8008f78:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <GetWallDataAverage+0xcc>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d121      	bne.n	8008fca <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8008f86:	4a19      	ldr	r2, [pc, #100]	; (8008fec <GetWallDataAverage+0xc8>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008f96:	4a16      	ldr	r2, [pc, #88]	; (8008ff0 <GetWallDataAverage+0xcc>)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008faa:	4a12      	ldr	r2, [pc, #72]	; (8008ff4 <GetWallDataAverage+0xd0>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 8008fb6:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <GetWallDataAverage+0xc8>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2100      	movs	r1, #0
 8008fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8008fc0:	4a0b      	ldr	r2, [pc, #44]	; (8008ff0 <GetWallDataAverage+0xcc>)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 8008fca:	4a0a      	ldr	r2, [pc, #40]	; (8008ff4 <GetWallDataAverage+0xd0>)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	ee07 3a90 	vmov	s15, r3
}
 8008fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	200001f8 	.word	0x200001f8
 8008fec:	20000208 	.word	0x20000208
 8008ff0:	20000218 	.word	0x20000218
 8008ff4:	20000228 	.word	0x20000228

08008ff8 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	ed87 0a02 	vstr	s0, [r7, #8]
 8009004:	edc7 0a01 	vstr	s1, [r7, #4]
 8009008:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800900c:	f04f 0300 	mov.w	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800901c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009024:	edd7 7a01 	vldr	s15, [r7, #4]
 8009028:	ee67 6a27 	vmul.f32	s13, s14, s15
 800902c:	ed97 7a00 	vldr	s14, [r7]
 8009030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009034:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	ee07 3a90 	vmov	s15, r3
}
 800903e:	eeb0 0a67 	vmov.f32	s0, s15
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8009056:	2301      	movs	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800905a:	2300      	movs	r3, #0
 800905c:	60bb      	str	r3, [r7, #8]
 800905e:	e007      	b.n	8009070 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	fb02 f303 	mul.w	r3, r2, r3
 8009068:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3301      	adds	r3, #1
 800906e:	60bb      	str	r3, [r7, #8]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	dbf3      	blt.n	8009060 <IntegerPower+0x14>
	}
	return pattern_num;
 8009078:	68fb      	ldr	r3, [r7, #12]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8009086:	b480      	push	{r7}
 8009088:	b08b      	sub	sp, #44	; 0x2c
 800908a:	af00      	add	r7, sp, #0
 800908c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009090:	edc7 0a02 	vstr	s1, [r7, #8]
 8009094:	ed87 1a01 	vstr	s2, [r7, #4]
 8009098:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800909a:	edd7 6a03 	vldr	s13, [r7, #12]
 800909e:	ed97 7a01 	vldr	s14, [r7, #4]
 80090a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a6:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 80090aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80090ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80090b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b6:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 80090ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090be:	edd7 7a06 	vldr	s15, [r7, #24]
 80090c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d4:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80090dc:	2300      	movs	r3, #0
 80090de:	623b      	str	r3, [r7, #32]
 80090e0:	e018      	b.n	8009114 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80090f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80090f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8009100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	db01      	blt.n	800910e <GetBatteryLevel+0x88>
		{
			pattern = i;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	3301      	adds	r3, #1
 8009112:	623b      	str	r3, [r7, #32]
 8009114:	6a3a      	ldr	r2, [r7, #32]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	dbe2      	blt.n	80090e2 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800911e:	4618      	mov	r0, r3
 8009120:	372c      	adds	r7, #44	; 0x2c
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <TimeMonitor>:
#include "Motor_Driver.h"

//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 800912a:	b480      	push	{r7}
 800912c:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 800912e:	bf00      	nop
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <UpdatePhisicalDataFromEnc>:

void UpdatePhisicalDataFromEnc()
{
 8009138:	b5b0      	push	{r4, r5, r7, lr}
 800913a:	af00      	add	r7, sp, #0
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800913c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009140:	4857      	ldr	r0, [pc, #348]	; (80092a0 <UpdatePhisicalDataFromEnc+0x168>)
 8009142:	f7ff fed9 	bl	8008ef8 <GetPulseDisplacement>
 8009146:	4602      	mov	r2, r0
 8009148:	4b56      	ldr	r3, [pc, #344]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 800914a:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800914c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009150:	4855      	ldr	r0, [pc, #340]	; (80092a8 <UpdatePhisicalDataFromEnc+0x170>)
 8009152:	f7ff fed1 	bl	8008ef8 <GetPulseDisplacement>
 8009156:	4602      	mov	r2, r0
 8009158:	4b52      	ldr	r3, [pc, #328]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 800915a:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 800915c:	4b51      	ldr	r3, [pc, #324]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	ee07 3a90 	vmov	s15, r3
 8009164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009168:	ee17 0a90 	vmov	r0, s15
 800916c:	f7ff f924 	bl	80083b8 <__aeabi_f2d>
 8009170:	a345      	add	r3, pc, #276	; (adr r3, 8009288 <UpdatePhisicalDataFromEnc+0x150>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7ff f977 	bl	8008468 <__aeabi_dmul>
 800917a:	4603      	mov	r3, r0
 800917c:	460c      	mov	r4, r1
 800917e:	4618      	mov	r0, r3
 8009180:	4621      	mov	r1, r4
 8009182:	a343      	add	r3, pc, #268	; (adr r3, 8009290 <UpdatePhisicalDataFromEnc+0x158>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7ff fa98 	bl	80086bc <__aeabi_ddiv>
 800918c:	4603      	mov	r3, r0
 800918e:	460c      	mov	r4, r1
 8009190:	4618      	mov	r0, r3
 8009192:	4621      	mov	r1, r4
 8009194:	f7ff fc40 	bl	8008a18 <__aeabi_d2f>
 8009198:	4602      	mov	r2, r0
 800919a:	4b44      	ldr	r3, [pc, #272]	; (80092ac <UpdatePhisicalDataFromEnc+0x174>)
 800919c:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 800919e:	4b41      	ldr	r3, [pc, #260]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091aa:	ee17 0a90 	vmov	r0, s15
 80091ae:	f7ff f903 	bl	80083b8 <__aeabi_f2d>
 80091b2:	a335      	add	r3, pc, #212	; (adr r3, 8009288 <UpdatePhisicalDataFromEnc+0x150>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7ff f956 	bl	8008468 <__aeabi_dmul>
 80091bc:	4603      	mov	r3, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	4618      	mov	r0, r3
 80091c2:	4621      	mov	r1, r4
 80091c4:	a332      	add	r3, pc, #200	; (adr r3, 8009290 <UpdatePhisicalDataFromEnc+0x158>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7ff fa77 	bl	80086bc <__aeabi_ddiv>
 80091ce:	4603      	mov	r3, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	4618      	mov	r0, r3
 80091d4:	4621      	mov	r1, r4
 80091d6:	f7ff fc1f 	bl	8008a18 <__aeabi_d2f>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b33      	ldr	r3, [pc, #204]	; (80092ac <UpdatePhisicalDataFromEnc+0x174>)
 80091de:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 80091e0:	4b33      	ldr	r3, [pc, #204]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b2f      	ldr	r3, [pc, #188]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4413      	add	r3, r2
 80091ea:	4a31      	ldr	r2, [pc, #196]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 80091ec:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 80091ee:	4b30      	ldr	r3, [pc, #192]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	4b2c      	ldr	r3, [pc, #176]	; (80092a4 <UpdatePhisicalDataFromEnc+0x16c>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	4413      	add	r3, r2
 80091f8:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 80091fa:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 80091fc:	4b2c      	ldr	r3, [pc, #176]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4413      	add	r3, r2
 8009206:	4a2a      	ldr	r2, [pc, #168]	; (80092b0 <UpdatePhisicalDataFromEnc+0x178>)
 8009208:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 800920a:	4b28      	ldr	r3, [pc, #160]	; (80092ac <UpdatePhisicalDataFromEnc+0x174>)
 800920c:	ed93 7a00 	vldr	s14, [r3]
 8009210:	4b26      	ldr	r3, [pc, #152]	; (80092ac <UpdatePhisicalDataFromEnc+0x174>)
 8009212:	edd3 7a01 	vldr	s15, [r3, #4]
 8009216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800921a:	ee17 0a90 	vmov	r0, s15
 800921e:	f7ff f8cb 	bl	80083b8 <__aeabi_f2d>
 8009222:	a31d      	add	r3, pc, #116	; (adr r3, 8009298 <UpdatePhisicalDataFromEnc+0x160>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7ff fa48 	bl	80086bc <__aeabi_ddiv>
 800922c:	4603      	mov	r3, r0
 800922e:	460c      	mov	r4, r1
 8009230:	4618      	mov	r0, r3
 8009232:	4621      	mov	r1, r4
 8009234:	f7ff fbf0 	bl	8008a18 <__aeabi_d2f>
 8009238:	4602      	mov	r2, r0
 800923a:	4b1e      	ldr	r3, [pc, #120]	; (80092b4 <UpdatePhisicalDataFromEnc+0x17c>)
 800923c:	601a      	str	r2, [r3, #0]

	//角度 rad/msを積算
	angle += angular_v * T1;
 800923e:	4b1e      	ldr	r3, [pc, #120]	; (80092b8 <UpdatePhisicalDataFromEnc+0x180>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff f8b8 	bl	80083b8 <__aeabi_f2d>
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <UpdatePhisicalDataFromEnc+0x17c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff f8b1 	bl	80083b8 <__aeabi_f2d>
 8009256:	a30e      	add	r3, pc, #56	; (adr r3, 8009290 <UpdatePhisicalDataFromEnc+0x158>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7ff f904 	bl	8008468 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4620      	mov	r0, r4
 8009266:	4629      	mov	r1, r5
 8009268:	f7fe ff48 	bl	80080fc <__adddf3>
 800926c:	4603      	mov	r3, r0
 800926e:	460c      	mov	r4, r1
 8009270:	4618      	mov	r0, r3
 8009272:	4621      	mov	r1, r4
 8009274:	f7ff fbd0 	bl	8008a18 <__aeabi_d2f>
 8009278:	4602      	mov	r2, r0
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <UpdatePhisicalDataFromEnc+0x180>)
 800927c:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 800927e:	bf00      	nop
 8009280:	bdb0      	pop	{r4, r5, r7, pc}
 8009282:	bf00      	nop
 8009284:	f3af 8000 	nop.w
 8009288:	317249d5 	.word	0x317249d5
 800928c:	3f502de0 	.word	0x3f502de0
 8009290:	d2f1a9fc 	.word	0xd2f1a9fc
 8009294:	3f50624d 	.word	0x3f50624d
 8009298:	33333333 	.word	0x33333333
 800929c:	40423333 	.word	0x40423333
 80092a0:	40000424 	.word	0x40000424
 80092a4:	20000248 	.word	0x20000248
 80092a8:	40000824 	.word	0x40000824
 80092ac:	20000250 	.word	0x20000250
 80092b0:	2000025c 	.word	0x2000025c
 80092b4:	20000268 	.word	0x20000268
 80092b8:	2000026c 	.word	0x2000026c
 80092bc:	00000000 	.word	0x00000000

080092c0 <ControlMotor>:
void ControlMotor()
{
 80092c0:	b5b0      	push	{r4, r5, r7, lr}
 80092c2:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 80092c4:	f7ff ff38 	bl	8009138 <UpdatePhisicalDataFromEnc>

	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	target_velocity[BODY] += acceleration;
 80092c8:	4b55      	ldr	r3, [pc, #340]	; (8009420 <ControlMotor+0x160>)
 80092ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80092ce:	4b55      	ldr	r3, [pc, #340]	; (8009424 <ControlMotor+0x164>)
 80092d0:	edd3 7a00 	vldr	s15, [r3]
 80092d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092d8:	4b51      	ldr	r3, [pc, #324]	; (8009420 <ControlMotor+0x160>)
 80092da:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 80092de:	4b52      	ldr	r3, [pc, #328]	; (8009428 <ControlMotor+0x168>)
 80092e0:	ed93 7a00 	vldr	s14, [r3]
 80092e4:	4b51      	ldr	r3, [pc, #324]	; (800942c <ControlMotor+0x16c>)
 80092e6:	edd3 7a00 	vldr	s15, [r3]
 80092ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ee:	4b4e      	ldr	r3, [pc, #312]	; (8009428 <ControlMotor+0x168>)
 80092f0:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 80092f4:	4b4a      	ldr	r3, [pc, #296]	; (8009420 <ControlMotor+0x160>)
 80092f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80092fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80092fe:	ee17 0a90 	vmov	r0, s15
 8009302:	f7ff f859 	bl	80083b8 <__aeabi_f2d>
 8009306:	4604      	mov	r4, r0
 8009308:	460d      	mov	r5, r1
 800930a:	4b47      	ldr	r3, [pc, #284]	; (8009428 <ControlMotor+0x168>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff f852 	bl	80083b8 <__aeabi_f2d>
 8009314:	a340      	add	r3, pc, #256	; (adr r3, 8009418 <ControlMotor+0x158>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7ff f8a5 	bl	8008468 <__aeabi_dmul>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7fe fee7 	bl	80080f8 <__aeabi_dsub>
 800932a:	4603      	mov	r3, r0
 800932c:	460c      	mov	r4, r1
 800932e:	4618      	mov	r0, r3
 8009330:	4621      	mov	r1, r4
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800933a:	f7ff f9bf 	bl	80086bc <__aeabi_ddiv>
 800933e:	4603      	mov	r3, r0
 8009340:	460c      	mov	r4, r1
 8009342:	4618      	mov	r0, r3
 8009344:	4621      	mov	r1, r4
 8009346:	f7ff fb67 	bl	8008a18 <__aeabi_d2f>
 800934a:	4602      	mov	r2, r0
 800934c:	4b34      	ldr	r3, [pc, #208]	; (8009420 <ControlMotor+0x160>)
 800934e:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 8009350:	4b35      	ldr	r3, [pc, #212]	; (8009428 <ControlMotor+0x168>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff f82f 	bl	80083b8 <__aeabi_f2d>
 800935a:	a32f      	add	r3, pc, #188	; (adr r3, 8009418 <ControlMotor+0x158>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7ff f882 	bl	8008468 <__aeabi_dmul>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4625      	mov	r5, r4
 800936a:	461c      	mov	r4, r3
 800936c:	4b2c      	ldr	r3, [pc, #176]	; (8009420 <ControlMotor+0x160>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff f821 	bl	80083b8 <__aeabi_f2d>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4620      	mov	r0, r4
 800937c:	4629      	mov	r1, r5
 800937e:	f7fe febd 	bl	80080fc <__adddf3>
 8009382:	4603      	mov	r3, r0
 8009384:	460c      	mov	r4, r1
 8009386:	4618      	mov	r0, r3
 8009388:	4621      	mov	r1, r4
 800938a:	f7ff fb45 	bl	8008a18 <__aeabi_d2f>
 800938e:	4602      	mov	r2, r0
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <ControlMotor+0x160>)
 8009392:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 8009394:	4b22      	ldr	r3, [pc, #136]	; (8009420 <ControlMotor+0x160>)
 8009396:	edd3 7a00 	vldr	s15, [r3]
 800939a:	4b25      	ldr	r3, [pc, #148]	; (8009430 <ControlMotor+0x170>)
 800939c:	ed93 7a00 	vldr	s14, [r3]
 80093a0:	eeb0 1a47 	vmov.f32	s2, s14
 80093a4:	eef0 0a67 	vmov.f32	s1, s15
 80093a8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8009434 <ControlMotor+0x174>
 80093ac:	2000      	movs	r0, #0
 80093ae:	f000 fab7 	bl	8009920 <PIDControl>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b20      	ldr	r3, [pc, #128]	; (8009438 <ControlMotor+0x178>)
 80093b6:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 80093b8:	4b19      	ldr	r3, [pc, #100]	; (8009420 <ControlMotor+0x160>)
 80093ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80093be:	4b1c      	ldr	r3, [pc, #112]	; (8009430 <ControlMotor+0x170>)
 80093c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80093c4:	eeb0 1a47 	vmov.f32	s2, s14
 80093c8:	eef0 0a67 	vmov.f32	s1, s15
 80093cc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009434 <ControlMotor+0x174>
 80093d0:	2001      	movs	r0, #1
 80093d2:	f000 faa5 	bl	8009920 <PIDControl>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b18      	ldr	r3, [pc, #96]	; (800943c <ControlMotor+0x17c>)
 80093da:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	//PIDControl( D_WALL, T1, photo[SL], photo[SR], &wall_right_out);

	wall_left_out = -wall_right_out;
 80093dc:	4b18      	ldr	r3, [pc, #96]	; (8009440 <ControlMotor+0x180>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	425b      	negs	r3, r3
 80093e2:	4a18      	ldr	r2, [pc, #96]	; (8009444 <ControlMotor+0x184>)
 80093e4:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 80093e6:	4b17      	ldr	r3, [pc, #92]	; (8009444 <ControlMotor+0x184>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <ControlMotor+0x178>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4413      	add	r3, r2
 80093f0:	4a15      	ldr	r2, [pc, #84]	; (8009448 <ControlMotor+0x188>)
 80093f2:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 80093f4:	4b12      	ldr	r3, [pc, #72]	; (8009440 <ControlMotor+0x180>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	4b10      	ldr	r3, [pc, #64]	; (800943c <ControlMotor+0x17c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4413      	add	r3, r2
 80093fe:	4a13      	ldr	r2, [pc, #76]	; (800944c <ControlMotor+0x18c>)
 8009400:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 8009402:	4b11      	ldr	r3, [pc, #68]	; (8009448 <ControlMotor+0x188>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b11      	ldr	r3, [pc, #68]	; (800944c <ControlMotor+0x18c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f001 ff67 	bl	800b2e0 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 8009412:	bf00      	nop
 8009414:	bdb0      	pop	{r4, r5, r7, pc}
 8009416:	bf00      	nop
 8009418:	33333333 	.word	0x33333333
 800941c:	40423333 	.word	0x40423333
 8009420:	20000270 	.word	0x20000270
 8009424:	2000027c 	.word	0x2000027c
 8009428:	20000280 	.word	0x20000280
 800942c:	20000284 	.word	0x20000284
 8009430:	20000250 	.word	0x20000250
 8009434:	3a83126f 	.word	0x3a83126f
 8009438:	20000288 	.word	0x20000288
 800943c:	2000028c 	.word	0x2000028c
 8009440:	20000290 	.word	0x20000290
 8009444:	20000294 	.word	0x20000294
 8009448:	20000298 	.word	0x20000298
 800944c:	2000029c 	.word	0x2000029c

08009450 <UpdatePhotoData>:

void UpdatePhotoData()
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);
 8009454:	4b18      	ldr	r3, [pc, #96]	; (80094b8 <UpdatePhotoData+0x68>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2200      	movs	r2, #0
 800945a:	4619      	mov	r1, r3
 800945c:	200a      	movs	r0, #10
 800945e:	f7ff fd61 	bl	8008f24 <GetWallDataAverage>
 8009462:	eef0 7a40 	vmov.f32	s15, s0
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <UpdatePhotoData+0x6c>)
 8009468:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);
 800946c:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <UpdatePhotoData+0x68>)
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	4619      	mov	r1, r3
 8009474:	200a      	movs	r0, #10
 8009476:	f7ff fd55 	bl	8008f24 <GetWallDataAverage>
 800947a:	eef0 7a40 	vmov.f32	s15, s0
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <UpdatePhotoData+0x6c>)
 8009480:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);
 8009484:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <UpdatePhotoData+0x70>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2202      	movs	r2, #2
 800948a:	4619      	mov	r1, r3
 800948c:	200a      	movs	r0, #10
 800948e:	f7ff fd49 	bl	8008f24 <GetWallDataAverage>
 8009492:	eef0 7a40 	vmov.f32	s15, s0
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <UpdatePhotoData+0x6c>)
 8009498:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);
 800949c:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <UpdatePhotoData+0x70>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2203      	movs	r2, #3
 80094a2:	4619      	mov	r1, r3
 80094a4:	200a      	movs	r0, #10
 80094a6:	f7ff fd3d 	bl	8008f24 <GetWallDataAverage>
 80094aa:	eef0 7a40 	vmov.f32	s15, s0
 80094ae:	4b03      	ldr	r3, [pc, #12]	; (80094bc <UpdatePhotoData+0x6c>)
 80094b0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80094b4:	bf00      	nop
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000404 	.word	0x20000404
 80094bc:	20000238 	.word	0x20000238
 80094c0:	20000410 	.word	0x20000410

080094c4 <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a08      	ldr	r2, [pc, #32]	; (80094f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d103      	bne.n	80094dc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 80094d4:	f7ff fe29 	bl	800912a <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 80094d8:	f7ff fef2 	bl	80092c0 <ControlMotor>
	}

	if( htim == &htim8)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a05      	ldr	r2, [pc, #20]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d101      	bne.n	80094e8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		//壁センサデータの更新だけ
		UpdatePhotoData();
 80094e4:	f7ff ffb4 	bl	8009450 <UpdatePhotoData>

	}
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	200006a8 	.word	0x200006a8
 80094f4:	20000420 	.word	0x20000420

080094f8 <WritingFree>:
#include "UI.h"
#include "Action.h"


void WritingFree()
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 80094fc:	f001 fed6 	bl	800b2ac <Motor_PWM_Start>
	EncoderStart();
 8009500:	f001 fdda 	bl	800b0b8 <EncoderStart>
	EmitterON();
 8009504:	f001 fdf8 	bl	800b0f8 <EmitterON>
	ADCStart();
 8009508:	f001 fd9e 	bl	800b048 <ADCStart>

	PIDReset(L_VELO);
 800950c:	2000      	movs	r0, #0
 800950e:	f000 f8d5 	bl	80096bc <PIDReset>
	PIDReset(R_VELO);
 8009512:	2001      	movs	r0, #1
 8009514:	f000 f8d2 	bl	80096bc <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 8009518:	2101      	movs	r1, #1
 800951a:	2000      	movs	r0, #0
 800951c:	f000 f8b8 	bl	8009690 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 8009520:	2101      	movs	r1, #1
 8009522:	2001      	movs	r0, #1
 8009524:	f000 f8b4 	bl	8009690 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 8009528:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80095a4 <WritingFree+0xac>
 800952c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80095a8 <WritingFree+0xb0>
 8009530:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80095ac <WritingFree+0xb4>
 8009534:	2000      	movs	r0, #0
 8009536:	f000 f87f 	bl	8009638 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800953a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80095a4 <WritingFree+0xac>
 800953e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80095a8 <WritingFree+0xb0>
 8009542:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80095ac <WritingFree+0xb4>
 8009546:	2001      	movs	r0, #1
 8009548:	f000 f876 	bl	8009638 <PIDSetGain>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800954c:	4818      	ldr	r0, [pc, #96]	; (80095b0 <WritingFree+0xb8>)
 800954e:	f004 faa6 	bl	800da9e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8009552:	4818      	ldr	r0, [pc, #96]	; (80095b4 <WritingFree+0xbc>)
 8009554:	f004 faa3 	bl	800da9e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <WritingFree+0xc0>)
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 8009560:	4b16      	ldr	r3, [pc, #88]	; (80095bc <WritingFree+0xc4>)
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <WritingFree+0xc8>)
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 8009570:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <WritingFree+0xcc>)
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <WritingFree+0xd0>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <WritingFree+0xd0>)
 8009580:	2200      	movs	r2, #0
 8009582:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 8009584:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <WritingFree+0xd0>)
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]
	PIDReset(L_VELO);
 800958a:	2000      	movs	r0, #0
 800958c:	f000 f896 	bl	80096bc <PIDReset>
	PIDReset(R_VELO);
 8009590:	2001      	movs	r0, #1
 8009592:	f000 f893 	bl	80096bc <PIDReset>

	GoStraight( TRUE, 90);
 8009596:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80095cc <WritingFree+0xd4>
 800959a:	2001      	movs	r0, #1
 800959c:	f7ff fc5c 	bl	8008e58 <GoStraight>
	while(1)
 80095a0:	e7fe      	b.n	80095a0 <WritingFree+0xa8>
 80095a2:	bf00      	nop
 80095a4:	3bc45a38 	.word	0x3bc45a38
 80095a8:	420617c2 	.word	0x420617c2
 80095ac:	3f98d845 	.word	0x3f98d845
 80095b0:	200006a8 	.word	0x200006a8
 80095b4:	20000420 	.word	0x20000420
 80095b8:	20000270 	.word	0x20000270
 80095bc:	20000280 	.word	0x20000280
 80095c0:	2000027c 	.word	0x2000027c
 80095c4:	20000284 	.word	0x20000284
 80095c8:	2000025c 	.word	0x2000025c
 80095cc:	42b40000 	.word	0x42b40000

080095d0 <Explore>:


}

void Explore()
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 80095d6:	f001 fe69 	bl	800b2ac <Motor_PWM_Start>
	EncoderStart();
 80095da:	f001 fd6d 	bl	800b0b8 <EncoderStart>
	EmitterON();
 80095de:	f001 fd8b 	bl	800b0f8 <EmitterON>
	ADCStart();
 80095e2:	f001 fd31 	bl	800b048 <ADCStart>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 80095e6:	4811      	ldr	r0, [pc, #68]	; (800962c <Explore+0x5c>)
 80095e8:	f004 fa59 	bl	800da9e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80095ec:	4810      	ldr	r0, [pc, #64]	; (8009630 <Explore+0x60>)
 80095ee:	f004 fa56 	bl	800da9e <HAL_TIM_Base_Start_IT>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 80095f2:	2101      	movs	r1, #1
 80095f4:	2000      	movs	r0, #0
 80095f6:	f000 f84b 	bl	8009690 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 80095fa:	2101      	movs	r1, #1
 80095fc:	2001      	movs	r0, #1
 80095fe:	f000 f847 	bl	8009690 <PIDChangeFlag>
	//ここからはソフト的な準備


	//迷路とステータスの準備
	//方角と座標の初期化。
	direction my_direction = north;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0,y=0;
 8009606:	2300      	movs	r3, #0
 8009608:	73bb      	strb	r3, [r7, #14]
 800960a:	2300      	movs	r3, #0
 800960c:	737b      	strb	r3, [r7, #13]
	//時間用の処理の初期化。
	int timer = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60bb      	str	r3, [r7, #8]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 8009612:	4b08      	ldr	r3, [pc, #32]	; (8009634 <Explore+0x64>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <Explore+0x64>)
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <Explore+0x64>)
 8009620:	2200      	movs	r2, #0
 8009622:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 8009624:	2353      	movs	r3, #83	; 0x53
 8009626:	71fb      	strb	r3, [r7, #7]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	while(1)
 8009628:	e7fe      	b.n	8009628 <Explore+0x58>
 800962a:	bf00      	nop
 800962c:	200006a8 	.word	0x200006a8
 8009630:	20000420 	.word	0x20000420
 8009634:	2000025c 	.word	0x2000025c

08009638 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	ed87 0a02 	vstr	s0, [r7, #8]
 8009644:	edc7 0a01 	vstr	s1, [r7, #4]
 8009648:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 800964c:	4a0f      	ldr	r2, [pc, #60]	; (800968c <PIDSetGain+0x54>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	212c      	movs	r1, #44	; 0x2c
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	4413      	add	r3, r2
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 800965c:	4a0b      	ldr	r2, [pc, #44]	; (800968c <PIDSetGain+0x54>)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	212c      	movs	r1, #44	; 0x2c
 8009662:	fb01 f303 	mul.w	r3, r1, r3
 8009666:	4413      	add	r3, r2
 8009668:	3304      	adds	r3, #4
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 800966e:	4a07      	ldr	r2, [pc, #28]	; (800968c <PIDSetGain+0x54>)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	212c      	movs	r1, #44	; 0x2c
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	3308      	adds	r3, #8
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	200002a0 	.word	0x200002a0

08009690 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 800969a:	4a07      	ldr	r2, [pc, #28]	; (80096b8 <PIDChangeFlag+0x28>)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	212c      	movs	r1, #44	; 0x2c
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	4413      	add	r3, r2
 80096a6:	3328      	adds	r3, #40	; 0x28
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	200002a0 	.word	0x200002a0

080096bc <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 80096c4:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <PIDReset+0x78>)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	212c      	movs	r1, #44	; 0x2c
 80096ca:	fb01 f303 	mul.w	r3, r1, r3
 80096ce:	4413      	add	r3, r2
 80096d0:	330c      	adds	r3, #12
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 80096d8:	4a16      	ldr	r2, [pc, #88]	; (8009734 <PIDReset+0x78>)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	212c      	movs	r1, #44	; 0x2c
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	3310      	adds	r3, #16
 80096e6:	f04f 0200 	mov.w	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 80096ec:	4a11      	ldr	r2, [pc, #68]	; (8009734 <PIDReset+0x78>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	212c      	movs	r1, #44	; 0x2c
 80096f2:	fb01 f303 	mul.w	r3, r1, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	3314      	adds	r3, #20
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 8009700:	4a0c      	ldr	r2, [pc, #48]	; (8009734 <PIDReset+0x78>)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	212c      	movs	r1, #44	; 0x2c
 8009706:	fb01 f303 	mul.w	r3, r1, r3
 800970a:	4413      	add	r3, r2
 800970c:	3318      	adds	r3, #24
 800970e:	f04f 0200 	mov.w	r2, #0
 8009712:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 8009714:	4a07      	ldr	r2, [pc, #28]	; (8009734 <PIDReset+0x78>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	212c      	movs	r1, #44	; 0x2c
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	4413      	add	r3, r2
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200002a0 	.word	0x200002a0

08009738 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 8009744:	4a64      	ldr	r2, [pc, #400]	; (80098d8 <PIDCalculate+0x1a0>)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	212c      	movs	r1, #44	; 0x2c
 800974a:	fb01 f303 	mul.w	r3, r1, r3
 800974e:	4413      	add	r3, r2
 8009750:	3320      	adds	r3, #32
 8009752:	ed93 7a00 	vldr	s14, [r3]
 8009756:	4a60      	ldr	r2, [pc, #384]	; (80098d8 <PIDCalculate+0x1a0>)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	212c      	movs	r1, #44	; 0x2c
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	331c      	adds	r3, #28
 8009764:	edd3 7a00 	vldr	s15, [r3]
 8009768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800976c:	4a5a      	ldr	r2, [pc, #360]	; (80098d8 <PIDCalculate+0x1a0>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	212c      	movs	r1, #44	; 0x2c
 8009772:	fb01 f303 	mul.w	r3, r1, r3
 8009776:	4413      	add	r3, r2
 8009778:	330c      	adds	r3, #12
 800977a:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 800977e:	4a56      	ldr	r2, [pc, #344]	; (80098d8 <PIDCalculate+0x1a0>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	212c      	movs	r1, #44	; 0x2c
 8009784:	fb01 f303 	mul.w	r3, r1, r3
 8009788:	4413      	add	r3, r2
 800978a:	3310      	adds	r3, #16
 800978c:	ed93 7a00 	vldr	s14, [r3]
 8009790:	4a51      	ldr	r2, [pc, #324]	; (80098d8 <PIDCalculate+0x1a0>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	212c      	movs	r1, #44	; 0x2c
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	330c      	adds	r3, #12
 800979e:	edd3 6a00 	vldr	s13, [r3]
 80097a2:	edd7 7a00 	vldr	s15, [r7]
 80097a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ae:	4a4a      	ldr	r2, [pc, #296]	; (80098d8 <PIDCalculate+0x1a0>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	212c      	movs	r1, #44	; 0x2c
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	3310      	adds	r3, #16
 80097bc:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 80097c0:	4a45      	ldr	r2, [pc, #276]	; (80098d8 <PIDCalculate+0x1a0>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	212c      	movs	r1, #44	; 0x2c
 80097c6:	fb01 f303 	mul.w	r3, r1, r3
 80097ca:	4413      	add	r3, r2
 80097cc:	330c      	adds	r3, #12
 80097ce:	ed93 7a00 	vldr	s14, [r3]
 80097d2:	4a41      	ldr	r2, [pc, #260]	; (80098d8 <PIDCalculate+0x1a0>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	212c      	movs	r1, #44	; 0x2c
 80097d8:	fb01 f303 	mul.w	r3, r1, r3
 80097dc:	4413      	add	r3, r2
 80097de:	3318      	adds	r3, #24
 80097e0:	edd3 7a00 	vldr	s15, [r3]
 80097e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80097e8:	ed97 7a00 	vldr	s14, [r7]
 80097ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f0:	4a39      	ldr	r2, [pc, #228]	; (80098d8 <PIDCalculate+0x1a0>)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	212c      	movs	r1, #44	; 0x2c
 80097f6:	fb01 f303 	mul.w	r3, r1, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	3314      	adds	r3, #20
 80097fe:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 8009802:	4a35      	ldr	r2, [pc, #212]	; (80098d8 <PIDCalculate+0x1a0>)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	212c      	movs	r1, #44	; 0x2c
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	4413      	add	r3, r2
 800980e:	330c      	adds	r3, #12
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4931      	ldr	r1, [pc, #196]	; (80098d8 <PIDCalculate+0x1a0>)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	202c      	movs	r0, #44	; 0x2c
 8009818:	fb00 f303 	mul.w	r3, r0, r3
 800981c:	440b      	add	r3, r1
 800981e:	3318      	adds	r3, #24
 8009820:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 8009822:	4a2d      	ldr	r2, [pc, #180]	; (80098d8 <PIDCalculate+0x1a0>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	212c      	movs	r1, #44	; 0x2c
 8009828:	fb01 f303 	mul.w	r3, r1, r3
 800982c:	4413      	add	r3, r2
 800982e:	ed93 7a00 	vldr	s14, [r3]
 8009832:	4a29      	ldr	r2, [pc, #164]	; (80098d8 <PIDCalculate+0x1a0>)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	212c      	movs	r1, #44	; 0x2c
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	4413      	add	r3, r2
 800983e:	330c      	adds	r3, #12
 8009840:	edd3 7a00 	vldr	s15, [r3]
 8009844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009848:	4a23      	ldr	r2, [pc, #140]	; (80098d8 <PIDCalculate+0x1a0>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	212c      	movs	r1, #44	; 0x2c
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	3304      	adds	r3, #4
 8009856:	edd3 6a00 	vldr	s13, [r3]
 800985a:	4a1f      	ldr	r2, [pc, #124]	; (80098d8 <PIDCalculate+0x1a0>)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	212c      	movs	r1, #44	; 0x2c
 8009860:	fb01 f303 	mul.w	r3, r1, r3
 8009864:	4413      	add	r3, r2
 8009866:	3310      	adds	r3, #16
 8009868:	edd3 7a00 	vldr	s15, [r3]
 800986c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009874:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <PIDCalculate+0x1a0>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	212c      	movs	r1, #44	; 0x2c
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	4413      	add	r3, r2
 8009880:	3308      	adds	r3, #8
 8009882:	edd3 6a00 	vldr	s13, [r3]
 8009886:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <PIDCalculate+0x1a0>)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	212c      	movs	r1, #44	; 0x2c
 800988c:	fb01 f303 	mul.w	r3, r1, r3
 8009890:	4413      	add	r3, r2
 8009892:	3314      	adds	r3, #20
 8009894:	edd3 7a00 	vldr	s15, [r3]
 8009898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800989c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a0:	ee17 0a90 	vmov	r0, s15
 80098a4:	f7fe fd88 	bl	80083b8 <__aeabi_f2d>
 80098a8:	4603      	mov	r3, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	ec44 3b10 	vmov	d0, r3, r4
 80098b0:	f006 f8b8 	bl	800fa24 <round>
 80098b4:	ec54 3b10 	vmov	r3, r4, d0
 80098b8:	4618      	mov	r0, r3
 80098ba:	4621      	mov	r1, r4
 80098bc:	f7ff f884 	bl	80089c8 <__aeabi_d2iz>
 80098c0:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <PIDCalculate+0x1a0>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	212c      	movs	r1, #44	; 0x2c
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	4413      	add	r3, r2
 80098cc:	3324      	adds	r3, #36	; 0x24
 80098ce:	6018      	str	r0, [r3, #0]
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd90      	pop	{r4, r7, pc}
 80098d8:	200002a0 	.word	0x200002a0

080098dc <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80098e8:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 80098ec:	4a0b      	ldr	r2, [pc, #44]	; (800991c <PIDInput+0x40>)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	212c      	movs	r1, #44	; 0x2c
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	3320      	adds	r3, #32
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 80098fe:	4a07      	ldr	r2, [pc, #28]	; (800991c <PIDInput+0x40>)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	212c      	movs	r1, #44	; 0x2c
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	4413      	add	r3, r2
 800990a:	331c      	adds	r3, #28
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	601a      	str	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	200002a0 	.word	0x200002a0

08009920 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	ed87 0a02 	vstr	s0, [r7, #8]
 800992c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009930:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 8009934:	edd7 0a00 	vldr	s1, [r7]
 8009938:	ed97 0a01 	vldr	s0, [r7, #4]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff ffcd 	bl	80098dc <PIDInput>
	PIDCalculate( n, T );
 8009942:	ed97 0a02 	vldr	s0, [r7, #8]
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff fef6 	bl	8009738 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 800994c:	4a0c      	ldr	r2, [pc, #48]	; (8009980 <PIDControl+0x60>)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	212c      	movs	r1, #44	; 0x2c
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	4413      	add	r3, r2
 8009958:	3328      	adds	r3, #40	; 0x28
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <PIDControl+0x46>
	{
		PIDReset(n);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff feab 	bl	80096bc <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 8009966:	4a06      	ldr	r2, [pc, #24]	; (8009980 <PIDControl+0x60>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	212c      	movs	r1, #44	; 0x2c
 800996c:	fb01 f303 	mul.w	r3, r1, r3
 8009970:	4413      	add	r3, r2
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	681b      	ldr	r3, [r3, #0]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	200002a0 	.word	0x200002a0

08009984 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	e00e      	b.n	80099b0 <Signal+0x2c>
	{
		ChangeLED(mode);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fbcc 	bl	800b130 <ChangeLED>
		HAL_Delay(100);
 8009998:	2064      	movs	r0, #100	; 0x64
 800999a:	f001 fd9f 	bl	800b4dc <HAL_Delay>
		ChangeLED(0);
 800999e:	2000      	movs	r0, #0
 80099a0:	f001 fbc6 	bl	800b130 <ChangeLED>
		HAL_Delay(100);
 80099a4:	2064      	movs	r0, #100	; 0x64
 80099a6:	f001 fd99 	bl	800b4dc <HAL_Delay>
	for(int i=0; i < 5; i++)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	dded      	ble.n	8009992 <Signal+0xe>
	}
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 80099c8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8009a14 <BatteryCheck+0x54>
 80099cc:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009a18 <BatteryCheck+0x58>
 80099d0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff fb0f 	bl	8008ff8 <ADCToBatteryVoltage>
 80099da:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 80099de:	2103      	movs	r1, #3
 80099e0:	2002      	movs	r0, #2
 80099e2:	f7ff fb33 	bl	800904c <IntegerPower>
 80099e6:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 80099e8:	6938      	ldr	r0, [r7, #16]
 80099ea:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8009a1c <BatteryCheck+0x5c>
 80099ee:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009a20 <BatteryCheck+0x60>
 80099f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80099f6:	f7ff fb46 	bl	8009086 <GetBatteryLevel>
 80099fa:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 80099fc:	68f9      	ldr	r1, [r7, #12]
 80099fe:	4809      	ldr	r0, [pc, #36]	; (8009a24 <BatteryCheck+0x64>)
 8009a00:	f006 fcf4 	bl	80103ec <iprintf>
	Signal( battery_level );
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff ffbd 	bl	8009984 <Signal>
}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	45800000 	.word	0x45800000
 8009a18:	40533333 	.word	0x40533333
 8009a1c:	41066666 	.word	0x41066666
 8009a20:	40e66666 	.word	0x40e66666
 8009a24:	08012250 	.word	0x08012250

08009a28 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	603a      	str	r2, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
 8009a34:	460b      	mov	r3, r1
 8009a36:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 8009a38:	f001 fb5e 	bl	800b0f8 <EmitterON>
	ADCStart();
 8009a3c:	f001 fb04 	bl	800b048 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 8009a40:	4840      	ldr	r0, [pc, #256]	; (8009b44 <ModeSelect+0x11c>)
 8009a42:	f004 f82c 	bl	800da9e <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 8009a46:	f001 fb37 	bl	800b0b8 <EncoderStart>

	//while中で選択
	*pMode=min;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	79fa      	ldrb	r2, [r7, #7]
 8009a4e:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009a50:	f247 512f 	movw	r1, #29999	; 0x752f
 8009a54:	483c      	ldr	r0, [pc, #240]	; (8009b48 <ModeSelect+0x120>)
 8009a56:	f7ff fa41 	bl	8008edc <InitPulse>

	int ENC3_LEFT;
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009a5a:	e05c      	b.n	8009b16 <ModeSelect+0xee>
	{
		printf("photo[SR] : %f\r\n", photo[SR]);
 8009a5c:	4b3b      	ldr	r3, [pc, #236]	; (8009b4c <ModeSelect+0x124>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fca9 	bl	80083b8 <__aeabi_f2d>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4623      	mov	r3, r4
 8009a6e:	4838      	ldr	r0, [pc, #224]	; (8009b50 <ModeSelect+0x128>)
 8009a70:	f006 fcbc 	bl	80103ec <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 8009a74:	4b37      	ldr	r3, [pc, #220]	; (8009b54 <ModeSelect+0x12c>)
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f24b 522e 	movw	r2, #46382	; 0xb52e
 8009a80:	4293      	cmp	r3, r2
 8009a82:	dd21      	ble.n	8009ac8 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f993 3000 	ldrsb.w	r3, [r3]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	b25a      	sxtb	r2, r3
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	f993 3000 	ldrsb.w	r3, [r3]
 8009a9c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	da02      	bge.n	8009aaa <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	79fa      	ldrb	r2, [r7, #7]
 8009aa8:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	f993 3000 	ldrsb.w	r3, [r3]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 fb3d 	bl	800b130 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 8009ab6:	f247 512f 	movw	r1, #29999	; 0x752f
 8009aba:	4823      	ldr	r0, [pc, #140]	; (8009b48 <ModeSelect+0x120>)
 8009abc:	f7ff fa0e 	bl	8008edc <InitPulse>
		  	  HAL_Delay(500);
 8009ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ac4:	f001 fd0a 	bl	800b4dc <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f243 522f 	movw	r2, #13615	; 0x352f
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	dc21      	bgt.n	8009b16 <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	b25a      	sxtb	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8009aea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	dd02      	ble.n	8009af8 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	79ba      	ldrb	r2, [r7, #6]
 8009af6:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f993 3000 	ldrsb.w	r3, [r3]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 fb16 	bl	800b130 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 8009b04:	f247 512f 	movw	r1, #29999	; 0x752f
 8009b08:	480f      	ldr	r0, [pc, #60]	; (8009b48 <ModeSelect+0x120>)
 8009b0a:	f7ff f9e7 	bl	8008edc <InitPulse>
		  	  HAL_Delay(500);
 8009b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b12:	f001 fce3 	bl	800b4dc <HAL_Delay>
	while(photo[SR]/*構造体アロー*/ < 250/**/) //前向きの
 8009b16:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <ModeSelect+0x124>)
 8009b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b1c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009b58 <ModeSelect+0x130>
 8009b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b28:	d498      	bmi.n	8009a5c <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 8009b2a:	f001 faf3 	bl	800b114 <EmitterOFF>
	ADCStop();
 8009b2e:	f001 faab 	bl	800b088 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 8009b32:	4804      	ldr	r0, [pc, #16]	; (8009b44 <ModeSelect+0x11c>)
 8009b34:	f003 ffd7 	bl	800dae6 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 8009b38:	f001 face 	bl	800b0d8 <EncoderStop>

	//モード選択後どうするか
}
 8009b3c:	bf00      	nop
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd90      	pop	{r4, r7, pc}
 8009b44:	20000420 	.word	0x20000420
 8009b48:	40000424 	.word	0x40000424
 8009b4c:	20000238 	.word	0x20000238
 8009b50:	08012258 	.word	0x08012258
 8009b54:	40000400 	.word	0x40000400
 8009b58:	437a0000 	.word	0x437a0000

08009b5c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8009b64:	1d39      	adds	r1, r7, #4
 8009b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4803      	ldr	r0, [pc, #12]	; (8009b7c <__io_putchar+0x20>)
 8009b6e:	f005 faf9 	bl	800f164 <HAL_UART_Transmit>
	return ch;
 8009b72:	687b      	ldr	r3, [r7, #4]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000608 	.word	0x20000608

08009b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b86:	f001 fc37 	bl	800b3f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b8a:	f000 f85f 	bl	8009c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b8e:	f000 fca9 	bl	800a4e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009b92:	f000 fc7f 	bl	800a494 <MX_DMA_Init>
  MX_ADC1_Init();
 8009b96:	f000 f8c3 	bl	8009d20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8009b9a:	f000 f92f 	bl	8009dfc <MX_ADC2_Init>
  MX_TIM3_Init();
 8009b9e:	f000 fa89 	bl	800a0b4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8009ba2:	f000 fa11 	bl	8009fc8 <MX_TIM2_Init>
  MX_SPI3_Init();
 8009ba6:	f000 f989 	bl	8009ebc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8009baa:	f000 fc49 	bl	800a440 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8009bae:	f000 fb29 	bl	800a204 <MX_TIM5_Init>
  MX_TIM4_Init();
 8009bb2:	f000 fad3 	bl	800a15c <MX_TIM4_Init>
  MX_TIM8_Init();
 8009bb6:	f000 fb9b 	bl	800a2f0 <MX_TIM8_Init>
  MX_TIM1_Init();
 8009bba:	f000 f9b5 	bl	8009f28 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADCStart();
 8009bbe:	f001 fa43 	bl	800b048 <ADCStart>
  HAL_Delay(500);
 8009bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bc6:	f001 fc89 	bl	800b4dc <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 8009bca:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <main+0xc0>)
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff fef6 	bl	80099c0 <BatteryCheck>

  int8_t mode=0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 8009bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4819      	ldr	r0, [pc, #100]	; (8009c44 <main+0xc4>)
 8009be0:	f006 fc04 	bl	80103ec <iprintf>
  ModeSelect( 0, 7, &mode);
 8009be4:	1dfb      	adds	r3, r7, #7
 8009be6:	461a      	mov	r2, r3
 8009be8:	2107      	movs	r1, #7
 8009bea:	2000      	movs	r0, #0
 8009bec:	f7ff ff1c 	bl	8009a28 <ModeSelect>
  Signal( mode );
 8009bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fec5 	bl	8009984 <Signal>
  	  printf("ドン\r\n");
 8009bfa:	4813      	ldr	r0, [pc, #76]	; (8009c48 <main+0xc8>)
 8009bfc:	f006 fc6a 	bl	80104d4 <puts>

  while (1)
  {

	  switch( mode )
 8009c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	d819      	bhi.n	8009c3c <main+0xbc>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <main+0x90>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	08009c3d 	.word	0x08009c3d
 8009c18:	08009c3d 	.word	0x08009c3d
 8009c1c:	08009c3d 	.word	0x08009c3d
 8009c20:	08009c3d 	.word	0x08009c3d
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c31 	.word	0x08009c31
 8009c2c:	08009c37 	.word	0x08009c37
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 8009c30:	f7ff fcce 	bl	80095d0 <Explore>
		  break;
 8009c34:	e003      	b.n	8009c3e <main+0xbe>
	  case 7:
		  WritingFree();
 8009c36:	f7ff fc5f 	bl	80094f8 <WritingFree>
		  break;
 8009c3a:	e000      	b.n	8009c3e <main+0xbe>
	  default :
		  break;
 8009c3c:	bf00      	nop
	  switch( mode )
 8009c3e:	e7df      	b.n	8009c00 <main+0x80>
 8009c40:	20000404 	.word	0x20000404
 8009c44:	0801226c 	.word	0x0801226c
 8009c48:	08012278 	.word	0x08012278

08009c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b094      	sub	sp, #80	; 0x50
 8009c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c52:	f107 0320 	add.w	r3, r7, #32
 8009c56:	2230      	movs	r2, #48	; 0x30
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f005 ff61 	bl	800fb22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c60:	f107 030c 	add.w	r3, r7, #12
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	609a      	str	r2, [r3, #8]
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c70:	2300      	movs	r3, #0
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <SystemClock_Config+0xcc>)
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	4a27      	ldr	r2, [pc, #156]	; (8009d18 <SystemClock_Config+0xcc>)
 8009c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <SystemClock_Config+0xcc>)
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c88:	60bb      	str	r3, [r7, #8]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	4b22      	ldr	r3, [pc, #136]	; (8009d1c <SystemClock_Config+0xd0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a21      	ldr	r2, [pc, #132]	; (8009d1c <SystemClock_Config+0xd0>)
 8009c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <SystemClock_Config+0xd0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009cc0:	23a8      	movs	r3, #168	; 0xa8
 8009cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009cc8:	2304      	movs	r3, #4
 8009cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009ccc:	f107 0320 	add.w	r3, r7, #32
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f003 f9f3 	bl	800d0bc <HAL_RCC_OscConfig>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009cdc:	f000 fccc 	bl	800a678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009ce0:	230f      	movs	r3, #15
 8009ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009cec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009cf8:	f107 030c 	add.w	r3, r7, #12
 8009cfc:	2105      	movs	r1, #5
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f003 fc4c 	bl	800d59c <HAL_RCC_ClockConfig>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009d0a:	f000 fcb5 	bl	800a678 <Error_Handler>
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3750      	adds	r7, #80	; 0x50
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	40007000 	.word	0x40007000

08009d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009d26:	463b      	mov	r3, r7
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	605a      	str	r2, [r3, #4]
 8009d2e:	609a      	str	r2, [r3, #8]
 8009d30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009d32:	4b2f      	ldr	r3, [pc, #188]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d34:	4a2f      	ldr	r2, [pc, #188]	; (8009df4 <MX_ADC1_Init+0xd4>)
 8009d36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009d38:	4b2d      	ldr	r3, [pc, #180]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009d40:	4b2b      	ldr	r3, [pc, #172]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009d46:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009d4c:	4b28      	ldr	r3, [pc, #160]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009d52:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009d5a:	4b25      	ldr	r3, [pc, #148]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009d60:	4b23      	ldr	r3, [pc, #140]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d62:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <MX_ADC1_Init+0xd8>)
 8009d64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009d66:	4b22      	ldr	r3, [pc, #136]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8009d6c:	4b20      	ldr	r3, [pc, #128]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d6e:	2203      	movs	r2, #3
 8009d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009d72:	4b1f      	ldr	r3, [pc, #124]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009d7a:	4b1d      	ldr	r3, [pc, #116]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009d80:	481b      	ldr	r0, [pc, #108]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009d82:	f001 fbcd 	bl	800b520 <HAL_ADC_Init>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009d8c:	f000 fc74 	bl	800a678 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009d90:	230a      	movs	r3, #10
 8009d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009d94:	2301      	movs	r3, #1
 8009d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4813      	ldr	r0, [pc, #76]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009da2:	f001 fea5 	bl	800baf0 <HAL_ADC_ConfigChannel>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009dac:	f000 fc64 	bl	800a678 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009db0:	230e      	movs	r3, #14
 8009db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009db4:	2302      	movs	r3, #2
 8009db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009db8:	463b      	mov	r3, r7
 8009dba:	4619      	mov	r1, r3
 8009dbc:	480c      	ldr	r0, [pc, #48]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009dbe:	f001 fe97 	bl	800baf0 <HAL_ADC_ConfigChannel>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009dc8:	f000 fc56 	bl	800a678 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009dcc:	2309      	movs	r3, #9
 8009dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4805      	ldr	r0, [pc, #20]	; (8009df0 <MX_ADC1_Init+0xd0>)
 8009dda:	f001 fe89 	bl	800baf0 <HAL_ADC_ConfigChannel>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8009de4:	f000 fc48 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200005c0 	.word	0x200005c0
 8009df4:	40012000 	.word	0x40012000
 8009df8:	0f000001 	.word	0x0f000001

08009dfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009e02:	463b      	mov	r3, r7
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8009e0e:	4b28      	ldr	r3, [pc, #160]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e10:	4a28      	ldr	r2, [pc, #160]	; (8009eb4 <MX_ADC2_Init+0xb8>)
 8009e12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009e14:	4b26      	ldr	r3, [pc, #152]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009e1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009e1c:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8009e22:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e24:	2201      	movs	r2, #1
 8009e26:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8009e28:	4b21      	ldr	r3, [pc, #132]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009e2e:	4b20      	ldr	r3, [pc, #128]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009e36:	4b1e      	ldr	r3, [pc, #120]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009e3c:	4b1c      	ldr	r3, [pc, #112]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e3e:	4a1e      	ldr	r2, [pc, #120]	; (8009eb8 <MX_ADC2_Init+0xbc>)
 8009e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009e42:	4b1b      	ldr	r3, [pc, #108]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8009e48:	4b19      	ldr	r3, [pc, #100]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8009e4e:	4b18      	ldr	r3, [pc, #96]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e56:	4b16      	ldr	r3, [pc, #88]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009e5c:	4814      	ldr	r0, [pc, #80]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e5e:	f001 fb5f 	bl	800b520 <HAL_ADC_Init>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8009e68:	f000 fc06 	bl	800a678 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009e6c:	230b      	movs	r3, #11
 8009e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009e70:	2301      	movs	r3, #1
 8009e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009e74:	2303      	movs	r3, #3
 8009e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009e78:	463b      	mov	r3, r7
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	480c      	ldr	r0, [pc, #48]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e7e:	f001 fe37 	bl	800baf0 <HAL_ADC_ConfigChannel>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8009e88:	f000 fbf6 	bl	800a678 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009e8c:	230f      	movs	r3, #15
 8009e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009e90:	2302      	movs	r3, #2
 8009e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009e94:	463b      	mov	r3, r7
 8009e96:	4619      	mov	r1, r3
 8009e98:	4805      	ldr	r0, [pc, #20]	; (8009eb0 <MX_ADC2_Init+0xb4>)
 8009e9a:	f001 fe29 	bl	800baf0 <HAL_ADC_ConfigChannel>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8009ea4:	f000 fbe8 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200004a0 	.word	0x200004a0
 8009eb4:	40012100 	.word	0x40012100
 8009eb8:	0f000001 	.word	0x0f000001

08009ebc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8009ec0:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ec2:	4a18      	ldr	r2, [pc, #96]	; (8009f24 <MX_SPI3_Init+0x68>)
 8009ec4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009ec6:	4b16      	ldr	r3, [pc, #88]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ecc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ed4:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009edc:	2202      	movs	r2, #2
 8009ede:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009ee0:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ef0:	2228      	movs	r2, #40	; 0x28
 8009ef2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009f06:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009f08:	220a      	movs	r2, #10
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009f0c:	4804      	ldr	r0, [pc, #16]	; (8009f20 <MX_SPI3_Init+0x64>)
 8009f0e:	f003 fd37 	bl	800d980 <HAL_SPI_Init>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009f18:	f000 fbae 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009f1c:	bf00      	nop
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000568 	.word	0x20000568
 8009f24:	40003c00 	.word	0x40003c00

08009f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	609a      	str	r2, [r3, #8]
 8009f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f3c:	463b      	mov	r3, r7
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009f44:	4b1e      	ldr	r3, [pc, #120]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f46:	4a1f      	ldr	r2, [pc, #124]	; (8009fc4 <MX_TIM1_Init+0x9c>)
 8009f48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f4c:	22a7      	movs	r2, #167	; 0xa7
 8009f4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f50:	4b1b      	ldr	r3, [pc, #108]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009f56:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009f5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f5e:	4b18      	ldr	r3, [pc, #96]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f64:	4b16      	ldr	r3, [pc, #88]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f6a:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009f70:	4813      	ldr	r0, [pc, #76]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f72:	f003 fd69 	bl	800da48 <HAL_TIM_Base_Init>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8009f7c:	f000 fb7c 	bl	800a678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009f8e:	f004 fadb 	bl	800e548 <HAL_TIM_ConfigClockSource>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8009f98:	f000 fb6e 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <MX_TIM1_Init+0x98>)
 8009faa:	f004 ff87 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009fb4:	f000 fb60 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200006a8 	.word	0x200006a8
 8009fc4:	40010000 	.word	0x40010000

08009fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08e      	sub	sp, #56	; 0x38
 8009fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	605a      	str	r2, [r3, #4]
 8009fd8:	609a      	str	r2, [r3, #8]
 8009fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fdc:	f107 0320 	add.w	r3, r7, #32
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fe6:	1d3b      	adds	r3, r7, #4
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	609a      	str	r2, [r3, #8]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	611a      	str	r2, [r3, #16]
 8009ff4:	615a      	str	r2, [r3, #20]
 8009ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ff8:	4b2d      	ldr	r3, [pc, #180]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 8009ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a000:	4b2b      	ldr	r3, [pc, #172]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a006:	4b2a      	ldr	r3, [pc, #168]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800a00c:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a00e:	f241 0267 	movw	r2, #4199	; 0x1067
 800a012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a014:	4b26      	ldr	r3, [pc, #152]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a01a:	4b25      	ldr	r3, [pc, #148]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a020:	4823      	ldr	r0, [pc, #140]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a022:	f003 fd11 	bl	800da48 <HAL_TIM_Base_Init>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a02c:	f000 fb24 	bl	800a678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a03a:	4619      	mov	r1, r3
 800a03c:	481c      	ldr	r0, [pc, #112]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a03e:	f004 fa83 	bl	800e548 <HAL_TIM_ConfigClockSource>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a048:	f000 fb16 	bl	800a678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a04c:	4818      	ldr	r0, [pc, #96]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a04e:	f003 fec9 	bl	800dde4 <HAL_TIM_PWM_Init>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a058:	f000 fb0e 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a05c:	2300      	movs	r3, #0
 800a05e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a060:	2300      	movs	r3, #0
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a064:	f107 0320 	add.w	r3, r7, #32
 800a068:	4619      	mov	r1, r3
 800a06a:	4811      	ldr	r0, [pc, #68]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a06c:	f004 ff26 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a076:	f000 faff 	bl	800a678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a07a:	2360      	movs	r3, #96	; 0x60
 800a07c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a08a:	1d3b      	adds	r3, r7, #4
 800a08c:	220c      	movs	r2, #12
 800a08e:	4619      	mov	r1, r3
 800a090:	4807      	ldr	r0, [pc, #28]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a092:	f004 f993 	bl	800e3bc <HAL_TIM_PWM_ConfigChannel>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a09c:	f000 faec 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a0a0:	4803      	ldr	r0, [pc, #12]	; (800a0b0 <MX_TIM2_Init+0xe8>)
 800a0a2:	f000 fd89 	bl	800abb8 <HAL_TIM_MspPostInit>

}
 800a0a6:	bf00      	nop
 800a0a8:	3738      	adds	r7, #56	; 0x38
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	200006e8 	.word	0x200006e8

0800a0b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08c      	sub	sp, #48	; 0x30
 800a0b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a0ba:	f107 030c 	add.w	r3, r7, #12
 800a0be:	2224      	movs	r2, #36	; 0x24
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f005 fd2d 	bl	800fb22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0c8:	1d3b      	adds	r3, r7, #4
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a0d0:	4b20      	ldr	r3, [pc, #128]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0d2:	4a21      	ldr	r2, [pc, #132]	; (800a158 <MX_TIM3_Init+0xa4>)
 800a0d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0e4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a0e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0ea:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0f0:	4b18      	ldr	r3, [pc, #96]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a0fe:	2301      	movs	r3, #1
 800a100:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a102:	2300      	movs	r3, #0
 800a104:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a10a:	2300      	movs	r3, #0
 800a10c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a10e:	2301      	movs	r3, #1
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a112:	2300      	movs	r3, #0
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a11a:	f107 030c 	add.w	r3, r7, #12
 800a11e:	4619      	mov	r1, r3
 800a120:	480c      	ldr	r0, [pc, #48]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a122:	f003 fed3 	bl	800decc <HAL_TIM_Encoder_Init>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800a12c:	f000 faa4 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a130:	2300      	movs	r3, #0
 800a132:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a134:	2300      	movs	r3, #0
 800a136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a138:	1d3b      	adds	r3, r7, #4
 800a13a:	4619      	mov	r1, r3
 800a13c:	4805      	ldr	r0, [pc, #20]	; (800a154 <MX_TIM3_Init+0xa0>)
 800a13e:	f004 febd 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a148:	f000 fa96 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a14c:	bf00      	nop
 800a14e:	3730      	adds	r7, #48	; 0x30
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000528 	.word	0x20000528
 800a158:	40000400 	.word	0x40000400

0800a15c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08c      	sub	sp, #48	; 0x30
 800a160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	2224      	movs	r2, #36	; 0x24
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f005 fcd9 	bl	800fb22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a170:	1d3b      	adds	r3, r7, #4
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a178:	4b20      	ldr	r3, [pc, #128]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a17a:	4a21      	ldr	r2, [pc, #132]	; (800a200 <MX_TIM4_Init+0xa4>)
 800a17c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a17e:	4b1f      	ldr	r3, [pc, #124]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a180:	2200      	movs	r2, #0
 800a182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a184:	4b1d      	ldr	r3, [pc, #116]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a186:	2200      	movs	r2, #0
 800a188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800a18a:	4b1c      	ldr	r3, [pc, #112]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a18c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a192:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a194:	2200      	movs	r2, #0
 800a196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a198:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a1c2:	f107 030c 	add.w	r3, r7, #12
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	480c      	ldr	r0, [pc, #48]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a1ca:	f003 fe7f 	bl	800decc <HAL_TIM_Encoder_Init>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a1d4:	f000 fa50 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a1e0:	1d3b      	adds	r3, r7, #4
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <MX_TIM4_Init+0xa0>)
 800a1e6:	f004 fe69 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a1f0:	f000 fa42 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a1f4:	bf00      	nop
 800a1f6:	3730      	adds	r7, #48	; 0x30
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000460 	.word	0x20000460
 800a200:	40000800 	.word	0x40000800

0800a204 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08e      	sub	sp, #56	; 0x38
 800a208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a20a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a20e:	2200      	movs	r2, #0
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	605a      	str	r2, [r3, #4]
 800a214:	609a      	str	r2, [r3, #8]
 800a216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a218:	f107 0320 	add.w	r3, r7, #32
 800a21c:	2200      	movs	r2, #0
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	605a      	str	r2, [r3, #4]
 800a22a:	609a      	str	r2, [r3, #8]
 800a22c:	60da      	str	r2, [r3, #12]
 800a22e:	611a      	str	r2, [r3, #16]
 800a230:	615a      	str	r2, [r3, #20]
 800a232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a234:	4b2c      	ldr	r3, [pc, #176]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a236:	4a2d      	ldr	r2, [pc, #180]	; (800a2ec <MX_TIM5_Init+0xe8>)
 800a238:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a23a:	4b2b      	ldr	r3, [pc, #172]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a240:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a242:	2200      	movs	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800a246:	4b28      	ldr	r3, [pc, #160]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a248:	f241 0267 	movw	r2, #4199	; 0x1067
 800a24c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a24e:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a250:	2200      	movs	r2, #0
 800a252:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a254:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a256:	2200      	movs	r2, #0
 800a258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a25a:	4823      	ldr	r0, [pc, #140]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a25c:	f003 fbf4 	bl	800da48 <HAL_TIM_Base_Init>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a266:	f000 fa07 	bl	800a678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a26a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a274:	4619      	mov	r1, r3
 800a276:	481c      	ldr	r0, [pc, #112]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a278:	f004 f966 	bl	800e548 <HAL_TIM_ConfigClockSource>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a282:	f000 f9f9 	bl	800a678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a286:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a288:	f003 fdac 	bl	800dde4 <HAL_TIM_PWM_Init>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a292:	f000 f9f1 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a296:	2300      	movs	r3, #0
 800a298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a29e:	f107 0320 	add.w	r3, r7, #32
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4810      	ldr	r0, [pc, #64]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a2a6:	f004 fe09 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a2b0:	f000 f9e2 	bl	800a678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2b4:	2360      	movs	r3, #96	; 0x60
 800a2b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a2c4:	1d3b      	adds	r3, r7, #4
 800a2c6:	2204      	movs	r2, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4807      	ldr	r0, [pc, #28]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a2cc:	f004 f876 	bl	800e3bc <HAL_TIM_PWM_ConfigChannel>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a2d6:	f000 f9cf 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a2da:	4803      	ldr	r0, [pc, #12]	; (800a2e8 <MX_TIM5_Init+0xe4>)
 800a2dc:	f000 fc6c 	bl	800abb8 <HAL_TIM_MspPostInit>

}
 800a2e0:	bf00      	nop
 800a2e2:	3738      	adds	r7, #56	; 0x38
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	200004e8 	.word	0x200004e8
 800a2ec:	40000c00 	.word	0x40000c00

0800a2f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b096      	sub	sp, #88	; 0x58
 800a2f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	605a      	str	r2, [r3, #4]
 800a300:	609a      	str	r2, [r3, #8]
 800a302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	605a      	str	r2, [r3, #4]
 800a318:	609a      	str	r2, [r3, #8]
 800a31a:	60da      	str	r2, [r3, #12]
 800a31c:	611a      	str	r2, [r3, #16]
 800a31e:	615a      	str	r2, [r3, #20]
 800a320:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a322:	1d3b      	adds	r3, r7, #4
 800a324:	2220      	movs	r2, #32
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f005 fbfa 	bl	800fb22 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a32e:	4b42      	ldr	r3, [pc, #264]	; (800a438 <MX_TIM8_Init+0x148>)
 800a330:	4a42      	ldr	r2, [pc, #264]	; (800a43c <MX_TIM8_Init+0x14c>)
 800a332:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800a334:	4b40      	ldr	r3, [pc, #256]	; (800a438 <MX_TIM8_Init+0x148>)
 800a336:	22a7      	movs	r2, #167	; 0xa7
 800a338:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a33a:	4b3f      	ldr	r3, [pc, #252]	; (800a438 <MX_TIM8_Init+0x148>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800a340:	4b3d      	ldr	r3, [pc, #244]	; (800a438 <MX_TIM8_Init+0x148>)
 800a342:	2231      	movs	r2, #49	; 0x31
 800a344:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a346:	4b3c      	ldr	r3, [pc, #240]	; (800a438 <MX_TIM8_Init+0x148>)
 800a348:	2200      	movs	r2, #0
 800a34a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a34c:	4b3a      	ldr	r3, [pc, #232]	; (800a438 <MX_TIM8_Init+0x148>)
 800a34e:	2200      	movs	r2, #0
 800a350:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a352:	4b39      	ldr	r3, [pc, #228]	; (800a438 <MX_TIM8_Init+0x148>)
 800a354:	2280      	movs	r2, #128	; 0x80
 800a356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a358:	4837      	ldr	r0, [pc, #220]	; (800a438 <MX_TIM8_Init+0x148>)
 800a35a:	f003 fb75 	bl	800da48 <HAL_TIM_Base_Init>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800a364:	f000 f988 	bl	800a678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a36c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a36e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a372:	4619      	mov	r1, r3
 800a374:	4830      	ldr	r0, [pc, #192]	; (800a438 <MX_TIM8_Init+0x148>)
 800a376:	f004 f8e7 	bl	800e548 <HAL_TIM_ConfigClockSource>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a380:	f000 f97a 	bl	800a678 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800a384:	482c      	ldr	r0, [pc, #176]	; (800a438 <MX_TIM8_Init+0x148>)
 800a386:	f003 fbd9 	bl	800db3c <HAL_TIM_OC_Init>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800a390:	f000 f972 	bl	800a678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a394:	2300      	movs	r3, #0
 800a396:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a398:	2300      	movs	r3, #0
 800a39a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a39c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4825      	ldr	r0, [pc, #148]	; (800a438 <MX_TIM8_Init+0x148>)
 800a3a4:	f004 fd8a 	bl	800eebc <HAL_TIMEx_MasterConfigSynchronization>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800a3ae:	f000 f963 	bl	800a678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a3b2:	2330      	movs	r3, #48	; 0x30
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800a3b6:	2318      	movs	r3, #24
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a3ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4818      	ldr	r0, [pc, #96]	; (800a438 <MX_TIM8_Init+0x148>)
 800a3d8:	f003 ff90 	bl	800e2fc <HAL_TIM_OC_ConfigChannel>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800a3e2:	f000 f949 	bl	800a678 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <MX_TIM8_Init+0x148>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	699a      	ldr	r2, [r3, #24]
 800a3ec:	4b12      	ldr	r3, [pc, #72]	; (800a438 <MX_TIM8_Init+0x148>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f042 0208 	orr.w	r2, r2, #8
 800a3f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a406:	2300      	movs	r3, #0
 800a408:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a40a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a40e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a410:	2300      	movs	r3, #0
 800a412:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a414:	1d3b      	adds	r3, r7, #4
 800a416:	4619      	mov	r1, r3
 800a418:	4807      	ldr	r0, [pc, #28]	; (800a438 <MX_TIM8_Init+0x148>)
 800a41a:	f004 fdcb 	bl	800efb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800a424:	f000 f928 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a428:	4803      	ldr	r0, [pc, #12]	; (800a438 <MX_TIM8_Init+0x148>)
 800a42a:	f000 fbc5 	bl	800abb8 <HAL_TIM_MspPostInit>

}
 800a42e:	bf00      	nop
 800a430:	3758      	adds	r7, #88	; 0x58
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000420 	.word	0x20000420
 800a43c:	40010400 	.word	0x40010400

0800a440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a444:	4b11      	ldr	r3, [pc, #68]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a446:	4a12      	ldr	r2, [pc, #72]	; (800a490 <MX_USART1_UART_Init+0x50>)
 800a448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a44a:	4b10      	ldr	r3, [pc, #64]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a44c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a452:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a454:	2200      	movs	r2, #0
 800a456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a45e:	4b0b      	ldr	r3, [pc, #44]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a460:	2200      	movs	r2, #0
 800a462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a464:	4b09      	ldr	r3, [pc, #36]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a466:	220c      	movs	r2, #12
 800a468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a46a:	4b08      	ldr	r3, [pc, #32]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a472:	2200      	movs	r2, #0
 800a474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a476:	4805      	ldr	r0, [pc, #20]	; (800a48c <MX_USART1_UART_Init+0x4c>)
 800a478:	f004 fe27 	bl	800f0ca <HAL_UART_Init>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a482:	f000 f8f9 	bl	800a678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a486:	bf00      	nop
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000608 	.word	0x20000608
 800a490:	40011000 	.word	0x40011000

0800a494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
 800a49e:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <MX_DMA_Init+0x4c>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	4a0f      	ldr	r2, [pc, #60]	; (800a4e0 <MX_DMA_Init+0x4c>)
 800a4a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <MX_DMA_Init+0x4c>)
 800a4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4b2:	607b      	str	r3, [r7, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	2038      	movs	r0, #56	; 0x38
 800a4bc:	f001 fe9d 	bl	800c1fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a4c0:	2038      	movs	r0, #56	; 0x38
 800a4c2:	f001 feb6 	bl	800c232 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	203a      	movs	r0, #58	; 0x3a
 800a4cc:	f001 fe95 	bl	800c1fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a4d0:	203a      	movs	r0, #58	; 0x3a
 800a4d2:	f001 feae 	bl	800c232 <HAL_NVIC_EnableIRQ>

}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40023800 	.word	0x40023800

0800a4e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4ea:	f107 0314 	add.w	r3, r7, #20
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	605a      	str	r2, [r3, #4]
 800a4f4:	609a      	str	r2, [r3, #8]
 800a4f6:	60da      	str	r2, [r3, #12]
 800a4f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	4b59      	ldr	r3, [pc, #356]	; (800a664 <MX_GPIO_Init+0x180>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	4a58      	ldr	r2, [pc, #352]	; (800a664 <MX_GPIO_Init+0x180>)
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	6313      	str	r3, [r2, #48]	; 0x30
 800a50a:	4b56      	ldr	r3, [pc, #344]	; (800a664 <MX_GPIO_Init+0x180>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
 800a51a:	4b52      	ldr	r3, [pc, #328]	; (800a664 <MX_GPIO_Init+0x180>)
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	4a51      	ldr	r2, [pc, #324]	; (800a664 <MX_GPIO_Init+0x180>)
 800a520:	f043 0304 	orr.w	r3, r3, #4
 800a524:	6313      	str	r3, [r2, #48]	; 0x30
 800a526:	4b4f      	ldr	r3, [pc, #316]	; (800a664 <MX_GPIO_Init+0x180>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
 800a536:	4b4b      	ldr	r3, [pc, #300]	; (800a664 <MX_GPIO_Init+0x180>)
 800a538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53a:	4a4a      	ldr	r2, [pc, #296]	; (800a664 <MX_GPIO_Init+0x180>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	6313      	str	r3, [r2, #48]	; 0x30
 800a542:	4b48      	ldr	r3, [pc, #288]	; (800a664 <MX_GPIO_Init+0x180>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
 800a552:	4b44      	ldr	r3, [pc, #272]	; (800a664 <MX_GPIO_Init+0x180>)
 800a554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a556:	4a43      	ldr	r2, [pc, #268]	; (800a664 <MX_GPIO_Init+0x180>)
 800a558:	f043 0302 	orr.w	r3, r3, #2
 800a55c:	6313      	str	r3, [r2, #48]	; 0x30
 800a55e:	4b41      	ldr	r3, [pc, #260]	; (800a664 <MX_GPIO_Init+0x180>)
 800a560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a56a:	2300      	movs	r3, #0
 800a56c:	603b      	str	r3, [r7, #0]
 800a56e:	4b3d      	ldr	r3, [pc, #244]	; (800a664 <MX_GPIO_Init+0x180>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a572:	4a3c      	ldr	r2, [pc, #240]	; (800a664 <MX_GPIO_Init+0x180>)
 800a574:	f043 0308 	orr.w	r3, r3, #8
 800a578:	6313      	str	r3, [r2, #48]	; 0x30
 800a57a:	4b3a      	ldr	r3, [pc, #232]	; (800a664 <MX_GPIO_Init+0x180>)
 800a57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800a586:	2200      	movs	r2, #0
 800a588:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a58c:	4836      	ldr	r0, [pc, #216]	; (800a668 <MX_GPIO_Init+0x184>)
 800a58e:	f002 fd7b 	bl	800d088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800a592:	2200      	movs	r2, #0
 800a594:	2105      	movs	r1, #5
 800a596:	4835      	ldr	r0, [pc, #212]	; (800a66c <MX_GPIO_Init+0x188>)
 800a598:	f002 fd76 	bl	800d088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800a59c:	2200      	movs	r2, #0
 800a59e:	2104      	movs	r1, #4
 800a5a0:	4833      	ldr	r0, [pc, #204]	; (800a670 <MX_GPIO_Init+0x18c>)
 800a5a2:	f002 fd71 	bl	800d088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5ac:	4831      	ldr	r0, [pc, #196]	; (800a674 <MX_GPIO_Init+0x190>)
 800a5ae:	f002 fd6b 	bl	800d088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800a5b2:	f44f 7341 	mov.w	r3, #772	; 0x304
 800a5b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4827      	ldr	r0, [pc, #156]	; (800a668 <MX_GPIO_Init+0x184>)
 800a5cc:	f002 fbc2 	bl	800cd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a5d0:	2305      	movs	r3, #5
 800a5d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5e0:	f107 0314 	add.w	r3, r7, #20
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4821      	ldr	r0, [pc, #132]	; (800a66c <MX_GPIO_Init+0x188>)
 800a5e8:	f002 fbb4 	bl	800cd54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800a5ec:	f241 0304 	movw	r3, #4100	; 0x1004
 800a5f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	4619      	mov	r1, r3
 800a600:	481c      	ldr	r0, [pc, #112]	; (800a674 <MX_GPIO_Init+0x190>)
 800a602:	f002 fba7 	bl	800cd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a60a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a60c:	2300      	movs	r3, #0
 800a60e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a614:	f107 0314 	add.w	r3, r7, #20
 800a618:	4619      	mov	r1, r3
 800a61a:	4814      	ldr	r0, [pc, #80]	; (800a66c <MX_GPIO_Init+0x188>)
 800a61c:	f002 fb9a 	bl	800cd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a620:	2304      	movs	r3, #4
 800a622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a624:	2301      	movs	r3, #1
 800a626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62c:	2300      	movs	r3, #0
 800a62e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a630:	f107 0314 	add.w	r3, r7, #20
 800a634:	4619      	mov	r1, r3
 800a636:	480e      	ldr	r0, [pc, #56]	; (800a670 <MX_GPIO_Init+0x18c>)
 800a638:	f002 fb8c 	bl	800cd54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a63c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a642:	2301      	movs	r3, #1
 800a644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a64a:	2300      	movs	r3, #0
 800a64c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a64e:	f107 0314 	add.w	r3, r7, #20
 800a652:	4619      	mov	r1, r3
 800a654:	4807      	ldr	r0, [pc, #28]	; (800a674 <MX_GPIO_Init+0x190>)
 800a656:	f002 fb7d 	bl	800cd54 <HAL_GPIO_Init>

}
 800a65a:	bf00      	nop
 800a65c:	3728      	adds	r7, #40	; 0x28
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	40023800 	.word	0x40023800
 800a668:	40020800 	.word	0x40020800
 800a66c:	40020000 	.word	0x40020000
 800a670:	40020c00 	.word	0x40020c00
 800a674:	40020400 	.word	0x40020400

0800a678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a67c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a67e:	e7fe      	b.n	800a67e <Error_Handler+0x6>

0800a680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a686:	2300      	movs	r3, #0
 800a688:	607b      	str	r3, [r7, #4]
 800a68a:	4b13      	ldr	r3, [pc, #76]	; (800a6d8 <HAL_MspInit+0x58>)
 800a68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68e:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <HAL_MspInit+0x58>)
 800a690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a694:	6453      	str	r3, [r2, #68]	; 0x44
 800a696:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <HAL_MspInit+0x58>)
 800a698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a69e:	607b      	str	r3, [r7, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <HAL_MspInit+0x58>)
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	4a0b      	ldr	r2, [pc, #44]	; (800a6d8 <HAL_MspInit+0x58>)
 800a6ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6b0:	6413      	str	r3, [r2, #64]	; 0x40
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <HAL_MspInit+0x58>)
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2004      	movs	r0, #4
 800a6c4:	f001 fd99 	bl	800c1fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800a6c8:	2004      	movs	r0, #4
 800a6ca:	f001 fdb2 	bl	800c232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40023800 	.word	0x40023800

0800a6dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08c      	sub	sp, #48	; 0x30
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6e4:	f107 031c 	add.w	r3, r7, #28
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	609a      	str	r2, [r3, #8]
 800a6f0:	60da      	str	r2, [r3, #12]
 800a6f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a73      	ldr	r2, [pc, #460]	; (800a8c8 <HAL_ADC_MspInit+0x1ec>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d17a      	bne.n	800a7f4 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a6fe:	2300      	movs	r3, #0
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	4b72      	ldr	r3, [pc, #456]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a706:	4a71      	ldr	r2, [pc, #452]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a70c:	6453      	str	r3, [r2, #68]	; 0x44
 800a70e:	4b6f      	ldr	r3, [pc, #444]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a716:	61bb      	str	r3, [r7, #24]
 800a718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	4b6b      	ldr	r3, [pc, #428]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	4a6a      	ldr	r2, [pc, #424]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a724:	f043 0304 	orr.w	r3, r3, #4
 800a728:	6313      	str	r3, [r2, #48]	; 0x30
 800a72a:	4b68      	ldr	r3, [pc, #416]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72e:	f003 0304 	and.w	r3, r3, #4
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a736:	2300      	movs	r3, #0
 800a738:	613b      	str	r3, [r7, #16]
 800a73a:	4b64      	ldr	r3, [pc, #400]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73e:	4a63      	ldr	r2, [pc, #396]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a740:	f043 0302 	orr.w	r3, r3, #2
 800a744:	6313      	str	r3, [r2, #48]	; 0x30
 800a746:	4b61      	ldr	r3, [pc, #388]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800a752:	2311      	movs	r3, #17
 800a754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a756:	2303      	movs	r3, #3
 800a758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a75e:	f107 031c 	add.w	r3, r7, #28
 800a762:	4619      	mov	r1, r3
 800a764:	485a      	ldr	r0, [pc, #360]	; (800a8d0 <HAL_ADC_MspInit+0x1f4>)
 800a766:	f002 faf5 	bl	800cd54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a76a:	2302      	movs	r3, #2
 800a76c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a76e:	2303      	movs	r3, #3
 800a770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a772:	2300      	movs	r3, #0
 800a774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a776:	f107 031c 	add.w	r3, r7, #28
 800a77a:	4619      	mov	r1, r3
 800a77c:	4855      	ldr	r0, [pc, #340]	; (800a8d4 <HAL_ADC_MspInit+0x1f8>)
 800a77e:	f002 fae9 	bl	800cd54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a782:	4b55      	ldr	r3, [pc, #340]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a784:	4a55      	ldr	r2, [pc, #340]	; (800a8dc <HAL_ADC_MspInit+0x200>)
 800a786:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a788:	4b53      	ldr	r3, [pc, #332]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a78e:	4b52      	ldr	r3, [pc, #328]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a790:	2200      	movs	r2, #0
 800a792:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a794:	4b50      	ldr	r3, [pc, #320]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a796:	2200      	movs	r2, #0
 800a798:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a79a:	4b4f      	ldr	r3, [pc, #316]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a79c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a7a2:	4b4d      	ldr	r3, [pc, #308]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a7aa:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a7b2:	4b49      	ldr	r3, [pc, #292]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a7ba:	4b47      	ldr	r3, [pc, #284]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7c0:	4b45      	ldr	r3, [pc, #276]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a7c6:	4844      	ldr	r0, [pc, #272]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7c8:	f001 fd4e 	bl	800c268 <HAL_DMA_Init>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800a7d2:	f7ff ff51 	bl	800a678 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a3f      	ldr	r2, [pc, #252]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7da:	639a      	str	r2, [r3, #56]	; 0x38
 800a7dc:	4a3e      	ldr	r2, [pc, #248]	; (800a8d8 <HAL_ADC_MspInit+0x1fc>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	2012      	movs	r0, #18
 800a7e8:	f001 fd07 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a7ec:	2012      	movs	r0, #18
 800a7ee:	f001 fd20 	bl	800c232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a7f2:	e065      	b.n	800a8c0 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a39      	ldr	r2, [pc, #228]	; (800a8e0 <HAL_ADC_MspInit+0x204>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d160      	bne.n	800a8c0 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	4b32      	ldr	r3, [pc, #200]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a806:	4a31      	ldr	r2, [pc, #196]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a80c:	6453      	str	r3, [r2, #68]	; 0x44
 800a80e:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a81a:	2300      	movs	r3, #0
 800a81c:	60bb      	str	r3, [r7, #8]
 800a81e:	4b2b      	ldr	r3, [pc, #172]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	4a2a      	ldr	r2, [pc, #168]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a824:	f043 0304 	orr.w	r3, r3, #4
 800a828:	6313      	str	r3, [r2, #48]	; 0x30
 800a82a:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <HAL_ADC_MspInit+0x1f0>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	60bb      	str	r3, [r7, #8]
 800a834:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800a836:	2322      	movs	r3, #34	; 0x22
 800a838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a83a:	2303      	movs	r3, #3
 800a83c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a842:	f107 031c 	add.w	r3, r7, #28
 800a846:	4619      	mov	r1, r3
 800a848:	4821      	ldr	r0, [pc, #132]	; (800a8d0 <HAL_ADC_MspInit+0x1f4>)
 800a84a:	f002 fa83 	bl	800cd54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800a84e:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a850:	4a25      	ldr	r2, [pc, #148]	; (800a8e8 <HAL_ADC_MspInit+0x20c>)
 800a852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800a854:	4b23      	ldr	r3, [pc, #140]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a85a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a85c:	4b21      	ldr	r3, [pc, #132]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a85e:	2200      	movs	r2, #0
 800a860:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a862:	4b20      	ldr	r3, [pc, #128]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a864:	2200      	movs	r2, #0
 800a866:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800a868:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a86a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a86e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a876:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a878:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a87a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a87e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800a880:	4b18      	ldr	r3, [pc, #96]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a882:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a886:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800a888:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a88e:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a890:	2200      	movs	r2, #0
 800a892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800a894:	4813      	ldr	r0, [pc, #76]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a896:	f001 fce7 	bl	800c268 <HAL_DMA_Init>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800a8a0:	f7ff feea 	bl	800a678 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a0f      	ldr	r2, [pc, #60]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a8a8:	639a      	str	r2, [r3, #56]	; 0x38
 800a8aa:	4a0e      	ldr	r2, [pc, #56]	; (800a8e4 <HAL_ADC_MspInit+0x208>)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	2012      	movs	r0, #18
 800a8b6:	f001 fca0 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a8ba:	2012      	movs	r0, #18
 800a8bc:	f001 fcb9 	bl	800c232 <HAL_NVIC_EnableIRQ>
}
 800a8c0:	bf00      	nop
 800a8c2:	3730      	adds	r7, #48	; 0x30
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40012000 	.word	0x40012000
 800a8cc:	40023800 	.word	0x40023800
 800a8d0:	40020800 	.word	0x40020800
 800a8d4:	40020400 	.word	0x40020400
 800a8d8:	20000648 	.word	0x20000648
 800a8dc:	40026410 	.word	0x40026410
 800a8e0:	40012100 	.word	0x40012100
 800a8e4:	20000728 	.word	0x20000728
 800a8e8:	40026440 	.word	0x40026440

0800a8ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8f4:	f107 0314 	add.w	r3, r7, #20
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	605a      	str	r2, [r3, #4]
 800a8fe:	609a      	str	r2, [r3, #8]
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a19      	ldr	r2, [pc, #100]	; (800a970 <HAL_SPI_MspInit+0x84>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d12c      	bne.n	800a968 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a90e:	2300      	movs	r3, #0
 800a910:	613b      	str	r3, [r7, #16]
 800a912:	4b18      	ldr	r3, [pc, #96]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	4a17      	ldr	r2, [pc, #92]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91c:	6413      	str	r3, [r2, #64]	; 0x40
 800a91e:	4b15      	ldr	r3, [pc, #84]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a926:	613b      	str	r3, [r7, #16]
 800a928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	4b11      	ldr	r3, [pc, #68]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a932:	4a10      	ldr	r2, [pc, #64]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a934:	f043 0304 	orr.w	r3, r3, #4
 800a938:	6313      	str	r3, [r2, #48]	; 0x30
 800a93a:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <HAL_SPI_MspInit+0x88>)
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	f003 0304 	and.w	r3, r3, #4
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a946:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a94a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a94c:	2302      	movs	r3, #2
 800a94e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a950:	2300      	movs	r3, #0
 800a952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a954:	2303      	movs	r3, #3
 800a956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a958:	2306      	movs	r3, #6
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a95c:	f107 0314 	add.w	r3, r7, #20
 800a960:	4619      	mov	r1, r3
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <HAL_SPI_MspInit+0x8c>)
 800a964:	f002 f9f6 	bl	800cd54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a968:	bf00      	nop
 800a96a:	3728      	adds	r7, #40	; 0x28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	40003c00 	.word	0x40003c00
 800a974:	40023800 	.word	0x40023800
 800a978:	40020800 	.word	0x40020800

0800a97c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a40      	ldr	r2, [pc, #256]	; (800aa8c <HAL_TIM_Base_MspInit+0x110>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d116      	bne.n	800a9bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	4b3f      	ldr	r3, [pc, #252]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a996:	4a3e      	ldr	r2, [pc, #248]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a998:	f043 0301 	orr.w	r3, r3, #1
 800a99c:	6453      	str	r3, [r2, #68]	; 0x44
 800a99e:	4b3c      	ldr	r3, [pc, #240]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	2019      	movs	r0, #25
 800a9b0:	f001 fc23 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a9b4:	2019      	movs	r0, #25
 800a9b6:	f001 fc3c 	bl	800c232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a9ba:	e062      	b.n	800aa82 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c4:	d116      	bne.n	800a9f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	613b      	str	r3, [r7, #16]
 800a9ca:	4b31      	ldr	r3, [pc, #196]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	4a30      	ldr	r2, [pc, #192]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a9d0:	f043 0301 	orr.w	r3, r3, #1
 800a9d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a9d6:	4b2e      	ldr	r3, [pc, #184]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	613b      	str	r3, [r7, #16]
 800a9e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	201c      	movs	r0, #28
 800a9e8:	f001 fc07 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a9ec:	201c      	movs	r0, #28
 800a9ee:	f001 fc20 	bl	800c232 <HAL_NVIC_EnableIRQ>
}
 800a9f2:	e046      	b.n	800aa82 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a26      	ldr	r2, [pc, #152]	; (800aa94 <HAL_TIM_Base_MspInit+0x118>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d116      	bne.n	800aa2c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	4b23      	ldr	r3, [pc, #140]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	4a22      	ldr	r2, [pc, #136]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa08:	f043 0308 	orr.w	r3, r3, #8
 800aa0c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa0e:	4b20      	ldr	r3, [pc, #128]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	2032      	movs	r0, #50	; 0x32
 800aa20:	f001 fbeb 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800aa24:	2032      	movs	r0, #50	; 0x32
 800aa26:	f001 fc04 	bl	800c232 <HAL_NVIC_EnableIRQ>
}
 800aa2a:	e02a      	b.n	800aa82 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a19      	ldr	r2, [pc, #100]	; (800aa98 <HAL_TIM_Base_MspInit+0x11c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d125      	bne.n	800aa82 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800aa36:	2300      	movs	r3, #0
 800aa38:	60bb      	str	r3, [r7, #8]
 800aa3a:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3e:	4a14      	ldr	r2, [pc, #80]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa40:	f043 0302 	orr.w	r3, r3, #2
 800aa44:	6453      	str	r3, [r2, #68]	; 0x44
 800aa46:	4b12      	ldr	r3, [pc, #72]	; (800aa90 <HAL_TIM_Base_MspInit+0x114>)
 800aa48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	60bb      	str	r3, [r7, #8]
 800aa50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800aa52:	2200      	movs	r2, #0
 800aa54:	2102      	movs	r1, #2
 800aa56:	202c      	movs	r0, #44	; 0x2c
 800aa58:	f001 fbcf 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800aa5c:	202c      	movs	r0, #44	; 0x2c
 800aa5e:	f001 fbe8 	bl	800c232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	202d      	movs	r0, #45	; 0x2d
 800aa68:	f001 fbc7 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800aa6c:	202d      	movs	r0, #45	; 0x2d
 800aa6e:	f001 fbe0 	bl	800c232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	202e      	movs	r0, #46	; 0x2e
 800aa78:	f001 fbbf 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800aa7c:	202e      	movs	r0, #46	; 0x2e
 800aa7e:	f001 fbd8 	bl	800c232 <HAL_NVIC_EnableIRQ>
}
 800aa82:	bf00      	nop
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40023800 	.word	0x40023800
 800aa94:	40000c00 	.word	0x40000c00
 800aa98:	40010400 	.word	0x40010400

0800aa9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b08c      	sub	sp, #48	; 0x30
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaa4:	f107 031c 	add.w	r3, r7, #28
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	605a      	str	r2, [r3, #4]
 800aaae:	609a      	str	r2, [r3, #8]
 800aab0:	60da      	str	r2, [r3, #12]
 800aab2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a3a      	ldr	r2, [pc, #232]	; (800aba4 <HAL_TIM_Encoder_MspInit+0x108>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d134      	bne.n	800ab28 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aabe:	2300      	movs	r3, #0
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	4b39      	ldr	r3, [pc, #228]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	4a38      	ldr	r2, [pc, #224]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aac8:	f043 0302 	orr.w	r3, r3, #2
 800aacc:	6413      	str	r3, [r2, #64]	; 0x40
 800aace:	4b36      	ldr	r3, [pc, #216]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	61bb      	str	r3, [r7, #24]
 800aad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae2:	4a31      	ldr	r2, [pc, #196]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aae4:	f043 0301 	orr.w	r3, r3, #1
 800aae8:	6313      	str	r3, [r2, #48]	; 0x30
 800aaea:	4b2f      	ldr	r3, [pc, #188]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800aaec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aaf6:	23c0      	movs	r3, #192	; 0xc0
 800aaf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aafa:	2302      	movs	r3, #2
 800aafc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab02:	2300      	movs	r3, #0
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ab06:	2302      	movs	r3, #2
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab0a:	f107 031c 	add.w	r3, r7, #28
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4826      	ldr	r0, [pc, #152]	; (800abac <HAL_TIM_Encoder_MspInit+0x110>)
 800ab12:	f002 f91f 	bl	800cd54 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	201d      	movs	r0, #29
 800ab1c:	f001 fb6d 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ab20:	201d      	movs	r0, #29
 800ab22:	f001 fb86 	bl	800c232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ab26:	e038      	b.n	800ab9a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a20      	ldr	r2, [pc, #128]	; (800abb0 <HAL_TIM_Encoder_MspInit+0x114>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d133      	bne.n	800ab9a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ab32:	2300      	movs	r3, #0
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	4a1b      	ldr	r2, [pc, #108]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab3c:	f043 0304 	orr.w	r3, r3, #4
 800ab40:	6413      	str	r3, [r2, #64]	; 0x40
 800ab42:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab56:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	f003 0302 	and.w	r3, r3, #2
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ab6a:	23c0      	movs	r3, #192	; 0xc0
 800ab6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab6e:	2302      	movs	r3, #2
 800ab70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab72:	2300      	movs	r3, #0
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab76:	2300      	movs	r3, #0
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab7e:	f107 031c 	add.w	r3, r7, #28
 800ab82:	4619      	mov	r1, r3
 800ab84:	480b      	ldr	r0, [pc, #44]	; (800abb4 <HAL_TIM_Encoder_MspInit+0x118>)
 800ab86:	f002 f8e5 	bl	800cd54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	201e      	movs	r0, #30
 800ab90:	f001 fb33 	bl	800c1fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ab94:	201e      	movs	r0, #30
 800ab96:	f001 fb4c 	bl	800c232 <HAL_NVIC_EnableIRQ>
}
 800ab9a:	bf00      	nop
 800ab9c:	3730      	adds	r7, #48	; 0x30
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	40000400 	.word	0x40000400
 800aba8:	40023800 	.word	0x40023800
 800abac:	40020000 	.word	0x40020000
 800abb0:	40000800 	.word	0x40000800
 800abb4:	40020400 	.word	0x40020400

0800abb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08c      	sub	sp, #48	; 0x30
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abc0:	f107 031c 	add.w	r3, r7, #28
 800abc4:	2200      	movs	r2, #0
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	605a      	str	r2, [r3, #4]
 800abca:	609a      	str	r2, [r3, #8]
 800abcc:	60da      	str	r2, [r3, #12]
 800abce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd8:	d11e      	bne.n	800ac18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abda:	2300      	movs	r3, #0
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	4b43      	ldr	r3, [pc, #268]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	4a42      	ldr	r2, [pc, #264]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	6313      	str	r3, [r2, #48]	; 0x30
 800abea:	4b40      	ldr	r3, [pc, #256]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800abf6:	2308      	movs	r3, #8
 800abf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abfa:	2302      	movs	r3, #2
 800abfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac02:	2303      	movs	r3, #3
 800ac04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ac06:	2301      	movs	r3, #1
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac0a:	f107 031c 	add.w	r3, r7, #28
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4837      	ldr	r0, [pc, #220]	; (800acf0 <HAL_TIM_MspPostInit+0x138>)
 800ac12:	f002 f89f 	bl	800cd54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ac16:	e064      	b.n	800ace2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a35      	ldr	r2, [pc, #212]	; (800acf4 <HAL_TIM_MspPostInit+0x13c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d11e      	bne.n	800ac60 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	4b31      	ldr	r3, [pc, #196]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	4a30      	ldr	r2, [pc, #192]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	6313      	str	r3, [r2, #48]	; 0x30
 800ac32:	4b2e      	ldr	r3, [pc, #184]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac42:	2302      	movs	r3, #2
 800ac44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac52:	f107 031c 	add.w	r3, r7, #28
 800ac56:	4619      	mov	r1, r3
 800ac58:	4825      	ldr	r0, [pc, #148]	; (800acf0 <HAL_TIM_MspPostInit+0x138>)
 800ac5a:	f002 f87b 	bl	800cd54 <HAL_GPIO_Init>
}
 800ac5e:	e040      	b.n	800ace2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a24      	ldr	r2, [pc, #144]	; (800acf8 <HAL_TIM_MspPostInit+0x140>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d13b      	bne.n	800ace2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	4a1e      	ldr	r2, [pc, #120]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac74:	f043 0301 	orr.w	r3, r3, #1
 800ac78:	6313      	str	r3, [r2, #48]	; 0x30
 800ac7a:	4b1c      	ldr	r3, [pc, #112]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	613b      	str	r3, [r7, #16]
 800ac84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	4b18      	ldr	r3, [pc, #96]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	4a17      	ldr	r2, [pc, #92]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac90:	f043 0304 	orr.w	r3, r3, #4
 800ac94:	6313      	str	r3, [r2, #48]	; 0x30
 800ac96:	4b15      	ldr	r3, [pc, #84]	; (800acec <HAL_TIM_MspPostInit+0x134>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800aca2:	2320      	movs	r3, #32
 800aca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca6:	2302      	movs	r3, #2
 800aca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acae:	2300      	movs	r3, #0
 800acb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800acb2:	2303      	movs	r3, #3
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acb6:	f107 031c 	add.w	r3, r7, #28
 800acba:	4619      	mov	r1, r3
 800acbc:	480c      	ldr	r0, [pc, #48]	; (800acf0 <HAL_TIM_MspPostInit+0x138>)
 800acbe:	f002 f849 	bl	800cd54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800acc2:	2340      	movs	r3, #64	; 0x40
 800acc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acc6:	2302      	movs	r3, #2
 800acc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acca:	2300      	movs	r3, #0
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acce:	2300      	movs	r3, #0
 800acd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800acd2:	2303      	movs	r3, #3
 800acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acd6:	f107 031c 	add.w	r3, r7, #28
 800acda:	4619      	mov	r1, r3
 800acdc:	4807      	ldr	r0, [pc, #28]	; (800acfc <HAL_TIM_MspPostInit+0x144>)
 800acde:	f002 f839 	bl	800cd54 <HAL_GPIO_Init>
}
 800ace2:	bf00      	nop
 800ace4:	3730      	adds	r7, #48	; 0x30
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	40023800 	.word	0x40023800
 800acf0:	40020000 	.word	0x40020000
 800acf4:	40000c00 	.word	0x40000c00
 800acf8:	40010400 	.word	0x40010400
 800acfc:	40020800 	.word	0x40020800

0800ad00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	; 0x28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad08:	f107 0314 	add.w	r3, r7, #20
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	605a      	str	r2, [r3, #4]
 800ad12:	609a      	str	r2, [r3, #8]
 800ad14:	60da      	str	r2, [r3, #12]
 800ad16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a19      	ldr	r2, [pc, #100]	; (800ad84 <HAL_UART_MspInit+0x84>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d12c      	bne.n	800ad7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad22:	2300      	movs	r3, #0
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	4b18      	ldr	r3, [pc, #96]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad2c:	f043 0310 	orr.w	r3, r3, #16
 800ad30:	6453      	str	r3, [r2, #68]	; 0x44
 800ad32:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	f003 0310 	and.w	r3, r3, #16
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	4a10      	ldr	r2, [pc, #64]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4e:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <HAL_UART_MspInit+0x88>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ad5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ad5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad60:	2302      	movs	r3, #2
 800ad62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ad6c:	2307      	movs	r3, #7
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	4619      	mov	r1, r3
 800ad76:	4805      	ldr	r0, [pc, #20]	; (800ad8c <HAL_UART_MspInit+0x8c>)
 800ad78:	f001 ffec 	bl	800cd54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ad7c:	bf00      	nop
 800ad7e:	3728      	adds	r7, #40	; 0x28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	40011000 	.word	0x40011000
 800ad88:	40023800 	.word	0x40023800
 800ad8c:	40020000 	.word	0x40020000

0800ad90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ad94:	e7fe      	b.n	800ad94 <NMI_Handler+0x4>

0800ad96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad96:	b480      	push	{r7}
 800ad98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad9a:	e7fe      	b.n	800ad9a <HardFault_Handler+0x4>

0800ad9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ada0:	e7fe      	b.n	800ada0 <MemManage_Handler+0x4>

0800ada2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ada2:	b480      	push	{r7}
 800ada4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ada6:	e7fe      	b.n	800ada6 <BusFault_Handler+0x4>

0800ada8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800adac:	e7fe      	b.n	800adac <UsageFault_Handler+0x4>

0800adae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800adae:	b480      	push	{r7}
 800adb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800adb2:	bf00      	nop
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800adca:	b480      	push	{r7}
 800adcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800adce:	bf00      	nop
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800addc:	f000 fb5e 	bl	800b49c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ade0:	bf00      	nop
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800ade8:	f001 fe1c 	bl	800ca24 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800adec:	bf00      	nop
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800adf4:	4803      	ldr	r0, [pc, #12]	; (800ae04 <ADC_IRQHandler+0x14>)
 800adf6:	f000 fbd6 	bl	800b5a6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800adfa:	4803      	ldr	r0, [pc, #12]	; (800ae08 <ADC_IRQHandler+0x18>)
 800adfc:	f000 fbd3 	bl	800b5a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ae00:	bf00      	nop
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	200005c0 	.word	0x200005c0
 800ae08:	200004a0 	.word	0x200004a0

0800ae0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ae10:	4802      	ldr	r0, [pc, #8]	; (800ae1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ae12:	f003 f96b 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ae16:	bf00      	nop
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200006a8 	.word	0x200006a8

0800ae20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ae24:	4802      	ldr	r0, [pc, #8]	; (800ae30 <TIM2_IRQHandler+0x10>)
 800ae26:	f003 f961 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ae2a:	bf00      	nop
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200006e8 	.word	0x200006e8

0800ae34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ae38:	4802      	ldr	r0, [pc, #8]	; (800ae44 <TIM3_IRQHandler+0x10>)
 800ae3a:	f003 f957 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ae3e:	bf00      	nop
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000528 	.word	0x20000528

0800ae48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800ae4c:	4802      	ldr	r0, [pc, #8]	; (800ae58 <TIM4_IRQHandler+0x10>)
 800ae4e:	f003 f94d 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800ae52:	bf00      	nop
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000460 	.word	0x20000460

0800ae5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ae60:	4802      	ldr	r0, [pc, #8]	; (800ae6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800ae62:	f003 f943 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800ae66:	bf00      	nop
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000420 	.word	0x20000420

0800ae70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ae74:	4802      	ldr	r0, [pc, #8]	; (800ae80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ae76:	f003 f939 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ae7a:	bf00      	nop
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000420 	.word	0x20000420

0800ae84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ae88:	4802      	ldr	r0, [pc, #8]	; (800ae94 <TIM8_CC_IRQHandler+0x10>)
 800ae8a:	f003 f92f 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20000420 	.word	0x20000420

0800ae98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800ae9c:	4802      	ldr	r0, [pc, #8]	; (800aea8 <TIM5_IRQHandler+0x10>)
 800ae9e:	f003 f925 	bl	800e0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	200004e8 	.word	0x200004e8

0800aeac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800aeb0:	4802      	ldr	r0, [pc, #8]	; (800aebc <DMA2_Stream0_IRQHandler+0x10>)
 800aeb2:	f001 fb4f 	bl	800c554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800aeb6:	bf00      	nop
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20000648 	.word	0x20000648

0800aec0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800aec4:	4802      	ldr	r0, [pc, #8]	; (800aed0 <DMA2_Stream2_IRQHandler+0x10>)
 800aec6:	f001 fb45 	bl	800c554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20000728 	.word	0x20000728

0800aed4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e00a      	b.n	800aefc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aee6:	f3af 8000 	nop.w
 800aeea:	4601      	mov	r1, r0
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	60ba      	str	r2, [r7, #8]
 800aef2:	b2ca      	uxtb	r2, r1
 800aef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	3301      	adds	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	dbf0      	blt.n	800aee6 <_read+0x12>
	}

return len;
 800af04:	687b      	ldr	r3, [r7, #4]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e009      	b.n	800af34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	60ba      	str	r2, [r7, #8]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe fe17 	bl	8009b5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	3301      	adds	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	429a      	cmp	r2, r3
 800af3a:	dbf1      	blt.n	800af20 <_write+0x12>
	}
	return len;
 800af3c:	687b      	ldr	r3, [r7, #4]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <_close>:

int _close(int file)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
	return -1;
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800af6e:	605a      	str	r2, [r3, #4]
	return 0;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <_isatty>:

int _isatty(int file)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
	return 1;
 800af86:	2301      	movs	r3, #1
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
	return 0;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
	...

0800afb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800afb8:	4a14      	ldr	r2, [pc, #80]	; (800b00c <_sbrk+0x5c>)
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <_sbrk+0x60>)
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800afc4:	4b13      	ldr	r3, [pc, #76]	; (800b014 <_sbrk+0x64>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <_sbrk+0x64>)
 800afce:	4a12      	ldr	r2, [pc, #72]	; (800b018 <_sbrk+0x68>)
 800afd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <_sbrk+0x64>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4413      	add	r3, r2
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d207      	bcs.n	800aff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800afe0:	f004 fd6a 	bl	800fab8 <__errno>
 800afe4:	4602      	mov	r2, r0
 800afe6:	230c      	movs	r3, #12
 800afe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	e009      	b.n	800b004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aff0:	4b08      	ldr	r3, [pc, #32]	; (800b014 <_sbrk+0x64>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aff6:	4b07      	ldr	r3, [pc, #28]	; (800b014 <_sbrk+0x64>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	4a05      	ldr	r2, [pc, #20]	; (800b014 <_sbrk+0x64>)
 800b000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b002:	68fb      	ldr	r3, [r7, #12]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20020000 	.word	0x20020000
 800b010:	00000400 	.word	0x00000400
 800b014:	20000400 	.word	0x20000400
 800b018:	200007b8 	.word	0x200007b8

0800b01c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b020:	4b08      	ldr	r3, [pc, #32]	; (800b044 <SystemInit+0x28>)
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b026:	4a07      	ldr	r2, [pc, #28]	; (800b044 <SystemInit+0x28>)
 800b028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b02c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b030:	4b04      	ldr	r3, [pc, #16]	; (800b044 <SystemInit+0x28>)
 800b032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b036:	609a      	str	r2, [r3, #8]
#endif
}
 800b038:	bf00      	nop
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	e000ed00 	.word	0xe000ed00

0800b048 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800b04c:	2203      	movs	r2, #3
 800b04e:	490a      	ldr	r1, [pc, #40]	; (800b078 <ADCStart+0x30>)
 800b050:	480a      	ldr	r0, [pc, #40]	; (800b07c <ADCStart+0x34>)
 800b052:	f000 fbe9 	bl	800b828 <HAL_ADC_Start_DMA>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <ADCStart+0x18>
	{
		Error_Handler();
 800b05c:	f7ff fb0c 	bl	800a678 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800b060:	2202      	movs	r2, #2
 800b062:	4907      	ldr	r1, [pc, #28]	; (800b080 <ADCStart+0x38>)
 800b064:	4807      	ldr	r0, [pc, #28]	; (800b084 <ADCStart+0x3c>)
 800b066:	f000 fbdf 	bl	800b828 <HAL_ADC_Start_DMA>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <ADCStart+0x2c>
	{
		Error_Handler();
 800b070:	f7ff fb02 	bl	800a678 <Error_Handler>
	}

}
 800b074:	bf00      	nop
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20000404 	.word	0x20000404
 800b07c:	200005c0 	.word	0x200005c0
 800b080:	20000410 	.word	0x20000410
 800b084:	200004a0 	.word	0x200004a0

0800b088 <ADCStop>:
void ADCStop()
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800b08c:	4808      	ldr	r0, [pc, #32]	; (800b0b0 <ADCStop+0x28>)
 800b08e:	f000 fcbd 	bl	800ba0c <HAL_ADC_Stop_DMA>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <ADCStop+0x14>
	{
		Error_Handler();
 800b098:	f7ff faee 	bl	800a678 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <ADCStop+0x2c>)
 800b09e:	f000 fcb5 	bl	800ba0c <HAL_ADC_Stop_DMA>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <ADCStop+0x24>
	{
		Error_Handler();
 800b0a8:	f7ff fae6 	bl	800a678 <Error_Handler>
	}
}
 800b0ac:	bf00      	nop
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200005c0 	.word	0x200005c0
 800b0b4:	200004a0 	.word	0x200004a0

0800b0b8 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800b0bc:	213c      	movs	r1, #60	; 0x3c
 800b0be:	4804      	ldr	r0, [pc, #16]	; (800b0d0 <EncoderStart+0x18>)
 800b0c0:	f002 ff96 	bl	800dff0 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800b0c4:	213c      	movs	r1, #60	; 0x3c
 800b0c6:	4803      	ldr	r0, [pc, #12]	; (800b0d4 <EncoderStart+0x1c>)
 800b0c8:	f002 ff92 	bl	800dff0 <HAL_TIM_Encoder_Start>
}
 800b0cc:	bf00      	nop
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20000528 	.word	0x20000528
 800b0d4:	20000460 	.word	0x20000460

0800b0d8 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800b0dc:	213c      	movs	r1, #60	; 0x3c
 800b0de:	4804      	ldr	r0, [pc, #16]	; (800b0f0 <EncoderStop+0x18>)
 800b0e0:	f002 ffbd 	bl	800e05e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800b0e4:	213c      	movs	r1, #60	; 0x3c
 800b0e6:	4803      	ldr	r0, [pc, #12]	; (800b0f4 <EncoderStop+0x1c>)
 800b0e8:	f002 ffb9 	bl	800e05e <HAL_TIM_Encoder_Stop>
}
 800b0ec:	bf00      	nop
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000528 	.word	0x20000528
 800b0f4:	20000460 	.word	0x20000460

0800b0f8 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4804      	ldr	r0, [pc, #16]	; (800b110 <EmitterON+0x18>)
 800b100:	f002 fd52 	bl	800dba8 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b104:	2100      	movs	r1, #0
 800b106:	4802      	ldr	r0, [pc, #8]	; (800b110 <EmitterON+0x18>)
 800b108:	f003 fe0d 	bl	800ed26 <HAL_TIMEx_OCN_Start_IT>

}
 800b10c:	bf00      	nop
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	20000420 	.word	0x20000420

0800b114 <EmitterOFF>:
void EmitterOFF()
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800b118:	2100      	movs	r1, #0
 800b11a:	4804      	ldr	r0, [pc, #16]	; (800b12c <EmitterOFF+0x18>)
 800b11c:	f002 fdc8 	bl	800dcb0 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b120:	2100      	movs	r1, #0
 800b122:	4802      	ldr	r0, [pc, #8]	; (800b12c <EmitterOFF+0x18>)
 800b124:	f003 fe54 	bl	800edd0 <HAL_TIMEx_OCN_Stop_IT>

}
 800b128:	bf00      	nop
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000420 	.word	0x20000420

0800b130 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b07      	cmp	r3, #7
 800b13c:	f200 80ac 	bhi.w	800b298 <ChangeLED+0x168>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <ChangeLED+0x18>)
 800b142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b169 	.word	0x0800b169
 800b14c:	0800b18f 	.word	0x0800b18f
 800b150:	0800b1b5 	.word	0x0800b1b5
 800b154:	0800b1db 	.word	0x0800b1db
 800b158:	0800b201 	.word	0x0800b201
 800b15c:	0800b227 	.word	0x0800b227
 800b160:	0800b24d 	.word	0x0800b24d
 800b164:	0800b273 	.word	0x0800b273
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b168:	2200      	movs	r2, #0
 800b16a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b16e:	484d      	ldr	r0, [pc, #308]	; (800b2a4 <ChangeLED+0x174>)
 800b170:	f001 ff8a 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b174:	2200      	movs	r2, #0
 800b176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b17a:	484a      	ldr	r0, [pc, #296]	; (800b2a4 <ChangeLED+0x174>)
 800b17c:	f001 ff84 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b180:	2200      	movs	r2, #0
 800b182:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b186:	4848      	ldr	r0, [pc, #288]	; (800b2a8 <ChangeLED+0x178>)
 800b188:	f001 ff7e 	bl	800d088 <HAL_GPIO_WritePin>
		break;
 800b18c:	e085      	b.n	800b29a <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b18e:	2201      	movs	r2, #1
 800b190:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b194:	4843      	ldr	r0, [pc, #268]	; (800b2a4 <ChangeLED+0x174>)
 800b196:	f001 ff77 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b19a:	2200      	movs	r2, #0
 800b19c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1a0:	4840      	ldr	r0, [pc, #256]	; (800b2a4 <ChangeLED+0x174>)
 800b1a2:	f001 ff71 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1ac:	483e      	ldr	r0, [pc, #248]	; (800b2a8 <ChangeLED+0x178>)
 800b1ae:	f001 ff6b 	bl	800d088 <HAL_GPIO_WritePin>
		break;
 800b1b2:	e072      	b.n	800b29a <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1ba:	483a      	ldr	r0, [pc, #232]	; (800b2a4 <ChangeLED+0x174>)
 800b1bc:	f001 ff64 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1c6:	4837      	ldr	r0, [pc, #220]	; (800b2a4 <ChangeLED+0x174>)
 800b1c8:	f001 ff5e 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1d2:	4835      	ldr	r0, [pc, #212]	; (800b2a8 <ChangeLED+0x178>)
 800b1d4:	f001 ff58 	bl	800d088 <HAL_GPIO_WritePin>

		break;
 800b1d8:	e05f      	b.n	800b29a <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1e0:	4830      	ldr	r0, [pc, #192]	; (800b2a4 <ChangeLED+0x174>)
 800b1e2:	f001 ff51 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1ec:	482d      	ldr	r0, [pc, #180]	; (800b2a4 <ChangeLED+0x174>)
 800b1ee:	f001 ff4b 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1f8:	482b      	ldr	r0, [pc, #172]	; (800b2a8 <ChangeLED+0x178>)
 800b1fa:	f001 ff45 	bl	800d088 <HAL_GPIO_WritePin>
		break;
 800b1fe:	e04c      	b.n	800b29a <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b200:	2200      	movs	r2, #0
 800b202:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b206:	4827      	ldr	r0, [pc, #156]	; (800b2a4 <ChangeLED+0x174>)
 800b208:	f001 ff3e 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b20c:	2200      	movs	r2, #0
 800b20e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b212:	4824      	ldr	r0, [pc, #144]	; (800b2a4 <ChangeLED+0x174>)
 800b214:	f001 ff38 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b218:	2201      	movs	r2, #1
 800b21a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b21e:	4822      	ldr	r0, [pc, #136]	; (800b2a8 <ChangeLED+0x178>)
 800b220:	f001 ff32 	bl	800d088 <HAL_GPIO_WritePin>
		break;
 800b224:	e039      	b.n	800b29a <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b226:	2201      	movs	r2, #1
 800b228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b22c:	481d      	ldr	r0, [pc, #116]	; (800b2a4 <ChangeLED+0x174>)
 800b22e:	f001 ff2b 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b232:	2200      	movs	r2, #0
 800b234:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b238:	481a      	ldr	r0, [pc, #104]	; (800b2a4 <ChangeLED+0x174>)
 800b23a:	f001 ff25 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b23e:	2201      	movs	r2, #1
 800b240:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b244:	4818      	ldr	r0, [pc, #96]	; (800b2a8 <ChangeLED+0x178>)
 800b246:	f001 ff1f 	bl	800d088 <HAL_GPIO_WritePin>
		break;
 800b24a:	e026      	b.n	800b29a <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b24c:	2200      	movs	r2, #0
 800b24e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b252:	4814      	ldr	r0, [pc, #80]	; (800b2a4 <ChangeLED+0x174>)
 800b254:	f001 ff18 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b258:	2201      	movs	r2, #1
 800b25a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b25e:	4811      	ldr	r0, [pc, #68]	; (800b2a4 <ChangeLED+0x174>)
 800b260:	f001 ff12 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b264:	2201      	movs	r2, #1
 800b266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b26a:	480f      	ldr	r0, [pc, #60]	; (800b2a8 <ChangeLED+0x178>)
 800b26c:	f001 ff0c 	bl	800d088 <HAL_GPIO_WritePin>

		break;
 800b270:	e013      	b.n	800b29a <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b272:	2201      	movs	r2, #1
 800b274:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b278:	480a      	ldr	r0, [pc, #40]	; (800b2a4 <ChangeLED+0x174>)
 800b27a:	f001 ff05 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b27e:	2201      	movs	r2, #1
 800b280:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b284:	4807      	ldr	r0, [pc, #28]	; (800b2a4 <ChangeLED+0x174>)
 800b286:	f001 feff 	bl	800d088 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b28a:	2201      	movs	r2, #1
 800b28c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b290:	4805      	ldr	r0, [pc, #20]	; (800b2a8 <ChangeLED+0x178>)
 800b292:	f001 fef9 	bl	800d088 <HAL_GPIO_WritePin>

		break;
 800b296:	e000      	b.n	800b29a <ChangeLED+0x16a>
	default: break;
 800b298:	bf00      	nop

	}
}
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	40020800 	.word	0x40020800
 800b2a8:	40020400 	.word	0x40020400

0800b2ac <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800b2b0:	210c      	movs	r1, #12
 800b2b2:	4809      	ldr	r0, [pc, #36]	; (800b2d8 <Motor_PWM_Start+0x2c>)
 800b2b4:	f002 fdcc 	bl	800de50 <HAL_TIM_PWM_Start>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800b2be:	f7ff f9db 	bl	800a678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800b2c2:	2104      	movs	r1, #4
 800b2c4:	4805      	ldr	r0, [pc, #20]	; (800b2dc <Motor_PWM_Start+0x30>)
 800b2c6:	f002 fdc3 	bl	800de50 <HAL_TIM_PWM_Start>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800b2d0:	f7ff f9d2 	bl	800a678 <Error_Handler>
  }
#endif
}
 800b2d4:	bf00      	nop
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	200006e8 	.word	0x200006e8
 800b2dc:	200004e8 	.word	0x200004e8

0800b2e0 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd05      	ble.n	800b2fc <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	2104      	movs	r1, #4
 800b2f4:	4828      	ldr	r0, [pc, #160]	; (800b398 <Motor_Switch+0xb8>)
 800b2f6:	f001 fec7 	bl	800d088 <HAL_GPIO_WritePin>
 800b2fa:	e00a      	b.n	800b312 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da07      	bge.n	800b312 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800b302:	2200      	movs	r2, #0
 800b304:	2104      	movs	r1, #4
 800b306:	4824      	ldr	r0, [pc, #144]	; (800b398 <Motor_Switch+0xb8>)
 800b308:	f001 febe 	bl	800d088 <HAL_GPIO_WritePin>
		left = -left;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	425b      	negs	r3, r3
 800b310:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd05      	ble.n	800b324 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800b318:	2200      	movs	r2, #0
 800b31a:	2101      	movs	r1, #1
 800b31c:	481e      	ldr	r0, [pc, #120]	; (800b398 <Motor_Switch+0xb8>)
 800b31e:	f001 feb3 	bl	800d088 <HAL_GPIO_WritePin>
 800b322:	e00a      	b.n	800b33a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	da07      	bge.n	800b33a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800b32a:	2201      	movs	r2, #1
 800b32c:	2101      	movs	r1, #1
 800b32e:	481a      	ldr	r0, [pc, #104]	; (800b398 <Motor_Switch+0xb8>)
 800b330:	f001 feaa 	bl	800d088 <HAL_GPIO_WritePin>
	  	right = -right;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	425b      	negs	r3, r3
 800b338:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fd f82a 	bl	8008394 <__aeabi_i2d>
 800b340:	a313      	add	r3, pc, #76	; (adr r3, 800b390 <Motor_Switch+0xb0>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f7fd fb1f 	bl	8008988 <__aeabi_dcmpgt>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <Motor_Switch+0x76>
 800b350:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b354:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800b356:	6838      	ldr	r0, [r7, #0]
 800b358:	f7fd f81c 	bl	8008394 <__aeabi_i2d>
 800b35c:	a30c      	add	r3, pc, #48	; (adr r3, 800b390 <Motor_Switch+0xb0>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7fd fb11 	bl	8008988 <__aeabi_dcmpgt>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <Motor_Switch+0x92>
 800b36c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800b370:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <Motor_Switch+0xbc>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800b37a:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <Motor_Switch+0xc0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w
 800b390:	00000000 	.word	0x00000000
 800b394:	40a3b000 	.word	0x40a3b000
 800b398:	40020000 	.word	0x40020000
 800b39c:	200006e8 	.word	0x200006e8
 800b3a0:	200004e8 	.word	0x200004e8

0800b3a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b3a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3aa:	e003      	b.n	800b3b4 <LoopCopyDataInit>

0800b3ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3ac:	4b0c      	ldr	r3, [pc, #48]	; (800b3e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3b2:	3104      	adds	r1, #4

0800b3b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3b4:	480b      	ldr	r0, [pc, #44]	; (800b3e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3bc:	d3f6      	bcc.n	800b3ac <CopyDataInit>
  ldr  r2, =_sbss
 800b3be:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b3c0:	e002      	b.n	800b3c8 <LoopFillZerobss>

0800b3c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b3c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b3c4:	f842 3b04 	str.w	r3, [r2], #4

0800b3c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3c8:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b3ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b3cc:	d3f9      	bcc.n	800b3c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b3ce:	f7ff fe25 	bl	800b01c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3d2:	f004 fb77 	bl	800fac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3d6:	f7fe fbd3 	bl	8009b80 <main>
  bx  lr    
 800b3da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b3dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b3e0:	08012570 	.word	0x08012570
  ldr  r0, =_sdata
 800b3e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b3e8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b3ec:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800b3f0:	200007b4 	.word	0x200007b4

0800b3f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3f4:	e7fe      	b.n	800b3f4 <CAN1_RX0_IRQHandler>
	...

0800b3f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b3fc:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <HAL_Init+0x40>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0d      	ldr	r2, [pc, #52]	; (800b438 <HAL_Init+0x40>)
 800b402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b408:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <HAL_Init+0x40>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a0a      	ldr	r2, [pc, #40]	; (800b438 <HAL_Init+0x40>)
 800b40e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <HAL_Init+0x40>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a07      	ldr	r2, [pc, #28]	; (800b438 <HAL_Init+0x40>)
 800b41a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b41e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b420:	2003      	movs	r0, #3
 800b422:	f000 fedf 	bl	800c1e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b426:	2000      	movs	r0, #0
 800b428:	f000 f808 	bl	800b43c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b42c:	f7ff f928 	bl	800a680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	40023c00 	.word	0x40023c00

0800b43c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b444:	4b12      	ldr	r3, [pc, #72]	; (800b490 <HAL_InitTick+0x54>)
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <HAL_InitTick+0x58>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	4619      	mov	r1, r3
 800b44e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b452:	fbb3 f3f1 	udiv	r3, r3, r1
 800b456:	fbb2 f3f3 	udiv	r3, r2, r3
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fef7 	bl	800c24e <HAL_SYSTICK_Config>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e00e      	b.n	800b488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b0f      	cmp	r3, #15
 800b46e:	d80a      	bhi.n	800b486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b470:	2200      	movs	r2, #0
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	f04f 30ff 	mov.w	r0, #4294967295
 800b478:	f000 febf 	bl	800c1fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b47c:	4a06      	ldr	r2, [pc, #24]	; (800b498 <HAL_InitTick+0x5c>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	e000      	b.n	800b488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20000000 	.word	0x20000000
 800b494:	20000008 	.word	0x20000008
 800b498:	20000004 	.word	0x20000004

0800b49c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b4a0:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <HAL_IncTick+0x20>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <HAL_IncTick+0x24>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	4a04      	ldr	r2, [pc, #16]	; (800b4c0 <HAL_IncTick+0x24>)
 800b4ae:	6013      	str	r3, [r2, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	20000008 	.word	0x20000008
 800b4c0:	2000078c 	.word	0x2000078c

0800b4c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
  return uwTick;
 800b4c8:	4b03      	ldr	r3, [pc, #12]	; (800b4d8 <HAL_GetTick+0x14>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	2000078c 	.word	0x2000078c

0800b4dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4e4:	f7ff ffee 	bl	800b4c4 <HAL_GetTick>
 800b4e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f4:	d005      	beq.n	800b502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4f6:	4b09      	ldr	r3, [pc, #36]	; (800b51c <HAL_Delay+0x40>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b502:	bf00      	nop
 800b504:	f7ff ffde 	bl	800b4c4 <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	429a      	cmp	r2, r3
 800b512:	d8f7      	bhi.n	800b504 <HAL_Delay+0x28>
  {
  }
}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	20000008 	.word	0x20000008

0800b520 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e033      	b.n	800b59e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff f8cc 	bl	800a6dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	f003 0310 	and.w	r3, r3, #16
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d118      	bne.n	800b590 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b562:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b566:	f023 0302 	bic.w	r3, r3, #2
 800b56a:	f043 0202 	orr.w	r2, r3, #2
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fbde 	bl	800bd34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	f043 0201 	orr.w	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	641a      	str	r2, [r3, #64]	; 0x40
 800b58e:	e001      	b.n	800b594 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0302 	and.w	r3, r3, #2
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2301      	moveq	r3, #1
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	bf0c      	ite	eq
 800b5da:	2301      	moveq	r3, #1
 800b5dc:	2300      	movne	r3, #0
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d049      	beq.n	800b67c <HAL_ADC_IRQHandler+0xd6>
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d046      	beq.n	800b67c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f003 0310 	and.w	r3, r3, #16
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d12b      	bne.n	800b66c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d127      	bne.n	800b66c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b634:	2b00      	cmp	r3, #0
 800b636:	d119      	bne.n	800b66c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f022 0220 	bic.w	r2, r2, #32
 800b646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d105      	bne.n	800b66c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b664:	f043 0201 	orr.w	r2, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fa17 	bl	800baa0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f06f 0212 	mvn.w	r2, #18
 800b67a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b04      	cmp	r3, #4
 800b688:	bf0c      	ite	eq
 800b68a:	2301      	moveq	r3, #1
 800b68c:	2300      	movne	r3, #0
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69c:	2b80      	cmp	r3, #128	; 0x80
 800b69e:	bf0c      	ite	eq
 800b6a0:	2301      	moveq	r3, #1
 800b6a2:	2300      	movne	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d057      	beq.n	800b75e <HAL_ADC_IRQHandler+0x1b8>
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d054      	beq.n	800b75e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	f003 0310 	and.w	r3, r3, #16
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d105      	bne.n	800b6cc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d139      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d006      	beq.n	800b6f6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d12b      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b700:	2b00      	cmp	r3, #0
 800b702:	d124      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d11d      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b716:	2b00      	cmp	r3, #0
 800b718:	d119      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b728:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d105      	bne.n	800b74e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	f043 0201 	orr.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fc6e 	bl	800c030 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f06f 020c 	mvn.w	r2, #12
 800b75c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0301 	and.w	r3, r3, #1
 800b768:	2b01      	cmp	r3, #1
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	bf0c      	ite	eq
 800b782:	2301      	moveq	r3, #1
 800b784:	2300      	movne	r3, #0
 800b786:	b2db      	uxtb	r3, r3
 800b788:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d017      	beq.n	800b7c0 <HAL_ADC_IRQHandler+0x21a>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d014      	beq.n	800b7c0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d10d      	bne.n	800b7c0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f989 	bl	800bac8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f06f 0201 	mvn.w	r2, #1
 800b7be:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0320 	and.w	r3, r3, #32
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	bf0c      	ite	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	2300      	movne	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2301      	moveq	r3, #1
 800b7e8:	2300      	movne	r3, #0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d015      	beq.n	800b820 <HAL_ADC_IRQHandler+0x27a>
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d012      	beq.n	800b820 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	f043 0202 	orr.w	r2, r3, #2
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f06f 0220 	mvn.w	r2, #32
 800b80e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f963 	bl	800badc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f06f 0220 	mvn.w	r2, #32
 800b81e:	601a      	str	r2, [r3, #0]
  }
}
 800b820:	bf00      	nop
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_ADC_Start_DMA+0x1e>
 800b842:	2302      	movs	r3, #2
 800b844:	e0cc      	b.n	800b9e0 <HAL_ADC_Start_DMA+0x1b8>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d018      	beq.n	800b88e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689a      	ldr	r2, [r3, #8]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f042 0201 	orr.w	r2, r2, #1
 800b86a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b86c:	4b5e      	ldr	r3, [pc, #376]	; (800b9e8 <HAL_ADC_Start_DMA+0x1c0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a5e      	ldr	r2, [pc, #376]	; (800b9ec <HAL_ADC_Start_DMA+0x1c4>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	0c9a      	lsrs	r2, r3, #18
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b880:	e002      	b.n	800b888 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	3b01      	subs	r3, #1
 800b886:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f9      	bne.n	800b882 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b01      	cmp	r3, #1
 800b89a:	f040 80a0 	bne.w	800b9de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b8c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8dc:	d106      	bne.n	800b8ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e2:	f023 0206 	bic.w	r2, r3, #6
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b8ea:	e002      	b.n	800b8f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b8fa:	4b3d      	ldr	r3, [pc, #244]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b8fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	4a3c      	ldr	r2, [pc, #240]	; (800b9f4 <HAL_ADC_Start_DMA+0x1cc>)
 800b904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90a:	4a3b      	ldr	r2, [pc, #236]	; (800b9f8 <HAL_ADC_Start_DMA+0x1d0>)
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	4a3a      	ldr	r2, [pc, #232]	; (800b9fc <HAL_ADC_Start_DMA+0x1d4>)
 800b914:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b91e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b92e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b93e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	334c      	adds	r3, #76	; 0x4c
 800b94a:	4619      	mov	r1, r3
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f000 fd38 	bl	800c3c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d12a      	bne.n	800b9b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a26      	ldr	r2, [pc, #152]	; (800ba00 <HAL_ADC_Start_DMA+0x1d8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d015      	beq.n	800b996 <HAL_ADC_Start_DMA+0x16e>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a25      	ldr	r2, [pc, #148]	; (800ba04 <HAL_ADC_Start_DMA+0x1dc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d105      	bne.n	800b980 <HAL_ADC_Start_DMA+0x158>
 800b974:	4b1e      	ldr	r3, [pc, #120]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f003 031f 	and.w	r3, r3, #31
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a20      	ldr	r2, [pc, #128]	; (800ba08 <HAL_ADC_Start_DMA+0x1e0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d129      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
 800b98a:	4b19      	ldr	r3, [pc, #100]	; (800b9f0 <HAL_ADC_Start_DMA+0x1c8>)
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d823      	bhi.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11c      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	e013      	b.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <HAL_ADC_Start_DMA+0x1d8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d10e      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d107      	bne.n	800b9de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000000 	.word	0x20000000
 800b9ec:	431bde83 	.word	0x431bde83
 800b9f0:	40012300 	.word	0x40012300
 800b9f4:	0800bf2d 	.word	0x0800bf2d
 800b9f8:	0800bfe7 	.word	0x0800bfe7
 800b9fc:	0800c003 	.word	0x0800c003
 800ba00:	40012000 	.word	0x40012000
 800ba04:	40012100 	.word	0x40012100
 800ba08:	40012200 	.word	0x40012200

0800ba0c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d101      	bne.n	800ba26 <HAL_ADC_Stop_DMA+0x1a>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e038      	b.n	800ba98 <HAL_ADC_Stop_DMA+0x8c>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 0201 	bic.w	r2, r2, #1
 800ba3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d120      	bne.n	800ba8e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba5a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba60:	4618      	mov	r0, r3
 800ba62:	f000 fd07 	bl	800c474 <HAL_DMA_Abort>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ba78:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ba82:	f023 0301 	bic.w	r3, r3, #1
 800ba86:	f043 0201 	orr.w	r2, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_ADC_ConfigChannel+0x1c>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e105      	b.n	800bd18 <HAL_ADC_ConfigChannel+0x228>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d925      	bls.n	800bb68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68d9      	ldr	r1, [r3, #12]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	4413      	add	r3, r2
 800bb30:	3b1e      	subs	r3, #30
 800bb32:	2207      	movs	r2, #7
 800bb34:	fa02 f303 	lsl.w	r3, r2, r3
 800bb38:	43da      	mvns	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	400a      	ands	r2, r1
 800bb40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68d9      	ldr	r1, [r3, #12]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	4618      	mov	r0, r3
 800bb54:	4603      	mov	r3, r0
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	4403      	add	r3, r0
 800bb5a:	3b1e      	subs	r3, #30
 800bb5c:	409a      	lsls	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	60da      	str	r2, [r3, #12]
 800bb66:	e022      	b.n	800bbae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6919      	ldr	r1, [r3, #16]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	461a      	mov	r2, r3
 800bb76:	4613      	mov	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4413      	add	r3, r2
 800bb7c:	2207      	movs	r2, #7
 800bb7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb82:	43da      	mvns	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	400a      	ands	r2, r1
 800bb8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6919      	ldr	r1, [r3, #16]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	689a      	ldr	r2, [r3, #8]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	4603      	mov	r3, r0
 800bba0:	005b      	lsls	r3, r3, #1
 800bba2:	4403      	add	r3, r0
 800bba4:	409a      	lsls	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2b06      	cmp	r3, #6
 800bbb4:	d824      	bhi.n	800bc00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3b05      	subs	r3, #5
 800bbc8:	221f      	movs	r2, #31
 800bbca:	fa02 f303 	lsl.w	r3, r2, r3
 800bbce:	43da      	mvns	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	400a      	ands	r2, r1
 800bbd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	3b05      	subs	r3, #5
 800bbf2:	fa00 f203 	lsl.w	r2, r0, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	635a      	str	r2, [r3, #52]	; 0x34
 800bbfe:	e04c      	b.n	800bc9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	2b0c      	cmp	r3, #12
 800bc06:	d824      	bhi.n	800bc52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	3b23      	subs	r3, #35	; 0x23
 800bc1a:	221f      	movs	r2, #31
 800bc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc20:	43da      	mvns	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	400a      	ands	r2, r1
 800bc28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	4618      	mov	r0, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	3b23      	subs	r3, #35	; 0x23
 800bc44:	fa00 f203 	lsl.w	r2, r0, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	631a      	str	r2, [r3, #48]	; 0x30
 800bc50:	e023      	b.n	800bc9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	3b41      	subs	r3, #65	; 0x41
 800bc64:	221f      	movs	r2, #31
 800bc66:	fa02 f303 	lsl.w	r3, r2, r3
 800bc6a:	43da      	mvns	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	400a      	ands	r2, r1
 800bc72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	4618      	mov	r0, r3
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	3b41      	subs	r3, #65	; 0x41
 800bc8e:	fa00 f203 	lsl.w	r2, r0, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bc9a:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <HAL_ADC_ConfigChannel+0x234>)
 800bc9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a21      	ldr	r2, [pc, #132]	; (800bd28 <HAL_ADC_ConfigChannel+0x238>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d109      	bne.n	800bcbc <HAL_ADC_ConfigChannel+0x1cc>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b12      	cmp	r3, #18
 800bcae:	d105      	bne.n	800bcbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a19      	ldr	r2, [pc, #100]	; (800bd28 <HAL_ADC_ConfigChannel+0x238>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d123      	bne.n	800bd0e <HAL_ADC_ConfigChannel+0x21e>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b10      	cmp	r3, #16
 800bccc:	d003      	beq.n	800bcd6 <HAL_ADC_ConfigChannel+0x1e6>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b11      	cmp	r3, #17
 800bcd4:	d11b      	bne.n	800bd0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b10      	cmp	r3, #16
 800bce8:	d111      	bne.n	800bd0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bcea:	4b10      	ldr	r3, [pc, #64]	; (800bd2c <HAL_ADC_ConfigChannel+0x23c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a10      	ldr	r2, [pc, #64]	; (800bd30 <HAL_ADC_ConfigChannel+0x240>)
 800bcf0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf4:	0c9a      	lsrs	r2, r3, #18
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bd00:	e002      	b.n	800bd08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f9      	bne.n	800bd02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	40012300 	.word	0x40012300
 800bd28:	40012000 	.word	0x40012000
 800bd2c:	20000000 	.word	0x20000000
 800bd30:	431bde83 	.word	0x431bde83

0800bd34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bd3c:	4b79      	ldr	r3, [pc, #484]	; (800bf24 <ADC_Init+0x1f0>)
 800bd3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	431a      	orrs	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6859      	ldr	r1, [r3, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	021a      	lsls	r2, r3, #8
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bd8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6859      	ldr	r1, [r3, #4]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6899      	ldr	r1, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	4a58      	ldr	r2, [pc, #352]	; (800bf28 <ADC_Init+0x1f4>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d022      	beq.n	800be12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bdda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6899      	ldr	r1, [r3, #8]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bdfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6899      	ldr	r1, [r3, #8]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	609a      	str	r2, [r3, #8]
 800be10:	e00f      	b.n	800be32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	689a      	ldr	r2, [r3, #8]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800be20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800be30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0202 	bic.w	r2, r2, #2
 800be40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6899      	ldr	r1, [r3, #8]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7e1b      	ldrb	r3, [r3, #24]
 800be4c:	005a      	lsls	r2, r3, #1
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01b      	beq.n	800be98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800be7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6859      	ldr	r1, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	3b01      	subs	r3, #1
 800be8c:	035a      	lsls	r2, r3, #13
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	605a      	str	r2, [r3, #4]
 800be96:	e007      	b.n	800bea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800beb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	051a      	lsls	r2, r3, #20
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	430a      	orrs	r2, r1
 800becc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689a      	ldr	r2, [r3, #8]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bedc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6899      	ldr	r1, [r3, #8]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800beea:	025a      	lsls	r2, r3, #9
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	689a      	ldr	r2, [r3, #8]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6899      	ldr	r1, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	029a      	lsls	r2, r3, #10
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	609a      	str	r2, [r3, #8]
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	40012300 	.word	0x40012300
 800bf28:	0f000001 	.word	0x0f000001

0800bf2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d13c      	bne.n	800bfc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d12b      	bne.n	800bfb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d127      	bne.n	800bfb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d006      	beq.n	800bf84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d119      	bne.n	800bfb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0220 	bic.w	r2, r2, #32
 800bf92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	f043 0201 	orr.w	r2, r3, #1
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff fd71 	bl	800baa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bfbe:	e00e      	b.n	800bfde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc4:	f003 0310 	and.w	r3, r3, #16
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7ff fd85 	bl	800badc <HAL_ADC_ErrorCallback>
}
 800bfd2:	e004      	b.n	800bfde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
}
 800bfde:	bf00      	nop
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7ff fd5d 	bl	800bab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b084      	sub	sp, #16
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2240      	movs	r2, #64	; 0x40
 800c014:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01a:	f043 0204 	orr.w	r2, r3, #4
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff fd5a 	bl	800badc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c028:	bf00      	nop
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f003 0307 	and.w	r3, r3, #7
 800c052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c054:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <__NVIC_SetPriorityGrouping+0x44>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c060:	4013      	ands	r3, r2
 800c062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c06c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c076:	4a04      	ldr	r2, [pc, #16]	; (800c088 <__NVIC_SetPriorityGrouping+0x44>)
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	60d3      	str	r3, [r2, #12]
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	e000ed00 	.word	0xe000ed00

0800c08c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c090:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <__NVIC_GetPriorityGrouping+0x18>)
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	0a1b      	lsrs	r3, r3, #8
 800c096:	f003 0307 	and.w	r3, r3, #7
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	e000ed00 	.word	0xe000ed00

0800c0a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	db0b      	blt.n	800c0d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	f003 021f 	and.w	r2, r3, #31
 800c0c0:	4907      	ldr	r1, [pc, #28]	; (800c0e0 <__NVIC_EnableIRQ+0x38>)
 800c0c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0c6:	095b      	lsrs	r3, r3, #5
 800c0c8:	2001      	movs	r0, #1
 800c0ca:	fa00 f202 	lsl.w	r2, r0, r2
 800c0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c0d2:	bf00      	nop
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	e000e100 	.word	0xe000e100

0800c0e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	db0a      	blt.n	800c10e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	490c      	ldr	r1, [pc, #48]	; (800c130 <__NVIC_SetPriority+0x4c>)
 800c0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c102:	0112      	lsls	r2, r2, #4
 800c104:	b2d2      	uxtb	r2, r2
 800c106:	440b      	add	r3, r1
 800c108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c10c:	e00a      	b.n	800c124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	b2da      	uxtb	r2, r3
 800c112:	4908      	ldr	r1, [pc, #32]	; (800c134 <__NVIC_SetPriority+0x50>)
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	3b04      	subs	r3, #4
 800c11c:	0112      	lsls	r2, r2, #4
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	440b      	add	r3, r1
 800c122:	761a      	strb	r2, [r3, #24]
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	e000e100 	.word	0xe000e100
 800c134:	e000ed00 	.word	0xe000ed00

0800c138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c138:	b480      	push	{r7}
 800c13a:	b089      	sub	sp, #36	; 0x24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f003 0307 	and.w	r3, r3, #7
 800c14a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f1c3 0307 	rsb	r3, r3, #7
 800c152:	2b04      	cmp	r3, #4
 800c154:	bf28      	it	cs
 800c156:	2304      	movcs	r3, #4
 800c158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	3304      	adds	r3, #4
 800c15e:	2b06      	cmp	r3, #6
 800c160:	d902      	bls.n	800c168 <NVIC_EncodePriority+0x30>
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	3b03      	subs	r3, #3
 800c166:	e000      	b.n	800c16a <NVIC_EncodePriority+0x32>
 800c168:	2300      	movs	r3, #0
 800c16a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c16c:	f04f 32ff 	mov.w	r2, #4294967295
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	fa02 f303 	lsl.w	r3, r2, r3
 800c176:	43da      	mvns	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	401a      	ands	r2, r3
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c180:	f04f 31ff 	mov.w	r1, #4294967295
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	fa01 f303 	lsl.w	r3, r1, r3
 800c18a:	43d9      	mvns	r1, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c190:	4313      	orrs	r3, r2
         );
}
 800c192:	4618      	mov	r0, r3
 800c194:	3724      	adds	r7, #36	; 0x24
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
	...

0800c1a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1b0:	d301      	bcc.n	800c1b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e00f      	b.n	800c1d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c1b6:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <SysTick_Config+0x40>)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c1be:	210f      	movs	r1, #15
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	f7ff ff8e 	bl	800c0e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <SysTick_Config+0x40>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1ce:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <SysTick_Config+0x40>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	e000e010 	.word	0xe000e010

0800c1e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff ff29 	bl	800c044 <__NVIC_SetPriorityGrouping>
}
 800c1f2:	bf00      	nop
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b086      	sub	sp, #24
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	4603      	mov	r3, r0
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
 800c206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c208:	2300      	movs	r3, #0
 800c20a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c20c:	f7ff ff3e 	bl	800c08c <__NVIC_GetPriorityGrouping>
 800c210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	6978      	ldr	r0, [r7, #20]
 800c218:	f7ff ff8e 	bl	800c138 <NVIC_EncodePriority>
 800c21c:	4602      	mov	r2, r0
 800c21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff ff5d 	bl	800c0e4 <__NVIC_SetPriority>
}
 800c22a:	bf00      	nop
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b082      	sub	sp, #8
 800c236:	af00      	add	r7, sp, #0
 800c238:	4603      	mov	r3, r0
 800c23a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c23c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff ff31 	bl	800c0a8 <__NVIC_EnableIRQ>
}
 800c246:	bf00      	nop
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ffa2 	bl	800c1a0 <SysTick_Config>
 800c25c:	4603      	mov	r3, r0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c274:	f7ff f926 	bl	800b4c4 <HAL_GetTick>
 800c278:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e099      	b.n	800c3b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f022 0201 	bic.w	r2, r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2a4:	e00f      	b.n	800c2c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c2a6:	f7ff f90d 	bl	800b4c4 <HAL_GetTick>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	2b05      	cmp	r3, #5
 800c2b2:	d908      	bls.n	800c2c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2203      	movs	r2, #3
 800c2be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e078      	b.n	800c3b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e8      	bne.n	800c2a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	4b38      	ldr	r3, [pc, #224]	; (800c3c0 <HAL_DMA_Init+0x158>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c30a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	4313      	orrs	r3, r2
 800c316:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d107      	bne.n	800c330 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c328:	4313      	orrs	r3, r2
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f023 0307 	bic.w	r3, r3, #7
 800c346:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	4313      	orrs	r3, r2
 800c350:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	2b04      	cmp	r3, #4
 800c358:	d117      	bne.n	800c38a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	4313      	orrs	r3, r2
 800c362:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00e      	beq.n	800c38a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fadf 	bl	800c930 <DMA_CheckFifoParam>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d008      	beq.n	800c38a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2240      	movs	r2, #64	; 0x40
 800c37c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c386:	2301      	movs	r3, #1
 800c388:	e016      	b.n	800c3b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa96 	bl	800c8c4 <DMA_CalcBaseAndBitshift>
 800c398:	4603      	mov	r3, r0
 800c39a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3a0:	223f      	movs	r2, #63	; 0x3f
 800c3a2:	409a      	lsls	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	f010803f 	.word	0xf010803f

0800c3c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d101      	bne.n	800c3ea <HAL_DMA_Start_IT+0x26>
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e040      	b.n	800c46c <HAL_DMA_Start_IT+0xa8>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d12f      	bne.n	800c45e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2202      	movs	r2, #2
 800c402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 fa28 	bl	800c868 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c41c:	223f      	movs	r2, #63	; 0x3f
 800c41e:	409a      	lsls	r2, r3
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f042 0216 	orr.w	r2, r2, #22
 800c432:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f042 0208 	orr.w	r2, r2, #8
 800c44a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f042 0201 	orr.w	r2, r2, #1
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	e005      	b.n	800c46a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c466:	2302      	movs	r3, #2
 800c468:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c480:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c482:	f7ff f81f 	bl	800b4c4 <HAL_GetTick>
 800c486:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d008      	beq.n	800c4a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2280      	movs	r2, #128	; 0x80
 800c498:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e052      	b.n	800c54c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f022 0216 	bic.w	r2, r2, #22
 800c4b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	695a      	ldr	r2, [r3, #20]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d103      	bne.n	800c4d6 <HAL_DMA_Abort+0x62>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f022 0208 	bic.w	r2, r2, #8
 800c4e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 0201 	bic.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c4f6:	e013      	b.n	800c520 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c4f8:	f7fe ffe4 	bl	800b4c4 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	2b05      	cmp	r3, #5
 800c504:	d90c      	bls.n	800c520 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2203      	movs	r2, #3
 800c518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e015      	b.n	800c54c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e4      	bne.n	800c4f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c532:	223f      	movs	r2, #63	; 0x3f
 800c534:	409a      	lsls	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c560:	4b92      	ldr	r3, [pc, #584]	; (800c7ac <HAL_DMA_IRQHandler+0x258>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a92      	ldr	r2, [pc, #584]	; (800c7b0 <HAL_DMA_IRQHandler+0x25c>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	0a9b      	lsrs	r3, r3, #10
 800c56c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c57e:	2208      	movs	r2, #8
 800c580:	409a      	lsls	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	4013      	ands	r3, r2
 800c586:	2b00      	cmp	r3, #0
 800c588:	d01a      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	2b00      	cmp	r3, #0
 800c596:	d013      	beq.n	800c5c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0204 	bic.w	r2, r2, #4
 800c5a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	409a      	lsls	r2, r3
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b8:	f043 0201 	orr.w	r2, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	409a      	lsls	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d012      	beq.n	800c5f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	409a      	lsls	r2, r3
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ee:	f043 0202 	orr.w	r2, r3, #2
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	409a      	lsls	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4013      	ands	r3, r2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d012      	beq.n	800c62c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c618:	2204      	movs	r2, #4
 800c61a:	409a      	lsls	r2, r3
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c624:	f043 0204 	orr.w	r2, r3, #4
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c630:	2210      	movs	r2, #16
 800c632:	409a      	lsls	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4013      	ands	r3, r2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d043      	beq.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0308 	and.w	r3, r3, #8
 800c646:	2b00      	cmp	r3, #0
 800c648:	d03c      	beq.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64e:	2210      	movs	r2, #16
 800c650:	409a      	lsls	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d018      	beq.n	800c696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d108      	bne.n	800c684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	d024      	beq.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
 800c682:	e01f      	b.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01b      	beq.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	4798      	blx	r3
 800c694:	e016      	b.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d107      	bne.n	800c6b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f022 0208 	bic.w	r2, r2, #8
 800c6b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	409a      	lsls	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 808e 	beq.w	800c7f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0310 	and.w	r3, r3, #16
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 8086 	beq.w	800c7f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	409a      	lsls	r2, r3
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b05      	cmp	r3, #5
 800c6fc:	d136      	bne.n	800c76c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0216 	bic.w	r2, r2, #22
 800c70c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	695a      	ldr	r2, [r3, #20]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c71c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d103      	bne.n	800c72e <HAL_DMA_IRQHandler+0x1da>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d007      	beq.n	800c73e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f022 0208 	bic.w	r2, r2, #8
 800c73c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c742:	223f      	movs	r2, #63	; 0x3f
 800c744:	409a      	lsls	r2, r3
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d07d      	beq.n	800c85e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	4798      	blx	r3
        }
        return;
 800c76a:	e078      	b.n	800c85e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01c      	beq.n	800c7b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d108      	bne.n	800c79a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d030      	beq.n	800c7f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	4798      	blx	r3
 800c798:	e02b      	b.n	800c7f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d027      	beq.n	800c7f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	4798      	blx	r3
 800c7aa:	e022      	b.n	800c7f2 <HAL_DMA_IRQHandler+0x29e>
 800c7ac:	20000000 	.word	0x20000000
 800c7b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10f      	bne.n	800c7e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f022 0210 	bic.w	r2, r2, #16
 800c7d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d032      	beq.n	800c860 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d022      	beq.n	800c84c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2205      	movs	r2, #5
 800c80a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f022 0201 	bic.w	r2, r2, #1
 800c81c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	3301      	adds	r3, #1
 800c822:	60bb      	str	r3, [r7, #8]
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	429a      	cmp	r2, r3
 800c828:	d307      	bcc.n	800c83a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1f2      	bne.n	800c81e <HAL_DMA_IRQHandler+0x2ca>
 800c838:	e000      	b.n	800c83c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c83a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	4798      	blx	r3
 800c85c:	e000      	b.n	800c860 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c85e:	bf00      	nop
    }
  }
}
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop

0800c868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c884:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	683a      	ldr	r2, [r7, #0]
 800c88c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	2b40      	cmp	r3, #64	; 0x40
 800c894:	d108      	bne.n	800c8a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c8a6:	e007      	b.n	800c8b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	60da      	str	r2, [r3, #12]
}
 800c8b8:	bf00      	nop
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	3b10      	subs	r3, #16
 800c8d4:	4a14      	ldr	r2, [pc, #80]	; (800c928 <DMA_CalcBaseAndBitshift+0x64>)
 800c8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8da:	091b      	lsrs	r3, r3, #4
 800c8dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c8de:	4a13      	ldr	r2, [pc, #76]	; (800c92c <DMA_CalcBaseAndBitshift+0x68>)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d909      	bls.n	800c906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c8fa:	f023 0303 	bic.w	r3, r3, #3
 800c8fe:	1d1a      	adds	r2, r3, #4
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	659a      	str	r2, [r3, #88]	; 0x58
 800c904:	e007      	b.n	800c916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c90e:	f023 0303 	bic.w	r3, r3, #3
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	aaaaaaab 	.word	0xaaaaaaab
 800c92c:	08012298 	.word	0x08012298

0800c930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d11f      	bne.n	800c98a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d855      	bhi.n	800c9fc <DMA_CheckFifoParam+0xcc>
 800c950:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <DMA_CheckFifoParam+0x28>)
 800c952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c956:	bf00      	nop
 800c958:	0800c969 	.word	0x0800c969
 800c95c:	0800c97b 	.word	0x0800c97b
 800c960:	0800c969 	.word	0x0800c969
 800c964:	0800c9fd 	.word	0x0800c9fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c970:	2b00      	cmp	r3, #0
 800c972:	d045      	beq.n	800ca00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c978:	e042      	b.n	800ca00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c982:	d13f      	bne.n	800ca04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c988:	e03c      	b.n	800ca04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c992:	d121      	bne.n	800c9d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b03      	cmp	r3, #3
 800c998:	d836      	bhi.n	800ca08 <DMA_CheckFifoParam+0xd8>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <DMA_CheckFifoParam+0x70>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9b1 	.word	0x0800c9b1
 800c9a4:	0800c9b7 	.word	0x0800c9b7
 800c9a8:	0800c9b1 	.word	0x0800c9b1
 800c9ac:	0800c9c9 	.word	0x0800c9c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9b4:	e02f      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d024      	beq.n	800ca0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9c6:	e021      	b.n	800ca0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c9d0:	d11e      	bne.n	800ca10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c9d6:	e01b      	b.n	800ca10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d902      	bls.n	800c9e4 <DMA_CheckFifoParam+0xb4>
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d003      	beq.n	800c9ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c9e2:	e018      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e8:	e015      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00e      	beq.n	800ca14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9fa:	e00b      	b.n	800ca14 <DMA_CheckFifoParam+0xe4>
      break;
 800c9fc:	bf00      	nop
 800c9fe:	e00a      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;
 800ca00:	bf00      	nop
 800ca02:	e008      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;
 800ca04:	bf00      	nop
 800ca06:	e006      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;
 800ca08:	bf00      	nop
 800ca0a:	e004      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;
 800ca0c:	bf00      	nop
 800ca0e:	e002      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;   
 800ca10:	bf00      	nop
 800ca12:	e000      	b.n	800ca16 <DMA_CheckFifoParam+0xe6>
      break;
 800ca14:	bf00      	nop
    }
  } 
  
  return status; 
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ca2e:	4b4b      	ldr	r3, [pc, #300]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d020      	beq.n	800ca7c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800ca3a:	4b49      	ldr	r3, [pc, #292]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d107      	bne.n	800ca54 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800ca44:	4b46      	ldr	r3, [pc, #280]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800ca4a:	4b45      	ldr	r3, [pc, #276]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca50:	60da      	str	r2, [r3, #12]
 800ca52:	e00b      	b.n	800ca6c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800ca54:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d103      	bne.n	800ca66 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800ca5e:	4b40      	ldr	r3, [pc, #256]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	607b      	str	r3, [r7, #4]
 800ca64:	e002      	b.n	800ca6c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800ca66:	4b3e      	ldr	r3, [pc, #248]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800ca6c:	f000 f88e 	bl	800cb8c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f881 	bl	800cb78 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800ca76:	4b3a      	ldr	r3, [pc, #232]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ca7c:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d04a      	beq.n	800cb1e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ca88:	4b34      	ldr	r3, [pc, #208]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800ca8e:	4b34      	ldr	r3, [pc, #208]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d12d      	bne.n	800caf4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800ca98:	4b31      	ldr	r3, [pc, #196]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	4a30      	ldr	r2, [pc, #192]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800caa0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800caa2:	4b2f      	ldr	r3, [pc, #188]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d015      	beq.n	800cad6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800caaa:	4b2d      	ldr	r3, [pc, #180]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f857 	bl	800cb64 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800cab6:	4b2a      	ldr	r3, [pc, #168]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	3301      	adds	r3, #1
 800cabc:	4a28      	ldr	r2, [pc, #160]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cabe:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800cac6:	4b26      	ldr	r3, [pc, #152]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cac8:	7a1b      	ldrb	r3, [r3, #8]
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f8b2 	bl	800cc38 <FLASH_Erase_Sector>
 800cad4:	e023      	b.n	800cb1e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800cad6:	f04f 33ff 	mov.w	r3, #4294967295
 800cada:	607b      	str	r3, [r7, #4]
 800cadc:	4a20      	ldr	r2, [pc, #128]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cae2:	4b1f      	ldr	r3, [pc, #124]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cae8:	f000 f8ee 	bl	800ccc8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f839 	bl	800cb64 <HAL_FLASH_EndOfOperationCallback>
 800caf2:	e014      	b.n	800cb1e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800caf4:	4b1a      	ldr	r3, [pc, #104]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d107      	bne.n	800cb0e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800cafe:	f000 f8e3 	bl	800ccc8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800cb02:	4b17      	ldr	r3, [pc, #92]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 f82c 	bl	800cb64 <HAL_FLASH_EndOfOperationCallback>
 800cb0c:	e004      	b.n	800cb18 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800cb0e:	4b14      	ldr	r3, [pc, #80]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 f826 	bl	800cb64 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800cb18:	4b11      	ldr	r3, [pc, #68]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800cb1e:	4b10      	ldr	r3, [pc, #64]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d114      	bne.n	800cb52 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	4a0b      	ldr	r2, [pc, #44]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb32:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800cb34:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	4a08      	ldr	r2, [pc, #32]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb3e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800cb40:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	4a05      	ldr	r2, [pc, #20]	; (800cb5c <HAL_FLASH_IRQHandler+0x138>)
 800cb46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cb4a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800cb4c:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <HAL_FLASH_IRQHandler+0x13c>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	761a      	strb	r2, [r3, #24]
  }
}
 800cb52:	bf00      	nop
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	40023c00 	.word	0x40023c00
 800cb60:	20000790 	.word	0x20000790

0800cb64 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800cb90:	4b27      	ldr	r3, [pc, #156]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f003 0310 	and.w	r3, r3, #16
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d008      	beq.n	800cbae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cb9c:	4b25      	ldr	r3, [pc, #148]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	f043 0310 	orr.w	r3, r3, #16
 800cba4:	4a23      	ldr	r2, [pc, #140]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cba6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800cba8:	4b21      	ldr	r3, [pc, #132]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbaa:	2210      	movs	r2, #16
 800cbac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f003 0320 	and.w	r3, r3, #32
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d008      	beq.n	800cbcc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cbba:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	f043 0308 	orr.w	r3, r3, #8
 800cbc2:	4a1c      	ldr	r2, [pc, #112]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cbc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800cbc6:	4b1a      	ldr	r3, [pc, #104]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbc8:	2220      	movs	r2, #32
 800cbca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800cbcc:	4b18      	ldr	r3, [pc, #96]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d008      	beq.n	800cbea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800cbd8:	4b16      	ldr	r3, [pc, #88]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cbda:	69db      	ldr	r3, [r3, #28]
 800cbdc:	f043 0304 	orr.w	r3, r3, #4
 800cbe0:	4a14      	ldr	r2, [pc, #80]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cbe2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbe6:	2240      	movs	r2, #64	; 0x40
 800cbe8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800cbea:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d008      	beq.n	800cc08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	f043 0302 	orr.w	r3, r3, #2
 800cbfe:	4a0d      	ldr	r2, [pc, #52]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cc00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800cc02:	4b0b      	ldr	r3, [pc, #44]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cc04:	2280      	movs	r2, #128	; 0x80
 800cc06:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800cc08:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d008      	beq.n	800cc26 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f043 0320 	orr.w	r3, r3, #32
 800cc1c:	4a05      	ldr	r2, [pc, #20]	; (800cc34 <FLASH_SetErrorCode+0xa8>)
 800cc1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800cc20:	4b03      	ldr	r3, [pc, #12]	; (800cc30 <FLASH_SetErrorCode+0xa4>)
 800cc22:	2202      	movs	r2, #2
 800cc24:	60da      	str	r2, [r3, #12]
  }
}
 800cc26:	bf00      	nop
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	40023c00 	.word	0x40023c00
 800cc34:	20000790 	.word	0x20000790

0800cc38 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800cc48:	78fb      	ldrb	r3, [r7, #3]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	e010      	b.n	800cc76 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d103      	bne.n	800cc62 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800cc5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc5e:	60fb      	str	r3, [r7, #12]
 800cc60:	e009      	b.n	800cc76 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d103      	bne.n	800cc70 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800cc68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	e002      	b.n	800cc76 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800cc70:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cc74:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cc76:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	4a12      	ldr	r2, [pc, #72]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc84:	691a      	ldr	r2, [r3, #16]
 800cc86:	490f      	ldr	r1, [pc, #60]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	4a0c      	ldr	r2, [pc, #48]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cc98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cc9c:	691a      	ldr	r2, [r3, #16]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	4a07      	ldr	r2, [pc, #28]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800cca6:	f043 0302 	orr.w	r3, r3, #2
 800ccaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	4a04      	ldr	r2, [pc, #16]	; (800ccc4 <FLASH_Erase_Sector+0x8c>)
 800ccb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccb6:	6113      	str	r3, [r2, #16]
}
 800ccb8:	bf00      	nop
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	40023c00 	.word	0x40023c00

0800ccc8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800cccc:	4b20      	ldr	r3, [pc, #128]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d017      	beq.n	800cd08 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ccd8:	4b1d      	ldr	r3, [pc, #116]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a1c      	ldr	r2, [pc, #112]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cce2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cce4:	4b1a      	ldr	r3, [pc, #104]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a19      	ldr	r2, [pc, #100]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a16      	ldr	r2, [pc, #88]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccfa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ccfc:	4b14      	ldr	r3, [pc, #80]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a13      	ldr	r2, [pc, #76]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd06:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800cd08:	4b11      	ldr	r3, [pc, #68]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d017      	beq.n	800cd44 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800cd14:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a0d      	ldr	r2, [pc, #52]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cd20:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a07      	ldr	r2, [pc, #28]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cd38:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a04      	ldr	r2, [pc, #16]	; (800cd50 <FLASH_FlushCaches+0x88>)
 800cd3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd42:	6013      	str	r3, [r2, #0]
  }
}
 800cd44:	bf00      	nop
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	40023c00 	.word	0x40023c00

0800cd54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b089      	sub	sp, #36	; 0x24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	61fb      	str	r3, [r7, #28]
 800cd6e:	e16b      	b.n	800d048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd70:	2201      	movs	r2, #1
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	fa02 f303 	lsl.w	r3, r2, r3
 800cd78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	4013      	ands	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	f040 815a 	bne.w	800d042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d00b      	beq.n	800cdae <HAL_GPIO_Init+0x5a>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d007      	beq.n	800cdae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cda2:	2b11      	cmp	r3, #17
 800cda4:	d003      	beq.n	800cdae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	2b12      	cmp	r3, #18
 800cdac:	d130      	bne.n	800ce10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	2203      	movs	r2, #3
 800cdba:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbe:	43db      	mvns	r3, r3
 800cdc0:	69ba      	ldr	r2, [r7, #24]
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	68da      	ldr	r2, [r3, #12]
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cde4:	2201      	movs	r2, #1
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdec:	43db      	mvns	r3, r3
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	091b      	lsrs	r3, r3, #4
 800cdfa:	f003 0201 	and.w	r2, r3, #1
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	fa02 f303 	lsl.w	r3, r2, r3
 800ce04:	69ba      	ldr	r2, [r7, #24]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce20:	43db      	mvns	r3, r3
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	4013      	ands	r3, r2
 800ce26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	fa02 f303 	lsl.w	r3, r2, r3
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d003      	beq.n	800ce50 <HAL_GPIO_Init+0xfc>
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	2b12      	cmp	r3, #18
 800ce4e:	d123      	bne.n	800ce98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	08da      	lsrs	r2, r3, #3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3208      	adds	r2, #8
 800ce58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	f003 0307 	and.w	r3, r3, #7
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	220f      	movs	r2, #15
 800ce68:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6c:	43db      	mvns	r3, r3
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	4013      	ands	r3, r2
 800ce72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	691a      	ldr	r2, [r3, #16]
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	f003 0307 	and.w	r3, r3, #7
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	08da      	lsrs	r2, r3, #3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3208      	adds	r2, #8
 800ce92:	69b9      	ldr	r1, [r7, #24]
 800ce94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	2203      	movs	r2, #3
 800cea4:	fa02 f303 	lsl.w	r3, r2, r3
 800cea8:	43db      	mvns	r3, r3
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	4013      	ands	r3, r2
 800ceae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	f003 0203 	and.w	r2, r3, #3
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	fa02 f303 	lsl.w	r3, r2, r3
 800cec0:	69ba      	ldr	r2, [r7, #24]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 80b4 	beq.w	800d042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	4b5f      	ldr	r3, [pc, #380]	; (800d05c <HAL_GPIO_Init+0x308>)
 800cee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee2:	4a5e      	ldr	r2, [pc, #376]	; (800d05c <HAL_GPIO_Init+0x308>)
 800cee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cee8:	6453      	str	r3, [r2, #68]	; 0x44
 800ceea:	4b5c      	ldr	r3, [pc, #368]	; (800d05c <HAL_GPIO_Init+0x308>)
 800ceec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cef6:	4a5a      	ldr	r2, [pc, #360]	; (800d060 <HAL_GPIO_Init+0x30c>)
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	089b      	lsrs	r3, r3, #2
 800cefc:	3302      	adds	r3, #2
 800cefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	f003 0303 	and.w	r3, r3, #3
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	220f      	movs	r2, #15
 800cf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf12:	43db      	mvns	r3, r3
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	4013      	ands	r3, r2
 800cf18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a51      	ldr	r2, [pc, #324]	; (800d064 <HAL_GPIO_Init+0x310>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d02b      	beq.n	800cf7a <HAL_GPIO_Init+0x226>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4a50      	ldr	r2, [pc, #320]	; (800d068 <HAL_GPIO_Init+0x314>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d025      	beq.n	800cf76 <HAL_GPIO_Init+0x222>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a4f      	ldr	r2, [pc, #316]	; (800d06c <HAL_GPIO_Init+0x318>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d01f      	beq.n	800cf72 <HAL_GPIO_Init+0x21e>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a4e      	ldr	r2, [pc, #312]	; (800d070 <HAL_GPIO_Init+0x31c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d019      	beq.n	800cf6e <HAL_GPIO_Init+0x21a>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a4d      	ldr	r2, [pc, #308]	; (800d074 <HAL_GPIO_Init+0x320>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d013      	beq.n	800cf6a <HAL_GPIO_Init+0x216>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a4c      	ldr	r2, [pc, #304]	; (800d078 <HAL_GPIO_Init+0x324>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d00d      	beq.n	800cf66 <HAL_GPIO_Init+0x212>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a4b      	ldr	r2, [pc, #300]	; (800d07c <HAL_GPIO_Init+0x328>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d007      	beq.n	800cf62 <HAL_GPIO_Init+0x20e>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a4a      	ldr	r2, [pc, #296]	; (800d080 <HAL_GPIO_Init+0x32c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d101      	bne.n	800cf5e <HAL_GPIO_Init+0x20a>
 800cf5a:	2307      	movs	r3, #7
 800cf5c:	e00e      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf5e:	2308      	movs	r3, #8
 800cf60:	e00c      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf62:	2306      	movs	r3, #6
 800cf64:	e00a      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf66:	2305      	movs	r3, #5
 800cf68:	e008      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf6a:	2304      	movs	r3, #4
 800cf6c:	e006      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e004      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf72:	2302      	movs	r3, #2
 800cf74:	e002      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <HAL_GPIO_Init+0x228>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	69fa      	ldr	r2, [r7, #28]
 800cf7e:	f002 0203 	and.w	r2, r2, #3
 800cf82:	0092      	lsls	r2, r2, #2
 800cf84:	4093      	lsls	r3, r2
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cf8c:	4934      	ldr	r1, [pc, #208]	; (800d060 <HAL_GPIO_Init+0x30c>)
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	089b      	lsrs	r3, r3, #2
 800cf92:	3302      	adds	r3, #2
 800cf94:	69ba      	ldr	r2, [r7, #24]
 800cf96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cf9a:	4b3a      	ldr	r3, [pc, #232]	; (800d084 <HAL_GPIO_Init+0x330>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	43db      	mvns	r3, r3
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cfbe:	4a31      	ldr	r2, [pc, #196]	; (800d084 <HAL_GPIO_Init+0x330>)
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cfc4:	4b2f      	ldr	r3, [pc, #188]	; (800d084 <HAL_GPIO_Init+0x330>)
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	43db      	mvns	r3, r3
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d003      	beq.n	800cfe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cfe8:	4a26      	ldr	r2, [pc, #152]	; (800d084 <HAL_GPIO_Init+0x330>)
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cfee:	4b25      	ldr	r3, [pc, #148]	; (800d084 <HAL_GPIO_Init+0x330>)
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	43db      	mvns	r3, r3
 800cff8:	69ba      	ldr	r2, [r7, #24]
 800cffa:	4013      	ands	r3, r2
 800cffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	4313      	orrs	r3, r2
 800d010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d012:	4a1c      	ldr	r2, [pc, #112]	; (800d084 <HAL_GPIO_Init+0x330>)
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d018:	4b1a      	ldr	r3, [pc, #104]	; (800d084 <HAL_GPIO_Init+0x330>)
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	43db      	mvns	r3, r3
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	4013      	ands	r3, r2
 800d026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	4313      	orrs	r3, r2
 800d03a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d03c:	4a11      	ldr	r2, [pc, #68]	; (800d084 <HAL_GPIO_Init+0x330>)
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	3301      	adds	r3, #1
 800d046:	61fb      	str	r3, [r7, #28]
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2b0f      	cmp	r3, #15
 800d04c:	f67f ae90 	bls.w	800cd70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d050:	bf00      	nop
 800d052:	3724      	adds	r7, #36	; 0x24
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	40023800 	.word	0x40023800
 800d060:	40013800 	.word	0x40013800
 800d064:	40020000 	.word	0x40020000
 800d068:	40020400 	.word	0x40020400
 800d06c:	40020800 	.word	0x40020800
 800d070:	40020c00 	.word	0x40020c00
 800d074:	40021000 	.word	0x40021000
 800d078:	40021400 	.word	0x40021400
 800d07c:	40021800 	.word	0x40021800
 800d080:	40021c00 	.word	0x40021c00
 800d084:	40013c00 	.word	0x40013c00

0800d088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	807b      	strh	r3, [r7, #2]
 800d094:	4613      	mov	r3, r2
 800d096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d098:	787b      	ldrb	r3, [r7, #1]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d09e:	887a      	ldrh	r2, [r7, #2]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d0a4:	e003      	b.n	800d0ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d0a6:	887b      	ldrh	r3, [r7, #2]
 800d0a8:	041a      	lsls	r2, r3, #16
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	619a      	str	r2, [r3, #24]
}
 800d0ae:	bf00      	nop
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
	...

0800d0bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e25b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d075      	beq.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d0da:	4ba3      	ldr	r3, [pc, #652]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f003 030c 	and.w	r3, r3, #12
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d00c      	beq.n	800d100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0e6:	4ba0      	ldr	r3, [pc, #640]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d0ee:	2b08      	cmp	r3, #8
 800d0f0:	d112      	bne.n	800d118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0f2:	4b9d      	ldr	r3, [pc, #628]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0fe:	d10b      	bne.n	800d118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d100:	4b99      	ldr	r3, [pc, #612]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d05b      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x108>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d157      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e236      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d120:	d106      	bne.n	800d130 <HAL_RCC_OscConfig+0x74>
 800d122:	4b91      	ldr	r3, [pc, #580]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a90      	ldr	r2, [pc, #576]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	e01d      	b.n	800d16c <HAL_RCC_OscConfig+0xb0>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d138:	d10c      	bne.n	800d154 <HAL_RCC_OscConfig+0x98>
 800d13a:	4b8b      	ldr	r3, [pc, #556]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a8a      	ldr	r2, [pc, #552]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	4b88      	ldr	r3, [pc, #544]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a87      	ldr	r2, [pc, #540]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d14c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d150:	6013      	str	r3, [r2, #0]
 800d152:	e00b      	b.n	800d16c <HAL_RCC_OscConfig+0xb0>
 800d154:	4b84      	ldr	r3, [pc, #528]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a83      	ldr	r2, [pc, #524]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d15a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	4b81      	ldr	r3, [pc, #516]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a80      	ldr	r2, [pc, #512]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d16a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d013      	beq.n	800d19c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d174:	f7fe f9a6 	bl	800b4c4 <HAL_GetTick>
 800d178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d17a:	e008      	b.n	800d18e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d17c:	f7fe f9a2 	bl	800b4c4 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	2b64      	cmp	r3, #100	; 0x64
 800d188:	d901      	bls.n	800d18e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	e1fb      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d18e:	4b76      	ldr	r3, [pc, #472]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0f0      	beq.n	800d17c <HAL_RCC_OscConfig+0xc0>
 800d19a:	e014      	b.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d19c:	f7fe f992 	bl	800b4c4 <HAL_GetTick>
 800d1a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1a2:	e008      	b.n	800d1b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d1a4:	f7fe f98e 	bl	800b4c4 <HAL_GetTick>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b64      	cmp	r3, #100	; 0x64
 800d1b0:	d901      	bls.n	800d1b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e1e7      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1b6:	4b6c      	ldr	r3, [pc, #432]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f0      	bne.n	800d1a4 <HAL_RCC_OscConfig+0xe8>
 800d1c2:	e000      	b.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d063      	beq.n	800d29a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d1d2:	4b65      	ldr	r3, [pc, #404]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	f003 030c 	and.w	r3, r3, #12
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00b      	beq.n	800d1f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1de:	4b62      	ldr	r3, [pc, #392]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d1e6:	2b08      	cmp	r3, #8
 800d1e8:	d11c      	bne.n	800d224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1ea:	4b5f      	ldr	r3, [pc, #380]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d116      	bne.n	800d224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d1f6:	4b5c      	ldr	r3, [pc, #368]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <HAL_RCC_OscConfig+0x152>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d001      	beq.n	800d20e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e1bb      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d20e:	4b56      	ldr	r3, [pc, #344]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	4952      	ldr	r1, [pc, #328]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d222:	e03a      	b.n	800d29a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d020      	beq.n	800d26e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d22c:	4b4f      	ldr	r3, [pc, #316]	; (800d36c <HAL_RCC_OscConfig+0x2b0>)
 800d22e:	2201      	movs	r2, #1
 800d230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d232:	f7fe f947 	bl	800b4c4 <HAL_GetTick>
 800d236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d238:	e008      	b.n	800d24c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d23a:	f7fe f943 	bl	800b4c4 <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	d901      	bls.n	800d24c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e19c      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d24c:	4b46      	ldr	r3, [pc, #280]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0302 	and.w	r3, r3, #2
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0f0      	beq.n	800d23a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d258:	4b43      	ldr	r3, [pc, #268]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	4940      	ldr	r1, [pc, #256]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d268:	4313      	orrs	r3, r2
 800d26a:	600b      	str	r3, [r1, #0]
 800d26c:	e015      	b.n	800d29a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d26e:	4b3f      	ldr	r3, [pc, #252]	; (800d36c <HAL_RCC_OscConfig+0x2b0>)
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d274:	f7fe f926 	bl	800b4c4 <HAL_GetTick>
 800d278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d27a:	e008      	b.n	800d28e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d27c:	f7fe f922 	bl	800b4c4 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d901      	bls.n	800d28e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e17b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d28e:	4b36      	ldr	r3, [pc, #216]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1f0      	bne.n	800d27c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0308 	and.w	r3, r3, #8
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d030      	beq.n	800d308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d016      	beq.n	800d2dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2ae:	4b30      	ldr	r3, [pc, #192]	; (800d370 <HAL_RCC_OscConfig+0x2b4>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2b4:	f7fe f906 	bl	800b4c4 <HAL_GetTick>
 800d2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2ba:	e008      	b.n	800d2ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d2bc:	f7fe f902 	bl	800b4c4 <HAL_GetTick>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d901      	bls.n	800d2ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e15b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2ce:	4b26      	ldr	r3, [pc, #152]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0f0      	beq.n	800d2bc <HAL_RCC_OscConfig+0x200>
 800d2da:	e015      	b.n	800d308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2dc:	4b24      	ldr	r3, [pc, #144]	; (800d370 <HAL_RCC_OscConfig+0x2b4>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d2e2:	f7fe f8ef 	bl	800b4c4 <HAL_GetTick>
 800d2e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2e8:	e008      	b.n	800d2fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d2ea:	f7fe f8eb 	bl	800b4c4 <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d901      	bls.n	800d2fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e144      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2fc:	4b1a      	ldr	r3, [pc, #104]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f0      	bne.n	800d2ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 80a0 	beq.w	800d456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d31a:	4b13      	ldr	r3, [pc, #76]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10f      	bne.n	800d346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d326:	2300      	movs	r3, #0
 800d328:	60bb      	str	r3, [r7, #8]
 800d32a:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	4a0e      	ldr	r2, [pc, #56]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d334:	6413      	str	r3, [r2, #64]	; 0x40
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d33e:	60bb      	str	r3, [r7, #8]
 800d340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d342:	2301      	movs	r3, #1
 800d344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d121      	bne.n	800d396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a07      	ldr	r2, [pc, #28]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d35c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d35e:	f7fe f8b1 	bl	800b4c4 <HAL_GetTick>
 800d362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d364:	e011      	b.n	800d38a <HAL_RCC_OscConfig+0x2ce>
 800d366:	bf00      	nop
 800d368:	40023800 	.word	0x40023800
 800d36c:	42470000 	.word	0x42470000
 800d370:	42470e80 	.word	0x42470e80
 800d374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d378:	f7fe f8a4 	bl	800b4c4 <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	2b02      	cmp	r3, #2
 800d384:	d901      	bls.n	800d38a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e0fd      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d38a:	4b81      	ldr	r3, [pc, #516]	; (800d590 <HAL_RCC_OscConfig+0x4d4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f0      	beq.n	800d378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d106      	bne.n	800d3ac <HAL_RCC_OscConfig+0x2f0>
 800d39e:	4b7d      	ldr	r3, [pc, #500]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3a2:	4a7c      	ldr	r2, [pc, #496]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3a4:	f043 0301 	orr.w	r3, r3, #1
 800d3a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3aa:	e01c      	b.n	800d3e6 <HAL_RCC_OscConfig+0x32a>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b05      	cmp	r3, #5
 800d3b2:	d10c      	bne.n	800d3ce <HAL_RCC_OscConfig+0x312>
 800d3b4:	4b77      	ldr	r3, [pc, #476]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b8:	4a76      	ldr	r2, [pc, #472]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3ba:	f043 0304 	orr.w	r3, r3, #4
 800d3be:	6713      	str	r3, [r2, #112]	; 0x70
 800d3c0:	4b74      	ldr	r3, [pc, #464]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c4:	4a73      	ldr	r2, [pc, #460]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d3cc:	e00b      	b.n	800d3e6 <HAL_RCC_OscConfig+0x32a>
 800d3ce:	4b71      	ldr	r3, [pc, #452]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d2:	4a70      	ldr	r2, [pc, #448]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3da:	4b6e      	ldr	r3, [pc, #440]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3de:	4a6d      	ldr	r2, [pc, #436]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3e0:	f023 0304 	bic.w	r3, r3, #4
 800d3e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d015      	beq.n	800d41a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ee:	f7fe f869 	bl	800b4c4 <HAL_GetTick>
 800d3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3f4:	e00a      	b.n	800d40c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d3f6:	f7fe f865 	bl	800b4c4 <HAL_GetTick>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	f241 3288 	movw	r2, #5000	; 0x1388
 800d404:	4293      	cmp	r3, r2
 800d406:	d901      	bls.n	800d40c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d408:	2303      	movs	r3, #3
 800d40a:	e0bc      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d40c:	4b61      	ldr	r3, [pc, #388]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d0ee      	beq.n	800d3f6 <HAL_RCC_OscConfig+0x33a>
 800d418:	e014      	b.n	800d444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d41a:	f7fe f853 	bl	800b4c4 <HAL_GetTick>
 800d41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d420:	e00a      	b.n	800d438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d422:	f7fe f84f 	bl	800b4c4 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d430:	4293      	cmp	r3, r2
 800d432:	d901      	bls.n	800d438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e0a6      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d438:	4b56      	ldr	r3, [pc, #344]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1ee      	bne.n	800d422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d105      	bne.n	800d456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d44a:	4b52      	ldr	r3, [pc, #328]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	4a51      	ldr	r2, [pc, #324]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 8092 	beq.w	800d584 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d460:	4b4c      	ldr	r3, [pc, #304]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	f003 030c 	and.w	r3, r3, #12
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d05c      	beq.n	800d526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d141      	bne.n	800d4f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d474:	4b48      	ldr	r3, [pc, #288]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d47a:	f7fe f823 	bl	800b4c4 <HAL_GetTick>
 800d47e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d480:	e008      	b.n	800d494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d482:	f7fe f81f 	bl	800b4c4 <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d901      	bls.n	800d494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e078      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d494:	4b3f      	ldr	r3, [pc, #252]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f0      	bne.n	800d482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69da      	ldr	r2, [r3, #28]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	019b      	lsls	r3, r3, #6
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b6:	085b      	lsrs	r3, r3, #1
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	041b      	lsls	r3, r3, #16
 800d4bc:	431a      	orrs	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	4933      	ldr	r1, [pc, #204]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d4ca:	4b33      	ldr	r3, [pc, #204]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4d0:	f7fd fff8 	bl	800b4c4 <HAL_GetTick>
 800d4d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d4d6:	e008      	b.n	800d4ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d4d8:	f7fd fff4 	bl	800b4c4 <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d901      	bls.n	800d4ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e04d      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d4ea:	4b2a      	ldr	r3, [pc, #168]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0f0      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x41c>
 800d4f6:	e045      	b.n	800d584 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4f8:	4b27      	ldr	r3, [pc, #156]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4fe:	f7fd ffe1 	bl	800b4c4 <HAL_GetTick>
 800d502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d504:	e008      	b.n	800d518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d506:	f7fd ffdd 	bl	800b4c4 <HAL_GetTick>
 800d50a:	4602      	mov	r2, r0
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	2b02      	cmp	r3, #2
 800d512:	d901      	bls.n	800d518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e036      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d518:	4b1e      	ldr	r3, [pc, #120]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1f0      	bne.n	800d506 <HAL_RCC_OscConfig+0x44a>
 800d524:	e02e      	b.n	800d584 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d101      	bne.n	800d532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e029      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d532:	4b18      	ldr	r3, [pc, #96]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	429a      	cmp	r2, r3
 800d544:	d11c      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d550:	429a      	cmp	r2, r3
 800d552:	d115      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d55a:	4013      	ands	r3, r2
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d560:	4293      	cmp	r3, r2
 800d562:	d10d      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d56e:	429a      	cmp	r2, r3
 800d570:	d106      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d001      	beq.n	800d584 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e000      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	40007000 	.word	0x40007000
 800d594:	40023800 	.word	0x40023800
 800d598:	42470060 	.word	0x42470060

0800d59c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e0cc      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d5b0:	4b68      	ldr	r3, [pc, #416]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d90c      	bls.n	800d5d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5be:	4b65      	ldr	r3, [pc, #404]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	b2d2      	uxtb	r2, r2
 800d5c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5c6:	4b63      	ldr	r3, [pc, #396]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 030f 	and.w	r3, r3, #15
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d001      	beq.n	800d5d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0b8      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d020      	beq.n	800d626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5f0:	4b59      	ldr	r3, [pc, #356]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	4a58      	ldr	r2, [pc, #352]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d5fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d608:	4b53      	ldr	r3, [pc, #332]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	4a52      	ldr	r2, [pc, #328]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d60e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d614:	4b50      	ldr	r3, [pc, #320]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	494d      	ldr	r1, [pc, #308]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d622:	4313      	orrs	r3, r2
 800d624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d044      	beq.n	800d6bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d107      	bne.n	800d64a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d63a:	4b47      	ldr	r3, [pc, #284]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d119      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e07f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d003      	beq.n	800d65a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d656:	2b03      	cmp	r3, #3
 800d658:	d107      	bne.n	800d66a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d65a:	4b3f      	ldr	r3, [pc, #252]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e06f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d66a:	4b3b      	ldr	r3, [pc, #236]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0302 	and.w	r3, r3, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e067      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d67a:	4b37      	ldr	r3, [pc, #220]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f023 0203 	bic.w	r2, r3, #3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4934      	ldr	r1, [pc, #208]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d688:	4313      	orrs	r3, r2
 800d68a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d68c:	f7fd ff1a 	bl	800b4c4 <HAL_GetTick>
 800d690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d692:	e00a      	b.n	800d6aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d694:	f7fd ff16 	bl	800b4c4 <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d901      	bls.n	800d6aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e04f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6aa:	4b2b      	ldr	r3, [pc, #172]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 020c 	and.w	r2, r3, #12
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d1eb      	bne.n	800d694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 030f 	and.w	r3, r3, #15
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d20c      	bcs.n	800d6e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6ca:	4b22      	ldr	r3, [pc, #136]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6cc:	683a      	ldr	r2, [r7, #0]
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6d2:	4b20      	ldr	r3, [pc, #128]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d001      	beq.n	800d6e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e032      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d008      	beq.n	800d702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6f0:	4b19      	ldr	r3, [pc, #100]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	4916      	ldr	r1, [pc, #88]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6fe:	4313      	orrs	r3, r2
 800d700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f003 0308 	and.w	r3, r3, #8
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d009      	beq.n	800d722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d70e:	4b12      	ldr	r3, [pc, #72]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	490e      	ldr	r1, [pc, #56]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d722:	f000 f821 	bl	800d768 <HAL_RCC_GetSysClockFreq>
 800d726:	4601      	mov	r1, r0
 800d728:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	091b      	lsrs	r3, r3, #4
 800d72e:	f003 030f 	and.w	r3, r3, #15
 800d732:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <HAL_RCC_ClockConfig+0x1c0>)
 800d734:	5cd3      	ldrb	r3, [r2, r3]
 800d736:	fa21 f303 	lsr.w	r3, r1, r3
 800d73a:	4a09      	ldr	r2, [pc, #36]	; (800d760 <HAL_RCC_ClockConfig+0x1c4>)
 800d73c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d73e:	4b09      	ldr	r3, [pc, #36]	; (800d764 <HAL_RCC_ClockConfig+0x1c8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4618      	mov	r0, r3
 800d744:	f7fd fe7a 	bl	800b43c <HAL_InitTick>

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	40023c00 	.word	0x40023c00
 800d758:	40023800 	.word	0x40023800
 800d75c:	08012280 	.word	0x08012280
 800d760:	20000000 	.word	0x20000000
 800d764:	20000004 	.word	0x20000004

0800d768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	2300      	movs	r3, #0
 800d778:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d77a:	2300      	movs	r3, #0
 800d77c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d77e:	4b63      	ldr	r3, [pc, #396]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f003 030c 	and.w	r3, r3, #12
 800d786:	2b04      	cmp	r3, #4
 800d788:	d007      	beq.n	800d79a <HAL_RCC_GetSysClockFreq+0x32>
 800d78a:	2b08      	cmp	r3, #8
 800d78c:	d008      	beq.n	800d7a0 <HAL_RCC_GetSysClockFreq+0x38>
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f040 80b4 	bne.w	800d8fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d794:	4b5e      	ldr	r3, [pc, #376]	; (800d910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d796:	60bb      	str	r3, [r7, #8]
       break;
 800d798:	e0b3      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d79a:	4b5e      	ldr	r3, [pc, #376]	; (800d914 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d79c:	60bb      	str	r3, [r7, #8]
      break;
 800d79e:	e0b0      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d7a0:	4b5a      	ldr	r3, [pc, #360]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d7aa:	4b58      	ldr	r3, [pc, #352]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d04a      	beq.n	800d84c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d7b6:	4b55      	ldr	r3, [pc, #340]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	099b      	lsrs	r3, r3, #6
 800d7bc:	f04f 0400 	mov.w	r4, #0
 800d7c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d7c4:	f04f 0200 	mov.w	r2, #0
 800d7c8:	ea03 0501 	and.w	r5, r3, r1
 800d7cc:	ea04 0602 	and.w	r6, r4, r2
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	f04f 0300 	mov.w	r3, #0
 800d7d8:	f04f 0400 	mov.w	r4, #0
 800d7dc:	0154      	lsls	r4, r2, #5
 800d7de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d7e2:	014b      	lsls	r3, r1, #5
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	1b49      	subs	r1, r1, r5
 800d7ea:	eb62 0206 	sbc.w	r2, r2, r6
 800d7ee:	f04f 0300 	mov.w	r3, #0
 800d7f2:	f04f 0400 	mov.w	r4, #0
 800d7f6:	0194      	lsls	r4, r2, #6
 800d7f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d7fc:	018b      	lsls	r3, r1, #6
 800d7fe:	1a5b      	subs	r3, r3, r1
 800d800:	eb64 0402 	sbc.w	r4, r4, r2
 800d804:	f04f 0100 	mov.w	r1, #0
 800d808:	f04f 0200 	mov.w	r2, #0
 800d80c:	00e2      	lsls	r2, r4, #3
 800d80e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d812:	00d9      	lsls	r1, r3, #3
 800d814:	460b      	mov	r3, r1
 800d816:	4614      	mov	r4, r2
 800d818:	195b      	adds	r3, r3, r5
 800d81a:	eb44 0406 	adc.w	r4, r4, r6
 800d81e:	f04f 0100 	mov.w	r1, #0
 800d822:	f04f 0200 	mov.w	r2, #0
 800d826:	0262      	lsls	r2, r4, #9
 800d828:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d82c:	0259      	lsls	r1, r3, #9
 800d82e:	460b      	mov	r3, r1
 800d830:	4614      	mov	r4, r2
 800d832:	4618      	mov	r0, r3
 800d834:	4621      	mov	r1, r4
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f04f 0400 	mov.w	r4, #0
 800d83c:	461a      	mov	r2, r3
 800d83e:	4623      	mov	r3, r4
 800d840:	f7fb f93a 	bl	8008ab8 <__aeabi_uldivmod>
 800d844:	4603      	mov	r3, r0
 800d846:	460c      	mov	r4, r1
 800d848:	60fb      	str	r3, [r7, #12]
 800d84a:	e049      	b.n	800d8e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d84c:	4b2f      	ldr	r3, [pc, #188]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	099b      	lsrs	r3, r3, #6
 800d852:	f04f 0400 	mov.w	r4, #0
 800d856:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	ea03 0501 	and.w	r5, r3, r1
 800d862:	ea04 0602 	and.w	r6, r4, r2
 800d866:	4629      	mov	r1, r5
 800d868:	4632      	mov	r2, r6
 800d86a:	f04f 0300 	mov.w	r3, #0
 800d86e:	f04f 0400 	mov.w	r4, #0
 800d872:	0154      	lsls	r4, r2, #5
 800d874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d878:	014b      	lsls	r3, r1, #5
 800d87a:	4619      	mov	r1, r3
 800d87c:	4622      	mov	r2, r4
 800d87e:	1b49      	subs	r1, r1, r5
 800d880:	eb62 0206 	sbc.w	r2, r2, r6
 800d884:	f04f 0300 	mov.w	r3, #0
 800d888:	f04f 0400 	mov.w	r4, #0
 800d88c:	0194      	lsls	r4, r2, #6
 800d88e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d892:	018b      	lsls	r3, r1, #6
 800d894:	1a5b      	subs	r3, r3, r1
 800d896:	eb64 0402 	sbc.w	r4, r4, r2
 800d89a:	f04f 0100 	mov.w	r1, #0
 800d89e:	f04f 0200 	mov.w	r2, #0
 800d8a2:	00e2      	lsls	r2, r4, #3
 800d8a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d8a8:	00d9      	lsls	r1, r3, #3
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	195b      	adds	r3, r3, r5
 800d8b0:	eb44 0406 	adc.w	r4, r4, r6
 800d8b4:	f04f 0100 	mov.w	r1, #0
 800d8b8:	f04f 0200 	mov.w	r2, #0
 800d8bc:	02a2      	lsls	r2, r4, #10
 800d8be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d8c2:	0299      	lsls	r1, r3, #10
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4614      	mov	r4, r2
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f04f 0400 	mov.w	r4, #0
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4623      	mov	r3, r4
 800d8d6:	f7fb f8ef 	bl	8008ab8 <__aeabi_uldivmod>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	460c      	mov	r4, r1
 800d8de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	0c1b      	lsrs	r3, r3, #16
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	005b      	lsls	r3, r3, #1
 800d8ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f8:	60bb      	str	r3, [r7, #8]
      break;
 800d8fa:	e002      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d8fc:	4b04      	ldr	r3, [pc, #16]	; (800d910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d8fe:	60bb      	str	r3, [r7, #8]
      break;
 800d900:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d902:	68bb      	ldr	r3, [r7, #8]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d90c:	40023800 	.word	0x40023800
 800d910:	00f42400 	.word	0x00f42400
 800d914:	007a1200 	.word	0x007a1200

0800d918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <HAL_RCC_GetHCLKFreq+0x14>)
 800d91e:	681b      	ldr	r3, [r3, #0]
}
 800d920:	4618      	mov	r0, r3
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	20000000 	.word	0x20000000

0800d930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d934:	f7ff fff0 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d938:	4601      	mov	r1, r0
 800d93a:	4b05      	ldr	r3, [pc, #20]	; (800d950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	0a9b      	lsrs	r3, r3, #10
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	4a03      	ldr	r2, [pc, #12]	; (800d954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d946:	5cd3      	ldrb	r3, [r2, r3]
 800d948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	40023800 	.word	0x40023800
 800d954:	08012290 	.word	0x08012290

0800d958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d95c:	f7ff ffdc 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d960:	4601      	mov	r1, r0
 800d962:	4b05      	ldr	r3, [pc, #20]	; (800d978 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	0b5b      	lsrs	r3, r3, #13
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	4a03      	ldr	r2, [pc, #12]	; (800d97c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d96e:	5cd3      	ldrb	r3, [r2, r3]
 800d970:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d974:	4618      	mov	r0, r3
 800d976:	bd80      	pop	{r7, pc}
 800d978:	40023800 	.word	0x40023800
 800d97c:	08012290 	.word	0x08012290

0800d980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e056      	b.n	800da40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d106      	bne.n	800d9b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7fc ff9d 	bl	800a8ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	431a      	orrs	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	431a      	orrs	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	ea42 0103 	orr.w	r1, r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	430a      	orrs	r2, r1
 800da08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	0c1b      	lsrs	r3, r3, #16
 800da10:	f003 0104 	and.w	r1, r3, #4
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	430a      	orrs	r2, r1
 800da1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	69da      	ldr	r2, [r3, #28]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e01d      	b.n	800da96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7fc ff84 	bl	800a97c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3304      	adds	r3, #4
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f000 fe3e 	bl	800e708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da9e:	b480      	push	{r7}
 800daa0:	b085      	sub	sp, #20
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0201 	orr.w	r2, r2, #1
 800dab4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f003 0307 	and.w	r3, r3, #7
 800dac0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b06      	cmp	r3, #6
 800dac6:	d007      	beq.n	800dad8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f042 0201 	orr.w	r2, r2, #1
 800dad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b083      	sub	sp, #12
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f022 0201 	bic.w	r2, r2, #1
 800dafc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6a1a      	ldr	r2, [r3, #32]
 800db04:	f241 1311 	movw	r3, #4369	; 0x1111
 800db08:	4013      	ands	r3, r2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10f      	bne.n	800db2e <HAL_TIM_Base_Stop_IT+0x48>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6a1a      	ldr	r2, [r3, #32]
 800db14:	f240 4344 	movw	r3, #1092	; 0x444
 800db18:	4013      	ands	r3, r2
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d107      	bne.n	800db2e <HAL_TIM_Base_Stop_IT+0x48>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f022 0201 	bic.w	r2, r2, #1
 800db2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e01d      	b.n	800db8a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f815 	bl	800db92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3304      	adds	r3, #4
 800db78:	4619      	mov	r1, r3
 800db7a:	4610      	mov	r0, r2
 800db7c:	f000 fdc4 	bl	800e708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800db92:	b480      	push	{r7}
 800db94:	b083      	sub	sp, #12
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800db9a:	bf00      	nop
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
	...

0800dba8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b0c      	cmp	r3, #12
 800dbb6:	d841      	bhi.n	800dc3c <HAL_TIM_OC_Start_IT+0x94>
 800dbb8:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <HAL_TIM_OC_Start_IT+0x18>)
 800dbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbe:	bf00      	nop
 800dbc0:	0800dbf5 	.word	0x0800dbf5
 800dbc4:	0800dc3d 	.word	0x0800dc3d
 800dbc8:	0800dc3d 	.word	0x0800dc3d
 800dbcc:	0800dc3d 	.word	0x0800dc3d
 800dbd0:	0800dc07 	.word	0x0800dc07
 800dbd4:	0800dc3d 	.word	0x0800dc3d
 800dbd8:	0800dc3d 	.word	0x0800dc3d
 800dbdc:	0800dc3d 	.word	0x0800dc3d
 800dbe0:	0800dc19 	.word	0x0800dc19
 800dbe4:	0800dc3d 	.word	0x0800dc3d
 800dbe8:	0800dc3d 	.word	0x0800dc3d
 800dbec:	0800dc3d 	.word	0x0800dc3d
 800dbf0:	0800dc2b 	.word	0x0800dc2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68da      	ldr	r2, [r3, #12]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f042 0202 	orr.w	r2, r2, #2
 800dc02:	60da      	str	r2, [r3, #12]
      break;
 800dc04:	e01b      	b.n	800dc3e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f042 0204 	orr.w	r2, r2, #4
 800dc14:	60da      	str	r2, [r3, #12]
      break;
 800dc16:	e012      	b.n	800dc3e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f042 0208 	orr.w	r2, r2, #8
 800dc26:	60da      	str	r2, [r3, #12]
      break;
 800dc28:	e009      	b.n	800dc3e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f042 0210 	orr.w	r2, r2, #16
 800dc38:	60da      	str	r2, [r3, #12]
      break;
 800dc3a:	e000      	b.n	800dc3e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800dc3c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2201      	movs	r2, #1
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f001 f848 	bl	800ecdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <HAL_TIM_OC_Start_IT+0x100>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d004      	beq.n	800dc60 <HAL_TIM_OC_Start_IT+0xb8>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a14      	ldr	r2, [pc, #80]	; (800dcac <HAL_TIM_OC_Start_IT+0x104>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d101      	bne.n	800dc64 <HAL_TIM_OC_Start_IT+0xbc>
 800dc60:	2301      	movs	r3, #1
 800dc62:	e000      	b.n	800dc66 <HAL_TIM_OC_Start_IT+0xbe>
 800dc64:	2300      	movs	r3, #0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d007      	beq.n	800dc7a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	f003 0307 	and.w	r3, r3, #7
 800dc84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b06      	cmp	r3, #6
 800dc8a:	d007      	beq.n	800dc9c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f042 0201 	orr.w	r2, r2, #1
 800dc9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	40010000 	.word	0x40010000
 800dcac:	40010400 	.word	0x40010400

0800dcb0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	2b0c      	cmp	r3, #12
 800dcbe:	d841      	bhi.n	800dd44 <HAL_TIM_OC_Stop_IT+0x94>
 800dcc0:	a201      	add	r2, pc, #4	; (adr r2, 800dcc8 <HAL_TIM_OC_Stop_IT+0x18>)
 800dcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc6:	bf00      	nop
 800dcc8:	0800dcfd 	.word	0x0800dcfd
 800dccc:	0800dd45 	.word	0x0800dd45
 800dcd0:	0800dd45 	.word	0x0800dd45
 800dcd4:	0800dd45 	.word	0x0800dd45
 800dcd8:	0800dd0f 	.word	0x0800dd0f
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800dd45 	.word	0x0800dd45
 800dce4:	0800dd45 	.word	0x0800dd45
 800dce8:	0800dd21 	.word	0x0800dd21
 800dcec:	0800dd45 	.word	0x0800dd45
 800dcf0:	0800dd45 	.word	0x0800dd45
 800dcf4:	0800dd45 	.word	0x0800dd45
 800dcf8:	0800dd33 	.word	0x0800dd33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68da      	ldr	r2, [r3, #12]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f022 0202 	bic.w	r2, r2, #2
 800dd0a:	60da      	str	r2, [r3, #12]
      break;
 800dd0c:	e01b      	b.n	800dd46 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68da      	ldr	r2, [r3, #12]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f022 0204 	bic.w	r2, r2, #4
 800dd1c:	60da      	str	r2, [r3, #12]
      break;
 800dd1e:	e012      	b.n	800dd46 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f022 0208 	bic.w	r2, r2, #8
 800dd2e:	60da      	str	r2, [r3, #12]
      break;
 800dd30:	e009      	b.n	800dd46 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f022 0210 	bic.w	r2, r2, #16
 800dd40:	60da      	str	r2, [r3, #12]
      break;
 800dd42:	e000      	b.n	800dd46 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800dd44:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 ffc4 	bl	800ecdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a20      	ldr	r2, [pc, #128]	; (800dddc <HAL_TIM_OC_Stop_IT+0x12c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d004      	beq.n	800dd68 <HAL_TIM_OC_Stop_IT+0xb8>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a1f      	ldr	r2, [pc, #124]	; (800dde0 <HAL_TIM_OC_Stop_IT+0x130>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d101      	bne.n	800dd6c <HAL_TIM_OC_Stop_IT+0xbc>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e000      	b.n	800dd6e <HAL_TIM_OC_Stop_IT+0xbe>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d017      	beq.n	800dda2 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6a1a      	ldr	r2, [r3, #32]
 800dd78:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10f      	bne.n	800dda2 <HAL_TIM_OC_Stop_IT+0xf2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6a1a      	ldr	r2, [r3, #32]
 800dd88:	f240 4344 	movw	r3, #1092	; 0x444
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d107      	bne.n	800dda2 <HAL_TIM_OC_Stop_IT+0xf2>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dda0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6a1a      	ldr	r2, [r3, #32]
 800dda8:	f241 1311 	movw	r3, #4369	; 0x1111
 800ddac:	4013      	ands	r3, r2
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10f      	bne.n	800ddd2 <HAL_TIM_OC_Stop_IT+0x122>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6a1a      	ldr	r2, [r3, #32]
 800ddb8:	f240 4344 	movw	r3, #1092	; 0x444
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d107      	bne.n	800ddd2 <HAL_TIM_OC_Stop_IT+0x122>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f022 0201 	bic.w	r2, r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40010400 	.word	0x40010400

0800dde4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e01d      	b.n	800de32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 f815 	bl	800de3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2202      	movs	r2, #2
 800de14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	3304      	adds	r3, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f000 fc70 	bl	800e708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800de42:	bf00      	nop
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
	...

0800de50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2201      	movs	r2, #1
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 ff3a 	bl	800ecdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a15      	ldr	r2, [pc, #84]	; (800dec4 <HAL_TIM_PWM_Start+0x74>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d004      	beq.n	800de7c <HAL_TIM_PWM_Start+0x2c>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a14      	ldr	r2, [pc, #80]	; (800dec8 <HAL_TIM_PWM_Start+0x78>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d101      	bne.n	800de80 <HAL_TIM_PWM_Start+0x30>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <HAL_TIM_PWM_Start+0x32>
 800de80:	2300      	movs	r3, #0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d007      	beq.n	800de96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f003 0307 	and.w	r3, r3, #7
 800dea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b06      	cmp	r3, #6
 800dea6:	d007      	beq.n	800deb8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f042 0201 	orr.w	r2, r2, #1
 800deb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	40010000 	.word	0x40010000
 800dec8:	40010400 	.word	0x40010400

0800decc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	e083      	b.n	800dfe8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fc fdd1 	bl	800aa9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2202      	movs	r2, #2
 800defe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	6812      	ldr	r2, [r2, #0]
 800df0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df10:	f023 0307 	bic.w	r3, r3, #7
 800df14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3304      	adds	r3, #4
 800df1e:	4619      	mov	r1, r3
 800df20:	4610      	mov	r0, r2
 800df22:	f000 fbf1 	bl	800e708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	6a1b      	ldr	r3, [r3, #32]
 800df3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	4313      	orrs	r3, r2
 800df46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df4e:	f023 0303 	bic.w	r3, r3, #3
 800df52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	689a      	ldr	r2, [r3, #8]
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	021b      	lsls	r3, r3, #8
 800df5e:	4313      	orrs	r3, r2
 800df60:	693a      	ldr	r2, [r7, #16]
 800df62:	4313      	orrs	r3, r2
 800df64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800df6c:	f023 030c 	bic.w	r3, r3, #12
 800df70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	68da      	ldr	r2, [r3, #12]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	021b      	lsls	r3, r3, #8
 800df88:	4313      	orrs	r3, r2
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	011a      	lsls	r2, r3, #4
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	031b      	lsls	r3, r3, #12
 800df9c:	4313      	orrs	r3, r2
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800dfaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800dfb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	695b      	ldr	r3, [r3, #20]
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <HAL_TIM_Encoder_Start+0x16>
 800e000:	2b04      	cmp	r3, #4
 800e002:	d008      	beq.n	800e016 <HAL_TIM_Encoder_Start+0x26>
 800e004:	e00f      	b.n	800e026 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2201      	movs	r2, #1
 800e00c:	2100      	movs	r1, #0
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 fe64 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e014:	e016      	b.n	800e044 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2201      	movs	r2, #1
 800e01c:	2104      	movs	r1, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fe5c 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e024:	e00e      	b.n	800e044 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2201      	movs	r2, #1
 800e02c:	2100      	movs	r1, #0
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fe54 	bl	800ecdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2201      	movs	r2, #1
 800e03a:	2104      	movs	r1, #4
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 fe4d 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e042:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 0201 	orr.w	r2, r2, #1
 800e052:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <HAL_TIM_Encoder_Stop+0x16>
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d008      	beq.n	800e084 <HAL_TIM_Encoder_Stop+0x26>
 800e072:	e00f      	b.n	800e094 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2200      	movs	r2, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 fe2d 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e082:	e016      	b.n	800e0b2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2200      	movs	r2, #0
 800e08a:	2104      	movs	r1, #4
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 fe25 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e092:	e00e      	b.n	800e0b2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2200      	movs	r2, #0
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 fe1d 	bl	800ecdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2104      	movs	r1, #4
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 fe16 	bl	800ecdc <TIM_CCxChannelCmd>
      break;
 800e0b0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6a1a      	ldr	r2, [r3, #32]
 800e0b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800e0bc:	4013      	ands	r3, r2
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10f      	bne.n	800e0e2 <HAL_TIM_Encoder_Stop+0x84>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6a1a      	ldr	r2, [r3, #32]
 800e0c8:	f240 4344 	movw	r3, #1092	; 0x444
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d107      	bne.n	800e0e2 <HAL_TIM_Encoder_Stop+0x84>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f022 0201 	bic.w	r2, r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	f003 0302 	and.w	r3, r3, #2
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d122      	bne.n	800e148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	f003 0302 	and.w	r3, r3, #2
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d11b      	bne.n	800e148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f06f 0202 	mvn.w	r2, #2
 800e118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	f003 0303 	and.w	r3, r3, #3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 facb 	bl	800e6ca <HAL_TIM_IC_CaptureCallback>
 800e134:	e005      	b.n	800e142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fabd 	bl	800e6b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 face 	bl	800e6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	691b      	ldr	r3, [r3, #16]
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b04      	cmp	r3, #4
 800e154:	d122      	bne.n	800e19c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	f003 0304 	and.w	r3, r3, #4
 800e160:	2b04      	cmp	r3, #4
 800e162:	d11b      	bne.n	800e19c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f06f 0204 	mvn.w	r2, #4
 800e16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2202      	movs	r2, #2
 800e172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	699b      	ldr	r3, [r3, #24]
 800e17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 faa1 	bl	800e6ca <HAL_TIM_IC_CaptureCallback>
 800e188:	e005      	b.n	800e196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fa93 	bl	800e6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 faa4 	bl	800e6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	f003 0308 	and.w	r3, r3, #8
 800e1a6:	2b08      	cmp	r3, #8
 800e1a8:	d122      	bne.n	800e1f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	f003 0308 	and.w	r3, r3, #8
 800e1b4:	2b08      	cmp	r3, #8
 800e1b6:	d11b      	bne.n	800e1f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f06f 0208 	mvn.w	r2, #8
 800e1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2204      	movs	r2, #4
 800e1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	f003 0303 	and.w	r3, r3, #3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fa77 	bl	800e6ca <HAL_TIM_IC_CaptureCallback>
 800e1dc:	e005      	b.n	800e1ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fa69 	bl	800e6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fa7a 	bl	800e6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	f003 0310 	and.w	r3, r3, #16
 800e1fa:	2b10      	cmp	r3, #16
 800e1fc:	d122      	bne.n	800e244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	f003 0310 	and.w	r3, r3, #16
 800e208:	2b10      	cmp	r3, #16
 800e20a:	d11b      	bne.n	800e244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f06f 0210 	mvn.w	r2, #16
 800e214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2208      	movs	r2, #8
 800e21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e226:	2b00      	cmp	r3, #0
 800e228:	d003      	beq.n	800e232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fa4d 	bl	800e6ca <HAL_TIM_IC_CaptureCallback>
 800e230:	e005      	b.n	800e23e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fa3f 	bl	800e6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 fa50 	bl	800e6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d10e      	bne.n	800e270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f003 0301 	and.w	r3, r3, #1
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d107      	bne.n	800e270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f06f 0201 	mvn.w	r2, #1
 800e268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7fb f92a 	bl	80094c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27a:	2b80      	cmp	r3, #128	; 0x80
 800e27c:	d10e      	bne.n	800e29c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e288:	2b80      	cmp	r3, #128	; 0x80
 800e28a:	d107      	bne.n	800e29c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fee8 	bl	800f06c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a6:	2b40      	cmp	r3, #64	; 0x40
 800e2a8:	d10e      	bne.n	800e2c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b4:	2b40      	cmp	r3, #64	; 0x40
 800e2b6:	d107      	bne.n	800e2c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fa15 	bl	800e6f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	f003 0320 	and.w	r3, r3, #32
 800e2d2:	2b20      	cmp	r3, #32
 800e2d4:	d10e      	bne.n	800e2f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	f003 0320 	and.w	r3, r3, #32
 800e2e0:	2b20      	cmp	r3, #32
 800e2e2:	d107      	bne.n	800e2f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f06f 0220 	mvn.w	r2, #32
 800e2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 feb2 	bl	800f058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <HAL_TIM_OC_ConfigChannel+0x1a>
 800e312:	2302      	movs	r3, #2
 800e314:	e04e      	b.n	800e3b4 <HAL_TIM_OC_ConfigChannel+0xb8>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2202      	movs	r2, #2
 800e322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b0c      	cmp	r3, #12
 800e32a:	d839      	bhi.n	800e3a0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800e32c:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <HAL_TIM_OC_ConfigChannel+0x38>)
 800e32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e332:	bf00      	nop
 800e334:	0800e369 	.word	0x0800e369
 800e338:	0800e3a1 	.word	0x0800e3a1
 800e33c:	0800e3a1 	.word	0x0800e3a1
 800e340:	0800e3a1 	.word	0x0800e3a1
 800e344:	0800e377 	.word	0x0800e377
 800e348:	0800e3a1 	.word	0x0800e3a1
 800e34c:	0800e3a1 	.word	0x0800e3a1
 800e350:	0800e3a1 	.word	0x0800e3a1
 800e354:	0800e385 	.word	0x0800e385
 800e358:	0800e3a1 	.word	0x0800e3a1
 800e35c:	0800e3a1 	.word	0x0800e3a1
 800e360:	0800e3a1 	.word	0x0800e3a1
 800e364:	0800e393 	.word	0x0800e393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 fa6a 	bl	800e848 <TIM_OC1_SetConfig>
      break;
 800e374:	e015      	b.n	800e3a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68b9      	ldr	r1, [r7, #8]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 fad3 	bl	800e928 <TIM_OC2_SetConfig>
      break;
 800e382:	e00e      	b.n	800e3a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68b9      	ldr	r1, [r7, #8]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f000 fb42 	bl	800ea14 <TIM_OC3_SetConfig>
      break;
 800e390:	e007      	b.n	800e3a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fbaf 	bl	800eafc <TIM_OC4_SetConfig>
      break;
 800e39e:	e000      	b.n	800e3a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800e3a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e0b4      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b0c      	cmp	r3, #12
 800e3ea:	f200 809f 	bhi.w	800e52c <HAL_TIM_PWM_ConfigChannel+0x170>
 800e3ee:	a201      	add	r2, pc, #4	; (adr r2, 800e3f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f4:	0800e429 	.word	0x0800e429
 800e3f8:	0800e52d 	.word	0x0800e52d
 800e3fc:	0800e52d 	.word	0x0800e52d
 800e400:	0800e52d 	.word	0x0800e52d
 800e404:	0800e469 	.word	0x0800e469
 800e408:	0800e52d 	.word	0x0800e52d
 800e40c:	0800e52d 	.word	0x0800e52d
 800e410:	0800e52d 	.word	0x0800e52d
 800e414:	0800e4ab 	.word	0x0800e4ab
 800e418:	0800e52d 	.word	0x0800e52d
 800e41c:	0800e52d 	.word	0x0800e52d
 800e420:	0800e52d 	.word	0x0800e52d
 800e424:	0800e4eb 	.word	0x0800e4eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68b9      	ldr	r1, [r7, #8]
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 fa0a 	bl	800e848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	699a      	ldr	r2, [r3, #24]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f042 0208 	orr.w	r2, r2, #8
 800e442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f022 0204 	bic.w	r2, r2, #4
 800e452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6999      	ldr	r1, [r3, #24]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	691a      	ldr	r2, [r3, #16]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	430a      	orrs	r2, r1
 800e464:	619a      	str	r2, [r3, #24]
      break;
 800e466:	e062      	b.n	800e52e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68b9      	ldr	r1, [r7, #8]
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 fa5a 	bl	800e928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	699a      	ldr	r2, [r3, #24]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	699a      	ldr	r2, [r3, #24]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	6999      	ldr	r1, [r3, #24]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	021a      	lsls	r2, r3, #8
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	619a      	str	r2, [r3, #24]
      break;
 800e4a8:	e041      	b.n	800e52e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68b9      	ldr	r1, [r7, #8]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f000 faaf 	bl	800ea14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	69da      	ldr	r2, [r3, #28]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f042 0208 	orr.w	r2, r2, #8
 800e4c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	69da      	ldr	r2, [r3, #28]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f022 0204 	bic.w	r2, r2, #4
 800e4d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	69d9      	ldr	r1, [r3, #28]
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	691a      	ldr	r2, [r3, #16]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	61da      	str	r2, [r3, #28]
      break;
 800e4e8:	e021      	b.n	800e52e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68b9      	ldr	r1, [r7, #8]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 fb03 	bl	800eafc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	69da      	ldr	r2, [r3, #28]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	69da      	ldr	r2, [r3, #28]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	69d9      	ldr	r1, [r3, #28]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	021a      	lsls	r2, r3, #8
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	430a      	orrs	r2, r1
 800e528:	61da      	str	r2, [r3, #28]
      break;
 800e52a:	e000      	b.n	800e52e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e52c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d101      	bne.n	800e560 <HAL_TIM_ConfigClockSource+0x18>
 800e55c:	2302      	movs	r3, #2
 800e55e:	e0a6      	b.n	800e6ae <HAL_TIM_ConfigClockSource+0x166>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2202      	movs	r2, #2
 800e56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e57e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b40      	cmp	r3, #64	; 0x40
 800e596:	d067      	beq.n	800e668 <HAL_TIM_ConfigClockSource+0x120>
 800e598:	2b40      	cmp	r3, #64	; 0x40
 800e59a:	d80b      	bhi.n	800e5b4 <HAL_TIM_ConfigClockSource+0x6c>
 800e59c:	2b10      	cmp	r3, #16
 800e59e:	d073      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0x140>
 800e5a0:	2b10      	cmp	r3, #16
 800e5a2:	d802      	bhi.n	800e5aa <HAL_TIM_ConfigClockSource+0x62>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d06f      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e5a8:	e078      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	d06c      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0x140>
 800e5ae:	2b30      	cmp	r3, #48	; 0x30
 800e5b0:	d06a      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e5b2:	e073      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e5b4:	2b70      	cmp	r3, #112	; 0x70
 800e5b6:	d00d      	beq.n	800e5d4 <HAL_TIM_ConfigClockSource+0x8c>
 800e5b8:	2b70      	cmp	r3, #112	; 0x70
 800e5ba:	d804      	bhi.n	800e5c6 <HAL_TIM_ConfigClockSource+0x7e>
 800e5bc:	2b50      	cmp	r3, #80	; 0x50
 800e5be:	d033      	beq.n	800e628 <HAL_TIM_ConfigClockSource+0xe0>
 800e5c0:	2b60      	cmp	r3, #96	; 0x60
 800e5c2:	d041      	beq.n	800e648 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e5c4:	e06a      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5ca:	d066      	beq.n	800e69a <HAL_TIM_ConfigClockSource+0x152>
 800e5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5d0:	d017      	beq.n	800e602 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e5d2:	e063      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	6899      	ldr	r1, [r3, #8]
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	685a      	ldr	r2, [r3, #4]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	f000 fb5a 	bl	800ec9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e5f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	609a      	str	r2, [r3, #8]
      break;
 800e600:	e04c      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	6899      	ldr	r1, [r3, #8]
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f000 fb43 	bl	800ec9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	689a      	ldr	r2, [r3, #8]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e624:	609a      	str	r2, [r3, #8]
      break;
 800e626:	e039      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	6859      	ldr	r1, [r3, #4]
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	461a      	mov	r2, r3
 800e636:	f000 fab7 	bl	800eba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2150      	movs	r1, #80	; 0x50
 800e640:	4618      	mov	r0, r3
 800e642:	f000 fb10 	bl	800ec66 <TIM_ITRx_SetConfig>
      break;
 800e646:	e029      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6818      	ldr	r0, [r3, #0]
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	6859      	ldr	r1, [r3, #4]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	461a      	mov	r2, r3
 800e656:	f000 fad6 	bl	800ec06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2160      	movs	r1, #96	; 0x60
 800e660:	4618      	mov	r0, r3
 800e662:	f000 fb00 	bl	800ec66 <TIM_ITRx_SetConfig>
      break;
 800e666:	e019      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	6859      	ldr	r1, [r3, #4]
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	461a      	mov	r2, r3
 800e676:	f000 fa97 	bl	800eba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2140      	movs	r1, #64	; 0x40
 800e680:	4618      	mov	r0, r3
 800e682:	f000 faf0 	bl	800ec66 <TIM_ITRx_SetConfig>
      break;
 800e686:	e009      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4619      	mov	r1, r3
 800e692:	4610      	mov	r0, r2
 800e694:	f000 fae7 	bl	800ec66 <TIM_ITRx_SetConfig>
      break;
 800e698:	e000      	b.n	800e69c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e69a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6be:	bf00      	nop
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6d2:	bf00      	nop
 800e6d4:	370c      	adds	r7, #12
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr

0800e6de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6e6:	bf00      	nop
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6fa:	bf00      	nop
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
	...

0800e708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	4a40      	ldr	r2, [pc, #256]	; (800e81c <TIM_Base_SetConfig+0x114>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d013      	beq.n	800e748 <TIM_Base_SetConfig+0x40>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e726:	d00f      	beq.n	800e748 <TIM_Base_SetConfig+0x40>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a3d      	ldr	r2, [pc, #244]	; (800e820 <TIM_Base_SetConfig+0x118>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d00b      	beq.n	800e748 <TIM_Base_SetConfig+0x40>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a3c      	ldr	r2, [pc, #240]	; (800e824 <TIM_Base_SetConfig+0x11c>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d007      	beq.n	800e748 <TIM_Base_SetConfig+0x40>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a3b      	ldr	r2, [pc, #236]	; (800e828 <TIM_Base_SetConfig+0x120>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d003      	beq.n	800e748 <TIM_Base_SetConfig+0x40>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a3a      	ldr	r2, [pc, #232]	; (800e82c <TIM_Base_SetConfig+0x124>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d108      	bne.n	800e75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4a2f      	ldr	r2, [pc, #188]	; (800e81c <TIM_Base_SetConfig+0x114>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d02b      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e768:	d027      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a2c      	ldr	r2, [pc, #176]	; (800e820 <TIM_Base_SetConfig+0x118>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d023      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a2b      	ldr	r2, [pc, #172]	; (800e824 <TIM_Base_SetConfig+0x11c>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d01f      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a2a      	ldr	r2, [pc, #168]	; (800e828 <TIM_Base_SetConfig+0x120>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d01b      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a29      	ldr	r2, [pc, #164]	; (800e82c <TIM_Base_SetConfig+0x124>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d017      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a28      	ldr	r2, [pc, #160]	; (800e830 <TIM_Base_SetConfig+0x128>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d013      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a27      	ldr	r2, [pc, #156]	; (800e834 <TIM_Base_SetConfig+0x12c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00f      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a26      	ldr	r2, [pc, #152]	; (800e838 <TIM_Base_SetConfig+0x130>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d00b      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a25      	ldr	r2, [pc, #148]	; (800e83c <TIM_Base_SetConfig+0x134>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d007      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a24      	ldr	r2, [pc, #144]	; (800e840 <TIM_Base_SetConfig+0x138>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d003      	beq.n	800e7ba <TIM_Base_SetConfig+0xb2>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a23      	ldr	r2, [pc, #140]	; (800e844 <TIM_Base_SetConfig+0x13c>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d108      	bne.n	800e7cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	689a      	ldr	r2, [r3, #8]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a0a      	ldr	r2, [pc, #40]	; (800e81c <TIM_Base_SetConfig+0x114>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d003      	beq.n	800e800 <TIM_Base_SetConfig+0xf8>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a0c      	ldr	r2, [pc, #48]	; (800e82c <TIM_Base_SetConfig+0x124>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d103      	bne.n	800e808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	691a      	ldr	r2, [r3, #16]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	615a      	str	r2, [r3, #20]
}
 800e80e:	bf00      	nop
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	40010000 	.word	0x40010000
 800e820:	40000400 	.word	0x40000400
 800e824:	40000800 	.word	0x40000800
 800e828:	40000c00 	.word	0x40000c00
 800e82c:	40010400 	.word	0x40010400
 800e830:	40014000 	.word	0x40014000
 800e834:	40014400 	.word	0x40014400
 800e838:	40014800 	.word	0x40014800
 800e83c:	40001800 	.word	0x40001800
 800e840:	40001c00 	.word	0x40001c00
 800e844:	40002000 	.word	0x40002000

0800e848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e848:	b480      	push	{r7}
 800e84a:	b087      	sub	sp, #28
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	f023 0201 	bic.w	r2, r3, #1
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	699b      	ldr	r3, [r3, #24]
 800e86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f023 0303 	bic.w	r3, r3, #3
 800e87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	4313      	orrs	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f023 0302 	bic.w	r3, r3, #2
 800e890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	4313      	orrs	r3, r2
 800e89a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a20      	ldr	r2, [pc, #128]	; (800e920 <TIM_OC1_SetConfig+0xd8>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d003      	beq.n	800e8ac <TIM_OC1_SetConfig+0x64>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a1f      	ldr	r2, [pc, #124]	; (800e924 <TIM_OC1_SetConfig+0xdc>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d10c      	bne.n	800e8c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f023 0308 	bic.w	r3, r3, #8
 800e8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	697a      	ldr	r2, [r7, #20]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f023 0304 	bic.w	r3, r3, #4
 800e8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a15      	ldr	r2, [pc, #84]	; (800e920 <TIM_OC1_SetConfig+0xd8>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d003      	beq.n	800e8d6 <TIM_OC1_SetConfig+0x8e>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a14      	ldr	r2, [pc, #80]	; (800e924 <TIM_OC1_SetConfig+0xdc>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d111      	bne.n	800e8fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	693a      	ldr	r2, [r7, #16]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	621a      	str	r2, [r3, #32]
}
 800e914:	bf00      	nop
 800e916:	371c      	adds	r7, #28
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	40010000 	.word	0x40010000
 800e924:	40010400 	.word	0x40010400

0800e928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e928:	b480      	push	{r7}
 800e92a:	b087      	sub	sp, #28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	f023 0210 	bic.w	r2, r3, #16
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e95e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4313      	orrs	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f023 0320 	bic.w	r3, r3, #32
 800e972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	011b      	lsls	r3, r3, #4
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4a22      	ldr	r2, [pc, #136]	; (800ea0c <TIM_OC2_SetConfig+0xe4>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d003      	beq.n	800e990 <TIM_OC2_SetConfig+0x68>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a21      	ldr	r2, [pc, #132]	; (800ea10 <TIM_OC2_SetConfig+0xe8>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d10d      	bne.n	800e9ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	011b      	lsls	r3, r3, #4
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a17      	ldr	r2, [pc, #92]	; (800ea0c <TIM_OC2_SetConfig+0xe4>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d003      	beq.n	800e9bc <TIM_OC2_SetConfig+0x94>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a16      	ldr	r2, [pc, #88]	; (800ea10 <TIM_OC2_SetConfig+0xe8>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d113      	bne.n	800e9e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	695b      	ldr	r3, [r3, #20]
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	693a      	ldr	r2, [r7, #16]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	699b      	ldr	r3, [r3, #24]
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	693a      	ldr	r2, [r7, #16]
 800e9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	621a      	str	r2, [r3, #32]
}
 800e9fe:	bf00      	nop
 800ea00:	371c      	adds	r7, #28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	40010000 	.word	0x40010000
 800ea10:	40010400 	.word	0x40010400

0800ea14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b087      	sub	sp, #28
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f023 0303 	bic.w	r3, r3, #3
 800ea4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	021b      	lsls	r3, r3, #8
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4a21      	ldr	r2, [pc, #132]	; (800eaf4 <TIM_OC3_SetConfig+0xe0>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d003      	beq.n	800ea7a <TIM_OC3_SetConfig+0x66>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a20      	ldr	r2, [pc, #128]	; (800eaf8 <TIM_OC3_SetConfig+0xe4>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d10d      	bne.n	800ea96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	021b      	lsls	r3, r3, #8
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a16      	ldr	r2, [pc, #88]	; (800eaf4 <TIM_OC3_SetConfig+0xe0>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d003      	beq.n	800eaa6 <TIM_OC3_SetConfig+0x92>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a15      	ldr	r2, [pc, #84]	; (800eaf8 <TIM_OC3_SetConfig+0xe4>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d113      	bne.n	800eace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	695b      	ldr	r3, [r3, #20]
 800eaba:	011b      	lsls	r3, r3, #4
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	699b      	ldr	r3, [r3, #24]
 800eac6:	011b      	lsls	r3, r3, #4
 800eac8:	693a      	ldr	r2, [r7, #16]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	685a      	ldr	r2, [r3, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	621a      	str	r2, [r3, #32]
}
 800eae8:	bf00      	nop
 800eaea:	371c      	adds	r7, #28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	40010000 	.word	0x40010000
 800eaf8:	40010400 	.word	0x40010400

0800eafc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	69db      	ldr	r3, [r3, #28]
 800eb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	021b      	lsls	r3, r3, #8
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	031b      	lsls	r3, r3, #12
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a12      	ldr	r2, [pc, #72]	; (800eba0 <TIM_OC4_SetConfig+0xa4>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_OC4_SetConfig+0x68>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a11      	ldr	r2, [pc, #68]	; (800eba4 <TIM_OC4_SetConfig+0xa8>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d109      	bne.n	800eb78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	019b      	lsls	r3, r3, #6
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	621a      	str	r2, [r3, #32]
}
 800eb92:	bf00      	nop
 800eb94:	371c      	adds	r7, #28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	40010000 	.word	0x40010000
 800eba4:	40010400 	.word	0x40010400

0800eba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b087      	sub	sp, #28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	f023 0201 	bic.w	r2, r3, #1
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ebd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	011b      	lsls	r3, r3, #4
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	f023 030a 	bic.w	r3, r3, #10
 800ebe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	693a      	ldr	r2, [r7, #16]
 800ebf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	621a      	str	r2, [r3, #32]
}
 800ebfa:	bf00      	nop
 800ebfc:	371c      	adds	r7, #28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b087      	sub	sp, #28
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	f023 0210 	bic.w	r2, r3, #16
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	699b      	ldr	r3, [r3, #24]
 800ec22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	031b      	lsls	r3, r3, #12
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ec42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	011b      	lsls	r3, r3, #4
 800ec48:	693a      	ldr	r2, [r7, #16]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	697a      	ldr	r2, [r7, #20]
 800ec52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	621a      	str	r2, [r3, #32]
}
 800ec5a:	bf00      	nop
 800ec5c:	371c      	adds	r7, #28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b085      	sub	sp, #20
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	f043 0307 	orr.w	r3, r3, #7
 800ec88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	609a      	str	r2, [r3, #8]
}
 800ec90:	bf00      	nop
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ecb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	021a      	lsls	r2, r3, #8
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	697a      	ldr	r2, [r7, #20]
 800ecce:	609a      	str	r2, [r3, #8]
}
 800ecd0:	bf00      	nop
 800ecd2:	371c      	adds	r7, #28
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	f003 031f 	and.w	r3, r3, #31
 800ecee:	2201      	movs	r2, #1
 800ecf0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a1a      	ldr	r2, [r3, #32]
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	43db      	mvns	r3, r3
 800ecfe:	401a      	ands	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6a1a      	ldr	r2, [r3, #32]
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f003 031f 	and.w	r3, r3, #31
 800ed0e:	6879      	ldr	r1, [r7, #4]
 800ed10:	fa01 f303 	lsl.w	r3, r1, r3
 800ed14:	431a      	orrs	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	621a      	str	r2, [r3, #32]
}
 800ed1a:	bf00      	nop
 800ed1c:	371c      	adds	r7, #28
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d00d      	beq.n	800ed52 <HAL_TIMEx_OCN_Start_IT+0x2c>
 800ed36:	2b08      	cmp	r3, #8
 800ed38:	d014      	beq.n	800ed64 <HAL_TIMEx_OCN_Start_IT+0x3e>
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d000      	beq.n	800ed40 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 800ed3e:	e01a      	b.n	800ed76 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	68da      	ldr	r2, [r3, #12]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f042 0202 	orr.w	r2, r2, #2
 800ed4e:	60da      	str	r2, [r3, #12]
      break;
 800ed50:	e011      	b.n	800ed76 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f042 0204 	orr.w	r2, r2, #4
 800ed60:	60da      	str	r2, [r3, #12]
      break;
 800ed62:	e008      	b.n	800ed76 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68da      	ldr	r2, [r3, #12]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f042 0208 	orr.w	r2, r2, #8
 800ed72:	60da      	str	r2, [r3, #12]
      break;
 800ed74:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68da      	ldr	r2, [r3, #12]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed84:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2204      	movs	r2, #4
 800ed8c:	6839      	ldr	r1, [r7, #0]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 f976 	bl	800f080 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eda2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f003 0307 	and.w	r3, r3, #7
 800edae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b06      	cmp	r3, #6
 800edb4:	d007      	beq.n	800edc6 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f042 0201 	orr.w	r2, r2, #1
 800edc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	2b04      	cmp	r3, #4
 800edde:	d00d      	beq.n	800edfc <HAL_TIMEx_OCN_Stop_IT+0x2c>
 800ede0:	2b08      	cmp	r3, #8
 800ede2:	d014      	beq.n	800ee0e <HAL_TIMEx_OCN_Stop_IT+0x3e>
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d000      	beq.n	800edea <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800ede8:	e01a      	b.n	800ee20 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68da      	ldr	r2, [r3, #12]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f022 0202 	bic.w	r2, r2, #2
 800edf8:	60da      	str	r2, [r3, #12]
      break;
 800edfa:	e011      	b.n	800ee20 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68da      	ldr	r2, [r3, #12]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f022 0204 	bic.w	r2, r2, #4
 800ee0a:	60da      	str	r2, [r3, #12]
      break;
 800ee0c:	e008      	b.n	800ee20 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68da      	ldr	r2, [r3, #12]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f022 0208 	bic.w	r2, r2, #8
 800ee1c:	60da      	str	r2, [r3, #12]
      break;
 800ee1e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2200      	movs	r2, #0
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f000 f929 	bl	800f080 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6a1b      	ldr	r3, [r3, #32]
 800ee34:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	f240 4344 	movw	r3, #1092	; 0x444
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d107      	bne.n	800ee52 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68da      	ldr	r2, [r3, #12]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee50:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6a1a      	ldr	r2, [r3, #32]
 800ee58:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10f      	bne.n	800ee82 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6a1a      	ldr	r2, [r3, #32]
 800ee68:	f240 4344 	movw	r3, #1092	; 0x444
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d107      	bne.n	800ee82 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6a1a      	ldr	r2, [r3, #32]
 800ee88:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10f      	bne.n	800eeb2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	6a1a      	ldr	r2, [r3, #32]
 800ee98:	f240 4344 	movw	r3, #1092	; 0x444
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d107      	bne.n	800eeb2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f022 0201 	bic.w	r2, r2, #1
 800eeb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d101      	bne.n	800eed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eed0:	2302      	movs	r3, #2
 800eed2:	e05a      	b.n	800ef8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2201      	movs	r2, #1
 800eed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2202      	movs	r2, #2
 800eee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eefa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	4313      	orrs	r3, r2
 800ef04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a21      	ldr	r2, [pc, #132]	; (800ef98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d022      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef20:	d01d      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a1d      	ldr	r2, [pc, #116]	; (800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d018      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a1b      	ldr	r2, [pc, #108]	; (800efa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d013      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a1a      	ldr	r2, [pc, #104]	; (800efa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d00e      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a18      	ldr	r2, [pc, #96]	; (800efa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d009      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a17      	ldr	r2, [pc, #92]	; (800efac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d004      	beq.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a15      	ldr	r2, [pc, #84]	; (800efb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d10c      	bne.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	40010000 	.word	0x40010000
 800ef9c:	40000400 	.word	0x40000400
 800efa0:	40000800 	.word	0x40000800
 800efa4:	40000c00 	.word	0x40000c00
 800efa8:	40010400 	.word	0x40010400
 800efac:	40014000 	.word	0x40014000
 800efb0:	40001800 	.word	0x40001800

0800efb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800efbe:	2300      	movs	r3, #0
 800efc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d101      	bne.n	800efd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800efcc:	2302      	movs	r3, #2
 800efce:	e03d      	b.n	800f04c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2201      	movs	r2, #1
 800efd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	4313      	orrs	r3, r2
 800f000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	4313      	orrs	r3, r2
 800f02a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	69db      	ldr	r3, [r3, #28]
 800f036:	4313      	orrs	r3, r2
 800f038:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f080:	b480      	push	{r7}
 800f082:	b087      	sub	sp, #28
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	f003 031f 	and.w	r3, r3, #31
 800f092:	2204      	movs	r2, #4
 800f094:	fa02 f303 	lsl.w	r3, r2, r3
 800f098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6a1a      	ldr	r2, [r3, #32]
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	43db      	mvns	r3, r3
 800f0a2:	401a      	ands	r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6a1a      	ldr	r2, [r3, #32]
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f003 031f 	and.w	r3, r3, #31
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	fa01 f303 	lsl.w	r3, r1, r3
 800f0b8:	431a      	orrs	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	621a      	str	r2, [r3, #32]
}
 800f0be:	bf00      	nop
 800f0c0:	371c      	adds	r7, #28
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	e03f      	b.n	800f15c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d106      	bne.n	800f0f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7fb fe05 	bl	800ad00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2224      	movs	r2, #36	; 0x24
 800f0fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68da      	ldr	r2, [r3, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f10c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f90c 	bl	800f32c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	691a      	ldr	r2, [r3, #16]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	695a      	ldr	r2, [r3, #20]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f132:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68da      	ldr	r2, [r3, #12]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f142:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2220      	movs	r2, #32
 800f14e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2220      	movs	r2, #32
 800f156:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f15a:	2300      	movs	r3, #0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af02      	add	r7, sp, #8
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	603b      	str	r3, [r7, #0]
 800f170:	4613      	mov	r3, r2
 800f172:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f174:	2300      	movs	r3, #0
 800f176:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b20      	cmp	r3, #32
 800f182:	f040 8083 	bne.w	800f28c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <HAL_UART_Transmit+0x2e>
 800f18c:	88fb      	ldrh	r3, [r7, #6]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	e07b      	b.n	800f28e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d101      	bne.n	800f1a4 <HAL_UART_Transmit+0x40>
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	e074      	b.n	800f28e <HAL_UART_Transmit+0x12a>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2221      	movs	r2, #33	; 0x21
 800f1b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f1ba:	f7fc f983 	bl	800b4c4 <HAL_GetTick>
 800f1be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	88fa      	ldrh	r2, [r7, #6]
 800f1c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	88fa      	ldrh	r2, [r7, #6]
 800f1ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f1d4:	e042      	b.n	800f25c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1ec:	d122      	bne.n	800f234 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	9300      	str	r3, [sp, #0]
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2180      	movs	r1, #128	; 0x80
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f000 f84c 	bl	800f296 <UART_WaitOnFlagUntilTimeout>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f204:	2303      	movs	r3, #3
 800f206:	e042      	b.n	800f28e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	461a      	mov	r2, r3
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f21a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d103      	bne.n	800f22c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	3302      	adds	r3, #2
 800f228:	60bb      	str	r3, [r7, #8]
 800f22a:	e017      	b.n	800f25c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	3301      	adds	r3, #1
 800f230:	60bb      	str	r3, [r7, #8]
 800f232:	e013      	b.n	800f25c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	9300      	str	r3, [sp, #0]
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2200      	movs	r2, #0
 800f23c:	2180      	movs	r1, #128	; 0x80
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f000 f829 	bl	800f296 <UART_WaitOnFlagUntilTimeout>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e01f      	b.n	800f28e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	1c5a      	adds	r2, r3, #1
 800f252:	60ba      	str	r2, [r7, #8]
 800f254:	781a      	ldrb	r2, [r3, #0]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f260:	b29b      	uxth	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1b7      	bne.n	800f1d6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2200      	movs	r2, #0
 800f26e:	2140      	movs	r1, #64	; 0x40
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 f810 	bl	800f296 <UART_WaitOnFlagUntilTimeout>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800f27c:	2303      	movs	r3, #3
 800f27e:	e006      	b.n	800f28e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2220      	movs	r2, #32
 800f284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	e000      	b.n	800f28e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800f28c:	2302      	movs	r3, #2
  }
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	603b      	str	r3, [r7, #0]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2a6:	e02c      	b.n	800f302 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ae:	d028      	beq.n	800f302 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2b6:	f7fc f905 	bl	800b4c4 <HAL_GetTick>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	69ba      	ldr	r2, [r7, #24]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d21d      	bcs.n	800f302 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68da      	ldr	r2, [r3, #12]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	695a      	ldr	r2, [r3, #20]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f022 0201 	bic.w	r2, r2, #1
 800f2e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2220      	movs	r2, #32
 800f2ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2220      	movs	r2, #32
 800f2f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800f2fe:	2303      	movs	r3, #3
 800f300:	e00f      	b.n	800f322 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	4013      	ands	r3, r2
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	429a      	cmp	r2, r3
 800f310:	bf0c      	ite	eq
 800f312:	2301      	moveq	r3, #1
 800f314:	2300      	movne	r3, #0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	461a      	mov	r2, r3
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d0c3      	beq.n	800f2a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	b085      	sub	sp, #20
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	431a      	orrs	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	431a      	orrs	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	4313      	orrs	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f36e:	f023 030c 	bic.w	r3, r3, #12
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	6812      	ldr	r2, [r2, #0]
 800f376:	68f9      	ldr	r1, [r7, #12]
 800f378:	430b      	orrs	r3, r1
 800f37a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	695b      	ldr	r3, [r3, #20]
 800f382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	430a      	orrs	r2, r1
 800f390:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	69db      	ldr	r3, [r3, #28]
 800f396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f39a:	f040 818b 	bne.w	800f6b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4ac1      	ldr	r2, [pc, #772]	; (800f6a8 <UART_SetConfig+0x37c>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d005      	beq.n	800f3b4 <UART_SetConfig+0x88>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4abf      	ldr	r2, [pc, #764]	; (800f6ac <UART_SetConfig+0x380>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	f040 80bd 	bne.w	800f52e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f3b4:	f7fe fad0 	bl	800d958 <HAL_RCC_GetPCLK2Freq>
 800f3b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	461d      	mov	r5, r3
 800f3be:	f04f 0600 	mov.w	r6, #0
 800f3c2:	46a8      	mov	r8, r5
 800f3c4:	46b1      	mov	r9, r6
 800f3c6:	eb18 0308 	adds.w	r3, r8, r8
 800f3ca:	eb49 0409 	adc.w	r4, r9, r9
 800f3ce:	4698      	mov	r8, r3
 800f3d0:	46a1      	mov	r9, r4
 800f3d2:	eb18 0805 	adds.w	r8, r8, r5
 800f3d6:	eb49 0906 	adc.w	r9, r9, r6
 800f3da:	f04f 0100 	mov.w	r1, #0
 800f3de:	f04f 0200 	mov.w	r2, #0
 800f3e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f3e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f3ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f3ee:	4688      	mov	r8, r1
 800f3f0:	4691      	mov	r9, r2
 800f3f2:	eb18 0005 	adds.w	r0, r8, r5
 800f3f6:	eb49 0106 	adc.w	r1, r9, r6
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	461d      	mov	r5, r3
 800f400:	f04f 0600 	mov.w	r6, #0
 800f404:	196b      	adds	r3, r5, r5
 800f406:	eb46 0406 	adc.w	r4, r6, r6
 800f40a:	461a      	mov	r2, r3
 800f40c:	4623      	mov	r3, r4
 800f40e:	f7f9 fb53 	bl	8008ab8 <__aeabi_uldivmod>
 800f412:	4603      	mov	r3, r0
 800f414:	460c      	mov	r4, r1
 800f416:	461a      	mov	r2, r3
 800f418:	4ba5      	ldr	r3, [pc, #660]	; (800f6b0 <UART_SetConfig+0x384>)
 800f41a:	fba3 2302 	umull	r2, r3, r3, r2
 800f41e:	095b      	lsrs	r3, r3, #5
 800f420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	461d      	mov	r5, r3
 800f428:	f04f 0600 	mov.w	r6, #0
 800f42c:	46a9      	mov	r9, r5
 800f42e:	46b2      	mov	sl, r6
 800f430:	eb19 0309 	adds.w	r3, r9, r9
 800f434:	eb4a 040a 	adc.w	r4, sl, sl
 800f438:	4699      	mov	r9, r3
 800f43a:	46a2      	mov	sl, r4
 800f43c:	eb19 0905 	adds.w	r9, r9, r5
 800f440:	eb4a 0a06 	adc.w	sl, sl, r6
 800f444:	f04f 0100 	mov.w	r1, #0
 800f448:	f04f 0200 	mov.w	r2, #0
 800f44c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f458:	4689      	mov	r9, r1
 800f45a:	4692      	mov	sl, r2
 800f45c:	eb19 0005 	adds.w	r0, r9, r5
 800f460:	eb4a 0106 	adc.w	r1, sl, r6
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	461d      	mov	r5, r3
 800f46a:	f04f 0600 	mov.w	r6, #0
 800f46e:	196b      	adds	r3, r5, r5
 800f470:	eb46 0406 	adc.w	r4, r6, r6
 800f474:	461a      	mov	r2, r3
 800f476:	4623      	mov	r3, r4
 800f478:	f7f9 fb1e 	bl	8008ab8 <__aeabi_uldivmod>
 800f47c:	4603      	mov	r3, r0
 800f47e:	460c      	mov	r4, r1
 800f480:	461a      	mov	r2, r3
 800f482:	4b8b      	ldr	r3, [pc, #556]	; (800f6b0 <UART_SetConfig+0x384>)
 800f484:	fba3 1302 	umull	r1, r3, r3, r2
 800f488:	095b      	lsrs	r3, r3, #5
 800f48a:	2164      	movs	r1, #100	; 0x64
 800f48c:	fb01 f303 	mul.w	r3, r1, r3
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	3332      	adds	r3, #50	; 0x32
 800f496:	4a86      	ldr	r2, [pc, #536]	; (800f6b0 <UART_SetConfig+0x384>)
 800f498:	fba2 2303 	umull	r2, r3, r2, r3
 800f49c:	095b      	lsrs	r3, r3, #5
 800f49e:	005b      	lsls	r3, r3, #1
 800f4a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f4a4:	4498      	add	r8, r3
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	461d      	mov	r5, r3
 800f4aa:	f04f 0600 	mov.w	r6, #0
 800f4ae:	46a9      	mov	r9, r5
 800f4b0:	46b2      	mov	sl, r6
 800f4b2:	eb19 0309 	adds.w	r3, r9, r9
 800f4b6:	eb4a 040a 	adc.w	r4, sl, sl
 800f4ba:	4699      	mov	r9, r3
 800f4bc:	46a2      	mov	sl, r4
 800f4be:	eb19 0905 	adds.w	r9, r9, r5
 800f4c2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f4c6:	f04f 0100 	mov.w	r1, #0
 800f4ca:	f04f 0200 	mov.w	r2, #0
 800f4ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f4d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f4da:	4689      	mov	r9, r1
 800f4dc:	4692      	mov	sl, r2
 800f4de:	eb19 0005 	adds.w	r0, r9, r5
 800f4e2:	eb4a 0106 	adc.w	r1, sl, r6
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	461d      	mov	r5, r3
 800f4ec:	f04f 0600 	mov.w	r6, #0
 800f4f0:	196b      	adds	r3, r5, r5
 800f4f2:	eb46 0406 	adc.w	r4, r6, r6
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	4623      	mov	r3, r4
 800f4fa:	f7f9 fadd 	bl	8008ab8 <__aeabi_uldivmod>
 800f4fe:	4603      	mov	r3, r0
 800f500:	460c      	mov	r4, r1
 800f502:	461a      	mov	r2, r3
 800f504:	4b6a      	ldr	r3, [pc, #424]	; (800f6b0 <UART_SetConfig+0x384>)
 800f506:	fba3 1302 	umull	r1, r3, r3, r2
 800f50a:	095b      	lsrs	r3, r3, #5
 800f50c:	2164      	movs	r1, #100	; 0x64
 800f50e:	fb01 f303 	mul.w	r3, r1, r3
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	3332      	adds	r3, #50	; 0x32
 800f518:	4a65      	ldr	r2, [pc, #404]	; (800f6b0 <UART_SetConfig+0x384>)
 800f51a:	fba2 2303 	umull	r2, r3, r2, r3
 800f51e:	095b      	lsrs	r3, r3, #5
 800f520:	f003 0207 	and.w	r2, r3, #7
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4442      	add	r2, r8
 800f52a:	609a      	str	r2, [r3, #8]
 800f52c:	e26f      	b.n	800fa0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f52e:	f7fe f9ff 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 800f532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	461d      	mov	r5, r3
 800f538:	f04f 0600 	mov.w	r6, #0
 800f53c:	46a8      	mov	r8, r5
 800f53e:	46b1      	mov	r9, r6
 800f540:	eb18 0308 	adds.w	r3, r8, r8
 800f544:	eb49 0409 	adc.w	r4, r9, r9
 800f548:	4698      	mov	r8, r3
 800f54a:	46a1      	mov	r9, r4
 800f54c:	eb18 0805 	adds.w	r8, r8, r5
 800f550:	eb49 0906 	adc.w	r9, r9, r6
 800f554:	f04f 0100 	mov.w	r1, #0
 800f558:	f04f 0200 	mov.w	r2, #0
 800f55c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f568:	4688      	mov	r8, r1
 800f56a:	4691      	mov	r9, r2
 800f56c:	eb18 0005 	adds.w	r0, r8, r5
 800f570:	eb49 0106 	adc.w	r1, r9, r6
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	461d      	mov	r5, r3
 800f57a:	f04f 0600 	mov.w	r6, #0
 800f57e:	196b      	adds	r3, r5, r5
 800f580:	eb46 0406 	adc.w	r4, r6, r6
 800f584:	461a      	mov	r2, r3
 800f586:	4623      	mov	r3, r4
 800f588:	f7f9 fa96 	bl	8008ab8 <__aeabi_uldivmod>
 800f58c:	4603      	mov	r3, r0
 800f58e:	460c      	mov	r4, r1
 800f590:	461a      	mov	r2, r3
 800f592:	4b47      	ldr	r3, [pc, #284]	; (800f6b0 <UART_SetConfig+0x384>)
 800f594:	fba3 2302 	umull	r2, r3, r3, r2
 800f598:	095b      	lsrs	r3, r3, #5
 800f59a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	461d      	mov	r5, r3
 800f5a2:	f04f 0600 	mov.w	r6, #0
 800f5a6:	46a9      	mov	r9, r5
 800f5a8:	46b2      	mov	sl, r6
 800f5aa:	eb19 0309 	adds.w	r3, r9, r9
 800f5ae:	eb4a 040a 	adc.w	r4, sl, sl
 800f5b2:	4699      	mov	r9, r3
 800f5b4:	46a2      	mov	sl, r4
 800f5b6:	eb19 0905 	adds.w	r9, r9, r5
 800f5ba:	eb4a 0a06 	adc.w	sl, sl, r6
 800f5be:	f04f 0100 	mov.w	r1, #0
 800f5c2:	f04f 0200 	mov.w	r2, #0
 800f5c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f5ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f5ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f5d2:	4689      	mov	r9, r1
 800f5d4:	4692      	mov	sl, r2
 800f5d6:	eb19 0005 	adds.w	r0, r9, r5
 800f5da:	eb4a 0106 	adc.w	r1, sl, r6
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	461d      	mov	r5, r3
 800f5e4:	f04f 0600 	mov.w	r6, #0
 800f5e8:	196b      	adds	r3, r5, r5
 800f5ea:	eb46 0406 	adc.w	r4, r6, r6
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4623      	mov	r3, r4
 800f5f2:	f7f9 fa61 	bl	8008ab8 <__aeabi_uldivmod>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4b2c      	ldr	r3, [pc, #176]	; (800f6b0 <UART_SetConfig+0x384>)
 800f5fe:	fba3 1302 	umull	r1, r3, r3, r2
 800f602:	095b      	lsrs	r3, r3, #5
 800f604:	2164      	movs	r1, #100	; 0x64
 800f606:	fb01 f303 	mul.w	r3, r1, r3
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	3332      	adds	r3, #50	; 0x32
 800f610:	4a27      	ldr	r2, [pc, #156]	; (800f6b0 <UART_SetConfig+0x384>)
 800f612:	fba2 2303 	umull	r2, r3, r2, r3
 800f616:	095b      	lsrs	r3, r3, #5
 800f618:	005b      	lsls	r3, r3, #1
 800f61a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f61e:	4498      	add	r8, r3
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	461d      	mov	r5, r3
 800f624:	f04f 0600 	mov.w	r6, #0
 800f628:	46a9      	mov	r9, r5
 800f62a:	46b2      	mov	sl, r6
 800f62c:	eb19 0309 	adds.w	r3, r9, r9
 800f630:	eb4a 040a 	adc.w	r4, sl, sl
 800f634:	4699      	mov	r9, r3
 800f636:	46a2      	mov	sl, r4
 800f638:	eb19 0905 	adds.w	r9, r9, r5
 800f63c:	eb4a 0a06 	adc.w	sl, sl, r6
 800f640:	f04f 0100 	mov.w	r1, #0
 800f644:	f04f 0200 	mov.w	r2, #0
 800f648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f64c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f654:	4689      	mov	r9, r1
 800f656:	4692      	mov	sl, r2
 800f658:	eb19 0005 	adds.w	r0, r9, r5
 800f65c:	eb4a 0106 	adc.w	r1, sl, r6
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	461d      	mov	r5, r3
 800f666:	f04f 0600 	mov.w	r6, #0
 800f66a:	196b      	adds	r3, r5, r5
 800f66c:	eb46 0406 	adc.w	r4, r6, r6
 800f670:	461a      	mov	r2, r3
 800f672:	4623      	mov	r3, r4
 800f674:	f7f9 fa20 	bl	8008ab8 <__aeabi_uldivmod>
 800f678:	4603      	mov	r3, r0
 800f67a:	460c      	mov	r4, r1
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b0c      	ldr	r3, [pc, #48]	; (800f6b0 <UART_SetConfig+0x384>)
 800f680:	fba3 1302 	umull	r1, r3, r3, r2
 800f684:	095b      	lsrs	r3, r3, #5
 800f686:	2164      	movs	r1, #100	; 0x64
 800f688:	fb01 f303 	mul.w	r3, r1, r3
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	3332      	adds	r3, #50	; 0x32
 800f692:	4a07      	ldr	r2, [pc, #28]	; (800f6b0 <UART_SetConfig+0x384>)
 800f694:	fba2 2303 	umull	r2, r3, r2, r3
 800f698:	095b      	lsrs	r3, r3, #5
 800f69a:	f003 0207 	and.w	r2, r3, #7
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4442      	add	r2, r8
 800f6a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f6a6:	e1b2      	b.n	800fa0e <UART_SetConfig+0x6e2>
 800f6a8:	40011000 	.word	0x40011000
 800f6ac:	40011400 	.word	0x40011400
 800f6b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4ad7      	ldr	r2, [pc, #860]	; (800fa18 <UART_SetConfig+0x6ec>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d005      	beq.n	800f6ca <UART_SetConfig+0x39e>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4ad6      	ldr	r2, [pc, #856]	; (800fa1c <UART_SetConfig+0x6f0>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	f040 80d1 	bne.w	800f86c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f6ca:	f7fe f945 	bl	800d958 <HAL_RCC_GetPCLK2Freq>
 800f6ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	469a      	mov	sl, r3
 800f6d4:	f04f 0b00 	mov.w	fp, #0
 800f6d8:	46d0      	mov	r8, sl
 800f6da:	46d9      	mov	r9, fp
 800f6dc:	eb18 0308 	adds.w	r3, r8, r8
 800f6e0:	eb49 0409 	adc.w	r4, r9, r9
 800f6e4:	4698      	mov	r8, r3
 800f6e6:	46a1      	mov	r9, r4
 800f6e8:	eb18 080a 	adds.w	r8, r8, sl
 800f6ec:	eb49 090b 	adc.w	r9, r9, fp
 800f6f0:	f04f 0100 	mov.w	r1, #0
 800f6f4:	f04f 0200 	mov.w	r2, #0
 800f6f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f6fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f704:	4688      	mov	r8, r1
 800f706:	4691      	mov	r9, r2
 800f708:	eb1a 0508 	adds.w	r5, sl, r8
 800f70c:	eb4b 0609 	adc.w	r6, fp, r9
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4619      	mov	r1, r3
 800f716:	f04f 0200 	mov.w	r2, #0
 800f71a:	f04f 0300 	mov.w	r3, #0
 800f71e:	f04f 0400 	mov.w	r4, #0
 800f722:	0094      	lsls	r4, r2, #2
 800f724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f728:	008b      	lsls	r3, r1, #2
 800f72a:	461a      	mov	r2, r3
 800f72c:	4623      	mov	r3, r4
 800f72e:	4628      	mov	r0, r5
 800f730:	4631      	mov	r1, r6
 800f732:	f7f9 f9c1 	bl	8008ab8 <__aeabi_uldivmod>
 800f736:	4603      	mov	r3, r0
 800f738:	460c      	mov	r4, r1
 800f73a:	461a      	mov	r2, r3
 800f73c:	4bb8      	ldr	r3, [pc, #736]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f73e:	fba3 2302 	umull	r2, r3, r3, r2
 800f742:	095b      	lsrs	r3, r3, #5
 800f744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	469b      	mov	fp, r3
 800f74c:	f04f 0c00 	mov.w	ip, #0
 800f750:	46d9      	mov	r9, fp
 800f752:	46e2      	mov	sl, ip
 800f754:	eb19 0309 	adds.w	r3, r9, r9
 800f758:	eb4a 040a 	adc.w	r4, sl, sl
 800f75c:	4699      	mov	r9, r3
 800f75e:	46a2      	mov	sl, r4
 800f760:	eb19 090b 	adds.w	r9, r9, fp
 800f764:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f768:	f04f 0100 	mov.w	r1, #0
 800f76c:	f04f 0200 	mov.w	r2, #0
 800f770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f77c:	4689      	mov	r9, r1
 800f77e:	4692      	mov	sl, r2
 800f780:	eb1b 0509 	adds.w	r5, fp, r9
 800f784:	eb4c 060a 	adc.w	r6, ip, sl
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	4619      	mov	r1, r3
 800f78e:	f04f 0200 	mov.w	r2, #0
 800f792:	f04f 0300 	mov.w	r3, #0
 800f796:	f04f 0400 	mov.w	r4, #0
 800f79a:	0094      	lsls	r4, r2, #2
 800f79c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f7a0:	008b      	lsls	r3, r1, #2
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	4623      	mov	r3, r4
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	f7f9 f985 	bl	8008ab8 <__aeabi_uldivmod>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4b9a      	ldr	r3, [pc, #616]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f7b6:	fba3 1302 	umull	r1, r3, r3, r2
 800f7ba:	095b      	lsrs	r3, r3, #5
 800f7bc:	2164      	movs	r1, #100	; 0x64
 800f7be:	fb01 f303 	mul.w	r3, r1, r3
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	011b      	lsls	r3, r3, #4
 800f7c6:	3332      	adds	r3, #50	; 0x32
 800f7c8:	4a95      	ldr	r2, [pc, #596]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ce:	095b      	lsrs	r3, r3, #5
 800f7d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7d4:	4498      	add	r8, r3
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	469b      	mov	fp, r3
 800f7da:	f04f 0c00 	mov.w	ip, #0
 800f7de:	46d9      	mov	r9, fp
 800f7e0:	46e2      	mov	sl, ip
 800f7e2:	eb19 0309 	adds.w	r3, r9, r9
 800f7e6:	eb4a 040a 	adc.w	r4, sl, sl
 800f7ea:	4699      	mov	r9, r3
 800f7ec:	46a2      	mov	sl, r4
 800f7ee:	eb19 090b 	adds.w	r9, r9, fp
 800f7f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f7f6:	f04f 0100 	mov.w	r1, #0
 800f7fa:	f04f 0200 	mov.w	r2, #0
 800f7fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f80a:	4689      	mov	r9, r1
 800f80c:	4692      	mov	sl, r2
 800f80e:	eb1b 0509 	adds.w	r5, fp, r9
 800f812:	eb4c 060a 	adc.w	r6, ip, sl
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	4619      	mov	r1, r3
 800f81c:	f04f 0200 	mov.w	r2, #0
 800f820:	f04f 0300 	mov.w	r3, #0
 800f824:	f04f 0400 	mov.w	r4, #0
 800f828:	0094      	lsls	r4, r2, #2
 800f82a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f82e:	008b      	lsls	r3, r1, #2
 800f830:	461a      	mov	r2, r3
 800f832:	4623      	mov	r3, r4
 800f834:	4628      	mov	r0, r5
 800f836:	4631      	mov	r1, r6
 800f838:	f7f9 f93e 	bl	8008ab8 <__aeabi_uldivmod>
 800f83c:	4603      	mov	r3, r0
 800f83e:	460c      	mov	r4, r1
 800f840:	461a      	mov	r2, r3
 800f842:	4b77      	ldr	r3, [pc, #476]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f844:	fba3 1302 	umull	r1, r3, r3, r2
 800f848:	095b      	lsrs	r3, r3, #5
 800f84a:	2164      	movs	r1, #100	; 0x64
 800f84c:	fb01 f303 	mul.w	r3, r1, r3
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	011b      	lsls	r3, r3, #4
 800f854:	3332      	adds	r3, #50	; 0x32
 800f856:	4a72      	ldr	r2, [pc, #456]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f858:	fba2 2303 	umull	r2, r3, r2, r3
 800f85c:	095b      	lsrs	r3, r3, #5
 800f85e:	f003 020f 	and.w	r2, r3, #15
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4442      	add	r2, r8
 800f868:	609a      	str	r2, [r3, #8]
 800f86a:	e0d0      	b.n	800fa0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f86c:	f7fe f860 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 800f870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	469a      	mov	sl, r3
 800f876:	f04f 0b00 	mov.w	fp, #0
 800f87a:	46d0      	mov	r8, sl
 800f87c:	46d9      	mov	r9, fp
 800f87e:	eb18 0308 	adds.w	r3, r8, r8
 800f882:	eb49 0409 	adc.w	r4, r9, r9
 800f886:	4698      	mov	r8, r3
 800f888:	46a1      	mov	r9, r4
 800f88a:	eb18 080a 	adds.w	r8, r8, sl
 800f88e:	eb49 090b 	adc.w	r9, r9, fp
 800f892:	f04f 0100 	mov.w	r1, #0
 800f896:	f04f 0200 	mov.w	r2, #0
 800f89a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f89e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8a6:	4688      	mov	r8, r1
 800f8a8:	4691      	mov	r9, r2
 800f8aa:	eb1a 0508 	adds.w	r5, sl, r8
 800f8ae:	eb4b 0609 	adc.w	r6, fp, r9
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	f04f 0200 	mov.w	r2, #0
 800f8bc:	f04f 0300 	mov.w	r3, #0
 800f8c0:	f04f 0400 	mov.w	r4, #0
 800f8c4:	0094      	lsls	r4, r2, #2
 800f8c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f8ca:	008b      	lsls	r3, r1, #2
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4623      	mov	r3, r4
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	4631      	mov	r1, r6
 800f8d4:	f7f9 f8f0 	bl	8008ab8 <__aeabi_uldivmod>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	460c      	mov	r4, r1
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b50      	ldr	r3, [pc, #320]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f8e0:	fba3 2302 	umull	r2, r3, r3, r2
 800f8e4:	095b      	lsrs	r3, r3, #5
 800f8e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	469b      	mov	fp, r3
 800f8ee:	f04f 0c00 	mov.w	ip, #0
 800f8f2:	46d9      	mov	r9, fp
 800f8f4:	46e2      	mov	sl, ip
 800f8f6:	eb19 0309 	adds.w	r3, r9, r9
 800f8fa:	eb4a 040a 	adc.w	r4, sl, sl
 800f8fe:	4699      	mov	r9, r3
 800f900:	46a2      	mov	sl, r4
 800f902:	eb19 090b 	adds.w	r9, r9, fp
 800f906:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f90a:	f04f 0100 	mov.w	r1, #0
 800f90e:	f04f 0200 	mov.w	r2, #0
 800f912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f91a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f91e:	4689      	mov	r9, r1
 800f920:	4692      	mov	sl, r2
 800f922:	eb1b 0509 	adds.w	r5, fp, r9
 800f926:	eb4c 060a 	adc.w	r6, ip, sl
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	4619      	mov	r1, r3
 800f930:	f04f 0200 	mov.w	r2, #0
 800f934:	f04f 0300 	mov.w	r3, #0
 800f938:	f04f 0400 	mov.w	r4, #0
 800f93c:	0094      	lsls	r4, r2, #2
 800f93e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f942:	008b      	lsls	r3, r1, #2
 800f944:	461a      	mov	r2, r3
 800f946:	4623      	mov	r3, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	4631      	mov	r1, r6
 800f94c:	f7f9 f8b4 	bl	8008ab8 <__aeabi_uldivmod>
 800f950:	4603      	mov	r3, r0
 800f952:	460c      	mov	r4, r1
 800f954:	461a      	mov	r2, r3
 800f956:	4b32      	ldr	r3, [pc, #200]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f958:	fba3 1302 	umull	r1, r3, r3, r2
 800f95c:	095b      	lsrs	r3, r3, #5
 800f95e:	2164      	movs	r1, #100	; 0x64
 800f960:	fb01 f303 	mul.w	r3, r1, r3
 800f964:	1ad3      	subs	r3, r2, r3
 800f966:	011b      	lsls	r3, r3, #4
 800f968:	3332      	adds	r3, #50	; 0x32
 800f96a:	4a2d      	ldr	r2, [pc, #180]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f96c:	fba2 2303 	umull	r2, r3, r2, r3
 800f970:	095b      	lsrs	r3, r3, #5
 800f972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f976:	4498      	add	r8, r3
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	469b      	mov	fp, r3
 800f97c:	f04f 0c00 	mov.w	ip, #0
 800f980:	46d9      	mov	r9, fp
 800f982:	46e2      	mov	sl, ip
 800f984:	eb19 0309 	adds.w	r3, r9, r9
 800f988:	eb4a 040a 	adc.w	r4, sl, sl
 800f98c:	4699      	mov	r9, r3
 800f98e:	46a2      	mov	sl, r4
 800f990:	eb19 090b 	adds.w	r9, r9, fp
 800f994:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f998:	f04f 0100 	mov.w	r1, #0
 800f99c:	f04f 0200 	mov.w	r2, #0
 800f9a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9ac:	4689      	mov	r9, r1
 800f9ae:	4692      	mov	sl, r2
 800f9b0:	eb1b 0509 	adds.w	r5, fp, r9
 800f9b4:	eb4c 060a 	adc.w	r6, ip, sl
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	4619      	mov	r1, r3
 800f9be:	f04f 0200 	mov.w	r2, #0
 800f9c2:	f04f 0300 	mov.w	r3, #0
 800f9c6:	f04f 0400 	mov.w	r4, #0
 800f9ca:	0094      	lsls	r4, r2, #2
 800f9cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9d0:	008b      	lsls	r3, r1, #2
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	4623      	mov	r3, r4
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	4631      	mov	r1, r6
 800f9da:	f7f9 f86d 	bl	8008ab8 <__aeabi_uldivmod>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f9e6:	fba3 1302 	umull	r1, r3, r3, r2
 800f9ea:	095b      	lsrs	r3, r3, #5
 800f9ec:	2164      	movs	r1, #100	; 0x64
 800f9ee:	fb01 f303 	mul.w	r3, r1, r3
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	011b      	lsls	r3, r3, #4
 800f9f6:	3332      	adds	r3, #50	; 0x32
 800f9f8:	4a09      	ldr	r2, [pc, #36]	; (800fa20 <UART_SetConfig+0x6f4>)
 800f9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fe:	095b      	lsrs	r3, r3, #5
 800fa00:	f003 020f 	and.w	r2, r3, #15
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4442      	add	r2, r8
 800fa0a:	609a      	str	r2, [r3, #8]
}
 800fa0c:	e7ff      	b.n	800fa0e <UART_SetConfig+0x6e2>
 800fa0e:	bf00      	nop
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa18:	40011000 	.word	0x40011000
 800fa1c:	40011400 	.word	0x40011400
 800fa20:	51eb851f 	.word	0x51eb851f

0800fa24 <round>:
 800fa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa26:	ec57 6b10 	vmov	r6, r7, d0
 800fa2a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800fa2e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800fa32:	2c13      	cmp	r4, #19
 800fa34:	463b      	mov	r3, r7
 800fa36:	463d      	mov	r5, r7
 800fa38:	dc17      	bgt.n	800fa6a <round+0x46>
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	da09      	bge.n	800fa52 <round+0x2e>
 800fa3e:	3401      	adds	r4, #1
 800fa40:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800fa44:	d103      	bne.n	800fa4e <round+0x2a>
 800fa46:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fa4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fa4e:	2100      	movs	r1, #0
 800fa50:	e02c      	b.n	800faac <round+0x88>
 800fa52:	4a18      	ldr	r2, [pc, #96]	; (800fab4 <round+0x90>)
 800fa54:	4122      	asrs	r2, r4
 800fa56:	4217      	tst	r7, r2
 800fa58:	d100      	bne.n	800fa5c <round+0x38>
 800fa5a:	b19e      	cbz	r6, 800fa84 <round+0x60>
 800fa5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fa60:	4123      	asrs	r3, r4
 800fa62:	442b      	add	r3, r5
 800fa64:	ea23 0302 	bic.w	r3, r3, r2
 800fa68:	e7f1      	b.n	800fa4e <round+0x2a>
 800fa6a:	2c33      	cmp	r4, #51	; 0x33
 800fa6c:	dd0d      	ble.n	800fa8a <round+0x66>
 800fa6e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fa72:	d107      	bne.n	800fa84 <round+0x60>
 800fa74:	4630      	mov	r0, r6
 800fa76:	4639      	mov	r1, r7
 800fa78:	ee10 2a10 	vmov	r2, s0
 800fa7c:	f7f8 fb3e 	bl	80080fc <__adddf3>
 800fa80:	4606      	mov	r6, r0
 800fa82:	460f      	mov	r7, r1
 800fa84:	ec47 6b10 	vmov	d0, r6, r7
 800fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa8a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800fa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa92:	40d0      	lsrs	r0, r2
 800fa94:	4206      	tst	r6, r0
 800fa96:	d0f5      	beq.n	800fa84 <round+0x60>
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fa9e:	fa02 f404 	lsl.w	r4, r2, r4
 800faa2:	1931      	adds	r1, r6, r4
 800faa4:	bf28      	it	cs
 800faa6:	189b      	addcs	r3, r3, r2
 800faa8:	ea21 0100 	bic.w	r1, r1, r0
 800faac:	461f      	mov	r7, r3
 800faae:	460e      	mov	r6, r1
 800fab0:	e7e8      	b.n	800fa84 <round+0x60>
 800fab2:	bf00      	nop
 800fab4:	000fffff 	.word	0x000fffff

0800fab8 <__errno>:
 800fab8:	4b01      	ldr	r3, [pc, #4]	; (800fac0 <__errno+0x8>)
 800faba:	6818      	ldr	r0, [r3, #0]
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	2000000c 	.word	0x2000000c

0800fac4 <__libc_init_array>:
 800fac4:	b570      	push	{r4, r5, r6, lr}
 800fac6:	4e0d      	ldr	r6, [pc, #52]	; (800fafc <__libc_init_array+0x38>)
 800fac8:	4c0d      	ldr	r4, [pc, #52]	; (800fb00 <__libc_init_array+0x3c>)
 800faca:	1ba4      	subs	r4, r4, r6
 800facc:	10a4      	asrs	r4, r4, #2
 800face:	2500      	movs	r5, #0
 800fad0:	42a5      	cmp	r5, r4
 800fad2:	d109      	bne.n	800fae8 <__libc_init_array+0x24>
 800fad4:	4e0b      	ldr	r6, [pc, #44]	; (800fb04 <__libc_init_array+0x40>)
 800fad6:	4c0c      	ldr	r4, [pc, #48]	; (800fb08 <__libc_init_array+0x44>)
 800fad8:	f002 fbae 	bl	8012238 <_init>
 800fadc:	1ba4      	subs	r4, r4, r6
 800fade:	10a4      	asrs	r4, r4, #2
 800fae0:	2500      	movs	r5, #0
 800fae2:	42a5      	cmp	r5, r4
 800fae4:	d105      	bne.n	800faf2 <__libc_init_array+0x2e>
 800fae6:	bd70      	pop	{r4, r5, r6, pc}
 800fae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800faec:	4798      	blx	r3
 800faee:	3501      	adds	r5, #1
 800faf0:	e7ee      	b.n	800fad0 <__libc_init_array+0xc>
 800faf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800faf6:	4798      	blx	r3
 800faf8:	3501      	adds	r5, #1
 800fafa:	e7f2      	b.n	800fae2 <__libc_init_array+0x1e>
 800fafc:	08012568 	.word	0x08012568
 800fb00:	08012568 	.word	0x08012568
 800fb04:	08012568 	.word	0x08012568
 800fb08:	0801256c 	.word	0x0801256c

0800fb0c <memcpy>:
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	1e43      	subs	r3, r0, #1
 800fb10:	440a      	add	r2, r1
 800fb12:	4291      	cmp	r1, r2
 800fb14:	d100      	bne.n	800fb18 <memcpy+0xc>
 800fb16:	bd10      	pop	{r4, pc}
 800fb18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb20:	e7f7      	b.n	800fb12 <memcpy+0x6>

0800fb22 <memset>:
 800fb22:	4402      	add	r2, r0
 800fb24:	4603      	mov	r3, r0
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d100      	bne.n	800fb2c <memset+0xa>
 800fb2a:	4770      	bx	lr
 800fb2c:	f803 1b01 	strb.w	r1, [r3], #1
 800fb30:	e7f9      	b.n	800fb26 <memset+0x4>

0800fb32 <__cvt>:
 800fb32:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb36:	ec55 4b10 	vmov	r4, r5, d0
 800fb3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fb3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fb40:	2d00      	cmp	r5, #0
 800fb42:	460e      	mov	r6, r1
 800fb44:	4691      	mov	r9, r2
 800fb46:	4619      	mov	r1, r3
 800fb48:	bfb8      	it	lt
 800fb4a:	4622      	movlt	r2, r4
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	f027 0720 	bic.w	r7, r7, #32
 800fb52:	bfbb      	ittet	lt
 800fb54:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fb58:	461d      	movlt	r5, r3
 800fb5a:	2300      	movge	r3, #0
 800fb5c:	232d      	movlt	r3, #45	; 0x2d
 800fb5e:	bfb8      	it	lt
 800fb60:	4614      	movlt	r4, r2
 800fb62:	2f46      	cmp	r7, #70	; 0x46
 800fb64:	700b      	strb	r3, [r1, #0]
 800fb66:	d004      	beq.n	800fb72 <__cvt+0x40>
 800fb68:	2f45      	cmp	r7, #69	; 0x45
 800fb6a:	d100      	bne.n	800fb6e <__cvt+0x3c>
 800fb6c:	3601      	adds	r6, #1
 800fb6e:	2102      	movs	r1, #2
 800fb70:	e000      	b.n	800fb74 <__cvt+0x42>
 800fb72:	2103      	movs	r1, #3
 800fb74:	ab03      	add	r3, sp, #12
 800fb76:	9301      	str	r3, [sp, #4]
 800fb78:	ab02      	add	r3, sp, #8
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	4632      	mov	r2, r6
 800fb7e:	4653      	mov	r3, sl
 800fb80:	ec45 4b10 	vmov	d0, r4, r5
 800fb84:	f000 fdfc 	bl	8010780 <_dtoa_r>
 800fb88:	2f47      	cmp	r7, #71	; 0x47
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	d102      	bne.n	800fb94 <__cvt+0x62>
 800fb8e:	f019 0f01 	tst.w	r9, #1
 800fb92:	d026      	beq.n	800fbe2 <__cvt+0xb0>
 800fb94:	2f46      	cmp	r7, #70	; 0x46
 800fb96:	eb08 0906 	add.w	r9, r8, r6
 800fb9a:	d111      	bne.n	800fbc0 <__cvt+0x8e>
 800fb9c:	f898 3000 	ldrb.w	r3, [r8]
 800fba0:	2b30      	cmp	r3, #48	; 0x30
 800fba2:	d10a      	bne.n	800fbba <__cvt+0x88>
 800fba4:	2200      	movs	r2, #0
 800fba6:	2300      	movs	r3, #0
 800fba8:	4620      	mov	r0, r4
 800fbaa:	4629      	mov	r1, r5
 800fbac:	f7f8 fec4 	bl	8008938 <__aeabi_dcmpeq>
 800fbb0:	b918      	cbnz	r0, 800fbba <__cvt+0x88>
 800fbb2:	f1c6 0601 	rsb	r6, r6, #1
 800fbb6:	f8ca 6000 	str.w	r6, [sl]
 800fbba:	f8da 3000 	ldr.w	r3, [sl]
 800fbbe:	4499      	add	r9, r3
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	f7f8 feb6 	bl	8008938 <__aeabi_dcmpeq>
 800fbcc:	b938      	cbnz	r0, 800fbde <__cvt+0xac>
 800fbce:	2230      	movs	r2, #48	; 0x30
 800fbd0:	9b03      	ldr	r3, [sp, #12]
 800fbd2:	454b      	cmp	r3, r9
 800fbd4:	d205      	bcs.n	800fbe2 <__cvt+0xb0>
 800fbd6:	1c59      	adds	r1, r3, #1
 800fbd8:	9103      	str	r1, [sp, #12]
 800fbda:	701a      	strb	r2, [r3, #0]
 800fbdc:	e7f8      	b.n	800fbd0 <__cvt+0x9e>
 800fbde:	f8cd 900c 	str.w	r9, [sp, #12]
 800fbe2:	9b03      	ldr	r3, [sp, #12]
 800fbe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbe6:	eba3 0308 	sub.w	r3, r3, r8
 800fbea:	4640      	mov	r0, r8
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	b004      	add	sp, #16
 800fbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fbf4 <__exponent>:
 800fbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	bfba      	itte	lt
 800fbfc:	4249      	neglt	r1, r1
 800fbfe:	232d      	movlt	r3, #45	; 0x2d
 800fc00:	232b      	movge	r3, #43	; 0x2b
 800fc02:	2909      	cmp	r1, #9
 800fc04:	f804 2b02 	strb.w	r2, [r4], #2
 800fc08:	7043      	strb	r3, [r0, #1]
 800fc0a:	dd20      	ble.n	800fc4e <__exponent+0x5a>
 800fc0c:	f10d 0307 	add.w	r3, sp, #7
 800fc10:	461f      	mov	r7, r3
 800fc12:	260a      	movs	r6, #10
 800fc14:	fb91 f5f6 	sdiv	r5, r1, r6
 800fc18:	fb06 1115 	mls	r1, r6, r5, r1
 800fc1c:	3130      	adds	r1, #48	; 0x30
 800fc1e:	2d09      	cmp	r5, #9
 800fc20:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fc24:	f103 32ff 	add.w	r2, r3, #4294967295
 800fc28:	4629      	mov	r1, r5
 800fc2a:	dc09      	bgt.n	800fc40 <__exponent+0x4c>
 800fc2c:	3130      	adds	r1, #48	; 0x30
 800fc2e:	3b02      	subs	r3, #2
 800fc30:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fc34:	42bb      	cmp	r3, r7
 800fc36:	4622      	mov	r2, r4
 800fc38:	d304      	bcc.n	800fc44 <__exponent+0x50>
 800fc3a:	1a10      	subs	r0, r2, r0
 800fc3c:	b003      	add	sp, #12
 800fc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc40:	4613      	mov	r3, r2
 800fc42:	e7e7      	b.n	800fc14 <__exponent+0x20>
 800fc44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc48:	f804 2b01 	strb.w	r2, [r4], #1
 800fc4c:	e7f2      	b.n	800fc34 <__exponent+0x40>
 800fc4e:	2330      	movs	r3, #48	; 0x30
 800fc50:	4419      	add	r1, r3
 800fc52:	7083      	strb	r3, [r0, #2]
 800fc54:	1d02      	adds	r2, r0, #4
 800fc56:	70c1      	strb	r1, [r0, #3]
 800fc58:	e7ef      	b.n	800fc3a <__exponent+0x46>
	...

0800fc5c <_printf_float>:
 800fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc60:	b08d      	sub	sp, #52	; 0x34
 800fc62:	460c      	mov	r4, r1
 800fc64:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fc68:	4616      	mov	r6, r2
 800fc6a:	461f      	mov	r7, r3
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	f001 fcb9 	bl	80115e4 <_localeconv_r>
 800fc72:	6803      	ldr	r3, [r0, #0]
 800fc74:	9304      	str	r3, [sp, #16]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7f8 f9e2 	bl	8008040 <strlen>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc80:	f8d8 3000 	ldr.w	r3, [r8]
 800fc84:	9005      	str	r0, [sp, #20]
 800fc86:	3307      	adds	r3, #7
 800fc88:	f023 0307 	bic.w	r3, r3, #7
 800fc8c:	f103 0208 	add.w	r2, r3, #8
 800fc90:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fc94:	f8d4 b000 	ldr.w	fp, [r4]
 800fc98:	f8c8 2000 	str.w	r2, [r8]
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fca4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fca8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fcac:	9307      	str	r3, [sp, #28]
 800fcae:	f8cd 8018 	str.w	r8, [sp, #24]
 800fcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb6:	4ba7      	ldr	r3, [pc, #668]	; (800ff54 <_printf_float+0x2f8>)
 800fcb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fcbc:	f7f8 fe6e 	bl	800899c <__aeabi_dcmpun>
 800fcc0:	bb70      	cbnz	r0, 800fd20 <_printf_float+0xc4>
 800fcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc6:	4ba3      	ldr	r3, [pc, #652]	; (800ff54 <_printf_float+0x2f8>)
 800fcc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fccc:	f7f8 fe48 	bl	8008960 <__aeabi_dcmple>
 800fcd0:	bb30      	cbnz	r0, 800fd20 <_printf_float+0xc4>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	4649      	mov	r1, r9
 800fcda:	f7f8 fe37 	bl	800894c <__aeabi_dcmplt>
 800fcde:	b110      	cbz	r0, 800fce6 <_printf_float+0x8a>
 800fce0:	232d      	movs	r3, #45	; 0x2d
 800fce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce6:	4a9c      	ldr	r2, [pc, #624]	; (800ff58 <_printf_float+0x2fc>)
 800fce8:	4b9c      	ldr	r3, [pc, #624]	; (800ff5c <_printf_float+0x300>)
 800fcea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fcee:	bf8c      	ite	hi
 800fcf0:	4690      	movhi	r8, r2
 800fcf2:	4698      	movls	r8, r3
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	f02b 0204 	bic.w	r2, fp, #4
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	6022      	str	r2, [r4, #0]
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	9700      	str	r7, [sp, #0]
 800fd04:	4633      	mov	r3, r6
 800fd06:	aa0b      	add	r2, sp, #44	; 0x2c
 800fd08:	4621      	mov	r1, r4
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f000 f9e6 	bl	80100dc <_printf_common>
 800fd10:	3001      	adds	r0, #1
 800fd12:	f040 808d 	bne.w	800fe30 <_printf_float+0x1d4>
 800fd16:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1a:	b00d      	add	sp, #52	; 0x34
 800fd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd20:	4642      	mov	r2, r8
 800fd22:	464b      	mov	r3, r9
 800fd24:	4640      	mov	r0, r8
 800fd26:	4649      	mov	r1, r9
 800fd28:	f7f8 fe38 	bl	800899c <__aeabi_dcmpun>
 800fd2c:	b110      	cbz	r0, 800fd34 <_printf_float+0xd8>
 800fd2e:	4a8c      	ldr	r2, [pc, #560]	; (800ff60 <_printf_float+0x304>)
 800fd30:	4b8c      	ldr	r3, [pc, #560]	; (800ff64 <_printf_float+0x308>)
 800fd32:	e7da      	b.n	800fcea <_printf_float+0x8e>
 800fd34:	6861      	ldr	r1, [r4, #4]
 800fd36:	1c4b      	adds	r3, r1, #1
 800fd38:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fd3c:	a80a      	add	r0, sp, #40	; 0x28
 800fd3e:	d13e      	bne.n	800fdbe <_printf_float+0x162>
 800fd40:	2306      	movs	r3, #6
 800fd42:	6063      	str	r3, [r4, #4]
 800fd44:	2300      	movs	r3, #0
 800fd46:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fd4a:	ab09      	add	r3, sp, #36	; 0x24
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	ec49 8b10 	vmov	d0, r8, r9
 800fd52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd56:	6022      	str	r2, [r4, #0]
 800fd58:	f8cd a004 	str.w	sl, [sp, #4]
 800fd5c:	6861      	ldr	r1, [r4, #4]
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f7ff fee7 	bl	800fb32 <__cvt>
 800fd64:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fd68:	2b47      	cmp	r3, #71	; 0x47
 800fd6a:	4680      	mov	r8, r0
 800fd6c:	d109      	bne.n	800fd82 <_printf_float+0x126>
 800fd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd70:	1cd8      	adds	r0, r3, #3
 800fd72:	db02      	blt.n	800fd7a <_printf_float+0x11e>
 800fd74:	6862      	ldr	r2, [r4, #4]
 800fd76:	4293      	cmp	r3, r2
 800fd78:	dd47      	ble.n	800fe0a <_printf_float+0x1ae>
 800fd7a:	f1aa 0a02 	sub.w	sl, sl, #2
 800fd7e:	fa5f fa8a 	uxtb.w	sl, sl
 800fd82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fd86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd88:	d824      	bhi.n	800fdd4 <_printf_float+0x178>
 800fd8a:	3901      	subs	r1, #1
 800fd8c:	4652      	mov	r2, sl
 800fd8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd92:	9109      	str	r1, [sp, #36]	; 0x24
 800fd94:	f7ff ff2e 	bl	800fbf4 <__exponent>
 800fd98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd9a:	1813      	adds	r3, r2, r0
 800fd9c:	2a01      	cmp	r2, #1
 800fd9e:	4681      	mov	r9, r0
 800fda0:	6123      	str	r3, [r4, #16]
 800fda2:	dc02      	bgt.n	800fdaa <_printf_float+0x14e>
 800fda4:	6822      	ldr	r2, [r4, #0]
 800fda6:	07d1      	lsls	r1, r2, #31
 800fda8:	d501      	bpl.n	800fdae <_printf_float+0x152>
 800fdaa:	3301      	adds	r3, #1
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d0a5      	beq.n	800fd02 <_printf_float+0xa6>
 800fdb6:	232d      	movs	r3, #45	; 0x2d
 800fdb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdbc:	e7a1      	b.n	800fd02 <_printf_float+0xa6>
 800fdbe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fdc2:	f000 8177 	beq.w	80100b4 <_printf_float+0x458>
 800fdc6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fdca:	d1bb      	bne.n	800fd44 <_printf_float+0xe8>
 800fdcc:	2900      	cmp	r1, #0
 800fdce:	d1b9      	bne.n	800fd44 <_printf_float+0xe8>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e7b6      	b.n	800fd42 <_printf_float+0xe6>
 800fdd4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fdd8:	d119      	bne.n	800fe0e <_printf_float+0x1b2>
 800fdda:	2900      	cmp	r1, #0
 800fddc:	6863      	ldr	r3, [r4, #4]
 800fdde:	dd0c      	ble.n	800fdfa <_printf_float+0x19e>
 800fde0:	6121      	str	r1, [r4, #16]
 800fde2:	b913      	cbnz	r3, 800fdea <_printf_float+0x18e>
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	07d2      	lsls	r2, r2, #31
 800fde8:	d502      	bpl.n	800fdf0 <_printf_float+0x194>
 800fdea:	3301      	adds	r3, #1
 800fdec:	440b      	add	r3, r1
 800fdee:	6123      	str	r3, [r4, #16]
 800fdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf2:	65a3      	str	r3, [r4, #88]	; 0x58
 800fdf4:	f04f 0900 	mov.w	r9, #0
 800fdf8:	e7d9      	b.n	800fdae <_printf_float+0x152>
 800fdfa:	b913      	cbnz	r3, 800fe02 <_printf_float+0x1a6>
 800fdfc:	6822      	ldr	r2, [r4, #0]
 800fdfe:	07d0      	lsls	r0, r2, #31
 800fe00:	d501      	bpl.n	800fe06 <_printf_float+0x1aa>
 800fe02:	3302      	adds	r3, #2
 800fe04:	e7f3      	b.n	800fdee <_printf_float+0x192>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e7f1      	b.n	800fdee <_printf_float+0x192>
 800fe0a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fe0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fe12:	4293      	cmp	r3, r2
 800fe14:	db05      	blt.n	800fe22 <_printf_float+0x1c6>
 800fe16:	6822      	ldr	r2, [r4, #0]
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	07d1      	lsls	r1, r2, #31
 800fe1c:	d5e8      	bpl.n	800fdf0 <_printf_float+0x194>
 800fe1e:	3301      	adds	r3, #1
 800fe20:	e7e5      	b.n	800fdee <_printf_float+0x192>
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bfd4      	ite	le
 800fe26:	f1c3 0302 	rsble	r3, r3, #2
 800fe2a:	2301      	movgt	r3, #1
 800fe2c:	4413      	add	r3, r2
 800fe2e:	e7de      	b.n	800fdee <_printf_float+0x192>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	055a      	lsls	r2, r3, #21
 800fe34:	d407      	bmi.n	800fe46 <_printf_float+0x1ea>
 800fe36:	6923      	ldr	r3, [r4, #16]
 800fe38:	4642      	mov	r2, r8
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	47b8      	blx	r7
 800fe40:	3001      	adds	r0, #1
 800fe42:	d12b      	bne.n	800fe9c <_printf_float+0x240>
 800fe44:	e767      	b.n	800fd16 <_printf_float+0xba>
 800fe46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fe4a:	f240 80dc 	bls.w	8010006 <_printf_float+0x3aa>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2300      	movs	r3, #0
 800fe52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe56:	f7f8 fd6f 	bl	8008938 <__aeabi_dcmpeq>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d033      	beq.n	800fec6 <_printf_float+0x26a>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	4a41      	ldr	r2, [pc, #260]	; (800ff68 <_printf_float+0x30c>)
 800fe62:	4631      	mov	r1, r6
 800fe64:	4628      	mov	r0, r5
 800fe66:	47b8      	blx	r7
 800fe68:	3001      	adds	r0, #1
 800fe6a:	f43f af54 	beq.w	800fd16 <_printf_float+0xba>
 800fe6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe72:	429a      	cmp	r2, r3
 800fe74:	db02      	blt.n	800fe7c <_printf_float+0x220>
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	07d8      	lsls	r0, r3, #31
 800fe7a:	d50f      	bpl.n	800fe9c <_printf_float+0x240>
 800fe7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe80:	4631      	mov	r1, r6
 800fe82:	4628      	mov	r0, r5
 800fe84:	47b8      	blx	r7
 800fe86:	3001      	adds	r0, #1
 800fe88:	f43f af45 	beq.w	800fd16 <_printf_float+0xba>
 800fe8c:	f04f 0800 	mov.w	r8, #0
 800fe90:	f104 091a 	add.w	r9, r4, #26
 800fe94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe96:	3b01      	subs	r3, #1
 800fe98:	4543      	cmp	r3, r8
 800fe9a:	dc09      	bgt.n	800feb0 <_printf_float+0x254>
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	079b      	lsls	r3, r3, #30
 800fea0:	f100 8103 	bmi.w	80100aa <_printf_float+0x44e>
 800fea4:	68e0      	ldr	r0, [r4, #12]
 800fea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fea8:	4298      	cmp	r0, r3
 800feaa:	bfb8      	it	lt
 800feac:	4618      	movlt	r0, r3
 800feae:	e734      	b.n	800fd1a <_printf_float+0xbe>
 800feb0:	2301      	movs	r3, #1
 800feb2:	464a      	mov	r2, r9
 800feb4:	4631      	mov	r1, r6
 800feb6:	4628      	mov	r0, r5
 800feb8:	47b8      	blx	r7
 800feba:	3001      	adds	r0, #1
 800febc:	f43f af2b 	beq.w	800fd16 <_printf_float+0xba>
 800fec0:	f108 0801 	add.w	r8, r8, #1
 800fec4:	e7e6      	b.n	800fe94 <_printf_float+0x238>
 800fec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec8:	2b00      	cmp	r3, #0
 800feca:	dc2b      	bgt.n	800ff24 <_printf_float+0x2c8>
 800fecc:	2301      	movs	r3, #1
 800fece:	4a26      	ldr	r2, [pc, #152]	; (800ff68 <_printf_float+0x30c>)
 800fed0:	4631      	mov	r1, r6
 800fed2:	4628      	mov	r0, r5
 800fed4:	47b8      	blx	r7
 800fed6:	3001      	adds	r0, #1
 800fed8:	f43f af1d 	beq.w	800fd16 <_printf_float+0xba>
 800fedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fede:	b923      	cbnz	r3, 800feea <_printf_float+0x28e>
 800fee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee2:	b913      	cbnz	r3, 800feea <_printf_float+0x28e>
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	07d9      	lsls	r1, r3, #31
 800fee8:	d5d8      	bpl.n	800fe9c <_printf_float+0x240>
 800feea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feee:	4631      	mov	r1, r6
 800fef0:	4628      	mov	r0, r5
 800fef2:	47b8      	blx	r7
 800fef4:	3001      	adds	r0, #1
 800fef6:	f43f af0e 	beq.w	800fd16 <_printf_float+0xba>
 800fefa:	f04f 0900 	mov.w	r9, #0
 800fefe:	f104 0a1a 	add.w	sl, r4, #26
 800ff02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff04:	425b      	negs	r3, r3
 800ff06:	454b      	cmp	r3, r9
 800ff08:	dc01      	bgt.n	800ff0e <_printf_float+0x2b2>
 800ff0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff0c:	e794      	b.n	800fe38 <_printf_float+0x1dc>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	4652      	mov	r2, sl
 800ff12:	4631      	mov	r1, r6
 800ff14:	4628      	mov	r0, r5
 800ff16:	47b8      	blx	r7
 800ff18:	3001      	adds	r0, #1
 800ff1a:	f43f aefc 	beq.w	800fd16 <_printf_float+0xba>
 800ff1e:	f109 0901 	add.w	r9, r9, #1
 800ff22:	e7ee      	b.n	800ff02 <_printf_float+0x2a6>
 800ff24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	bfa8      	it	ge
 800ff2c:	461a      	movge	r2, r3
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	4691      	mov	r9, r2
 800ff32:	dd07      	ble.n	800ff44 <_printf_float+0x2e8>
 800ff34:	4613      	mov	r3, r2
 800ff36:	4631      	mov	r1, r6
 800ff38:	4642      	mov	r2, r8
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	f43f aee9 	beq.w	800fd16 <_printf_float+0xba>
 800ff44:	f104 031a 	add.w	r3, r4, #26
 800ff48:	f04f 0b00 	mov.w	fp, #0
 800ff4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff50:	9306      	str	r3, [sp, #24]
 800ff52:	e015      	b.n	800ff80 <_printf_float+0x324>
 800ff54:	7fefffff 	.word	0x7fefffff
 800ff58:	080122a8 	.word	0x080122a8
 800ff5c:	080122a4 	.word	0x080122a4
 800ff60:	080122b0 	.word	0x080122b0
 800ff64:	080122ac 	.word	0x080122ac
 800ff68:	080122b4 	.word	0x080122b4
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	9a06      	ldr	r2, [sp, #24]
 800ff70:	4631      	mov	r1, r6
 800ff72:	4628      	mov	r0, r5
 800ff74:	47b8      	blx	r7
 800ff76:	3001      	adds	r0, #1
 800ff78:	f43f aecd 	beq.w	800fd16 <_printf_float+0xba>
 800ff7c:	f10b 0b01 	add.w	fp, fp, #1
 800ff80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff84:	ebaa 0309 	sub.w	r3, sl, r9
 800ff88:	455b      	cmp	r3, fp
 800ff8a:	dcef      	bgt.n	800ff6c <_printf_float+0x310>
 800ff8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff90:	429a      	cmp	r2, r3
 800ff92:	44d0      	add	r8, sl
 800ff94:	db15      	blt.n	800ffc2 <_printf_float+0x366>
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	07da      	lsls	r2, r3, #31
 800ff9a:	d412      	bmi.n	800ffc2 <_printf_float+0x366>
 800ff9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffa0:	eba3 020a 	sub.w	r2, r3, sl
 800ffa4:	eba3 0a01 	sub.w	sl, r3, r1
 800ffa8:	4592      	cmp	sl, r2
 800ffaa:	bfa8      	it	ge
 800ffac:	4692      	movge	sl, r2
 800ffae:	f1ba 0f00 	cmp.w	sl, #0
 800ffb2:	dc0e      	bgt.n	800ffd2 <_printf_float+0x376>
 800ffb4:	f04f 0800 	mov.w	r8, #0
 800ffb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffbc:	f104 091a 	add.w	r9, r4, #26
 800ffc0:	e019      	b.n	800fff6 <_printf_float+0x39a>
 800ffc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	4628      	mov	r0, r5
 800ffca:	47b8      	blx	r7
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d1e5      	bne.n	800ff9c <_printf_float+0x340>
 800ffd0:	e6a1      	b.n	800fd16 <_printf_float+0xba>
 800ffd2:	4653      	mov	r3, sl
 800ffd4:	4642      	mov	r2, r8
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4628      	mov	r0, r5
 800ffda:	47b8      	blx	r7
 800ffdc:	3001      	adds	r0, #1
 800ffde:	d1e9      	bne.n	800ffb4 <_printf_float+0x358>
 800ffe0:	e699      	b.n	800fd16 <_printf_float+0xba>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	464a      	mov	r2, r9
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b8      	blx	r7
 800ffec:	3001      	adds	r0, #1
 800ffee:	f43f ae92 	beq.w	800fd16 <_printf_float+0xba>
 800fff2:	f108 0801 	add.w	r8, r8, #1
 800fff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fffa:	1a9b      	subs	r3, r3, r2
 800fffc:	eba3 030a 	sub.w	r3, r3, sl
 8010000:	4543      	cmp	r3, r8
 8010002:	dcee      	bgt.n	800ffe2 <_printf_float+0x386>
 8010004:	e74a      	b.n	800fe9c <_printf_float+0x240>
 8010006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010008:	2a01      	cmp	r2, #1
 801000a:	dc01      	bgt.n	8010010 <_printf_float+0x3b4>
 801000c:	07db      	lsls	r3, r3, #31
 801000e:	d53a      	bpl.n	8010086 <_printf_float+0x42a>
 8010010:	2301      	movs	r3, #1
 8010012:	4642      	mov	r2, r8
 8010014:	4631      	mov	r1, r6
 8010016:	4628      	mov	r0, r5
 8010018:	47b8      	blx	r7
 801001a:	3001      	adds	r0, #1
 801001c:	f43f ae7b 	beq.w	800fd16 <_printf_float+0xba>
 8010020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	f108 0801 	add.w	r8, r8, #1
 8010030:	f43f ae71 	beq.w	800fd16 <_printf_float+0xba>
 8010034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010036:	2200      	movs	r2, #0
 8010038:	f103 3aff 	add.w	sl, r3, #4294967295
 801003c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010040:	2300      	movs	r3, #0
 8010042:	f7f8 fc79 	bl	8008938 <__aeabi_dcmpeq>
 8010046:	b9c8      	cbnz	r0, 801007c <_printf_float+0x420>
 8010048:	4653      	mov	r3, sl
 801004a:	4642      	mov	r2, r8
 801004c:	4631      	mov	r1, r6
 801004e:	4628      	mov	r0, r5
 8010050:	47b8      	blx	r7
 8010052:	3001      	adds	r0, #1
 8010054:	d10e      	bne.n	8010074 <_printf_float+0x418>
 8010056:	e65e      	b.n	800fd16 <_printf_float+0xba>
 8010058:	2301      	movs	r3, #1
 801005a:	4652      	mov	r2, sl
 801005c:	4631      	mov	r1, r6
 801005e:	4628      	mov	r0, r5
 8010060:	47b8      	blx	r7
 8010062:	3001      	adds	r0, #1
 8010064:	f43f ae57 	beq.w	800fd16 <_printf_float+0xba>
 8010068:	f108 0801 	add.w	r8, r8, #1
 801006c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801006e:	3b01      	subs	r3, #1
 8010070:	4543      	cmp	r3, r8
 8010072:	dcf1      	bgt.n	8010058 <_printf_float+0x3fc>
 8010074:	464b      	mov	r3, r9
 8010076:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801007a:	e6de      	b.n	800fe3a <_printf_float+0x1de>
 801007c:	f04f 0800 	mov.w	r8, #0
 8010080:	f104 0a1a 	add.w	sl, r4, #26
 8010084:	e7f2      	b.n	801006c <_printf_float+0x410>
 8010086:	2301      	movs	r3, #1
 8010088:	e7df      	b.n	801004a <_printf_float+0x3ee>
 801008a:	2301      	movs	r3, #1
 801008c:	464a      	mov	r2, r9
 801008e:	4631      	mov	r1, r6
 8010090:	4628      	mov	r0, r5
 8010092:	47b8      	blx	r7
 8010094:	3001      	adds	r0, #1
 8010096:	f43f ae3e 	beq.w	800fd16 <_printf_float+0xba>
 801009a:	f108 0801 	add.w	r8, r8, #1
 801009e:	68e3      	ldr	r3, [r4, #12]
 80100a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100a2:	1a9b      	subs	r3, r3, r2
 80100a4:	4543      	cmp	r3, r8
 80100a6:	dcf0      	bgt.n	801008a <_printf_float+0x42e>
 80100a8:	e6fc      	b.n	800fea4 <_printf_float+0x248>
 80100aa:	f04f 0800 	mov.w	r8, #0
 80100ae:	f104 0919 	add.w	r9, r4, #25
 80100b2:	e7f4      	b.n	801009e <_printf_float+0x442>
 80100b4:	2900      	cmp	r1, #0
 80100b6:	f43f ae8b 	beq.w	800fdd0 <_printf_float+0x174>
 80100ba:	2300      	movs	r3, #0
 80100bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80100c0:	ab09      	add	r3, sp, #36	; 0x24
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	ec49 8b10 	vmov	d0, r8, r9
 80100c8:	6022      	str	r2, [r4, #0]
 80100ca:	f8cd a004 	str.w	sl, [sp, #4]
 80100ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7ff fd2d 	bl	800fb32 <__cvt>
 80100d8:	4680      	mov	r8, r0
 80100da:	e648      	b.n	800fd6e <_printf_float+0x112>

080100dc <_printf_common>:
 80100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e0:	4691      	mov	r9, r2
 80100e2:	461f      	mov	r7, r3
 80100e4:	688a      	ldr	r2, [r1, #8]
 80100e6:	690b      	ldr	r3, [r1, #16]
 80100e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100ec:	4293      	cmp	r3, r2
 80100ee:	bfb8      	it	lt
 80100f0:	4613      	movlt	r3, r2
 80100f2:	f8c9 3000 	str.w	r3, [r9]
 80100f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100fa:	4606      	mov	r6, r0
 80100fc:	460c      	mov	r4, r1
 80100fe:	b112      	cbz	r2, 8010106 <_printf_common+0x2a>
 8010100:	3301      	adds	r3, #1
 8010102:	f8c9 3000 	str.w	r3, [r9]
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	0699      	lsls	r1, r3, #26
 801010a:	bf42      	ittt	mi
 801010c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010110:	3302      	addmi	r3, #2
 8010112:	f8c9 3000 	strmi.w	r3, [r9]
 8010116:	6825      	ldr	r5, [r4, #0]
 8010118:	f015 0506 	ands.w	r5, r5, #6
 801011c:	d107      	bne.n	801012e <_printf_common+0x52>
 801011e:	f104 0a19 	add.w	sl, r4, #25
 8010122:	68e3      	ldr	r3, [r4, #12]
 8010124:	f8d9 2000 	ldr.w	r2, [r9]
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	42ab      	cmp	r3, r5
 801012c:	dc28      	bgt.n	8010180 <_printf_common+0xa4>
 801012e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010132:	6822      	ldr	r2, [r4, #0]
 8010134:	3300      	adds	r3, #0
 8010136:	bf18      	it	ne
 8010138:	2301      	movne	r3, #1
 801013a:	0692      	lsls	r2, r2, #26
 801013c:	d42d      	bmi.n	801019a <_printf_common+0xbe>
 801013e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010142:	4639      	mov	r1, r7
 8010144:	4630      	mov	r0, r6
 8010146:	47c0      	blx	r8
 8010148:	3001      	adds	r0, #1
 801014a:	d020      	beq.n	801018e <_printf_common+0xb2>
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	68e5      	ldr	r5, [r4, #12]
 8010150:	f8d9 2000 	ldr.w	r2, [r9]
 8010154:	f003 0306 	and.w	r3, r3, #6
 8010158:	2b04      	cmp	r3, #4
 801015a:	bf08      	it	eq
 801015c:	1aad      	subeq	r5, r5, r2
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	bf0c      	ite	eq
 8010164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010168:	2500      	movne	r5, #0
 801016a:	4293      	cmp	r3, r2
 801016c:	bfc4      	itt	gt
 801016e:	1a9b      	subgt	r3, r3, r2
 8010170:	18ed      	addgt	r5, r5, r3
 8010172:	f04f 0900 	mov.w	r9, #0
 8010176:	341a      	adds	r4, #26
 8010178:	454d      	cmp	r5, r9
 801017a:	d11a      	bne.n	80101b2 <_printf_common+0xd6>
 801017c:	2000      	movs	r0, #0
 801017e:	e008      	b.n	8010192 <_printf_common+0xb6>
 8010180:	2301      	movs	r3, #1
 8010182:	4652      	mov	r2, sl
 8010184:	4639      	mov	r1, r7
 8010186:	4630      	mov	r0, r6
 8010188:	47c0      	blx	r8
 801018a:	3001      	adds	r0, #1
 801018c:	d103      	bne.n	8010196 <_printf_common+0xba>
 801018e:	f04f 30ff 	mov.w	r0, #4294967295
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	3501      	adds	r5, #1
 8010198:	e7c3      	b.n	8010122 <_printf_common+0x46>
 801019a:	18e1      	adds	r1, r4, r3
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	2030      	movs	r0, #48	; 0x30
 80101a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101a4:	4422      	add	r2, r4
 80101a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101ae:	3302      	adds	r3, #2
 80101b0:	e7c5      	b.n	801013e <_printf_common+0x62>
 80101b2:	2301      	movs	r3, #1
 80101b4:	4622      	mov	r2, r4
 80101b6:	4639      	mov	r1, r7
 80101b8:	4630      	mov	r0, r6
 80101ba:	47c0      	blx	r8
 80101bc:	3001      	adds	r0, #1
 80101be:	d0e6      	beq.n	801018e <_printf_common+0xb2>
 80101c0:	f109 0901 	add.w	r9, r9, #1
 80101c4:	e7d8      	b.n	8010178 <_printf_common+0x9c>
	...

080101c8 <_printf_i>:
 80101c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80101d0:	460c      	mov	r4, r1
 80101d2:	7e09      	ldrb	r1, [r1, #24]
 80101d4:	b085      	sub	sp, #20
 80101d6:	296e      	cmp	r1, #110	; 0x6e
 80101d8:	4617      	mov	r7, r2
 80101da:	4606      	mov	r6, r0
 80101dc:	4698      	mov	r8, r3
 80101de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101e0:	f000 80b3 	beq.w	801034a <_printf_i+0x182>
 80101e4:	d822      	bhi.n	801022c <_printf_i+0x64>
 80101e6:	2963      	cmp	r1, #99	; 0x63
 80101e8:	d036      	beq.n	8010258 <_printf_i+0x90>
 80101ea:	d80a      	bhi.n	8010202 <_printf_i+0x3a>
 80101ec:	2900      	cmp	r1, #0
 80101ee:	f000 80b9 	beq.w	8010364 <_printf_i+0x19c>
 80101f2:	2958      	cmp	r1, #88	; 0x58
 80101f4:	f000 8083 	beq.w	80102fe <_printf_i+0x136>
 80101f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010200:	e032      	b.n	8010268 <_printf_i+0xa0>
 8010202:	2964      	cmp	r1, #100	; 0x64
 8010204:	d001      	beq.n	801020a <_printf_i+0x42>
 8010206:	2969      	cmp	r1, #105	; 0x69
 8010208:	d1f6      	bne.n	80101f8 <_printf_i+0x30>
 801020a:	6820      	ldr	r0, [r4, #0]
 801020c:	6813      	ldr	r3, [r2, #0]
 801020e:	0605      	lsls	r5, r0, #24
 8010210:	f103 0104 	add.w	r1, r3, #4
 8010214:	d52a      	bpl.n	801026c <_printf_i+0xa4>
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6011      	str	r1, [r2, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	da03      	bge.n	8010226 <_printf_i+0x5e>
 801021e:	222d      	movs	r2, #45	; 0x2d
 8010220:	425b      	negs	r3, r3
 8010222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010226:	486f      	ldr	r0, [pc, #444]	; (80103e4 <_printf_i+0x21c>)
 8010228:	220a      	movs	r2, #10
 801022a:	e039      	b.n	80102a0 <_printf_i+0xd8>
 801022c:	2973      	cmp	r1, #115	; 0x73
 801022e:	f000 809d 	beq.w	801036c <_printf_i+0x1a4>
 8010232:	d808      	bhi.n	8010246 <_printf_i+0x7e>
 8010234:	296f      	cmp	r1, #111	; 0x6f
 8010236:	d020      	beq.n	801027a <_printf_i+0xb2>
 8010238:	2970      	cmp	r1, #112	; 0x70
 801023a:	d1dd      	bne.n	80101f8 <_printf_i+0x30>
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	f043 0320 	orr.w	r3, r3, #32
 8010242:	6023      	str	r3, [r4, #0]
 8010244:	e003      	b.n	801024e <_printf_i+0x86>
 8010246:	2975      	cmp	r1, #117	; 0x75
 8010248:	d017      	beq.n	801027a <_printf_i+0xb2>
 801024a:	2978      	cmp	r1, #120	; 0x78
 801024c:	d1d4      	bne.n	80101f8 <_printf_i+0x30>
 801024e:	2378      	movs	r3, #120	; 0x78
 8010250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010254:	4864      	ldr	r0, [pc, #400]	; (80103e8 <_printf_i+0x220>)
 8010256:	e055      	b.n	8010304 <_printf_i+0x13c>
 8010258:	6813      	ldr	r3, [r2, #0]
 801025a:	1d19      	adds	r1, r3, #4
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	6011      	str	r1, [r2, #0]
 8010260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010268:	2301      	movs	r3, #1
 801026a:	e08c      	b.n	8010386 <_printf_i+0x1be>
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6011      	str	r1, [r2, #0]
 8010270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010274:	bf18      	it	ne
 8010276:	b21b      	sxthne	r3, r3
 8010278:	e7cf      	b.n	801021a <_printf_i+0x52>
 801027a:	6813      	ldr	r3, [r2, #0]
 801027c:	6825      	ldr	r5, [r4, #0]
 801027e:	1d18      	adds	r0, r3, #4
 8010280:	6010      	str	r0, [r2, #0]
 8010282:	0628      	lsls	r0, r5, #24
 8010284:	d501      	bpl.n	801028a <_printf_i+0xc2>
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	e002      	b.n	8010290 <_printf_i+0xc8>
 801028a:	0668      	lsls	r0, r5, #25
 801028c:	d5fb      	bpl.n	8010286 <_printf_i+0xbe>
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	4854      	ldr	r0, [pc, #336]	; (80103e4 <_printf_i+0x21c>)
 8010292:	296f      	cmp	r1, #111	; 0x6f
 8010294:	bf14      	ite	ne
 8010296:	220a      	movne	r2, #10
 8010298:	2208      	moveq	r2, #8
 801029a:	2100      	movs	r1, #0
 801029c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102a0:	6865      	ldr	r5, [r4, #4]
 80102a2:	60a5      	str	r5, [r4, #8]
 80102a4:	2d00      	cmp	r5, #0
 80102a6:	f2c0 8095 	blt.w	80103d4 <_printf_i+0x20c>
 80102aa:	6821      	ldr	r1, [r4, #0]
 80102ac:	f021 0104 	bic.w	r1, r1, #4
 80102b0:	6021      	str	r1, [r4, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d13d      	bne.n	8010332 <_printf_i+0x16a>
 80102b6:	2d00      	cmp	r5, #0
 80102b8:	f040 808e 	bne.w	80103d8 <_printf_i+0x210>
 80102bc:	4665      	mov	r5, ip
 80102be:	2a08      	cmp	r2, #8
 80102c0:	d10b      	bne.n	80102da <_printf_i+0x112>
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	07db      	lsls	r3, r3, #31
 80102c6:	d508      	bpl.n	80102da <_printf_i+0x112>
 80102c8:	6923      	ldr	r3, [r4, #16]
 80102ca:	6862      	ldr	r2, [r4, #4]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	bfde      	ittt	le
 80102d0:	2330      	movle	r3, #48	; 0x30
 80102d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80102da:	ebac 0305 	sub.w	r3, ip, r5
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	f8cd 8000 	str.w	r8, [sp]
 80102e4:	463b      	mov	r3, r7
 80102e6:	aa03      	add	r2, sp, #12
 80102e8:	4621      	mov	r1, r4
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ff fef6 	bl	80100dc <_printf_common>
 80102f0:	3001      	adds	r0, #1
 80102f2:	d14d      	bne.n	8010390 <_printf_i+0x1c8>
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295
 80102f8:	b005      	add	sp, #20
 80102fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102fe:	4839      	ldr	r0, [pc, #228]	; (80103e4 <_printf_i+0x21c>)
 8010300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010304:	6813      	ldr	r3, [r2, #0]
 8010306:	6821      	ldr	r1, [r4, #0]
 8010308:	1d1d      	adds	r5, r3, #4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6015      	str	r5, [r2, #0]
 801030e:	060a      	lsls	r2, r1, #24
 8010310:	d50b      	bpl.n	801032a <_printf_i+0x162>
 8010312:	07ca      	lsls	r2, r1, #31
 8010314:	bf44      	itt	mi
 8010316:	f041 0120 	orrmi.w	r1, r1, #32
 801031a:	6021      	strmi	r1, [r4, #0]
 801031c:	b91b      	cbnz	r3, 8010326 <_printf_i+0x15e>
 801031e:	6822      	ldr	r2, [r4, #0]
 8010320:	f022 0220 	bic.w	r2, r2, #32
 8010324:	6022      	str	r2, [r4, #0]
 8010326:	2210      	movs	r2, #16
 8010328:	e7b7      	b.n	801029a <_printf_i+0xd2>
 801032a:	064d      	lsls	r5, r1, #25
 801032c:	bf48      	it	mi
 801032e:	b29b      	uxthmi	r3, r3
 8010330:	e7ef      	b.n	8010312 <_printf_i+0x14a>
 8010332:	4665      	mov	r5, ip
 8010334:	fbb3 f1f2 	udiv	r1, r3, r2
 8010338:	fb02 3311 	mls	r3, r2, r1, r3
 801033c:	5cc3      	ldrb	r3, [r0, r3]
 801033e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010342:	460b      	mov	r3, r1
 8010344:	2900      	cmp	r1, #0
 8010346:	d1f5      	bne.n	8010334 <_printf_i+0x16c>
 8010348:	e7b9      	b.n	80102be <_printf_i+0xf6>
 801034a:	6813      	ldr	r3, [r2, #0]
 801034c:	6825      	ldr	r5, [r4, #0]
 801034e:	6961      	ldr	r1, [r4, #20]
 8010350:	1d18      	adds	r0, r3, #4
 8010352:	6010      	str	r0, [r2, #0]
 8010354:	0628      	lsls	r0, r5, #24
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	d501      	bpl.n	801035e <_printf_i+0x196>
 801035a:	6019      	str	r1, [r3, #0]
 801035c:	e002      	b.n	8010364 <_printf_i+0x19c>
 801035e:	066a      	lsls	r2, r5, #25
 8010360:	d5fb      	bpl.n	801035a <_printf_i+0x192>
 8010362:	8019      	strh	r1, [r3, #0]
 8010364:	2300      	movs	r3, #0
 8010366:	6123      	str	r3, [r4, #16]
 8010368:	4665      	mov	r5, ip
 801036a:	e7b9      	b.n	80102e0 <_printf_i+0x118>
 801036c:	6813      	ldr	r3, [r2, #0]
 801036e:	1d19      	adds	r1, r3, #4
 8010370:	6011      	str	r1, [r2, #0]
 8010372:	681d      	ldr	r5, [r3, #0]
 8010374:	6862      	ldr	r2, [r4, #4]
 8010376:	2100      	movs	r1, #0
 8010378:	4628      	mov	r0, r5
 801037a:	f7f7 fe69 	bl	8008050 <memchr>
 801037e:	b108      	cbz	r0, 8010384 <_printf_i+0x1bc>
 8010380:	1b40      	subs	r0, r0, r5
 8010382:	6060      	str	r0, [r4, #4]
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	2300      	movs	r3, #0
 801038a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801038e:	e7a7      	b.n	80102e0 <_printf_i+0x118>
 8010390:	6923      	ldr	r3, [r4, #16]
 8010392:	462a      	mov	r2, r5
 8010394:	4639      	mov	r1, r7
 8010396:	4630      	mov	r0, r6
 8010398:	47c0      	blx	r8
 801039a:	3001      	adds	r0, #1
 801039c:	d0aa      	beq.n	80102f4 <_printf_i+0x12c>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	079b      	lsls	r3, r3, #30
 80103a2:	d413      	bmi.n	80103cc <_printf_i+0x204>
 80103a4:	68e0      	ldr	r0, [r4, #12]
 80103a6:	9b03      	ldr	r3, [sp, #12]
 80103a8:	4298      	cmp	r0, r3
 80103aa:	bfb8      	it	lt
 80103ac:	4618      	movlt	r0, r3
 80103ae:	e7a3      	b.n	80102f8 <_printf_i+0x130>
 80103b0:	2301      	movs	r3, #1
 80103b2:	464a      	mov	r2, r9
 80103b4:	4639      	mov	r1, r7
 80103b6:	4630      	mov	r0, r6
 80103b8:	47c0      	blx	r8
 80103ba:	3001      	adds	r0, #1
 80103bc:	d09a      	beq.n	80102f4 <_printf_i+0x12c>
 80103be:	3501      	adds	r5, #1
 80103c0:	68e3      	ldr	r3, [r4, #12]
 80103c2:	9a03      	ldr	r2, [sp, #12]
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	42ab      	cmp	r3, r5
 80103c8:	dcf2      	bgt.n	80103b0 <_printf_i+0x1e8>
 80103ca:	e7eb      	b.n	80103a4 <_printf_i+0x1dc>
 80103cc:	2500      	movs	r5, #0
 80103ce:	f104 0919 	add.w	r9, r4, #25
 80103d2:	e7f5      	b.n	80103c0 <_printf_i+0x1f8>
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d1ac      	bne.n	8010332 <_printf_i+0x16a>
 80103d8:	7803      	ldrb	r3, [r0, #0]
 80103da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103e2:	e76c      	b.n	80102be <_printf_i+0xf6>
 80103e4:	080122b6 	.word	0x080122b6
 80103e8:	080122c7 	.word	0x080122c7

080103ec <iprintf>:
 80103ec:	b40f      	push	{r0, r1, r2, r3}
 80103ee:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <iprintf+0x2c>)
 80103f0:	b513      	push	{r0, r1, r4, lr}
 80103f2:	681c      	ldr	r4, [r3, #0]
 80103f4:	b124      	cbz	r4, 8010400 <iprintf+0x14>
 80103f6:	69a3      	ldr	r3, [r4, #24]
 80103f8:	b913      	cbnz	r3, 8010400 <iprintf+0x14>
 80103fa:	4620      	mov	r0, r4
 80103fc:	f001 f868 	bl	80114d0 <__sinit>
 8010400:	ab05      	add	r3, sp, #20
 8010402:	9a04      	ldr	r2, [sp, #16]
 8010404:	68a1      	ldr	r1, [r4, #8]
 8010406:	9301      	str	r3, [sp, #4]
 8010408:	4620      	mov	r0, r4
 801040a:	f001 fd21 	bl	8011e50 <_vfiprintf_r>
 801040e:	b002      	add	sp, #8
 8010410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010414:	b004      	add	sp, #16
 8010416:	4770      	bx	lr
 8010418:	2000000c 	.word	0x2000000c

0801041c <_puts_r>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	460e      	mov	r6, r1
 8010420:	4605      	mov	r5, r0
 8010422:	b118      	cbz	r0, 801042c <_puts_r+0x10>
 8010424:	6983      	ldr	r3, [r0, #24]
 8010426:	b90b      	cbnz	r3, 801042c <_puts_r+0x10>
 8010428:	f001 f852 	bl	80114d0 <__sinit>
 801042c:	69ab      	ldr	r3, [r5, #24]
 801042e:	68ac      	ldr	r4, [r5, #8]
 8010430:	b913      	cbnz	r3, 8010438 <_puts_r+0x1c>
 8010432:	4628      	mov	r0, r5
 8010434:	f001 f84c 	bl	80114d0 <__sinit>
 8010438:	4b23      	ldr	r3, [pc, #140]	; (80104c8 <_puts_r+0xac>)
 801043a:	429c      	cmp	r4, r3
 801043c:	d117      	bne.n	801046e <_puts_r+0x52>
 801043e:	686c      	ldr	r4, [r5, #4]
 8010440:	89a3      	ldrh	r3, [r4, #12]
 8010442:	071b      	lsls	r3, r3, #28
 8010444:	d51d      	bpl.n	8010482 <_puts_r+0x66>
 8010446:	6923      	ldr	r3, [r4, #16]
 8010448:	b1db      	cbz	r3, 8010482 <_puts_r+0x66>
 801044a:	3e01      	subs	r6, #1
 801044c:	68a3      	ldr	r3, [r4, #8]
 801044e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010452:	3b01      	subs	r3, #1
 8010454:	60a3      	str	r3, [r4, #8]
 8010456:	b9e9      	cbnz	r1, 8010494 <_puts_r+0x78>
 8010458:	2b00      	cmp	r3, #0
 801045a:	da2e      	bge.n	80104ba <_puts_r+0x9e>
 801045c:	4622      	mov	r2, r4
 801045e:	210a      	movs	r1, #10
 8010460:	4628      	mov	r0, r5
 8010462:	f000 f83f 	bl	80104e4 <__swbuf_r>
 8010466:	3001      	adds	r0, #1
 8010468:	d011      	beq.n	801048e <_puts_r+0x72>
 801046a:	200a      	movs	r0, #10
 801046c:	e011      	b.n	8010492 <_puts_r+0x76>
 801046e:	4b17      	ldr	r3, [pc, #92]	; (80104cc <_puts_r+0xb0>)
 8010470:	429c      	cmp	r4, r3
 8010472:	d101      	bne.n	8010478 <_puts_r+0x5c>
 8010474:	68ac      	ldr	r4, [r5, #8]
 8010476:	e7e3      	b.n	8010440 <_puts_r+0x24>
 8010478:	4b15      	ldr	r3, [pc, #84]	; (80104d0 <_puts_r+0xb4>)
 801047a:	429c      	cmp	r4, r3
 801047c:	bf08      	it	eq
 801047e:	68ec      	ldreq	r4, [r5, #12]
 8010480:	e7de      	b.n	8010440 <_puts_r+0x24>
 8010482:	4621      	mov	r1, r4
 8010484:	4628      	mov	r0, r5
 8010486:	f000 f87f 	bl	8010588 <__swsetup_r>
 801048a:	2800      	cmp	r0, #0
 801048c:	d0dd      	beq.n	801044a <_puts_r+0x2e>
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	2b00      	cmp	r3, #0
 8010496:	da04      	bge.n	80104a2 <_puts_r+0x86>
 8010498:	69a2      	ldr	r2, [r4, #24]
 801049a:	429a      	cmp	r2, r3
 801049c:	dc06      	bgt.n	80104ac <_puts_r+0x90>
 801049e:	290a      	cmp	r1, #10
 80104a0:	d004      	beq.n	80104ac <_puts_r+0x90>
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	6022      	str	r2, [r4, #0]
 80104a8:	7019      	strb	r1, [r3, #0]
 80104aa:	e7cf      	b.n	801044c <_puts_r+0x30>
 80104ac:	4622      	mov	r2, r4
 80104ae:	4628      	mov	r0, r5
 80104b0:	f000 f818 	bl	80104e4 <__swbuf_r>
 80104b4:	3001      	adds	r0, #1
 80104b6:	d1c9      	bne.n	801044c <_puts_r+0x30>
 80104b8:	e7e9      	b.n	801048e <_puts_r+0x72>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	200a      	movs	r0, #10
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	6022      	str	r2, [r4, #0]
 80104c2:	7018      	strb	r0, [r3, #0]
 80104c4:	e7e5      	b.n	8010492 <_puts_r+0x76>
 80104c6:	bf00      	nop
 80104c8:	08012308 	.word	0x08012308
 80104cc:	08012328 	.word	0x08012328
 80104d0:	080122e8 	.word	0x080122e8

080104d4 <puts>:
 80104d4:	4b02      	ldr	r3, [pc, #8]	; (80104e0 <puts+0xc>)
 80104d6:	4601      	mov	r1, r0
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	f7ff bf9f 	b.w	801041c <_puts_r>
 80104de:	bf00      	nop
 80104e0:	2000000c 	.word	0x2000000c

080104e4 <__swbuf_r>:
 80104e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e6:	460e      	mov	r6, r1
 80104e8:	4614      	mov	r4, r2
 80104ea:	4605      	mov	r5, r0
 80104ec:	b118      	cbz	r0, 80104f6 <__swbuf_r+0x12>
 80104ee:	6983      	ldr	r3, [r0, #24]
 80104f0:	b90b      	cbnz	r3, 80104f6 <__swbuf_r+0x12>
 80104f2:	f000 ffed 	bl	80114d0 <__sinit>
 80104f6:	4b21      	ldr	r3, [pc, #132]	; (801057c <__swbuf_r+0x98>)
 80104f8:	429c      	cmp	r4, r3
 80104fa:	d12a      	bne.n	8010552 <__swbuf_r+0x6e>
 80104fc:	686c      	ldr	r4, [r5, #4]
 80104fe:	69a3      	ldr	r3, [r4, #24]
 8010500:	60a3      	str	r3, [r4, #8]
 8010502:	89a3      	ldrh	r3, [r4, #12]
 8010504:	071a      	lsls	r2, r3, #28
 8010506:	d52e      	bpl.n	8010566 <__swbuf_r+0x82>
 8010508:	6923      	ldr	r3, [r4, #16]
 801050a:	b363      	cbz	r3, 8010566 <__swbuf_r+0x82>
 801050c:	6923      	ldr	r3, [r4, #16]
 801050e:	6820      	ldr	r0, [r4, #0]
 8010510:	1ac0      	subs	r0, r0, r3
 8010512:	6963      	ldr	r3, [r4, #20]
 8010514:	b2f6      	uxtb	r6, r6
 8010516:	4283      	cmp	r3, r0
 8010518:	4637      	mov	r7, r6
 801051a:	dc04      	bgt.n	8010526 <__swbuf_r+0x42>
 801051c:	4621      	mov	r1, r4
 801051e:	4628      	mov	r0, r5
 8010520:	f000 ff6c 	bl	80113fc <_fflush_r>
 8010524:	bb28      	cbnz	r0, 8010572 <__swbuf_r+0x8e>
 8010526:	68a3      	ldr	r3, [r4, #8]
 8010528:	3b01      	subs	r3, #1
 801052a:	60a3      	str	r3, [r4, #8]
 801052c:	6823      	ldr	r3, [r4, #0]
 801052e:	1c5a      	adds	r2, r3, #1
 8010530:	6022      	str	r2, [r4, #0]
 8010532:	701e      	strb	r6, [r3, #0]
 8010534:	6963      	ldr	r3, [r4, #20]
 8010536:	3001      	adds	r0, #1
 8010538:	4283      	cmp	r3, r0
 801053a:	d004      	beq.n	8010546 <__swbuf_r+0x62>
 801053c:	89a3      	ldrh	r3, [r4, #12]
 801053e:	07db      	lsls	r3, r3, #31
 8010540:	d519      	bpl.n	8010576 <__swbuf_r+0x92>
 8010542:	2e0a      	cmp	r6, #10
 8010544:	d117      	bne.n	8010576 <__swbuf_r+0x92>
 8010546:	4621      	mov	r1, r4
 8010548:	4628      	mov	r0, r5
 801054a:	f000 ff57 	bl	80113fc <_fflush_r>
 801054e:	b190      	cbz	r0, 8010576 <__swbuf_r+0x92>
 8010550:	e00f      	b.n	8010572 <__swbuf_r+0x8e>
 8010552:	4b0b      	ldr	r3, [pc, #44]	; (8010580 <__swbuf_r+0x9c>)
 8010554:	429c      	cmp	r4, r3
 8010556:	d101      	bne.n	801055c <__swbuf_r+0x78>
 8010558:	68ac      	ldr	r4, [r5, #8]
 801055a:	e7d0      	b.n	80104fe <__swbuf_r+0x1a>
 801055c:	4b09      	ldr	r3, [pc, #36]	; (8010584 <__swbuf_r+0xa0>)
 801055e:	429c      	cmp	r4, r3
 8010560:	bf08      	it	eq
 8010562:	68ec      	ldreq	r4, [r5, #12]
 8010564:	e7cb      	b.n	80104fe <__swbuf_r+0x1a>
 8010566:	4621      	mov	r1, r4
 8010568:	4628      	mov	r0, r5
 801056a:	f000 f80d 	bl	8010588 <__swsetup_r>
 801056e:	2800      	cmp	r0, #0
 8010570:	d0cc      	beq.n	801050c <__swbuf_r+0x28>
 8010572:	f04f 37ff 	mov.w	r7, #4294967295
 8010576:	4638      	mov	r0, r7
 8010578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801057a:	bf00      	nop
 801057c:	08012308 	.word	0x08012308
 8010580:	08012328 	.word	0x08012328
 8010584:	080122e8 	.word	0x080122e8

08010588 <__swsetup_r>:
 8010588:	4b32      	ldr	r3, [pc, #200]	; (8010654 <__swsetup_r+0xcc>)
 801058a:	b570      	push	{r4, r5, r6, lr}
 801058c:	681d      	ldr	r5, [r3, #0]
 801058e:	4606      	mov	r6, r0
 8010590:	460c      	mov	r4, r1
 8010592:	b125      	cbz	r5, 801059e <__swsetup_r+0x16>
 8010594:	69ab      	ldr	r3, [r5, #24]
 8010596:	b913      	cbnz	r3, 801059e <__swsetup_r+0x16>
 8010598:	4628      	mov	r0, r5
 801059a:	f000 ff99 	bl	80114d0 <__sinit>
 801059e:	4b2e      	ldr	r3, [pc, #184]	; (8010658 <__swsetup_r+0xd0>)
 80105a0:	429c      	cmp	r4, r3
 80105a2:	d10f      	bne.n	80105c4 <__swsetup_r+0x3c>
 80105a4:	686c      	ldr	r4, [r5, #4]
 80105a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	0715      	lsls	r5, r2, #28
 80105ae:	d42c      	bmi.n	801060a <__swsetup_r+0x82>
 80105b0:	06d0      	lsls	r0, r2, #27
 80105b2:	d411      	bmi.n	80105d8 <__swsetup_r+0x50>
 80105b4:	2209      	movs	r2, #9
 80105b6:	6032      	str	r2, [r6, #0]
 80105b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105bc:	81a3      	strh	r3, [r4, #12]
 80105be:	f04f 30ff 	mov.w	r0, #4294967295
 80105c2:	e03e      	b.n	8010642 <__swsetup_r+0xba>
 80105c4:	4b25      	ldr	r3, [pc, #148]	; (801065c <__swsetup_r+0xd4>)
 80105c6:	429c      	cmp	r4, r3
 80105c8:	d101      	bne.n	80105ce <__swsetup_r+0x46>
 80105ca:	68ac      	ldr	r4, [r5, #8]
 80105cc:	e7eb      	b.n	80105a6 <__swsetup_r+0x1e>
 80105ce:	4b24      	ldr	r3, [pc, #144]	; (8010660 <__swsetup_r+0xd8>)
 80105d0:	429c      	cmp	r4, r3
 80105d2:	bf08      	it	eq
 80105d4:	68ec      	ldreq	r4, [r5, #12]
 80105d6:	e7e6      	b.n	80105a6 <__swsetup_r+0x1e>
 80105d8:	0751      	lsls	r1, r2, #29
 80105da:	d512      	bpl.n	8010602 <__swsetup_r+0x7a>
 80105dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105de:	b141      	cbz	r1, 80105f2 <__swsetup_r+0x6a>
 80105e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105e4:	4299      	cmp	r1, r3
 80105e6:	d002      	beq.n	80105ee <__swsetup_r+0x66>
 80105e8:	4630      	mov	r0, r6
 80105ea:	f001 fb5f 	bl	8011cac <_free_r>
 80105ee:	2300      	movs	r3, #0
 80105f0:	6363      	str	r3, [r4, #52]	; 0x34
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105f8:	81a3      	strh	r3, [r4, #12]
 80105fa:	2300      	movs	r3, #0
 80105fc:	6063      	str	r3, [r4, #4]
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	f043 0308 	orr.w	r3, r3, #8
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	6923      	ldr	r3, [r4, #16]
 801060c:	b94b      	cbnz	r3, 8010622 <__swsetup_r+0x9a>
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010618:	d003      	beq.n	8010622 <__swsetup_r+0x9a>
 801061a:	4621      	mov	r1, r4
 801061c:	4630      	mov	r0, r6
 801061e:	f001 f813 	bl	8011648 <__smakebuf_r>
 8010622:	89a2      	ldrh	r2, [r4, #12]
 8010624:	f012 0301 	ands.w	r3, r2, #1
 8010628:	d00c      	beq.n	8010644 <__swsetup_r+0xbc>
 801062a:	2300      	movs	r3, #0
 801062c:	60a3      	str	r3, [r4, #8]
 801062e:	6963      	ldr	r3, [r4, #20]
 8010630:	425b      	negs	r3, r3
 8010632:	61a3      	str	r3, [r4, #24]
 8010634:	6923      	ldr	r3, [r4, #16]
 8010636:	b953      	cbnz	r3, 801064e <__swsetup_r+0xc6>
 8010638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801063c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010640:	d1ba      	bne.n	80105b8 <__swsetup_r+0x30>
 8010642:	bd70      	pop	{r4, r5, r6, pc}
 8010644:	0792      	lsls	r2, r2, #30
 8010646:	bf58      	it	pl
 8010648:	6963      	ldrpl	r3, [r4, #20]
 801064a:	60a3      	str	r3, [r4, #8]
 801064c:	e7f2      	b.n	8010634 <__swsetup_r+0xac>
 801064e:	2000      	movs	r0, #0
 8010650:	e7f7      	b.n	8010642 <__swsetup_r+0xba>
 8010652:	bf00      	nop
 8010654:	2000000c 	.word	0x2000000c
 8010658:	08012308 	.word	0x08012308
 801065c:	08012328 	.word	0x08012328
 8010660:	080122e8 	.word	0x080122e8

08010664 <quorem>:
 8010664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010668:	6903      	ldr	r3, [r0, #16]
 801066a:	690c      	ldr	r4, [r1, #16]
 801066c:	42a3      	cmp	r3, r4
 801066e:	4680      	mov	r8, r0
 8010670:	f2c0 8082 	blt.w	8010778 <quorem+0x114>
 8010674:	3c01      	subs	r4, #1
 8010676:	f101 0714 	add.w	r7, r1, #20
 801067a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801067e:	f100 0614 	add.w	r6, r0, #20
 8010682:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010686:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801068a:	eb06 030c 	add.w	r3, r6, ip
 801068e:	3501      	adds	r5, #1
 8010690:	eb07 090c 	add.w	r9, r7, ip
 8010694:	9301      	str	r3, [sp, #4]
 8010696:	fbb0 f5f5 	udiv	r5, r0, r5
 801069a:	b395      	cbz	r5, 8010702 <quorem+0x9e>
 801069c:	f04f 0a00 	mov.w	sl, #0
 80106a0:	4638      	mov	r0, r7
 80106a2:	46b6      	mov	lr, r6
 80106a4:	46d3      	mov	fp, sl
 80106a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80106aa:	b293      	uxth	r3, r2
 80106ac:	fb05 a303 	mla	r3, r5, r3, sl
 80106b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	ebab 0303 	sub.w	r3, fp, r3
 80106ba:	0c12      	lsrs	r2, r2, #16
 80106bc:	f8de b000 	ldr.w	fp, [lr]
 80106c0:	fb05 a202 	mla	r2, r5, r2, sl
 80106c4:	fa13 f38b 	uxtah	r3, r3, fp
 80106c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80106cc:	fa1f fb82 	uxth.w	fp, r2
 80106d0:	f8de 2000 	ldr.w	r2, [lr]
 80106d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80106d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106dc:	b29b      	uxth	r3, r3
 80106de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106e2:	4581      	cmp	r9, r0
 80106e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80106e8:	f84e 3b04 	str.w	r3, [lr], #4
 80106ec:	d2db      	bcs.n	80106a6 <quorem+0x42>
 80106ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80106f2:	b933      	cbnz	r3, 8010702 <quorem+0x9e>
 80106f4:	9b01      	ldr	r3, [sp, #4]
 80106f6:	3b04      	subs	r3, #4
 80106f8:	429e      	cmp	r6, r3
 80106fa:	461a      	mov	r2, r3
 80106fc:	d330      	bcc.n	8010760 <quorem+0xfc>
 80106fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8010702:	4640      	mov	r0, r8
 8010704:	f001 f9fe 	bl	8011b04 <__mcmp>
 8010708:	2800      	cmp	r0, #0
 801070a:	db25      	blt.n	8010758 <quorem+0xf4>
 801070c:	3501      	adds	r5, #1
 801070e:	4630      	mov	r0, r6
 8010710:	f04f 0c00 	mov.w	ip, #0
 8010714:	f857 2b04 	ldr.w	r2, [r7], #4
 8010718:	f8d0 e000 	ldr.w	lr, [r0]
 801071c:	b293      	uxth	r3, r2
 801071e:	ebac 0303 	sub.w	r3, ip, r3
 8010722:	0c12      	lsrs	r2, r2, #16
 8010724:	fa13 f38e 	uxtah	r3, r3, lr
 8010728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801072c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010730:	b29b      	uxth	r3, r3
 8010732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010736:	45b9      	cmp	r9, r7
 8010738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801073c:	f840 3b04 	str.w	r3, [r0], #4
 8010740:	d2e8      	bcs.n	8010714 <quorem+0xb0>
 8010742:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010746:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801074a:	b92a      	cbnz	r2, 8010758 <quorem+0xf4>
 801074c:	3b04      	subs	r3, #4
 801074e:	429e      	cmp	r6, r3
 8010750:	461a      	mov	r2, r3
 8010752:	d30b      	bcc.n	801076c <quorem+0x108>
 8010754:	f8c8 4010 	str.w	r4, [r8, #16]
 8010758:	4628      	mov	r0, r5
 801075a:	b003      	add	sp, #12
 801075c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010760:	6812      	ldr	r2, [r2, #0]
 8010762:	3b04      	subs	r3, #4
 8010764:	2a00      	cmp	r2, #0
 8010766:	d1ca      	bne.n	80106fe <quorem+0x9a>
 8010768:	3c01      	subs	r4, #1
 801076a:	e7c5      	b.n	80106f8 <quorem+0x94>
 801076c:	6812      	ldr	r2, [r2, #0]
 801076e:	3b04      	subs	r3, #4
 8010770:	2a00      	cmp	r2, #0
 8010772:	d1ef      	bne.n	8010754 <quorem+0xf0>
 8010774:	3c01      	subs	r4, #1
 8010776:	e7ea      	b.n	801074e <quorem+0xea>
 8010778:	2000      	movs	r0, #0
 801077a:	e7ee      	b.n	801075a <quorem+0xf6>
 801077c:	0000      	movs	r0, r0
	...

08010780 <_dtoa_r>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	ec57 6b10 	vmov	r6, r7, d0
 8010788:	b097      	sub	sp, #92	; 0x5c
 801078a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801078c:	9106      	str	r1, [sp, #24]
 801078e:	4604      	mov	r4, r0
 8010790:	920b      	str	r2, [sp, #44]	; 0x2c
 8010792:	9312      	str	r3, [sp, #72]	; 0x48
 8010794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010798:	e9cd 6700 	strd	r6, r7, [sp]
 801079c:	b93d      	cbnz	r5, 80107ae <_dtoa_r+0x2e>
 801079e:	2010      	movs	r0, #16
 80107a0:	f000 ff92 	bl	80116c8 <malloc>
 80107a4:	6260      	str	r0, [r4, #36]	; 0x24
 80107a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80107aa:	6005      	str	r5, [r0, #0]
 80107ac:	60c5      	str	r5, [r0, #12]
 80107ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107b0:	6819      	ldr	r1, [r3, #0]
 80107b2:	b151      	cbz	r1, 80107ca <_dtoa_r+0x4a>
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	604a      	str	r2, [r1, #4]
 80107b8:	2301      	movs	r3, #1
 80107ba:	4093      	lsls	r3, r2
 80107bc:	608b      	str	r3, [r1, #8]
 80107be:	4620      	mov	r0, r4
 80107c0:	f000 ffbe 	bl	8011740 <_Bfree>
 80107c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107c6:	2200      	movs	r2, #0
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	1e3b      	subs	r3, r7, #0
 80107cc:	bfbb      	ittet	lt
 80107ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80107d2:	9301      	strlt	r3, [sp, #4]
 80107d4:	2300      	movge	r3, #0
 80107d6:	2201      	movlt	r2, #1
 80107d8:	bfac      	ite	ge
 80107da:	f8c8 3000 	strge.w	r3, [r8]
 80107de:	f8c8 2000 	strlt.w	r2, [r8]
 80107e2:	4baf      	ldr	r3, [pc, #700]	; (8010aa0 <_dtoa_r+0x320>)
 80107e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80107e8:	ea33 0308 	bics.w	r3, r3, r8
 80107ec:	d114      	bne.n	8010818 <_dtoa_r+0x98>
 80107ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	9b00      	ldr	r3, [sp, #0]
 80107f8:	b923      	cbnz	r3, 8010804 <_dtoa_r+0x84>
 80107fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80107fe:	2800      	cmp	r0, #0
 8010800:	f000 8542 	beq.w	8011288 <_dtoa_r+0xb08>
 8010804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010806:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010ab4 <_dtoa_r+0x334>
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 8544 	beq.w	8011298 <_dtoa_r+0xb18>
 8010810:	f10b 0303 	add.w	r3, fp, #3
 8010814:	f000 bd3e 	b.w	8011294 <_dtoa_r+0xb14>
 8010818:	e9dd 6700 	ldrd	r6, r7, [sp]
 801081c:	2200      	movs	r2, #0
 801081e:	2300      	movs	r3, #0
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f8 f888 	bl	8008938 <__aeabi_dcmpeq>
 8010828:	4681      	mov	r9, r0
 801082a:	b168      	cbz	r0, 8010848 <_dtoa_r+0xc8>
 801082c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801082e:	2301      	movs	r3, #1
 8010830:	6013      	str	r3, [r2, #0]
 8010832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 8524 	beq.w	8011282 <_dtoa_r+0xb02>
 801083a:	4b9a      	ldr	r3, [pc, #616]	; (8010aa4 <_dtoa_r+0x324>)
 801083c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801083e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	f000 bd28 	b.w	8011298 <_dtoa_r+0xb18>
 8010848:	aa14      	add	r2, sp, #80	; 0x50
 801084a:	a915      	add	r1, sp, #84	; 0x54
 801084c:	ec47 6b10 	vmov	d0, r6, r7
 8010850:	4620      	mov	r0, r4
 8010852:	f001 f9ce 	bl	8011bf2 <__d2b>
 8010856:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801085a:	9004      	str	r0, [sp, #16]
 801085c:	2d00      	cmp	r5, #0
 801085e:	d07c      	beq.n	801095a <_dtoa_r+0x1da>
 8010860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010864:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010868:	46b2      	mov	sl, r6
 801086a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801086e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010872:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010876:	2200      	movs	r2, #0
 8010878:	4b8b      	ldr	r3, [pc, #556]	; (8010aa8 <_dtoa_r+0x328>)
 801087a:	4650      	mov	r0, sl
 801087c:	4659      	mov	r1, fp
 801087e:	f7f7 fc3b 	bl	80080f8 <__aeabi_dsub>
 8010882:	a381      	add	r3, pc, #516	; (adr r3, 8010a88 <_dtoa_r+0x308>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	f7f7 fdee 	bl	8008468 <__aeabi_dmul>
 801088c:	a380      	add	r3, pc, #512	; (adr r3, 8010a90 <_dtoa_r+0x310>)
 801088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010892:	f7f7 fc33 	bl	80080fc <__adddf3>
 8010896:	4606      	mov	r6, r0
 8010898:	4628      	mov	r0, r5
 801089a:	460f      	mov	r7, r1
 801089c:	f7f7 fd7a 	bl	8008394 <__aeabi_i2d>
 80108a0:	a37d      	add	r3, pc, #500	; (adr r3, 8010a98 <_dtoa_r+0x318>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	f7f7 fddf 	bl	8008468 <__aeabi_dmul>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	4630      	mov	r0, r6
 80108b0:	4639      	mov	r1, r7
 80108b2:	f7f7 fc23 	bl	80080fc <__adddf3>
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	f7f8 f885 	bl	80089c8 <__aeabi_d2iz>
 80108be:	2200      	movs	r2, #0
 80108c0:	4682      	mov	sl, r0
 80108c2:	2300      	movs	r3, #0
 80108c4:	4630      	mov	r0, r6
 80108c6:	4639      	mov	r1, r7
 80108c8:	f7f8 f840 	bl	800894c <__aeabi_dcmplt>
 80108cc:	b148      	cbz	r0, 80108e2 <_dtoa_r+0x162>
 80108ce:	4650      	mov	r0, sl
 80108d0:	f7f7 fd60 	bl	8008394 <__aeabi_i2d>
 80108d4:	4632      	mov	r2, r6
 80108d6:	463b      	mov	r3, r7
 80108d8:	f7f8 f82e 	bl	8008938 <__aeabi_dcmpeq>
 80108dc:	b908      	cbnz	r0, 80108e2 <_dtoa_r+0x162>
 80108de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108e2:	f1ba 0f16 	cmp.w	sl, #22
 80108e6:	d859      	bhi.n	801099c <_dtoa_r+0x21c>
 80108e8:	4970      	ldr	r1, [pc, #448]	; (8010aac <_dtoa_r+0x32c>)
 80108ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80108ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f6:	f7f8 f847 	bl	8008988 <__aeabi_dcmpgt>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d050      	beq.n	80109a0 <_dtoa_r+0x220>
 80108fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010902:	2300      	movs	r3, #0
 8010904:	930f      	str	r3, [sp, #60]	; 0x3c
 8010906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010908:	1b5d      	subs	r5, r3, r5
 801090a:	f1b5 0801 	subs.w	r8, r5, #1
 801090e:	bf49      	itett	mi
 8010910:	f1c5 0301 	rsbmi	r3, r5, #1
 8010914:	2300      	movpl	r3, #0
 8010916:	9305      	strmi	r3, [sp, #20]
 8010918:	f04f 0800 	movmi.w	r8, #0
 801091c:	bf58      	it	pl
 801091e:	9305      	strpl	r3, [sp, #20]
 8010920:	f1ba 0f00 	cmp.w	sl, #0
 8010924:	db3e      	blt.n	80109a4 <_dtoa_r+0x224>
 8010926:	2300      	movs	r3, #0
 8010928:	44d0      	add	r8, sl
 801092a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801092e:	9307      	str	r3, [sp, #28]
 8010930:	9b06      	ldr	r3, [sp, #24]
 8010932:	2b09      	cmp	r3, #9
 8010934:	f200 8090 	bhi.w	8010a58 <_dtoa_r+0x2d8>
 8010938:	2b05      	cmp	r3, #5
 801093a:	bfc4      	itt	gt
 801093c:	3b04      	subgt	r3, #4
 801093e:	9306      	strgt	r3, [sp, #24]
 8010940:	9b06      	ldr	r3, [sp, #24]
 8010942:	f1a3 0302 	sub.w	r3, r3, #2
 8010946:	bfcc      	ite	gt
 8010948:	2500      	movgt	r5, #0
 801094a:	2501      	movle	r5, #1
 801094c:	2b03      	cmp	r3, #3
 801094e:	f200 808f 	bhi.w	8010a70 <_dtoa_r+0x2f0>
 8010952:	e8df f003 	tbb	[pc, r3]
 8010956:	7f7d      	.short	0x7f7d
 8010958:	7131      	.short	0x7131
 801095a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801095e:	441d      	add	r5, r3
 8010960:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010964:	2820      	cmp	r0, #32
 8010966:	dd13      	ble.n	8010990 <_dtoa_r+0x210>
 8010968:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801096c:	9b00      	ldr	r3, [sp, #0]
 801096e:	fa08 f800 	lsl.w	r8, r8, r0
 8010972:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010976:	fa23 f000 	lsr.w	r0, r3, r0
 801097a:	ea48 0000 	orr.w	r0, r8, r0
 801097e:	f7f7 fcf9 	bl	8008374 <__aeabi_ui2d>
 8010982:	2301      	movs	r3, #1
 8010984:	4682      	mov	sl, r0
 8010986:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801098a:	3d01      	subs	r5, #1
 801098c:	9313      	str	r3, [sp, #76]	; 0x4c
 801098e:	e772      	b.n	8010876 <_dtoa_r+0xf6>
 8010990:	9b00      	ldr	r3, [sp, #0]
 8010992:	f1c0 0020 	rsb	r0, r0, #32
 8010996:	fa03 f000 	lsl.w	r0, r3, r0
 801099a:	e7f0      	b.n	801097e <_dtoa_r+0x1fe>
 801099c:	2301      	movs	r3, #1
 801099e:	e7b1      	b.n	8010904 <_dtoa_r+0x184>
 80109a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80109a2:	e7b0      	b.n	8010906 <_dtoa_r+0x186>
 80109a4:	9b05      	ldr	r3, [sp, #20]
 80109a6:	eba3 030a 	sub.w	r3, r3, sl
 80109aa:	9305      	str	r3, [sp, #20]
 80109ac:	f1ca 0300 	rsb	r3, sl, #0
 80109b0:	9307      	str	r3, [sp, #28]
 80109b2:	2300      	movs	r3, #0
 80109b4:	930e      	str	r3, [sp, #56]	; 0x38
 80109b6:	e7bb      	b.n	8010930 <_dtoa_r+0x1b0>
 80109b8:	2301      	movs	r3, #1
 80109ba:	930a      	str	r3, [sp, #40]	; 0x28
 80109bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	dd59      	ble.n	8010a76 <_dtoa_r+0x2f6>
 80109c2:	9302      	str	r3, [sp, #8]
 80109c4:	4699      	mov	r9, r3
 80109c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80109c8:	2200      	movs	r2, #0
 80109ca:	6072      	str	r2, [r6, #4]
 80109cc:	2204      	movs	r2, #4
 80109ce:	f102 0014 	add.w	r0, r2, #20
 80109d2:	4298      	cmp	r0, r3
 80109d4:	6871      	ldr	r1, [r6, #4]
 80109d6:	d953      	bls.n	8010a80 <_dtoa_r+0x300>
 80109d8:	4620      	mov	r0, r4
 80109da:	f000 fe7d 	bl	80116d8 <_Balloc>
 80109de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109e0:	6030      	str	r0, [r6, #0]
 80109e2:	f1b9 0f0e 	cmp.w	r9, #14
 80109e6:	f8d3 b000 	ldr.w	fp, [r3]
 80109ea:	f200 80e6 	bhi.w	8010bba <_dtoa_r+0x43a>
 80109ee:	2d00      	cmp	r5, #0
 80109f0:	f000 80e3 	beq.w	8010bba <_dtoa_r+0x43a>
 80109f4:	ed9d 7b00 	vldr	d7, [sp]
 80109f8:	f1ba 0f00 	cmp.w	sl, #0
 80109fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010a00:	dd74      	ble.n	8010aec <_dtoa_r+0x36c>
 8010a02:	4a2a      	ldr	r2, [pc, #168]	; (8010aac <_dtoa_r+0x32c>)
 8010a04:	f00a 030f 	and.w	r3, sl, #15
 8010a08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a0c:	ed93 7b00 	vldr	d7, [r3]
 8010a10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010a14:	06f0      	lsls	r0, r6, #27
 8010a16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010a1a:	d565      	bpl.n	8010ae8 <_dtoa_r+0x368>
 8010a1c:	4b24      	ldr	r3, [pc, #144]	; (8010ab0 <_dtoa_r+0x330>)
 8010a1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010a22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a26:	f7f7 fe49 	bl	80086bc <__aeabi_ddiv>
 8010a2a:	e9cd 0100 	strd	r0, r1, [sp]
 8010a2e:	f006 060f 	and.w	r6, r6, #15
 8010a32:	2503      	movs	r5, #3
 8010a34:	4f1e      	ldr	r7, [pc, #120]	; (8010ab0 <_dtoa_r+0x330>)
 8010a36:	e04c      	b.n	8010ad2 <_dtoa_r+0x352>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a3e:	4453      	add	r3, sl
 8010a40:	f103 0901 	add.w	r9, r3, #1
 8010a44:	9302      	str	r3, [sp, #8]
 8010a46:	464b      	mov	r3, r9
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	bfb8      	it	lt
 8010a4c:	2301      	movlt	r3, #1
 8010a4e:	e7ba      	b.n	80109c6 <_dtoa_r+0x246>
 8010a50:	2300      	movs	r3, #0
 8010a52:	e7b2      	b.n	80109ba <_dtoa_r+0x23a>
 8010a54:	2300      	movs	r3, #0
 8010a56:	e7f0      	b.n	8010a3a <_dtoa_r+0x2ba>
 8010a58:	2501      	movs	r5, #1
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	9306      	str	r3, [sp, #24]
 8010a5e:	950a      	str	r5, [sp, #40]	; 0x28
 8010a60:	f04f 33ff 	mov.w	r3, #4294967295
 8010a64:	9302      	str	r3, [sp, #8]
 8010a66:	4699      	mov	r9, r3
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2312      	movs	r3, #18
 8010a6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a6e:	e7aa      	b.n	80109c6 <_dtoa_r+0x246>
 8010a70:	2301      	movs	r3, #1
 8010a72:	930a      	str	r3, [sp, #40]	; 0x28
 8010a74:	e7f4      	b.n	8010a60 <_dtoa_r+0x2e0>
 8010a76:	2301      	movs	r3, #1
 8010a78:	9302      	str	r3, [sp, #8]
 8010a7a:	4699      	mov	r9, r3
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	e7f5      	b.n	8010a6c <_dtoa_r+0x2ec>
 8010a80:	3101      	adds	r1, #1
 8010a82:	6071      	str	r1, [r6, #4]
 8010a84:	0052      	lsls	r2, r2, #1
 8010a86:	e7a2      	b.n	80109ce <_dtoa_r+0x24e>
 8010a88:	636f4361 	.word	0x636f4361
 8010a8c:	3fd287a7 	.word	0x3fd287a7
 8010a90:	8b60c8b3 	.word	0x8b60c8b3
 8010a94:	3fc68a28 	.word	0x3fc68a28
 8010a98:	509f79fb 	.word	0x509f79fb
 8010a9c:	3fd34413 	.word	0x3fd34413
 8010aa0:	7ff00000 	.word	0x7ff00000
 8010aa4:	080122b5 	.word	0x080122b5
 8010aa8:	3ff80000 	.word	0x3ff80000
 8010aac:	08012370 	.word	0x08012370
 8010ab0:	08012348 	.word	0x08012348
 8010ab4:	080122e1 	.word	0x080122e1
 8010ab8:	07f1      	lsls	r1, r6, #31
 8010aba:	d508      	bpl.n	8010ace <_dtoa_r+0x34e>
 8010abc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ac4:	f7f7 fcd0 	bl	8008468 <__aeabi_dmul>
 8010ac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010acc:	3501      	adds	r5, #1
 8010ace:	1076      	asrs	r6, r6, #1
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	2e00      	cmp	r6, #0
 8010ad4:	d1f0      	bne.n	8010ab8 <_dtoa_r+0x338>
 8010ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ade:	f7f7 fded 	bl	80086bc <__aeabi_ddiv>
 8010ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8010ae6:	e01a      	b.n	8010b1e <_dtoa_r+0x39e>
 8010ae8:	2502      	movs	r5, #2
 8010aea:	e7a3      	b.n	8010a34 <_dtoa_r+0x2b4>
 8010aec:	f000 80a0 	beq.w	8010c30 <_dtoa_r+0x4b0>
 8010af0:	f1ca 0600 	rsb	r6, sl, #0
 8010af4:	4b9f      	ldr	r3, [pc, #636]	; (8010d74 <_dtoa_r+0x5f4>)
 8010af6:	4fa0      	ldr	r7, [pc, #640]	; (8010d78 <_dtoa_r+0x5f8>)
 8010af8:	f006 020f 	and.w	r2, r6, #15
 8010afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b08:	f7f7 fcae 	bl	8008468 <__aeabi_dmul>
 8010b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8010b10:	1136      	asrs	r6, r6, #4
 8010b12:	2300      	movs	r3, #0
 8010b14:	2502      	movs	r5, #2
 8010b16:	2e00      	cmp	r6, #0
 8010b18:	d17f      	bne.n	8010c1a <_dtoa_r+0x49a>
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1e1      	bne.n	8010ae2 <_dtoa_r+0x362>
 8010b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f000 8087 	beq.w	8010c34 <_dtoa_r+0x4b4>
 8010b26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	4b93      	ldr	r3, [pc, #588]	; (8010d7c <_dtoa_r+0x5fc>)
 8010b2e:	4630      	mov	r0, r6
 8010b30:	4639      	mov	r1, r7
 8010b32:	f7f7 ff0b 	bl	800894c <__aeabi_dcmplt>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d07c      	beq.n	8010c34 <_dtoa_r+0x4b4>
 8010b3a:	f1b9 0f00 	cmp.w	r9, #0
 8010b3e:	d079      	beq.n	8010c34 <_dtoa_r+0x4b4>
 8010b40:	9b02      	ldr	r3, [sp, #8]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dd35      	ble.n	8010bb2 <_dtoa_r+0x432>
 8010b46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010b4a:	9308      	str	r3, [sp, #32]
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	2200      	movs	r2, #0
 8010b50:	4b8b      	ldr	r3, [pc, #556]	; (8010d80 <_dtoa_r+0x600>)
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7f7 fc88 	bl	8008468 <__aeabi_dmul>
 8010b58:	e9cd 0100 	strd	r0, r1, [sp]
 8010b5c:	9f02      	ldr	r7, [sp, #8]
 8010b5e:	3501      	adds	r5, #1
 8010b60:	4628      	mov	r0, r5
 8010b62:	f7f7 fc17 	bl	8008394 <__aeabi_i2d>
 8010b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b6a:	f7f7 fc7d 	bl	8008468 <__aeabi_dmul>
 8010b6e:	2200      	movs	r2, #0
 8010b70:	4b84      	ldr	r3, [pc, #528]	; (8010d84 <_dtoa_r+0x604>)
 8010b72:	f7f7 fac3 	bl	80080fc <__adddf3>
 8010b76:	4605      	mov	r5, r0
 8010b78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010b7c:	2f00      	cmp	r7, #0
 8010b7e:	d15d      	bne.n	8010c3c <_dtoa_r+0x4bc>
 8010b80:	2200      	movs	r2, #0
 8010b82:	4b81      	ldr	r3, [pc, #516]	; (8010d88 <_dtoa_r+0x608>)
 8010b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b88:	f7f7 fab6 	bl	80080f8 <__aeabi_dsub>
 8010b8c:	462a      	mov	r2, r5
 8010b8e:	4633      	mov	r3, r6
 8010b90:	e9cd 0100 	strd	r0, r1, [sp]
 8010b94:	f7f7 fef8 	bl	8008988 <__aeabi_dcmpgt>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	f040 8288 	bne.w	80110ae <_dtoa_r+0x92e>
 8010b9e:	462a      	mov	r2, r5
 8010ba0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ba8:	f7f7 fed0 	bl	800894c <__aeabi_dcmplt>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f040 827c 	bne.w	80110aa <_dtoa_r+0x92a>
 8010bb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8010bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f2c0 8150 	blt.w	8010e62 <_dtoa_r+0x6e2>
 8010bc2:	f1ba 0f0e 	cmp.w	sl, #14
 8010bc6:	f300 814c 	bgt.w	8010e62 <_dtoa_r+0x6e2>
 8010bca:	4b6a      	ldr	r3, [pc, #424]	; (8010d74 <_dtoa_r+0x5f4>)
 8010bcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010bd0:	ed93 7b00 	vldr	d7, [r3]
 8010bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bdc:	f280 80d8 	bge.w	8010d90 <_dtoa_r+0x610>
 8010be0:	f1b9 0f00 	cmp.w	r9, #0
 8010be4:	f300 80d4 	bgt.w	8010d90 <_dtoa_r+0x610>
 8010be8:	f040 825e 	bne.w	80110a8 <_dtoa_r+0x928>
 8010bec:	2200      	movs	r2, #0
 8010bee:	4b66      	ldr	r3, [pc, #408]	; (8010d88 <_dtoa_r+0x608>)
 8010bf0:	ec51 0b17 	vmov	r0, r1, d7
 8010bf4:	f7f7 fc38 	bl	8008468 <__aeabi_dmul>
 8010bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bfc:	f7f7 feba 	bl	8008974 <__aeabi_dcmpge>
 8010c00:	464f      	mov	r7, r9
 8010c02:	464e      	mov	r6, r9
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f040 8234 	bne.w	8011072 <_dtoa_r+0x8f2>
 8010c0a:	2331      	movs	r3, #49	; 0x31
 8010c0c:	f10b 0501 	add.w	r5, fp, #1
 8010c10:	f88b 3000 	strb.w	r3, [fp]
 8010c14:	f10a 0a01 	add.w	sl, sl, #1
 8010c18:	e22f      	b.n	801107a <_dtoa_r+0x8fa>
 8010c1a:	07f2      	lsls	r2, r6, #31
 8010c1c:	d505      	bpl.n	8010c2a <_dtoa_r+0x4aa>
 8010c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c22:	f7f7 fc21 	bl	8008468 <__aeabi_dmul>
 8010c26:	3501      	adds	r5, #1
 8010c28:	2301      	movs	r3, #1
 8010c2a:	1076      	asrs	r6, r6, #1
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	e772      	b.n	8010b16 <_dtoa_r+0x396>
 8010c30:	2502      	movs	r5, #2
 8010c32:	e774      	b.n	8010b1e <_dtoa_r+0x39e>
 8010c34:	f8cd a020 	str.w	sl, [sp, #32]
 8010c38:	464f      	mov	r7, r9
 8010c3a:	e791      	b.n	8010b60 <_dtoa_r+0x3e0>
 8010c3c:	4b4d      	ldr	r3, [pc, #308]	; (8010d74 <_dtoa_r+0x5f4>)
 8010c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d047      	beq.n	8010cdc <_dtoa_r+0x55c>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	460b      	mov	r3, r1
 8010c50:	2000      	movs	r0, #0
 8010c52:	494e      	ldr	r1, [pc, #312]	; (8010d8c <_dtoa_r+0x60c>)
 8010c54:	f7f7 fd32 	bl	80086bc <__aeabi_ddiv>
 8010c58:	462a      	mov	r2, r5
 8010c5a:	4633      	mov	r3, r6
 8010c5c:	f7f7 fa4c 	bl	80080f8 <__aeabi_dsub>
 8010c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c64:	465d      	mov	r5, fp
 8010c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c6a:	f7f7 fead 	bl	80089c8 <__aeabi_d2iz>
 8010c6e:	4606      	mov	r6, r0
 8010c70:	f7f7 fb90 	bl	8008394 <__aeabi_i2d>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c7c:	f7f7 fa3c 	bl	80080f8 <__aeabi_dsub>
 8010c80:	3630      	adds	r6, #48	; 0x30
 8010c82:	f805 6b01 	strb.w	r6, [r5], #1
 8010c86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c8a:	e9cd 0100 	strd	r0, r1, [sp]
 8010c8e:	f7f7 fe5d 	bl	800894c <__aeabi_dcmplt>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d163      	bne.n	8010d5e <_dtoa_r+0x5de>
 8010c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	4937      	ldr	r1, [pc, #220]	; (8010d7c <_dtoa_r+0x5fc>)
 8010c9e:	f7f7 fa2b 	bl	80080f8 <__aeabi_dsub>
 8010ca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010ca6:	f7f7 fe51 	bl	800894c <__aeabi_dcmplt>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	f040 80b7 	bne.w	8010e1e <_dtoa_r+0x69e>
 8010cb0:	eba5 030b 	sub.w	r3, r5, fp
 8010cb4:	429f      	cmp	r7, r3
 8010cb6:	f77f af7c 	ble.w	8010bb2 <_dtoa_r+0x432>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	4b30      	ldr	r3, [pc, #192]	; (8010d80 <_dtoa_r+0x600>)
 8010cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010cc2:	f7f7 fbd1 	bl	8008468 <__aeabi_dmul>
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010ccc:	4b2c      	ldr	r3, [pc, #176]	; (8010d80 <_dtoa_r+0x600>)
 8010cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cd2:	f7f7 fbc9 	bl	8008468 <__aeabi_dmul>
 8010cd6:	e9cd 0100 	strd	r0, r1, [sp]
 8010cda:	e7c4      	b.n	8010c66 <_dtoa_r+0x4e6>
 8010cdc:	462a      	mov	r2, r5
 8010cde:	4633      	mov	r3, r6
 8010ce0:	f7f7 fbc2 	bl	8008468 <__aeabi_dmul>
 8010ce4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010ce8:	eb0b 0507 	add.w	r5, fp, r7
 8010cec:	465e      	mov	r6, fp
 8010cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cf2:	f7f7 fe69 	bl	80089c8 <__aeabi_d2iz>
 8010cf6:	4607      	mov	r7, r0
 8010cf8:	f7f7 fb4c 	bl	8008394 <__aeabi_i2d>
 8010cfc:	3730      	adds	r7, #48	; 0x30
 8010cfe:	4602      	mov	r2, r0
 8010d00:	460b      	mov	r3, r1
 8010d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d06:	f7f7 f9f7 	bl	80080f8 <__aeabi_dsub>
 8010d0a:	f806 7b01 	strb.w	r7, [r6], #1
 8010d0e:	42ae      	cmp	r6, r5
 8010d10:	e9cd 0100 	strd	r0, r1, [sp]
 8010d14:	f04f 0200 	mov.w	r2, #0
 8010d18:	d126      	bne.n	8010d68 <_dtoa_r+0x5e8>
 8010d1a:	4b1c      	ldr	r3, [pc, #112]	; (8010d8c <_dtoa_r+0x60c>)
 8010d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d20:	f7f7 f9ec 	bl	80080fc <__adddf3>
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d2c:	f7f7 fe2c 	bl	8008988 <__aeabi_dcmpgt>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d174      	bne.n	8010e1e <_dtoa_r+0x69e>
 8010d34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d38:	2000      	movs	r0, #0
 8010d3a:	4914      	ldr	r1, [pc, #80]	; (8010d8c <_dtoa_r+0x60c>)
 8010d3c:	f7f7 f9dc 	bl	80080f8 <__aeabi_dsub>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d48:	f7f7 fe00 	bl	800894c <__aeabi_dcmplt>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	f43f af30 	beq.w	8010bb2 <_dtoa_r+0x432>
 8010d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d56:	2b30      	cmp	r3, #48	; 0x30
 8010d58:	f105 32ff 	add.w	r2, r5, #4294967295
 8010d5c:	d002      	beq.n	8010d64 <_dtoa_r+0x5e4>
 8010d5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d62:	e04a      	b.n	8010dfa <_dtoa_r+0x67a>
 8010d64:	4615      	mov	r5, r2
 8010d66:	e7f4      	b.n	8010d52 <_dtoa_r+0x5d2>
 8010d68:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <_dtoa_r+0x600>)
 8010d6a:	f7f7 fb7d 	bl	8008468 <__aeabi_dmul>
 8010d6e:	e9cd 0100 	strd	r0, r1, [sp]
 8010d72:	e7bc      	b.n	8010cee <_dtoa_r+0x56e>
 8010d74:	08012370 	.word	0x08012370
 8010d78:	08012348 	.word	0x08012348
 8010d7c:	3ff00000 	.word	0x3ff00000
 8010d80:	40240000 	.word	0x40240000
 8010d84:	401c0000 	.word	0x401c0000
 8010d88:	40140000 	.word	0x40140000
 8010d8c:	3fe00000 	.word	0x3fe00000
 8010d90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d94:	465d      	mov	r5, fp
 8010d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	4639      	mov	r1, r7
 8010d9e:	f7f7 fc8d 	bl	80086bc <__aeabi_ddiv>
 8010da2:	f7f7 fe11 	bl	80089c8 <__aeabi_d2iz>
 8010da6:	4680      	mov	r8, r0
 8010da8:	f7f7 faf4 	bl	8008394 <__aeabi_i2d>
 8010dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010db0:	f7f7 fb5a 	bl	8008468 <__aeabi_dmul>
 8010db4:	4602      	mov	r2, r0
 8010db6:	460b      	mov	r3, r1
 8010db8:	4630      	mov	r0, r6
 8010dba:	4639      	mov	r1, r7
 8010dbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010dc0:	f7f7 f99a 	bl	80080f8 <__aeabi_dsub>
 8010dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8010dc8:	eba5 060b 	sub.w	r6, r5, fp
 8010dcc:	45b1      	cmp	r9, r6
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	d139      	bne.n	8010e48 <_dtoa_r+0x6c8>
 8010dd4:	f7f7 f992 	bl	80080fc <__adddf3>
 8010dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ddc:	4606      	mov	r6, r0
 8010dde:	460f      	mov	r7, r1
 8010de0:	f7f7 fdd2 	bl	8008988 <__aeabi_dcmpgt>
 8010de4:	b9c8      	cbnz	r0, 8010e1a <_dtoa_r+0x69a>
 8010de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010dea:	4630      	mov	r0, r6
 8010dec:	4639      	mov	r1, r7
 8010dee:	f7f7 fda3 	bl	8008938 <__aeabi_dcmpeq>
 8010df2:	b110      	cbz	r0, 8010dfa <_dtoa_r+0x67a>
 8010df4:	f018 0f01 	tst.w	r8, #1
 8010df8:	d10f      	bne.n	8010e1a <_dtoa_r+0x69a>
 8010dfa:	9904      	ldr	r1, [sp, #16]
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 fc9f 	bl	8011740 <_Bfree>
 8010e02:	2300      	movs	r3, #0
 8010e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e06:	702b      	strb	r3, [r5, #0]
 8010e08:	f10a 0301 	add.w	r3, sl, #1
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 8241 	beq.w	8011298 <_dtoa_r+0xb18>
 8010e16:	601d      	str	r5, [r3, #0]
 8010e18:	e23e      	b.n	8011298 <_dtoa_r+0xb18>
 8010e1a:	f8cd a020 	str.w	sl, [sp, #32]
 8010e1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e22:	2a39      	cmp	r2, #57	; 0x39
 8010e24:	f105 33ff 	add.w	r3, r5, #4294967295
 8010e28:	d108      	bne.n	8010e3c <_dtoa_r+0x6bc>
 8010e2a:	459b      	cmp	fp, r3
 8010e2c:	d10a      	bne.n	8010e44 <_dtoa_r+0x6c4>
 8010e2e:	9b08      	ldr	r3, [sp, #32]
 8010e30:	3301      	adds	r3, #1
 8010e32:	9308      	str	r3, [sp, #32]
 8010e34:	2330      	movs	r3, #48	; 0x30
 8010e36:	f88b 3000 	strb.w	r3, [fp]
 8010e3a:	465b      	mov	r3, fp
 8010e3c:	781a      	ldrb	r2, [r3, #0]
 8010e3e:	3201      	adds	r2, #1
 8010e40:	701a      	strb	r2, [r3, #0]
 8010e42:	e78c      	b.n	8010d5e <_dtoa_r+0x5de>
 8010e44:	461d      	mov	r5, r3
 8010e46:	e7ea      	b.n	8010e1e <_dtoa_r+0x69e>
 8010e48:	2200      	movs	r2, #0
 8010e4a:	4b9b      	ldr	r3, [pc, #620]	; (80110b8 <_dtoa_r+0x938>)
 8010e4c:	f7f7 fb0c 	bl	8008468 <__aeabi_dmul>
 8010e50:	2200      	movs	r2, #0
 8010e52:	2300      	movs	r3, #0
 8010e54:	4606      	mov	r6, r0
 8010e56:	460f      	mov	r7, r1
 8010e58:	f7f7 fd6e 	bl	8008938 <__aeabi_dcmpeq>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d09a      	beq.n	8010d96 <_dtoa_r+0x616>
 8010e60:	e7cb      	b.n	8010dfa <_dtoa_r+0x67a>
 8010e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	f000 808b 	beq.w	8010f80 <_dtoa_r+0x800>
 8010e6a:	9a06      	ldr	r2, [sp, #24]
 8010e6c:	2a01      	cmp	r2, #1
 8010e6e:	dc6e      	bgt.n	8010f4e <_dtoa_r+0x7ce>
 8010e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d067      	beq.n	8010f46 <_dtoa_r+0x7c6>
 8010e76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e7a:	9f07      	ldr	r7, [sp, #28]
 8010e7c:	9d05      	ldr	r5, [sp, #20]
 8010e7e:	9a05      	ldr	r2, [sp, #20]
 8010e80:	2101      	movs	r1, #1
 8010e82:	441a      	add	r2, r3
 8010e84:	4620      	mov	r0, r4
 8010e86:	9205      	str	r2, [sp, #20]
 8010e88:	4498      	add	r8, r3
 8010e8a:	f000 fcf9 	bl	8011880 <__i2b>
 8010e8e:	4606      	mov	r6, r0
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	dd0c      	ble.n	8010eae <_dtoa_r+0x72e>
 8010e94:	f1b8 0f00 	cmp.w	r8, #0
 8010e98:	dd09      	ble.n	8010eae <_dtoa_r+0x72e>
 8010e9a:	4545      	cmp	r5, r8
 8010e9c:	9a05      	ldr	r2, [sp, #20]
 8010e9e:	462b      	mov	r3, r5
 8010ea0:	bfa8      	it	ge
 8010ea2:	4643      	movge	r3, r8
 8010ea4:	1ad2      	subs	r2, r2, r3
 8010ea6:	9205      	str	r2, [sp, #20]
 8010ea8:	1aed      	subs	r5, r5, r3
 8010eaa:	eba8 0803 	sub.w	r8, r8, r3
 8010eae:	9b07      	ldr	r3, [sp, #28]
 8010eb0:	b1eb      	cbz	r3, 8010eee <_dtoa_r+0x76e>
 8010eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d067      	beq.n	8010f88 <_dtoa_r+0x808>
 8010eb8:	b18f      	cbz	r7, 8010ede <_dtoa_r+0x75e>
 8010eba:	4631      	mov	r1, r6
 8010ebc:	463a      	mov	r2, r7
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fd7e 	bl	80119c0 <__pow5mult>
 8010ec4:	9a04      	ldr	r2, [sp, #16]
 8010ec6:	4601      	mov	r1, r0
 8010ec8:	4606      	mov	r6, r0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f000 fce1 	bl	8011892 <__multiply>
 8010ed0:	9904      	ldr	r1, [sp, #16]
 8010ed2:	9008      	str	r0, [sp, #32]
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f000 fc33 	bl	8011740 <_Bfree>
 8010eda:	9b08      	ldr	r3, [sp, #32]
 8010edc:	9304      	str	r3, [sp, #16]
 8010ede:	9b07      	ldr	r3, [sp, #28]
 8010ee0:	1bda      	subs	r2, r3, r7
 8010ee2:	d004      	beq.n	8010eee <_dtoa_r+0x76e>
 8010ee4:	9904      	ldr	r1, [sp, #16]
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f000 fd6a 	bl	80119c0 <__pow5mult>
 8010eec:	9004      	str	r0, [sp, #16]
 8010eee:	2101      	movs	r1, #1
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f000 fcc5 	bl	8011880 <__i2b>
 8010ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ef8:	4607      	mov	r7, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	f000 81d0 	beq.w	80112a0 <_dtoa_r+0xb20>
 8010f00:	461a      	mov	r2, r3
 8010f02:	4601      	mov	r1, r0
 8010f04:	4620      	mov	r0, r4
 8010f06:	f000 fd5b 	bl	80119c0 <__pow5mult>
 8010f0a:	9b06      	ldr	r3, [sp, #24]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	4607      	mov	r7, r0
 8010f10:	dc40      	bgt.n	8010f94 <_dtoa_r+0x814>
 8010f12:	9b00      	ldr	r3, [sp, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d139      	bne.n	8010f8c <_dtoa_r+0x80c>
 8010f18:	9b01      	ldr	r3, [sp, #4]
 8010f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d136      	bne.n	8010f90 <_dtoa_r+0x810>
 8010f22:	9b01      	ldr	r3, [sp, #4]
 8010f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f28:	0d1b      	lsrs	r3, r3, #20
 8010f2a:	051b      	lsls	r3, r3, #20
 8010f2c:	b12b      	cbz	r3, 8010f3a <_dtoa_r+0x7ba>
 8010f2e:	9b05      	ldr	r3, [sp, #20]
 8010f30:	3301      	adds	r3, #1
 8010f32:	9305      	str	r3, [sp, #20]
 8010f34:	f108 0801 	add.w	r8, r8, #1
 8010f38:	2301      	movs	r3, #1
 8010f3a:	9307      	str	r3, [sp, #28]
 8010f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d12a      	bne.n	8010f98 <_dtoa_r+0x818>
 8010f42:	2001      	movs	r0, #1
 8010f44:	e030      	b.n	8010fa8 <_dtoa_r+0x828>
 8010f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f4c:	e795      	b.n	8010e7a <_dtoa_r+0x6fa>
 8010f4e:	9b07      	ldr	r3, [sp, #28]
 8010f50:	f109 37ff 	add.w	r7, r9, #4294967295
 8010f54:	42bb      	cmp	r3, r7
 8010f56:	bfbf      	itttt	lt
 8010f58:	9b07      	ldrlt	r3, [sp, #28]
 8010f5a:	9707      	strlt	r7, [sp, #28]
 8010f5c:	1afa      	sublt	r2, r7, r3
 8010f5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010f60:	bfbb      	ittet	lt
 8010f62:	189b      	addlt	r3, r3, r2
 8010f64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f66:	1bdf      	subge	r7, r3, r7
 8010f68:	2700      	movlt	r7, #0
 8010f6a:	f1b9 0f00 	cmp.w	r9, #0
 8010f6e:	bfb5      	itete	lt
 8010f70:	9b05      	ldrlt	r3, [sp, #20]
 8010f72:	9d05      	ldrge	r5, [sp, #20]
 8010f74:	eba3 0509 	sublt.w	r5, r3, r9
 8010f78:	464b      	movge	r3, r9
 8010f7a:	bfb8      	it	lt
 8010f7c:	2300      	movlt	r3, #0
 8010f7e:	e77e      	b.n	8010e7e <_dtoa_r+0x6fe>
 8010f80:	9f07      	ldr	r7, [sp, #28]
 8010f82:	9d05      	ldr	r5, [sp, #20]
 8010f84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010f86:	e783      	b.n	8010e90 <_dtoa_r+0x710>
 8010f88:	9a07      	ldr	r2, [sp, #28]
 8010f8a:	e7ab      	b.n	8010ee4 <_dtoa_r+0x764>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	e7d4      	b.n	8010f3a <_dtoa_r+0x7ba>
 8010f90:	9b00      	ldr	r3, [sp, #0]
 8010f92:	e7d2      	b.n	8010f3a <_dtoa_r+0x7ba>
 8010f94:	2300      	movs	r3, #0
 8010f96:	9307      	str	r3, [sp, #28]
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010f9e:	6918      	ldr	r0, [r3, #16]
 8010fa0:	f000 fc20 	bl	80117e4 <__hi0bits>
 8010fa4:	f1c0 0020 	rsb	r0, r0, #32
 8010fa8:	4440      	add	r0, r8
 8010faa:	f010 001f 	ands.w	r0, r0, #31
 8010fae:	d047      	beq.n	8011040 <_dtoa_r+0x8c0>
 8010fb0:	f1c0 0320 	rsb	r3, r0, #32
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	dd3b      	ble.n	8011030 <_dtoa_r+0x8b0>
 8010fb8:	9b05      	ldr	r3, [sp, #20]
 8010fba:	f1c0 001c 	rsb	r0, r0, #28
 8010fbe:	4403      	add	r3, r0
 8010fc0:	9305      	str	r3, [sp, #20]
 8010fc2:	4405      	add	r5, r0
 8010fc4:	4480      	add	r8, r0
 8010fc6:	9b05      	ldr	r3, [sp, #20]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	dd05      	ble.n	8010fd8 <_dtoa_r+0x858>
 8010fcc:	461a      	mov	r2, r3
 8010fce:	9904      	ldr	r1, [sp, #16]
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 fd43 	bl	8011a5c <__lshift>
 8010fd6:	9004      	str	r0, [sp, #16]
 8010fd8:	f1b8 0f00 	cmp.w	r8, #0
 8010fdc:	dd05      	ble.n	8010fea <_dtoa_r+0x86a>
 8010fde:	4639      	mov	r1, r7
 8010fe0:	4642      	mov	r2, r8
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f000 fd3a 	bl	8011a5c <__lshift>
 8010fe8:	4607      	mov	r7, r0
 8010fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fec:	b353      	cbz	r3, 8011044 <_dtoa_r+0x8c4>
 8010fee:	4639      	mov	r1, r7
 8010ff0:	9804      	ldr	r0, [sp, #16]
 8010ff2:	f000 fd87 	bl	8011b04 <__mcmp>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	da24      	bge.n	8011044 <_dtoa_r+0x8c4>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	220a      	movs	r2, #10
 8010ffe:	9904      	ldr	r1, [sp, #16]
 8011000:	4620      	mov	r0, r4
 8011002:	f000 fbb4 	bl	801176e <__multadd>
 8011006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011008:	9004      	str	r0, [sp, #16]
 801100a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 814d 	beq.w	80112ae <_dtoa_r+0xb2e>
 8011014:	2300      	movs	r3, #0
 8011016:	4631      	mov	r1, r6
 8011018:	220a      	movs	r2, #10
 801101a:	4620      	mov	r0, r4
 801101c:	f000 fba7 	bl	801176e <__multadd>
 8011020:	9b02      	ldr	r3, [sp, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	4606      	mov	r6, r0
 8011026:	dc4f      	bgt.n	80110c8 <_dtoa_r+0x948>
 8011028:	9b06      	ldr	r3, [sp, #24]
 801102a:	2b02      	cmp	r3, #2
 801102c:	dd4c      	ble.n	80110c8 <_dtoa_r+0x948>
 801102e:	e011      	b.n	8011054 <_dtoa_r+0x8d4>
 8011030:	d0c9      	beq.n	8010fc6 <_dtoa_r+0x846>
 8011032:	9a05      	ldr	r2, [sp, #20]
 8011034:	331c      	adds	r3, #28
 8011036:	441a      	add	r2, r3
 8011038:	9205      	str	r2, [sp, #20]
 801103a:	441d      	add	r5, r3
 801103c:	4498      	add	r8, r3
 801103e:	e7c2      	b.n	8010fc6 <_dtoa_r+0x846>
 8011040:	4603      	mov	r3, r0
 8011042:	e7f6      	b.n	8011032 <_dtoa_r+0x8b2>
 8011044:	f1b9 0f00 	cmp.w	r9, #0
 8011048:	dc38      	bgt.n	80110bc <_dtoa_r+0x93c>
 801104a:	9b06      	ldr	r3, [sp, #24]
 801104c:	2b02      	cmp	r3, #2
 801104e:	dd35      	ble.n	80110bc <_dtoa_r+0x93c>
 8011050:	f8cd 9008 	str.w	r9, [sp, #8]
 8011054:	9b02      	ldr	r3, [sp, #8]
 8011056:	b963      	cbnz	r3, 8011072 <_dtoa_r+0x8f2>
 8011058:	4639      	mov	r1, r7
 801105a:	2205      	movs	r2, #5
 801105c:	4620      	mov	r0, r4
 801105e:	f000 fb86 	bl	801176e <__multadd>
 8011062:	4601      	mov	r1, r0
 8011064:	4607      	mov	r7, r0
 8011066:	9804      	ldr	r0, [sp, #16]
 8011068:	f000 fd4c 	bl	8011b04 <__mcmp>
 801106c:	2800      	cmp	r0, #0
 801106e:	f73f adcc 	bgt.w	8010c0a <_dtoa_r+0x48a>
 8011072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011074:	465d      	mov	r5, fp
 8011076:	ea6f 0a03 	mvn.w	sl, r3
 801107a:	f04f 0900 	mov.w	r9, #0
 801107e:	4639      	mov	r1, r7
 8011080:	4620      	mov	r0, r4
 8011082:	f000 fb5d 	bl	8011740 <_Bfree>
 8011086:	2e00      	cmp	r6, #0
 8011088:	f43f aeb7 	beq.w	8010dfa <_dtoa_r+0x67a>
 801108c:	f1b9 0f00 	cmp.w	r9, #0
 8011090:	d005      	beq.n	801109e <_dtoa_r+0x91e>
 8011092:	45b1      	cmp	r9, r6
 8011094:	d003      	beq.n	801109e <_dtoa_r+0x91e>
 8011096:	4649      	mov	r1, r9
 8011098:	4620      	mov	r0, r4
 801109a:	f000 fb51 	bl	8011740 <_Bfree>
 801109e:	4631      	mov	r1, r6
 80110a0:	4620      	mov	r0, r4
 80110a2:	f000 fb4d 	bl	8011740 <_Bfree>
 80110a6:	e6a8      	b.n	8010dfa <_dtoa_r+0x67a>
 80110a8:	2700      	movs	r7, #0
 80110aa:	463e      	mov	r6, r7
 80110ac:	e7e1      	b.n	8011072 <_dtoa_r+0x8f2>
 80110ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80110b2:	463e      	mov	r6, r7
 80110b4:	e5a9      	b.n	8010c0a <_dtoa_r+0x48a>
 80110b6:	bf00      	nop
 80110b8:	40240000 	.word	0x40240000
 80110bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110be:	f8cd 9008 	str.w	r9, [sp, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f000 80fa 	beq.w	80112bc <_dtoa_r+0xb3c>
 80110c8:	2d00      	cmp	r5, #0
 80110ca:	dd05      	ble.n	80110d8 <_dtoa_r+0x958>
 80110cc:	4631      	mov	r1, r6
 80110ce:	462a      	mov	r2, r5
 80110d0:	4620      	mov	r0, r4
 80110d2:	f000 fcc3 	bl	8011a5c <__lshift>
 80110d6:	4606      	mov	r6, r0
 80110d8:	9b07      	ldr	r3, [sp, #28]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d04c      	beq.n	8011178 <_dtoa_r+0x9f8>
 80110de:	6871      	ldr	r1, [r6, #4]
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 faf9 	bl	80116d8 <_Balloc>
 80110e6:	6932      	ldr	r2, [r6, #16]
 80110e8:	3202      	adds	r2, #2
 80110ea:	4605      	mov	r5, r0
 80110ec:	0092      	lsls	r2, r2, #2
 80110ee:	f106 010c 	add.w	r1, r6, #12
 80110f2:	300c      	adds	r0, #12
 80110f4:	f7fe fd0a 	bl	800fb0c <memcpy>
 80110f8:	2201      	movs	r2, #1
 80110fa:	4629      	mov	r1, r5
 80110fc:	4620      	mov	r0, r4
 80110fe:	f000 fcad 	bl	8011a5c <__lshift>
 8011102:	9b00      	ldr	r3, [sp, #0]
 8011104:	f8cd b014 	str.w	fp, [sp, #20]
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	46b1      	mov	r9, r6
 801110e:	9307      	str	r3, [sp, #28]
 8011110:	4606      	mov	r6, r0
 8011112:	4639      	mov	r1, r7
 8011114:	9804      	ldr	r0, [sp, #16]
 8011116:	f7ff faa5 	bl	8010664 <quorem>
 801111a:	4649      	mov	r1, r9
 801111c:	4605      	mov	r5, r0
 801111e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011122:	9804      	ldr	r0, [sp, #16]
 8011124:	f000 fcee 	bl	8011b04 <__mcmp>
 8011128:	4632      	mov	r2, r6
 801112a:	9000      	str	r0, [sp, #0]
 801112c:	4639      	mov	r1, r7
 801112e:	4620      	mov	r0, r4
 8011130:	f000 fd02 	bl	8011b38 <__mdiff>
 8011134:	68c3      	ldr	r3, [r0, #12]
 8011136:	4602      	mov	r2, r0
 8011138:	bb03      	cbnz	r3, 801117c <_dtoa_r+0x9fc>
 801113a:	4601      	mov	r1, r0
 801113c:	9008      	str	r0, [sp, #32]
 801113e:	9804      	ldr	r0, [sp, #16]
 8011140:	f000 fce0 	bl	8011b04 <__mcmp>
 8011144:	9a08      	ldr	r2, [sp, #32]
 8011146:	4603      	mov	r3, r0
 8011148:	4611      	mov	r1, r2
 801114a:	4620      	mov	r0, r4
 801114c:	9308      	str	r3, [sp, #32]
 801114e:	f000 faf7 	bl	8011740 <_Bfree>
 8011152:	9b08      	ldr	r3, [sp, #32]
 8011154:	b9a3      	cbnz	r3, 8011180 <_dtoa_r+0xa00>
 8011156:	9a06      	ldr	r2, [sp, #24]
 8011158:	b992      	cbnz	r2, 8011180 <_dtoa_r+0xa00>
 801115a:	9a07      	ldr	r2, [sp, #28]
 801115c:	b982      	cbnz	r2, 8011180 <_dtoa_r+0xa00>
 801115e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011162:	d029      	beq.n	80111b8 <_dtoa_r+0xa38>
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd01      	ble.n	801116e <_dtoa_r+0x9ee>
 801116a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801116e:	9b05      	ldr	r3, [sp, #20]
 8011170:	1c5d      	adds	r5, r3, #1
 8011172:	f883 8000 	strb.w	r8, [r3]
 8011176:	e782      	b.n	801107e <_dtoa_r+0x8fe>
 8011178:	4630      	mov	r0, r6
 801117a:	e7c2      	b.n	8011102 <_dtoa_r+0x982>
 801117c:	2301      	movs	r3, #1
 801117e:	e7e3      	b.n	8011148 <_dtoa_r+0x9c8>
 8011180:	9a00      	ldr	r2, [sp, #0]
 8011182:	2a00      	cmp	r2, #0
 8011184:	db04      	blt.n	8011190 <_dtoa_r+0xa10>
 8011186:	d125      	bne.n	80111d4 <_dtoa_r+0xa54>
 8011188:	9a06      	ldr	r2, [sp, #24]
 801118a:	bb1a      	cbnz	r2, 80111d4 <_dtoa_r+0xa54>
 801118c:	9a07      	ldr	r2, [sp, #28]
 801118e:	bb0a      	cbnz	r2, 80111d4 <_dtoa_r+0xa54>
 8011190:	2b00      	cmp	r3, #0
 8011192:	ddec      	ble.n	801116e <_dtoa_r+0x9ee>
 8011194:	2201      	movs	r2, #1
 8011196:	9904      	ldr	r1, [sp, #16]
 8011198:	4620      	mov	r0, r4
 801119a:	f000 fc5f 	bl	8011a5c <__lshift>
 801119e:	4639      	mov	r1, r7
 80111a0:	9004      	str	r0, [sp, #16]
 80111a2:	f000 fcaf 	bl	8011b04 <__mcmp>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	dc03      	bgt.n	80111b2 <_dtoa_r+0xa32>
 80111aa:	d1e0      	bne.n	801116e <_dtoa_r+0x9ee>
 80111ac:	f018 0f01 	tst.w	r8, #1
 80111b0:	d0dd      	beq.n	801116e <_dtoa_r+0x9ee>
 80111b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80111b6:	d1d8      	bne.n	801116a <_dtoa_r+0x9ea>
 80111b8:	9b05      	ldr	r3, [sp, #20]
 80111ba:	9a05      	ldr	r2, [sp, #20]
 80111bc:	1c5d      	adds	r5, r3, #1
 80111be:	2339      	movs	r3, #57	; 0x39
 80111c0:	7013      	strb	r3, [r2, #0]
 80111c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80111c6:	2b39      	cmp	r3, #57	; 0x39
 80111c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80111cc:	d04f      	beq.n	801126e <_dtoa_r+0xaee>
 80111ce:	3301      	adds	r3, #1
 80111d0:	7013      	strb	r3, [r2, #0]
 80111d2:	e754      	b.n	801107e <_dtoa_r+0x8fe>
 80111d4:	9a05      	ldr	r2, [sp, #20]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f102 0501 	add.w	r5, r2, #1
 80111dc:	dd06      	ble.n	80111ec <_dtoa_r+0xa6c>
 80111de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80111e2:	d0e9      	beq.n	80111b8 <_dtoa_r+0xa38>
 80111e4:	f108 0801 	add.w	r8, r8, #1
 80111e8:	9b05      	ldr	r3, [sp, #20]
 80111ea:	e7c2      	b.n	8011172 <_dtoa_r+0x9f2>
 80111ec:	9a02      	ldr	r2, [sp, #8]
 80111ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80111f2:	eba5 030b 	sub.w	r3, r5, fp
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d021      	beq.n	801123e <_dtoa_r+0xabe>
 80111fa:	2300      	movs	r3, #0
 80111fc:	220a      	movs	r2, #10
 80111fe:	9904      	ldr	r1, [sp, #16]
 8011200:	4620      	mov	r0, r4
 8011202:	f000 fab4 	bl	801176e <__multadd>
 8011206:	45b1      	cmp	r9, r6
 8011208:	9004      	str	r0, [sp, #16]
 801120a:	f04f 0300 	mov.w	r3, #0
 801120e:	f04f 020a 	mov.w	r2, #10
 8011212:	4649      	mov	r1, r9
 8011214:	4620      	mov	r0, r4
 8011216:	d105      	bne.n	8011224 <_dtoa_r+0xaa4>
 8011218:	f000 faa9 	bl	801176e <__multadd>
 801121c:	4681      	mov	r9, r0
 801121e:	4606      	mov	r6, r0
 8011220:	9505      	str	r5, [sp, #20]
 8011222:	e776      	b.n	8011112 <_dtoa_r+0x992>
 8011224:	f000 faa3 	bl	801176e <__multadd>
 8011228:	4631      	mov	r1, r6
 801122a:	4681      	mov	r9, r0
 801122c:	2300      	movs	r3, #0
 801122e:	220a      	movs	r2, #10
 8011230:	4620      	mov	r0, r4
 8011232:	f000 fa9c 	bl	801176e <__multadd>
 8011236:	4606      	mov	r6, r0
 8011238:	e7f2      	b.n	8011220 <_dtoa_r+0xaa0>
 801123a:	f04f 0900 	mov.w	r9, #0
 801123e:	2201      	movs	r2, #1
 8011240:	9904      	ldr	r1, [sp, #16]
 8011242:	4620      	mov	r0, r4
 8011244:	f000 fc0a 	bl	8011a5c <__lshift>
 8011248:	4639      	mov	r1, r7
 801124a:	9004      	str	r0, [sp, #16]
 801124c:	f000 fc5a 	bl	8011b04 <__mcmp>
 8011250:	2800      	cmp	r0, #0
 8011252:	dcb6      	bgt.n	80111c2 <_dtoa_r+0xa42>
 8011254:	d102      	bne.n	801125c <_dtoa_r+0xadc>
 8011256:	f018 0f01 	tst.w	r8, #1
 801125a:	d1b2      	bne.n	80111c2 <_dtoa_r+0xa42>
 801125c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011260:	2b30      	cmp	r3, #48	; 0x30
 8011262:	f105 32ff 	add.w	r2, r5, #4294967295
 8011266:	f47f af0a 	bne.w	801107e <_dtoa_r+0x8fe>
 801126a:	4615      	mov	r5, r2
 801126c:	e7f6      	b.n	801125c <_dtoa_r+0xadc>
 801126e:	4593      	cmp	fp, r2
 8011270:	d105      	bne.n	801127e <_dtoa_r+0xafe>
 8011272:	2331      	movs	r3, #49	; 0x31
 8011274:	f10a 0a01 	add.w	sl, sl, #1
 8011278:	f88b 3000 	strb.w	r3, [fp]
 801127c:	e6ff      	b.n	801107e <_dtoa_r+0x8fe>
 801127e:	4615      	mov	r5, r2
 8011280:	e79f      	b.n	80111c2 <_dtoa_r+0xa42>
 8011282:	f8df b064 	ldr.w	fp, [pc, #100]	; 80112e8 <_dtoa_r+0xb68>
 8011286:	e007      	b.n	8011298 <_dtoa_r+0xb18>
 8011288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801128a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80112ec <_dtoa_r+0xb6c>
 801128e:	b11b      	cbz	r3, 8011298 <_dtoa_r+0xb18>
 8011290:	f10b 0308 	add.w	r3, fp, #8
 8011294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	4658      	mov	r0, fp
 801129a:	b017      	add	sp, #92	; 0x5c
 801129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a0:	9b06      	ldr	r3, [sp, #24]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	f77f ae35 	ble.w	8010f12 <_dtoa_r+0x792>
 80112a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112aa:	9307      	str	r3, [sp, #28]
 80112ac:	e649      	b.n	8010f42 <_dtoa_r+0x7c2>
 80112ae:	9b02      	ldr	r3, [sp, #8]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	dc03      	bgt.n	80112bc <_dtoa_r+0xb3c>
 80112b4:	9b06      	ldr	r3, [sp, #24]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	f73f aecc 	bgt.w	8011054 <_dtoa_r+0x8d4>
 80112bc:	465d      	mov	r5, fp
 80112be:	4639      	mov	r1, r7
 80112c0:	9804      	ldr	r0, [sp, #16]
 80112c2:	f7ff f9cf 	bl	8010664 <quorem>
 80112c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80112ca:	f805 8b01 	strb.w	r8, [r5], #1
 80112ce:	9a02      	ldr	r2, [sp, #8]
 80112d0:	eba5 030b 	sub.w	r3, r5, fp
 80112d4:	429a      	cmp	r2, r3
 80112d6:	ddb0      	ble.n	801123a <_dtoa_r+0xaba>
 80112d8:	2300      	movs	r3, #0
 80112da:	220a      	movs	r2, #10
 80112dc:	9904      	ldr	r1, [sp, #16]
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fa45 	bl	801176e <__multadd>
 80112e4:	9004      	str	r0, [sp, #16]
 80112e6:	e7ea      	b.n	80112be <_dtoa_r+0xb3e>
 80112e8:	080122b4 	.word	0x080122b4
 80112ec:	080122d8 	.word	0x080122d8

080112f0 <__sflush_r>:
 80112f0:	898a      	ldrh	r2, [r1, #12]
 80112f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f6:	4605      	mov	r5, r0
 80112f8:	0710      	lsls	r0, r2, #28
 80112fa:	460c      	mov	r4, r1
 80112fc:	d458      	bmi.n	80113b0 <__sflush_r+0xc0>
 80112fe:	684b      	ldr	r3, [r1, #4]
 8011300:	2b00      	cmp	r3, #0
 8011302:	dc05      	bgt.n	8011310 <__sflush_r+0x20>
 8011304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011306:	2b00      	cmp	r3, #0
 8011308:	dc02      	bgt.n	8011310 <__sflush_r+0x20>
 801130a:	2000      	movs	r0, #0
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011312:	2e00      	cmp	r6, #0
 8011314:	d0f9      	beq.n	801130a <__sflush_r+0x1a>
 8011316:	2300      	movs	r3, #0
 8011318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801131c:	682f      	ldr	r7, [r5, #0]
 801131e:	6a21      	ldr	r1, [r4, #32]
 8011320:	602b      	str	r3, [r5, #0]
 8011322:	d032      	beq.n	801138a <__sflush_r+0x9a>
 8011324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	075a      	lsls	r2, r3, #29
 801132a:	d505      	bpl.n	8011338 <__sflush_r+0x48>
 801132c:	6863      	ldr	r3, [r4, #4]
 801132e:	1ac0      	subs	r0, r0, r3
 8011330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011332:	b10b      	cbz	r3, 8011338 <__sflush_r+0x48>
 8011334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011336:	1ac0      	subs	r0, r0, r3
 8011338:	2300      	movs	r3, #0
 801133a:	4602      	mov	r2, r0
 801133c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801133e:	6a21      	ldr	r1, [r4, #32]
 8011340:	4628      	mov	r0, r5
 8011342:	47b0      	blx	r6
 8011344:	1c43      	adds	r3, r0, #1
 8011346:	89a3      	ldrh	r3, [r4, #12]
 8011348:	d106      	bne.n	8011358 <__sflush_r+0x68>
 801134a:	6829      	ldr	r1, [r5, #0]
 801134c:	291d      	cmp	r1, #29
 801134e:	d848      	bhi.n	80113e2 <__sflush_r+0xf2>
 8011350:	4a29      	ldr	r2, [pc, #164]	; (80113f8 <__sflush_r+0x108>)
 8011352:	40ca      	lsrs	r2, r1
 8011354:	07d6      	lsls	r6, r2, #31
 8011356:	d544      	bpl.n	80113e2 <__sflush_r+0xf2>
 8011358:	2200      	movs	r2, #0
 801135a:	6062      	str	r2, [r4, #4]
 801135c:	04d9      	lsls	r1, r3, #19
 801135e:	6922      	ldr	r2, [r4, #16]
 8011360:	6022      	str	r2, [r4, #0]
 8011362:	d504      	bpl.n	801136e <__sflush_r+0x7e>
 8011364:	1c42      	adds	r2, r0, #1
 8011366:	d101      	bne.n	801136c <__sflush_r+0x7c>
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	b903      	cbnz	r3, 801136e <__sflush_r+0x7e>
 801136c:	6560      	str	r0, [r4, #84]	; 0x54
 801136e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011370:	602f      	str	r7, [r5, #0]
 8011372:	2900      	cmp	r1, #0
 8011374:	d0c9      	beq.n	801130a <__sflush_r+0x1a>
 8011376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801137a:	4299      	cmp	r1, r3
 801137c:	d002      	beq.n	8011384 <__sflush_r+0x94>
 801137e:	4628      	mov	r0, r5
 8011380:	f000 fc94 	bl	8011cac <_free_r>
 8011384:	2000      	movs	r0, #0
 8011386:	6360      	str	r0, [r4, #52]	; 0x34
 8011388:	e7c0      	b.n	801130c <__sflush_r+0x1c>
 801138a:	2301      	movs	r3, #1
 801138c:	4628      	mov	r0, r5
 801138e:	47b0      	blx	r6
 8011390:	1c41      	adds	r1, r0, #1
 8011392:	d1c8      	bne.n	8011326 <__sflush_r+0x36>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d0c5      	beq.n	8011326 <__sflush_r+0x36>
 801139a:	2b1d      	cmp	r3, #29
 801139c:	d001      	beq.n	80113a2 <__sflush_r+0xb2>
 801139e:	2b16      	cmp	r3, #22
 80113a0:	d101      	bne.n	80113a6 <__sflush_r+0xb6>
 80113a2:	602f      	str	r7, [r5, #0]
 80113a4:	e7b1      	b.n	801130a <__sflush_r+0x1a>
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	e7ad      	b.n	801130c <__sflush_r+0x1c>
 80113b0:	690f      	ldr	r7, [r1, #16]
 80113b2:	2f00      	cmp	r7, #0
 80113b4:	d0a9      	beq.n	801130a <__sflush_r+0x1a>
 80113b6:	0793      	lsls	r3, r2, #30
 80113b8:	680e      	ldr	r6, [r1, #0]
 80113ba:	bf08      	it	eq
 80113bc:	694b      	ldreq	r3, [r1, #20]
 80113be:	600f      	str	r7, [r1, #0]
 80113c0:	bf18      	it	ne
 80113c2:	2300      	movne	r3, #0
 80113c4:	eba6 0807 	sub.w	r8, r6, r7
 80113c8:	608b      	str	r3, [r1, #8]
 80113ca:	f1b8 0f00 	cmp.w	r8, #0
 80113ce:	dd9c      	ble.n	801130a <__sflush_r+0x1a>
 80113d0:	4643      	mov	r3, r8
 80113d2:	463a      	mov	r2, r7
 80113d4:	6a21      	ldr	r1, [r4, #32]
 80113d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113d8:	4628      	mov	r0, r5
 80113da:	47b0      	blx	r6
 80113dc:	2800      	cmp	r0, #0
 80113de:	dc06      	bgt.n	80113ee <__sflush_r+0xfe>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113e6:	81a3      	strh	r3, [r4, #12]
 80113e8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ec:	e78e      	b.n	801130c <__sflush_r+0x1c>
 80113ee:	4407      	add	r7, r0
 80113f0:	eba8 0800 	sub.w	r8, r8, r0
 80113f4:	e7e9      	b.n	80113ca <__sflush_r+0xda>
 80113f6:	bf00      	nop
 80113f8:	20400001 	.word	0x20400001

080113fc <_fflush_r>:
 80113fc:	b538      	push	{r3, r4, r5, lr}
 80113fe:	690b      	ldr	r3, [r1, #16]
 8011400:	4605      	mov	r5, r0
 8011402:	460c      	mov	r4, r1
 8011404:	b1db      	cbz	r3, 801143e <_fflush_r+0x42>
 8011406:	b118      	cbz	r0, 8011410 <_fflush_r+0x14>
 8011408:	6983      	ldr	r3, [r0, #24]
 801140a:	b90b      	cbnz	r3, 8011410 <_fflush_r+0x14>
 801140c:	f000 f860 	bl	80114d0 <__sinit>
 8011410:	4b0c      	ldr	r3, [pc, #48]	; (8011444 <_fflush_r+0x48>)
 8011412:	429c      	cmp	r4, r3
 8011414:	d109      	bne.n	801142a <_fflush_r+0x2e>
 8011416:	686c      	ldr	r4, [r5, #4]
 8011418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801141c:	b17b      	cbz	r3, 801143e <_fflush_r+0x42>
 801141e:	4621      	mov	r1, r4
 8011420:	4628      	mov	r0, r5
 8011422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011426:	f7ff bf63 	b.w	80112f0 <__sflush_r>
 801142a:	4b07      	ldr	r3, [pc, #28]	; (8011448 <_fflush_r+0x4c>)
 801142c:	429c      	cmp	r4, r3
 801142e:	d101      	bne.n	8011434 <_fflush_r+0x38>
 8011430:	68ac      	ldr	r4, [r5, #8]
 8011432:	e7f1      	b.n	8011418 <_fflush_r+0x1c>
 8011434:	4b05      	ldr	r3, [pc, #20]	; (801144c <_fflush_r+0x50>)
 8011436:	429c      	cmp	r4, r3
 8011438:	bf08      	it	eq
 801143a:	68ec      	ldreq	r4, [r5, #12]
 801143c:	e7ec      	b.n	8011418 <_fflush_r+0x1c>
 801143e:	2000      	movs	r0, #0
 8011440:	bd38      	pop	{r3, r4, r5, pc}
 8011442:	bf00      	nop
 8011444:	08012308 	.word	0x08012308
 8011448:	08012328 	.word	0x08012328
 801144c:	080122e8 	.word	0x080122e8

08011450 <std>:
 8011450:	2300      	movs	r3, #0
 8011452:	b510      	push	{r4, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	e9c0 3300 	strd	r3, r3, [r0]
 801145a:	6083      	str	r3, [r0, #8]
 801145c:	8181      	strh	r1, [r0, #12]
 801145e:	6643      	str	r3, [r0, #100]	; 0x64
 8011460:	81c2      	strh	r2, [r0, #14]
 8011462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011466:	6183      	str	r3, [r0, #24]
 8011468:	4619      	mov	r1, r3
 801146a:	2208      	movs	r2, #8
 801146c:	305c      	adds	r0, #92	; 0x5c
 801146e:	f7fe fb58 	bl	800fb22 <memset>
 8011472:	4b05      	ldr	r3, [pc, #20]	; (8011488 <std+0x38>)
 8011474:	6263      	str	r3, [r4, #36]	; 0x24
 8011476:	4b05      	ldr	r3, [pc, #20]	; (801148c <std+0x3c>)
 8011478:	62a3      	str	r3, [r4, #40]	; 0x28
 801147a:	4b05      	ldr	r3, [pc, #20]	; (8011490 <std+0x40>)
 801147c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801147e:	4b05      	ldr	r3, [pc, #20]	; (8011494 <std+0x44>)
 8011480:	6224      	str	r4, [r4, #32]
 8011482:	6323      	str	r3, [r4, #48]	; 0x30
 8011484:	bd10      	pop	{r4, pc}
 8011486:	bf00      	nop
 8011488:	0801209d 	.word	0x0801209d
 801148c:	080120bf 	.word	0x080120bf
 8011490:	080120f7 	.word	0x080120f7
 8011494:	0801211b 	.word	0x0801211b

08011498 <_cleanup_r>:
 8011498:	4901      	ldr	r1, [pc, #4]	; (80114a0 <_cleanup_r+0x8>)
 801149a:	f000 b885 	b.w	80115a8 <_fwalk_reent>
 801149e:	bf00      	nop
 80114a0:	080113fd 	.word	0x080113fd

080114a4 <__sfmoreglue>:
 80114a4:	b570      	push	{r4, r5, r6, lr}
 80114a6:	1e4a      	subs	r2, r1, #1
 80114a8:	2568      	movs	r5, #104	; 0x68
 80114aa:	4355      	muls	r5, r2
 80114ac:	460e      	mov	r6, r1
 80114ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114b2:	f000 fc49 	bl	8011d48 <_malloc_r>
 80114b6:	4604      	mov	r4, r0
 80114b8:	b140      	cbz	r0, 80114cc <__sfmoreglue+0x28>
 80114ba:	2100      	movs	r1, #0
 80114bc:	e9c0 1600 	strd	r1, r6, [r0]
 80114c0:	300c      	adds	r0, #12
 80114c2:	60a0      	str	r0, [r4, #8]
 80114c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114c8:	f7fe fb2b 	bl	800fb22 <memset>
 80114cc:	4620      	mov	r0, r4
 80114ce:	bd70      	pop	{r4, r5, r6, pc}

080114d0 <__sinit>:
 80114d0:	6983      	ldr	r3, [r0, #24]
 80114d2:	b510      	push	{r4, lr}
 80114d4:	4604      	mov	r4, r0
 80114d6:	bb33      	cbnz	r3, 8011526 <__sinit+0x56>
 80114d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80114dc:	6503      	str	r3, [r0, #80]	; 0x50
 80114de:	4b12      	ldr	r3, [pc, #72]	; (8011528 <__sinit+0x58>)
 80114e0:	4a12      	ldr	r2, [pc, #72]	; (801152c <__sinit+0x5c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6282      	str	r2, [r0, #40]	; 0x28
 80114e6:	4298      	cmp	r0, r3
 80114e8:	bf04      	itt	eq
 80114ea:	2301      	moveq	r3, #1
 80114ec:	6183      	streq	r3, [r0, #24]
 80114ee:	f000 f81f 	bl	8011530 <__sfp>
 80114f2:	6060      	str	r0, [r4, #4]
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 f81b 	bl	8011530 <__sfp>
 80114fa:	60a0      	str	r0, [r4, #8]
 80114fc:	4620      	mov	r0, r4
 80114fe:	f000 f817 	bl	8011530 <__sfp>
 8011502:	2200      	movs	r2, #0
 8011504:	60e0      	str	r0, [r4, #12]
 8011506:	2104      	movs	r1, #4
 8011508:	6860      	ldr	r0, [r4, #4]
 801150a:	f7ff ffa1 	bl	8011450 <std>
 801150e:	2201      	movs	r2, #1
 8011510:	2109      	movs	r1, #9
 8011512:	68a0      	ldr	r0, [r4, #8]
 8011514:	f7ff ff9c 	bl	8011450 <std>
 8011518:	2202      	movs	r2, #2
 801151a:	2112      	movs	r1, #18
 801151c:	68e0      	ldr	r0, [r4, #12]
 801151e:	f7ff ff97 	bl	8011450 <std>
 8011522:	2301      	movs	r3, #1
 8011524:	61a3      	str	r3, [r4, #24]
 8011526:	bd10      	pop	{r4, pc}
 8011528:	080122a0 	.word	0x080122a0
 801152c:	08011499 	.word	0x08011499

08011530 <__sfp>:
 8011530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011532:	4b1b      	ldr	r3, [pc, #108]	; (80115a0 <__sfp+0x70>)
 8011534:	681e      	ldr	r6, [r3, #0]
 8011536:	69b3      	ldr	r3, [r6, #24]
 8011538:	4607      	mov	r7, r0
 801153a:	b913      	cbnz	r3, 8011542 <__sfp+0x12>
 801153c:	4630      	mov	r0, r6
 801153e:	f7ff ffc7 	bl	80114d0 <__sinit>
 8011542:	3648      	adds	r6, #72	; 0x48
 8011544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011548:	3b01      	subs	r3, #1
 801154a:	d503      	bpl.n	8011554 <__sfp+0x24>
 801154c:	6833      	ldr	r3, [r6, #0]
 801154e:	b133      	cbz	r3, 801155e <__sfp+0x2e>
 8011550:	6836      	ldr	r6, [r6, #0]
 8011552:	e7f7      	b.n	8011544 <__sfp+0x14>
 8011554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011558:	b16d      	cbz	r5, 8011576 <__sfp+0x46>
 801155a:	3468      	adds	r4, #104	; 0x68
 801155c:	e7f4      	b.n	8011548 <__sfp+0x18>
 801155e:	2104      	movs	r1, #4
 8011560:	4638      	mov	r0, r7
 8011562:	f7ff ff9f 	bl	80114a4 <__sfmoreglue>
 8011566:	6030      	str	r0, [r6, #0]
 8011568:	2800      	cmp	r0, #0
 801156a:	d1f1      	bne.n	8011550 <__sfp+0x20>
 801156c:	230c      	movs	r3, #12
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	4604      	mov	r4, r0
 8011572:	4620      	mov	r0, r4
 8011574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011576:	4b0b      	ldr	r3, [pc, #44]	; (80115a4 <__sfp+0x74>)
 8011578:	6665      	str	r5, [r4, #100]	; 0x64
 801157a:	e9c4 5500 	strd	r5, r5, [r4]
 801157e:	60a5      	str	r5, [r4, #8]
 8011580:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011584:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011588:	2208      	movs	r2, #8
 801158a:	4629      	mov	r1, r5
 801158c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011590:	f7fe fac7 	bl	800fb22 <memset>
 8011594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801159c:	e7e9      	b.n	8011572 <__sfp+0x42>
 801159e:	bf00      	nop
 80115a0:	080122a0 	.word	0x080122a0
 80115a4:	ffff0001 	.word	0xffff0001

080115a8 <_fwalk_reent>:
 80115a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115ac:	4680      	mov	r8, r0
 80115ae:	4689      	mov	r9, r1
 80115b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115b4:	2600      	movs	r6, #0
 80115b6:	b914      	cbnz	r4, 80115be <_fwalk_reent+0x16>
 80115b8:	4630      	mov	r0, r6
 80115ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80115c2:	3f01      	subs	r7, #1
 80115c4:	d501      	bpl.n	80115ca <_fwalk_reent+0x22>
 80115c6:	6824      	ldr	r4, [r4, #0]
 80115c8:	e7f5      	b.n	80115b6 <_fwalk_reent+0xe>
 80115ca:	89ab      	ldrh	r3, [r5, #12]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d907      	bls.n	80115e0 <_fwalk_reent+0x38>
 80115d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115d4:	3301      	adds	r3, #1
 80115d6:	d003      	beq.n	80115e0 <_fwalk_reent+0x38>
 80115d8:	4629      	mov	r1, r5
 80115da:	4640      	mov	r0, r8
 80115dc:	47c8      	blx	r9
 80115de:	4306      	orrs	r6, r0
 80115e0:	3568      	adds	r5, #104	; 0x68
 80115e2:	e7ee      	b.n	80115c2 <_fwalk_reent+0x1a>

080115e4 <_localeconv_r>:
 80115e4:	4b04      	ldr	r3, [pc, #16]	; (80115f8 <_localeconv_r+0x14>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6a18      	ldr	r0, [r3, #32]
 80115ea:	4b04      	ldr	r3, [pc, #16]	; (80115fc <_localeconv_r+0x18>)
 80115ec:	2800      	cmp	r0, #0
 80115ee:	bf08      	it	eq
 80115f0:	4618      	moveq	r0, r3
 80115f2:	30f0      	adds	r0, #240	; 0xf0
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	2000000c 	.word	0x2000000c
 80115fc:	20000070 	.word	0x20000070

08011600 <__swhatbuf_r>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	460e      	mov	r6, r1
 8011604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011608:	2900      	cmp	r1, #0
 801160a:	b096      	sub	sp, #88	; 0x58
 801160c:	4614      	mov	r4, r2
 801160e:	461d      	mov	r5, r3
 8011610:	da07      	bge.n	8011622 <__swhatbuf_r+0x22>
 8011612:	2300      	movs	r3, #0
 8011614:	602b      	str	r3, [r5, #0]
 8011616:	89b3      	ldrh	r3, [r6, #12]
 8011618:	061a      	lsls	r2, r3, #24
 801161a:	d410      	bmi.n	801163e <__swhatbuf_r+0x3e>
 801161c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011620:	e00e      	b.n	8011640 <__swhatbuf_r+0x40>
 8011622:	466a      	mov	r2, sp
 8011624:	f000 fda0 	bl	8012168 <_fstat_r>
 8011628:	2800      	cmp	r0, #0
 801162a:	dbf2      	blt.n	8011612 <__swhatbuf_r+0x12>
 801162c:	9a01      	ldr	r2, [sp, #4]
 801162e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011636:	425a      	negs	r2, r3
 8011638:	415a      	adcs	r2, r3
 801163a:	602a      	str	r2, [r5, #0]
 801163c:	e7ee      	b.n	801161c <__swhatbuf_r+0x1c>
 801163e:	2340      	movs	r3, #64	; 0x40
 8011640:	2000      	movs	r0, #0
 8011642:	6023      	str	r3, [r4, #0]
 8011644:	b016      	add	sp, #88	; 0x58
 8011646:	bd70      	pop	{r4, r5, r6, pc}

08011648 <__smakebuf_r>:
 8011648:	898b      	ldrh	r3, [r1, #12]
 801164a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801164c:	079d      	lsls	r5, r3, #30
 801164e:	4606      	mov	r6, r0
 8011650:	460c      	mov	r4, r1
 8011652:	d507      	bpl.n	8011664 <__smakebuf_r+0x1c>
 8011654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	6123      	str	r3, [r4, #16]
 801165c:	2301      	movs	r3, #1
 801165e:	6163      	str	r3, [r4, #20]
 8011660:	b002      	add	sp, #8
 8011662:	bd70      	pop	{r4, r5, r6, pc}
 8011664:	ab01      	add	r3, sp, #4
 8011666:	466a      	mov	r2, sp
 8011668:	f7ff ffca 	bl	8011600 <__swhatbuf_r>
 801166c:	9900      	ldr	r1, [sp, #0]
 801166e:	4605      	mov	r5, r0
 8011670:	4630      	mov	r0, r6
 8011672:	f000 fb69 	bl	8011d48 <_malloc_r>
 8011676:	b948      	cbnz	r0, 801168c <__smakebuf_r+0x44>
 8011678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801167c:	059a      	lsls	r2, r3, #22
 801167e:	d4ef      	bmi.n	8011660 <__smakebuf_r+0x18>
 8011680:	f023 0303 	bic.w	r3, r3, #3
 8011684:	f043 0302 	orr.w	r3, r3, #2
 8011688:	81a3      	strh	r3, [r4, #12]
 801168a:	e7e3      	b.n	8011654 <__smakebuf_r+0xc>
 801168c:	4b0d      	ldr	r3, [pc, #52]	; (80116c4 <__smakebuf_r+0x7c>)
 801168e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011690:	89a3      	ldrh	r3, [r4, #12]
 8011692:	6020      	str	r0, [r4, #0]
 8011694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011698:	81a3      	strh	r3, [r4, #12]
 801169a:	9b00      	ldr	r3, [sp, #0]
 801169c:	6163      	str	r3, [r4, #20]
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	6120      	str	r0, [r4, #16]
 80116a2:	b15b      	cbz	r3, 80116bc <__smakebuf_r+0x74>
 80116a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116a8:	4630      	mov	r0, r6
 80116aa:	f000 fd6f 	bl	801218c <_isatty_r>
 80116ae:	b128      	cbz	r0, 80116bc <__smakebuf_r+0x74>
 80116b0:	89a3      	ldrh	r3, [r4, #12]
 80116b2:	f023 0303 	bic.w	r3, r3, #3
 80116b6:	f043 0301 	orr.w	r3, r3, #1
 80116ba:	81a3      	strh	r3, [r4, #12]
 80116bc:	89a3      	ldrh	r3, [r4, #12]
 80116be:	431d      	orrs	r5, r3
 80116c0:	81a5      	strh	r5, [r4, #12]
 80116c2:	e7cd      	b.n	8011660 <__smakebuf_r+0x18>
 80116c4:	08011499 	.word	0x08011499

080116c8 <malloc>:
 80116c8:	4b02      	ldr	r3, [pc, #8]	; (80116d4 <malloc+0xc>)
 80116ca:	4601      	mov	r1, r0
 80116cc:	6818      	ldr	r0, [r3, #0]
 80116ce:	f000 bb3b 	b.w	8011d48 <_malloc_r>
 80116d2:	bf00      	nop
 80116d4:	2000000c 	.word	0x2000000c

080116d8 <_Balloc>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80116dc:	4604      	mov	r4, r0
 80116de:	460e      	mov	r6, r1
 80116e0:	b93d      	cbnz	r5, 80116f2 <_Balloc+0x1a>
 80116e2:	2010      	movs	r0, #16
 80116e4:	f7ff fff0 	bl	80116c8 <malloc>
 80116e8:	6260      	str	r0, [r4, #36]	; 0x24
 80116ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80116ee:	6005      	str	r5, [r0, #0]
 80116f0:	60c5      	str	r5, [r0, #12]
 80116f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80116f4:	68eb      	ldr	r3, [r5, #12]
 80116f6:	b183      	cbz	r3, 801171a <_Balloc+0x42>
 80116f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011700:	b9b8      	cbnz	r0, 8011732 <_Balloc+0x5a>
 8011702:	2101      	movs	r1, #1
 8011704:	fa01 f506 	lsl.w	r5, r1, r6
 8011708:	1d6a      	adds	r2, r5, #5
 801170a:	0092      	lsls	r2, r2, #2
 801170c:	4620      	mov	r0, r4
 801170e:	f000 fabf 	bl	8011c90 <_calloc_r>
 8011712:	b160      	cbz	r0, 801172e <_Balloc+0x56>
 8011714:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011718:	e00e      	b.n	8011738 <_Balloc+0x60>
 801171a:	2221      	movs	r2, #33	; 0x21
 801171c:	2104      	movs	r1, #4
 801171e:	4620      	mov	r0, r4
 8011720:	f000 fab6 	bl	8011c90 <_calloc_r>
 8011724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011726:	60e8      	str	r0, [r5, #12]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d1e4      	bne.n	80116f8 <_Balloc+0x20>
 801172e:	2000      	movs	r0, #0
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	6802      	ldr	r2, [r0, #0]
 8011734:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011738:	2300      	movs	r3, #0
 801173a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801173e:	e7f7      	b.n	8011730 <_Balloc+0x58>

08011740 <_Bfree>:
 8011740:	b570      	push	{r4, r5, r6, lr}
 8011742:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011744:	4606      	mov	r6, r0
 8011746:	460d      	mov	r5, r1
 8011748:	b93c      	cbnz	r4, 801175a <_Bfree+0x1a>
 801174a:	2010      	movs	r0, #16
 801174c:	f7ff ffbc 	bl	80116c8 <malloc>
 8011750:	6270      	str	r0, [r6, #36]	; 0x24
 8011752:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011756:	6004      	str	r4, [r0, #0]
 8011758:	60c4      	str	r4, [r0, #12]
 801175a:	b13d      	cbz	r5, 801176c <_Bfree+0x2c>
 801175c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801175e:	686a      	ldr	r2, [r5, #4]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011766:	6029      	str	r1, [r5, #0]
 8011768:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801176c:	bd70      	pop	{r4, r5, r6, pc}

0801176e <__multadd>:
 801176e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011772:	690d      	ldr	r5, [r1, #16]
 8011774:	461f      	mov	r7, r3
 8011776:	4606      	mov	r6, r0
 8011778:	460c      	mov	r4, r1
 801177a:	f101 0c14 	add.w	ip, r1, #20
 801177e:	2300      	movs	r3, #0
 8011780:	f8dc 0000 	ldr.w	r0, [ip]
 8011784:	b281      	uxth	r1, r0
 8011786:	fb02 7101 	mla	r1, r2, r1, r7
 801178a:	0c0f      	lsrs	r7, r1, #16
 801178c:	0c00      	lsrs	r0, r0, #16
 801178e:	fb02 7000 	mla	r0, r2, r0, r7
 8011792:	b289      	uxth	r1, r1
 8011794:	3301      	adds	r3, #1
 8011796:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801179a:	429d      	cmp	r5, r3
 801179c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80117a0:	f84c 1b04 	str.w	r1, [ip], #4
 80117a4:	dcec      	bgt.n	8011780 <__multadd+0x12>
 80117a6:	b1d7      	cbz	r7, 80117de <__multadd+0x70>
 80117a8:	68a3      	ldr	r3, [r4, #8]
 80117aa:	42ab      	cmp	r3, r5
 80117ac:	dc12      	bgt.n	80117d4 <__multadd+0x66>
 80117ae:	6861      	ldr	r1, [r4, #4]
 80117b0:	4630      	mov	r0, r6
 80117b2:	3101      	adds	r1, #1
 80117b4:	f7ff ff90 	bl	80116d8 <_Balloc>
 80117b8:	6922      	ldr	r2, [r4, #16]
 80117ba:	3202      	adds	r2, #2
 80117bc:	f104 010c 	add.w	r1, r4, #12
 80117c0:	4680      	mov	r8, r0
 80117c2:	0092      	lsls	r2, r2, #2
 80117c4:	300c      	adds	r0, #12
 80117c6:	f7fe f9a1 	bl	800fb0c <memcpy>
 80117ca:	4621      	mov	r1, r4
 80117cc:	4630      	mov	r0, r6
 80117ce:	f7ff ffb7 	bl	8011740 <_Bfree>
 80117d2:	4644      	mov	r4, r8
 80117d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117d8:	3501      	adds	r5, #1
 80117da:	615f      	str	r7, [r3, #20]
 80117dc:	6125      	str	r5, [r4, #16]
 80117de:	4620      	mov	r0, r4
 80117e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117e4 <__hi0bits>:
 80117e4:	0c02      	lsrs	r2, r0, #16
 80117e6:	0412      	lsls	r2, r2, #16
 80117e8:	4603      	mov	r3, r0
 80117ea:	b9b2      	cbnz	r2, 801181a <__hi0bits+0x36>
 80117ec:	0403      	lsls	r3, r0, #16
 80117ee:	2010      	movs	r0, #16
 80117f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80117f4:	bf04      	itt	eq
 80117f6:	021b      	lsleq	r3, r3, #8
 80117f8:	3008      	addeq	r0, #8
 80117fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80117fe:	bf04      	itt	eq
 8011800:	011b      	lsleq	r3, r3, #4
 8011802:	3004      	addeq	r0, #4
 8011804:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011808:	bf04      	itt	eq
 801180a:	009b      	lsleq	r3, r3, #2
 801180c:	3002      	addeq	r0, #2
 801180e:	2b00      	cmp	r3, #0
 8011810:	db06      	blt.n	8011820 <__hi0bits+0x3c>
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	d503      	bpl.n	801181e <__hi0bits+0x3a>
 8011816:	3001      	adds	r0, #1
 8011818:	4770      	bx	lr
 801181a:	2000      	movs	r0, #0
 801181c:	e7e8      	b.n	80117f0 <__hi0bits+0xc>
 801181e:	2020      	movs	r0, #32
 8011820:	4770      	bx	lr

08011822 <__lo0bits>:
 8011822:	6803      	ldr	r3, [r0, #0]
 8011824:	f013 0207 	ands.w	r2, r3, #7
 8011828:	4601      	mov	r1, r0
 801182a:	d00b      	beq.n	8011844 <__lo0bits+0x22>
 801182c:	07da      	lsls	r2, r3, #31
 801182e:	d423      	bmi.n	8011878 <__lo0bits+0x56>
 8011830:	0798      	lsls	r0, r3, #30
 8011832:	bf49      	itett	mi
 8011834:	085b      	lsrmi	r3, r3, #1
 8011836:	089b      	lsrpl	r3, r3, #2
 8011838:	2001      	movmi	r0, #1
 801183a:	600b      	strmi	r3, [r1, #0]
 801183c:	bf5c      	itt	pl
 801183e:	600b      	strpl	r3, [r1, #0]
 8011840:	2002      	movpl	r0, #2
 8011842:	4770      	bx	lr
 8011844:	b298      	uxth	r0, r3
 8011846:	b9a8      	cbnz	r0, 8011874 <__lo0bits+0x52>
 8011848:	0c1b      	lsrs	r3, r3, #16
 801184a:	2010      	movs	r0, #16
 801184c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011850:	bf04      	itt	eq
 8011852:	0a1b      	lsreq	r3, r3, #8
 8011854:	3008      	addeq	r0, #8
 8011856:	071a      	lsls	r2, r3, #28
 8011858:	bf04      	itt	eq
 801185a:	091b      	lsreq	r3, r3, #4
 801185c:	3004      	addeq	r0, #4
 801185e:	079a      	lsls	r2, r3, #30
 8011860:	bf04      	itt	eq
 8011862:	089b      	lsreq	r3, r3, #2
 8011864:	3002      	addeq	r0, #2
 8011866:	07da      	lsls	r2, r3, #31
 8011868:	d402      	bmi.n	8011870 <__lo0bits+0x4e>
 801186a:	085b      	lsrs	r3, r3, #1
 801186c:	d006      	beq.n	801187c <__lo0bits+0x5a>
 801186e:	3001      	adds	r0, #1
 8011870:	600b      	str	r3, [r1, #0]
 8011872:	4770      	bx	lr
 8011874:	4610      	mov	r0, r2
 8011876:	e7e9      	b.n	801184c <__lo0bits+0x2a>
 8011878:	2000      	movs	r0, #0
 801187a:	4770      	bx	lr
 801187c:	2020      	movs	r0, #32
 801187e:	4770      	bx	lr

08011880 <__i2b>:
 8011880:	b510      	push	{r4, lr}
 8011882:	460c      	mov	r4, r1
 8011884:	2101      	movs	r1, #1
 8011886:	f7ff ff27 	bl	80116d8 <_Balloc>
 801188a:	2201      	movs	r2, #1
 801188c:	6144      	str	r4, [r0, #20]
 801188e:	6102      	str	r2, [r0, #16]
 8011890:	bd10      	pop	{r4, pc}

08011892 <__multiply>:
 8011892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011896:	4614      	mov	r4, r2
 8011898:	690a      	ldr	r2, [r1, #16]
 801189a:	6923      	ldr	r3, [r4, #16]
 801189c:	429a      	cmp	r2, r3
 801189e:	bfb8      	it	lt
 80118a0:	460b      	movlt	r3, r1
 80118a2:	4688      	mov	r8, r1
 80118a4:	bfbc      	itt	lt
 80118a6:	46a0      	movlt	r8, r4
 80118a8:	461c      	movlt	r4, r3
 80118aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80118ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80118b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80118ba:	eb07 0609 	add.w	r6, r7, r9
 80118be:	42b3      	cmp	r3, r6
 80118c0:	bfb8      	it	lt
 80118c2:	3101      	addlt	r1, #1
 80118c4:	f7ff ff08 	bl	80116d8 <_Balloc>
 80118c8:	f100 0514 	add.w	r5, r0, #20
 80118cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80118d0:	462b      	mov	r3, r5
 80118d2:	2200      	movs	r2, #0
 80118d4:	4573      	cmp	r3, lr
 80118d6:	d316      	bcc.n	8011906 <__multiply+0x74>
 80118d8:	f104 0214 	add.w	r2, r4, #20
 80118dc:	f108 0114 	add.w	r1, r8, #20
 80118e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80118e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80118e8:	9300      	str	r3, [sp, #0]
 80118ea:	9b00      	ldr	r3, [sp, #0]
 80118ec:	9201      	str	r2, [sp, #4]
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d80c      	bhi.n	801190c <__multiply+0x7a>
 80118f2:	2e00      	cmp	r6, #0
 80118f4:	dd03      	ble.n	80118fe <__multiply+0x6c>
 80118f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d05d      	beq.n	80119ba <__multiply+0x128>
 80118fe:	6106      	str	r6, [r0, #16]
 8011900:	b003      	add	sp, #12
 8011902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011906:	f843 2b04 	str.w	r2, [r3], #4
 801190a:	e7e3      	b.n	80118d4 <__multiply+0x42>
 801190c:	f8b2 b000 	ldrh.w	fp, [r2]
 8011910:	f1bb 0f00 	cmp.w	fp, #0
 8011914:	d023      	beq.n	801195e <__multiply+0xcc>
 8011916:	4689      	mov	r9, r1
 8011918:	46ac      	mov	ip, r5
 801191a:	f04f 0800 	mov.w	r8, #0
 801191e:	f859 4b04 	ldr.w	r4, [r9], #4
 8011922:	f8dc a000 	ldr.w	sl, [ip]
 8011926:	b2a3      	uxth	r3, r4
 8011928:	fa1f fa8a 	uxth.w	sl, sl
 801192c:	fb0b a303 	mla	r3, fp, r3, sl
 8011930:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011934:	f8dc 4000 	ldr.w	r4, [ip]
 8011938:	4443      	add	r3, r8
 801193a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801193e:	fb0b 840a 	mla	r4, fp, sl, r8
 8011942:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011946:	46e2      	mov	sl, ip
 8011948:	b29b      	uxth	r3, r3
 801194a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801194e:	454f      	cmp	r7, r9
 8011950:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011954:	f84a 3b04 	str.w	r3, [sl], #4
 8011958:	d82b      	bhi.n	80119b2 <__multiply+0x120>
 801195a:	f8cc 8004 	str.w	r8, [ip, #4]
 801195e:	9b01      	ldr	r3, [sp, #4]
 8011960:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011964:	3204      	adds	r2, #4
 8011966:	f1ba 0f00 	cmp.w	sl, #0
 801196a:	d020      	beq.n	80119ae <__multiply+0x11c>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	4689      	mov	r9, r1
 8011970:	46a8      	mov	r8, r5
 8011972:	f04f 0b00 	mov.w	fp, #0
 8011976:	f8b9 c000 	ldrh.w	ip, [r9]
 801197a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801197e:	fb0a 440c 	mla	r4, sl, ip, r4
 8011982:	445c      	add	r4, fp
 8011984:	46c4      	mov	ip, r8
 8011986:	b29b      	uxth	r3, r3
 8011988:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801198c:	f84c 3b04 	str.w	r3, [ip], #4
 8011990:	f859 3b04 	ldr.w	r3, [r9], #4
 8011994:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011998:	0c1b      	lsrs	r3, r3, #16
 801199a:	fb0a b303 	mla	r3, sl, r3, fp
 801199e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80119a2:	454f      	cmp	r7, r9
 80119a4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80119a8:	d805      	bhi.n	80119b6 <__multiply+0x124>
 80119aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80119ae:	3504      	adds	r5, #4
 80119b0:	e79b      	b.n	80118ea <__multiply+0x58>
 80119b2:	46d4      	mov	ip, sl
 80119b4:	e7b3      	b.n	801191e <__multiply+0x8c>
 80119b6:	46e0      	mov	r8, ip
 80119b8:	e7dd      	b.n	8011976 <__multiply+0xe4>
 80119ba:	3e01      	subs	r6, #1
 80119bc:	e799      	b.n	80118f2 <__multiply+0x60>
	...

080119c0 <__pow5mult>:
 80119c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c4:	4615      	mov	r5, r2
 80119c6:	f012 0203 	ands.w	r2, r2, #3
 80119ca:	4606      	mov	r6, r0
 80119cc:	460f      	mov	r7, r1
 80119ce:	d007      	beq.n	80119e0 <__pow5mult+0x20>
 80119d0:	3a01      	subs	r2, #1
 80119d2:	4c21      	ldr	r4, [pc, #132]	; (8011a58 <__pow5mult+0x98>)
 80119d4:	2300      	movs	r3, #0
 80119d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80119da:	f7ff fec8 	bl	801176e <__multadd>
 80119de:	4607      	mov	r7, r0
 80119e0:	10ad      	asrs	r5, r5, #2
 80119e2:	d035      	beq.n	8011a50 <__pow5mult+0x90>
 80119e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80119e6:	b93c      	cbnz	r4, 80119f8 <__pow5mult+0x38>
 80119e8:	2010      	movs	r0, #16
 80119ea:	f7ff fe6d 	bl	80116c8 <malloc>
 80119ee:	6270      	str	r0, [r6, #36]	; 0x24
 80119f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119f4:	6004      	str	r4, [r0, #0]
 80119f6:	60c4      	str	r4, [r0, #12]
 80119f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80119fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a00:	b94c      	cbnz	r4, 8011a16 <__pow5mult+0x56>
 8011a02:	f240 2171 	movw	r1, #625	; 0x271
 8011a06:	4630      	mov	r0, r6
 8011a08:	f7ff ff3a 	bl	8011880 <__i2b>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a12:	4604      	mov	r4, r0
 8011a14:	6003      	str	r3, [r0, #0]
 8011a16:	f04f 0800 	mov.w	r8, #0
 8011a1a:	07eb      	lsls	r3, r5, #31
 8011a1c:	d50a      	bpl.n	8011a34 <__pow5mult+0x74>
 8011a1e:	4639      	mov	r1, r7
 8011a20:	4622      	mov	r2, r4
 8011a22:	4630      	mov	r0, r6
 8011a24:	f7ff ff35 	bl	8011892 <__multiply>
 8011a28:	4639      	mov	r1, r7
 8011a2a:	4681      	mov	r9, r0
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	f7ff fe87 	bl	8011740 <_Bfree>
 8011a32:	464f      	mov	r7, r9
 8011a34:	106d      	asrs	r5, r5, #1
 8011a36:	d00b      	beq.n	8011a50 <__pow5mult+0x90>
 8011a38:	6820      	ldr	r0, [r4, #0]
 8011a3a:	b938      	cbnz	r0, 8011a4c <__pow5mult+0x8c>
 8011a3c:	4622      	mov	r2, r4
 8011a3e:	4621      	mov	r1, r4
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7ff ff26 	bl	8011892 <__multiply>
 8011a46:	6020      	str	r0, [r4, #0]
 8011a48:	f8c0 8000 	str.w	r8, [r0]
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	e7e4      	b.n	8011a1a <__pow5mult+0x5a>
 8011a50:	4638      	mov	r0, r7
 8011a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a56:	bf00      	nop
 8011a58:	08012438 	.word	0x08012438

08011a5c <__lshift>:
 8011a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a60:	460c      	mov	r4, r1
 8011a62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a66:	6923      	ldr	r3, [r4, #16]
 8011a68:	6849      	ldr	r1, [r1, #4]
 8011a6a:	eb0a 0903 	add.w	r9, sl, r3
 8011a6e:	68a3      	ldr	r3, [r4, #8]
 8011a70:	4607      	mov	r7, r0
 8011a72:	4616      	mov	r6, r2
 8011a74:	f109 0501 	add.w	r5, r9, #1
 8011a78:	42ab      	cmp	r3, r5
 8011a7a:	db32      	blt.n	8011ae2 <__lshift+0x86>
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7ff fe2b 	bl	80116d8 <_Balloc>
 8011a82:	2300      	movs	r3, #0
 8011a84:	4680      	mov	r8, r0
 8011a86:	f100 0114 	add.w	r1, r0, #20
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	4553      	cmp	r3, sl
 8011a8e:	db2b      	blt.n	8011ae8 <__lshift+0x8c>
 8011a90:	6920      	ldr	r0, [r4, #16]
 8011a92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a96:	f104 0314 	add.w	r3, r4, #20
 8011a9a:	f016 021f 	ands.w	r2, r6, #31
 8011a9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011aa2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011aa6:	d025      	beq.n	8011af4 <__lshift+0x98>
 8011aa8:	f1c2 0e20 	rsb	lr, r2, #32
 8011aac:	2000      	movs	r0, #0
 8011aae:	681e      	ldr	r6, [r3, #0]
 8011ab0:	468a      	mov	sl, r1
 8011ab2:	4096      	lsls	r6, r2
 8011ab4:	4330      	orrs	r0, r6
 8011ab6:	f84a 0b04 	str.w	r0, [sl], #4
 8011aba:	f853 0b04 	ldr.w	r0, [r3], #4
 8011abe:	459c      	cmp	ip, r3
 8011ac0:	fa20 f00e 	lsr.w	r0, r0, lr
 8011ac4:	d814      	bhi.n	8011af0 <__lshift+0x94>
 8011ac6:	6048      	str	r0, [r1, #4]
 8011ac8:	b108      	cbz	r0, 8011ace <__lshift+0x72>
 8011aca:	f109 0502 	add.w	r5, r9, #2
 8011ace:	3d01      	subs	r5, #1
 8011ad0:	4638      	mov	r0, r7
 8011ad2:	f8c8 5010 	str.w	r5, [r8, #16]
 8011ad6:	4621      	mov	r1, r4
 8011ad8:	f7ff fe32 	bl	8011740 <_Bfree>
 8011adc:	4640      	mov	r0, r8
 8011ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae2:	3101      	adds	r1, #1
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	e7c7      	b.n	8011a78 <__lshift+0x1c>
 8011ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011aec:	3301      	adds	r3, #1
 8011aee:	e7cd      	b.n	8011a8c <__lshift+0x30>
 8011af0:	4651      	mov	r1, sl
 8011af2:	e7dc      	b.n	8011aae <__lshift+0x52>
 8011af4:	3904      	subs	r1, #4
 8011af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011afa:	f841 2f04 	str.w	r2, [r1, #4]!
 8011afe:	459c      	cmp	ip, r3
 8011b00:	d8f9      	bhi.n	8011af6 <__lshift+0x9a>
 8011b02:	e7e4      	b.n	8011ace <__lshift+0x72>

08011b04 <__mcmp>:
 8011b04:	6903      	ldr	r3, [r0, #16]
 8011b06:	690a      	ldr	r2, [r1, #16]
 8011b08:	1a9b      	subs	r3, r3, r2
 8011b0a:	b530      	push	{r4, r5, lr}
 8011b0c:	d10c      	bne.n	8011b28 <__mcmp+0x24>
 8011b0e:	0092      	lsls	r2, r2, #2
 8011b10:	3014      	adds	r0, #20
 8011b12:	3114      	adds	r1, #20
 8011b14:	1884      	adds	r4, r0, r2
 8011b16:	4411      	add	r1, r2
 8011b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b20:	4295      	cmp	r5, r2
 8011b22:	d003      	beq.n	8011b2c <__mcmp+0x28>
 8011b24:	d305      	bcc.n	8011b32 <__mcmp+0x2e>
 8011b26:	2301      	movs	r3, #1
 8011b28:	4618      	mov	r0, r3
 8011b2a:	bd30      	pop	{r4, r5, pc}
 8011b2c:	42a0      	cmp	r0, r4
 8011b2e:	d3f3      	bcc.n	8011b18 <__mcmp+0x14>
 8011b30:	e7fa      	b.n	8011b28 <__mcmp+0x24>
 8011b32:	f04f 33ff 	mov.w	r3, #4294967295
 8011b36:	e7f7      	b.n	8011b28 <__mcmp+0x24>

08011b38 <__mdiff>:
 8011b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3c:	460d      	mov	r5, r1
 8011b3e:	4607      	mov	r7, r0
 8011b40:	4611      	mov	r1, r2
 8011b42:	4628      	mov	r0, r5
 8011b44:	4614      	mov	r4, r2
 8011b46:	f7ff ffdd 	bl	8011b04 <__mcmp>
 8011b4a:	1e06      	subs	r6, r0, #0
 8011b4c:	d108      	bne.n	8011b60 <__mdiff+0x28>
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4638      	mov	r0, r7
 8011b52:	f7ff fdc1 	bl	80116d8 <_Balloc>
 8011b56:	2301      	movs	r3, #1
 8011b58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b60:	bfa4      	itt	ge
 8011b62:	4623      	movge	r3, r4
 8011b64:	462c      	movge	r4, r5
 8011b66:	4638      	mov	r0, r7
 8011b68:	6861      	ldr	r1, [r4, #4]
 8011b6a:	bfa6      	itte	ge
 8011b6c:	461d      	movge	r5, r3
 8011b6e:	2600      	movge	r6, #0
 8011b70:	2601      	movlt	r6, #1
 8011b72:	f7ff fdb1 	bl	80116d8 <_Balloc>
 8011b76:	692b      	ldr	r3, [r5, #16]
 8011b78:	60c6      	str	r6, [r0, #12]
 8011b7a:	6926      	ldr	r6, [r4, #16]
 8011b7c:	f105 0914 	add.w	r9, r5, #20
 8011b80:	f104 0214 	add.w	r2, r4, #20
 8011b84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011b88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011b8c:	f100 0514 	add.w	r5, r0, #20
 8011b90:	f04f 0e00 	mov.w	lr, #0
 8011b94:	f852 ab04 	ldr.w	sl, [r2], #4
 8011b98:	f859 4b04 	ldr.w	r4, [r9], #4
 8011b9c:	fa1e f18a 	uxtah	r1, lr, sl
 8011ba0:	b2a3      	uxth	r3, r4
 8011ba2:	1ac9      	subs	r1, r1, r3
 8011ba4:	0c23      	lsrs	r3, r4, #16
 8011ba6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011baa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011bae:	b289      	uxth	r1, r1
 8011bb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011bb4:	45c8      	cmp	r8, r9
 8011bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011bba:	4694      	mov	ip, r2
 8011bbc:	f845 3b04 	str.w	r3, [r5], #4
 8011bc0:	d8e8      	bhi.n	8011b94 <__mdiff+0x5c>
 8011bc2:	45bc      	cmp	ip, r7
 8011bc4:	d304      	bcc.n	8011bd0 <__mdiff+0x98>
 8011bc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011bca:	b183      	cbz	r3, 8011bee <__mdiff+0xb6>
 8011bcc:	6106      	str	r6, [r0, #16]
 8011bce:	e7c5      	b.n	8011b5c <__mdiff+0x24>
 8011bd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011bd4:	fa1e f381 	uxtah	r3, lr, r1
 8011bd8:	141a      	asrs	r2, r3, #16
 8011bda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011be4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011be8:	f845 3b04 	str.w	r3, [r5], #4
 8011bec:	e7e9      	b.n	8011bc2 <__mdiff+0x8a>
 8011bee:	3e01      	subs	r6, #1
 8011bf0:	e7e9      	b.n	8011bc6 <__mdiff+0x8e>

08011bf2 <__d2b>:
 8011bf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bf6:	460e      	mov	r6, r1
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	ec59 8b10 	vmov	r8, r9, d0
 8011bfe:	4615      	mov	r5, r2
 8011c00:	f7ff fd6a 	bl	80116d8 <_Balloc>
 8011c04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011c08:	4607      	mov	r7, r0
 8011c0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c0e:	bb34      	cbnz	r4, 8011c5e <__d2b+0x6c>
 8011c10:	9301      	str	r3, [sp, #4]
 8011c12:	f1b8 0300 	subs.w	r3, r8, #0
 8011c16:	d027      	beq.n	8011c68 <__d2b+0x76>
 8011c18:	a802      	add	r0, sp, #8
 8011c1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011c1e:	f7ff fe00 	bl	8011822 <__lo0bits>
 8011c22:	9900      	ldr	r1, [sp, #0]
 8011c24:	b1f0      	cbz	r0, 8011c64 <__d2b+0x72>
 8011c26:	9a01      	ldr	r2, [sp, #4]
 8011c28:	f1c0 0320 	rsb	r3, r0, #32
 8011c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c30:	430b      	orrs	r3, r1
 8011c32:	40c2      	lsrs	r2, r0
 8011c34:	617b      	str	r3, [r7, #20]
 8011c36:	9201      	str	r2, [sp, #4]
 8011c38:	9b01      	ldr	r3, [sp, #4]
 8011c3a:	61bb      	str	r3, [r7, #24]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	bf14      	ite	ne
 8011c40:	2102      	movne	r1, #2
 8011c42:	2101      	moveq	r1, #1
 8011c44:	6139      	str	r1, [r7, #16]
 8011c46:	b1c4      	cbz	r4, 8011c7a <__d2b+0x88>
 8011c48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011c4c:	4404      	add	r4, r0
 8011c4e:	6034      	str	r4, [r6, #0]
 8011c50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c54:	6028      	str	r0, [r5, #0]
 8011c56:	4638      	mov	r0, r7
 8011c58:	b003      	add	sp, #12
 8011c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c62:	e7d5      	b.n	8011c10 <__d2b+0x1e>
 8011c64:	6179      	str	r1, [r7, #20]
 8011c66:	e7e7      	b.n	8011c38 <__d2b+0x46>
 8011c68:	a801      	add	r0, sp, #4
 8011c6a:	f7ff fdda 	bl	8011822 <__lo0bits>
 8011c6e:	9b01      	ldr	r3, [sp, #4]
 8011c70:	617b      	str	r3, [r7, #20]
 8011c72:	2101      	movs	r1, #1
 8011c74:	6139      	str	r1, [r7, #16]
 8011c76:	3020      	adds	r0, #32
 8011c78:	e7e5      	b.n	8011c46 <__d2b+0x54>
 8011c7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011c7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c82:	6030      	str	r0, [r6, #0]
 8011c84:	6918      	ldr	r0, [r3, #16]
 8011c86:	f7ff fdad 	bl	80117e4 <__hi0bits>
 8011c8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011c8e:	e7e1      	b.n	8011c54 <__d2b+0x62>

08011c90 <_calloc_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	fb02 f401 	mul.w	r4, r2, r1
 8011c96:	4621      	mov	r1, r4
 8011c98:	f000 f856 	bl	8011d48 <_malloc_r>
 8011c9c:	4605      	mov	r5, r0
 8011c9e:	b118      	cbz	r0, 8011ca8 <_calloc_r+0x18>
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	f7fd ff3d 	bl	800fb22 <memset>
 8011ca8:	4628      	mov	r0, r5
 8011caa:	bd38      	pop	{r3, r4, r5, pc}

08011cac <_free_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	4605      	mov	r5, r0
 8011cb0:	2900      	cmp	r1, #0
 8011cb2:	d045      	beq.n	8011d40 <_free_r+0x94>
 8011cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cb8:	1f0c      	subs	r4, r1, #4
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	bfb8      	it	lt
 8011cbe:	18e4      	addlt	r4, r4, r3
 8011cc0:	f000 fa98 	bl	80121f4 <__malloc_lock>
 8011cc4:	4a1f      	ldr	r2, [pc, #124]	; (8011d44 <_free_r+0x98>)
 8011cc6:	6813      	ldr	r3, [r2, #0]
 8011cc8:	4610      	mov	r0, r2
 8011cca:	b933      	cbnz	r3, 8011cda <_free_r+0x2e>
 8011ccc:	6063      	str	r3, [r4, #4]
 8011cce:	6014      	str	r4, [r2, #0]
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cd6:	f000 ba8e 	b.w	80121f6 <__malloc_unlock>
 8011cda:	42a3      	cmp	r3, r4
 8011cdc:	d90c      	bls.n	8011cf8 <_free_r+0x4c>
 8011cde:	6821      	ldr	r1, [r4, #0]
 8011ce0:	1862      	adds	r2, r4, r1
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	bf04      	itt	eq
 8011ce6:	681a      	ldreq	r2, [r3, #0]
 8011ce8:	685b      	ldreq	r3, [r3, #4]
 8011cea:	6063      	str	r3, [r4, #4]
 8011cec:	bf04      	itt	eq
 8011cee:	1852      	addeq	r2, r2, r1
 8011cf0:	6022      	streq	r2, [r4, #0]
 8011cf2:	6004      	str	r4, [r0, #0]
 8011cf4:	e7ec      	b.n	8011cd0 <_free_r+0x24>
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	685a      	ldr	r2, [r3, #4]
 8011cfa:	b10a      	cbz	r2, 8011d00 <_free_r+0x54>
 8011cfc:	42a2      	cmp	r2, r4
 8011cfe:	d9fa      	bls.n	8011cf6 <_free_r+0x4a>
 8011d00:	6819      	ldr	r1, [r3, #0]
 8011d02:	1858      	adds	r0, r3, r1
 8011d04:	42a0      	cmp	r0, r4
 8011d06:	d10b      	bne.n	8011d20 <_free_r+0x74>
 8011d08:	6820      	ldr	r0, [r4, #0]
 8011d0a:	4401      	add	r1, r0
 8011d0c:	1858      	adds	r0, r3, r1
 8011d0e:	4282      	cmp	r2, r0
 8011d10:	6019      	str	r1, [r3, #0]
 8011d12:	d1dd      	bne.n	8011cd0 <_free_r+0x24>
 8011d14:	6810      	ldr	r0, [r2, #0]
 8011d16:	6852      	ldr	r2, [r2, #4]
 8011d18:	605a      	str	r2, [r3, #4]
 8011d1a:	4401      	add	r1, r0
 8011d1c:	6019      	str	r1, [r3, #0]
 8011d1e:	e7d7      	b.n	8011cd0 <_free_r+0x24>
 8011d20:	d902      	bls.n	8011d28 <_free_r+0x7c>
 8011d22:	230c      	movs	r3, #12
 8011d24:	602b      	str	r3, [r5, #0]
 8011d26:	e7d3      	b.n	8011cd0 <_free_r+0x24>
 8011d28:	6820      	ldr	r0, [r4, #0]
 8011d2a:	1821      	adds	r1, r4, r0
 8011d2c:	428a      	cmp	r2, r1
 8011d2e:	bf04      	itt	eq
 8011d30:	6811      	ldreq	r1, [r2, #0]
 8011d32:	6852      	ldreq	r2, [r2, #4]
 8011d34:	6062      	str	r2, [r4, #4]
 8011d36:	bf04      	itt	eq
 8011d38:	1809      	addeq	r1, r1, r0
 8011d3a:	6021      	streq	r1, [r4, #0]
 8011d3c:	605c      	str	r4, [r3, #4]
 8011d3e:	e7c7      	b.n	8011cd0 <_free_r+0x24>
 8011d40:	bd38      	pop	{r3, r4, r5, pc}
 8011d42:	bf00      	nop
 8011d44:	20000418 	.word	0x20000418

08011d48 <_malloc_r>:
 8011d48:	b570      	push	{r4, r5, r6, lr}
 8011d4a:	1ccd      	adds	r5, r1, #3
 8011d4c:	f025 0503 	bic.w	r5, r5, #3
 8011d50:	3508      	adds	r5, #8
 8011d52:	2d0c      	cmp	r5, #12
 8011d54:	bf38      	it	cc
 8011d56:	250c      	movcc	r5, #12
 8011d58:	2d00      	cmp	r5, #0
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	db01      	blt.n	8011d62 <_malloc_r+0x1a>
 8011d5e:	42a9      	cmp	r1, r5
 8011d60:	d903      	bls.n	8011d6a <_malloc_r+0x22>
 8011d62:	230c      	movs	r3, #12
 8011d64:	6033      	str	r3, [r6, #0]
 8011d66:	2000      	movs	r0, #0
 8011d68:	bd70      	pop	{r4, r5, r6, pc}
 8011d6a:	f000 fa43 	bl	80121f4 <__malloc_lock>
 8011d6e:	4a21      	ldr	r2, [pc, #132]	; (8011df4 <_malloc_r+0xac>)
 8011d70:	6814      	ldr	r4, [r2, #0]
 8011d72:	4621      	mov	r1, r4
 8011d74:	b991      	cbnz	r1, 8011d9c <_malloc_r+0x54>
 8011d76:	4c20      	ldr	r4, [pc, #128]	; (8011df8 <_malloc_r+0xb0>)
 8011d78:	6823      	ldr	r3, [r4, #0]
 8011d7a:	b91b      	cbnz	r3, 8011d84 <_malloc_r+0x3c>
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f000 f97d 	bl	801207c <_sbrk_r>
 8011d82:	6020      	str	r0, [r4, #0]
 8011d84:	4629      	mov	r1, r5
 8011d86:	4630      	mov	r0, r6
 8011d88:	f000 f978 	bl	801207c <_sbrk_r>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d124      	bne.n	8011dda <_malloc_r+0x92>
 8011d90:	230c      	movs	r3, #12
 8011d92:	6033      	str	r3, [r6, #0]
 8011d94:	4630      	mov	r0, r6
 8011d96:	f000 fa2e 	bl	80121f6 <__malloc_unlock>
 8011d9a:	e7e4      	b.n	8011d66 <_malloc_r+0x1e>
 8011d9c:	680b      	ldr	r3, [r1, #0]
 8011d9e:	1b5b      	subs	r3, r3, r5
 8011da0:	d418      	bmi.n	8011dd4 <_malloc_r+0x8c>
 8011da2:	2b0b      	cmp	r3, #11
 8011da4:	d90f      	bls.n	8011dc6 <_malloc_r+0x7e>
 8011da6:	600b      	str	r3, [r1, #0]
 8011da8:	50cd      	str	r5, [r1, r3]
 8011daa:	18cc      	adds	r4, r1, r3
 8011dac:	4630      	mov	r0, r6
 8011dae:	f000 fa22 	bl	80121f6 <__malloc_unlock>
 8011db2:	f104 000b 	add.w	r0, r4, #11
 8011db6:	1d23      	adds	r3, r4, #4
 8011db8:	f020 0007 	bic.w	r0, r0, #7
 8011dbc:	1ac3      	subs	r3, r0, r3
 8011dbe:	d0d3      	beq.n	8011d68 <_malloc_r+0x20>
 8011dc0:	425a      	negs	r2, r3
 8011dc2:	50e2      	str	r2, [r4, r3]
 8011dc4:	e7d0      	b.n	8011d68 <_malloc_r+0x20>
 8011dc6:	428c      	cmp	r4, r1
 8011dc8:	684b      	ldr	r3, [r1, #4]
 8011dca:	bf16      	itet	ne
 8011dcc:	6063      	strne	r3, [r4, #4]
 8011dce:	6013      	streq	r3, [r2, #0]
 8011dd0:	460c      	movne	r4, r1
 8011dd2:	e7eb      	b.n	8011dac <_malloc_r+0x64>
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	6849      	ldr	r1, [r1, #4]
 8011dd8:	e7cc      	b.n	8011d74 <_malloc_r+0x2c>
 8011dda:	1cc4      	adds	r4, r0, #3
 8011ddc:	f024 0403 	bic.w	r4, r4, #3
 8011de0:	42a0      	cmp	r0, r4
 8011de2:	d005      	beq.n	8011df0 <_malloc_r+0xa8>
 8011de4:	1a21      	subs	r1, r4, r0
 8011de6:	4630      	mov	r0, r6
 8011de8:	f000 f948 	bl	801207c <_sbrk_r>
 8011dec:	3001      	adds	r0, #1
 8011dee:	d0cf      	beq.n	8011d90 <_malloc_r+0x48>
 8011df0:	6025      	str	r5, [r4, #0]
 8011df2:	e7db      	b.n	8011dac <_malloc_r+0x64>
 8011df4:	20000418 	.word	0x20000418
 8011df8:	2000041c 	.word	0x2000041c

08011dfc <__sfputc_r>:
 8011dfc:	6893      	ldr	r3, [r2, #8]
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	b410      	push	{r4}
 8011e04:	6093      	str	r3, [r2, #8]
 8011e06:	da08      	bge.n	8011e1a <__sfputc_r+0x1e>
 8011e08:	6994      	ldr	r4, [r2, #24]
 8011e0a:	42a3      	cmp	r3, r4
 8011e0c:	db01      	blt.n	8011e12 <__sfputc_r+0x16>
 8011e0e:	290a      	cmp	r1, #10
 8011e10:	d103      	bne.n	8011e1a <__sfputc_r+0x1e>
 8011e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e16:	f7fe bb65 	b.w	80104e4 <__swbuf_r>
 8011e1a:	6813      	ldr	r3, [r2, #0]
 8011e1c:	1c58      	adds	r0, r3, #1
 8011e1e:	6010      	str	r0, [r2, #0]
 8011e20:	7019      	strb	r1, [r3, #0]
 8011e22:	4608      	mov	r0, r1
 8011e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <__sfputs_r>:
 8011e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	460f      	mov	r7, r1
 8011e30:	4614      	mov	r4, r2
 8011e32:	18d5      	adds	r5, r2, r3
 8011e34:	42ac      	cmp	r4, r5
 8011e36:	d101      	bne.n	8011e3c <__sfputs_r+0x12>
 8011e38:	2000      	movs	r0, #0
 8011e3a:	e007      	b.n	8011e4c <__sfputs_r+0x22>
 8011e3c:	463a      	mov	r2, r7
 8011e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7ff ffda 	bl	8011dfc <__sfputc_r>
 8011e48:	1c43      	adds	r3, r0, #1
 8011e4a:	d1f3      	bne.n	8011e34 <__sfputs_r+0xa>
 8011e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e50 <_vfiprintf_r>:
 8011e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	460c      	mov	r4, r1
 8011e56:	b09d      	sub	sp, #116	; 0x74
 8011e58:	4617      	mov	r7, r2
 8011e5a:	461d      	mov	r5, r3
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	b118      	cbz	r0, 8011e68 <_vfiprintf_r+0x18>
 8011e60:	6983      	ldr	r3, [r0, #24]
 8011e62:	b90b      	cbnz	r3, 8011e68 <_vfiprintf_r+0x18>
 8011e64:	f7ff fb34 	bl	80114d0 <__sinit>
 8011e68:	4b7c      	ldr	r3, [pc, #496]	; (801205c <_vfiprintf_r+0x20c>)
 8011e6a:	429c      	cmp	r4, r3
 8011e6c:	d158      	bne.n	8011f20 <_vfiprintf_r+0xd0>
 8011e6e:	6874      	ldr	r4, [r6, #4]
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	0718      	lsls	r0, r3, #28
 8011e74:	d55e      	bpl.n	8011f34 <_vfiprintf_r+0xe4>
 8011e76:	6923      	ldr	r3, [r4, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d05b      	beq.n	8011f34 <_vfiprintf_r+0xe4>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e80:	2320      	movs	r3, #32
 8011e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e86:	2330      	movs	r3, #48	; 0x30
 8011e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e8c:	9503      	str	r5, [sp, #12]
 8011e8e:	f04f 0b01 	mov.w	fp, #1
 8011e92:	46b8      	mov	r8, r7
 8011e94:	4645      	mov	r5, r8
 8011e96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e9a:	b10b      	cbz	r3, 8011ea0 <_vfiprintf_r+0x50>
 8011e9c:	2b25      	cmp	r3, #37	; 0x25
 8011e9e:	d154      	bne.n	8011f4a <_vfiprintf_r+0xfa>
 8011ea0:	ebb8 0a07 	subs.w	sl, r8, r7
 8011ea4:	d00b      	beq.n	8011ebe <_vfiprintf_r+0x6e>
 8011ea6:	4653      	mov	r3, sl
 8011ea8:	463a      	mov	r2, r7
 8011eaa:	4621      	mov	r1, r4
 8011eac:	4630      	mov	r0, r6
 8011eae:	f7ff ffbc 	bl	8011e2a <__sfputs_r>
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f000 80c2 	beq.w	801203c <_vfiprintf_r+0x1ec>
 8011eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eba:	4453      	add	r3, sl
 8011ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ebe:	f898 3000 	ldrb.w	r3, [r8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f000 80ba 	beq.w	801203c <_vfiprintf_r+0x1ec>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ed2:	9304      	str	r3, [sp, #16]
 8011ed4:	9307      	str	r3, [sp, #28]
 8011ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011eda:	931a      	str	r3, [sp, #104]	; 0x68
 8011edc:	46a8      	mov	r8, r5
 8011ede:	2205      	movs	r2, #5
 8011ee0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011ee4:	485e      	ldr	r0, [pc, #376]	; (8012060 <_vfiprintf_r+0x210>)
 8011ee6:	f7f6 f8b3 	bl	8008050 <memchr>
 8011eea:	9b04      	ldr	r3, [sp, #16]
 8011eec:	bb78      	cbnz	r0, 8011f4e <_vfiprintf_r+0xfe>
 8011eee:	06d9      	lsls	r1, r3, #27
 8011ef0:	bf44      	itt	mi
 8011ef2:	2220      	movmi	r2, #32
 8011ef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ef8:	071a      	lsls	r2, r3, #28
 8011efa:	bf44      	itt	mi
 8011efc:	222b      	movmi	r2, #43	; 0x2b
 8011efe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f02:	782a      	ldrb	r2, [r5, #0]
 8011f04:	2a2a      	cmp	r2, #42	; 0x2a
 8011f06:	d02a      	beq.n	8011f5e <_vfiprintf_r+0x10e>
 8011f08:	9a07      	ldr	r2, [sp, #28]
 8011f0a:	46a8      	mov	r8, r5
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	250a      	movs	r5, #10
 8011f10:	4641      	mov	r1, r8
 8011f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f16:	3b30      	subs	r3, #48	; 0x30
 8011f18:	2b09      	cmp	r3, #9
 8011f1a:	d969      	bls.n	8011ff0 <_vfiprintf_r+0x1a0>
 8011f1c:	b360      	cbz	r0, 8011f78 <_vfiprintf_r+0x128>
 8011f1e:	e024      	b.n	8011f6a <_vfiprintf_r+0x11a>
 8011f20:	4b50      	ldr	r3, [pc, #320]	; (8012064 <_vfiprintf_r+0x214>)
 8011f22:	429c      	cmp	r4, r3
 8011f24:	d101      	bne.n	8011f2a <_vfiprintf_r+0xda>
 8011f26:	68b4      	ldr	r4, [r6, #8]
 8011f28:	e7a2      	b.n	8011e70 <_vfiprintf_r+0x20>
 8011f2a:	4b4f      	ldr	r3, [pc, #316]	; (8012068 <_vfiprintf_r+0x218>)
 8011f2c:	429c      	cmp	r4, r3
 8011f2e:	bf08      	it	eq
 8011f30:	68f4      	ldreq	r4, [r6, #12]
 8011f32:	e79d      	b.n	8011e70 <_vfiprintf_r+0x20>
 8011f34:	4621      	mov	r1, r4
 8011f36:	4630      	mov	r0, r6
 8011f38:	f7fe fb26 	bl	8010588 <__swsetup_r>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d09d      	beq.n	8011e7c <_vfiprintf_r+0x2c>
 8011f40:	f04f 30ff 	mov.w	r0, #4294967295
 8011f44:	b01d      	add	sp, #116	; 0x74
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	46a8      	mov	r8, r5
 8011f4c:	e7a2      	b.n	8011e94 <_vfiprintf_r+0x44>
 8011f4e:	4a44      	ldr	r2, [pc, #272]	; (8012060 <_vfiprintf_r+0x210>)
 8011f50:	1a80      	subs	r0, r0, r2
 8011f52:	fa0b f000 	lsl.w	r0, fp, r0
 8011f56:	4318      	orrs	r0, r3
 8011f58:	9004      	str	r0, [sp, #16]
 8011f5a:	4645      	mov	r5, r8
 8011f5c:	e7be      	b.n	8011edc <_vfiprintf_r+0x8c>
 8011f5e:	9a03      	ldr	r2, [sp, #12]
 8011f60:	1d11      	adds	r1, r2, #4
 8011f62:	6812      	ldr	r2, [r2, #0]
 8011f64:	9103      	str	r1, [sp, #12]
 8011f66:	2a00      	cmp	r2, #0
 8011f68:	db01      	blt.n	8011f6e <_vfiprintf_r+0x11e>
 8011f6a:	9207      	str	r2, [sp, #28]
 8011f6c:	e004      	b.n	8011f78 <_vfiprintf_r+0x128>
 8011f6e:	4252      	negs	r2, r2
 8011f70:	f043 0302 	orr.w	r3, r3, #2
 8011f74:	9207      	str	r2, [sp, #28]
 8011f76:	9304      	str	r3, [sp, #16]
 8011f78:	f898 3000 	ldrb.w	r3, [r8]
 8011f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f7e:	d10e      	bne.n	8011f9e <_vfiprintf_r+0x14e>
 8011f80:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011f84:	2b2a      	cmp	r3, #42	; 0x2a
 8011f86:	d138      	bne.n	8011ffa <_vfiprintf_r+0x1aa>
 8011f88:	9b03      	ldr	r3, [sp, #12]
 8011f8a:	1d1a      	adds	r2, r3, #4
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	9203      	str	r2, [sp, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	bfb8      	it	lt
 8011f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f98:	f108 0802 	add.w	r8, r8, #2
 8011f9c:	9305      	str	r3, [sp, #20]
 8011f9e:	4d33      	ldr	r5, [pc, #204]	; (801206c <_vfiprintf_r+0x21c>)
 8011fa0:	f898 1000 	ldrb.w	r1, [r8]
 8011fa4:	2203      	movs	r2, #3
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f7f6 f852 	bl	8008050 <memchr>
 8011fac:	b140      	cbz	r0, 8011fc0 <_vfiprintf_r+0x170>
 8011fae:	2340      	movs	r3, #64	; 0x40
 8011fb0:	1b40      	subs	r0, r0, r5
 8011fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8011fb6:	9b04      	ldr	r3, [sp, #16]
 8011fb8:	4303      	orrs	r3, r0
 8011fba:	f108 0801 	add.w	r8, r8, #1
 8011fbe:	9304      	str	r3, [sp, #16]
 8011fc0:	f898 1000 	ldrb.w	r1, [r8]
 8011fc4:	482a      	ldr	r0, [pc, #168]	; (8012070 <_vfiprintf_r+0x220>)
 8011fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fca:	2206      	movs	r2, #6
 8011fcc:	f108 0701 	add.w	r7, r8, #1
 8011fd0:	f7f6 f83e 	bl	8008050 <memchr>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d037      	beq.n	8012048 <_vfiprintf_r+0x1f8>
 8011fd8:	4b26      	ldr	r3, [pc, #152]	; (8012074 <_vfiprintf_r+0x224>)
 8011fda:	bb1b      	cbnz	r3, 8012024 <_vfiprintf_r+0x1d4>
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	3307      	adds	r3, #7
 8011fe0:	f023 0307 	bic.w	r3, r3, #7
 8011fe4:	3308      	adds	r3, #8
 8011fe6:	9303      	str	r3, [sp, #12]
 8011fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fea:	444b      	add	r3, r9
 8011fec:	9309      	str	r3, [sp, #36]	; 0x24
 8011fee:	e750      	b.n	8011e92 <_vfiprintf_r+0x42>
 8011ff0:	fb05 3202 	mla	r2, r5, r2, r3
 8011ff4:	2001      	movs	r0, #1
 8011ff6:	4688      	mov	r8, r1
 8011ff8:	e78a      	b.n	8011f10 <_vfiprintf_r+0xc0>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f108 0801 	add.w	r8, r8, #1
 8012000:	9305      	str	r3, [sp, #20]
 8012002:	4619      	mov	r1, r3
 8012004:	250a      	movs	r5, #10
 8012006:	4640      	mov	r0, r8
 8012008:	f810 2b01 	ldrb.w	r2, [r0], #1
 801200c:	3a30      	subs	r2, #48	; 0x30
 801200e:	2a09      	cmp	r2, #9
 8012010:	d903      	bls.n	801201a <_vfiprintf_r+0x1ca>
 8012012:	2b00      	cmp	r3, #0
 8012014:	d0c3      	beq.n	8011f9e <_vfiprintf_r+0x14e>
 8012016:	9105      	str	r1, [sp, #20]
 8012018:	e7c1      	b.n	8011f9e <_vfiprintf_r+0x14e>
 801201a:	fb05 2101 	mla	r1, r5, r1, r2
 801201e:	2301      	movs	r3, #1
 8012020:	4680      	mov	r8, r0
 8012022:	e7f0      	b.n	8012006 <_vfiprintf_r+0x1b6>
 8012024:	ab03      	add	r3, sp, #12
 8012026:	9300      	str	r3, [sp, #0]
 8012028:	4622      	mov	r2, r4
 801202a:	4b13      	ldr	r3, [pc, #76]	; (8012078 <_vfiprintf_r+0x228>)
 801202c:	a904      	add	r1, sp, #16
 801202e:	4630      	mov	r0, r6
 8012030:	f7fd fe14 	bl	800fc5c <_printf_float>
 8012034:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012038:	4681      	mov	r9, r0
 801203a:	d1d5      	bne.n	8011fe8 <_vfiprintf_r+0x198>
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	065b      	lsls	r3, r3, #25
 8012040:	f53f af7e 	bmi.w	8011f40 <_vfiprintf_r+0xf0>
 8012044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012046:	e77d      	b.n	8011f44 <_vfiprintf_r+0xf4>
 8012048:	ab03      	add	r3, sp, #12
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	4622      	mov	r2, r4
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <_vfiprintf_r+0x228>)
 8012050:	a904      	add	r1, sp, #16
 8012052:	4630      	mov	r0, r6
 8012054:	f7fe f8b8 	bl	80101c8 <_printf_i>
 8012058:	e7ec      	b.n	8012034 <_vfiprintf_r+0x1e4>
 801205a:	bf00      	nop
 801205c:	08012308 	.word	0x08012308
 8012060:	08012444 	.word	0x08012444
 8012064:	08012328 	.word	0x08012328
 8012068:	080122e8 	.word	0x080122e8
 801206c:	0801244a 	.word	0x0801244a
 8012070:	0801244e 	.word	0x0801244e
 8012074:	0800fc5d 	.word	0x0800fc5d
 8012078:	08011e2b 	.word	0x08011e2b

0801207c <_sbrk_r>:
 801207c:	b538      	push	{r3, r4, r5, lr}
 801207e:	4c06      	ldr	r4, [pc, #24]	; (8012098 <_sbrk_r+0x1c>)
 8012080:	2300      	movs	r3, #0
 8012082:	4605      	mov	r5, r0
 8012084:	4608      	mov	r0, r1
 8012086:	6023      	str	r3, [r4, #0]
 8012088:	f7f8 ff92 	bl	800afb0 <_sbrk>
 801208c:	1c43      	adds	r3, r0, #1
 801208e:	d102      	bne.n	8012096 <_sbrk_r+0x1a>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	b103      	cbz	r3, 8012096 <_sbrk_r+0x1a>
 8012094:	602b      	str	r3, [r5, #0]
 8012096:	bd38      	pop	{r3, r4, r5, pc}
 8012098:	200007b0 	.word	0x200007b0

0801209c <__sread>:
 801209c:	b510      	push	{r4, lr}
 801209e:	460c      	mov	r4, r1
 80120a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a4:	f000 f8a8 	bl	80121f8 <_read_r>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	bfab      	itete	ge
 80120ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120ae:	89a3      	ldrhlt	r3, [r4, #12]
 80120b0:	181b      	addge	r3, r3, r0
 80120b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120b6:	bfac      	ite	ge
 80120b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80120ba:	81a3      	strhlt	r3, [r4, #12]
 80120bc:	bd10      	pop	{r4, pc}

080120be <__swrite>:
 80120be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c2:	461f      	mov	r7, r3
 80120c4:	898b      	ldrh	r3, [r1, #12]
 80120c6:	05db      	lsls	r3, r3, #23
 80120c8:	4605      	mov	r5, r0
 80120ca:	460c      	mov	r4, r1
 80120cc:	4616      	mov	r6, r2
 80120ce:	d505      	bpl.n	80120dc <__swrite+0x1e>
 80120d0:	2302      	movs	r3, #2
 80120d2:	2200      	movs	r2, #0
 80120d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d8:	f000 f868 	bl	80121ac <_lseek_r>
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120e6:	81a3      	strh	r3, [r4, #12]
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	4628      	mov	r0, r5
 80120ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120f2:	f000 b817 	b.w	8012124 <_write_r>

080120f6 <__sseek>:
 80120f6:	b510      	push	{r4, lr}
 80120f8:	460c      	mov	r4, r1
 80120fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fe:	f000 f855 	bl	80121ac <_lseek_r>
 8012102:	1c43      	adds	r3, r0, #1
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	bf15      	itete	ne
 8012108:	6560      	strne	r0, [r4, #84]	; 0x54
 801210a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801210e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012112:	81a3      	strheq	r3, [r4, #12]
 8012114:	bf18      	it	ne
 8012116:	81a3      	strhne	r3, [r4, #12]
 8012118:	bd10      	pop	{r4, pc}

0801211a <__sclose>:
 801211a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801211e:	f000 b813 	b.w	8012148 <_close_r>
	...

08012124 <_write_r>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	4c07      	ldr	r4, [pc, #28]	; (8012144 <_write_r+0x20>)
 8012128:	4605      	mov	r5, r0
 801212a:	4608      	mov	r0, r1
 801212c:	4611      	mov	r1, r2
 801212e:	2200      	movs	r2, #0
 8012130:	6022      	str	r2, [r4, #0]
 8012132:	461a      	mov	r2, r3
 8012134:	f7f8 feeb 	bl	800af0e <_write>
 8012138:	1c43      	adds	r3, r0, #1
 801213a:	d102      	bne.n	8012142 <_write_r+0x1e>
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	b103      	cbz	r3, 8012142 <_write_r+0x1e>
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	bd38      	pop	{r3, r4, r5, pc}
 8012144:	200007b0 	.word	0x200007b0

08012148 <_close_r>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	4c06      	ldr	r4, [pc, #24]	; (8012164 <_close_r+0x1c>)
 801214c:	2300      	movs	r3, #0
 801214e:	4605      	mov	r5, r0
 8012150:	4608      	mov	r0, r1
 8012152:	6023      	str	r3, [r4, #0]
 8012154:	f7f8 fef7 	bl	800af46 <_close>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_close_r+0x1a>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	b103      	cbz	r3, 8012162 <_close_r+0x1a>
 8012160:	602b      	str	r3, [r5, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	200007b0 	.word	0x200007b0

08012168 <_fstat_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4c07      	ldr	r4, [pc, #28]	; (8012188 <_fstat_r+0x20>)
 801216c:	2300      	movs	r3, #0
 801216e:	4605      	mov	r5, r0
 8012170:	4608      	mov	r0, r1
 8012172:	4611      	mov	r1, r2
 8012174:	6023      	str	r3, [r4, #0]
 8012176:	f7f8 fef2 	bl	800af5e <_fstat>
 801217a:	1c43      	adds	r3, r0, #1
 801217c:	d102      	bne.n	8012184 <_fstat_r+0x1c>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	b103      	cbz	r3, 8012184 <_fstat_r+0x1c>
 8012182:	602b      	str	r3, [r5, #0]
 8012184:	bd38      	pop	{r3, r4, r5, pc}
 8012186:	bf00      	nop
 8012188:	200007b0 	.word	0x200007b0

0801218c <_isatty_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4c06      	ldr	r4, [pc, #24]	; (80121a8 <_isatty_r+0x1c>)
 8012190:	2300      	movs	r3, #0
 8012192:	4605      	mov	r5, r0
 8012194:	4608      	mov	r0, r1
 8012196:	6023      	str	r3, [r4, #0]
 8012198:	f7f8 fef1 	bl	800af7e <_isatty>
 801219c:	1c43      	adds	r3, r0, #1
 801219e:	d102      	bne.n	80121a6 <_isatty_r+0x1a>
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	b103      	cbz	r3, 80121a6 <_isatty_r+0x1a>
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	bd38      	pop	{r3, r4, r5, pc}
 80121a8:	200007b0 	.word	0x200007b0

080121ac <_lseek_r>:
 80121ac:	b538      	push	{r3, r4, r5, lr}
 80121ae:	4c07      	ldr	r4, [pc, #28]	; (80121cc <_lseek_r+0x20>)
 80121b0:	4605      	mov	r5, r0
 80121b2:	4608      	mov	r0, r1
 80121b4:	4611      	mov	r1, r2
 80121b6:	2200      	movs	r2, #0
 80121b8:	6022      	str	r2, [r4, #0]
 80121ba:	461a      	mov	r2, r3
 80121bc:	f7f8 feea 	bl	800af94 <_lseek>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d102      	bne.n	80121ca <_lseek_r+0x1e>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	b103      	cbz	r3, 80121ca <_lseek_r+0x1e>
 80121c8:	602b      	str	r3, [r5, #0]
 80121ca:	bd38      	pop	{r3, r4, r5, pc}
 80121cc:	200007b0 	.word	0x200007b0

080121d0 <__ascii_mbtowc>:
 80121d0:	b082      	sub	sp, #8
 80121d2:	b901      	cbnz	r1, 80121d6 <__ascii_mbtowc+0x6>
 80121d4:	a901      	add	r1, sp, #4
 80121d6:	b142      	cbz	r2, 80121ea <__ascii_mbtowc+0x1a>
 80121d8:	b14b      	cbz	r3, 80121ee <__ascii_mbtowc+0x1e>
 80121da:	7813      	ldrb	r3, [r2, #0]
 80121dc:	600b      	str	r3, [r1, #0]
 80121de:	7812      	ldrb	r2, [r2, #0]
 80121e0:	1c10      	adds	r0, r2, #0
 80121e2:	bf18      	it	ne
 80121e4:	2001      	movne	r0, #1
 80121e6:	b002      	add	sp, #8
 80121e8:	4770      	bx	lr
 80121ea:	4610      	mov	r0, r2
 80121ec:	e7fb      	b.n	80121e6 <__ascii_mbtowc+0x16>
 80121ee:	f06f 0001 	mvn.w	r0, #1
 80121f2:	e7f8      	b.n	80121e6 <__ascii_mbtowc+0x16>

080121f4 <__malloc_lock>:
 80121f4:	4770      	bx	lr

080121f6 <__malloc_unlock>:
 80121f6:	4770      	bx	lr

080121f8 <_read_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	4c07      	ldr	r4, [pc, #28]	; (8012218 <_read_r+0x20>)
 80121fc:	4605      	mov	r5, r0
 80121fe:	4608      	mov	r0, r1
 8012200:	4611      	mov	r1, r2
 8012202:	2200      	movs	r2, #0
 8012204:	6022      	str	r2, [r4, #0]
 8012206:	461a      	mov	r2, r3
 8012208:	f7f8 fe64 	bl	800aed4 <_read>
 801220c:	1c43      	adds	r3, r0, #1
 801220e:	d102      	bne.n	8012216 <_read_r+0x1e>
 8012210:	6823      	ldr	r3, [r4, #0]
 8012212:	b103      	cbz	r3, 8012216 <_read_r+0x1e>
 8012214:	602b      	str	r3, [r5, #0]
 8012216:	bd38      	pop	{r3, r4, r5, pc}
 8012218:	200007b0 	.word	0x200007b0

0801221c <__ascii_wctomb>:
 801221c:	b149      	cbz	r1, 8012232 <__ascii_wctomb+0x16>
 801221e:	2aff      	cmp	r2, #255	; 0xff
 8012220:	bf85      	ittet	hi
 8012222:	238a      	movhi	r3, #138	; 0x8a
 8012224:	6003      	strhi	r3, [r0, #0]
 8012226:	700a      	strbls	r2, [r1, #0]
 8012228:	f04f 30ff 	movhi.w	r0, #4294967295
 801222c:	bf98      	it	ls
 801222e:	2001      	movls	r0, #1
 8012230:	4770      	bx	lr
 8012232:	4608      	mov	r0, r1
 8012234:	4770      	bx	lr
	...

08012238 <_init>:
 8012238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223a:	bf00      	nop
 801223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223e:	bc08      	pop	{r3}
 8012240:	469e      	mov	lr, r3
 8012242:	4770      	bx	lr

08012244 <_fini>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	bf00      	nop
 8012248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224a:	bc08      	pop	{r3}
 801224c:	469e      	mov	lr, r3
 801224e:	4770      	bx	lr
