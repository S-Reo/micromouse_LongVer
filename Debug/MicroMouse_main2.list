
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000115ac  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000066c  080195b0  080195b0  000295b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08019c1c  08019c1c  000301f8  2**0
                  CONTENTS
  6 .ARM          00000008  08019c1c  08019c1c  00029c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08019c24  08019c24  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08019c24  08019c24  00029c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08019c28  08019c28  00029c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001f8  20000000  08019c2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c3c  200001f8  08019e24  000301f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000e34  08019e24  00030e34  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022215  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000492f  00000000  00000000  0005243d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001650  00000000  00000000  00056d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001420  00000000  00000000  000583c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024995  00000000  00000000  000597e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00015f17  00000000  00000000  0007e175  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8cc6  00000000  00000000  0009408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015cd52  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007040  00000000  00000000  0015cdd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001f8 	.word	0x200001f8
 800801c:	00000000 	.word	0x00000000
 8008020:	08019594 	.word	0x08019594

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001fc 	.word	0x200001fc
 800803c:	08019594 	.word	0x08019594

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	70da      	strb	r2, [r3, #3]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	709a      	strb	r2, [r3, #2]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	711a      	strb	r2, [r3, #4]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	715a      	strb	r2, [r3, #5]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:
int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4b9a      	ldr	r3, [pc, #616]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e36:	78db      	ldrb	r3, [r3, #3]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 812b 	bhi.w	8009094 <GetWallCtrlDirection+0x264>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008ee5 	.word	0x08008ee5
 8008e4c:	08008f75 	.word	0x08008f75
 8008e50:	08009005 	.word	0x08009005
	{
	case north:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e54:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4b91      	ldr	r3, [pc, #580]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4a90      	ldr	r2, [pc, #576]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e62:	0103      	lsls	r3, r0, #4
 8008e64:	440b      	add	r3, r1
 8008e66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d111      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
 8008e74:	4b8a      	ldr	r3, [pc, #552]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4a88      	ldr	r2, [pc, #544]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e82:	0103      	lsls	r3, r0, #4
 8008e84:	440b      	add	r3, r1
 8008e86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
		{
			return D_WALL_PID;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0fe      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008e98:	4b81      	ldr	r3, [pc, #516]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4a7f      	ldr	r2, [pc, #508]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ea6:	0103      	lsls	r3, r0, #4
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <GetWallCtrlDirection+0x8c>
		{
			return R_WALL_PID;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0ec      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ebc:	4b78      	ldr	r3, [pc, #480]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4b77      	ldr	r3, [pc, #476]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008eca:	0103      	lsls	r3, r0, #4
 8008ecc:	440b      	add	r3, r1
 8008ece:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <GetWallCtrlDirection+0xb0>
		{
			return L_WALL_PID;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e0da      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	e0d8      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008ee4:	4b6e      	ldr	r3, [pc, #440]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4b6d      	ldr	r3, [pc, #436]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4a6c      	ldr	r2, [pc, #432]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ef2:	0103      	lsls	r3, r0, #4
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d111      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
 8008f04:	4b66      	ldr	r3, [pc, #408]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4b65      	ldr	r3, [pc, #404]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4a64      	ldr	r2, [pc, #400]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f12:	0103      	lsls	r3, r0, #4
 8008f14:	440b      	add	r3, r1
 8008f16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
		{
			return D_WALL_PID;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b6      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f28:	4b5d      	ldr	r3, [pc, #372]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	4619      	mov	r1, r3
 8008f34:	4a5b      	ldr	r2, [pc, #364]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f36:	0103      	lsls	r3, r0, #4
 8008f38:	440b      	add	r3, r1
 8008f3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <GetWallCtrlDirection+0x11c>
		{
			return L_WALL_PID;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0a4      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008f4c:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	4b53      	ldr	r3, [pc, #332]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f5a:	0103      	lsls	r3, r0, #4
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f62:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <GetWallCtrlDirection+0x140>
		{
			return R_WALL_PID;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e092      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008f70:	2306      	movs	r3, #6
 8008f72:	e090      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008f74:	4b4a      	ldr	r3, [pc, #296]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4b49      	ldr	r3, [pc, #292]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4a48      	ldr	r2, [pc, #288]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f82:	0103      	lsls	r3, r0, #4
 8008f84:	440b      	add	r3, r1
 8008f86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d111      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
 8008f94:	4b42      	ldr	r3, [pc, #264]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4a40      	ldr	r2, [pc, #256]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fa2:	0103      	lsls	r3, r0, #4
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return D_WALL_PID;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e06e      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fc6:	0103      	lsls	r3, r0, #4
 8008fc8:	440b      	add	r3, r1
 8008fca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <GetWallCtrlDirection+0x1ac>
		{
			return L_WALL_PID;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e05c      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008fdc:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fea:	0103      	lsls	r3, r0, #4
 8008fec:	440b      	add	r3, r1
 8008fee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ff2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <GetWallCtrlDirection+0x1d0>
		{
			return R_WALL_PID;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e04a      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009000:	2306      	movs	r3, #6
 8009002:	e048      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case west:

		if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	4a24      	ldr	r2, [pc, #144]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009012:	0103      	lsls	r3, r0, #4
 8009014:	440b      	add	r3, r1
 8009016:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800901a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d111      	bne.n	8009048 <GetWallCtrlDirection+0x218>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	4619      	mov	r1, r3
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009032:	0103      	lsls	r3, r0, #4
 8009034:	440b      	add	r3, r1
 8009036:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800903a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <GetWallCtrlDirection+0x218>
		{
			return D_WALL_PID;
 8009044:	2301      	movs	r3, #1
 8009046:	e026      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	4619      	mov	r1, r3
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009056:	0103      	lsls	r3, r0, #4
 8009058:	440b      	add	r3, r1
 800905a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800905e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <GetWallCtrlDirection+0x23c>
		{
			return R_WALL_PID;
 8009068:	2303      	movs	r3, #3
 800906a:	e014      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	4619      	mov	r1, r3
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <GetWallCtrlDirection+0x274>)
 800907a:	0103      	lsls	r3, r0, #4
 800907c:	440b      	add	r3, r1
 800907e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009082:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <GetWallCtrlDirection+0x260>
		{
			return L_WALL_PID;
 800908c:	2302      	movs	r3, #2
 800908e:	e002      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009090:	2306      	movs	r3, #6
 8009092:	e000      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8009094:	2306      	movs	r3, #6
		break;
	}

}
 8009096:	4618      	mov	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000000 	.word	0x20000000
 80090a4:	2000088c 	.word	0x2000088c

080090a8 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80090ac:	4b03      	ldr	r3, [pc, #12]	; (80090bc <WallSafe+0x14>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	715a      	strb	r2, [r3, #5]
}
 80090b2:	bf00      	nop
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	20000000 	.word	0x20000000

080090c0 <WallWarn>:
void WallWarn()
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <WallWarn+0x14>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	715a      	strb	r2, [r3, #5]
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000000 	.word	0x20000000

080090d8 <ControlWall>:
void ControlWall()
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 80090de:	f7ff fea7 	bl	8008e30 <GetWallCtrlDirection>
 80090e2:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 80090e4:	2100      	movs	r1, #0
 80090e6:	2002      	movs	r0, #2
 80090e8:	f004 f866 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 80090ec:	2100      	movs	r1, #0
 80090ee:	2003      	movs	r0, #3
 80090f0:	f004 f862 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 80090f4:	2100      	movs	r1, #0
 80090f6:	2001      	movs	r0, #1
 80090f8:	f004 f85e 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 80090fc:	2100      	movs	r1, #0
 80090fe:	2000      	movs	r0, #0
 8009100:	f004 f85a 	bl	800d1b8 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 8009104:	4b7c      	ldr	r3, [pc, #496]	; (80092f8 <ControlWall+0x220>)
 8009106:	789b      	ldrb	r3, [r3, #2]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d13f      	bne.n	800918c <ControlWall+0xb4>
	{
		switch(Pos.Act)
 800910c:	4b7a      	ldr	r3, [pc, #488]	; (80092f8 <ControlWall+0x220>)
 800910e:	791b      	ldrb	r3, [r3, #4]
 8009110:	2b05      	cmp	r3, #5
 8009112:	f200 80ec 	bhi.w	80092ee <ControlWall+0x216>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <ControlWall+0x44>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009135 	.word	0x08009135
 8009120:	080092ef 	.word	0x080092ef
 8009124:	080092ef 	.word	0x080092ef
 8009128:	080092ef 	.word	0x080092ef
 800912c:	080092ef 	.word	0x080092ef
 8009130:	0800913f 	.word	0x0800913f
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 8009134:	2101      	movs	r1, #1
 8009136:	2000      	movs	r0, #0
 8009138:	f004 f83e 	bl	800d1b8 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 800913c:	e0d8      	b.n	80092f0 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b06      	cmp	r3, #6
 8009142:	d01d      	beq.n	8009180 <ControlWall+0xa8>
 8009144:	4b6d      	ldr	r3, [pc, #436]	; (80092fc <ControlWall+0x224>)
 8009146:	edd3 7a00 	vldr	s15, [r3]
 800914a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009152:	d115      	bne.n	8009180 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009154:	4b68      	ldr	r3, [pc, #416]	; (80092f8 <ControlWall+0x220>)
 8009156:	795b      	ldrb	r3, [r3, #5]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d108      	bne.n	800916e <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 800915c:	2101      	movs	r1, #1
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f004 f82a 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 8009164:	2100      	movs	r1, #0
 8009166:	2000      	movs	r0, #0
 8009168:	f004 f826 	bl	800d1b8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800916c:	e00d      	b.n	800918a <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 800916e:	2100      	movs	r1, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f004 f821 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 8009176:	2101      	movs	r1, #1
 8009178:	2000      	movs	r0, #0
 800917a:	f004 f81d 	bl	800d1b8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800917e:	e004      	b.n	800918a <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 8009180:	2101      	movs	r1, #1
 8009182:	2000      	movs	r0, #0
 8009184:	f004 f818 	bl	800d1b8 <PIDChangeFlag>
			}
			break;
 8009188:	e0b2      	b.n	80092f0 <ControlWall+0x218>
 800918a:	e0b1      	b.n	80092f0 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 800918c:	4b5a      	ldr	r3, [pc, #360]	; (80092f8 <ControlWall+0x220>)
 800918e:	789b      	ldrb	r3, [r3, #2]
 8009190:	2b03      	cmp	r3, #3
 8009192:	d140      	bne.n	8009216 <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 8009194:	4b58      	ldr	r3, [pc, #352]	; (80092f8 <ControlWall+0x220>)
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d108      	bne.n	80091ae <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 800919c:	4b58      	ldr	r3, [pc, #352]	; (8009300 <ControlWall+0x228>)
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80091a4:	4b57      	ldr	r3, [pc, #348]	; (8009304 <ControlWall+0x22c>)
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]





}
 80091ac:	e0a0      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80091ae:	4b52      	ldr	r3, [pc, #328]	; (80092f8 <ControlWall+0x220>)
 80091b0:	791b      	ldrb	r3, [r3, #4]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d11d      	bne.n	80091f2 <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b06      	cmp	r3, #6
 80091ba:	d015      	beq.n	80091e8 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091bc:	4b4e      	ldr	r3, [pc, #312]	; (80092f8 <ControlWall+0x220>)
 80091be:	795b      	ldrb	r3, [r3, #5]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d108      	bne.n	80091d6 <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 80091c4:	2101      	movs	r1, #1
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f003 fff6 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80091cc:	2100      	movs	r1, #0
 80091ce:	2000      	movs	r0, #0
 80091d0:	f003 fff2 	bl	800d1b8 <PIDChangeFlag>
}
 80091d4:	e08c      	b.n	80092f0 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f003 ffed 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80091de:	2101      	movs	r1, #1
 80091e0:	2000      	movs	r0, #0
 80091e2:	f003 ffe9 	bl	800d1b8 <PIDChangeFlag>
}
 80091e6:	e083      	b.n	80092f0 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80091e8:	2101      	movs	r1, #1
 80091ea:	2000      	movs	r0, #0
 80091ec:	f003 ffe4 	bl	800d1b8 <PIDChangeFlag>
}
 80091f0:	e07e      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80091f2:	4b41      	ldr	r3, [pc, #260]	; (80092f8 <ControlWall+0x220>)
 80091f4:	791b      	ldrb	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 80091fa:	2101      	movs	r1, #1
 80091fc:	2000      	movs	r0, #0
 80091fe:	f003 ffdb 	bl	800d1b8 <PIDChangeFlag>
}
 8009202:	e075      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 8009204:	4b3c      	ldr	r3, [pc, #240]	; (80092f8 <ControlWall+0x220>)
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d171      	bne.n	80092f0 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 800920c:	2100      	movs	r1, #0
 800920e:	2000      	movs	r0, #0
 8009210:	f003 ffd2 	bl	800d1b8 <PIDChangeFlag>
}
 8009214:	e06c      	b.n	80092f0 <ControlWall+0x218>
	else if(Pos.Dir == right)
 8009216:	4b38      	ldr	r3, [pc, #224]	; (80092f8 <ControlWall+0x220>)
 8009218:	789b      	ldrb	r3, [r3, #2]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d140      	bne.n	80092a0 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <ControlWall+0x220>)
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d108      	bne.n	8009238 <ControlWall+0x160>
			TargetAngularV = 0;
 8009226:	4b36      	ldr	r3, [pc, #216]	; (8009300 <ControlWall+0x228>)
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800922e:	4b35      	ldr	r3, [pc, #212]	; (8009304 <ControlWall+0x22c>)
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
}
 8009236:	e05b      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009238:	4b2f      	ldr	r3, [pc, #188]	; (80092f8 <ControlWall+0x220>)
 800923a:	791b      	ldrb	r3, [r3, #4]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d11d      	bne.n	800927c <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d015      	beq.n	8009272 <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009246:	4b2c      	ldr	r3, [pc, #176]	; (80092f8 <ControlWall+0x220>)
 8009248:	795b      	ldrb	r3, [r3, #5]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d108      	bne.n	8009260 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 800924e:	2101      	movs	r1, #1
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f003 ffb1 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 8009256:	2100      	movs	r1, #0
 8009258:	2000      	movs	r0, #0
 800925a:	f003 ffad 	bl	800d1b8 <PIDChangeFlag>
}
 800925e:	e047      	b.n	80092f0 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009260:	2100      	movs	r1, #0
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f003 ffa8 	bl	800d1b8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 8009268:	2101      	movs	r1, #1
 800926a:	2000      	movs	r0, #0
 800926c:	f003 ffa4 	bl	800d1b8 <PIDChangeFlag>
}
 8009270:	e03e      	b.n	80092f0 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009272:	2101      	movs	r1, #1
 8009274:	2000      	movs	r0, #0
 8009276:	f003 ff9f 	bl	800d1b8 <PIDChangeFlag>
}
 800927a:	e039      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800927c:	4b1e      	ldr	r3, [pc, #120]	; (80092f8 <ControlWall+0x220>)
 800927e:	791b      	ldrb	r3, [r3, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 8009284:	2101      	movs	r1, #1
 8009286:	2000      	movs	r0, #0
 8009288:	f003 ff96 	bl	800d1b8 <PIDChangeFlag>
}
 800928c:	e030      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 800928e:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <ControlWall+0x220>)
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	2b03      	cmp	r3, #3
 8009294:	d12c      	bne.n	80092f0 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 8009296:	2100      	movs	r1, #0
 8009298:	2000      	movs	r0, #0
 800929a:	f003 ff8d 	bl	800d1b8 <PIDChangeFlag>
}
 800929e:	e027      	b.n	80092f0 <ControlWall+0x218>
	else if(Pos.Dir == back)
 80092a0:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <ControlWall+0x220>)
 80092a2:	789b      	ldrb	r3, [r3, #2]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d123      	bne.n	80092f0 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <ControlWall+0x220>)
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d115      	bne.n	80092dc <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 80092b0:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <ControlWall+0x220>)
 80092b2:	795b      	ldrb	r3, [r3, #5]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d108      	bne.n	80092ca <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f003 ff7c 	bl	800d1b8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 80092c0:	2100      	movs	r1, #0
 80092c2:	2000      	movs	r0, #0
 80092c4:	f003 ff78 	bl	800d1b8 <PIDChangeFlag>
}
 80092c8:	e012      	b.n	80092f0 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 80092ca:	2100      	movs	r1, #0
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f003 ff73 	bl	800d1b8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 80092d2:	2101      	movs	r1, #1
 80092d4:	2000      	movs	r0, #0
 80092d6:	f003 ff6f 	bl	800d1b8 <PIDChangeFlag>
}
 80092da:	e009      	b.n	80092f0 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80092dc:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <ControlWall+0x220>)
 80092de:	791b      	ldrb	r3, [r3, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d105      	bne.n	80092f0 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 80092e4:	2101      	movs	r1, #1
 80092e6:	2000      	movs	r0, #0
 80092e8:	f003 ff66 	bl	800d1b8 <PIDChangeFlag>
}
 80092ec:	e000      	b.n	80092f0 <ControlWall+0x218>
			break;
 80092ee:	bf00      	nop
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000000 	.word	0x20000000
 80092fc:	200003fc 	.word	0x200003fc
 8009300:	20000400 	.word	0x20000400
 8009304:	2000041c 	.word	0x2000041c

08009308 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009308:	b580      	push	{r7, lr}
 800930a:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 800930c:	4b17      	ldr	r3, [pc, #92]	; (800936c <WaitStopAndReset+0x64>)
 800930e:	2204      	movs	r2, #4
 8009310:	711a      	strb	r2, [r3, #4]
	ControlWall();//ベイブレード対策
 8009312:	f7ff fee1 	bl	80090d8 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <WaitStopAndReset+0x68>)
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 800931e:	4b15      	ldr	r3, [pc, #84]	; (8009374 <WaitStopAndReset+0x6c>)
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <WaitStopAndReset+0x70>)
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <WaitStopAndReset+0x74>)
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8009336:	4b12      	ldr	r3, [pc, #72]	; (8009380 <WaitStopAndReset+0x78>)
 8009338:	edd3 7a00 	vldr	s15, [r3]
 800933c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009384 <WaitStopAndReset+0x7c>
 8009340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009348:	dd02      	ble.n	8009350 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 800934a:	480f      	ldr	r0, [pc, #60]	; (8009388 <WaitStopAndReset+0x80>)
 800934c:	f00b ff90 	bl	8015270 <puts>

	}while(CurrentVelocity[BODY] != 0);
 8009350:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <WaitStopAndReset+0x78>)
 8009352:	edd3 7a02 	vldr	s15, [r3, #8]
 8009356:	eef5 7a40 	vcmp.f32	s15, #0.0
 800935a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935e:	d1da      	bne.n	8009316 <WaitStopAndReset+0xe>
	HAL_Delay(200);
 8009360:	20c8      	movs	r0, #200	; 0xc8
 8009362:	f006 f8a7 	bl	800f4b4 <HAL_Delay>
}
 8009366:	bf00      	nop
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000000 	.word	0x20000000
 8009370:	200003f0 	.word	0x200003f0
 8009374:	20000420 	.word	0x20000420
 8009378:	20000400 	.word	0x20000400
 800937c:	2000041c 	.word	0x2000041c
 8009380:	20000434 	.word	0x20000434
 8009384:	43fa0000 	.word	0x43fa0000
 8009388:	080195b0 	.word	0x080195b0
 800938c:	00000000 	.word	0x00000000

08009390 <RotateAccel>:
void RotateAccel(float deg, float rotate_ang_v)
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	ed87 0a01 	vstr	s0, [r7, #4]
 800939a:	edc7 0a00 	vstr	s1, [r7]
	TargetAngularV = 0;
 800939e:	4b4a      	ldr	r3, [pc, #296]	; (80094c8 <RotateAccel+0x138>)
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
	float additional_ang_v=0;
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - AngularV;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	617b      	str	r3, [r7, #20]
//
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI/ 180;
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f801 	bl	80083b8 <__aeabi_f2d>
 80093b6:	a342      	add	r3, pc, #264	; (adr r3, 80094c0 <RotateAccel+0x130>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7ff f854 	bl	8008468 <__aeabi_dmul>
 80093c0:	4603      	mov	r3, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	4618      	mov	r0, r3
 80093c6:	4621      	mov	r1, r4
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	4b3f      	ldr	r3, [pc, #252]	; (80094cc <RotateAccel+0x13c>)
 80093ce:	f7ff f975 	bl	80086bc <__aeabi_ddiv>
 80093d2:	4603      	mov	r3, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	4618      	mov	r0, r3
 80093d8:	4621      	mov	r1, r4
 80093da:	f7ff fb3d 	bl	8008a58 <__aeabi_d2f>
 80093de:	4603      	mov	r3, r0
 80093e0:	613b      	str	r3, [r7, #16]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	float debug[2] = {0};
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	605a      	str	r2, [r3, #4]
	debug[0] = Angle;
 80093ec:	4b38      	ldr	r3, [pc, #224]	; (80094d0 <RotateAccel+0x140>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60bb      	str	r3, [r7, #8]
	if( rotate_ang_v > 0)	//右回転
 80093f2:	edd7 7a00 	vldr	s15, [r7]
 80093f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fe:	dd29      	ble.n	8009454 <RotateAccel+0xc4>
	{
		move_angle = move_angle + Angle;//Angleが負にずれ過ぎて、
 8009400:	4b33      	ldr	r3, [pc, #204]	; (80094d0 <RotateAccel+0x140>)
 8009402:	edd3 7a00 	vldr	s15, [r3]
 8009406:	ed97 7a04 	vldr	s14, [r7, #16]
 800940a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800940e:	edc7 7a04 	vstr	s15, [r7, #16]
		debug[1] = move_angle;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	60fb      	str	r3, [r7, #12]
		//ここのwhileが抜けないことがある
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009416:	e012      	b.n	800943e <RotateAccel+0xae>
		{
			AngularAcceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8009418:	edd7 7a05 	vldr	s15, [r7, #20]
 800941c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80094d4 <RotateAccel+0x144>
 8009420:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009424:	edd7 7a05 	vldr	s15, [r7, #20]
 8009428:	ee67 6a27 	vmul.f32	s13, s14, s15
 800942c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009430:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009438:	4b27      	ldr	r3, [pc, #156]	; (80094d8 <RotateAccel+0x148>)
 800943a:	edc3 7a00 	vstr	s15, [r3]
		while( (move_angle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800943e:	4b24      	ldr	r3, [pc, #144]	; (80094d0 <RotateAccel+0x140>)
 8009440:	edd3 7a00 	vldr	s15, [r3]
 8009444:	ed97 7a04 	vldr	s14, [r7, #16]
 8009448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009450:	dce2      	bgt.n	8009418 <RotateAccel+0x88>
 8009452:	e02d      	b.n	80094b0 <RotateAccel+0x120>
			}
#endif
		}

	}
	else if( rotate_ang_v < 0)
 8009454:	edd7 7a00 	vldr	s15, [r7]
 8009458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800945c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009460:	d526      	bpl.n	80094b0 <RotateAccel+0x120>
	{
		move_angle = -move_angle + Angle;
 8009462:	4b1b      	ldr	r3, [pc, #108]	; (80094d0 <RotateAccel+0x140>)
 8009464:	ed93 7a00 	vldr	s14, [r3]
 8009468:	edd7 7a04 	vldr	s15, [r7, #16]
 800946c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009470:	edc7 7a04 	vstr	s15, [r7, #16]
		//printf("加速 負\r\n");
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) ) ) */)
 8009474:	e012      	b.n	800949c <RotateAccel+0x10c>
		{

			AngularAcceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8009476:	edd7 7a05 	vldr	s15, [r7, #20]
 800947a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80094dc <RotateAccel+0x14c>
 800947e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009482:	edd7 7a05 	vldr	s15, [r7, #20]
 8009486:	ee67 6a27 	vmul.f32	s13, s14, s15
 800948a:	edd7 7a01 	vldr	s15, [r7, #4]
 800948e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <RotateAccel+0x148>)
 8009498:	edc3 7a00 	vstr	s15, [r3]
		while( (move_angle < Angle)/* && ( ( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) ) ) */)
 800949c:	4b0c      	ldr	r3, [pc, #48]	; (80094d0 <RotateAccel+0x140>)
 800949e:	edd3 7a00 	vldr	s15, [r3]
 80094a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80094a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	d4e2      	bmi.n	8009476 <RotateAccel+0xe6>

		}

	}
	AngularAcceleration = 0;
 80094b0:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <RotateAccel+0x148>)
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 80094b8:	bf00      	nop
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd90      	pop	{r4, r7, pc}
 80094c0:	54442d18 	.word	0x54442d18
 80094c4:	400921fb 	.word	0x400921fb
 80094c8:	20000400 	.word	0x20000400
 80094cc:	40668000 	.word	0x40668000
 80094d0:	20000258 	.word	0x20000258
 80094d4:	3d83126f 	.word	0x3d83126f
 80094d8:	2000041c 	.word	0x2000041c
 80094dc:	bd83126f 	.word	0xbd83126f

080094e0 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80094ea:	edc7 0a00 	vstr	s1, [r7]
//
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI/ 180;
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fe ff62 	bl	80083b8 <__aeabi_f2d>
 80094f4:	a33e      	add	r3, pc, #248	; (adr r3, 80095f0 <RotateConst+0x110>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7fe ffb5 	bl	8008468 <__aeabi_dmul>
 80094fe:	4603      	mov	r3, r0
 8009500:	460c      	mov	r4, r1
 8009502:	4618      	mov	r0, r3
 8009504:	4621      	mov	r1, r4
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	4b33      	ldr	r3, [pc, #204]	; (80095d8 <RotateConst+0xf8>)
 800950c:	f7ff f8d6 	bl	80086bc <__aeabi_ddiv>
 8009510:	4603      	mov	r3, r0
 8009512:	460c      	mov	r4, r1
 8009514:	4618      	mov	r0, r3
 8009516:	4621      	mov	r1, r4
 8009518:	f7ff fa9e 	bl	8008a58 <__aeabi_d2f>
 800951c:	4603      	mov	r3, r0
 800951e:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8009520:	edd7 7a00 	vldr	s15, [r7]
 8009524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952c:	dd2d      	ble.n	800958a <RotateConst+0xaa>
	{
		move_angle += Angle;
 800952e:	4b2b      	ldr	r3, [pc, #172]	; (80095dc <RotateConst+0xfc>)
 8009530:	edd3 7a00 	vldr	s15, [r3]
 8009534:	ed97 7a03 	vldr	s14, [r7, #12]
 8009538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800953c:	edc7 7a03 	vstr	s15, [r7, #12]
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 8009540:	e018      	b.n	8009574 <RotateConst+0x94>
		{
			//TargetAngularV = rotate_ang_v;
			AngularAcceleration = 0;
 8009542:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <RotateConst+0x100>)
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
			if(CurrentVelocity[LEFT] > 500)
 800954a:	4b26      	ldr	r3, [pc, #152]	; (80095e4 <RotateConst+0x104>)
 800954c:	edd3 7a00 	vldr	s15, [r3]
 8009550:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80095e8 <RotateConst+0x108>
 8009554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955c:	dc00      	bgt.n	8009560 <RotateConst+0x80>
 800955e:	e009      	b.n	8009574 <RotateConst+0x94>
				printf("回転定速中: %f\r\n", move_angle);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7fe ff29 	bl	80083b8 <__aeabi_f2d>
 8009566:	4603      	mov	r3, r0
 8009568:	460c      	mov	r4, r1
 800956a:	461a      	mov	r2, r3
 800956c:	4623      	mov	r3, r4
 800956e:	481f      	ldr	r0, [pc, #124]	; (80095ec <RotateConst+0x10c>)
 8009570:	f00b fdf6 	bl	8015160 <iprintf>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 8009574:	4b19      	ldr	r3, [pc, #100]	; (80095dc <RotateConst+0xfc>)
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	ed97 7a03 	vldr	s14, [r7, #12]
 800957e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	dcdc      	bgt.n	8009542 <RotateConst+0x62>
 8009588:	e01e      	b.n	80095c8 <RotateConst+0xe8>

		}

	}
	else if (rotate_ang_v < 0)
 800958a:	edd7 7a00 	vldr	s15, [r7]
 800958e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009596:	d517      	bpl.n	80095c8 <RotateConst+0xe8>
	{
		move_angle = -move_angle + Angle;
 8009598:	4b10      	ldr	r3, [pc, #64]	; (80095dc <RotateConst+0xfc>)
 800959a:	ed93 7a00 	vldr	s14, [r3]
 800959e:	edd7 7a03 	vldr	s15, [r7, #12]
 80095a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095a6:	edc7 7a03 	vstr	s15, [r7, #12]
		//printf("定速 負\r\n");
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 80095aa:	e003      	b.n	80095b4 <RotateConst+0xd4>
		{
			//TargetAngularV = rotate_ang_v;

			AngularAcceleration = 0;
 80095ac:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <RotateConst+0x100>)
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
		while( (move_angle < Angle))// &&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <RotateConst+0xfc>)
 80095b6:	edd3 7a00 	vldr	s15, [r3]
 80095ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80095be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	d4f1      	bmi.n	80095ac <RotateConst+0xcc>
		}

	}
	AngularAcceleration = 0;
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <RotateConst+0x100>)
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd90      	pop	{r4, r7, pc}
 80095d8:	40668000 	.word	0x40668000
 80095dc:	20000258 	.word	0x20000258
 80095e0:	2000041c 	.word	0x2000041c
 80095e4:	20000434 	.word	0x20000434
 80095e8:	43fa0000 	.word	0x43fa0000
 80095ec:	080195c4 	.word	0x080195c4
 80095f0:	54442d18 	.word	0x54442d18
 80095f4:	400921fb 	.word	0x400921fb

080095f8 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009602:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8009606:	f04f 0300 	mov.w	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]
	additional_ang_v = rotate_ang_v;// - AngularV;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	60fb      	str	r3, [r7, #12]
//	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
//	int keep_pulse[2] = {
//			TotalPulse[LEFT],
//			TotalPulse[RIGHT]
//	};
	float move_angle = deg * M_PI / 180;
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7fe fed1 	bl	80083b8 <__aeabi_f2d>
 8009616:	a363      	add	r3, pc, #396	; (adr r3, 80097a4 <RotateDecel+0x1ac>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7fe ff24 	bl	8008468 <__aeabi_dmul>
 8009620:	4603      	mov	r3, r0
 8009622:	460c      	mov	r4, r1
 8009624:	4618      	mov	r0, r3
 8009626:	4621      	mov	r1, r4
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	4b52      	ldr	r3, [pc, #328]	; (8009778 <RotateDecel+0x180>)
 800962e:	f7ff f845 	bl	80086bc <__aeabi_ddiv>
 8009632:	4603      	mov	r3, r0
 8009634:	460c      	mov	r4, r1
 8009636:	4618      	mov	r0, r3
 8009638:	4621      	mov	r1, r4
 800963a:	f7ff fa0d 	bl	8008a58 <__aeabi_d2f>
 800963e:	4603      	mov	r3, r0
 8009640:	60bb      	str	r3, [r7, #8]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8009642:	edd7 7a00 	vldr	s15, [r7]
 8009646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800964a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964e:	dd47      	ble.n	80096e0 <RotateDecel+0xe8>
	{
		move_angle += Angle;
 8009650:	4b4a      	ldr	r3, [pc, #296]	; (800977c <RotateDecel+0x184>)
 8009652:	edd3 7a00 	vldr	s15, [r3]
 8009656:	ed97 7a02 	vldr	s14, [r7, #8]
 800965a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965e:	edc7 7a02 	vstr	s15, [r7, #8]

		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 8009662:	e032      	b.n	80096ca <RotateDecel+0xd2>
		{
			AngularAcceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 8009664:	edd7 7a03 	vldr	s15, [r7, #12]
 8009668:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8009780 <RotateDecel+0x188>
 800966c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009670:	edd7 7a03 	vldr	s15, [r7, #12]
 8009674:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009678:	edd7 7a01 	vldr	s15, [r7, #4]
 800967c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009684:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009784 <RotateDecel+0x18c>
 8009688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800968c:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <RotateDecel+0x190>)
 800968e:	edc3 7a00 	vstr	s15, [r3]
			if(CurrentVelocity[LEFT] > 500)
 8009692:	4b3e      	ldr	r3, [pc, #248]	; (800978c <RotateDecel+0x194>)
 8009694:	edd3 7a00 	vldr	s15, [r3]
 8009698:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8009790 <RotateDecel+0x198>
 800969c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	dd09      	ble.n	80096ba <RotateDecel+0xc2>
				printf("回転減速中: %f\r\n", move_angle);
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f7fe fe86 	bl	80083b8 <__aeabi_f2d>
 80096ac:	4603      	mov	r3, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	461a      	mov	r2, r3
 80096b2:	4623      	mov	r3, r4
 80096b4:	4837      	ldr	r0, [pc, #220]	; (8009794 <RotateDecel+0x19c>)
 80096b6:	f00b fd53 	bl	8015160 <iprintf>

			if( AngularV <= 0)
 80096ba:	4b37      	ldr	r3, [pc, #220]	; (8009798 <RotateDecel+0x1a0>)
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c8:	d945      	bls.n	8009756 <RotateDecel+0x15e>
		while( (move_angle > Angle))// &&  (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) )) )
 80096ca:	4b2c      	ldr	r3, [pc, #176]	; (800977c <RotateDecel+0x184>)
 80096cc:	edd3 7a00 	vldr	s15, [r3]
 80096d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80096d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096dc:	dcc2      	bgt.n	8009664 <RotateDecel+0x6c>
 80096de:	e03d      	b.n	800975c <RotateDecel+0x164>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 80096e0:	edd7 7a00 	vldr	s15, [r7]
 80096e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ec:	d536      	bpl.n	800975c <RotateDecel+0x164>
	{
		move_angle = -move_angle + Angle;
 80096ee:	4b23      	ldr	r3, [pc, #140]	; (800977c <RotateDecel+0x184>)
 80096f0:	ed93 7a00 	vldr	s14, [r3]
 80096f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80096f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096fc:	edc7 7a02 	vstr	s15, [r7, #8]
		//printf("減速 負\r\n");
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 8009700:	e01e      	b.n	8009740 <RotateDecel+0x148>
		{
			AngularAcceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 8009702:	edd7 7a03 	vldr	s15, [r7, #12]
 8009706:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009780 <RotateDecel+0x188>
 800970a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800970e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009712:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009716:	edd7 7a01 	vldr	s15, [r7, #4]
 800971a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800971e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009722:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800979c <RotateDecel+0x1a4>
 8009726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800972a:	4b17      	ldr	r3, [pc, #92]	; (8009788 <RotateDecel+0x190>)
 800972c:	edc3 7a00 	vstr	s15, [r3]

			if( AngularV >= 0)
 8009730:	4b19      	ldr	r3, [pc, #100]	; (8009798 <RotateDecel+0x1a0>)
 8009732:	edd3 7a00 	vldr	s15, [r3]
 8009736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973e:	da0c      	bge.n	800975a <RotateDecel+0x162>
		while( (move_angle < Angle) )//&&  (( ( keep_pulse[LEFT]-move_pulse ) < ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( TotalPulse[RIGHT] ) )) )
 8009740:	4b0e      	ldr	r3, [pc, #56]	; (800977c <RotateDecel+0x184>)
 8009742:	edd3 7a00 	vldr	s15, [r3]
 8009746:	ed97 7a02 	vldr	s14, [r7, #8]
 800974a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009752:	d4d6      	bmi.n	8009702 <RotateDecel+0x10a>
 8009754:	e002      	b.n	800975c <RotateDecel+0x164>
				break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <RotateDecel+0x164>
				break;
 800975a:	bf00      	nop
		}

	}
	AngularAcceleration = 0;
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <RotateDecel+0x190>)
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <RotateDecel+0x1a8>)
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
}
 800976c:	bf00      	nop
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	bd90      	pop	{r4, r7, pc}
 8009774:	f3af 8000 	nop.w
 8009778:	40668000 	.word	0x40668000
 800977c:	20000258 	.word	0x20000258
 8009780:	3a83126f 	.word	0x3a83126f
 8009784:	c2800000 	.word	0xc2800000
 8009788:	2000041c 	.word	0x2000041c
 800978c:	20000434 	.word	0x20000434
 8009790:	43fa0000 	.word	0x43fa0000
 8009794:	080195dc 	.word	0x080195dc
 8009798:	20000254 	.word	0x20000254
 800979c:	42800000 	.word	0x42800000
 80097a0:	20000400 	.word	0x20000400
 80097a4:	54442d18 	.word	0x54442d18
 80097a8:	400921fb 	.word	0x400921fb
 80097ac:	00000000 	.word	0x00000000

080097b0 <Rotate>:
void Rotate(float deg, float ang_accel)
{
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80097ba:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 80097be:	4b4a      	ldr	r3, [pc, #296]	; (80098e8 <Rotate+0x138>)
 80097c0:	2203      	movs	r2, #3
 80097c2:	711a      	strb	r2, [r3, #4]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	WallWarn();
 80097c4:	f7ff fc7c 	bl	80090c0 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 80097c8:	f7ff fc86 	bl	80090d8 <ControlWall>
	RotateAccel(deg*30/90, ang_accel);//15
 80097cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80097d0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80097d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097d8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80098ec <Rotate+0x13c>
 80097dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097e0:	edd7 0a00 	vldr	s1, [r7]
 80097e4:	eeb0 0a66 	vmov.f32	s0, s13
 80097e8:	f7ff fdd2 	bl	8009390 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);
	RotateConst(deg*30/90, ang_accel);//25
 80097ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80097f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80097f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80098ec <Rotate+0x13c>
 80097fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009800:	edd7 0a00 	vldr	s1, [r7]
 8009804:	eeb0 0a66 	vmov.f32	s0, s13
 8009808:	f7ff fe6a 	bl	80094e0 <RotateConst>
	RotateDecel(deg*30/90, ang_accel);//50
 800980c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009810:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009818:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80098ec <Rotate+0x13c>
 800981c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009820:	edd7 0a00 	vldr	s1, [r7]
 8009824:	eeb0 0a66 	vmov.f32	s0, s13
 8009828:	f7ff fee6 	bl	80095f8 <RotateDecel>
//			TargetAngularV = ang_accel;
//			printf("deg:負, Angle, AngularV : %f, %f\r\n",Angle, AngularV );
//		}
//
//	}
	WaitStopAndReset();
 800982c:	f7ff fd6c 	bl	8009308 <WaitStopAndReset>
	ControlWall();
 8009830:	f7ff fc52 	bl	80090d8 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009834:	edd7 7a01 	vldr	s15, [r7, #4]
 8009838:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80098f0 <Rotate+0x140>
 800983c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009840:	ee16 0a90 	vmov	r0, s13
 8009844:	f7fe fdb8 	bl	80083b8 <__aeabi_f2d>
 8009848:	a325      	add	r3, pc, #148	; (adr r3, 80098e0 <Rotate+0x130>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7fe fe0b 	bl	8008468 <__aeabi_dmul>
 8009852:	4603      	mov	r3, r0
 8009854:	460c      	mov	r4, r1
 8009856:	4618      	mov	r0, r3
 8009858:	4621      	mov	r1, r4
 800985a:	f7ff f8b5 	bl	80089c8 <__aeabi_d2iz>
 800985e:	4603      	mov	r3, r0
 8009860:	60fb      	str	r3, [r7, #12]
	if(ang_accel < 0)
 8009862:	edd7 7a00 	vldr	s15, [r7]
 8009866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800986a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986e:	d513      	bpl.n	8009898 <Rotate+0xe8>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 8009870:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <Rotate+0x144>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	0fd9      	lsrs	r1, r3, #31
 8009878:	440b      	add	r3, r1
 800987a:	105b      	asrs	r3, r3, #1
 800987c:	425b      	negs	r3, r3
 800987e:	4413      	add	r3, r2
 8009880:	4a1c      	ldr	r2, [pc, #112]	; (80098f4 <Rotate+0x144>)
 8009882:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009884:	4b1b      	ldr	r3, [pc, #108]	; (80098f4 <Rotate+0x144>)
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	0fd9      	lsrs	r1, r3, #31
 800988c:	440b      	add	r3, r1
 800988e:	105b      	asrs	r3, r3, #1
 8009890:	4413      	add	r3, r2
 8009892:	4a18      	ldr	r2, [pc, #96]	; (80098f4 <Rotate+0x144>)
 8009894:	6053      	str	r3, [r2, #4]
 8009896:	e019      	b.n	80098cc <Rotate+0x11c>
	}
	else 	if(ang_accel > 0)
 8009898:	edd7 7a00 	vldr	s15, [r7]
 800989c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a4:	dd12      	ble.n	80098cc <Rotate+0x11c>
	{
		KeepPulse[LEFT] += target_pulse/2;
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <Rotate+0x144>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	0fd9      	lsrs	r1, r3, #31
 80098ae:	440b      	add	r3, r1
 80098b0:	105b      	asrs	r3, r3, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	4a0f      	ldr	r2, [pc, #60]	; (80098f4 <Rotate+0x144>)
 80098b6:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 80098b8:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <Rotate+0x144>)
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	0fd9      	lsrs	r1, r3, #31
 80098c0:	440b      	add	r3, r1
 80098c2:	105b      	asrs	r3, r3, #1
 80098c4:	425b      	negs	r3, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	4a0a      	ldr	r2, [pc, #40]	; (80098f4 <Rotate+0x144>)
 80098ca:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <Rotate+0x144>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	4a08      	ldr	r2, [pc, #32]	; (80098f4 <Rotate+0x144>)
 80098d2:	6093      	str	r3, [r2, #8]

	//printf("回転終了\r\n");
}
 80098d4:	bf00      	nop
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd90      	pop	{r4, r7, pc}
 80098dc:	f3af 8000 	nop.w
 80098e0:	fbd97ce5 	.word	0xfbd97ce5
 80098e4:	40fd5bf5 	.word	0x40fd5bf5
 80098e8:	20000000 	.word	0x20000000
 80098ec:	42b40000 	.word	0x42b40000
 80098f0:	43b40000 	.word	0x43b40000
 80098f4:	20000440 	.word	0x20000440

080098f8 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80098f8:	b5b0      	push	{r4, r5, r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 80098fe:	4b98      	ldr	r3, [pc, #608]	; (8009b60 <SlalomRight+0x268>)
 8009900:	2202      	movs	r2, #2
 8009902:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009904:	f7ff fbe8 	bl	80090d8 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009908:	4b96      	ldr	r3, [pc, #600]	; (8009b64 <SlalomRight+0x26c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 4;         //スラローム前距離
 800990e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8009912:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 8009914:	4b94      	ldr	r3, [pc, #592]	; (8009b68 <SlalomRight+0x270>)
 8009916:	61fb      	str	r3, [r7, #28]
	float alpha_turn = 0.046;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009918:	4b94      	ldr	r3, [pc, #592]	; (8009b6c <SlalomRight+0x274>)
 800991a:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 800991c:	4b94      	ldr	r3, [pc, #592]	; (8009b70 <SlalomRight+0x278>)
 800991e:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009920:	4b94      	ldr	r3, [pc, #592]	; (8009b74 <SlalomRight+0x27c>)
 8009922:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009924:	4b94      	ldr	r3, [pc, #592]	; (8009b78 <SlalomRight+0x280>)
 8009926:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009928:	4b94      	ldr	r3, [pc, #592]	; (8009b7c <SlalomRight+0x284>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800992e:	4b94      	ldr	r3, [pc, #592]	; (8009b80 <SlalomRight+0x288>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b93      	ldr	r3, [pc, #588]	; (8009b80 <SlalomRight+0x288>)
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	4413      	add	r3, r2
 8009938:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800993a:	e00a      	b.n	8009952 <SlalomRight+0x5a>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 800993c:	4b91      	ldr	r3, [pc, #580]	; (8009b84 <SlalomRight+0x28c>)
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009944:	4b90      	ldr	r3, [pc, #576]	; (8009b88 <SlalomRight+0x290>)
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800994c:	4a8f      	ldr	r2, [pc, #572]	; (8009b8c <SlalomRight+0x294>)
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fe fd1e 	bl	8008394 <__aeabi_i2d>
 8009958:	4604      	mov	r4, r0
 800995a:	460d      	mov	r5, r1
 800995c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009960:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009964:	ee17 0a90 	vmov	r0, s15
 8009968:	f7fe fd26 	bl	80083b8 <__aeabi_f2d>
 800996c:	a378      	add	r3, pc, #480	; (adr r3, 8009b50 <SlalomRight+0x258>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7fe fea3 	bl	80086bc <__aeabi_ddiv>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	f7fe fbbd 	bl	80080fc <__adddf3>
 8009982:	4603      	mov	r3, r0
 8009984:	460c      	mov	r4, r1
 8009986:	4625      	mov	r5, r4
 8009988:	461c      	mov	r4, r3
 800998a:	4b7d      	ldr	r3, [pc, #500]	; (8009b80 <SlalomRight+0x288>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4b7c      	ldr	r3, [pc, #496]	; (8009b80 <SlalomRight+0x288>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	4413      	add	r3, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fcfd 	bl	8008394 <__aeabi_i2d>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7fe fff1 	bl	8008988 <__aeabi_dcmpgt>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1c7      	bne.n	800993c <SlalomRight+0x44>

			////printf("直進1\r\n");
	}
	now_angv = AngularV;
 80099ac:	4b73      	ldr	r3, [pc, #460]	; (8009b7c <SlalomRight+0x284>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 80099b2:	4b77      	ldr	r3, [pc, #476]	; (8009b90 <SlalomRight+0x298>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 80099b8:	e005      	b.n	80099c6 <SlalomRight+0xce>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 80099ba:	4a73      	ldr	r2, [pc, #460]	; (8009b88 <SlalomRight+0x290>)
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80099c0:	4a72      	ldr	r2, [pc, #456]	; (8009b8c <SlalomRight+0x294>)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 80099c6:	ed97 7a00 	vldr	s14, [r7]
 80099ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80099ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099d2:	4b6f      	ldr	r3, [pc, #444]	; (8009b90 <SlalomRight+0x298>)
 80099d4:	edd3 7a00 	vldr	s15, [r3]
 80099d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e0:	dceb      	bgt.n	80099ba <SlalomRight+0xc2>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 80099e2:	4b69      	ldr	r3, [pc, #420]	; (8009b88 <SlalomRight+0x290>)
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 80099ea:	4b64      	ldr	r3, [pc, #400]	; (8009b7c <SlalomRight+0x284>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 80099f0:	e006      	b.n	8009a00 <SlalomRight+0x108>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80099f2:	4b64      	ldr	r3, [pc, #400]	; (8009b84 <SlalomRight+0x28c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a63      	ldr	r2, [pc, #396]	; (8009b84 <SlalomRight+0x28c>)
 80099f8:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80099fa:	4a64      	ldr	r2, [pc, #400]	; (8009b8c <SlalomRight+0x294>)
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009a00:	ed97 7a00 	vldr	s14, [r7]
 8009a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a0c:	4b60      	ldr	r3, [pc, #384]	; (8009b90 <SlalomRight+0x298>)
 8009a0e:	edd3 7a00 	vldr	s15, [r3]
 8009a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1a:	dcea      	bgt.n	80099f2 <SlalomRight+0xfa>

			}
#endif
	}

	now_angv = AngularV;
 8009a1c:	4b57      	ldr	r3, [pc, #348]	; (8009b7c <SlalomRight+0x284>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009a22:	e016      	b.n	8009a52 <SlalomRight+0x15a>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009a24:	edd7 7a06 	vldr	s15, [r7, #24]
 8009a28:	eef1 7a67 	vneg.f32	s15, s15
 8009a2c:	4b56      	ldr	r3, [pc, #344]	; (8009b88 <SlalomRight+0x290>)
 8009a2e:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009a32:	4b54      	ldr	r3, [pc, #336]	; (8009b84 <SlalomRight+0x28c>)
 8009a34:	edd3 7a00 	vldr	s15, [r3]
 8009a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a40:	d504      	bpl.n	8009a4c <SlalomRight+0x154>
			{
				TargetAngularV = 0;
 8009a42:	4b50      	ldr	r3, [pc, #320]	; (8009b84 <SlalomRight+0x28c>)
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
				break;
 8009a4a:	e010      	b.n	8009a6e <SlalomRight+0x176>
			}
			TargetVelocity[BODY] = v_turn;
 8009a4c:	4a4f      	ldr	r2, [pc, #316]	; (8009b8c <SlalomRight+0x294>)
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009a52:	ed97 7a00 	vldr	s14, [r7]
 8009a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a5e:	4b4c      	ldr	r3, [pc, #304]	; (8009b90 <SlalomRight+0x298>)
 8009a60:	edd3 7a00 	vldr	s15, [r3]
 8009a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6c:	dcda      	bgt.n	8009a24 <SlalomRight+0x12c>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009a6e:	4b46      	ldr	r3, [pc, #280]	; (8009b88 <SlalomRight+0x290>)
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009a76:	4b43      	ldr	r3, [pc, #268]	; (8009b84 <SlalomRight+0x28c>)
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009a7e:	4b45      	ldr	r3, [pc, #276]	; (8009b94 <SlalomRight+0x29c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a45      	ldr	r2, [pc, #276]	; (8009b98 <SlalomRight+0x2a0>)
 8009a84:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009a86:	4b3e      	ldr	r3, [pc, #248]	; (8009b80 <SlalomRight+0x288>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	4b3d      	ldr	r3, [pc, #244]	; (8009b80 <SlalomRight+0x288>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009a92:	e014      	b.n	8009abe <SlalomRight+0x1c6>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009a94:	4b3b      	ldr	r3, [pc, #236]	; (8009b84 <SlalomRight+0x28c>)
 8009a96:	f04f 0200 	mov.w	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009a9c:	4a3b      	ldr	r2, [pc, #236]	; (8009b8c <SlalomRight+0x294>)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009aa2:	4b3d      	ldr	r3, [pc, #244]	; (8009b98 <SlalomRight+0x2a0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d109      	bne.n	8009abe <SlalomRight+0x1c6>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009aaa:	f001 fcd9 	bl	800b460 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009aae:	2201      	movs	r2, #1
 8009ab0:	2109      	movs	r1, #9
 8009ab2:	2006      	movs	r0, #6
 8009ab4:	f001 fe46 	bl	800b744 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009ab8:	4b37      	ldr	r3, [pc, #220]	; (8009b98 <SlalomRight+0x2a0>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fe fc68 	bl	8008394 <__aeabi_i2d>
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	460d      	mov	r5, r1
 8009ac8:	edd7 7a07 	vldr	s15, [r7, #28]
 8009acc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ad0:	ee17 0a90 	vmov	r0, s15
 8009ad4:	f7fe fc70 	bl	80083b8 <__aeabi_f2d>
 8009ad8:	a31d      	add	r3, pc, #116	; (adr r3, 8009b50 <SlalomRight+0x258>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7fe fded 	bl	80086bc <__aeabi_ddiv>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7fe fb07 	bl	80080fc <__adddf3>
 8009aee:	4603      	mov	r3, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	4625      	mov	r5, r4
 8009af4:	461c      	mov	r4, r3
 8009af6:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <SlalomRight+0x288>)
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b21      	ldr	r3, [pc, #132]	; (8009b80 <SlalomRight+0x288>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	4413      	add	r3, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe fc47 	bl	8008394 <__aeabi_i2d>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7fe ff3b 	bl	8008988 <__aeabi_dcmpgt>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1bd      	bne.n	8009a94 <SlalomRight+0x19c>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009b18:	4b20      	ldr	r3, [pc, #128]	; (8009b9c <SlalomRight+0x2a4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fc4b 	bl	80083b8 <__aeabi_f2d>
 8009b22:	a30d      	add	r3, pc, #52	; (adr r3, 8009b58 <SlalomRight+0x260>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f7fe fae8 	bl	80080fc <__adddf3>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4618      	mov	r0, r3
 8009b32:	4621      	mov	r1, r4
 8009b34:	f7fe ff90 	bl	8008a58 <__aeabi_d2f>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <SlalomRight+0x2a4>)
 8009b3c:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009b3e:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <SlalomRight+0x288>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	4a17      	ldr	r2, [pc, #92]	; (8009ba0 <SlalomRight+0x2a8>)
 8009b44:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009b46:	bf00      	nop
 8009b48:	3728      	adds	r7, #40	; 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	367915b2 	.word	0x367915b2
 8009b54:	3f502de0 	.word	0x3f502de0
 8009b58:	54442d18 	.word	0x54442d18
 8009b5c:	3ff921fb 	.word	0x3ff921fb
 8009b60:	20000000 	.word	0x20000000
 8009b64:	2000065c 	.word	0x2000065c
 8009b68:	40c00000 	.word	0x40c00000
 8009b6c:	3d3c6a7f 	.word	0x3d3c6a7f
 8009b70:	3f060a92 	.word	0x3f060a92
 8009b74:	3f860a92 	.word	0x3f860a92
 8009b78:	3fc90fdb 	.word	0x3fc90fdb
 8009b7c:	20000254 	.word	0x20000254
 8009b80:	20000428 	.word	0x20000428
 8009b84:	20000400 	.word	0x20000400
 8009b88:	2000041c 	.word	0x2000041c
 8009b8c:	200003f0 	.word	0x200003f0
 8009b90:	20000258 	.word	0x20000258
 8009b94:	200003e8 	.word	0x200003e8
 8009b98:	200003ec 	.word	0x200003ec
 8009b9c:	20000424 	.word	0x20000424
 8009ba0:	20000440 	.word	0x20000440
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009ba8:	b5b0      	push	{r4, r5, r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009bae:	4b92      	ldr	r3, [pc, #584]	; (8009df8 <SlalomLeft+0x250>)
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009bb4:	f7ff fa90 	bl	80090d8 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009bb8:	4b90      	ldr	r3, [pc, #576]	; (8009dfc <SlalomLeft+0x254>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = 4;         //スラローム前距離
 8009bbe:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8009bc2:	623b      	str	r3, [r7, #32]
	float fol = 6;         //スラローム後距離
 8009bc4:	4b8e      	ldr	r3, [pc, #568]	; (8009e00 <SlalomLeft+0x258>)
 8009bc6:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -0.046;//046;//125;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009bc8:	4b8e      	ldr	r3, [pc, #568]	; (8009e04 <SlalomLeft+0x25c>)
 8009bca:	61bb      	str	r3, [r7, #24]
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009bcc:	4b8e      	ldr	r3, [pc, #568]	; (8009e08 <SlalomLeft+0x260>)
 8009bce:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009bd0:	4b8e      	ldr	r3, [pc, #568]	; (8009e0c <SlalomLeft+0x264>)
 8009bd2:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009bd4:	4b8e      	ldr	r3, [pc, #568]	; (8009e10 <SlalomLeft+0x268>)
 8009bd6:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009bd8:	4b8e      	ldr	r3, [pc, #568]	; (8009e14 <SlalomLeft+0x26c>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4b8d      	ldr	r3, [pc, #564]	; (8009e14 <SlalomLeft+0x26c>)
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009be4:	e00a      	b.n	8009bfc <SlalomLeft+0x54>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009be6:	4b8c      	ldr	r3, [pc, #560]	; (8009e18 <SlalomLeft+0x270>)
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009bee:	4b8b      	ldr	r3, [pc, #556]	; (8009e1c <SlalomLeft+0x274>)
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009bf6:	4a8a      	ldr	r2, [pc, #552]	; (8009e20 <SlalomLeft+0x278>)
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009bfc:	68b8      	ldr	r0, [r7, #8]
 8009bfe:	f7fe fbc9 	bl	8008394 <__aeabi_i2d>
 8009c02:	4604      	mov	r4, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c0e:	ee17 0a90 	vmov	r0, s15
 8009c12:	f7fe fbd1 	bl	80083b8 <__aeabi_f2d>
 8009c16:	a374      	add	r3, pc, #464	; (adr r3, 8009de8 <SlalomLeft+0x240>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7fe fd4e 	bl	80086bc <__aeabi_ddiv>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7fe fa68 	bl	80080fc <__adddf3>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4625      	mov	r5, r4
 8009c32:	461c      	mov	r4, r3
 8009c34:	4b77      	ldr	r3, [pc, #476]	; (8009e14 <SlalomLeft+0x26c>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4b76      	ldr	r3, [pc, #472]	; (8009e14 <SlalomLeft+0x26c>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fba8 	bl	8008394 <__aeabi_i2d>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4620      	mov	r0, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f7fe fe9c 	bl	8008988 <__aeabi_dcmpgt>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1c7      	bne.n	8009be6 <SlalomLeft+0x3e>

			////printf("直進1\r\n");
	}


	float start_angle = Angle;
 8009c56:	4b73      	ldr	r3, [pc, #460]	; (8009e24 <SlalomLeft+0x27c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009c5c:	e005      	b.n	8009c6a <SlalomLeft+0xc2>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			AngularAcceleration = alpha_turn;
 8009c5e:	4a6f      	ldr	r2, [pc, #444]	; (8009e1c <SlalomLeft+0x274>)
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009c64:	4a6e      	ldr	r2, [pc, #440]	; (8009e20 <SlalomLeft+0x278>)
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009c6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c76:	4b6b      	ldr	r3, [pc, #428]	; (8009e24 <SlalomLeft+0x27c>)
 8009c78:	edd3 7a00 	vldr	s15, [r3]
 8009c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c84:	d4eb      	bmi.n	8009c5e <SlalomLeft+0xb6>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009c86:	4b65      	ldr	r3, [pc, #404]	; (8009e1c <SlalomLeft+0x274>)
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009c8e:	e006      	b.n	8009c9e <SlalomLeft+0xf6>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009c90:	4b61      	ldr	r3, [pc, #388]	; (8009e18 <SlalomLeft+0x270>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a60      	ldr	r2, [pc, #384]	; (8009e18 <SlalomLeft+0x270>)
 8009c96:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009c98:	4a61      	ldr	r2, [pc, #388]	; (8009e20 <SlalomLeft+0x278>)
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009c9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009caa:	4b5e      	ldr	r3, [pc, #376]	; (8009e24 <SlalomLeft+0x27c>)
 8009cac:	edd3 7a00 	vldr	s15, [r3]
 8009cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb8:	d4ea      	bmi.n	8009c90 <SlalomLeft+0xe8>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009cba:	e016      	b.n	8009cea <SlalomLeft+0x142>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			AngularAcceleration = -alpha_turn;
 8009cbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cc0:	eef1 7a67 	vneg.f32	s15, s15
 8009cc4:	4b55      	ldr	r3, [pc, #340]	; (8009e1c <SlalomLeft+0x274>)
 8009cc6:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009cca:	4b53      	ldr	r3, [pc, #332]	; (8009e18 <SlalomLeft+0x270>)
 8009ccc:	edd3 7a00 	vldr	s15, [r3]
 8009cd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd8:	dd04      	ble.n	8009ce4 <SlalomLeft+0x13c>
			{
				TargetAngularV = 0;
 8009cda:	4b4f      	ldr	r3, [pc, #316]	; (8009e18 <SlalomLeft+0x270>)
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
				break;
 8009ce2:	e010      	b.n	8009d06 <SlalomLeft+0x15e>
			}
			TargetVelocity[BODY] = v_turn;
 8009ce4:	4a4e      	ldr	r2, [pc, #312]	; (8009e20 <SlalomLeft+0x278>)
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009cea:	ed97 7a01 	vldr	s14, [r7, #4]
 8009cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cf6:	4b4b      	ldr	r3, [pc, #300]	; (8009e24 <SlalomLeft+0x27c>)
 8009cf8:	edd3 7a00 	vldr	s15, [r3]
 8009cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	d4da      	bmi.n	8009cbc <SlalomLeft+0x114>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009d06:	4b45      	ldr	r3, [pc, #276]	; (8009e1c <SlalomLeft+0x274>)
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009d0e:	4b42      	ldr	r3, [pc, #264]	; (8009e18 <SlalomLeft+0x270>)
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009d16:	4b44      	ldr	r3, [pc, #272]	; (8009e28 <SlalomLeft+0x280>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a44      	ldr	r2, [pc, #272]	; (8009e2c <SlalomLeft+0x284>)
 8009d1c:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009d1e:	4b3d      	ldr	r3, [pc, #244]	; (8009e14 <SlalomLeft+0x26c>)
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	4b3c      	ldr	r3, [pc, #240]	; (8009e14 <SlalomLeft+0x26c>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	4413      	add	r3, r2
 8009d28:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009d2a:	e014      	b.n	8009d56 <SlalomLeft+0x1ae>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009d2c:	4b3a      	ldr	r3, [pc, #232]	; (8009e18 <SlalomLeft+0x270>)
 8009d2e:	f04f 0200 	mov.w	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009d34:	4a3a      	ldr	r2, [pc, #232]	; (8009e20 <SlalomLeft+0x278>)
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 8009d3a:	4b3c      	ldr	r3, [pc, #240]	; (8009e2c <SlalomLeft+0x284>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <SlalomLeft+0x1ae>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009d42:	f001 fb8d 	bl	800b460 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009d46:	2201      	movs	r2, #1
 8009d48:	2109      	movs	r1, #9
 8009d4a:	2006      	movs	r0, #6
 8009d4c:	f001 fcfa 	bl	800b744 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009d50:	4b36      	ldr	r3, [pc, #216]	; (8009e2c <SlalomLeft+0x284>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009d56:	68b8      	ldr	r0, [r7, #8]
 8009d58:	f7fe fb1c 	bl	8008394 <__aeabi_i2d>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d68:	ee17 0a90 	vmov	r0, s15
 8009d6c:	f7fe fb24 	bl	80083b8 <__aeabi_f2d>
 8009d70:	a31d      	add	r3, pc, #116	; (adr r3, 8009de8 <SlalomLeft+0x240>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7fe fca1 	bl	80086bc <__aeabi_ddiv>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7fe f9bb 	bl	80080fc <__adddf3>
 8009d86:	4603      	mov	r3, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4625      	mov	r5, r4
 8009d8c:	461c      	mov	r4, r3
 8009d8e:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <SlalomLeft+0x26c>)
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4b20      	ldr	r3, [pc, #128]	; (8009e14 <SlalomLeft+0x26c>)
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4413      	add	r3, r2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fafb 	bl	8008394 <__aeabi_i2d>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7fe fdef 	bl	8008988 <__aeabi_dcmpgt>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1bd      	bne.n	8009d2c <SlalomLeft+0x184>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009db0:	4b1f      	ldr	r3, [pc, #124]	; (8009e30 <SlalomLeft+0x288>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe faff 	bl	80083b8 <__aeabi_f2d>
 8009dba:	a30d      	add	r3, pc, #52	; (adr r3, 8009df0 <SlalomLeft+0x248>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f7fe f99a 	bl	80080f8 <__aeabi_dsub>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f7fe fe44 	bl	8008a58 <__aeabi_d2f>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <SlalomLeft+0x288>)
 8009dd4:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <SlalomLeft+0x26c>)
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <SlalomLeft+0x28c>)
 8009ddc:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009dde:	bf00      	nop
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bdb0      	pop	{r4, r5, r7, pc}
 8009de6:	bf00      	nop
 8009de8:	367915b2 	.word	0x367915b2
 8009dec:	3f502de0 	.word	0x3f502de0
 8009df0:	54442d18 	.word	0x54442d18
 8009df4:	3ff921fb 	.word	0x3ff921fb
 8009df8:	20000000 	.word	0x20000000
 8009dfc:	2000065c 	.word	0x2000065c
 8009e00:	40c00000 	.word	0x40c00000
 8009e04:	bd3c6a7f 	.word	0xbd3c6a7f
 8009e08:	3f060a92 	.word	0x3f060a92
 8009e0c:	3f860a92 	.word	0x3f860a92
 8009e10:	3fc90fdb 	.word	0x3fc90fdb
 8009e14:	20000428 	.word	0x20000428
 8009e18:	20000400 	.word	0x20000400
 8009e1c:	2000041c 	.word	0x2000041c
 8009e20:	200003f0 	.word	0x200003f0
 8009e24:	20000258 	.word	0x20000258
 8009e28:	200003e8 	.word	0x200003e8
 8009e2c:	200003ec 	.word	0x200003ec
 8009e30:	20000424 	.word	0x20000424
 8009e34:	20000440 	.word	0x20000440

08009e38 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009e38:	b5b0      	push	{r4, r5, r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009e42:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 8009e46:	4b56      	ldr	r3, [pc, #344]	; (8009fa0 <Accel+0x168>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009e4c:	f7ff f944 	bl	80090d8 <ControlWall>
	TargetAngularV = 0;
 8009e50:	4b54      	ldr	r3, [pc, #336]	; (8009fa4 <Accel+0x16c>)
 8009e52:	f04f 0200 	mov.w	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009e5e:	4b52      	ldr	r3, [pc, #328]	; (8009fa8 <Accel+0x170>)
 8009e60:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e64:	ed97 7a00 	vldr	s14, [r7]
 8009e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e6c:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009fac <Accel+0x174>
 8009e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e90:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <Accel+0x178>)
 8009e92:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 8009e96:	f7ff f913 	bl	80090c0 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ea2:	ee17 0a90 	vmov	r0, s15
 8009ea6:	f7fe fa87 	bl	80083b8 <__aeabi_f2d>
 8009eaa:	a339      	add	r3, pc, #228	; (adr r3, 8009f90 <Accel+0x158>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7fe fc04 	bl	80086bc <__aeabi_ddiv>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f7fe fd84 	bl	80089c8 <__aeabi_d2iz>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	60bb      	str	r3, [r7, #8]

	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 8009ec4:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <Accel+0x17c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a3b      	ldr	r2, [pc, #236]	; (8009fb8 <Accel+0x180>)
 8009eca:	6013      	str	r3, [r2, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009ecc:	e035      	b.n	8009f3a <Accel+0x102>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009ece:	4b3b      	ldr	r3, [pc, #236]	; (8009fbc <Accel+0x184>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fa5e 	bl	8008394 <__aeabi_i2d>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	460d      	mov	r5, r1
 8009edc:	68b8      	ldr	r0, [r7, #8]
 8009ede:	f7fe fa59 	bl	8008394 <__aeabi_i2d>
 8009ee2:	a32d      	add	r3, pc, #180	; (adr r3, 8009f98 <Accel+0x160>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7fe fabe 	bl	8008468 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	f7fe f902 	bl	80080fc <__adddf3>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	4625      	mov	r5, r4
 8009efe:	461c      	mov	r4, r3
 8009f00:	4b2f      	ldr	r3, [pc, #188]	; (8009fc0 <Accel+0x188>)
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fa45 	bl	8008394 <__aeabi_i2d>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7fe fd1b 	bl	800894c <__aeabi_dcmplt>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d100      	bne.n	8009f1e <Accel+0xe6>
 8009f1c:	e00d      	b.n	8009f3a <Accel+0x102>
 8009f1e:	4b26      	ldr	r3, [pc, #152]	; (8009fb8 <Accel+0x180>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <Accel+0x102>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009f26:	f001 fa9b 	bl	800b460 <wall_set>
			//計算して
			make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2109      	movs	r1, #9
 8009f2e:	2006      	movs	r0, #6
 8009f30:	f001 fc08 	bl	800b744 <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 8009f34:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <Accel+0x180>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009f3a:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <Accel+0x184>)
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	441a      	add	r2, r3
 8009f42:	4b1f      	ldr	r3, [pc, #124]	; (8009fc0 <Accel+0x188>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	dcc1      	bgt.n	8009ece <Accel+0x96>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8009f4a:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <Accel+0x178>)
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
	//壁読んで、

	KeepPulse[BODY] += target_pulse;
 8009f52:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <Accel+0x184>)
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4413      	add	r3, r2
 8009f5a:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <Accel+0x184>)
 8009f5c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009f5e:	4b17      	ldr	r3, [pc, #92]	; (8009fbc <Accel+0x184>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	0fd9      	lsrs	r1, r3, #31
 8009f66:	440b      	add	r3, r1
 8009f68:	105b      	asrs	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	4a13      	ldr	r2, [pc, #76]	; (8009fbc <Accel+0x184>)
 8009f6e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <Accel+0x184>)
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	0fd9      	lsrs	r1, r3, #31
 8009f78:	440b      	add	r3, r1
 8009f7a:	105b      	asrs	r3, r3, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	4a0f      	ldr	r2, [pc, #60]	; (8009fbc <Accel+0x184>)
 8009f80:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
 8009f90:	367915b2 	.word	0x367915b2
 8009f94:	3f502de0 	.word	0x3f502de0
 8009f98:	9999999a 	.word	0x9999999a
 8009f9c:	3fe99999 	.word	0x3fe99999
 8009fa0:	20000000 	.word	0x20000000
 8009fa4:	20000400 	.word	0x20000400
 8009fa8:	20000434 	.word	0x20000434
 8009fac:	3a83126f 	.word	0x3a83126f
 8009fb0:	20000420 	.word	0x20000420
 8009fb4:	200003e8 	.word	0x200003e8
 8009fb8:	200003ec 	.word	0x200003ec
 8009fbc:	20000440 	.word	0x20000440
 8009fc0:	20000428 	.word	0x20000428
 8009fc4:	00000000 	.word	0x00000000

08009fc8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8009fd2:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 8009fd6:	4b56      	ldr	r3, [pc, #344]	; (800a130 <Decel+0x168>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	711a      	strb	r2, [r3, #4]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 8009fe2:	4b54      	ldr	r3, [pc, #336]	; (800a134 <Decel+0x16c>)
 8009fe4:	ed93 7a02 	vldr	s14, [r3, #8]
 8009fe8:	edd7 7a00 	vldr	s15, [r7]
 8009fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff0:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ff8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800a138 <Decel+0x170>
 8009ffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a000:	edd7 7a03 	vldr	s15, [r7, #12]
 800a004:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a008:	edd7 7a01 	vldr	s15, [r7, #4]
 800a00c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a014:	eef1 7a67 	vneg.f32	s15, s15
 800a018:	4b48      	ldr	r3, [pc, #288]	; (800a13c <Decel+0x174>)
 800a01a:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a01e:	f7ff f843 	bl	80090a8 <WallSafe>
	ControlWall();
 800a022:	f7ff f859 	bl	80090d8 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a026:	edd7 7a01 	vldr	s15, [r7, #4]
 800a02a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a02e:	ee17 0a90 	vmov	r0, s15
 800a032:	f7fe f9c1 	bl	80083b8 <__aeabi_f2d>
 800a036:	a33c      	add	r3, pc, #240	; (adr r3, 800a128 <Decel+0x160>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f7fe fb3e 	bl	80086bc <__aeabi_ddiv>
 800a040:	4603      	mov	r3, r0
 800a042:	460c      	mov	r4, r1
 800a044:	4618      	mov	r0, r3
 800a046:	4621      	mov	r1, r4
 800a048:	f7fe fcbe 	bl	80089c8 <__aeabi_d2iz>
 800a04c:	4603      	mov	r3, r0
 800a04e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a050:	e035      	b.n	800a0be <Decel+0xf6>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a052:	4b3b      	ldr	r3, [pc, #236]	; (800a140 <Decel+0x178>)
 800a054:	edd3 7a02 	vldr	s15, [r3, #8]
 800a058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a060:	d810      	bhi.n	800a084 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <Decel+0x178>)
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a06a:	4b34      	ldr	r3, [pc, #208]	; (800a13c <Decel+0x174>)
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a072:	4b34      	ldr	r3, [pc, #208]	; (800a144 <Decel+0x17c>)
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a07a:	4b33      	ldr	r3, [pc, #204]	; (800a148 <Decel+0x180>)
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
			break;
 800a082:	e033      	b.n	800a0ec <Decel+0x124>
		}
		if(KeepPulse[BODY] + (target_pulse/2) < TotalPulse[BODY] )
 800a084:	4b31      	ldr	r3, [pc, #196]	; (800a14c <Decel+0x184>)
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	0fd9      	lsrs	r1, r3, #31
 800a08c:	440b      	add	r3, r1
 800a08e:	105b      	asrs	r3, r3, #1
 800a090:	441a      	add	r2, r3
 800a092:	4b2f      	ldr	r3, [pc, #188]	; (800a150 <Decel+0x188>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	429a      	cmp	r2, r3
 800a098:	da11      	bge.n	800a0be <Decel+0xf6>
		{
			WallWarn();
 800a09a:	f7ff f811 	bl	80090c0 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	2002      	movs	r0, #2
 800a0a2:	f003 f889 	bl	800d1b8 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	2003      	movs	r0, #3
 800a0aa:	f003 f885 	bl	800d1b8 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	f003 f881 	bl	800d1b8 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f003 f87d 	bl	800d1b8 <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3600) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a0be:	4b25      	ldr	r3, [pc, #148]	; (800a154 <Decel+0x18c>)
 800a0c0:	ed93 7a03 	vldr	s14, [r3, #12]
 800a0c4:	4b23      	ldr	r3, [pc, #140]	; (800a154 <Decel+0x18c>)
 800a0c6:	edd3 7a00 	vldr	s15, [r3]
 800a0ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a158 <Decel+0x190>
 800a0d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0da:	d507      	bpl.n	800a0ec <Decel+0x124>
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <Decel+0x184>)
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	441a      	add	r2, r3
 800a0e4:	4b1a      	ldr	r3, [pc, #104]	; (800a150 <Decel+0x188>)
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	dcb2      	bgt.n	800a052 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a0ec:	f7ff f90c 	bl	8009308 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a0f0:	4b16      	ldr	r3, [pc, #88]	; (800a14c <Decel+0x184>)
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	4a14      	ldr	r2, [pc, #80]	; (800a14c <Decel+0x184>)
 800a0fa:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a0fc:	4b13      	ldr	r3, [pc, #76]	; (800a14c <Decel+0x184>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	0fd9      	lsrs	r1, r3, #31
 800a104:	440b      	add	r3, r1
 800a106:	105b      	asrs	r3, r3, #1
 800a108:	4413      	add	r3, r2
 800a10a:	4a10      	ldr	r2, [pc, #64]	; (800a14c <Decel+0x184>)
 800a10c:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <Decel+0x184>)
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	0fd9      	lsrs	r1, r3, #31
 800a116:	440b      	add	r3, r1
 800a118:	105b      	asrs	r3, r3, #1
 800a11a:	4413      	add	r3, r2
 800a11c:	4a0b      	ldr	r2, [pc, #44]	; (800a14c <Decel+0x184>)
 800a11e:	6053      	str	r3, [r2, #4]


}
 800a120:	bf00      	nop
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	bd90      	pop	{r4, r7, pc}
 800a128:	367915b2 	.word	0x367915b2
 800a12c:	3f502de0 	.word	0x3f502de0
 800a130:	20000000 	.word	0x20000000
 800a134:	20000434 	.word	0x20000434
 800a138:	3a83126f 	.word	0x3a83126f
 800a13c:	20000420 	.word	0x20000420
 800a140:	200003f0 	.word	0x200003f0
 800a144:	20000400 	.word	0x20000400
 800a148:	2000041c 	.word	0x2000041c
 800a14c:	20000440 	.word	0x20000440
 800a150:	20000428 	.word	0x20000428
 800a154:	2000044c 	.word	0x2000044c
 800a158:	45610000 	.word	0x45610000
 800a15c:	00000000 	.word	0x00000000

0800a160 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe f911 	bl	8008394 <__aeabi_i2d>
 800a172:	a32b      	add	r3, pc, #172	; (adr r3, 800a220 <Calib+0xc0>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7fe faa0 	bl	80086bc <__aeabi_ddiv>
 800a17c:	4603      	mov	r3, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	4618      	mov	r0, r3
 800a182:	4621      	mov	r1, r4
 800a184:	f7fe fc20 	bl	80089c8 <__aeabi_d2iz>
 800a188:	4603      	mov	r3, r0
 800a18a:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd15      	ble.n	800a1be <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a192:	e006      	b.n	800a1a2 <Calib+0x42>
		{
			Acceleration = 0;
 800a194:	4b1c      	ldr	r3, [pc, #112]	; (800a208 <Calib+0xa8>)
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <Calib+0xac>)
 800a19e:	4a1c      	ldr	r2, [pc, #112]	; (800a210 <Calib+0xb0>)
 800a1a0:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a1a2:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <Calib+0xb4>)
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	441a      	add	r2, r3
 800a1aa:	4b1b      	ldr	r3, [pc, #108]	; (800a218 <Calib+0xb8>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	dcf0      	bgt.n	800a194 <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <Calib+0xb4>)
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4a16      	ldr	r2, [pc, #88]	; (800a214 <Calib+0xb4>)
 800a1bc:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	da15      	bge.n	800a1f0 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a1c4:	e006      	b.n	800a1d4 <Calib+0x74>
		{
			Acceleration = 0;
 800a1c6:	4b10      	ldr	r3, [pc, #64]	; (800a208 <Calib+0xa8>)
 800a1c8:	f04f 0200 	mov.w	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -70;
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <Calib+0xac>)
 800a1d0:	4a12      	ldr	r2, [pc, #72]	; (800a21c <Calib+0xbc>)
 800a1d2:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a1d4:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <Calib+0xb4>)
 800a1d6:	689a      	ldr	r2, [r3, #8]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	441a      	add	r2, r3
 800a1dc:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <Calib+0xb8>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	dbf0      	blt.n	800a1c6 <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <Calib+0xb4>)
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4a09      	ldr	r2, [pc, #36]	; (800a214 <Calib+0xb4>)
 800a1ee:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <Calib+0xac>)
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a1f8:	4b03      	ldr	r3, [pc, #12]	; (800a208 <Calib+0xa8>)
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	bd90      	pop	{r4, r7, pc}
 800a208:	20000420 	.word	0x20000420
 800a20c:	200003f0 	.word	0x200003f0
 800a210:	428c0000 	.word	0x428c0000
 800a214:	20000440 	.word	0x20000440
 800a218:	20000428 	.word	0x20000428
 800a21c:	c28c0000 	.word	0xc28c0000
 800a220:	367915b2 	.word	0x367915b2
 800a224:	3f502de0 	.word	0x3f502de0

0800a228 <Compensate>:
void Compensate()
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <Compensate+0x20>)
 800a22e:	2206      	movs	r2, #6
 800a230:	711a      	strb	r2, [r3, #4]
	//前壁補正
	TargetPhoto[FL];

#else
	//バック補正
	ControlWall();
 800a232:	f7fe ff51 	bl	80090d8 <ControlWall>
	Calib(-50);
 800a236:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a23a:	f7ff ff91 	bl	800a160 <Calib>
	HAL_Delay(250);
 800a23e:	20fa      	movs	r0, #250	; 0xfa
 800a240:	f005 f938 	bl	800f4b4 <HAL_Delay>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a244:	bf00      	nop
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000000 	.word	0x20000000
 800a24c:	00000000 	.word	0x00000000

0800a250 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	ed87 0a03 	vstr	s0, [r7, #12]
 800a25a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a25e:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800a262:	edd7 7a03 	vldr	s15, [r7, #12]
 800a266:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a26a:	ee17 0a90 	vmov	r0, s15
 800a26e:	f7fe f8a3 	bl	80083b8 <__aeabi_f2d>
 800a272:	a377      	add	r3, pc, #476	; (adr r3, 800a450 <GoStraight+0x200>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7fe fa20 	bl	80086bc <__aeabi_ddiv>
 800a27c:	4603      	mov	r3, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	4618      	mov	r0, r3
 800a282:	4621      	mov	r1, r4
 800a284:	f7fe fba0 	bl	80089c8 <__aeabi_d2iz>
 800a288:	4603      	mov	r3, r0
 800a28a:	617b      	str	r3, [r7, #20]

	if(accel != 0) //加速するとき
 800a28c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a290:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a298:	d022      	beq.n	800a2e0 <GoStraight+0x90>
	{
		WallWarn();
 800a29a:	f7fe ff11 	bl	80090c0 <WallWarn>
		ControlWall();
 800a29e:	f7fe ff1b 	bl	80090d8 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800a2a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a2aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a2ae:	ed97 7a02 	vldr	s14, [r7, #8]
 800a2b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ba:	eef0 0a67 	vmov.f32	s1, s15
 800a2be:	eeb0 0a66 	vmov.f32	s0, s13
 800a2c2:	f7ff fdb9 	bl	8009e38 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800a2c6:	bf00      	nop
 800a2c8:	4b5b      	ldr	r3, [pc, #364]	; (800a438 <GoStraight+0x1e8>)
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	0fd9      	lsrs	r1, r3, #31
 800a2d0:	440b      	add	r3, r1
 800a2d2:	105b      	asrs	r3, r3, #1
 800a2d4:	441a      	add	r2, r3
 800a2d6:	4b59      	ldr	r3, [pc, #356]	; (800a43c <GoStraight+0x1ec>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	dcf4      	bgt.n	800a2c8 <GoStraight+0x78>
 800a2de:	e082      	b.n	800a3e6 <GoStraight+0x196>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800a2e0:	4b57      	ldr	r3, [pc, #348]	; (800a440 <GoStraight+0x1f0>)
 800a2e2:	2205      	movs	r2, #5
 800a2e4:	711a      	strb	r2, [r3, #4]
		WallSafe();
 800a2e6:	f7fe fedf 	bl	80090a8 <WallSafe>
		ControlWall();
 800a2ea:	f7fe fef5 	bl	80090d8 <ControlWall>
		Calc = SearchOrFast;
 800a2ee:	4b55      	ldr	r3, [pc, #340]	; (800a444 <GoStraight+0x1f4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a55      	ldr	r2, [pc, #340]	; (800a448 <GoStraight+0x1f8>)
 800a2f4:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a2f6:	e06e      	b.n	800a3d6 <GoStraight+0x186>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a2f8:	4b4f      	ldr	r3, [pc, #316]	; (800a438 <GoStraight+0x1e8>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe f849 	bl	8008394 <__aeabi_i2d>
 800a302:	4604      	mov	r4, r0
 800a304:	460d      	mov	r5, r1
 800a306:	6978      	ldr	r0, [r7, #20]
 800a308:	f7fe f844 	bl	8008394 <__aeabi_i2d>
 800a30c:	a346      	add	r3, pc, #280	; (adr r3, 800a428 <GoStraight+0x1d8>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7fe f8a9 	bl	8008468 <__aeabi_dmul>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4620      	mov	r0, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7fd feed 	bl	80080fc <__adddf3>
 800a322:	4603      	mov	r3, r0
 800a324:	460c      	mov	r4, r1
 800a326:	4625      	mov	r5, r4
 800a328:	461c      	mov	r4, r3
 800a32a:	4b44      	ldr	r3, [pc, #272]	; (800a43c <GoStraight+0x1ec>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe f830 	bl	8008394 <__aeabi_i2d>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4620      	mov	r0, r4
 800a33a:	4629      	mov	r1, r5
 800a33c:	f7fe fb06 	bl	800894c <__aeabi_dcmplt>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d011      	beq.n	800a36a <GoStraight+0x11a>
			{
				WallWarn();
 800a346:	f7fe febb 	bl	80090c0 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800a34a:	2100      	movs	r1, #0
 800a34c:	2002      	movs	r0, #2
 800a34e:	f002 ff33 	bl	800d1b8 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800a352:	2100      	movs	r1, #0
 800a354:	2003      	movs	r0, #3
 800a356:	f002 ff2f 	bl	800d1b8 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800a35a:	2100      	movs	r1, #0
 800a35c:	2001      	movs	r0, #1
 800a35e:	f002 ff2b 	bl	800d1b8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800a362:	2101      	movs	r1, #1
 800a364:	2000      	movs	r0, #0
 800a366:	f002 ff27 	bl	800d1b8 <PIDChangeFlag>
			}
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a36a:	4b33      	ldr	r3, [pc, #204]	; (800a438 <GoStraight+0x1e8>)
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe f810 	bl	8008394 <__aeabi_i2d>
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	6978      	ldr	r0, [r7, #20]
 800a37a:	f7fe f80b 	bl	8008394 <__aeabi_i2d>
 800a37e:	a32c      	add	r3, pc, #176	; (adr r3, 800a430 <GoStraight+0x1e0>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7fe f870 	bl	8008468 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7fd feb4 	bl	80080fc <__adddf3>
 800a394:	4603      	mov	r3, r0
 800a396:	460c      	mov	r4, r1
 800a398:	4625      	mov	r5, r4
 800a39a:	461c      	mov	r4, r3
 800a39c:	4b27      	ldr	r3, [pc, #156]	; (800a43c <GoStraight+0x1ec>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fd fff7 	bl	8008394 <__aeabi_i2d>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7fe facd 	bl	800894c <__aeabi_dcmplt>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d100      	bne.n	800a3ba <GoStraight+0x16a>
 800a3b8:	e00d      	b.n	800a3d6 <GoStraight+0x186>
 800a3ba:	4b23      	ldr	r3, [pc, #140]	; (800a448 <GoStraight+0x1f8>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <GoStraight+0x186>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a3c2:	f001 f84d 	bl	800b460 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	2109      	movs	r1, #9
 800a3ca:	2006      	movs	r0, #6
 800a3cc:	f001 f9ba 	bl	800b744 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <GoStraight+0x1f8>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <GoStraight+0x1e8>)
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	441a      	add	r2, r3
 800a3de:	4b17      	ldr	r3, [pc, #92]	; (800a43c <GoStraight+0x1ec>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	dc88      	bgt.n	800a2f8 <GoStraight+0xa8>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800a3e6:	4b19      	ldr	r3, [pc, #100]	; (800a44c <GoStraight+0x1fc>)
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <GoStraight+0x1e8>)
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	4a10      	ldr	r2, [pc, #64]	; (800a438 <GoStraight+0x1e8>)
 800a3f8:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <GoStraight+0x1e8>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	0fd9      	lsrs	r1, r3, #31
 800a402:	440b      	add	r3, r1
 800a404:	105b      	asrs	r3, r3, #1
 800a406:	4413      	add	r3, r2
 800a408:	4a0b      	ldr	r2, [pc, #44]	; (800a438 <GoStraight+0x1e8>)
 800a40a:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <GoStraight+0x1e8>)
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	0fd9      	lsrs	r1, r3, #31
 800a414:	440b      	add	r3, r1
 800a416:	105b      	asrs	r3, r3, #1
 800a418:	4413      	add	r3, r2
 800a41a:	4a07      	ldr	r2, [pc, #28]	; (800a438 <GoStraight+0x1e8>)
 800a41c:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bdb0      	pop	{r4, r5, r7, pc}
 800a426:	bf00      	nop
 800a428:	9999999a 	.word	0x9999999a
 800a42c:	3fd99999 	.word	0x3fd99999
 800a430:	9999999a 	.word	0x9999999a
 800a434:	3fe99999 	.word	0x3fe99999
 800a438:	20000440 	.word	0x20000440
 800a43c:	20000428 	.word	0x20000428
 800a440:	20000000 	.word	0x20000000
 800a444:	200003e8 	.word	0x200003e8
 800a448:	200003ec 	.word	0x200003ec
 800a44c:	20000420 	.word	0x20000420
 800a450:	367915b2 	.word	0x367915b2
 800a454:	3f502de0 	.word	0x3f502de0

0800a458 <TurnRight>:
void TurnRight(char mode)
{
 800a458:	b590      	push	{r4, r7, lr}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a462:	79fb      	ldrb	r3, [r7, #7]
 800a464:	2b53      	cmp	r3, #83	; 0x53
 800a466:	d032      	beq.n	800a4ce <TurnRight+0x76>
 800a468:	2b54      	cmp	r3, #84	; 0x54
 800a46a:	d000      	beq.n	800a46e <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a46c:	e032      	b.n	800a4d4 <TurnRight+0x7c>
		Decel(45, 0);
 800a46e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a4e8 <TurnRight+0x90>
 800a472:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a4ec <TurnRight+0x94>
 800a476:	f7ff fda7 	bl	8009fc8 <Decel>
		Rotate( 90 , 2*M_PI);
 800a47a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a4f0 <TurnRight+0x98>
 800a47e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a4f4 <TurnRight+0x9c>
 800a482:	f7ff f995 	bl	80097b0 <Rotate>
		TargetAngle += 90*M_PI/180;
 800a486:	4b1c      	ldr	r3, [pc, #112]	; (800a4f8 <TurnRight+0xa0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd ff94 	bl	80083b8 <__aeabi_f2d>
 800a490:	a313      	add	r3, pc, #76	; (adr r3, 800a4e0 <TurnRight+0x88>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7fd fe31 	bl	80080fc <__adddf3>
 800a49a:	4603      	mov	r3, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	f7fe fad9 	bl	8008a58 <__aeabi_d2f>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	4b13      	ldr	r3, [pc, #76]	; (800a4f8 <TurnRight+0xa0>)
 800a4aa:	601a      	str	r2, [r3, #0]
		HAL_Delay(250);
 800a4ac:	20fa      	movs	r0, #250	; 0xfa
 800a4ae:	f005 f801 	bl	800f4b4 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f002 fe7f 	bl	800d1b8 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a4ba:	4b10      	ldr	r3, [pc, #64]	; (800a4fc <TurnRight+0xa4>)
 800a4bc:	edd3 7a00 	vldr	s15, [r3]
 800a4c0:	eef0 0a67 	vmov.f32	s1, s15
 800a4c4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a4ec <TurnRight+0x94>
 800a4c8:	f7ff fcb6 	bl	8009e38 <Accel>
		break;
 800a4cc:	e002      	b.n	800a4d4 <TurnRight+0x7c>
		SlalomRight();
 800a4ce:	f7ff fa13 	bl	80098f8 <SlalomRight>
		break;
 800a4d2:	bf00      	nop
	}


}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	54442d18 	.word	0x54442d18
 800a4e4:	3ff921fb 	.word	0x3ff921fb
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	42340000 	.word	0x42340000
 800a4f0:	40c90fdb 	.word	0x40c90fdb
 800a4f4:	42b40000 	.word	0x42b40000
 800a4f8:	20000424 	.word	0x20000424
 800a4fc:	2000065c 	.word	0x2000065c

0800a500 <TurnLeft>:
void TurnLeft(char mode)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b53      	cmp	r3, #83	; 0x53
 800a50e:	d032      	beq.n	800a576 <TurnLeft+0x76>
 800a510:	2b54      	cmp	r3, #84	; 0x54
 800a512:	d000      	beq.n	800a516 <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a514:	e032      	b.n	800a57c <TurnLeft+0x7c>
		Decel(45, 0);
 800a516:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800a590 <TurnLeft+0x90>
 800a51a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a594 <TurnLeft+0x94>
 800a51e:	f7ff fd53 	bl	8009fc8 <Decel>
		Rotate( 90 , -2*M_PI);
 800a522:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a598 <TurnLeft+0x98>
 800a526:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800a59c <TurnLeft+0x9c>
 800a52a:	f7ff f941 	bl	80097b0 <Rotate>
		TargetAngle += -90*M_PI/180;
 800a52e:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <TurnLeft+0xa0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f7fd ff40 	bl	80083b8 <__aeabi_f2d>
 800a538:	a313      	add	r3, pc, #76	; (adr r3, 800a588 <TurnLeft+0x88>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7fd fddb 	bl	80080f8 <__aeabi_dsub>
 800a542:	4603      	mov	r3, r0
 800a544:	460c      	mov	r4, r1
 800a546:	4618      	mov	r0, r3
 800a548:	4621      	mov	r1, r4
 800a54a:	f7fe fa85 	bl	8008a58 <__aeabi_d2f>
 800a54e:	4602      	mov	r2, r0
 800a550:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <TurnLeft+0xa0>)
 800a552:	601a      	str	r2, [r3, #0]
		HAL_Delay(250);
 800a554:	20fa      	movs	r0, #250	; 0xfa
 800a556:	f004 ffad 	bl	800f4b4 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a55a:	2101      	movs	r1, #1
 800a55c:	2000      	movs	r0, #0
 800a55e:	f002 fe2b 	bl	800d1b8 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a562:	4b10      	ldr	r3, [pc, #64]	; (800a5a4 <TurnLeft+0xa4>)
 800a564:	edd3 7a00 	vldr	s15, [r3]
 800a568:	eef0 0a67 	vmov.f32	s1, s15
 800a56c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a594 <TurnLeft+0x94>
 800a570:	f7ff fc62 	bl	8009e38 <Accel>
		break;
 800a574:	e002      	b.n	800a57c <TurnLeft+0x7c>
		SlalomLeft();
 800a576:	f7ff fb17 	bl	8009ba8 <SlalomLeft>
		break;
 800a57a:	bf00      	nop
	}

}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}
 800a584:	f3af 8000 	nop.w
 800a588:	54442d18 	.word	0x54442d18
 800a58c:	3ff921fb 	.word	0x3ff921fb
 800a590:	00000000 	.word	0x00000000
 800a594:	42340000 	.word	0x42340000
 800a598:	c0c90fdb 	.word	0xc0c90fdb
 800a59c:	42b40000 	.word	0x42b40000
 800a5a0:	20000424 	.word	0x20000424
 800a5a4:	2000065c 	.word	0x2000065c

0800a5a8 <GoBack>:
void GoBack()
{
 800a5a8:	b598      	push	{r3, r4, r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a5ac:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a618 <GoBack+0x70>
 800a5b0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a61c <GoBack+0x74>
 800a5b4:	f7ff fd08 	bl	8009fc8 <Decel>
//	HAL_Delay(500);
	//補正して
	//Compensate();
	//Calib();
	//回転して
	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。
 800a5b8:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a620 <GoBack+0x78>
 800a5bc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a624 <GoBack+0x7c>
 800a5c0:	f7ff f8f6 	bl	80097b0 <Rotate>
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	//HAL_Delay(200);
	//Rotate(90, 2.5);
	//HAL_Delay(500);
	TargetAngle += 180*M_PI/180;
 800a5c4:	4b18      	ldr	r3, [pc, #96]	; (800a628 <GoBack+0x80>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd fef5 	bl	80083b8 <__aeabi_f2d>
 800a5ce:	a310      	add	r3, pc, #64	; (adr r3, 800a610 <GoBack+0x68>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f7fd fd92 	bl	80080fc <__adddf3>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4621      	mov	r1, r4
 800a5e0:	f7fe fa3a 	bl	8008a58 <__aeabi_d2f>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <GoBack+0x80>)
 800a5e8:	601a      	str	r2, [r3, #0]
	//加速する
//	PIDReset(L_VELO_PID);
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	HAL_Delay(200);
 800a5ea:	20c8      	movs	r0, #200	; 0xc8
 800a5ec:	f004 ff62 	bl	800f4b4 <HAL_Delay>
	Compensate();
 800a5f0:	f7ff fe1a 	bl	800a228 <Compensate>
	//PIDChangeFlag( A_VELO_PID, 1);
	Accel(61.5, ExploreVelocity);
 800a5f4:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <GoBack+0x84>)
 800a5f6:	edd3 7a00 	vldr	s15, [r3]
 800a5fa:	eef0 0a67 	vmov.f32	s1, s15
 800a5fe:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a630 <GoBack+0x88>
 800a602:	f7ff fc19 	bl	8009e38 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a606:	bf00      	nop
 800a608:	bd98      	pop	{r3, r4, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
 800a610:	54442d18 	.word	0x54442d18
 800a614:	400921fb 	.word	0x400921fb
 800a618:	00000000 	.word	0x00000000
 800a61c:	42340000 	.word	0x42340000
 800a620:	40c90fdb 	.word	0x40c90fdb
 800a624:	43340000 	.word	0x43340000
 800a628:	20000424 	.word	0x20000424
 800a62c:	2000065c 	.word	0x2000065c
 800a630:	42760000 	.word	0x42760000

0800a634 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir)
 800a63e:	4b18      	ldr	r3, [pc, #96]	; (800a6a0 <SelectAction+0x6c>)
 800a640:	789b      	ldrb	r3, [r3, #2]
 800a642:	2b03      	cmp	r3, #3
 800a644:	d826      	bhi.n	800a694 <SelectAction+0x60>
 800a646:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <SelectAction+0x18>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a67b 	.word	0x0800a67b
 800a654:	0800a68f 	.word	0x0800a68f
 800a658:	0800a685 	.word	0x0800a685
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);

		GoStraight(90, ExploreVelocity, AddVelocity);
 800a65c:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <SelectAction+0x70>)
 800a65e:	edd3 7a00 	vldr	s15, [r3]
 800a662:	4b11      	ldr	r3, [pc, #68]	; (800a6a8 <SelectAction+0x74>)
 800a664:	ed93 7a00 	vldr	s14, [r3]
 800a668:	eeb0 1a47 	vmov.f32	s2, s14
 800a66c:	eef0 0a67 	vmov.f32	s1, s15
 800a670:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a6ac <SelectAction+0x78>
 800a674:	f7ff fdec 	bl	800a250 <GoStraight>

		break;
 800a678:	e00d      	b.n	800a696 <SelectAction+0x62>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff feeb 	bl	800a458 <TurnRight>
		break;
 800a682:	e008      	b.n	800a696 <SelectAction+0x62>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff ff3a 	bl	800a500 <TurnLeft>
		break;
 800a68c:	e003      	b.n	800a696 <SelectAction+0x62>
	case back:
		GoBack();	//Uターン
 800a68e:	f7ff ff8b 	bl	800a5a8 <GoBack>
		break;
 800a692:	e000      	b.n	800a696 <SelectAction+0x62>


	default :
		break;
 800a694:	bf00      	nop

	}
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000000 	.word	0x20000000
 800a6a4:	2000065c 	.word	0x2000065c
 800a6a8:	200003fc 	.word	0x200003fc
 800a6ac:	42b40000 	.word	0x42b40000

0800a6b0 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800a6dc:	4a2c      	ldr	r2, [pc, #176]	; (800a790 <GetWallDataAverage+0xc4>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfb8      	it	lt
 800a6ec:	425b      	neglt	r3, r3
 800a6ee:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800a6f0:	4927      	ldr	r1, [pc, #156]	; (800a790 <GetWallDataAverage+0xc4>)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800a6fa:	4a26      	ldr	r2, [pc, #152]	; (800a794 <GetWallDataAverage+0xc8>)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	441a      	add	r2, r3
 800a706:	4923      	ldr	r1, [pc, #140]	; (800a794 <GetWallDataAverage+0xc8>)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800a70e:	4a22      	ldr	r2, [pc, #136]	; (800a798 <GetWallDataAverage+0xcc>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	491f      	ldr	r1, [pc, #124]	; (800a798 <GetWallDataAverage+0xcc>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800a720:	4a1d      	ldr	r2, [pc, #116]	; (800a798 <GetWallDataAverage+0xcc>)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d121      	bne.n	800a772 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800a72e:	4a19      	ldr	r2, [pc, #100]	; (800a794 <GetWallDataAverage+0xc8>)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a73e:	4a16      	ldr	r2, [pc, #88]	; (800a798 <GetWallDataAverage+0xcc>)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a752:	4a12      	ldr	r2, [pc, #72]	; (800a79c <GetWallDataAverage+0xd0>)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800a75e:	4a0d      	ldr	r2, [pc, #52]	; (800a794 <GetWallDataAverage+0xc8>)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2100      	movs	r1, #0
 800a764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800a768:	4a0b      	ldr	r2, [pc, #44]	; (800a798 <GetWallDataAverage+0xcc>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2100      	movs	r1, #0
 800a76e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800a772:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <GetWallDataAverage+0xd0>)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	ee07 3a90 	vmov	s15, r3
}
 800a780:	eeb0 0a67 	vmov.f32	s0, s15
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20000214 	.word	0x20000214
 800a794:	20000224 	.word	0x20000224
 800a798:	20000234 	.word	0x20000234
 800a79c:	20000244 	.word	0x20000244

0800a7a0 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800a7ac:	edc7 0a01 	vstr	s1, [r7, #4]
 800a7b0:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800a7b4:	f04f 0300 	mov.w	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a7d4:	ed97 7a00 	vldr	s14, [r7]
 800a7d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7dc:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	ee07 3a90 	vmov	s15, r3
}
 800a7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ea:	371c      	adds	r7, #28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800a802:	2300      	movs	r3, #0
 800a804:	60bb      	str	r3, [r7, #8]
 800a806:	e007      	b.n	800a818 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	fb02 f303 	mul.w	r3, r2, r3
 800a810:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	3301      	adds	r3, #1
 800a816:	60bb      	str	r3, [r7, #8]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	dbf3      	blt.n	800a808 <IntegerPower+0x14>
	}
	return pattern_num;
 800a820:	68fb      	ldr	r3, [r7, #12]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800a82e:	b480      	push	{r7}
 800a830:	b08b      	sub	sp, #44	; 0x2c
 800a832:	af00      	add	r7, sp, #0
 800a834:	ed87 0a03 	vstr	s0, [r7, #12]
 800a838:	edc7 0a02 	vstr	s1, [r7, #8]
 800a83c:	ed87 1a01 	vstr	s2, [r7, #4]
 800a840:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800a842:	edd7 6a03 	vldr	s13, [r7, #12]
 800a846:	ed97 7a01 	vldr	s14, [r7, #4]
 800a84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800a852:	edd7 6a02 	vldr	s13, [r7, #8]
 800a856:	ed97 7a01 	vldr	s14, [r7, #4]
 800a85a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a85e:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800a862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a866:	edd7 7a06 	vldr	s15, [r7, #24]
 800a86a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a87c:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800a884:	2300      	movs	r3, #0
 800a886:	623b      	str	r3, [r7, #32]
 800a888:	e018      	b.n	800a8bc <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	ee07 3a90 	vmov	s15, r3
 800a890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a894:	edd7 7a05 	vldr	s15, [r7, #20]
 800a898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a89c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a4:	ed97 7a07 	vldr	s14, [r7, #28]
 800a8a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b0:	db01      	blt.n	800a8b6 <GetBatteryLevel+0x88>
		{
			pattern = i;
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	6a3a      	ldr	r2, [r7, #32]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	dbe2      	blt.n	800a88a <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	372c      	adds	r7, #44	; 0x2c
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <Buffering+0x24>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	2100      	movs	r1, #0
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f00a fce5 	bl	80152b0 <setbuf>
	  setbuf(stdin,NULL);
 800a8e6:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <Buffering+0x24>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f00a fcde 	bl	80152b0 <setbuf>
}
 800a8f4:	bf00      	nop
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000028 	.word	0x20000028

0800a8fc <Copy_Gain>:
void Copy_Gain()
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b092      	sub	sp, #72	; 0x48
 800a900:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800a902:	4b2c      	ldr	r3, [pc, #176]	; (800a9b4 <Copy_Gain+0xb8>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800a908:	463b      	mov	r3, r7
 800a90a:	2240      	movs	r2, #64	; 0x40
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f009 fddf 	bl	80144d2 <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800a914:	4b28      	ldr	r3, [pc, #160]	; (800a9b8 <Copy_Gain+0xbc>)
 800a916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a91a:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800a91c:	4b26      	ldr	r3, [pc, #152]	; (800a9b8 <Copy_Gain+0xbc>)
 800a91e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a922:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800a924:	4b24      	ldr	r3, [pc, #144]	; (800a9b8 <Copy_Gain+0xbc>)
 800a926:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a92a:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800a92c:	4b22      	ldr	r3, [pc, #136]	; (800a9b8 <Copy_Gain+0xbc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800a932:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <Copy_Gain+0xbc>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800a938:	4b1f      	ldr	r3, [pc, #124]	; (800a9b8 <Copy_Gain+0xbc>)
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800a93e:	4b1e      	ldr	r3, [pc, #120]	; (800a9b8 <Copy_Gain+0xbc>)
 800a940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a942:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800a944:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <Copy_Gain+0xbc>)
 800a946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a948:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800a94a:	4b1b      	ldr	r3, [pc, #108]	; (800a9b8 <Copy_Gain+0xbc>)
 800a94c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94e:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800a950:	4b19      	ldr	r3, [pc, #100]	; (800a9b8 <Copy_Gain+0xbc>)
 800a952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800a958:	4b17      	ldr	r3, [pc, #92]	; (800a9b8 <Copy_Gain+0xbc>)
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800a960:	4b15      	ldr	r3, [pc, #84]	; (800a9b8 <Copy_Gain+0xbc>)
 800a962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800a968:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <Copy_Gain+0xbc>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800a96e:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <Copy_Gain+0xbc>)
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800a974:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <Copy_Gain+0xbc>)
 800a976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a978:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	643b      	str	r3, [r7, #64]	; 0x40
 800a97e:	e012      	b.n	800a9a6 <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 800a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a988:	4413      	add	r3, r2
 800a98a:	3b48      	subs	r3, #72	; 0x48
 800a98c:	edd3 7a00 	vldr	s15, [r3]
 800a990:	eeb0 0a67 	vmov.f32	s0, s15
 800a994:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a996:	f004 f9b7 	bl	800ed08 <FLASH_Write_Word_F>
		address += 0x04;
 800a99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99c:	3304      	adds	r3, #4
 800a99e:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800a9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a8:	2b0e      	cmp	r3, #14
 800a9aa:	dde9      	ble.n	800a980 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800a9ac:	bf00      	nop
 800a9ae:	3748      	adds	r7, #72	; 0x48
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	080198d8 	.word	0x080198d8
 800a9b8:	2000025c 	.word	0x2000025c

0800a9bc <Load_Gain>:
void Load_Gain()
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b095      	sub	sp, #84	; 0x54
 800a9c0:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800a9c2:	4b59      	ldr	r3, [pc, #356]	; (800ab28 <Load_Gain+0x16c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	2240      	movs	r2, #64	; 0x40
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f009 fd7f 	bl	80144d2 <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800a9da:	2300      	movs	r3, #0
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a9de:	e038      	b.n	800aa52 <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a9ec:	f004 f9b6 	bl	800ed5c <FLASH_Read_Word_F>
		address += 0x04;
 800a9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800a9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9fe:	4413      	add	r3, r2
 800aa00:	3b50      	subs	r3, #80	; 0x50
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fd fcd7 	bl	80083b8 <__aeabi_f2d>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4623      	mov	r3, r4
 800aa12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa14:	4845      	ldr	r0, [pc, #276]	; (800ab2c <Load_Gain+0x170>)
 800aa16:	f00a fba3 	bl	8015160 <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 800aa1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800aa22:	4413      	add	r3, r2
 800aa24:	3b50      	subs	r3, #80	; 0x50
 800aa26:	edd3 7a00 	vldr	s15, [r3]
 800aa2a:	eef4 7a67 	vcmp.f32	s15, s15
 800aa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa32:	bf6c      	ite	vs
 800aa34:	2301      	movvs	r3, #1
 800aa36:	2300      	movvc	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <Load_Gain+0x90>
		{
			j++;
 800aa42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aa46:	3301      	adds	r3, #1
 800aa48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800aa4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4e:	3301      	adds	r3, #1
 800aa50:	647b      	str	r3, [r7, #68]	; 0x44
 800aa52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa54:	2b0e      	cmp	r3, #14
 800aa56:	ddc3      	ble.n	800a9e0 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800aa58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4834      	ldr	r0, [pc, #208]	; (800ab30 <Load_Gain+0x174>)
 800aa60:	f00a fb7e 	bl	8015160 <iprintf>
		if(j == 15)//全てnan0であれば
 800aa64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aa68:	2b0f      	cmp	r3, #15
 800aa6a:	d059      	beq.n	800ab20 <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800aa6c:	edd7 7a00 	vldr	s15, [r7]
 800aa70:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa74:	edd7 6a02 	vldr	s13, [r7, #8]
 800aa78:	eeb0 1a66 	vmov.f32	s2, s13
 800aa7c:	eef0 0a47 	vmov.f32	s1, s14
 800aa80:	eeb0 0a67 	vmov.f32	s0, s15
 800aa84:	2004      	movs	r0, #4
 800aa86:	f002 fb6b 	bl	800d160 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800aa8a:	edd7 7a00 	vldr	s15, [r7]
 800aa8e:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa92:	edd7 6a02 	vldr	s13, [r7, #8]
 800aa96:	eeb0 1a66 	vmov.f32	s2, s13
 800aa9a:	eef0 0a47 	vmov.f32	s1, s14
 800aa9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa2:	2005      	movs	r0, #5
 800aaa4:	f002 fb5c 	bl	800d160 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800aaa8:	edd7 7a03 	vldr	s15, [r7, #12]
 800aaac:	ed97 7a04 	vldr	s14, [r7, #16]
 800aab0:	edd7 6a05 	vldr	s13, [r7, #20]
 800aab4:	eeb0 1a66 	vmov.f32	s2, s13
 800aab8:	eef0 0a47 	vmov.f32	s1, s14
 800aabc:	eeb0 0a67 	vmov.f32	s0, s15
 800aac0:	2000      	movs	r0, #0
 800aac2:	f002 fb4d 	bl	800d160 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800aac6:	edd7 7a06 	vldr	s15, [r7, #24]
 800aaca:	ed97 7a07 	vldr	s14, [r7, #28]
 800aace:	edd7 6a08 	vldr	s13, [r7, #32]
 800aad2:	eeb0 1a66 	vmov.f32	s2, s13
 800aad6:	eef0 0a47 	vmov.f32	s1, s14
 800aada:	eeb0 0a67 	vmov.f32	s0, s15
 800aade:	2002      	movs	r0, #2
 800aae0:	f002 fb3e 	bl	800d160 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800aae4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aae8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aaf0:	eeb0 1a66 	vmov.f32	s2, s13
 800aaf4:	eef0 0a47 	vmov.f32	s1, s14
 800aaf8:	eeb0 0a67 	vmov.f32	s0, s15
 800aafc:	2003      	movs	r0, #3
 800aafe:	f002 fb2f 	bl	800d160 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800ab02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab06:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab0a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab0e:	eeb0 1a66 	vmov.f32	s2, s13
 800ab12:	eef0 0a47 	vmov.f32	s1, s14
 800ab16:	eeb0 0a67 	vmov.f32	s0, s15
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	f002 fb20 	bl	800d160 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800ab20:	bf00      	nop
 800ab22:	3754      	adds	r7, #84	; 0x54
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd90      	pop	{r4, r7, pc}
 800ab28:	080198d8 	.word	0x080198d8
 800ab2c:	080195f4 	.word	0x080195f4
 800ab30:	08019600 	.word	0x08019600

0800ab34 <Change_Gain>:
void Change_Gain()
{
 800ab34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800ab3c:	48af      	ldr	r0, [pc, #700]	; (800adfc <Change_Gain+0x2c8>)
 800ab3e:	f007 fbac 	bl	801229a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800ab42:	48af      	ldr	r0, [pc, #700]	; (800ae00 <Change_Gain+0x2cc>)
 800ab44:	f007 fba9 	bl	801229a <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800ab48:	f004 fb9c 	bl	800f284 <Motor_PWM_Stop>
	EmitterOFF();
 800ab4c:	f004 fab4 	bl	800f0b8 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800ab50:	20c8      	movs	r0, #200	; 0xc8
 800ab52:	f004 fcaf 	bl	800f4b4 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800ab56:	2330      	movs	r3, #48	; 0x30
 800ab58:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800ab5a:	2330      	movs	r3, #48	; 0x30
 800ab5c:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800ab5e:	48a9      	ldr	r0, [pc, #676]	; (800ae04 <Change_Gain+0x2d0>)
 800ab60:	f00a fb86 	bl	8015270 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800ab64:	4ba8      	ldr	r3, [pc, #672]	; (800ae08 <Change_Gain+0x2d4>)
 800ab66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fd fc24 	bl	80083b8 <__aeabi_f2d>
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	4ba4      	ldr	r3, [pc, #656]	; (800ae08 <Change_Gain+0x2d4>)
 800ab76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fd fc1c 	bl	80083b8 <__aeabi_f2d>
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	4ba0      	ldr	r3, [pc, #640]	; (800ae08 <Change_Gain+0x2d4>)
 800ab86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fd fc14 	bl	80083b8 <__aeabi_f2d>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab98:	e9cd 4500 	strd	r4, r5, [sp]
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	489a      	ldr	r0, [pc, #616]	; (800ae0c <Change_Gain+0x2d8>)
 800aba2:	f00a fadd 	bl	8015160 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800aba6:	4b98      	ldr	r3, [pc, #608]	; (800ae08 <Change_Gain+0x2d4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fd fc04 	bl	80083b8 <__aeabi_f2d>
 800abb0:	4680      	mov	r8, r0
 800abb2:	4689      	mov	r9, r1
 800abb4:	4b94      	ldr	r3, [pc, #592]	; (800ae08 <Change_Gain+0x2d4>)
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fd fbfd 	bl	80083b8 <__aeabi_f2d>
 800abbe:	4604      	mov	r4, r0
 800abc0:	460d      	mov	r5, r1
 800abc2:	4b91      	ldr	r3, [pc, #580]	; (800ae08 <Change_Gain+0x2d4>)
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fbf6 	bl	80083b8 <__aeabi_f2d>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abd4:	e9cd 4500 	strd	r4, r5, [sp]
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	488c      	ldr	r0, [pc, #560]	; (800ae10 <Change_Gain+0x2dc>)
 800abde:	f00a fabf 	bl	8015160 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800abe2:	4b89      	ldr	r3, [pc, #548]	; (800ae08 <Change_Gain+0x2d4>)
 800abe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fd fbe6 	bl	80083b8 <__aeabi_f2d>
 800abec:	4680      	mov	r8, r0
 800abee:	4689      	mov	r9, r1
 800abf0:	4b85      	ldr	r3, [pc, #532]	; (800ae08 <Change_Gain+0x2d4>)
 800abf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd fbdf 	bl	80083b8 <__aeabi_f2d>
 800abfa:	4604      	mov	r4, r0
 800abfc:	460d      	mov	r5, r1
 800abfe:	4b82      	ldr	r3, [pc, #520]	; (800ae08 <Change_Gain+0x2d4>)
 800ac00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fd fbd8 	bl	80083b8 <__aeabi_f2d>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac10:	e9cd 4500 	strd	r4, r5, [sp]
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	487e      	ldr	r0, [pc, #504]	; (800ae14 <Change_Gain+0x2e0>)
 800ac1a:	f00a faa1 	bl	8015160 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800ac1e:	4b7a      	ldr	r3, [pc, #488]	; (800ae08 <Change_Gain+0x2d4>)
 800ac20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fbc7 	bl	80083b8 <__aeabi_f2d>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	4689      	mov	r9, r1
 800ac2e:	4b76      	ldr	r3, [pc, #472]	; (800ae08 <Change_Gain+0x2d4>)
 800ac30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fd fbbf 	bl	80083b8 <__aeabi_f2d>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	460d      	mov	r5, r1
 800ac3e:	4b72      	ldr	r3, [pc, #456]	; (800ae08 <Change_Gain+0x2d4>)
 800ac40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd fbb7 	bl	80083b8 <__aeabi_f2d>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac52:	e9cd 4500 	strd	r4, r5, [sp]
 800ac56:	4642      	mov	r2, r8
 800ac58:	464b      	mov	r3, r9
 800ac5a:	486f      	ldr	r0, [pc, #444]	; (800ae18 <Change_Gain+0x2e4>)
 800ac5c:	f00a fa80 	bl	8015160 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800ac60:	4b69      	ldr	r3, [pc, #420]	; (800ae08 <Change_Gain+0x2d4>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fba7 	bl	80083b8 <__aeabi_f2d>
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	4b66      	ldr	r3, [pc, #408]	; (800ae08 <Change_Gain+0x2d4>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fd fba0 	bl	80083b8 <__aeabi_f2d>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	4b62      	ldr	r3, [pc, #392]	; (800ae08 <Change_Gain+0x2d4>)
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd fb99 	bl	80083b8 <__aeabi_f2d>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac8e:	e9cd 4500 	strd	r4, r5, [sp]
 800ac92:	4642      	mov	r2, r8
 800ac94:	464b      	mov	r3, r9
 800ac96:	4861      	ldr	r0, [pc, #388]	; (800ae1c <Change_Gain+0x2e8>)
 800ac98:	f00a fa62 	bl	8015160 <iprintf>

		Buffering();
 800ac9c:	f7ff fe1a 	bl	800a8d4 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800aca0:	485f      	ldr	r0, [pc, #380]	; (800ae20 <Change_Gain+0x2ec>)
 800aca2:	f00a fa5d 	bl	8015160 <iprintf>
 800aca6:	1dfb      	adds	r3, r7, #7
 800aca8:	4619      	mov	r1, r3
 800acaa:	485e      	ldr	r0, [pc, #376]	; (800ae24 <Change_Gain+0x2f0>)
 800acac:	f00a fae8 	bl	8015280 <iscanf>
		if(change_mode == '0')
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	2b30      	cmp	r3, #48	; 0x30
 800acb4:	f000 80f4 	beq.w	800aea0 <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 800acb8:	f7ff fe0c 	bl	800a8d4 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800acbc:	485a      	ldr	r0, [pc, #360]	; (800ae28 <Change_Gain+0x2f4>)
 800acbe:	f00a fa4f 	bl	8015160 <iprintf>
 800acc2:	1dbb      	adds	r3, r7, #6
 800acc4:	4619      	mov	r1, r3
 800acc6:	4857      	ldr	r0, [pc, #348]	; (800ae24 <Change_Gain+0x2f0>)
 800acc8:	f00a fada 	bl	8015280 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	4619      	mov	r1, r3
 800acd0:	79bb      	ldrb	r3, [r7, #6]
 800acd2:	461a      	mov	r2, r3
 800acd4:	4855      	ldr	r0, [pc, #340]	; (800ae2c <Change_Gain+0x2f8>)
 800acd6:	f00a fa43 	bl	8015160 <iprintf>

			Buffering();
 800acda:	f7ff fdfb 	bl	800a8d4 <Buffering>
			printf("\r\n値を入力 : ");
 800acde:	4854      	ldr	r0, [pc, #336]	; (800ae30 <Change_Gain+0x2fc>)
 800ace0:	f00a fa3e 	bl	8015160 <iprintf>

			switch(change_mode)
 800ace4:	79fb      	ldrb	r3, [r7, #7]
 800ace6:	3b31      	subs	r3, #49	; 0x31
 800ace8:	2b04      	cmp	r3, #4
 800acea:	f200 80c1 	bhi.w	800ae70 <Change_Gain+0x33c>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <Change_Gain+0x1c0>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad09 	.word	0x0800ad09
 800acf8:	0800ad3b 	.word	0x0800ad3b
 800acfc:	0800ad6d 	.word	0x0800ad6d
 800ad00:	0800ad9d 	.word	0x0800ad9d
 800ad04:	0800adcd 	.word	0x0800adcd
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800ad08:	79bb      	ldrb	r3, [r7, #6]
 800ad0a:	2b70      	cmp	r3, #112	; 0x70
 800ad0c:	d104      	bne.n	800ad18 <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800ad0e:	4949      	ldr	r1, [pc, #292]	; (800ae34 <Change_Gain+0x300>)
 800ad10:	4849      	ldr	r0, [pc, #292]	; (800ae38 <Change_Gain+0x304>)
 800ad12:	f00a fab5 	bl	8015280 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800ad16:	e0af      	b.n	800ae78 <Change_Gain+0x344>
				else if(pid == 'i')
 800ad18:	79bb      	ldrb	r3, [r7, #6]
 800ad1a:	2b69      	cmp	r3, #105	; 0x69
 800ad1c:	d104      	bne.n	800ad28 <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800ad1e:	4947      	ldr	r1, [pc, #284]	; (800ae3c <Change_Gain+0x308>)
 800ad20:	4845      	ldr	r0, [pc, #276]	; (800ae38 <Change_Gain+0x304>)
 800ad22:	f00a faad 	bl	8015280 <iscanf>
				break;
 800ad26:	e0a7      	b.n	800ae78 <Change_Gain+0x344>
				else if(pid == 'd')
 800ad28:	79bb      	ldrb	r3, [r7, #6]
 800ad2a:	2b64      	cmp	r3, #100	; 0x64
 800ad2c:	f040 80a4 	bne.w	800ae78 <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800ad30:	4943      	ldr	r1, [pc, #268]	; (800ae40 <Change_Gain+0x30c>)
 800ad32:	4841      	ldr	r0, [pc, #260]	; (800ae38 <Change_Gain+0x304>)
 800ad34:	f00a faa4 	bl	8015280 <iscanf>
				break;
 800ad38:	e09e      	b.n	800ae78 <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800ad3a:	79bb      	ldrb	r3, [r7, #6]
 800ad3c:	2b70      	cmp	r3, #112	; 0x70
 800ad3e:	d104      	bne.n	800ad4a <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800ad40:	4931      	ldr	r1, [pc, #196]	; (800ae08 <Change_Gain+0x2d4>)
 800ad42:	483d      	ldr	r0, [pc, #244]	; (800ae38 <Change_Gain+0x304>)
 800ad44:	f00a fa9c 	bl	8015280 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800ad48:	e098      	b.n	800ae7c <Change_Gain+0x348>
				else if(pid == 'i')
 800ad4a:	79bb      	ldrb	r3, [r7, #6]
 800ad4c:	2b69      	cmp	r3, #105	; 0x69
 800ad4e:	d104      	bne.n	800ad5a <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800ad50:	493c      	ldr	r1, [pc, #240]	; (800ae44 <Change_Gain+0x310>)
 800ad52:	4839      	ldr	r0, [pc, #228]	; (800ae38 <Change_Gain+0x304>)
 800ad54:	f00a fa94 	bl	8015280 <iscanf>
				break;
 800ad58:	e090      	b.n	800ae7c <Change_Gain+0x348>
				else if(pid == 'd')
 800ad5a:	79bb      	ldrb	r3, [r7, #6]
 800ad5c:	2b64      	cmp	r3, #100	; 0x64
 800ad5e:	f040 808d 	bne.w	800ae7c <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800ad62:	4939      	ldr	r1, [pc, #228]	; (800ae48 <Change_Gain+0x314>)
 800ad64:	4834      	ldr	r0, [pc, #208]	; (800ae38 <Change_Gain+0x304>)
 800ad66:	f00a fa8b 	bl	8015280 <iscanf>
				break;
 800ad6a:	e087      	b.n	800ae7c <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800ad6c:	79bb      	ldrb	r3, [r7, #6]
 800ad6e:	2b70      	cmp	r3, #112	; 0x70
 800ad70:	d104      	bne.n	800ad7c <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800ad72:	4936      	ldr	r1, [pc, #216]	; (800ae4c <Change_Gain+0x318>)
 800ad74:	4830      	ldr	r0, [pc, #192]	; (800ae38 <Change_Gain+0x304>)
 800ad76:	f00a fa83 	bl	8015280 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800ad7a:	e081      	b.n	800ae80 <Change_Gain+0x34c>
				else if(pid == 'i')
 800ad7c:	79bb      	ldrb	r3, [r7, #6]
 800ad7e:	2b69      	cmp	r3, #105	; 0x69
 800ad80:	d104      	bne.n	800ad8c <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800ad82:	4933      	ldr	r1, [pc, #204]	; (800ae50 <Change_Gain+0x31c>)
 800ad84:	482c      	ldr	r0, [pc, #176]	; (800ae38 <Change_Gain+0x304>)
 800ad86:	f00a fa7b 	bl	8015280 <iscanf>
				break;
 800ad8a:	e079      	b.n	800ae80 <Change_Gain+0x34c>
				else if(pid == 'd')
 800ad8c:	79bb      	ldrb	r3, [r7, #6]
 800ad8e:	2b64      	cmp	r3, #100	; 0x64
 800ad90:	d176      	bne.n	800ae80 <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800ad92:	4930      	ldr	r1, [pc, #192]	; (800ae54 <Change_Gain+0x320>)
 800ad94:	4828      	ldr	r0, [pc, #160]	; (800ae38 <Change_Gain+0x304>)
 800ad96:	f00a fa73 	bl	8015280 <iscanf>
				break;
 800ad9a:	e071      	b.n	800ae80 <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800ad9c:	79bb      	ldrb	r3, [r7, #6]
 800ad9e:	2b70      	cmp	r3, #112	; 0x70
 800ada0:	d104      	bne.n	800adac <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800ada2:	492d      	ldr	r1, [pc, #180]	; (800ae58 <Change_Gain+0x324>)
 800ada4:	4824      	ldr	r0, [pc, #144]	; (800ae38 <Change_Gain+0x304>)
 800ada6:	f00a fa6b 	bl	8015280 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800adaa:	e06b      	b.n	800ae84 <Change_Gain+0x350>
				else if(pid == 'i')
 800adac:	79bb      	ldrb	r3, [r7, #6]
 800adae:	2b69      	cmp	r3, #105	; 0x69
 800adb0:	d104      	bne.n	800adbc <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800adb2:	492a      	ldr	r1, [pc, #168]	; (800ae5c <Change_Gain+0x328>)
 800adb4:	4820      	ldr	r0, [pc, #128]	; (800ae38 <Change_Gain+0x304>)
 800adb6:	f00a fa63 	bl	8015280 <iscanf>
				break;
 800adba:	e063      	b.n	800ae84 <Change_Gain+0x350>
				else if(pid == 'd')
 800adbc:	79bb      	ldrb	r3, [r7, #6]
 800adbe:	2b64      	cmp	r3, #100	; 0x64
 800adc0:	d160      	bne.n	800ae84 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800adc2:	4927      	ldr	r1, [pc, #156]	; (800ae60 <Change_Gain+0x32c>)
 800adc4:	481c      	ldr	r0, [pc, #112]	; (800ae38 <Change_Gain+0x304>)
 800adc6:	f00a fa5b 	bl	8015280 <iscanf>
				break;
 800adca:	e05b      	b.n	800ae84 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800adcc:	79bb      	ldrb	r3, [r7, #6]
 800adce:	2b70      	cmp	r3, #112	; 0x70
 800add0:	d104      	bne.n	800addc <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800add2:	4924      	ldr	r1, [pc, #144]	; (800ae64 <Change_Gain+0x330>)
 800add4:	4818      	ldr	r0, [pc, #96]	; (800ae38 <Change_Gain+0x304>)
 800add6:	f00a fa53 	bl	8015280 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800adda:	e055      	b.n	800ae88 <Change_Gain+0x354>
				else if(pid == 'i')
 800addc:	79bb      	ldrb	r3, [r7, #6]
 800adde:	2b69      	cmp	r3, #105	; 0x69
 800ade0:	d104      	bne.n	800adec <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800ade2:	4921      	ldr	r1, [pc, #132]	; (800ae68 <Change_Gain+0x334>)
 800ade4:	4814      	ldr	r0, [pc, #80]	; (800ae38 <Change_Gain+0x304>)
 800ade6:	f00a fa4b 	bl	8015280 <iscanf>
				break;
 800adea:	e04d      	b.n	800ae88 <Change_Gain+0x354>
				else if(pid == 'd')
 800adec:	79bb      	ldrb	r3, [r7, #6]
 800adee:	2b64      	cmp	r3, #100	; 0x64
 800adf0:	d14a      	bne.n	800ae88 <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800adf2:	491e      	ldr	r1, [pc, #120]	; (800ae6c <Change_Gain+0x338>)
 800adf4:	4810      	ldr	r0, [pc, #64]	; (800ae38 <Change_Gain+0x304>)
 800adf6:	f00a fa43 	bl	8015280 <iscanf>
				break;
 800adfa:	e045      	b.n	800ae88 <Change_Gain+0x354>
 800adfc:	20000d14 	.word	0x20000d14
 800ae00:	20000a8c 	.word	0x20000a8c
 800ae04:	08019608 	.word	0x08019608
 800ae08:	2000025c 	.word	0x2000025c
 800ae0c:	08019620 	.word	0x08019620
 800ae10:	08019640 	.word	0x08019640
 800ae14:	0801965c 	.word	0x0801965c
 800ae18:	08019678 	.word	0x08019678
 800ae1c:	08019694 	.word	0x08019694
 800ae20:	080196b0 	.word	0x080196b0
 800ae24:	080196c8 	.word	0x080196c8
 800ae28:	080196cc 	.word	0x080196cc
 800ae2c:	080196e0 	.word	0x080196e0
 800ae30:	08019704 	.word	0x08019704
 800ae34:	2000030c 	.word	0x2000030c
 800ae38:	08019718 	.word	0x08019718
 800ae3c:	20000310 	.word	0x20000310
 800ae40:	20000314 	.word	0x20000314
 800ae44:	20000260 	.word	0x20000260
 800ae48:	20000264 	.word	0x20000264
 800ae4c:	200002b4 	.word	0x200002b4
 800ae50:	200002b8 	.word	0x200002b8
 800ae54:	200002bc 	.word	0x200002bc
 800ae58:	200002e0 	.word	0x200002e0
 800ae5c:	200002e4 	.word	0x200002e4
 800ae60:	200002e8 	.word	0x200002e8
 800ae64:	20000288 	.word	0x20000288
 800ae68:	2000028c 	.word	0x2000028c
 800ae6c:	20000290 	.word	0x20000290
			default :
				printf("該当しません\r\n");
 800ae70:	4816      	ldr	r0, [pc, #88]	; (800aecc <Change_Gain+0x398>)
 800ae72:	f00a f9fd 	bl	8015270 <puts>
				break;
 800ae76:	e008      	b.n	800ae8a <Change_Gain+0x356>
				break;
 800ae78:	bf00      	nop
 800ae7a:	e006      	b.n	800ae8a <Change_Gain+0x356>
				break;
 800ae7c:	bf00      	nop
 800ae7e:	e004      	b.n	800ae8a <Change_Gain+0x356>
				break;
 800ae80:	bf00      	nop
 800ae82:	e002      	b.n	800ae8a <Change_Gain+0x356>
				break;
 800ae84:	bf00      	nop
 800ae86:	e000      	b.n	800ae8a <Change_Gain+0x356>
				break;
 800ae88:	bf00      	nop
			}
			Buffering();
 800ae8a:	f7ff fd23 	bl	800a8d4 <Buffering>
			scanf("%c",&nl);
 800ae8e:	1d7b      	adds	r3, r7, #5
 800ae90:	4619      	mov	r1, r3
 800ae92:	480f      	ldr	r0, [pc, #60]	; (800aed0 <Change_Gain+0x39c>)
 800ae94:	f00a f9f4 	bl	8015280 <iscanf>
			printf("\r\n");
 800ae98:	480e      	ldr	r0, [pc, #56]	; (800aed4 <Change_Gain+0x3a0>)
 800ae9a:	f00a f9e9 	bl	8015270 <puts>
		printf("現在のPIDゲイン\r\n");
 800ae9e:	e65e      	b.n	800ab5e <Change_Gain+0x2a>
			break;
 800aea0:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800aea2:	480d      	ldr	r0, [pc, #52]	; (800aed8 <Change_Gain+0x3a4>)
 800aea4:	f00a f9e4 	bl	8015270 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800aea8:	f003 ffab 	bl	800ee02 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800aeac:	f7ff fd26 	bl	800a8fc <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800aeb0:	2007      	movs	r0, #7
 800aeb2:	f004 f90f 	bl	800f0d4 <ChangeLED>
	HAL_Delay(200);
 800aeb6:	20c8      	movs	r0, #200	; 0xc8
 800aeb8:	f004 fafc 	bl	800f4b4 <HAL_Delay>
	ChangeLED(0);
 800aebc:	2000      	movs	r0, #0
 800aebe:	f004 f909 	bl	800f0d4 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aecc:	0801971c 	.word	0x0801971c
 800aed0:	080196c8 	.word	0x080196c8
 800aed4:	08019730 	.word	0x08019730
 800aed8:	08019734 	.word	0x08019734

0800aedc <HAL_TIM_PeriodElapsedCallback>:
//	}
//}

//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a72      	ldr	r2, [pc, #456]	; (800b0b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	f040 8167 	bne.w	800b1bc <HAL_TIM_PeriodElapsedCallback+0x2e0>
		//ConvertEncData();
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		timer1 += t;
 800aeee:	4b71      	ldr	r3, [pc, #452]	; (800b0b4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b71      	ldr	r3, [pc, #452]	; (800b0b8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4413      	add	r3, r2
 800aef8:	4a6e      	ldr	r2, [pc, #440]	; (800b0b4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800aefa:	6013      	str	r3, [r2, #0]
		if(timer1 == 30000)
 800aefc:	4b6d      	ldr	r3, [pc, #436]	; (800b0b4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f247 5230 	movw	r2, #30000	; 0x7530
 800af04:	4293      	cmp	r3, r2
 800af06:	d102      	bne.n	800af0e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			t = 0;
 800af08:	4b6b      	ldr	r3, [pc, #428]	; (800b0b8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
		}
//*-----------------*/
		//ControlMotor();
		PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800af0e:	4b6b      	ldr	r3, [pc, #428]	; (800b0bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800af16:	332f      	adds	r3, #47	; 0x2f
 800af18:	461a      	mov	r2, r3
 800af1a:	4b69      	ldr	r3, [pc, #420]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800af1c:	601a      	str	r2, [r3, #0]
		TIM3->CNT = INITIAL_PULSE;
 800af1e:	4b67      	ldr	r3, [pc, #412]	; (800b0bc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800af20:	f247 522f 	movw	r2, #29999	; 0x752f
 800af24:	625a      	str	r2, [r3, #36]	; 0x24
		PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800af26:	4b67      	ldr	r3, [pc, #412]	; (800b0c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800af2e:	332f      	adds	r3, #47	; 0x2f
 800af30:	461a      	mov	r2, r3
 800af32:	4b63      	ldr	r3, [pc, #396]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800af34:	605a      	str	r2, [r3, #4]
		TIM4->CNT = INITIAL_PULSE;
 800af36:	4b63      	ldr	r3, [pc, #396]	; (800b0c4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800af38:	f247 522f 	movw	r2, #29999	; 0x752f
 800af3c:	625a      	str	r2, [r3, #36]	; 0x24
	//	PulseDisplacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&KeepCounter[LEFT]*/);
	//	PulseDisplacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&KeepCounter[RIGHT]*/);
		//速度 mm/s
		CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800af3e:	4b60      	ldr	r3, [pc, #384]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af4a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b0c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800af4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af52:	4b5e      	ldr	r3, [pc, #376]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800af54:	edc3 7a00 	vstr	s15, [r3]
		CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800af58:	4b59      	ldr	r3, [pc, #356]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af64:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800b0c8 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800af68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af6c:	4b57      	ldr	r3, [pc, #348]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800af6e:	edc3 7a01 	vstr	s15, [r3, #4]
		CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800af72:	4b56      	ldr	r3, [pc, #344]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800af74:	ed93 7a00 	vldr	s14, [r3]
 800af78:	4b54      	ldr	r3, [pc, #336]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800af7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800af7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af8a:	4b50      	ldr	r3, [pc, #320]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800af8c:	edc3 7a02 	vstr	s15, [r3, #8]
		//移動量 mm/msを積算
		TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800af90:	4b4f      	ldr	r3, [pc, #316]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	4b4a      	ldr	r3, [pc, #296]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	4a4d      	ldr	r2, [pc, #308]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800af9c:	6013      	str	r3, [r2, #0]
		TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800af9e:	4b4c      	ldr	r3, [pc, #304]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	4b47      	ldr	r3, [pc, #284]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	4413      	add	r3, r2
 800afa8:	4a49      	ldr	r2, [pc, #292]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800afaa:	6053      	str	r3, [r2, #4]
		TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800afac:	4b48      	ldr	r3, [pc, #288]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	4b47      	ldr	r3, [pc, #284]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	4413      	add	r3, r2
 800afb6:	4a46      	ldr	r2, [pc, #280]	; (800b0d0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800afb8:	6093      	str	r3, [r2, #8]
	    //ImuAngle += ImuAngV * T1;//角度 rad/msを積算

		//AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
		Angle += AngularV * T1;
#else
		AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
 800afba:	4b44      	ldr	r3, [pc, #272]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800afbc:	ed93 7a00 	vldr	s14, [r3]
 800afc0:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800afc2:	edd3 7a01 	vldr	s15, [r3, #4]
 800afc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afca:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800b0d4 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 800afce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afd2:	4b41      	ldr	r3, [pc, #260]	; (800b0d8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800afd4:	edc3 7a00 	vstr	s15, [r3]
		Angle += AngularV * T1;
 800afd8:	4b3f      	ldr	r3, [pc, #252]	; (800b0d8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800afda:	edd3 7a00 	vldr	s15, [r3]
 800afde:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b0dc <HAL_TIM_PeriodElapsedCallback+0x200>
 800afe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afe6:	4b3e      	ldr	r3, [pc, #248]	; (800b0e0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800afe8:	edd3 7a00 	vldr	s15, [r3]
 800afec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff0:	4b3b      	ldr	r3, [pc, #236]	; (800b0e0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800aff2:	edc3 7a00 	vstr	s15, [r3]

#endif
		int out=0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60fb      	str	r3, [r7, #12]
		out += PIDControl( A_VELO_PID, TargetAngle, Angle);
 800affa:	4b3a      	ldr	r3, [pc, #232]	; (800b0e4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800affc:	edd3 7a00 	vldr	s15, [r3]
 800b000:	4b37      	ldr	r3, [pc, #220]	; (800b0e0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800b002:	ed93 7a00 	vldr	s14, [r3]
 800b006:	eef0 0a47 	vmov.f32	s1, s14
 800b00a:	eeb0 0a67 	vmov.f32	s0, s15
 800b00e:	2000      	movs	r0, #0
 800b010:	f002 f926 	bl	800d260 <PIDControl>
 800b014:	4602      	mov	r2, r0
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
	    out += PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800b01c:	4b32      	ldr	r3, [pc, #200]	; (800b0e8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800b01e:	edd3 6a02 	vldr	s13, [r3, #8]
 800b022:	4b31      	ldr	r3, [pc, #196]	; (800b0e8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800b024:	ed93 7a01 	vldr	s14, [r3, #4]
 800b028:	4b30      	ldr	r3, [pc, #192]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0x210>)
 800b02a:	edd3 7a00 	vldr	s15, [r3]
 800b02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b032:	eef0 0a67 	vmov.f32	s1, s15
 800b036:	eeb0 0a66 	vmov.f32	s0, s13
 800b03a:	2001      	movs	r0, #1
 800b03c:	f002 f910 	bl	800d260 <PIDControl>
 800b040:	4602      	mov	r2, r0
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4413      	add	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
		out += PIDControl( L_WALL_PID, Photo[SL], TargetPhoto[SL]);
 800b048:	4b27      	ldr	r3, [pc, #156]	; (800b0e8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800b04a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b04e:	4b28      	ldr	r3, [pc, #160]	; (800b0f0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800b050:	ed93 7a02 	vldr	s14, [r3, #8]
 800b054:	eef0 0a47 	vmov.f32	s1, s14
 800b058:	eeb0 0a67 	vmov.f32	s0, s15
 800b05c:	2002      	movs	r0, #2
 800b05e:	f002 f8ff 	bl	800d260 <PIDControl>
 800b062:	4602      	mov	r2, r0
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4413      	add	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
		out += PIDControl( R_WALL_PID, TargetPhoto[SR], Photo[SR]);
 800b06a:	4b21      	ldr	r3, [pc, #132]	; (800b0f0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800b06c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b070:	4b1d      	ldr	r3, [pc, #116]	; (800b0e8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800b072:	ed93 7a01 	vldr	s14, [r3, #4]
 800b076:	eef0 0a47 	vmov.f32	s1, s14
 800b07a:	eeb0 0a67 	vmov.f32	s0, s15
 800b07e:	2003      	movs	r0, #3
 800b080:	f002 f8ee 	bl	800d260 <PIDControl>
 800b084:	4602      	mov	r2, r0
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4413      	add	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
		//TargetAngularV = (float)out*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
		if( Pos.Dir == front)
 800b08c:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800b08e:	789b      	ldrb	r3, [r3, #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d133      	bne.n	800b0fc <HAL_TIM_PeriodElapsedCallback+0x220>
		{
			TargetAngularV = (float)out*0.001f;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b09e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b0dc <HAL_TIM_PeriodElapsedCallback+0x200>
 800b0a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800b0a8:	edc3 7a00 	vstr	s15, [r3]
 800b0ac:	e031      	b.n	800b112 <HAL_TIM_PeriodElapsedCallback+0x236>
 800b0ae:	bf00      	nop
 800b0b0:	20000d14 	.word	0x20000d14
 800b0b4:	200003e4 	.word	0x200003e4
 800b0b8:	200003dc 	.word	0x200003dc
 800b0bc:	40000400 	.word	0x40000400
 800b0c0:	20000880 	.word	0x20000880
 800b0c4:	40000800 	.word	0x40000800
 800b0c8:	3f7ccccf 	.word	0x3f7ccccf
 800b0cc:	20000434 	.word	0x20000434
 800b0d0:	20000428 	.word	0x20000428
 800b0d4:	3cd8b836 	.word	0x3cd8b836
 800b0d8:	20000254 	.word	0x20000254
 800b0dc:	3a83126f 	.word	0x3a83126f
 800b0e0:	20000258 	.word	0x20000258
 800b0e4:	20000424 	.word	0x20000424
 800b0e8:	2000044c 	.word	0x2000044c
 800b0ec:	20000414 	.word	0x20000414
 800b0f0:	20000668 	.word	0x20000668
 800b0f4:	20000000 	.word	0x20000000
 800b0f8:	20000400 	.word	0x20000400
		}
		else
		{
			TargetAngularV += AngularAcceleration;
 800b0fc:	4b4f      	ldr	r3, [pc, #316]	; (800b23c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800b0fe:	ed93 7a00 	vldr	s14, [r3]
 800b102:	4b4f      	ldr	r3, [pc, #316]	; (800b240 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800b104:	edd3 7a00 	vldr	s15, [r3]
 800b108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b10c:	4b4b      	ldr	r3, [pc, #300]	; (800b23c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800b10e:	edc3 7a00 	vstr	s15, [r3]
		}
		TargetVelocity[BODY] += Acceleration;
 800b112:	4b4c      	ldr	r3, [pc, #304]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b114:	ed93 7a02 	vldr	s14, [r3, #8]
 800b118:	4b4b      	ldr	r3, [pc, #300]	; (800b248 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800b11a:	edd3 7a00 	vldr	s15, [r3]
 800b11e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b122:	4b48      	ldr	r3, [pc, #288]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b124:	edc3 7a02 	vstr	s15, [r3, #8]
		//TargetAngularV += AngularAcceleration;
		TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b128:	4b46      	ldr	r3, [pc, #280]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b12a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b12e:	4b43      	ldr	r3, [pc, #268]	; (800b23c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800b130:	edd3 7a00 	vldr	s15, [r3]
 800b134:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b24c <HAL_TIM_PeriodElapsedCallback+0x370>
 800b138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b13c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b140:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b144:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b148:	4b3e      	ldr	r3, [pc, #248]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b14a:	edc3 7a01 	vstr	s15, [r3, #4]
		TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b14e:	4b3b      	ldr	r3, [pc, #236]	; (800b23c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800b150:	edd3 7a00 	vldr	s15, [r3]
 800b154:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b24c <HAL_TIM_PeriodElapsedCallback+0x370>
 800b158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b15c:	4b39      	ldr	r3, [pc, #228]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b15e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b162:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b166:	4b37      	ldr	r3, [pc, #220]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b168:	edc3 7a00 	vstr	s15, [r3]

		VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b16c:	4b35      	ldr	r3, [pc, #212]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b16e:	edd3 7a00 	vldr	s15, [r3]
 800b172:	4b37      	ldr	r3, [pc, #220]	; (800b250 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800b174:	ed93 7a00 	vldr	s14, [r3]
 800b178:	eef0 0a47 	vmov.f32	s1, s14
 800b17c:	eeb0 0a67 	vmov.f32	s0, s15
 800b180:	2004      	movs	r0, #4
 800b182:	f002 f86d 	bl	800d260 <PIDControl>
 800b186:	4602      	mov	r2, r0
 800b188:	4b32      	ldr	r3, [pc, #200]	; (800b254 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800b18a:	601a      	str	r2, [r3, #0]
		VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b18c:	4b2d      	ldr	r3, [pc, #180]	; (800b244 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800b18e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b192:	4b2f      	ldr	r3, [pc, #188]	; (800b250 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800b194:	ed93 7a01 	vldr	s14, [r3, #4]
 800b198:	eef0 0a47 	vmov.f32	s1, s14
 800b19c:	eeb0 0a67 	vmov.f32	s0, s15
 800b1a0:	2005      	movs	r0, #5
 800b1a2:	f002 f85d 	bl	800d260 <PIDControl>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	4b2b      	ldr	r3, [pc, #172]	; (800b258 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800b1aa:	601a      	str	r2, [r3, #0]

		//モータに出力
		Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b1ac:	4b29      	ldr	r3, [pc, #164]	; (800b254 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	4b29      	ldr	r3, [pc, #164]	; (800b258 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	f004 f87e 	bl	800f2b8 <Motor_Switch>
//もう一回車体速度制御+角速度制御でやってみる。ダメだった。ブレブレ。
//PIDの関数の処理の重さはどうか。

	}

	if( htim == &htim8)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a27      	ldr	r2, [pc, #156]	; (800b25c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d136      	bne.n	800b232 <HAL_TIM_PeriodElapsedCallback+0x356>
	{
		//timer += t;
		timer8 += t;
 800b1c4:	4b26      	ldr	r3, [pc, #152]	; (800b260 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	4b26      	ldr	r3, [pc, #152]	; (800b264 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4a24      	ldr	r2, [pc, #144]	; (800b260 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800b1d0:	6013      	str	r3, [r2, #0]

		//壁センサデータの更新だけ
		//UpdatePhotoData();
		//処理がこれだけなら影響しない。問題はTIM1の処理の重さ。1msで終えられていないから狂ってくる。
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800b1d2:	4b25      	ldr	r3, [pc, #148]	; (800b268 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4619      	mov	r1, r3
 800b1da:	200a      	movs	r0, #10
 800b1dc:	f7ff fa76 	bl	800a6cc <GetWallDataAverage>
 800b1e0:	eef0 7a40 	vmov.f32	s15, s0
 800b1e4:	4b21      	ldr	r3, [pc, #132]	; (800b26c <HAL_TIM_PeriodElapsedCallback+0x390>)
 800b1e6:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800b1ea:	4b1f      	ldr	r3, [pc, #124]	; (800b268 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	200a      	movs	r0, #10
 800b1f4:	f7ff fa6a 	bl	800a6cc <GetWallDataAverage>
 800b1f8:	eef0 7a40 	vmov.f32	s15, s0
 800b1fc:	4b1b      	ldr	r3, [pc, #108]	; (800b26c <HAL_TIM_PeriodElapsedCallback+0x390>)
 800b1fe:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800b202:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2202      	movs	r2, #2
 800b208:	4619      	mov	r1, r3
 800b20a:	200a      	movs	r0, #10
 800b20c:	f7ff fa5e 	bl	800a6cc <GetWallDataAverage>
 800b210:	eef0 7a40 	vmov.f32	s15, s0
 800b214:	4b15      	ldr	r3, [pc, #84]	; (800b26c <HAL_TIM_PeriodElapsedCallback+0x390>)
 800b216:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800b21a:	4b15      	ldr	r3, [pc, #84]	; (800b270 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2203      	movs	r2, #3
 800b220:	4619      	mov	r1, r3
 800b222:	200a      	movs	r0, #10
 800b224:	f7ff fa52 	bl	800a6cc <GetWallDataAverage>
 800b228:	eef0 7a40 	vmov.f32	s15, s0
 800b22c:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <HAL_TIM_PeriodElapsedCallback+0x390>)
 800b22e:	edc3 7a03 	vstr	s15, [r3, #12]
//	if( htim == &htim9)
//	{
//		timer8 += t;
//
//	}
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000400 	.word	0x20000400
 800b240:	2000041c 	.word	0x2000041c
 800b244:	200003f0 	.word	0x200003f0
 800b248:	20000420 	.word	0x20000420
 800b24c:	42173333 	.word	0x42173333
 800b250:	20000434 	.word	0x20000434
 800b254:	20000660 	.word	0x20000660
 800b258:	2000067c 	.word	0x2000067c
 800b25c:	20000a8c 	.word	0x20000a8c
 800b260:	200003e0 	.word	0x200003e0
 800b264:	200003dc 	.word	0x200003dc
 800b268:	200003c0 	.word	0x200003c0
 800b26c:	2000044c 	.word	0x2000044c
 800b270:	200003cc 	.word	0x200003cc

0800b274 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b27a:	4b2c      	ldr	r3, [pc, #176]	; (800b32c <flash_store_init+0xb8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b280:	2300      	movs	r3, #0
 800b282:	60bb      	str	r3, [r7, #8]
 800b284:	e04b      	b.n	800b31e <flash_store_init+0xaa>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b286:	2300      	movs	r3, #0
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	e042      	b.n	800b312 <flash_store_init+0x9e>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b28c:	4928      	ldr	r1, [pc, #160]	; (800b330 <flash_store_init+0xbc>)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	011a      	lsls	r2, r3, #4
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4413      	add	r3, r2
 800b296:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b29a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f003 fcde 	bl	800ec64 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	1d18      	adds	r0, r3, #4
 800b2ac:	4920      	ldr	r1, [pc, #128]	; (800b330 <flash_store_init+0xbc>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	011a      	lsls	r2, r3, #4
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b2ba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	f003 fccf 	bl	800ec64 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f103 0008 	add.w	r0, r3, #8
 800b2cc:	4918      	ldr	r1, [pc, #96]	; (800b330 <flash_store_init+0xbc>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	011a      	lsls	r2, r3, #4
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b2da:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	f003 fcbf 	bl	800ec64 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f103 000c 	add.w	r0, r3, #12
 800b2ec:	4910      	ldr	r1, [pc, #64]	; (800b330 <flash_store_init+0xbc>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	011a      	lsls	r2, r3, #4
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b2fa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	4619      	mov	r1, r3
 800b302:	f003 fcaf 	bl	800ec64 <FLASH_Write_Word>
				address += 16;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	3310      	adds	r3, #16
 800b30a:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3301      	adds	r3, #1
 800b310:	607b      	str	r3, [r7, #4]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b0f      	cmp	r3, #15
 800b316:	ddb9      	ble.n	800b28c <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b0f      	cmp	r3, #15
 800b322:	ddb0      	ble.n	800b286 <flash_store_init+0x12>
			}
	}
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	080198d4 	.word	0x080198d4
 800b330:	2000088c 	.word	0x2000088c

0800b334 <wall_init>:
void wall_init(){
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e03b      	b.n	800b3b8 <wall_init+0x84>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b340:	2300      	movs	r3, #0
 800b342:	60bb      	str	r3, [r7, #8]
 800b344:	e032      	b.n	800b3ac <wall_init+0x78>
				Wall[i][j].north = UNKNOWN;
 800b346:	4945      	ldr	r1, [pc, #276]	; (800b45c <wall_init+0x128>)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	011a      	lsls	r2, r3, #4
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	441a      	add	r2, r3
 800b350:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b354:	2002      	movs	r0, #2
 800b356:	f360 0301 	bfi	r3, r0, #0, #2
 800b35a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b35e:	493f      	ldr	r1, [pc, #252]	; (800b45c <wall_init+0x128>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	011a      	lsls	r2, r3, #4
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	441a      	add	r2, r3
 800b368:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b36c:	2002      	movs	r0, #2
 800b36e:	f360 0383 	bfi	r3, r0, #2, #2
 800b372:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b376:	4939      	ldr	r1, [pc, #228]	; (800b45c <wall_init+0x128>)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	011a      	lsls	r2, r3, #4
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	441a      	add	r2, r3
 800b380:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b384:	2002      	movs	r0, #2
 800b386:	f360 1305 	bfi	r3, r0, #4, #2
 800b38a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b38e:	4933      	ldr	r1, [pc, #204]	; (800b45c <wall_init+0x128>)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	011a      	lsls	r2, r3, #4
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	441a      	add	r2, r3
 800b398:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b39c:	2002      	movs	r0, #2
 800b39e:	f360 1387 	bfi	r3, r0, #6, #2
 800b3a2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	60bb      	str	r3, [r7, #8]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2b0f      	cmp	r3, #15
 800b3b0:	ddc9      	ble.n	800b346 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	ddc0      	ble.n	800b340 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b3be:	2300      	movs	r3, #0
 800b3c0:	607b      	str	r3, [r7, #4]
 800b3c2:	e02a      	b.n	800b41a <wall_init+0xe6>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b3c4:	4a25      	ldr	r2, [pc, #148]	; (800b45c <wall_init+0x128>)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	015b      	lsls	r3, r3, #5
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f103 021e 	add.w	r2, r3, #30
 800b3d0:	7813      	ldrb	r3, [r2, #0]
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	f361 0301 	bfi	r3, r1, #0, #2
 800b3d8:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b3da:	4920      	ldr	r1, [pc, #128]	; (800b45c <wall_init+0x128>)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b3e2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	f360 0383 	bfi	r3, r0, #2, #2
 800b3ec:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b3f0:	4a1a      	ldr	r2, [pc, #104]	; (800b45c <wall_init+0x128>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	015b      	lsls	r3, r3, #5
 800b3f6:	441a      	add	r2, r3
 800b3f8:	7813      	ldrb	r3, [r2, #0]
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	f361 1305 	bfi	r3, r1, #4, #2
 800b400:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b402:	4916      	ldr	r1, [pc, #88]	; (800b45c <wall_init+0x128>)
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b40a:	2001      	movs	r0, #1
 800b40c:	f360 1387 	bfi	r3, r0, #6, #2
 800b410:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b0f      	cmp	r3, #15
 800b41e:	ddd1      	ble.n	800b3c4 <wall_init+0x90>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b420:	4a0e      	ldr	r2, [pc, #56]	; (800b45c <wall_init+0x128>)
 800b422:	7813      	ldrb	r3, [r2, #0]
 800b424:	2101      	movs	r1, #1
 800b426:	f361 0383 	bfi	r3, r1, #2, #2
 800b42a:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b42c:	4a0b      	ldr	r2, [pc, #44]	; (800b45c <wall_init+0x128>)
 800b42e:	7813      	ldrb	r3, [r2, #0]
 800b430:	f36f 0301 	bfc	r3, #0, #2
 800b434:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b436:	4a09      	ldr	r2, [pc, #36]	; (800b45c <wall_init+0x128>)
 800b438:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b43c:	2101      	movs	r1, #1
 800b43e:	f361 1387 	bfi	r3, r1, #6, #2
 800b442:	f882 3020 	strb.w	r3, [r2, #32]
	Wall[0][1].south = NOWALL;
 800b446:	4a05      	ldr	r2, [pc, #20]	; (800b45c <wall_init+0x128>)
 800b448:	7893      	ldrb	r3, [r2, #2]
 800b44a:	f36f 1305 	bfc	r3, #4, #2
 800b44e:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800b450:	bf00      	nop
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	2000088c 	.word	0x2000088c

0800b460 <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800b460:	b490      	push	{r4, r7}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800b466:	4b8b      	ldr	r3, [pc, #556]	; (800b694 <wall_set+0x234>)
 800b468:	ed93 7a00 	vldr	s14, [r3]
 800b46c:	4b89      	ldr	r3, [pc, #548]	; (800b694 <wall_set+0x234>)
 800b46e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b472:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b476:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b47a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b47e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800b698 <wall_set+0x238>
 800b482:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48a:	bfcc      	ite	gt
 800b48c:	2301      	movgt	r3, #1
 800b48e:	2300      	movle	r3, #0
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b82      	ldr	r3, [pc, #520]	; (800b69c <wall_set+0x23c>)
 800b494:	7a5b      	ldrb	r3, [r3, #9]
 800b496:	f107 0108 	add.w	r1, r7, #8
 800b49a:	440b      	add	r3, r1
 800b49c:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800b4a0:	4b7c      	ldr	r3, [pc, #496]	; (800b694 <wall_set+0x234>)
 800b4a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b4a6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b6a0 <wall_set+0x240>
 800b4aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b2:	bfcc      	ite	gt
 800b4b4:	2301      	movgt	r3, #1
 800b4b6:	2300      	movle	r3, #0
 800b4b8:	b2d9      	uxtb	r1, r3
 800b4ba:	4b78      	ldr	r3, [pc, #480]	; (800b69c <wall_set+0x23c>)
 800b4bc:	7a5b      	ldrb	r3, [r3, #9]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	425a      	negs	r2, r3
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	f002 0203 	and.w	r2, r2, #3
 800b4ca:	bf58      	it	pl
 800b4cc:	4253      	negpl	r3, r2
 800b4ce:	460a      	mov	r2, r1
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	440b      	add	r3, r1
 800b4d6:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800b4da:	4b70      	ldr	r3, [pc, #448]	; (800b69c <wall_set+0x23c>)
 800b4dc:	7a5b      	ldrb	r3, [r3, #9]
 800b4de:	3302      	adds	r3, #2
 800b4e0:	425a      	negs	r2, r3
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	f002 0203 	and.w	r2, r2, #3
 800b4ea:	bf58      	it	pl
 800b4ec:	4253      	negpl	r3, r2
 800b4ee:	f107 0208 	add.w	r2, r7, #8
 800b4f2:	4413      	add	r3, r2
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800b4fa:	4b66      	ldr	r3, [pc, #408]	; (800b694 <wall_set+0x234>)
 800b4fc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b500:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b6a4 <wall_set+0x244>
 800b504:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50c:	bfcc      	ite	gt
 800b50e:	2301      	movgt	r3, #1
 800b510:	2300      	movle	r3, #0
 800b512:	b2d9      	uxtb	r1, r3
 800b514:	4b61      	ldr	r3, [pc, #388]	; (800b69c <wall_set+0x23c>)
 800b516:	7a5b      	ldrb	r3, [r3, #9]
 800b518:	3303      	adds	r3, #3
 800b51a:	425a      	negs	r2, r3
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	f002 0203 	and.w	r2, r2, #3
 800b524:	bf58      	it	pl
 800b526:	4253      	negpl	r3, r2
 800b528:	460a      	mov	r2, r1
 800b52a:	f107 0108 	add.w	r1, r7, #8
 800b52e:	440b      	add	r3, r1
 800b530:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800b534:	7939      	ldrb	r1, [r7, #4]
 800b536:	4b59      	ldr	r3, [pc, #356]	; (800b69c <wall_set+0x23c>)
 800b538:	799b      	ldrb	r3, [r3, #6]
 800b53a:	461c      	mov	r4, r3
 800b53c:	4b57      	ldr	r3, [pc, #348]	; (800b69c <wall_set+0x23c>)
 800b53e:	79db      	ldrb	r3, [r3, #7]
 800b540:	461a      	mov	r2, r3
 800b542:	460b      	mov	r3, r1
 800b544:	f003 0303 	and.w	r3, r3, #3
 800b548:	b2d8      	uxtb	r0, r3
 800b54a:	4957      	ldr	r1, [pc, #348]	; (800b6a8 <wall_set+0x248>)
 800b54c:	0123      	lsls	r3, r4, #4
 800b54e:	441a      	add	r2, r3
 800b550:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b554:	f360 0301 	bfi	r3, r0, #0, #2
 800b558:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800b55c:	7979      	ldrb	r1, [r7, #5]
 800b55e:	4b4f      	ldr	r3, [pc, #316]	; (800b69c <wall_set+0x23c>)
 800b560:	799b      	ldrb	r3, [r3, #6]
 800b562:	461c      	mov	r4, r3
 800b564:	4b4d      	ldr	r3, [pc, #308]	; (800b69c <wall_set+0x23c>)
 800b566:	79db      	ldrb	r3, [r3, #7]
 800b568:	461a      	mov	r2, r3
 800b56a:	460b      	mov	r3, r1
 800b56c:	f003 0303 	and.w	r3, r3, #3
 800b570:	b2d8      	uxtb	r0, r3
 800b572:	494d      	ldr	r1, [pc, #308]	; (800b6a8 <wall_set+0x248>)
 800b574:	0123      	lsls	r3, r4, #4
 800b576:	441a      	add	r2, r3
 800b578:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b57c:	f360 0383 	bfi	r3, r0, #2, #2
 800b580:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800b584:	79b9      	ldrb	r1, [r7, #6]
 800b586:	4b45      	ldr	r3, [pc, #276]	; (800b69c <wall_set+0x23c>)
 800b588:	799b      	ldrb	r3, [r3, #6]
 800b58a:	461c      	mov	r4, r3
 800b58c:	4b43      	ldr	r3, [pc, #268]	; (800b69c <wall_set+0x23c>)
 800b58e:	79db      	ldrb	r3, [r3, #7]
 800b590:	461a      	mov	r2, r3
 800b592:	460b      	mov	r3, r1
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	b2d8      	uxtb	r0, r3
 800b59a:	4943      	ldr	r1, [pc, #268]	; (800b6a8 <wall_set+0x248>)
 800b59c:	0123      	lsls	r3, r4, #4
 800b59e:	441a      	add	r2, r3
 800b5a0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5a4:	f360 1305 	bfi	r3, r0, #4, #2
 800b5a8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800b5ac:	79f9      	ldrb	r1, [r7, #7]
 800b5ae:	4b3b      	ldr	r3, [pc, #236]	; (800b69c <wall_set+0x23c>)
 800b5b0:	799b      	ldrb	r3, [r3, #6]
 800b5b2:	461c      	mov	r4, r3
 800b5b4:	4b39      	ldr	r3, [pc, #228]	; (800b69c <wall_set+0x23c>)
 800b5b6:	79db      	ldrb	r3, [r3, #7]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	b2d8      	uxtb	r0, r3
 800b5c2:	4939      	ldr	r1, [pc, #228]	; (800b6a8 <wall_set+0x248>)
 800b5c4:	0123      	lsls	r3, r4, #4
 800b5c6:	441a      	add	r2, r3
 800b5c8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5cc:	f360 1387 	bfi	r3, r0, #6, #2
 800b5d0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800b5d4:	4b31      	ldr	r3, [pc, #196]	; (800b69c <wall_set+0x23c>)
 800b5d6:	79db      	ldrb	r3, [r3, #7]
 800b5d8:	2b0e      	cmp	r3, #14
 800b5da:	d812      	bhi.n	800b602 <wall_set+0x1a2>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800b5dc:	7939      	ldrb	r1, [r7, #4]
 800b5de:	4b2f      	ldr	r3, [pc, #188]	; (800b69c <wall_set+0x23c>)
 800b5e0:	799b      	ldrb	r3, [r3, #6]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <wall_set+0x23c>)
 800b5e6:	79db      	ldrb	r3, [r3, #7]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	f001 0103 	and.w	r1, r1, #3
 800b5ee:	b2c8      	uxtb	r0, r1
 800b5f0:	492d      	ldr	r1, [pc, #180]	; (800b6a8 <wall_set+0x248>)
 800b5f2:	0112      	lsls	r2, r2, #4
 800b5f4:	441a      	add	r2, r3
 800b5f6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5fa:	f360 1305 	bfi	r3, r0, #4, #2
 800b5fe:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800b602:	4b26      	ldr	r3, [pc, #152]	; (800b69c <wall_set+0x23c>)
 800b604:	799b      	ldrb	r3, [r3, #6]
 800b606:	2b0e      	cmp	r3, #14
 800b608:	d811      	bhi.n	800b62e <wall_set+0x1ce>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800b60a:	7979      	ldrb	r1, [r7, #5]
 800b60c:	4b23      	ldr	r3, [pc, #140]	; (800b69c <wall_set+0x23c>)
 800b60e:	799b      	ldrb	r3, [r3, #6]
 800b610:	3301      	adds	r3, #1
 800b612:	4a22      	ldr	r2, [pc, #136]	; (800b69c <wall_set+0x23c>)
 800b614:	79d2      	ldrb	r2, [r2, #7]
 800b616:	f001 0103 	and.w	r1, r1, #3
 800b61a:	b2c8      	uxtb	r0, r1
 800b61c:	4922      	ldr	r1, [pc, #136]	; (800b6a8 <wall_set+0x248>)
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	441a      	add	r2, r3
 800b622:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b626:	f360 1387 	bfi	r3, r0, #6, #2
 800b62a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800b62e:	4b1b      	ldr	r3, [pc, #108]	; (800b69c <wall_set+0x23c>)
 800b630:	79db      	ldrb	r3, [r3, #7]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d012      	beq.n	800b65c <wall_set+0x1fc>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800b636:	79b9      	ldrb	r1, [r7, #6]
 800b638:	4b18      	ldr	r3, [pc, #96]	; (800b69c <wall_set+0x23c>)
 800b63a:	799b      	ldrb	r3, [r3, #6]
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b17      	ldr	r3, [pc, #92]	; (800b69c <wall_set+0x23c>)
 800b640:	79db      	ldrb	r3, [r3, #7]
 800b642:	3b01      	subs	r3, #1
 800b644:	f001 0103 	and.w	r1, r1, #3
 800b648:	b2c8      	uxtb	r0, r1
 800b64a:	4917      	ldr	r1, [pc, #92]	; (800b6a8 <wall_set+0x248>)
 800b64c:	0112      	lsls	r2, r2, #4
 800b64e:	441a      	add	r2, r3
 800b650:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b654:	f360 0301 	bfi	r3, r0, #0, #2
 800b658:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800b65c:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <wall_set+0x23c>)
 800b65e:	799b      	ldrb	r3, [r3, #6]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d011      	beq.n	800b688 <wall_set+0x228>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800b664:	79f9      	ldrb	r1, [r7, #7]
 800b666:	4b0d      	ldr	r3, [pc, #52]	; (800b69c <wall_set+0x23c>)
 800b668:	799b      	ldrb	r3, [r3, #6]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4a0b      	ldr	r2, [pc, #44]	; (800b69c <wall_set+0x23c>)
 800b66e:	79d2      	ldrb	r2, [r2, #7]
 800b670:	f001 0103 	and.w	r1, r1, #3
 800b674:	b2c8      	uxtb	r0, r1
 800b676:	490c      	ldr	r1, [pc, #48]	; (800b6a8 <wall_set+0x248>)
 800b678:	011b      	lsls	r3, r3, #4
 800b67a:	441a      	add	r2, r3
 800b67c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b680:	f360 0383 	bfi	r3, r0, #2, #2
 800b684:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc90      	pop	{r4, r7}
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	2000044c 	.word	0x2000044c
 800b698:	428c0000 	.word	0x428c0000
 800b69c:	20000000 	.word	0x20000000
 800b6a0:	42b40000 	.word	0x42b40000
 800b6a4:	42c80000 	.word	0x42c80000
 800b6a8:	2000088c 	.word	0x2000088c

0800b6ac <init_map>:


void init_map(int x, int y)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e013      	b.n	800b6e4 <init_map+0x38>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	e00a      	b.n	800b6d8 <init_map+0x2c>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800b6c2:	491f      	ldr	r1, [pc, #124]	; (800b740 <init_map+0x94>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	011a      	lsls	r2, r3, #4
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	22ff      	movs	r2, #255	; 0xff
 800b6ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b0f      	cmp	r3, #15
 800b6dc:	ddf1      	ble.n	800b6c2 <init_map+0x16>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b0f      	cmp	r3, #15
 800b6e8:	dde8      	ble.n	800b6bc <init_map+0x10>
		}
	}

	walk_map[x][y] = 0;				//ゴール座標の歩数を０に設定
 800b6ea:	4915      	ldr	r1, [pc, #84]	; (800b740 <init_map+0x94>)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	011a      	lsls	r2, r3, #4
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x][y+1] = 0;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	4910      	ldr	r1, [pc, #64]	; (800b740 <init_map+0x94>)
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	0112      	lsls	r2, r2, #4
 800b704:	4413      	add	r3, r2
 800b706:	2200      	movs	r2, #0
 800b708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y] = 0;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3301      	adds	r3, #1
 800b710:	490b      	ldr	r1, [pc, #44]	; (800b740 <init_map+0x94>)
 800b712:	011a      	lsls	r2, r3, #4
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	4413      	add	r3, r2
 800b718:	2200      	movs	r2, #0
 800b71a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y+1] = 0;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	4906      	ldr	r1, [pc, #24]	; (800b740 <init_map+0x94>)
 800b728:	0112      	lsls	r2, r2, #4
 800b72a:	4413      	add	r3, r2
 800b72c:	2200      	movs	r2, #0
 800b72e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	//歩数マップは合ってることにしよう。

}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	2000045c 	.word	0x2000045c

0800b744 <make_map>:


void make_map(int x, int y, int mask)	//歩数マップを作成する
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800b750:	68b9      	ldr	r1, [r7, #8]
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f7ff ffaa 	bl	800b6ac <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b758:	2300      	movs	r3, #0
 800b75a:	75fb      	strb	r3, [r7, #23]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b75c:	2300      	movs	r3, #0
 800b75e:	61fb      	str	r3, [r7, #28]
 800b760:	e0d8      	b.n	800b914 <make_map+0x1d0>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b762:	2300      	movs	r3, #0
 800b764:	61bb      	str	r3, [r7, #24]
 800b766:	e0ce      	b.n	800b906 <make_map+0x1c2>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800b768:	4970      	ldr	r1, [pc, #448]	; (800b92c <make_map+0x1e8>)
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	011a      	lsls	r2, r3, #4
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	4413      	add	r3, r2
 800b772:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b776:	2bff      	cmp	r3, #255	; 0xff
 800b778:	f000 80c1 	beq.w	800b8fe <make_map+0x1ba>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	2b0e      	cmp	r3, #14
 800b780:	dc2c      	bgt.n	800b7dc <make_map+0x98>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b782:	496b      	ldr	r1, [pc, #428]	; (800b930 <make_map+0x1ec>)
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	011a      	lsls	r2, r3, #4
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	4413      	add	r3, r2
 800b78c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b790:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b794:	b2db      	uxtb	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4013      	ands	r3, r2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d11d      	bne.n	800b7dc <make_map+0x98>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4961      	ldr	r1, [pc, #388]	; (800b92c <make_map+0x1e8>)
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	0112      	lsls	r2, r2, #4
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b7b0:	2bff      	cmp	r3, #255	; 0xff
 800b7b2:	d113      	bne.n	800b7dc <make_map+0x98>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800b7b4:	495d      	ldr	r1, [pc, #372]	; (800b92c <make_map+0x1e8>)
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	011a      	lsls	r2, r3, #4
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	4413      	add	r3, r2
 800b7be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	3201      	adds	r2, #1
 800b7c8:	b290      	uxth	r0, r2
 800b7ca:	4958      	ldr	r1, [pc, #352]	; (800b92c <make_map+0x1e8>)
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	0112      	lsls	r2, r2, #4
 800b7d0:	4413      	add	r3, r2
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b7d8:	2301      	movs	r3, #1
 800b7da:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	2b0e      	cmp	r3, #14
 800b7e0:	dc2c      	bgt.n	800b83c <make_map+0xf8>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800b7e2:	4953      	ldr	r1, [pc, #332]	; (800b930 <make_map+0x1ec>)
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	011a      	lsls	r2, r3, #4
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b7f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11d      	bne.n	800b83c <make_map+0xf8>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	3301      	adds	r3, #1
 800b804:	4949      	ldr	r1, [pc, #292]	; (800b92c <make_map+0x1e8>)
 800b806:	011a      	lsls	r2, r3, #4
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	4413      	add	r3, r2
 800b80c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b810:	2bff      	cmp	r3, #255	; 0xff
 800b812:	d113      	bne.n	800b83c <make_map+0xf8>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800b814:	4945      	ldr	r1, [pc, #276]	; (800b92c <make_map+0x1e8>)
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	011a      	lsls	r2, r3, #4
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	4413      	add	r3, r2
 800b81e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	3301      	adds	r3, #1
 800b826:	3201      	adds	r2, #1
 800b828:	b290      	uxth	r0, r2
 800b82a:	4940      	ldr	r1, [pc, #256]	; (800b92c <make_map+0x1e8>)
 800b82c:	011a      	lsls	r2, r3, #4
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	4413      	add	r3, r2
 800b832:	4602      	mov	r2, r0
 800b834:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b838:	2301      	movs	r3, #1
 800b83a:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dd2c      	ble.n	800b89c <make_map+0x158>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800b842:	493b      	ldr	r1, [pc, #236]	; (800b930 <make_map+0x1ec>)
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	011a      	lsls	r2, r3, #4
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	4413      	add	r3, r2
 800b84c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b850:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b854:	b2db      	uxtb	r3, r3
 800b856:	461a      	mov	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4013      	ands	r3, r2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d11d      	bne.n	800b89c <make_map+0x158>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	3b01      	subs	r3, #1
 800b864:	4931      	ldr	r1, [pc, #196]	; (800b92c <make_map+0x1e8>)
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	0112      	lsls	r2, r2, #4
 800b86a:	4413      	add	r3, r2
 800b86c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b870:	2bff      	cmp	r3, #255	; 0xff
 800b872:	d113      	bne.n	800b89c <make_map+0x158>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800b874:	492d      	ldr	r1, [pc, #180]	; (800b92c <make_map+0x1e8>)
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	011a      	lsls	r2, r3, #4
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	4413      	add	r3, r2
 800b87e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	3b01      	subs	r3, #1
 800b886:	3201      	adds	r2, #1
 800b888:	b290      	uxth	r0, r2
 800b88a:	4928      	ldr	r1, [pc, #160]	; (800b92c <make_map+0x1e8>)
 800b88c:	69fa      	ldr	r2, [r7, #28]
 800b88e:	0112      	lsls	r2, r2, #4
 800b890:	4413      	add	r3, r2
 800b892:	4602      	mov	r2, r0
 800b894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b898:	2301      	movs	r3, #1
 800b89a:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd2e      	ble.n	800b900 <make_map+0x1bc>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800b8a2:	4923      	ldr	r1, [pc, #140]	; (800b930 <make_map+0x1ec>)
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	011a      	lsls	r2, r3, #4
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b8b0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11f      	bne.n	800b900 <make_map+0x1bc>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	4919      	ldr	r1, [pc, #100]	; (800b92c <make_map+0x1e8>)
 800b8c6:	011a      	lsls	r2, r3, #4
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b8d0:	2bff      	cmp	r3, #255	; 0xff
 800b8d2:	d115      	bne.n	800b900 <make_map+0x1bc>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800b8d4:	4915      	ldr	r1, [pc, #84]	; (800b92c <make_map+0x1e8>)
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	011a      	lsls	r2, r3, #4
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	4413      	add	r3, r2
 800b8de:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	3201      	adds	r2, #1
 800b8e8:	b290      	uxth	r0, r2
 800b8ea:	4910      	ldr	r1, [pc, #64]	; (800b92c <make_map+0x1e8>)
 800b8ec:	011a      	lsls	r2, r3, #4
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]
 800b8fc:	e000      	b.n	800b900 <make_map+0x1bc>
					continue;
 800b8fe:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	3301      	adds	r3, #1
 800b904:	61bb      	str	r3, [r7, #24]
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	2b0f      	cmp	r3, #15
 800b90a:	f77f af2d 	ble.w	800b768 <make_map+0x24>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	3301      	adds	r3, #1
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	f77f af23 	ble.w	800b762 <make_map+0x1e>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f47f af1a 	bne.w	800b758 <make_map+0x14>

}
 800b924:	bf00      	nop
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000045c 	.word	0x2000045c
 800b930:	2000088c 	.word	0x2000088c

0800b934 <map_print>:
//		GoalAreaFlag = (Wall[ X_GOAL_LESSER+i][Y_GOAL_LESSER].west == UNKNOWN) ? 0 : 1;
//	}

}
void map_print()
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
	int i,j;
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800b93a:	230f      	movs	r3, #15
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	e019      	b.n	800b974 <map_print+0x40>
	{
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800b940:	2300      	movs	r3, #0
 800b942:	607b      	str	r3, [r7, #4]
 800b944:	e00d      	b.n	800b962 <map_print+0x2e>
		{
			printf("%d ",walk_map[i][j]);
 800b946:	490f      	ldr	r1, [pc, #60]	; (800b984 <map_print+0x50>)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	011a      	lsls	r2, r3, #4
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	4413      	add	r3, r2
 800b950:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b954:	4619      	mov	r1, r3
 800b956:	480c      	ldr	r0, [pc, #48]	; (800b988 <map_print+0x54>)
 800b958:	f009 fc02 	bl	8015160 <iprintf>
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b0f      	cmp	r3, #15
 800b966:	ddee      	ble.n	800b946 <map_print+0x12>
//			if(j == NUMBER_OF_SQUARES)
//			{
//				printf("\r\n");
//			}
		}
		printf("\r\n");
 800b968:	4808      	ldr	r0, [pc, #32]	; (800b98c <map_print+0x58>)
 800b96a:	f009 fc81 	bl	8015270 <puts>
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	3b01      	subs	r3, #1
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	dae2      	bge.n	800b940 <map_print+0xc>
	}
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	2000045c 	.word	0x2000045c
 800b988:	08019740 	.word	0x08019740
 800b98c:	08019744 	.word	0x08019744

0800b990 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800b990:	b5b0      	push	{r4, r5, r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800b996:	230f      	movs	r3, #15
 800b998:	607b      	str	r3, [r7, #4]
 800b99a:	e040      	b.n	800ba1e <wall_ram_print+0x8e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b99c:	2300      	movs	r3, #0
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	e034      	b.n	800ba0c <wall_ram_print+0x7c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800b9a2:	4925      	ldr	r1, [pc, #148]	; (800ba38 <wall_ram_print+0xa8>)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	011a      	lsls	r2, r3, #4
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	491f      	ldr	r1, [pc, #124]	; (800ba38 <wall_ram_print+0xa8>)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	011a      	lsls	r2, r3, #4
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	461c      	mov	r4, r3
 800b9ce:	491a      	ldr	r1, [pc, #104]	; (800ba38 <wall_ram_print+0xa8>)
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	011a      	lsls	r2, r3, #4
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9dc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	461d      	mov	r5, r3
 800b9e4:	4914      	ldr	r1, [pc, #80]	; (800ba38 <wall_ram_print+0xa8>)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	011a      	lsls	r2, r3, #4
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9f2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4601      	mov	r1, r0
 800ba00:	480e      	ldr	r0, [pc, #56]	; (800ba3c <wall_ram_print+0xac>)
 800ba02:	f009 fbad 	bl	8015160 <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b0f      	cmp	r3, #15
 800ba10:	ddc7      	ble.n	800b9a2 <wall_ram_print+0x12>

		}
		printf("\r\n");
 800ba12:	480b      	ldr	r0, [pc, #44]	; (800ba40 <wall_ram_print+0xb0>)
 800ba14:	f009 fc2c 	bl	8015270 <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dabb      	bge.n	800b99c <wall_ram_print+0xc>
	}

	printf("\r\n");
 800ba24:	4806      	ldr	r0, [pc, #24]	; (800ba40 <wall_ram_print+0xb0>)
 800ba26:	f009 fc23 	bl	8015270 <puts>
	printf("\r\n");
 800ba2a:	4805      	ldr	r0, [pc, #20]	; (800ba40 <wall_ram_print+0xb0>)
 800ba2c:	f009 fc20 	bl	8015270 <puts>
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bdb0      	pop	{r4, r5, r7, pc}
 800ba38:	2000088c 	.word	0x2000088c
 800ba3c:	08019758 	.word	0x08019758
 800ba40:	08019744 	.word	0x08019744

0800ba44 <wall_flash_print>:
void wall_flash_print()
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
	uint32_t address = start_adress_sector1;
 800ba4a:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <wall_flash_print+0x8c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	60fb      	str	r3, [r7, #12]
	address += (NUMBER_OF_SQUARES-1) * 16*NUMBER_OF_SQUARES;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800ba56:	60fb      	str	r3, [r7, #12]

	for(int i=0; i < NUMBER_OF_SQUARES ; i++)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60bb      	str	r3, [r7, #8]
 800ba5c:	e02a      	b.n	800bab4 <wall_flash_print+0x70>
	{
		for(int j=0; j < NUMBER_OF_SQUARES*4 ; j++)
 800ba5e:	2300      	movs	r3, #0
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	e01a      	b.n	800ba9a <wall_flash_print+0x56>
		{
			uint32_t wall_data=0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	603b      	str	r3, [r7, #0]
			//printf("%lu %lu\r\n",address,wall_data);
			FLASH_Read_Word(address, &wall_data);
 800ba68:	463b      	mov	r3, r7
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f003 f921 	bl	800ecb4 <FLASH_Read_Word>
			printf("%lu",wall_data);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	4817      	ldr	r0, [pc, #92]	; (800bad4 <wall_flash_print+0x90>)
 800ba78:	f009 fb72 	bl	8015160 <iprintf>
			address+= 0x04;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	60fb      	str	r3, [r7, #12]
			if( (j+1)%4 == 0)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3301      	adds	r3, #1
 800ba86:	f003 0303 	and.w	r3, r3, #3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <wall_flash_print+0x50>
			{
				printf(" ");
 800ba8e:	2020      	movs	r0, #32
 800ba90:	f009 fb7e 	bl	8015190 <putchar>
		for(int j=0; j < NUMBER_OF_SQUARES*4 ; j++)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3301      	adds	r3, #1
 800ba98:	607b      	str	r3, [r7, #4]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b3f      	cmp	r3, #63	; 0x3f
 800ba9e:	dde1      	ble.n	800ba64 <wall_flash_print+0x20>
			}
		}
		address -= 2*16*NUMBER_OF_SQUARES;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800baa6:	60fb      	str	r3, [r7, #12]
		printf("\r\n");
 800baa8:	480b      	ldr	r0, [pc, #44]	; (800bad8 <wall_flash_print+0x94>)
 800baaa:	f009 fbe1 	bl	8015270 <puts>
	for(int i=0; i < NUMBER_OF_SQUARES ; i++)
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60bb      	str	r3, [r7, #8]
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	ddd1      	ble.n	800ba5e <wall_flash_print+0x1a>
	}

	printf("\r\n");
 800baba:	4807      	ldr	r0, [pc, #28]	; (800bad8 <wall_flash_print+0x94>)
 800babc:	f009 fbd8 	bl	8015270 <puts>
	printf("\r\n");
 800bac0:	4805      	ldr	r0, [pc, #20]	; (800bad8 <wall_flash_print+0x94>)
 800bac2:	f009 fbd5 	bl	8015270 <puts>
//		}
//		printf("\r\n");
//		printf("\r\n");
//	}

}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	080198d4 	.word	0x080198d4
 800bad4:	08019764 	.word	0x08019764
 800bad8:	08019744 	.word	0x08019744

0800badc <flash_copy_to_ram>:

void flash_copy_to_ram()
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800bae2:	4b3e      	ldr	r3, [pc, #248]	; (800bbdc <flash_copy_to_ram+0x100>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bae8:	2300      	movs	r3, #0
 800baea:	61bb      	str	r3, [r7, #24]
 800baec:	e06f      	b.n	800bbce <flash_copy_to_ram+0xf2>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	e066      	b.n	800bbc2 <flash_copy_to_ram+0xe6>
			{
				uint32_t wall_data[4]={0};
 800baf4:	1d3b      	adds	r3, r7, #4
 800baf6:	2200      	movs	r2, #0
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	605a      	str	r2, [r3, #4]
 800bafc:	609a      	str	r2, [r3, #8]
 800bafe:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800bb00:	1d3b      	adds	r3, r7, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	69f8      	ldr	r0, [r7, #28]
 800bb06:	f003 f8d5 	bl	800ecb4 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	1d1a      	adds	r2, r3, #4
 800bb0e:	1d3b      	adds	r3, r7, #4
 800bb10:	3304      	adds	r3, #4
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f003 f8cd 	bl	800ecb4 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	f103 0208 	add.w	r2, r3, #8
 800bb20:	1d3b      	adds	r3, r7, #4
 800bb22:	3308      	adds	r3, #8
 800bb24:	4619      	mov	r1, r3
 800bb26:	4610      	mov	r0, r2
 800bb28:	f003 f8c4 	bl	800ecb4 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	f103 020c 	add.w	r2, r3, #12
 800bb32:	1d3b      	adds	r3, r7, #4
 800bb34:	330c      	adds	r3, #12
 800bb36:	4619      	mov	r1, r3
 800bb38:	4610      	mov	r0, r2
 800bb3a:	f003 f8bb 	bl	800ecb4 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	b2d8      	uxtb	r0, r3
 800bb46:	4926      	ldr	r1, [pc, #152]	; (800bbe0 <flash_copy_to_ram+0x104>)
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	011a      	lsls	r2, r3, #4
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	441a      	add	r2, r3
 800bb50:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb54:	f360 0301 	bfi	r3, r0, #0, #2
 800bb58:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	b2d8      	uxtb	r0, r3
 800bb64:	491e      	ldr	r1, [pc, #120]	; (800bbe0 <flash_copy_to_ram+0x104>)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	011a      	lsls	r2, r3, #4
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	441a      	add	r2, r3
 800bb6e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb72:	f360 0383 	bfi	r3, r0, #2, #2
 800bb76:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	b2d8      	uxtb	r0, r3
 800bb82:	4917      	ldr	r1, [pc, #92]	; (800bbe0 <flash_copy_to_ram+0x104>)
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	011a      	lsls	r2, r3, #4
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	441a      	add	r2, r3
 800bb8c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb90:	f360 1305 	bfi	r3, r0, #4, #2
 800bb94:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f003 0303 	and.w	r3, r3, #3
 800bb9e:	b2d8      	uxtb	r0, r3
 800bba0:	490f      	ldr	r1, [pc, #60]	; (800bbe0 <flash_copy_to_ram+0x104>)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	011a      	lsls	r2, r3, #4
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	441a      	add	r2, r3
 800bbaa:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bbae:	f360 1387 	bfi	r3, r0, #6, #2
 800bbb2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	3310      	adds	r3, #16
 800bbba:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b0f      	cmp	r3, #15
 800bbc6:	dd95      	ble.n	800baf4 <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	61bb      	str	r3, [r7, #24]
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b0f      	cmp	r3, #15
 800bbd2:	dd8c      	ble.n	800baee <flash_copy_to_ram+0x12>
			}
	}

}
 800bbd4:	bf00      	nop
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	080198d4 	.word	0x080198d4
 800bbe0:	2000088c 	.word	0x2000088c

0800bbe4 <KyushinJudge>:
		  hosu++;
	}while(flag);

}
void KyushinJudge(char turn_mode)
{
 800bbe4:	b590      	push	{r4, r7, lr}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	71fb      	strb	r3, [r7, #7]
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car)
 800bbee:	4b8d      	ldr	r3, [pc, #564]	; (800be24 <KyushinJudge+0x240>)
 800bbf0:	78db      	ldrb	r3, [r3, #3]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f200 8445 	bhi.w	800c482 <KyushinJudge+0x89e>
 800bbf8:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <KyushinJudge+0x1c>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bc11 	.word	0x0800bc11
 800bc04:	0800be31 	.word	0x0800be31
 800bc08:	0800c051 	.word	0x0800c051
 800bc0c:	0800c271 	.word	0x0800c271
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800bc10:	4b84      	ldr	r3, [pc, #528]	; (800be24 <KyushinJudge+0x240>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	4618      	mov	r0, r3
 800bc16:	4b83      	ldr	r3, [pc, #524]	; (800be24 <KyushinJudge+0x240>)
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4a82      	ldr	r2, [pc, #520]	; (800be28 <KyushinJudge+0x244>)
 800bc1e:	0103      	lsls	r3, r0, #4
 800bc20:	440b      	add	r3, r1
 800bc22:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bc26:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d13c      	bne.n	800bcaa <KyushinJudge+0xc6>
 800bc30:	4b7c      	ldr	r3, [pc, #496]	; (800be24 <KyushinJudge+0x240>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	4b7b      	ldr	r3, [pc, #492]	; (800be24 <KyushinJudge+0x240>)
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	497b      	ldr	r1, [pc, #492]	; (800be2c <KyushinJudge+0x248>)
 800bc3e:	0112      	lsls	r2, r2, #4
 800bc40:	4413      	add	r3, r2
 800bc42:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bc46:	4b77      	ldr	r3, [pc, #476]	; (800be24 <KyushinJudge+0x240>)
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	461c      	mov	r4, r3
 800bc4c:	4b75      	ldr	r3, [pc, #468]	; (800be24 <KyushinJudge+0x240>)
 800bc4e:	785b      	ldrb	r3, [r3, #1]
 800bc50:	4618      	mov	r0, r3
 800bc52:	4976      	ldr	r1, [pc, #472]	; (800be2c <KyushinJudge+0x248>)
 800bc54:	0123      	lsls	r3, r4, #4
 800bc56:	4403      	add	r3, r0
 800bc58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d224      	bcs.n	800bcaa <KyushinJudge+0xc6>
 800bc60:	4b70      	ldr	r3, [pc, #448]	; (800be24 <KyushinJudge+0x240>)
 800bc62:	785b      	ldrb	r3, [r3, #1]
 800bc64:	2b0e      	cmp	r3, #14
 800bc66:	d820      	bhi.n	800bcaa <KyushinJudge+0xc6>
				  //前北
				  Pos.Dir = front;
 800bc68:	4b6e      	ldr	r3, [pc, #440]	; (800be24 <KyushinJudge+0x240>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800bc6e:	4b6d      	ldr	r3, [pc, #436]	; (800be24 <KyushinJudge+0x240>)
 800bc70:	781a      	ldrb	r2, [r3, #0]
 800bc72:	4b6c      	ldr	r3, [pc, #432]	; (800be24 <KyushinJudge+0x240>)
 800bc74:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800bc76:	4b6b      	ldr	r3, [pc, #428]	; (800be24 <KyushinJudge+0x240>)
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b69      	ldr	r3, [pc, #420]	; (800be24 <KyushinJudge+0x240>)
 800bc80:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800bc82:	4b68      	ldr	r3, [pc, #416]	; (800be24 <KyushinJudge+0x240>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe fcd2 	bl	800a634 <SelectAction>
				  Pos.Car = Pos.NextCar;
 800bc90:	4b64      	ldr	r3, [pc, #400]	; (800be24 <KyushinJudge+0x240>)
 800bc92:	7a5a      	ldrb	r2, [r3, #9]
 800bc94:	4b63      	ldr	r3, [pc, #396]	; (800be24 <KyushinJudge+0x240>)
 800bc96:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bc98:	4b62      	ldr	r3, [pc, #392]	; (800be24 <KyushinJudge+0x240>)
 800bc9a:	799a      	ldrb	r2, [r3, #6]
 800bc9c:	4b61      	ldr	r3, [pc, #388]	; (800be24 <KyushinJudge+0x240>)
 800bc9e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bca0:	4b60      	ldr	r3, [pc, #384]	; (800be24 <KyushinJudge+0x240>)
 800bca2:	79da      	ldrb	r2, [r3, #7]
 800bca4:	4b5f      	ldr	r3, [pc, #380]	; (800be24 <KyushinJudge+0x240>)
 800bca6:	705a      	strb	r2, [r3, #1]
 800bca8:	e0ba      	b.n	800be20 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800bcaa:	4b5e      	ldr	r3, [pc, #376]	; (800be24 <KyushinJudge+0x240>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	4b5c      	ldr	r3, [pc, #368]	; (800be24 <KyushinJudge+0x240>)
 800bcb2:	785b      	ldrb	r3, [r3, #1]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4a5c      	ldr	r2, [pc, #368]	; (800be28 <KyushinJudge+0x244>)
 800bcb8:	0103      	lsls	r3, r0, #4
 800bcba:	440b      	add	r3, r1
 800bcbc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bcc0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d13c      	bne.n	800bd44 <KyushinJudge+0x160>
 800bcca:	4b56      	ldr	r3, [pc, #344]	; (800be24 <KyushinJudge+0x240>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4a54      	ldr	r2, [pc, #336]	; (800be24 <KyushinJudge+0x240>)
 800bcd2:	7852      	ldrb	r2, [r2, #1]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4a55      	ldr	r2, [pc, #340]	; (800be2c <KyushinJudge+0x248>)
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	440b      	add	r3, r1
 800bcdc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bce0:	4b50      	ldr	r3, [pc, #320]	; (800be24 <KyushinJudge+0x240>)
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	461c      	mov	r4, r3
 800bce6:	4b4f      	ldr	r3, [pc, #316]	; (800be24 <KyushinJudge+0x240>)
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	4618      	mov	r0, r3
 800bcec:	494f      	ldr	r1, [pc, #316]	; (800be2c <KyushinJudge+0x248>)
 800bcee:	0123      	lsls	r3, r4, #4
 800bcf0:	4403      	add	r3, r0
 800bcf2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d224      	bcs.n	800bd44 <KyushinJudge+0x160>
 800bcfa:	4b4a      	ldr	r3, [pc, #296]	; (800be24 <KyushinJudge+0x240>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d020      	beq.n	800bd44 <KyushinJudge+0x160>
				  //左西
    			  Pos.Dir = left;
 800bd02:	4b48      	ldr	r3, [pc, #288]	; (800be24 <KyushinJudge+0x240>)
 800bd04:	2203      	movs	r2, #3
 800bd06:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X - 1;
 800bd08:	4b46      	ldr	r3, [pc, #280]	; (800be24 <KyushinJudge+0x240>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	4b44      	ldr	r3, [pc, #272]	; (800be24 <KyushinJudge+0x240>)
 800bd12:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800bd14:	4b43      	ldr	r3, [pc, #268]	; (800be24 <KyushinJudge+0x240>)
 800bd16:	785a      	ldrb	r2, [r3, #1]
 800bd18:	4b42      	ldr	r3, [pc, #264]	; (800be24 <KyushinJudge+0x240>)
 800bd1a:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = west;
 800bd1c:	4b41      	ldr	r3, [pc, #260]	; (800be24 <KyushinJudge+0x240>)
 800bd1e:	2203      	movs	r2, #3
 800bd20:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fc85 	bl	800a634 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800bd2a:	4b3e      	ldr	r3, [pc, #248]	; (800be24 <KyushinJudge+0x240>)
 800bd2c:	7a5a      	ldrb	r2, [r3, #9]
 800bd2e:	4b3d      	ldr	r3, [pc, #244]	; (800be24 <KyushinJudge+0x240>)
 800bd30:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bd32:	4b3c      	ldr	r3, [pc, #240]	; (800be24 <KyushinJudge+0x240>)
 800bd34:	799a      	ldrb	r2, [r3, #6]
 800bd36:	4b3b      	ldr	r3, [pc, #236]	; (800be24 <KyushinJudge+0x240>)
 800bd38:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bd3a:	4b3a      	ldr	r3, [pc, #232]	; (800be24 <KyushinJudge+0x240>)
 800bd3c:	79da      	ldrb	r2, [r3, #7]
 800bd3e:	4b39      	ldr	r3, [pc, #228]	; (800be24 <KyushinJudge+0x240>)
 800bd40:	705a      	strb	r2, [r3, #1]
 800bd42:	e06d      	b.n	800be20 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800bd44:	4b37      	ldr	r3, [pc, #220]	; (800be24 <KyushinJudge+0x240>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	4b36      	ldr	r3, [pc, #216]	; (800be24 <KyushinJudge+0x240>)
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4a35      	ldr	r2, [pc, #212]	; (800be28 <KyushinJudge+0x244>)
 800bd52:	0103      	lsls	r3, r0, #4
 800bd54:	440b      	add	r3, r1
 800bd56:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bd5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d13c      	bne.n	800bdde <KyushinJudge+0x1fa>
 800bd64:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <KyushinJudge+0x240>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	4a2e      	ldr	r2, [pc, #184]	; (800be24 <KyushinJudge+0x240>)
 800bd6c:	7852      	ldrb	r2, [r2, #1]
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4a2e      	ldr	r2, [pc, #184]	; (800be2c <KyushinJudge+0x248>)
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	440b      	add	r3, r1
 800bd76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bd7a:	4b2a      	ldr	r3, [pc, #168]	; (800be24 <KyushinJudge+0x240>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	461c      	mov	r4, r3
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <KyushinJudge+0x240>)
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	4618      	mov	r0, r3
 800bd86:	4929      	ldr	r1, [pc, #164]	; (800be2c <KyushinJudge+0x248>)
 800bd88:	0123      	lsls	r3, r4, #4
 800bd8a:	4403      	add	r3, r0
 800bd8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d224      	bcs.n	800bdde <KyushinJudge+0x1fa>
 800bd94:	4b23      	ldr	r3, [pc, #140]	; (800be24 <KyushinJudge+0x240>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b0e      	cmp	r3, #14
 800bd9a:	d820      	bhi.n	800bdde <KyushinJudge+0x1fa>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800bd9c:	4b21      	ldr	r3, [pc, #132]	; (800be24 <KyushinJudge+0x240>)
 800bd9e:	2201      	movs	r2, #1
 800bda0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800bda2:	4b20      	ldr	r3, [pc, #128]	; (800be24 <KyushinJudge+0x240>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	3301      	adds	r3, #1
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <KyushinJudge+0x240>)
 800bdac:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800bdae:	4b1d      	ldr	r3, [pc, #116]	; (800be24 <KyushinJudge+0x240>)
 800bdb0:	785a      	ldrb	r2, [r3, #1]
 800bdb2:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <KyushinJudge+0x240>)
 800bdb4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800bdb6:	4b1b      	ldr	r3, [pc, #108]	; (800be24 <KyushinJudge+0x240>)
 800bdb8:	2201      	movs	r2, #1
 800bdba:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fc38 	bl	800a634 <SelectAction>
		          Pos.Car = Pos.NextCar;
 800bdc4:	4b17      	ldr	r3, [pc, #92]	; (800be24 <KyushinJudge+0x240>)
 800bdc6:	7a5a      	ldrb	r2, [r3, #9]
 800bdc8:	4b16      	ldr	r3, [pc, #88]	; (800be24 <KyushinJudge+0x240>)
 800bdca:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bdcc:	4b15      	ldr	r3, [pc, #84]	; (800be24 <KyushinJudge+0x240>)
 800bdce:	799a      	ldrb	r2, [r3, #6]
 800bdd0:	4b14      	ldr	r3, [pc, #80]	; (800be24 <KyushinJudge+0x240>)
 800bdd2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bdd4:	4b13      	ldr	r3, [pc, #76]	; (800be24 <KyushinJudge+0x240>)
 800bdd6:	79da      	ldrb	r2, [r3, #7]
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <KyushinJudge+0x240>)
 800bdda:	705a      	strb	r2, [r3, #1]
 800bddc:	e020      	b.n	800be20 <KyushinJudge+0x23c>
			  }
			  else {
				  Pos.Dir = back;
 800bdde:	4b11      	ldr	r3, [pc, #68]	; (800be24 <KyushinJudge+0x240>)
 800bde0:	2202      	movs	r2, #2
 800bde2:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800bde4:	4b0f      	ldr	r3, [pc, #60]	; (800be24 <KyushinJudge+0x240>)
 800bde6:	781a      	ldrb	r2, [r3, #0]
 800bde8:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <KyushinJudge+0x240>)
 800bdea:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <KyushinJudge+0x240>)
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <KyushinJudge+0x240>)
 800bdf6:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <KyushinJudge+0x240>)
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	725a      	strb	r2, [r3, #9]
				  //後南
				  SelectAction(turn_mode);
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	4618      	mov	r0, r3
 800be02:	f7fe fc17 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800be06:	4b07      	ldr	r3, [pc, #28]	; (800be24 <KyushinJudge+0x240>)
 800be08:	7a5a      	ldrb	r2, [r3, #9]
 800be0a:	4b06      	ldr	r3, [pc, #24]	; (800be24 <KyushinJudge+0x240>)
 800be0c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800be0e:	4b05      	ldr	r3, [pc, #20]	; (800be24 <KyushinJudge+0x240>)
 800be10:	799a      	ldrb	r2, [r3, #6]
 800be12:	4b04      	ldr	r3, [pc, #16]	; (800be24 <KyushinJudge+0x240>)
 800be14:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800be16:	4b03      	ldr	r3, [pc, #12]	; (800be24 <KyushinJudge+0x240>)
 800be18:	79da      	ldrb	r2, [r3, #7]
 800be1a:	4b02      	ldr	r3, [pc, #8]	; (800be24 <KyushinJudge+0x240>)
 800be1c:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800be1e:	e331      	b.n	800c484 <KyushinJudge+0x8a0>
 800be20:	e330      	b.n	800c484 <KyushinJudge+0x8a0>
 800be22:	bf00      	nop
 800be24:	20000000 	.word	0x20000000
 800be28:	2000088c 	.word	0x2000088c
 800be2c:	2000045c 	.word	0x2000045c

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800be30:	4b84      	ldr	r3, [pc, #528]	; (800c044 <KyushinJudge+0x460>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	4618      	mov	r0, r3
 800be36:	4b83      	ldr	r3, [pc, #524]	; (800c044 <KyushinJudge+0x460>)
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	4619      	mov	r1, r3
 800be3c:	4a82      	ldr	r2, [pc, #520]	; (800c048 <KyushinJudge+0x464>)
 800be3e:	0103      	lsls	r3, r0, #4
 800be40:	440b      	add	r3, r1
 800be42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800be46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d13c      	bne.n	800beca <KyushinJudge+0x2e6>
 800be50:	4b7c      	ldr	r3, [pc, #496]	; (800c044 <KyushinJudge+0x460>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	3301      	adds	r3, #1
 800be56:	4a7b      	ldr	r2, [pc, #492]	; (800c044 <KyushinJudge+0x460>)
 800be58:	7852      	ldrb	r2, [r2, #1]
 800be5a:	4611      	mov	r1, r2
 800be5c:	4a7b      	ldr	r2, [pc, #492]	; (800c04c <KyushinJudge+0x468>)
 800be5e:	011b      	lsls	r3, r3, #4
 800be60:	440b      	add	r3, r1
 800be62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800be66:	4b77      	ldr	r3, [pc, #476]	; (800c044 <KyushinJudge+0x460>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	461c      	mov	r4, r3
 800be6c:	4b75      	ldr	r3, [pc, #468]	; (800c044 <KyushinJudge+0x460>)
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	4618      	mov	r0, r3
 800be72:	4976      	ldr	r1, [pc, #472]	; (800c04c <KyushinJudge+0x468>)
 800be74:	0123      	lsls	r3, r4, #4
 800be76:	4403      	add	r3, r0
 800be78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d224      	bcs.n	800beca <KyushinJudge+0x2e6>
 800be80:	4b70      	ldr	r3, [pc, #448]	; (800c044 <KyushinJudge+0x460>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b0e      	cmp	r3, #14
 800be86:	d820      	bhi.n	800beca <KyushinJudge+0x2e6>
				  //前東
				  Pos.Dir = front;
 800be88:	4b6e      	ldr	r3, [pc, #440]	; (800c044 <KyushinJudge+0x460>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800be8e:	4b6d      	ldr	r3, [pc, #436]	; (800c044 <KyushinJudge+0x460>)
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	3301      	adds	r3, #1
 800be94:	b2da      	uxtb	r2, r3
 800be96:	4b6b      	ldr	r3, [pc, #428]	; (800c044 <KyushinJudge+0x460>)
 800be98:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800be9a:	4b6a      	ldr	r3, [pc, #424]	; (800c044 <KyushinJudge+0x460>)
 800be9c:	785a      	ldrb	r2, [r3, #1]
 800be9e:	4b69      	ldr	r3, [pc, #420]	; (800c044 <KyushinJudge+0x460>)
 800bea0:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800bea2:	4b68      	ldr	r3, [pc, #416]	; (800c044 <KyushinJudge+0x460>)
 800bea4:	2201      	movs	r2, #1
 800bea6:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fbc2 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800beb0:	4b64      	ldr	r3, [pc, #400]	; (800c044 <KyushinJudge+0x460>)
 800beb2:	7a5a      	ldrb	r2, [r3, #9]
 800beb4:	4b63      	ldr	r3, [pc, #396]	; (800c044 <KyushinJudge+0x460>)
 800beb6:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800beb8:	4b62      	ldr	r3, [pc, #392]	; (800c044 <KyushinJudge+0x460>)
 800beba:	799a      	ldrb	r2, [r3, #6]
 800bebc:	4b61      	ldr	r3, [pc, #388]	; (800c044 <KyushinJudge+0x460>)
 800bebe:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bec0:	4b60      	ldr	r3, [pc, #384]	; (800c044 <KyushinJudge+0x460>)
 800bec2:	79da      	ldrb	r2, [r3, #7]
 800bec4:	4b5f      	ldr	r3, [pc, #380]	; (800c044 <KyushinJudge+0x460>)
 800bec6:	705a      	strb	r2, [r3, #1]
 800bec8:	e0ba      	b.n	800c040 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800beca:	4b5e      	ldr	r3, [pc, #376]	; (800c044 <KyushinJudge+0x460>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	4618      	mov	r0, r3
 800bed0:	4b5c      	ldr	r3, [pc, #368]	; (800c044 <KyushinJudge+0x460>)
 800bed2:	785b      	ldrb	r3, [r3, #1]
 800bed4:	4619      	mov	r1, r3
 800bed6:	4a5c      	ldr	r2, [pc, #368]	; (800c048 <KyushinJudge+0x464>)
 800bed8:	0103      	lsls	r3, r0, #4
 800beda:	440b      	add	r3, r1
 800bedc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bee0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d13c      	bne.n	800bf64 <KyushinJudge+0x380>
 800beea:	4b56      	ldr	r3, [pc, #344]	; (800c044 <KyushinJudge+0x460>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	4b54      	ldr	r3, [pc, #336]	; (800c044 <KyushinJudge+0x460>)
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	3301      	adds	r3, #1
 800bef6:	4955      	ldr	r1, [pc, #340]	; (800c04c <KyushinJudge+0x468>)
 800bef8:	0112      	lsls	r2, r2, #4
 800befa:	4413      	add	r3, r2
 800befc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bf00:	4b50      	ldr	r3, [pc, #320]	; (800c044 <KyushinJudge+0x460>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	461c      	mov	r4, r3
 800bf06:	4b4f      	ldr	r3, [pc, #316]	; (800c044 <KyushinJudge+0x460>)
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	494f      	ldr	r1, [pc, #316]	; (800c04c <KyushinJudge+0x468>)
 800bf0e:	0123      	lsls	r3, r4, #4
 800bf10:	4403      	add	r3, r0
 800bf12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d224      	bcs.n	800bf64 <KyushinJudge+0x380>
 800bf1a:	4b4a      	ldr	r3, [pc, #296]	; (800c044 <KyushinJudge+0x460>)
 800bf1c:	785b      	ldrb	r3, [r3, #1]
 800bf1e:	2b0e      	cmp	r3, #14
 800bf20:	d820      	bhi.n	800bf64 <KyushinJudge+0x380>
				  //左?��?

    			  Pos.Dir = left;
 800bf22:	4b48      	ldr	r3, [pc, #288]	; (800c044 <KyushinJudge+0x460>)
 800bf24:	2203      	movs	r2, #3
 800bf26:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800bf28:	4b46      	ldr	r3, [pc, #280]	; (800c044 <KyushinJudge+0x460>)
 800bf2a:	781a      	ldrb	r2, [r3, #0]
 800bf2c:	4b45      	ldr	r3, [pc, #276]	; (800c044 <KyushinJudge+0x460>)
 800bf2e:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y+1;
 800bf30:	4b44      	ldr	r3, [pc, #272]	; (800c044 <KyushinJudge+0x460>)
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	4b42      	ldr	r3, [pc, #264]	; (800c044 <KyushinJudge+0x460>)
 800bf3a:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = north;
 800bf3c:	4b41      	ldr	r3, [pc, #260]	; (800c044 <KyushinJudge+0x460>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fe fb75 	bl	800a634 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800bf4a:	4b3e      	ldr	r3, [pc, #248]	; (800c044 <KyushinJudge+0x460>)
 800bf4c:	7a5a      	ldrb	r2, [r3, #9]
 800bf4e:	4b3d      	ldr	r3, [pc, #244]	; (800c044 <KyushinJudge+0x460>)
 800bf50:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bf52:	4b3c      	ldr	r3, [pc, #240]	; (800c044 <KyushinJudge+0x460>)
 800bf54:	799a      	ldrb	r2, [r3, #6]
 800bf56:	4b3b      	ldr	r3, [pc, #236]	; (800c044 <KyushinJudge+0x460>)
 800bf58:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bf5a:	4b3a      	ldr	r3, [pc, #232]	; (800c044 <KyushinJudge+0x460>)
 800bf5c:	79da      	ldrb	r2, [r3, #7]
 800bf5e:	4b39      	ldr	r3, [pc, #228]	; (800c044 <KyushinJudge+0x460>)
 800bf60:	705a      	strb	r2, [r3, #1]
 800bf62:	e06d      	b.n	800c040 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800bf64:	4b37      	ldr	r3, [pc, #220]	; (800c044 <KyushinJudge+0x460>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4b36      	ldr	r3, [pc, #216]	; (800c044 <KyushinJudge+0x460>)
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4a35      	ldr	r2, [pc, #212]	; (800c048 <KyushinJudge+0x464>)
 800bf72:	0103      	lsls	r3, r0, #4
 800bf74:	440b      	add	r3, r1
 800bf76:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bf7a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d13c      	bne.n	800bffe <KyushinJudge+0x41a>
 800bf84:	4b2f      	ldr	r3, [pc, #188]	; (800c044 <KyushinJudge+0x460>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4b2e      	ldr	r3, [pc, #184]	; (800c044 <KyushinJudge+0x460>)
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	492e      	ldr	r1, [pc, #184]	; (800c04c <KyushinJudge+0x468>)
 800bf92:	0112      	lsls	r2, r2, #4
 800bf94:	4413      	add	r3, r2
 800bf96:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bf9a:	4b2a      	ldr	r3, [pc, #168]	; (800c044 <KyushinJudge+0x460>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	461c      	mov	r4, r3
 800bfa0:	4b28      	ldr	r3, [pc, #160]	; (800c044 <KyushinJudge+0x460>)
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	4929      	ldr	r1, [pc, #164]	; (800c04c <KyushinJudge+0x468>)
 800bfa8:	0123      	lsls	r3, r4, #4
 800bfaa:	4403      	add	r3, r0
 800bfac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d224      	bcs.n	800bffe <KyushinJudge+0x41a>
 800bfb4:	4b23      	ldr	r3, [pc, #140]	; (800c044 <KyushinJudge+0x460>)
 800bfb6:	785b      	ldrb	r3, [r3, #1]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d020      	beq.n	800bffe <KyushinJudge+0x41a>
				  //右?��?
				  Pos.Dir = right;
 800bfbc:	4b21      	ldr	r3, [pc, #132]	; (800c044 <KyushinJudge+0x460>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800bfc2:	4b20      	ldr	r3, [pc, #128]	; (800c044 <KyushinJudge+0x460>)
 800bfc4:	781a      	ldrb	r2, [r3, #0]
 800bfc6:	4b1f      	ldr	r3, [pc, #124]	; (800c044 <KyushinJudge+0x460>)
 800bfc8:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <KyushinJudge+0x460>)
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	4b1c      	ldr	r3, [pc, #112]	; (800c044 <KyushinJudge+0x460>)
 800bfd4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800bfd6:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <KyushinJudge+0x460>)
 800bfd8:	2202      	movs	r2, #2
 800bfda:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fb28 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800bfe4:	4b17      	ldr	r3, [pc, #92]	; (800c044 <KyushinJudge+0x460>)
 800bfe6:	7a5a      	ldrb	r2, [r3, #9]
 800bfe8:	4b16      	ldr	r3, [pc, #88]	; (800c044 <KyushinJudge+0x460>)
 800bfea:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800bfec:	4b15      	ldr	r3, [pc, #84]	; (800c044 <KyushinJudge+0x460>)
 800bfee:	799a      	ldrb	r2, [r3, #6]
 800bff0:	4b14      	ldr	r3, [pc, #80]	; (800c044 <KyushinJudge+0x460>)
 800bff2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800bff4:	4b13      	ldr	r3, [pc, #76]	; (800c044 <KyushinJudge+0x460>)
 800bff6:	79da      	ldrb	r2, [r3, #7]
 800bff8:	4b12      	ldr	r3, [pc, #72]	; (800c044 <KyushinJudge+0x460>)
 800bffa:	705a      	strb	r2, [r3, #1]
 800bffc:	e020      	b.n	800c040 <KyushinJudge+0x45c>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800bffe:	4b11      	ldr	r3, [pc, #68]	; (800c044 <KyushinJudge+0x460>)
 800c000:	2202      	movs	r2, #2
 800c002:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c004:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <KyushinJudge+0x460>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	3b01      	subs	r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <KyushinJudge+0x460>)
 800c00e:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c010:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <KyushinJudge+0x460>)
 800c012:	785a      	ldrb	r2, [r3, #1]
 800c014:	4b0b      	ldr	r3, [pc, #44]	; (800c044 <KyushinJudge+0x460>)
 800c016:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <KyushinJudge+0x460>)
 800c01a:	2203      	movs	r2, #3
 800c01c:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe fb07 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <KyushinJudge+0x460>)
 800c028:	7a5a      	ldrb	r2, [r3, #9]
 800c02a:	4b06      	ldr	r3, [pc, #24]	; (800c044 <KyushinJudge+0x460>)
 800c02c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <KyushinJudge+0x460>)
 800c030:	799a      	ldrb	r2, [r3, #6]
 800c032:	4b04      	ldr	r3, [pc, #16]	; (800c044 <KyushinJudge+0x460>)
 800c034:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c036:	4b03      	ldr	r3, [pc, #12]	; (800c044 <KyushinJudge+0x460>)
 800c038:	79da      	ldrb	r2, [r3, #7]
 800c03a:	4b02      	ldr	r3, [pc, #8]	; (800c044 <KyushinJudge+0x460>)
 800c03c:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c03e:	e221      	b.n	800c484 <KyushinJudge+0x8a0>
 800c040:	e220      	b.n	800c484 <KyushinJudge+0x8a0>
 800c042:	bf00      	nop
 800c044:	20000000 	.word	0x20000000
 800c048:	2000088c 	.word	0x2000088c
 800c04c:	2000045c 	.word	0x2000045c

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800c050:	4b84      	ldr	r3, [pc, #528]	; (800c264 <KyushinJudge+0x680>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	4618      	mov	r0, r3
 800c056:	4b83      	ldr	r3, [pc, #524]	; (800c264 <KyushinJudge+0x680>)
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	4619      	mov	r1, r3
 800c05c:	4a82      	ldr	r2, [pc, #520]	; (800c268 <KyushinJudge+0x684>)
 800c05e:	0103      	lsls	r3, r0, #4
 800c060:	440b      	add	r3, r1
 800c062:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c066:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d13c      	bne.n	800c0ea <KyushinJudge+0x506>
 800c070:	4b7c      	ldr	r3, [pc, #496]	; (800c264 <KyushinJudge+0x680>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	461a      	mov	r2, r3
 800c076:	4b7b      	ldr	r3, [pc, #492]	; (800c264 <KyushinJudge+0x680>)
 800c078:	785b      	ldrb	r3, [r3, #1]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	497b      	ldr	r1, [pc, #492]	; (800c26c <KyushinJudge+0x688>)
 800c07e:	0112      	lsls	r2, r2, #4
 800c080:	4413      	add	r3, r2
 800c082:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c086:	4b77      	ldr	r3, [pc, #476]	; (800c264 <KyushinJudge+0x680>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	461c      	mov	r4, r3
 800c08c:	4b75      	ldr	r3, [pc, #468]	; (800c264 <KyushinJudge+0x680>)
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	4618      	mov	r0, r3
 800c092:	4976      	ldr	r1, [pc, #472]	; (800c26c <KyushinJudge+0x688>)
 800c094:	0123      	lsls	r3, r4, #4
 800c096:	4403      	add	r3, r0
 800c098:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d224      	bcs.n	800c0ea <KyushinJudge+0x506>
 800c0a0:	4b70      	ldr	r3, [pc, #448]	; (800c264 <KyushinJudge+0x680>)
 800c0a2:	785b      	ldrb	r3, [r3, #1]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d020      	beq.n	800c0ea <KyushinJudge+0x506>
				  //前南
				  Pos.Dir = front;
 800c0a8:	4b6e      	ldr	r3, [pc, #440]	; (800c264 <KyushinJudge+0x680>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c0ae:	4b6d      	ldr	r3, [pc, #436]	; (800c264 <KyushinJudge+0x680>)
 800c0b0:	781a      	ldrb	r2, [r3, #0]
 800c0b2:	4b6c      	ldr	r3, [pc, #432]	; (800c264 <KyushinJudge+0x680>)
 800c0b4:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c0b6:	4b6b      	ldr	r3, [pc, #428]	; (800c264 <KyushinJudge+0x680>)
 800c0b8:	785b      	ldrb	r3, [r3, #1]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	4b69      	ldr	r3, [pc, #420]	; (800c264 <KyushinJudge+0x680>)
 800c0c0:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c0c2:	4b68      	ldr	r3, [pc, #416]	; (800c264 <KyushinJudge+0x680>)
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c0c8:	79fb      	ldrb	r3, [r7, #7]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fab2 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c0d0:	4b64      	ldr	r3, [pc, #400]	; (800c264 <KyushinJudge+0x680>)
 800c0d2:	7a5a      	ldrb	r2, [r3, #9]
 800c0d4:	4b63      	ldr	r3, [pc, #396]	; (800c264 <KyushinJudge+0x680>)
 800c0d6:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c0d8:	4b62      	ldr	r3, [pc, #392]	; (800c264 <KyushinJudge+0x680>)
 800c0da:	799a      	ldrb	r2, [r3, #6]
 800c0dc:	4b61      	ldr	r3, [pc, #388]	; (800c264 <KyushinJudge+0x680>)
 800c0de:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c0e0:	4b60      	ldr	r3, [pc, #384]	; (800c264 <KyushinJudge+0x680>)
 800c0e2:	79da      	ldrb	r2, [r3, #7]
 800c0e4:	4b5f      	ldr	r3, [pc, #380]	; (800c264 <KyushinJudge+0x680>)
 800c0e6:	705a      	strb	r2, [r3, #1]
 800c0e8:	e0ba      	b.n	800c260 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800c0ea:	4b5e      	ldr	r3, [pc, #376]	; (800c264 <KyushinJudge+0x680>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	4b5c      	ldr	r3, [pc, #368]	; (800c264 <KyushinJudge+0x680>)
 800c0f2:	785b      	ldrb	r3, [r3, #1]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4a5c      	ldr	r2, [pc, #368]	; (800c268 <KyushinJudge+0x684>)
 800c0f8:	0103      	lsls	r3, r0, #4
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c100:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d13c      	bne.n	800c184 <KyushinJudge+0x5a0>
 800c10a:	4b56      	ldr	r3, [pc, #344]	; (800c264 <KyushinJudge+0x680>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	3301      	adds	r3, #1
 800c110:	4a54      	ldr	r2, [pc, #336]	; (800c264 <KyushinJudge+0x680>)
 800c112:	7852      	ldrb	r2, [r2, #1]
 800c114:	4611      	mov	r1, r2
 800c116:	4a55      	ldr	r2, [pc, #340]	; (800c26c <KyushinJudge+0x688>)
 800c118:	011b      	lsls	r3, r3, #4
 800c11a:	440b      	add	r3, r1
 800c11c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c120:	4b50      	ldr	r3, [pc, #320]	; (800c264 <KyushinJudge+0x680>)
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	461c      	mov	r4, r3
 800c126:	4b4f      	ldr	r3, [pc, #316]	; (800c264 <KyushinJudge+0x680>)
 800c128:	785b      	ldrb	r3, [r3, #1]
 800c12a:	4618      	mov	r0, r3
 800c12c:	494f      	ldr	r1, [pc, #316]	; (800c26c <KyushinJudge+0x688>)
 800c12e:	0123      	lsls	r3, r4, #4
 800c130:	4403      	add	r3, r0
 800c132:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c136:	429a      	cmp	r2, r3
 800c138:	d224      	bcs.n	800c184 <KyushinJudge+0x5a0>
 800c13a:	4b4a      	ldr	r3, [pc, #296]	; (800c264 <KyushinJudge+0x680>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b0e      	cmp	r3, #14
 800c140:	d820      	bhi.n	800c184 <KyushinJudge+0x5a0>
				  //左東
    			  Pos.Dir = left;
 800c142:	4b48      	ldr	r3, [pc, #288]	; (800c264 <KyushinJudge+0x680>)
 800c144:	2203      	movs	r2, #3
 800c146:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X + 1;
 800c148:	4b46      	ldr	r3, [pc, #280]	; (800c264 <KyushinJudge+0x680>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	3301      	adds	r3, #1
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	4b44      	ldr	r3, [pc, #272]	; (800c264 <KyushinJudge+0x680>)
 800c152:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800c154:	4b43      	ldr	r3, [pc, #268]	; (800c264 <KyushinJudge+0x680>)
 800c156:	785a      	ldrb	r2, [r3, #1]
 800c158:	4b42      	ldr	r3, [pc, #264]	; (800c264 <KyushinJudge+0x680>)
 800c15a:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = east;
 800c15c:	4b41      	ldr	r3, [pc, #260]	; (800c264 <KyushinJudge+0x680>)
 800c15e:	2201      	movs	r2, #1
 800c160:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fa65 	bl	800a634 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c16a:	4b3e      	ldr	r3, [pc, #248]	; (800c264 <KyushinJudge+0x680>)
 800c16c:	7a5a      	ldrb	r2, [r3, #9]
 800c16e:	4b3d      	ldr	r3, [pc, #244]	; (800c264 <KyushinJudge+0x680>)
 800c170:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c172:	4b3c      	ldr	r3, [pc, #240]	; (800c264 <KyushinJudge+0x680>)
 800c174:	799a      	ldrb	r2, [r3, #6]
 800c176:	4b3b      	ldr	r3, [pc, #236]	; (800c264 <KyushinJudge+0x680>)
 800c178:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c17a:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <KyushinJudge+0x680>)
 800c17c:	79da      	ldrb	r2, [r3, #7]
 800c17e:	4b39      	ldr	r3, [pc, #228]	; (800c264 <KyushinJudge+0x680>)
 800c180:	705a      	strb	r2, [r3, #1]
 800c182:	e06d      	b.n	800c260 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c184:	4b37      	ldr	r3, [pc, #220]	; (800c264 <KyushinJudge+0x680>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	4618      	mov	r0, r3
 800c18a:	4b36      	ldr	r3, [pc, #216]	; (800c264 <KyushinJudge+0x680>)
 800c18c:	785b      	ldrb	r3, [r3, #1]
 800c18e:	4619      	mov	r1, r3
 800c190:	4a35      	ldr	r2, [pc, #212]	; (800c268 <KyushinJudge+0x684>)
 800c192:	0103      	lsls	r3, r0, #4
 800c194:	440b      	add	r3, r1
 800c196:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c19a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d13c      	bne.n	800c21e <KyushinJudge+0x63a>
 800c1a4:	4b2f      	ldr	r3, [pc, #188]	; (800c264 <KyushinJudge+0x680>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	4a2e      	ldr	r2, [pc, #184]	; (800c264 <KyushinJudge+0x680>)
 800c1ac:	7852      	ldrb	r2, [r2, #1]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	4a2e      	ldr	r2, [pc, #184]	; (800c26c <KyushinJudge+0x688>)
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	440b      	add	r3, r1
 800c1b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c1ba:	4b2a      	ldr	r3, [pc, #168]	; (800c264 <KyushinJudge+0x680>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	461c      	mov	r4, r3
 800c1c0:	4b28      	ldr	r3, [pc, #160]	; (800c264 <KyushinJudge+0x680>)
 800c1c2:	785b      	ldrb	r3, [r3, #1]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	4929      	ldr	r1, [pc, #164]	; (800c26c <KyushinJudge+0x688>)
 800c1c8:	0123      	lsls	r3, r4, #4
 800c1ca:	4403      	add	r3, r0
 800c1cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d224      	bcs.n	800c21e <KyushinJudge+0x63a>
 800c1d4:	4b23      	ldr	r3, [pc, #140]	; (800c264 <KyushinJudge+0x680>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d020      	beq.n	800c21e <KyushinJudge+0x63a>
				  //右西
				  Pos.Dir = right;
 800c1dc:	4b21      	ldr	r3, [pc, #132]	; (800c264 <KyushinJudge+0x680>)
 800c1de:	2201      	movs	r2, #1
 800c1e0:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c1e2:	4b20      	ldr	r3, [pc, #128]	; (800c264 <KyushinJudge+0x680>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	4b1e      	ldr	r3, [pc, #120]	; (800c264 <KyushinJudge+0x680>)
 800c1ec:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c1ee:	4b1d      	ldr	r3, [pc, #116]	; (800c264 <KyushinJudge+0x680>)
 800c1f0:	785a      	ldrb	r2, [r3, #1]
 800c1f2:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <KyushinJudge+0x680>)
 800c1f4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c1f6:	4b1b      	ldr	r3, [pc, #108]	; (800c264 <KyushinJudge+0x680>)
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fa18 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c204:	4b17      	ldr	r3, [pc, #92]	; (800c264 <KyushinJudge+0x680>)
 800c206:	7a5a      	ldrb	r2, [r3, #9]
 800c208:	4b16      	ldr	r3, [pc, #88]	; (800c264 <KyushinJudge+0x680>)
 800c20a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c20c:	4b15      	ldr	r3, [pc, #84]	; (800c264 <KyushinJudge+0x680>)
 800c20e:	799a      	ldrb	r2, [r3, #6]
 800c210:	4b14      	ldr	r3, [pc, #80]	; (800c264 <KyushinJudge+0x680>)
 800c212:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c214:	4b13      	ldr	r3, [pc, #76]	; (800c264 <KyushinJudge+0x680>)
 800c216:	79da      	ldrb	r2, [r3, #7]
 800c218:	4b12      	ldr	r3, [pc, #72]	; (800c264 <KyushinJudge+0x680>)
 800c21a:	705a      	strb	r2, [r3, #1]
 800c21c:	e020      	b.n	800c260 <KyushinJudge+0x67c>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800c21e:	4b11      	ldr	r3, [pc, #68]	; (800c264 <KyushinJudge+0x680>)
 800c220:	2202      	movs	r2, #2
 800c222:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c224:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <KyushinJudge+0x680>)
 800c226:	781a      	ldrb	r2, [r3, #0]
 800c228:	4b0e      	ldr	r3, [pc, #56]	; (800c264 <KyushinJudge+0x680>)
 800c22a:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c22c:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <KyushinJudge+0x680>)
 800c22e:	785b      	ldrb	r3, [r3, #1]
 800c230:	3301      	adds	r3, #1
 800c232:	b2da      	uxtb	r2, r3
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <KyushinJudge+0x680>)
 800c236:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <KyushinJudge+0x680>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe f9f7 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c246:	4b07      	ldr	r3, [pc, #28]	; (800c264 <KyushinJudge+0x680>)
 800c248:	7a5a      	ldrb	r2, [r3, #9]
 800c24a:	4b06      	ldr	r3, [pc, #24]	; (800c264 <KyushinJudge+0x680>)
 800c24c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <KyushinJudge+0x680>)
 800c250:	799a      	ldrb	r2, [r3, #6]
 800c252:	4b04      	ldr	r3, [pc, #16]	; (800c264 <KyushinJudge+0x680>)
 800c254:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c256:	4b03      	ldr	r3, [pc, #12]	; (800c264 <KyushinJudge+0x680>)
 800c258:	79da      	ldrb	r2, [r3, #7]
 800c25a:	4b02      	ldr	r3, [pc, #8]	; (800c264 <KyushinJudge+0x680>)
 800c25c:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c25e:	e111      	b.n	800c484 <KyushinJudge+0x8a0>
 800c260:	e110      	b.n	800c484 <KyushinJudge+0x8a0>
 800c262:	bf00      	nop
 800c264:	20000000 	.word	0x20000000
 800c268:	2000088c 	.word	0x2000088c
 800c26c:	2000045c 	.word	0x2000045c

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c270:	4b86      	ldr	r3, [pc, #536]	; (800c48c <KyushinJudge+0x8a8>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	4618      	mov	r0, r3
 800c276:	4b85      	ldr	r3, [pc, #532]	; (800c48c <KyushinJudge+0x8a8>)
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	4619      	mov	r1, r3
 800c27c:	4a84      	ldr	r2, [pc, #528]	; (800c490 <KyushinJudge+0x8ac>)
 800c27e:	0103      	lsls	r3, r0, #4
 800c280:	440b      	add	r3, r1
 800c282:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c286:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d13c      	bne.n	800c30a <KyushinJudge+0x726>
 800c290:	4b7e      	ldr	r3, [pc, #504]	; (800c48c <KyushinJudge+0x8a8>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	3b01      	subs	r3, #1
 800c296:	4a7d      	ldr	r2, [pc, #500]	; (800c48c <KyushinJudge+0x8a8>)
 800c298:	7852      	ldrb	r2, [r2, #1]
 800c29a:	4611      	mov	r1, r2
 800c29c:	4a7d      	ldr	r2, [pc, #500]	; (800c494 <KyushinJudge+0x8b0>)
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	440b      	add	r3, r1
 800c2a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c2a6:	4b79      	ldr	r3, [pc, #484]	; (800c48c <KyushinJudge+0x8a8>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	461c      	mov	r4, r3
 800c2ac:	4b77      	ldr	r3, [pc, #476]	; (800c48c <KyushinJudge+0x8a8>)
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	4978      	ldr	r1, [pc, #480]	; (800c494 <KyushinJudge+0x8b0>)
 800c2b4:	0123      	lsls	r3, r4, #4
 800c2b6:	4403      	add	r3, r0
 800c2b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d224      	bcs.n	800c30a <KyushinJudge+0x726>
 800c2c0:	4b72      	ldr	r3, [pc, #456]	; (800c48c <KyushinJudge+0x8a8>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d020      	beq.n	800c30a <KyushinJudge+0x726>
				  //前西
				  Pos.Dir = front;
 800c2c8:	4b70      	ldr	r3, [pc, #448]	; (800c48c <KyushinJudge+0x8a8>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800c2ce:	4b6f      	ldr	r3, [pc, #444]	; (800c48c <KyushinJudge+0x8a8>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	4b6d      	ldr	r3, [pc, #436]	; (800c48c <KyushinJudge+0x8a8>)
 800c2d8:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c2da:	4b6c      	ldr	r3, [pc, #432]	; (800c48c <KyushinJudge+0x8a8>)
 800c2dc:	785a      	ldrb	r2, [r3, #1]
 800c2de:	4b6b      	ldr	r3, [pc, #428]	; (800c48c <KyushinJudge+0x8a8>)
 800c2e0:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800c2e2:	4b6a      	ldr	r3, [pc, #424]	; (800c48c <KyushinJudge+0x8a8>)
 800c2e4:	2203      	movs	r2, #3
 800c2e6:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe f9a2 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c2f0:	4b66      	ldr	r3, [pc, #408]	; (800c48c <KyushinJudge+0x8a8>)
 800c2f2:	7a5a      	ldrb	r2, [r3, #9]
 800c2f4:	4b65      	ldr	r3, [pc, #404]	; (800c48c <KyushinJudge+0x8a8>)
 800c2f6:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c2f8:	4b64      	ldr	r3, [pc, #400]	; (800c48c <KyushinJudge+0x8a8>)
 800c2fa:	799a      	ldrb	r2, [r3, #6]
 800c2fc:	4b63      	ldr	r3, [pc, #396]	; (800c48c <KyushinJudge+0x8a8>)
 800c2fe:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c300:	4b62      	ldr	r3, [pc, #392]	; (800c48c <KyushinJudge+0x8a8>)
 800c302:	79da      	ldrb	r2, [r3, #7]
 800c304:	4b61      	ldr	r3, [pc, #388]	; (800c48c <KyushinJudge+0x8a8>)
 800c306:	705a      	strb	r2, [r3, #1]
 800c308:	e0ba      	b.n	800c480 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800c30a:	4b60      	ldr	r3, [pc, #384]	; (800c48c <KyushinJudge+0x8a8>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	4618      	mov	r0, r3
 800c310:	4b5e      	ldr	r3, [pc, #376]	; (800c48c <KyushinJudge+0x8a8>)
 800c312:	785b      	ldrb	r3, [r3, #1]
 800c314:	4619      	mov	r1, r3
 800c316:	4a5e      	ldr	r2, [pc, #376]	; (800c490 <KyushinJudge+0x8ac>)
 800c318:	0103      	lsls	r3, r0, #4
 800c31a:	440b      	add	r3, r1
 800c31c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c320:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d13c      	bne.n	800c3a4 <KyushinJudge+0x7c0>
 800c32a:	4b58      	ldr	r3, [pc, #352]	; (800c48c <KyushinJudge+0x8a8>)
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	4b56      	ldr	r3, [pc, #344]	; (800c48c <KyushinJudge+0x8a8>)
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	3b01      	subs	r3, #1
 800c336:	4957      	ldr	r1, [pc, #348]	; (800c494 <KyushinJudge+0x8b0>)
 800c338:	0112      	lsls	r2, r2, #4
 800c33a:	4413      	add	r3, r2
 800c33c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c340:	4b52      	ldr	r3, [pc, #328]	; (800c48c <KyushinJudge+0x8a8>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	461c      	mov	r4, r3
 800c346:	4b51      	ldr	r3, [pc, #324]	; (800c48c <KyushinJudge+0x8a8>)
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	4618      	mov	r0, r3
 800c34c:	4951      	ldr	r1, [pc, #324]	; (800c494 <KyushinJudge+0x8b0>)
 800c34e:	0123      	lsls	r3, r4, #4
 800c350:	4403      	add	r3, r0
 800c352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c356:	429a      	cmp	r2, r3
 800c358:	d224      	bcs.n	800c3a4 <KyushinJudge+0x7c0>
 800c35a:	4b4c      	ldr	r3, [pc, #304]	; (800c48c <KyushinJudge+0x8a8>)
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d020      	beq.n	800c3a4 <KyushinJudge+0x7c0>
				  //左?��?
    			  Pos.Dir = left;
 800c362:	4b4a      	ldr	r3, [pc, #296]	; (800c48c <KyushinJudge+0x8a8>)
 800c364:	2203      	movs	r2, #3
 800c366:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800c368:	4b48      	ldr	r3, [pc, #288]	; (800c48c <KyushinJudge+0x8a8>)
 800c36a:	781a      	ldrb	r2, [r3, #0]
 800c36c:	4b47      	ldr	r3, [pc, #284]	; (800c48c <KyushinJudge+0x8a8>)
 800c36e:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y - 1;
 800c370:	4b46      	ldr	r3, [pc, #280]	; (800c48c <KyushinJudge+0x8a8>)
 800c372:	785b      	ldrb	r3, [r3, #1]
 800c374:	3b01      	subs	r3, #1
 800c376:	b2da      	uxtb	r2, r3
 800c378:	4b44      	ldr	r3, [pc, #272]	; (800c48c <KyushinJudge+0x8a8>)
 800c37a:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = south;
 800c37c:	4b43      	ldr	r3, [pc, #268]	; (800c48c <KyushinJudge+0x8a8>)
 800c37e:	2202      	movs	r2, #2
 800c380:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe f955 	bl	800a634 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c38a:	4b40      	ldr	r3, [pc, #256]	; (800c48c <KyushinJudge+0x8a8>)
 800c38c:	7a5a      	ldrb	r2, [r3, #9]
 800c38e:	4b3f      	ldr	r3, [pc, #252]	; (800c48c <KyushinJudge+0x8a8>)
 800c390:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c392:	4b3e      	ldr	r3, [pc, #248]	; (800c48c <KyushinJudge+0x8a8>)
 800c394:	799a      	ldrb	r2, [r3, #6]
 800c396:	4b3d      	ldr	r3, [pc, #244]	; (800c48c <KyushinJudge+0x8a8>)
 800c398:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c39a:	4b3c      	ldr	r3, [pc, #240]	; (800c48c <KyushinJudge+0x8a8>)
 800c39c:	79da      	ldrb	r2, [r3, #7]
 800c39e:	4b3b      	ldr	r3, [pc, #236]	; (800c48c <KyushinJudge+0x8a8>)
 800c3a0:	705a      	strb	r2, [r3, #1]
 800c3a2:	e06d      	b.n	800c480 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800c3a4:	4b39      	ldr	r3, [pc, #228]	; (800c48c <KyushinJudge+0x8a8>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	4b38      	ldr	r3, [pc, #224]	; (800c48c <KyushinJudge+0x8a8>)
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4a37      	ldr	r2, [pc, #220]	; (800c490 <KyushinJudge+0x8ac>)
 800c3b2:	0103      	lsls	r3, r0, #4
 800c3b4:	440b      	add	r3, r1
 800c3b6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d13c      	bne.n	800c43e <KyushinJudge+0x85a>
 800c3c4:	4b31      	ldr	r3, [pc, #196]	; (800c48c <KyushinJudge+0x8a8>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4b30      	ldr	r3, [pc, #192]	; (800c48c <KyushinJudge+0x8a8>)
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	4930      	ldr	r1, [pc, #192]	; (800c494 <KyushinJudge+0x8b0>)
 800c3d2:	0112      	lsls	r2, r2, #4
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c3da:	4b2c      	ldr	r3, [pc, #176]	; (800c48c <KyushinJudge+0x8a8>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	461c      	mov	r4, r3
 800c3e0:	4b2a      	ldr	r3, [pc, #168]	; (800c48c <KyushinJudge+0x8a8>)
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	492b      	ldr	r1, [pc, #172]	; (800c494 <KyushinJudge+0x8b0>)
 800c3e8:	0123      	lsls	r3, r4, #4
 800c3ea:	4403      	add	r3, r0
 800c3ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d224      	bcs.n	800c43e <KyushinJudge+0x85a>
 800c3f4:	4b25      	ldr	r3, [pc, #148]	; (800c48c <KyushinJudge+0x8a8>)
 800c3f6:	785b      	ldrb	r3, [r3, #1]
 800c3f8:	2b0e      	cmp	r3, #14
 800c3fa:	d820      	bhi.n	800c43e <KyushinJudge+0x85a>
				  //右?��?
				  Pos.Dir = right;
 800c3fc:	4b23      	ldr	r3, [pc, #140]	; (800c48c <KyushinJudge+0x8a8>)
 800c3fe:	2201      	movs	r2, #1
 800c400:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c402:	4b22      	ldr	r3, [pc, #136]	; (800c48c <KyushinJudge+0x8a8>)
 800c404:	781a      	ldrb	r2, [r3, #0]
 800c406:	4b21      	ldr	r3, [pc, #132]	; (800c48c <KyushinJudge+0x8a8>)
 800c408:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c40a:	4b20      	ldr	r3, [pc, #128]	; (800c48c <KyushinJudge+0x8a8>)
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	3301      	adds	r3, #1
 800c410:	b2da      	uxtb	r2, r3
 800c412:	4b1e      	ldr	r3, [pc, #120]	; (800c48c <KyushinJudge+0x8a8>)
 800c414:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c416:	4b1d      	ldr	r3, [pc, #116]	; (800c48c <KyushinJudge+0x8a8>)
 800c418:	2200      	movs	r2, #0
 800c41a:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe f908 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c424:	4b19      	ldr	r3, [pc, #100]	; (800c48c <KyushinJudge+0x8a8>)
 800c426:	7a5a      	ldrb	r2, [r3, #9]
 800c428:	4b18      	ldr	r3, [pc, #96]	; (800c48c <KyushinJudge+0x8a8>)
 800c42a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c42c:	4b17      	ldr	r3, [pc, #92]	; (800c48c <KyushinJudge+0x8a8>)
 800c42e:	799a      	ldrb	r2, [r3, #6]
 800c430:	4b16      	ldr	r3, [pc, #88]	; (800c48c <KyushinJudge+0x8a8>)
 800c432:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c434:	4b15      	ldr	r3, [pc, #84]	; (800c48c <KyushinJudge+0x8a8>)
 800c436:	79da      	ldrb	r2, [r3, #7]
 800c438:	4b14      	ldr	r3, [pc, #80]	; (800c48c <KyushinJudge+0x8a8>)
 800c43a:	705a      	strb	r2, [r3, #1]
 800c43c:	e020      	b.n	800c480 <KyushinJudge+0x89c>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <KyushinJudge+0x8a8>)
 800c440:	2202      	movs	r2, #2
 800c442:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800c444:	4b11      	ldr	r3, [pc, #68]	; (800c48c <KyushinJudge+0x8a8>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	4b0f      	ldr	r3, [pc, #60]	; (800c48c <KyushinJudge+0x8a8>)
 800c44e:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c450:	4b0e      	ldr	r3, [pc, #56]	; (800c48c <KyushinJudge+0x8a8>)
 800c452:	785a      	ldrb	r2, [r3, #1]
 800c454:	4b0d      	ldr	r3, [pc, #52]	; (800c48c <KyushinJudge+0x8a8>)
 800c456:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <KyushinJudge+0x8a8>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe f8e7 	bl	800a634 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c466:	4b09      	ldr	r3, [pc, #36]	; (800c48c <KyushinJudge+0x8a8>)
 800c468:	7a5a      	ldrb	r2, [r3, #9]
 800c46a:	4b08      	ldr	r3, [pc, #32]	; (800c48c <KyushinJudge+0x8a8>)
 800c46c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c46e:	4b07      	ldr	r3, [pc, #28]	; (800c48c <KyushinJudge+0x8a8>)
 800c470:	799a      	ldrb	r2, [r3, #6]
 800c472:	4b06      	ldr	r3, [pc, #24]	; (800c48c <KyushinJudge+0x8a8>)
 800c474:	701a      	strb	r2, [r3, #0]
		       	  Pos.Y = Pos.NextY;
 800c476:	4b05      	ldr	r3, [pc, #20]	; (800c48c <KyushinJudge+0x8a8>)
 800c478:	79da      	ldrb	r2, [r3, #7]
 800c47a:	4b04      	ldr	r3, [pc, #16]	; (800c48c <KyushinJudge+0x8a8>)
 800c47c:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c47e:	e001      	b.n	800c484 <KyushinJudge+0x8a0>
 800c480:	e000      	b.n	800c484 <KyushinJudge+0x8a0>

		  default:
			  break;
 800c482:	bf00      	nop
		  //swtich end
	}

}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}
 800c48c:	20000000 	.word	0x20000000
 800c490:	2000088c 	.word	0x2000088c
 800c494:	2000045c 	.word	0x2000045c

0800c498 <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800c4a2:	491c      	ldr	r1, [pc, #112]	; (800c514 <is_unknown+0x7c>)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	011a      	lsls	r2, r3, #4
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c4b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d023      	beq.n	800c502 <is_unknown+0x6a>
 800c4ba:	4916      	ldr	r1, [pc, #88]	; (800c514 <is_unknown+0x7c>)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	011a      	lsls	r2, r3, #4
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c4c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d017      	beq.n	800c502 <is_unknown+0x6a>
 800c4d2:	4910      	ldr	r1, [pc, #64]	; (800c514 <is_unknown+0x7c>)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	011a      	lsls	r2, r3, #4
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c4e0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d00b      	beq.n	800c502 <is_unknown+0x6a>
 800c4ea:	490a      	ldr	r1, [pc, #40]	; (800c514 <is_unknown+0x7c>)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	011a      	lsls	r2, r3, #4
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c4f8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d101      	bne.n	800c506 <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 800c506:	2300      	movs	r3, #0
	}
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	2000088c 	.word	0x2000088c

0800c518 <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	4613      	mov	r3, r2
 800c524:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800c52a:	4b15      	ldr	r3, [pc, #84]	; (800c580 <get_priority+0x68>)
 800c52c:	78db      	ldrb	r3, [r3, #3]
 800c52e:	79fa      	ldrb	r2, [r7, #7]
 800c530:	429a      	cmp	r2, r3
 800c532:	d102      	bne.n	800c53a <get_priority+0x22>
	{
		priority = 2;
 800c534:	2302      	movs	r3, #2
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	e012      	b.n	800c560 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800c53a:	4b11      	ldr	r3, [pc, #68]	; (800c580 <get_priority+0x68>)
 800c53c:	78db      	ldrb	r3, [r3, #3]
 800c53e:	1d1a      	adds	r2, r3, #4
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	425a      	negs	r2, r3
 800c546:	f003 0303 	and.w	r3, r3, #3
 800c54a:	f002 0203 	and.w	r2, r2, #3
 800c54e:	bf58      	it	pl
 800c550:	4253      	negpl	r3, r2
 800c552:	2b02      	cmp	r3, #2
 800c554:	d102      	bne.n	800c55c <get_priority+0x44>
	{
		priority = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	617b      	str	r3, [r7, #20]
 800c55a:	e001      	b.n	800c560 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800c55c:	2301      	movs	r3, #1
 800c55e:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff ff98 	bl	800c498 <is_unknown>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	3304      	adds	r3, #4
 800c572:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800c574:	697b      	ldr	r3, [r7, #20]

}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20000000 	.word	0x20000000

0800c584 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b088      	sub	sp, #32
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff f8d5 	bl	800b744 <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800c59a:	23ff      	movs	r3, #255	; 0xff
 800c59c:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800c5a2:	4ba1      	ldr	r3, [pc, #644]	; (800c828 <get_nextdir+0x2a4>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	4b9f      	ldr	r3, [pc, #636]	; (800c828 <get_nextdir+0x2a4>)
 800c5aa:	785b      	ldrb	r3, [r3, #1]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4a9f      	ldr	r2, [pc, #636]	; (800c82c <get_nextdir+0x2a8>)
 800c5b0:	0103      	lsls	r3, r0, #4
 800c5b2:	440b      	add	r3, r1
 800c5b4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c5b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d143      	bne.n	800c650 <get_nextdir+0xcc>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800c5c8:	4b97      	ldr	r3, [pc, #604]	; (800c828 <get_nextdir+0x2a4>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	4b96      	ldr	r3, [pc, #600]	; (800c828 <get_nextdir+0x2a4>)
 800c5d0:	785b      	ldrb	r3, [r3, #1]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f7ff ff9e 	bl	800c518 <get_priority>
 800c5dc:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800c5de:	4b92      	ldr	r3, [pc, #584]	; (800c828 <get_nextdir+0x2a4>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	4b90      	ldr	r3, [pc, #576]	; (800c828 <get_nextdir+0x2a4>)
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	4991      	ldr	r1, [pc, #580]	; (800c830 <get_nextdir+0x2ac>)
 800c5ec:	0112      	lsls	r2, r2, #4
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	dd11      	ble.n	800c620 <get_nextdir+0x9c>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800c5fc:	4b8a      	ldr	r3, [pc, #552]	; (800c828 <get_nextdir+0x2a4>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	4b89      	ldr	r3, [pc, #548]	; (800c828 <get_nextdir+0x2a4>)
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	3301      	adds	r3, #1
 800c608:	4989      	ldr	r1, [pc, #548]	; (800c830 <get_nextdir+0x2ac>)
 800c60a:	0112      	lsls	r2, r2, #4
 800c60c:	4413      	add	r3, r2
 800c60e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c612:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800c614:	4b84      	ldr	r3, [pc, #528]	; (800c828 <get_nextdir+0x2a4>)
 800c616:	2200      	movs	r2, #0
 800c618:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	61bb      	str	r3, [r7, #24]
 800c61e:	e017      	b.n	800c650 <get_nextdir+0xcc>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800c620:	4b81      	ldr	r3, [pc, #516]	; (800c828 <get_nextdir+0x2a4>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	461a      	mov	r2, r3
 800c626:	4b80      	ldr	r3, [pc, #512]	; (800c828 <get_nextdir+0x2a4>)
 800c628:	785b      	ldrb	r3, [r3, #1]
 800c62a:	3301      	adds	r3, #1
 800c62c:	4980      	ldr	r1, [pc, #512]	; (800c830 <get_nextdir+0x2ac>)
 800c62e:	0112      	lsls	r2, r2, #4
 800c630:	4413      	add	r3, r2
 800c632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c636:	461a      	mov	r2, r3
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d108      	bne.n	800c650 <get_nextdir+0xcc>
		{
			if(priority < tmp_priority )				//優先度を評価
 800c63e:	69ba      	ldr	r2, [r7, #24]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	429a      	cmp	r2, r3
 800c644:	da04      	bge.n	800c650 <get_nextdir+0xcc>
			{
				Pos.NextCar = north;					//方向を更新
 800c646:	4b78      	ldr	r3, [pc, #480]	; (800c828 <get_nextdir+0x2a4>)
 800c648:	2200      	movs	r2, #0
 800c64a:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800c650:	4b75      	ldr	r3, [pc, #468]	; (800c828 <get_nextdir+0x2a4>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <get_nextdir+0x2a4>)
 800c658:	785b      	ldrb	r3, [r3, #1]
 800c65a:	4619      	mov	r1, r3
 800c65c:	4a73      	ldr	r2, [pc, #460]	; (800c82c <get_nextdir+0x2a8>)
 800c65e:	0103      	lsls	r3, r0, #4
 800c660:	440b      	add	r3, r1
 800c662:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c666:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	461a      	mov	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4013      	ands	r3, r2
 800c672:	2b00      	cmp	r3, #0
 800c674:	d142      	bne.n	800c6fc <get_nextdir+0x178>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800c676:	4b6c      	ldr	r3, [pc, #432]	; (800c828 <get_nextdir+0x2a4>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	1c58      	adds	r0, r3, #1
 800c67c:	4b6a      	ldr	r3, [pc, #424]	; (800c828 <get_nextdir+0x2a4>)
 800c67e:	785b      	ldrb	r3, [r3, #1]
 800c680:	2201      	movs	r2, #1
 800c682:	4619      	mov	r1, r3
 800c684:	f7ff ff48 	bl	800c518 <get_priority>
 800c688:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800c68a:	4b67      	ldr	r3, [pc, #412]	; (800c828 <get_nextdir+0x2a4>)
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	3301      	adds	r3, #1
 800c690:	4a65      	ldr	r2, [pc, #404]	; (800c828 <get_nextdir+0x2a4>)
 800c692:	7852      	ldrb	r2, [r2, #1]
 800c694:	4611      	mov	r1, r2
 800c696:	4a66      	ldr	r2, [pc, #408]	; (800c830 <get_nextdir+0x2ac>)
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	440b      	add	r3, r1
 800c69c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	dd11      	ble.n	800c6cc <get_nextdir+0x148>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800c6a8:	4b5f      	ldr	r3, [pc, #380]	; (800c828 <get_nextdir+0x2a4>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a5e      	ldr	r2, [pc, #376]	; (800c828 <get_nextdir+0x2a4>)
 800c6b0:	7852      	ldrb	r2, [r2, #1]
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	4a5e      	ldr	r2, [pc, #376]	; (800c830 <get_nextdir+0x2ac>)
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	440b      	add	r3, r1
 800c6ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6be:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800c6c0:	4b59      	ldr	r3, [pc, #356]	; (800c828 <get_nextdir+0x2a4>)
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	e017      	b.n	800c6fc <get_nextdir+0x178>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800c6cc:	4b56      	ldr	r3, [pc, #344]	; (800c828 <get_nextdir+0x2a4>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	4a55      	ldr	r2, [pc, #340]	; (800c828 <get_nextdir+0x2a4>)
 800c6d4:	7852      	ldrb	r2, [r2, #1]
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4a55      	ldr	r2, [pc, #340]	; (800c830 <get_nextdir+0x2ac>)
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	440b      	add	r3, r1
 800c6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d108      	bne.n	800c6fc <get_nextdir+0x178>
		{
			if(priority < tmp_priority)				//優先度を評価
 800c6ea:	69ba      	ldr	r2, [r7, #24]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	da04      	bge.n	800c6fc <get_nextdir+0x178>
			{
				Pos.NextCar = east;					//方向を保存
 800c6f2:	4b4d      	ldr	r3, [pc, #308]	; (800c828 <get_nextdir+0x2a4>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800c6fc:	4b4a      	ldr	r3, [pc, #296]	; (800c828 <get_nextdir+0x2a4>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	4b49      	ldr	r3, [pc, #292]	; (800c828 <get_nextdir+0x2a4>)
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	4619      	mov	r1, r3
 800c708:	4a48      	ldr	r2, [pc, #288]	; (800c82c <get_nextdir+0x2a8>)
 800c70a:	0103      	lsls	r3, r0, #4
 800c70c:	440b      	add	r3, r1
 800c70e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c712:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c716:	b2db      	uxtb	r3, r3
 800c718:	461a      	mov	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4013      	ands	r3, r2
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d143      	bne.n	800c7aa <get_nextdir+0x226>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800c722:	4b41      	ldr	r3, [pc, #260]	; (800c828 <get_nextdir+0x2a4>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	4b3f      	ldr	r3, [pc, #252]	; (800c828 <get_nextdir+0x2a4>)
 800c72a:	785b      	ldrb	r3, [r3, #1]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	2202      	movs	r2, #2
 800c730:	4619      	mov	r1, r3
 800c732:	f7ff fef1 	bl	800c518 <get_priority>
 800c736:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800c738:	4b3b      	ldr	r3, [pc, #236]	; (800c828 <get_nextdir+0x2a4>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	461a      	mov	r2, r3
 800c73e:	4b3a      	ldr	r3, [pc, #232]	; (800c828 <get_nextdir+0x2a4>)
 800c740:	785b      	ldrb	r3, [r3, #1]
 800c742:	3b01      	subs	r3, #1
 800c744:	493a      	ldr	r1, [pc, #232]	; (800c830 <get_nextdir+0x2ac>)
 800c746:	0112      	lsls	r2, r2, #4
 800c748:	4413      	add	r3, r2
 800c74a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c74e:	461a      	mov	r2, r3
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	4293      	cmp	r3, r2
 800c754:	dd11      	ble.n	800c77a <get_nextdir+0x1f6>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800c756:	4b34      	ldr	r3, [pc, #208]	; (800c828 <get_nextdir+0x2a4>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	4b32      	ldr	r3, [pc, #200]	; (800c828 <get_nextdir+0x2a4>)
 800c75e:	785b      	ldrb	r3, [r3, #1]
 800c760:	3b01      	subs	r3, #1
 800c762:	4933      	ldr	r1, [pc, #204]	; (800c830 <get_nextdir+0x2ac>)
 800c764:	0112      	lsls	r2, r2, #4
 800c766:	4413      	add	r3, r2
 800c768:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c76c:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800c76e:	4b2e      	ldr	r3, [pc, #184]	; (800c828 <get_nextdir+0x2a4>)
 800c770:	2202      	movs	r2, #2
 800c772:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	61bb      	str	r3, [r7, #24]
 800c778:	e017      	b.n	800c7aa <get_nextdir+0x226>
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800c77a:	4b2b      	ldr	r3, [pc, #172]	; (800c828 <get_nextdir+0x2a4>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	4b29      	ldr	r3, [pc, #164]	; (800c828 <get_nextdir+0x2a4>)
 800c782:	785b      	ldrb	r3, [r3, #1]
 800c784:	3b01      	subs	r3, #1
 800c786:	492a      	ldr	r1, [pc, #168]	; (800c830 <get_nextdir+0x2ac>)
 800c788:	0112      	lsls	r2, r2, #4
 800c78a:	4413      	add	r3, r2
 800c78c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c790:	461a      	mov	r2, r3
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4293      	cmp	r3, r2
 800c796:	d108      	bne.n	800c7aa <get_nextdir+0x226>
		{
			if(priority < tmp_priority)				//優先度を評価
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	da04      	bge.n	800c7aa <get_nextdir+0x226>
			{
				Pos.NextCar = south;					//方向を保存
 800c7a0:	4b21      	ldr	r3, [pc, #132]	; (800c828 <get_nextdir+0x2a4>)
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800c7aa:	4b1f      	ldr	r3, [pc, #124]	; (800c828 <get_nextdir+0x2a4>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	4b1d      	ldr	r3, [pc, #116]	; (800c828 <get_nextdir+0x2a4>)
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4a1d      	ldr	r2, [pc, #116]	; (800c82c <get_nextdir+0x2a8>)
 800c7b8:	0103      	lsls	r3, r0, #4
 800c7ba:	440b      	add	r3, r1
 800c7bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c7c0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d145      	bne.n	800c85c <get_nextdir+0x2d8>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800c7d0:	4b15      	ldr	r3, [pc, #84]	; (800c828 <get_nextdir+0x2a4>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	1e58      	subs	r0, r3, #1
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <get_nextdir+0x2a4>)
 800c7d8:	785b      	ldrb	r3, [r3, #1]
 800c7da:	2203      	movs	r2, #3
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f7ff fe9b 	bl	800c518 <get_priority>
 800c7e2:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800c7e4:	4b10      	ldr	r3, [pc, #64]	; (800c828 <get_nextdir+0x2a4>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	4a0f      	ldr	r2, [pc, #60]	; (800c828 <get_nextdir+0x2a4>)
 800c7ec:	7852      	ldrb	r2, [r2, #1]
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <get_nextdir+0x2ac>)
 800c7f2:	011b      	lsls	r3, r3, #4
 800c7f4:	440b      	add	r3, r1
 800c7f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	4293      	cmp	r3, r2
 800c800:	dd18      	ble.n	800c834 <get_nextdir+0x2b0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800c802:	4b09      	ldr	r3, [pc, #36]	; (800c828 <get_nextdir+0x2a4>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	3b01      	subs	r3, #1
 800c808:	4a07      	ldr	r2, [pc, #28]	; (800c828 <get_nextdir+0x2a4>)
 800c80a:	7852      	ldrb	r2, [r2, #1]
 800c80c:	4611      	mov	r1, r2
 800c80e:	4a08      	ldr	r2, [pc, #32]	; (800c830 <get_nextdir+0x2ac>)
 800c810:	011b      	lsls	r3, r3, #4
 800c812:	440b      	add	r3, r1
 800c814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c818:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800c81a:	4b03      	ldr	r3, [pc, #12]	; (800c828 <get_nextdir+0x2a4>)
 800c81c:	2203      	movs	r2, #3
 800c81e:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	e01a      	b.n	800c85c <get_nextdir+0x2d8>
 800c826:	bf00      	nop
 800c828:	20000000 	.word	0x20000000
 800c82c:	2000088c 	.word	0x2000088c
 800c830:	2000045c 	.word	0x2000045c
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800c834:	4b12      	ldr	r3, [pc, #72]	; (800c880 <get_nextdir+0x2fc>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	3b01      	subs	r3, #1
 800c83a:	4a11      	ldr	r2, [pc, #68]	; (800c880 <get_nextdir+0x2fc>)
 800c83c:	7852      	ldrb	r2, [r2, #1]
 800c83e:	4611      	mov	r1, r2
 800c840:	4a10      	ldr	r2, [pc, #64]	; (800c884 <get_nextdir+0x300>)
 800c842:	011b      	lsls	r3, r3, #4
 800c844:	440b      	add	r3, r1
 800c846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c84a:	461a      	mov	r2, r3
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	4293      	cmp	r3, r2
 800c850:	d104      	bne.n	800c85c <get_nextdir+0x2d8>
		{
			Pos.NextCar = west;						//方向を保存
 800c852:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <get_nextdir+0x2fc>)
 800c854:	2203      	movs	r2, #3
 800c856:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800c85c:	4b08      	ldr	r3, [pc, #32]	; (800c880 <get_nextdir+0x2fc>)
 800c85e:	7a5b      	ldrb	r3, [r3, #9]
 800c860:	3304      	adds	r3, #4
 800c862:	4a07      	ldr	r2, [pc, #28]	; (800c880 <get_nextdir+0x2fc>)
 800c864:	78d2      	ldrb	r2, [r2, #3]
 800c866:	1a9b      	subs	r3, r3, r2
 800c868:	425a      	negs	r2, r3
 800c86a:	f003 0303 	and.w	r3, r3, #3
 800c86e:	f002 0203 	and.w	r2, r2, #3
 800c872:	bf58      	it	pl
 800c874:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800c876:	4618      	mov	r0, r3
 800c878:	3720      	adds	r7, #32
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	20000000 	.word	0x20000000
 800c884:	2000045c 	.word	0x2000045c

0800c888 <fast_run>:
void fast_run(int x, int y)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
//		case west:
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}
	SearchOrFast = 1;
 800c892:	4b48      	ldr	r3, [pc, #288]	; (800c9b4 <fast_run+0x12c>)
 800c894:	2201      	movs	r2, #1
 800c896:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800c898:	4b47      	ldr	r3, [pc, #284]	; (800c9b8 <fast_run+0x130>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800c89e:	4b46      	ldr	r3, [pc, #280]	; (800c9b8 <fast_run+0x130>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800c8a4:	4b44      	ldr	r3, [pc, #272]	; (800c9b8 <fast_run+0x130>)
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	4b43      	ldr	r3, [pc, #268]	; (800c9b8 <fast_run+0x130>)
 800c8aa:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800c8ac:	4b42      	ldr	r3, [pc, #264]	; (800c9b8 <fast_run+0x130>)
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	4b40      	ldr	r3, [pc, #256]	; (800c9b8 <fast_run+0x130>)
 800c8b6:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800c8b8:	4b3f      	ldr	r3, [pc, #252]	; (800c9b8 <fast_run+0x130>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	725a      	strb	r2, [r3, #9]
	Accel(61.75, ExploreVelocity);
 800c8be:	4b3f      	ldr	r3, [pc, #252]	; (800c9bc <fast_run+0x134>)
 800c8c0:	edd3 7a00 	vldr	s15, [r3]
 800c8c4:	eef0 0a67 	vmov.f32	s1, s15
 800c8c8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800c9c0 <fast_run+0x138>
 800c8cc:	f7fd fab4 	bl	8009e38 <Accel>
 	Pos.X = Pos.NextX;
 800c8d0:	4b39      	ldr	r3, [pc, #228]	; (800c9b8 <fast_run+0x130>)
 800c8d2:	799a      	ldrb	r2, [r3, #6]
 800c8d4:	4b38      	ldr	r3, [pc, #224]	; (800c9b8 <fast_run+0x130>)
 800c8d6:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800c8d8:	4b37      	ldr	r3, [pc, #220]	; (800c9b8 <fast_run+0x130>)
 800c8da:	79da      	ldrb	r2, [r3, #7]
 800c8dc:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <fast_run+0x130>)
 800c8de:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;	//自分の向きを更新
 800c8e0:	4b35      	ldr	r3, [pc, #212]	; (800c9b8 <fast_run+0x130>)
 800c8e2:	7a5a      	ldrb	r2, [r3, #9]
 800c8e4:	4b34      	ldr	r3, [pc, #208]	; (800c9b8 <fast_run+0x130>)
 800c8e6:	70da      	strb	r2, [r3, #3]

	while((Pos.X != x) || (Pos.Y != y)){			//ゴールするまで繰り返す
 800c8e8:	e053      	b.n	800c992 <fast_run+0x10a>
		Pos.Dir = get_nextdir(x,y,0x03);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fe48 	bl	800c584 <get_nextdir>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	4b2f      	ldr	r3, [pc, #188]	; (800c9b8 <fast_run+0x130>)
 800c8fa:	709a      	strb	r2, [r3, #2]
		//向いた方向によって自分の座標を更新する
		switch(Pos.NextCar)//
 800c8fc:	4b2e      	ldr	r3, [pc, #184]	; (800c9b8 <fast_run+0x130>)
 800c8fe:	7a5b      	ldrb	r3, [r3, #9]
 800c900:	2b03      	cmp	r3, #3
 800c902:	d837      	bhi.n	800c974 <fast_run+0xec>
 800c904:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <fast_run+0x84>)
 800c906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90a:	bf00      	nop
 800c90c:	0800c91d 	.word	0x0800c91d
 800c910:	0800c933 	.word	0x0800c933
 800c914:	0800c949 	.word	0x0800c949
 800c918:	0800c95f 	.word	0x0800c95f
		{
			case north:
				Pos.NextX = Pos.X;
 800c91c:	4b26      	ldr	r3, [pc, #152]	; (800c9b8 <fast_run+0x130>)
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	4b25      	ldr	r3, [pc, #148]	; (800c9b8 <fast_run+0x130>)
 800c922:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800c924:	4b24      	ldr	r3, [pc, #144]	; (800c9b8 <fast_run+0x130>)
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	3301      	adds	r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	4b22      	ldr	r3, [pc, #136]	; (800c9b8 <fast_run+0x130>)
 800c92e:	71da      	strb	r2, [r3, #7]
				break;
 800c930:	e020      	b.n	800c974 <fast_run+0xec>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800c932:	4b21      	ldr	r3, [pc, #132]	; (800c9b8 <fast_run+0x130>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	4b1f      	ldr	r3, [pc, #124]	; (800c9b8 <fast_run+0x130>)
 800c93c:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800c93e:	4b1e      	ldr	r3, [pc, #120]	; (800c9b8 <fast_run+0x130>)
 800c940:	785a      	ldrb	r2, [r3, #1]
 800c942:	4b1d      	ldr	r3, [pc, #116]	; (800c9b8 <fast_run+0x130>)
 800c944:	71da      	strb	r2, [r3, #7]
				break;
 800c946:	e015      	b.n	800c974 <fast_run+0xec>

			case south:
				Pos.NextX = Pos.X;
 800c948:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <fast_run+0x130>)
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	4b1a      	ldr	r3, [pc, #104]	; (800c9b8 <fast_run+0x130>)
 800c94e:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800c950:	4b19      	ldr	r3, [pc, #100]	; (800c9b8 <fast_run+0x130>)
 800c952:	785b      	ldrb	r3, [r3, #1]
 800c954:	3b01      	subs	r3, #1
 800c956:	b2da      	uxtb	r2, r3
 800c958:	4b17      	ldr	r3, [pc, #92]	; (800c9b8 <fast_run+0x130>)
 800c95a:	71da      	strb	r2, [r3, #7]
				break;
 800c95c:	e00a      	b.n	800c974 <fast_run+0xec>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800c95e:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <fast_run+0x130>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	3b01      	subs	r3, #1
 800c964:	b2da      	uxtb	r2, r3
 800c966:	4b14      	ldr	r3, [pc, #80]	; (800c9b8 <fast_run+0x130>)
 800c968:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800c96a:	4b13      	ldr	r3, [pc, #76]	; (800c9b8 <fast_run+0x130>)
 800c96c:	785a      	ldrb	r2, [r3, #1]
 800c96e:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <fast_run+0x130>)
 800c970:	71da      	strb	r2, [r3, #7]
				break;
 800c972:	bf00      	nop

		}
		SelectAction('S');
 800c974:	2053      	movs	r0, #83	; 0x53
 800c976:	f7fd fe5d 	bl	800a634 <SelectAction>
	 	Pos.X = Pos.NextX;
 800c97a:	4b0f      	ldr	r3, [pc, #60]	; (800c9b8 <fast_run+0x130>)
 800c97c:	799a      	ldrb	r2, [r3, #6]
 800c97e:	4b0e      	ldr	r3, [pc, #56]	; (800c9b8 <fast_run+0x130>)
 800c980:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800c982:	4b0d      	ldr	r3, [pc, #52]	; (800c9b8 <fast_run+0x130>)
 800c984:	79da      	ldrb	r2, [r3, #7]
 800c986:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <fast_run+0x130>)
 800c988:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800c98a:	4b0b      	ldr	r3, [pc, #44]	; (800c9b8 <fast_run+0x130>)
 800c98c:	7a5a      	ldrb	r2, [r3, #9]
 800c98e:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <fast_run+0x130>)
 800c990:	70da      	strb	r2, [r3, #3]
	while((Pos.X != x) || (Pos.Y != y)){			//ゴールするまで繰り返す
 800c992:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <fast_run+0x130>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d1a5      	bne.n	800c8ea <fast_run+0x62>
 800c99e:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <fast_run+0x130>)
 800c9a0:	785b      	ldrb	r3, [r3, #1]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d19f      	bne.n	800c8ea <fast_run+0x62>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200003e8 	.word	0x200003e8
 800c9b8:	20000000 	.word	0x20000000
 800c9bc:	2000065c 	.word	0x2000065c
 800c9c0:	42770000 	.word	0x42770000

0800c9c4 <InitExplore>:
#include "Flash.h"
#include "Interrupt.h"
#include "Debug.h"

void InitExplore()
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
	PIDReset(A_VELO_PID);

	HAL_Delay(500);
#else
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800c9ca:	f002 fc41 	bl	800f250 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c9ce:	f002 fb45 	bl	800f05c <EncoderStart>
	EmitterON();
 800c9d2:	f002 fb63 	bl	800f09c <EmitterON>
	ADCStart();
 800c9d6:	f002 f8c5 	bl	800eb64 <ADCStart>
	uint8_t imu_check;
	imu_check =IMU_init();
 800c9da:	f002 fa93 	bl	800ef04 <IMU_init>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4838      	ldr	r0, [pc, #224]	; (800cac8 <InitExplore+0x104>)
 800c9e8:	f008 fbba 	bl	8015160 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	2004      	movs	r0, #4
 800c9f0:	f000 fbe2 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	2005      	movs	r0, #5
 800c9f8:	f000 fbde 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	2002      	movs	r0, #2
 800ca00:	f000 fbda 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ca04:	2100      	movs	r1, #0
 800ca06:	2003      	movs	r0, #3
 800ca08:	f000 fbd6 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	2001      	movs	r0, #1
 800ca10:	f000 fbd2 	bl	800d1b8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800ca14:	2100      	movs	r1, #0
 800ca16:	2000      	movs	r0, #0
 800ca18:	f000 fbce 	bl	800d1b8 <PIDChangeFlag>


	Load_Gain();
 800ca1c:	f7fd ffce 	bl	800a9bc <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800ca20:	f247 512f 	movw	r1, #29999	; 0x752f
 800ca24:	4829      	ldr	r0, [pc, #164]	; (800cacc <InitExplore+0x108>)
 800ca26:	f7fd fe43 	bl	800a6b0 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800ca2a:	f247 512f 	movw	r1, #29999	; 0x752f
 800ca2e:	4828      	ldr	r0, [pc, #160]	; (800cad0 <InitExplore+0x10c>)
 800ca30:	f7fd fe3e 	bl	800a6b0 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800ca34:	4827      	ldr	r0, [pc, #156]	; (800cad4 <InitExplore+0x110>)
 800ca36:	f005 fc0c 	bl	8012252 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800ca3a:	4827      	ldr	r0, [pc, #156]	; (800cad8 <InitExplore+0x114>)
 800ca3c:	f005 fc09 	bl	8012252 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800ca40:	4b26      	ldr	r3, [pc, #152]	; (800cadc <InitExplore+0x118>)
 800ca42:	f04f 0200 	mov.w	r2, #0
 800ca46:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800ca48:	4b25      	ldr	r3, [pc, #148]	; (800cae0 <InitExplore+0x11c>)
 800ca4a:	f04f 0200 	mov.w	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800ca50:	4b24      	ldr	r3, [pc, #144]	; (800cae4 <InitExplore+0x120>)
 800ca52:	f04f 0200 	mov.w	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800ca58:	4b23      	ldr	r3, [pc, #140]	; (800cae8 <InitExplore+0x124>)
 800ca5a:	f04f 0200 	mov.w	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800ca60:	4b22      	ldr	r3, [pc, #136]	; (800caec <InitExplore+0x128>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800ca66:	4b21      	ldr	r3, [pc, #132]	; (800caec <InitExplore+0x128>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800ca6c:	4b1f      	ldr	r3, [pc, #124]	; (800caec <InitExplore+0x128>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800ca72:	f002 fa71 	bl	800ef58 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800ca76:	4b1e      	ldr	r3, [pc, #120]	; (800caf0 <InitExplore+0x12c>)
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	4a1e      	ldr	r2, [pc, #120]	; (800caf4 <InitExplore+0x130>)
 800ca7c:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800ca7e:	4b1c      	ldr	r3, [pc, #112]	; (800caf0 <InitExplore+0x12c>)
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	4a1c      	ldr	r2, [pc, #112]	; (800caf4 <InitExplore+0x130>)
 800ca84:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ca86:	4b1b      	ldr	r3, [pc, #108]	; (800caf4 <InitExplore+0x130>)
 800ca88:	ed93 7a02 	vldr	s14, [r3, #8]
 800ca8c:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <InitExplore+0x130>)
 800ca8e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ca92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca96:	4b18      	ldr	r3, [pc, #96]	; (800caf8 <InitExplore+0x134>)
 800ca98:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800ca9c:	2004      	movs	r0, #4
 800ca9e:	f000 fba1 	bl	800d1e4 <PIDReset>
	PIDReset(R_VELO_PID);
 800caa2:	2005      	movs	r0, #5
 800caa4:	f000 fb9e 	bl	800d1e4 <PIDReset>

	PIDReset(A_VELO_PID);
 800caa8:	2000      	movs	r0, #0
 800caaa:	f000 fb9b 	bl	800d1e4 <PIDReset>
	PIDReset(L_WALL_PID);
 800caae:	2002      	movs	r0, #2
 800cab0:	f000 fb98 	bl	800d1e4 <PIDReset>
	PIDReset(R_WALL_PID);
 800cab4:	2003      	movs	r0, #3
 800cab6:	f000 fb95 	bl	800d1e4 <PIDReset>
	PIDReset(D_WALL_PID);
 800caba:	2001      	movs	r0, #1
 800cabc:	f000 fb92 	bl	800d1e4 <PIDReset>

#endif
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	08019768 	.word	0x08019768
 800cacc:	40000424 	.word	0x40000424
 800cad0:	40000824 	.word	0x40000824
 800cad4:	20000d14 	.word	0x20000d14
 800cad8:	20000a8c 	.word	0x20000a8c
 800cadc:	200003f0 	.word	0x200003f0
 800cae0:	20000400 	.word	0x20000400
 800cae4:	20000420 	.word	0x20000420
 800cae8:	2000041c 	.word	0x2000041c
 800caec:	20000428 	.word	0x20000428
 800caf0:	2000044c 	.word	0x2000044c
 800caf4:	20000668 	.word	0x20000668
 800caf8:	20000414 	.word	0x20000414

0800cafc <InitFastest>:

void InitFastest()
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800cb02:	f002 fba5 	bl	800f250 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800cb06:	f002 faa9 	bl	800f05c <EncoderStart>
	EmitterON();
 800cb0a:	f002 fac7 	bl	800f09c <EmitterON>
	ADCStart();
 800cb0e:	f002 f829 	bl	800eb64 <ADCStart>
	uint8_t imu_check;
	imu_check =IMU_init();
 800cb12:	f002 f9f7 	bl	800ef04 <IMU_init>
 800cb16:	4603      	mov	r3, r0
 800cb18:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4838      	ldr	r0, [pc, #224]	; (800cc00 <InitFastest+0x104>)
 800cb20:	f008 fb1e 	bl	8015160 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800cb24:	2100      	movs	r1, #0
 800cb26:	2004      	movs	r0, #4
 800cb28:	f000 fb46 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	2005      	movs	r0, #5
 800cb30:	f000 fb42 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cb34:	2100      	movs	r1, #0
 800cb36:	2002      	movs	r0, #2
 800cb38:	f000 fb3e 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	2003      	movs	r0, #3
 800cb40:	f000 fb3a 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800cb44:	2100      	movs	r1, #0
 800cb46:	2001      	movs	r0, #1
 800cb48:	f000 fb36 	bl	800d1b8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f000 fb32 	bl	800d1b8 <PIDChangeFlag>


	Load_Gain();
 800cb54:	f7fd ff32 	bl	800a9bc <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800cb58:	f247 512f 	movw	r1, #29999	; 0x752f
 800cb5c:	4829      	ldr	r0, [pc, #164]	; (800cc04 <InitFastest+0x108>)
 800cb5e:	f7fd fda7 	bl	800a6b0 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800cb62:	f247 512f 	movw	r1, #29999	; 0x752f
 800cb66:	4828      	ldr	r0, [pc, #160]	; (800cc08 <InitFastest+0x10c>)
 800cb68:	f7fd fda2 	bl	800a6b0 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800cb6c:	4827      	ldr	r0, [pc, #156]	; (800cc0c <InitFastest+0x110>)
 800cb6e:	f005 fb70 	bl	8012252 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800cb72:	4827      	ldr	r0, [pc, #156]	; (800cc10 <InitFastest+0x114>)
 800cb74:	f005 fb6d 	bl	8012252 <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800cb78:	4b26      	ldr	r3, [pc, #152]	; (800cc14 <InitFastest+0x118>)
 800cb7a:	f04f 0200 	mov.w	r2, #0
 800cb7e:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800cb80:	4b25      	ldr	r3, [pc, #148]	; (800cc18 <InitFastest+0x11c>)
 800cb82:	f04f 0200 	mov.w	r2, #0
 800cb86:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800cb88:	4b24      	ldr	r3, [pc, #144]	; (800cc1c <InitFastest+0x120>)
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800cb90:	4b23      	ldr	r3, [pc, #140]	; (800cc20 <InitFastest+0x124>)
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800cb98:	4b22      	ldr	r3, [pc, #136]	; (800cc24 <InitFastest+0x128>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800cb9e:	4b21      	ldr	r3, [pc, #132]	; (800cc24 <InitFastest+0x128>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800cba4:	4b1f      	ldr	r3, [pc, #124]	; (800cc24 <InitFastest+0x128>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800cbaa:	f002 f9d5 	bl	800ef58 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800cbae:	4b1e      	ldr	r3, [pc, #120]	; (800cc28 <InitFastest+0x12c>)
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	4a1e      	ldr	r2, [pc, #120]	; (800cc2c <InitFastest+0x130>)
 800cbb4:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800cbb6:	4b1c      	ldr	r3, [pc, #112]	; (800cc28 <InitFastest+0x12c>)
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	4a1c      	ldr	r2, [pc, #112]	; (800cc2c <InitFastest+0x130>)
 800cbbc:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800cbbe:	4b1b      	ldr	r3, [pc, #108]	; (800cc2c <InitFastest+0x130>)
 800cbc0:	ed93 7a02 	vldr	s14, [r3, #8]
 800cbc4:	4b19      	ldr	r3, [pc, #100]	; (800cc2c <InitFastest+0x130>)
 800cbc6:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbce:	4b18      	ldr	r3, [pc, #96]	; (800cc30 <InitFastest+0x134>)
 800cbd0:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800cbd4:	2004      	movs	r0, #4
 800cbd6:	f000 fb05 	bl	800d1e4 <PIDReset>
	PIDReset(R_VELO_PID);
 800cbda:	2005      	movs	r0, #5
 800cbdc:	f000 fb02 	bl	800d1e4 <PIDReset>
	PIDReset(A_VELO_PID);
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	f000 faff 	bl	800d1e4 <PIDReset>
	PIDReset(L_WALL_PID);
 800cbe6:	2002      	movs	r0, #2
 800cbe8:	f000 fafc 	bl	800d1e4 <PIDReset>
	PIDReset(R_WALL_PID);
 800cbec:	2003      	movs	r0, #3
 800cbee:	f000 faf9 	bl	800d1e4 <PIDReset>
	PIDReset(D_WALL_PID);
 800cbf2:	2001      	movs	r0, #1
 800cbf4:	f000 faf6 	bl	800d1e4 <PIDReset>


}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08019768 	.word	0x08019768
 800cc04:	40000424 	.word	0x40000424
 800cc08:	40000824 	.word	0x40000824
 800cc0c:	20000d14 	.word	0x20000d14
 800cc10:	20000a8c 	.word	0x20000a8c
 800cc14:	200003f0 	.word	0x200003f0
 800cc18:	20000400 	.word	0x20000400
 800cc1c:	20000420 	.word	0x20000420
 800cc20:	2000041c 	.word	0x2000041c
 800cc24:	20000428 	.word	0x20000428
 800cc28:	2000044c 	.word	0x2000044c
 800cc2c:	20000668 	.word	0x20000668
 800cc30:	20000414 	.word	0x20000414

0800cc34 <Debug>:
void Debug()
{
 800cc34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc38:	b0a7      	sub	sp, #156	; 0x9c
 800cc3a:	af06      	add	r7, sp, #24
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800cc3c:	f7ff fec2 	bl	800c9c4 <InitExplore>
	InitPosition();
 800cc40:	f7fc f8da 	bl	8008df8 <InitPosition>
	wall_init();
 800cc44:	f7fe fb76 	bl	800b334 <wall_init>

	TotalPulse[RIGHT] = 0;
 800cc48:	4b39      	ldr	r3, [pc, #228]	; (800cd30 <Debug+0xfc>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cc4e:	4b38      	ldr	r3, [pc, #224]	; (800cd30 <Debug+0xfc>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cc54:	4b36      	ldr	r3, [pc, #216]	; (800cd30 <Debug+0xfc>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	2004      	movs	r0, #4
 800cc5e:	f000 faab 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cc62:	2101      	movs	r1, #1
 800cc64:	2005      	movs	r0, #5
 800cc66:	f000 faa7 	bl	800d1b8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <Debug+0xfc>)
 800cc6c:	6899      	ldr	r1, [r3, #8]
 800cc6e:	4b30      	ldr	r3, [pc, #192]	; (800cd30 <Debug+0xfc>)
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b2f      	ldr	r3, [pc, #188]	; (800cd30 <Debug+0xfc>)
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	482f      	ldr	r0, [pc, #188]	; (800cd34 <Debug+0x100>)
 800cc78:	f008 fa72 	bl	8015160 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	2001      	movs	r0, #1
 800cc80:	f000 fa9a 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cc84:	2100      	movs	r1, #0
 800cc86:	2002      	movs	r0, #2
 800cc88:	f000 fa96 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2003      	movs	r0, #3
 800cc90:	f000 fa92 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800cc94:	2100      	movs	r1, #0
 800cc96:	2000      	movs	r0, #0
 800cc98:	f000 fa8e 	bl	800d1b8 <PIDChangeFlag>
	ExploreVelocity=0;
 800cc9c:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <Debug+0x104>)
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800cca4:	2003      	movs	r0, #3
 800cca6:	f002 fa15 	bl	800f0d4 <ChangeLED>
//		printf("zg:%f, double:%lf\r\n",(float)zg, AngularV);//, double:%lf\r\n");
//	}

	//割り込み処理テスト
#if 1
	ExploreVelocity=240;
 800ccaa:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <Debug+0x104>)
 800ccac:	4a23      	ldr	r2, [pc, #140]	; (800cd3c <Debug+0x108>)
 800ccae:	601a      	str	r2, [r3, #0]
	t = 0;
 800ccb0:	4b23      	ldr	r3, [pc, #140]	; (800cd40 <Debug+0x10c>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]
	timer1=0;
 800ccb6:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <Debug+0x110>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]
	timer8=0;
 800ccbc:	4b22      	ldr	r3, [pc, #136]	; (800cd48 <Debug+0x114>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]

	TargetVelocity[BODY] = ExploreVelocity;
 800ccc2:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <Debug+0x104>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a21      	ldr	r2, [pc, #132]	; (800cd4c <Debug+0x118>)
 800ccc8:	6093      	str	r3, [r2, #8]
	TIM1 ->CNT = 0;
 800ccca:	4b21      	ldr	r3, [pc, #132]	; (800cd50 <Debug+0x11c>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 ->CNT = 0;//これ大事かも
 800ccd0:	4b20      	ldr	r3, [pc, #128]	; (800cd54 <Debug+0x120>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	625a      	str	r2, [r3, #36]	; 0x24
	t = 1;
 800ccd6:	4b1a      	ldr	r3, [pc, #104]	; (800cd40 <Debug+0x10c>)
 800ccd8:	2201      	movs	r2, #1
 800ccda:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(t == 0)
 800ccdc:	4b18      	ldr	r3, [pc, #96]	; (800cd40 <Debug+0x10c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1fb      	bne.n	800ccdc <Debug+0xa8>
		{
			printf("1: %d, 8 :%d, ImuAngV:%f, ImuAngle:%f, ZGyro:%f\r\n",timer1, timer8, AngularV, Angle, ZGyro);
 800cce4:	4b17      	ldr	r3, [pc, #92]	; (800cd44 <Debug+0x110>)
 800cce6:	681e      	ldr	r6, [r3, #0]
 800cce8:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <Debug+0x114>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	4b1a      	ldr	r3, [pc, #104]	; (800cd58 <Debug+0x124>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fb fb60 	bl	80083b8 <__aeabi_f2d>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	460d      	mov	r5, r1
 800ccfc:	4b17      	ldr	r3, [pc, #92]	; (800cd5c <Debug+0x128>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fb fb59 	bl	80083b8 <__aeabi_f2d>
 800cd06:	4680      	mov	r8, r0
 800cd08:	4689      	mov	r9, r1
 800cd0a:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <Debug+0x12c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fb fb52 	bl	80083b8 <__aeabi_f2d>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd1c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cd20:	e9cd 4500 	strd	r4, r5, [sp]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	4631      	mov	r1, r6
 800cd28:	480e      	ldr	r0, [pc, #56]	; (800cd64 <Debug+0x130>)
 800cd2a:	f008 fa19 	bl	8015160 <iprintf>
		if(t == 0)
 800cd2e:	e7d5      	b.n	800ccdc <Debug+0xa8>
 800cd30:	20000428 	.word	0x20000428
 800cd34:	08019784 	.word	0x08019784
 800cd38:	2000065c 	.word	0x2000065c
 800cd3c:	43700000 	.word	0x43700000
 800cd40:	200003dc 	.word	0x200003dc
 800cd44:	200003e4 	.word	0x200003e4
 800cd48:	200003e0 	.word	0x200003e0
 800cd4c:	200003f0 	.word	0x200003f0
 800cd50:	40010000 	.word	0x40010000
 800cd54:	40010400 	.word	0x40010400
 800cd58:	20000254 	.word	0x20000254
 800cd5c:	20000258 	.word	0x20000258
 800cd60:	20000dfc 	.word	0x20000dfc
 800cd64:	080197b8 	.word	0x080197b8

0800cd68 <ParameterSetting>:
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
void ParameterSetting()
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
	Load_Gain();
 800cd6c:	f7fd fe26 	bl	800a9bc <Load_Gain>
	Change_Gain();
 800cd70:	f7fd fee0 	bl	800ab34 <Change_Gain>

}
 800cd74:	bf00      	nop
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <GainTestRWall>:
	{

	}
}
void GainTestRWall()
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
	InitExplore();
 800cd7c:	f7ff fe22 	bl	800c9c4 <InitExplore>
	InitPosition();
 800cd80:	f7fc f83a 	bl	8008df8 <InitPosition>
	wall_init();
 800cd84:	f7fe fad6 	bl	800b334 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cd88:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <GainTestRWall+0x5c>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cd8e:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <GainTestRWall+0x5c>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cd94:	4b0f      	ldr	r3, [pc, #60]	; (800cdd4 <GainTestRWall+0x5c>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	2004      	movs	r0, #4
 800cd9e:	f000 fa0b 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cda2:	2101      	movs	r1, #1
 800cda4:	2005      	movs	r0, #5
 800cda6:	f000 fa07 	bl	800d1b8 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cdaa:	2100      	movs	r1, #0
 800cdac:	2001      	movs	r0, #1
 800cdae:	f000 fa03 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	2002      	movs	r0, #2
 800cdb6:	f000 f9ff 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800cdba:	2101      	movs	r1, #1
 800cdbc:	2003      	movs	r0, #3
 800cdbe:	f000 f9fb 	bl	800d1b8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cdc2:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <GainTestRWall+0x60>)
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800cdca:	2001      	movs	r0, #1
 800cdcc:	f002 f982 	bl	800f0d4 <ChangeLED>
	while(1)
 800cdd0:	e7fe      	b.n	800cdd0 <GainTestRWall+0x58>
 800cdd2:	bf00      	nop
 800cdd4:	20000428 	.word	0x20000428
 800cdd8:	2000065c 	.word	0x2000065c

0800cddc <GainTestDWall>:
	{

	}
}
void GainTestDWall()
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
	InitExplore();
 800cde0:	f7ff fdf0 	bl	800c9c4 <InitExplore>
	InitPosition();
 800cde4:	f7fc f808 	bl	8008df8 <InitPosition>
	wall_init();
 800cde8:	f7fe faa4 	bl	800b334 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cdec:	4b12      	ldr	r3, [pc, #72]	; (800ce38 <GainTestDWall+0x5c>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cdf2:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <GainTestDWall+0x5c>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cdf8:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <GainTestDWall+0x5c>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cdfe:	2101      	movs	r1, #1
 800ce00:	2004      	movs	r0, #4
 800ce02:	f000 f9d9 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ce06:	2101      	movs	r1, #1
 800ce08:	2005      	movs	r0, #5
 800ce0a:	f000 f9d5 	bl	800d1b8 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800ce0e:	2101      	movs	r1, #1
 800ce10:	2001      	movs	r0, #1
 800ce12:	f000 f9d1 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ce16:	2100      	movs	r1, #0
 800ce18:	2002      	movs	r0, #2
 800ce1a:	f000 f9cd 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ce1e:	2100      	movs	r1, #0
 800ce20:	2003      	movs	r0, #3
 800ce22:	f000 f9c9 	bl	800d1b8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800ce26:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <GainTestDWall+0x60>)
 800ce28:	f04f 0200 	mov.w	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800ce2e:	2002      	movs	r0, #2
 800ce30:	f002 f950 	bl	800f0d4 <ChangeLED>
	while(1)
 800ce34:	e7fe      	b.n	800ce34 <GainTestDWall+0x58>
 800ce36:	bf00      	nop
 800ce38:	20000428 	.word	0x20000428
 800ce3c:	2000065c 	.word	0x2000065c

0800ce40 <GainTestAVelo>:

	}
}

void GainTestAVelo()
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
	InitExplore();
 800ce44:	f7ff fdbe 	bl	800c9c4 <InitExplore>
	InitPosition();
 800ce48:	f7fb ffd6 	bl	8008df8 <InitPosition>
	wall_init();
 800ce4c:	f7fe fa72 	bl	800b334 <wall_init>
	TotalPulse[RIGHT] = 0;
 800ce50:	4b14      	ldr	r3, [pc, #80]	; (800cea4 <GainTestAVelo+0x64>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <GainTestAVelo+0x64>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ce5c:	4b11      	ldr	r3, [pc, #68]	; (800cea4 <GainTestAVelo+0x64>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800ce62:	2101      	movs	r1, #1
 800ce64:	2004      	movs	r0, #4
 800ce66:	f000 f9a7 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	2005      	movs	r0, #5
 800ce6e:	f000 f9a3 	bl	800d1b8 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800ce72:	2101      	movs	r1, #1
 800ce74:	2000      	movs	r0, #0
 800ce76:	f000 f99f 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	2001      	movs	r0, #1
 800ce7e:	f000 f99b 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ce82:	2100      	movs	r1, #0
 800ce84:	2002      	movs	r0, #2
 800ce86:	f000 f997 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	2003      	movs	r0, #3
 800ce8e:	f000 f993 	bl	800d1b8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <GainTestAVelo+0x68>)
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800ce9a:	2005      	movs	r0, #5
 800ce9c:	f002 f91a 	bl	800f0d4 <ChangeLED>
	while(1)
 800cea0:	e7fe      	b.n	800cea0 <GainTestAVelo+0x60>
 800cea2:	bf00      	nop
 800cea4:	20000428 	.word	0x20000428
 800cea8:	2000065c 	.word	0x2000065c

0800ceac <WritingFree>:
	{

	}
}
void WritingFree()
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
//	wall_init();
//	wall_ram_print();
	printf("flashコピーる\r\n");
 800ceb0:	480d      	ldr	r0, [pc, #52]	; (800cee8 <WritingFree+0x3c>)
 800ceb2:	f008 f9dd 	bl	8015270 <puts>
	flash_copy_to_ram();
 800ceb6:	f7fe fe11 	bl	800badc <flash_copy_to_ram>
	wall_flash_print();
 800ceba:	f7fe fdc3 	bl	800ba44 <wall_flash_print>
	make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800cebe:	2201      	movs	r2, #1
 800cec0:	2109      	movs	r1, #9
 800cec2:	2006      	movs	r0, #6
 800cec4:	f7fe fc3e 	bl	800b744 <make_map>
	map_print();
 800cec8:	f7fe fd34 	bl	800b934 <map_print>
	printf("flashおわったはず\r\n");
 800cecc:	4807      	ldr	r0, [pc, #28]	; (800ceec <WritingFree+0x40>)
 800cece:	f008 f9cf 	bl	8015270 <puts>

	printf("最短用の歩数マップ\r\n");
 800ced2:	4807      	ldr	r0, [pc, #28]	; (800cef0 <WritingFree+0x44>)
 800ced4:	f008 f9cc 	bl	8015270 <puts>
	make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x03);
 800ced8:	2203      	movs	r2, #3
 800ceda:	2109      	movs	r1, #9
 800cedc:	2006      	movs	r0, #6
 800cede:	f7fe fc31 	bl	800b744 <make_map>
	map_print();
 800cee2:	f7fe fd27 	bl	800b934 <map_print>
	while(1)
 800cee6:	e7fe      	b.n	800cee6 <WritingFree+0x3a>
 800cee8:	080197ec 	.word	0x080197ec
 800ceec:	08019800 	.word	0x08019800
 800cef0:	0801981c 	.word	0x0801981c

0800cef4 <FastestRun>:


}

void FastestRun()
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
	//諸々の初期化
	InitFastest();
 800cef8:	f7ff fe00 	bl	800cafc <InitFastest>
	InitPosition();
 800cefc:	f7fb ff7c 	bl	8008df8 <InitPosition>

	wall_init();
 800cf00:	f7fe fa18 	bl	800b334 <wall_init>

	TotalPulse[RIGHT] = 0;
 800cf04:	4b1e      	ldr	r3, [pc, #120]	; (800cf80 <FastestRun+0x8c>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <FastestRun+0x8c>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cf10:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <FastestRun+0x8c>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cf16:	2101      	movs	r1, #1
 800cf18:	2004      	movs	r0, #4
 800cf1a:	f000 f94d 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cf1e:	2101      	movs	r1, #1
 800cf20:	2005      	movs	r0, #5
 800cf22:	f000 f949 	bl	800d1b8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800cf26:	4b16      	ldr	r3, [pc, #88]	; (800cf80 <FastestRun+0x8c>)
 800cf28:	6899      	ldr	r1, [r3, #8]
 800cf2a:	4b15      	ldr	r3, [pc, #84]	; (800cf80 <FastestRun+0x8c>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b14      	ldr	r3, [pc, #80]	; (800cf80 <FastestRun+0x8c>)
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4814      	ldr	r0, [pc, #80]	; (800cf84 <FastestRun+0x90>)
 800cf34:	f008 f914 	bl	8015160 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cf38:	2100      	movs	r1, #0
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	f000 f93c 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cf40:	2100      	movs	r1, #0
 800cf42:	2002      	movs	r0, #2
 800cf44:	f000 f938 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cf48:	2100      	movs	r1, #0
 800cf4a:	2003      	movs	r0, #3
 800cf4c:	f000 f934 	bl	800d1b8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=180;
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <FastestRun+0x94>)
 800cf52:	4a0e      	ldr	r2, [pc, #56]	; (800cf8c <FastestRun+0x98>)
 800cf54:	601a      	str	r2, [r3, #0]
	ChangeLED(4);
 800cf56:	2004      	movs	r0, #4
 800cf58:	f002 f8bc 	bl	800f0d4 <ChangeLED>

	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800cf5c:	f7fe fdbe 	bl	800badc <flash_copy_to_ram>
	//最短経路導出(今回は省けそう。)

	//走る
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER);
 800cf60:	2109      	movs	r1, #9
 800cf62:	2006      	movs	r0, #6
 800cf64:	f7ff fc90 	bl	800c888 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800cf68:	eddf 0a09 	vldr	s1, [pc, #36]	; 800cf90 <FastestRun+0x9c>
 800cf6c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800cf94 <FastestRun+0xa0>
 800cf70:	f7fd f82a 	bl	8009fc8 <Decel>
	//終了合図
	Signal(7);
 800cf74:	2007      	movs	r0, #7
 800cf76:	f000 faa3 	bl	800d4c0 <Signal>

}
 800cf7a:	bf00      	nop
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000428 	.word	0x20000428
 800cf84:	08019784 	.word	0x08019784
 800cf88:	2000065c 	.word	0x2000065c
 800cf8c:	43340000 	.word	0x43340000
 800cf90:	00000000 	.word	0x00000000
 800cf94:	42340000 	.word	0x42340000

0800cf98 <Explore>:
void Explore()
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(1000);
 800cf9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfa2:	f002 fa87 	bl	800f4b4 <HAL_Delay>
	Photo[FR] = 0;
 800cfa6:	4b60      	ldr	r3, [pc, #384]	; (800d128 <Explore+0x190>)
 800cfa8:	f04f 0200 	mov.w	r2, #0
 800cfac:	60da      	str	r2, [r3, #12]
	  int8_t mode=1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	71fb      	strb	r3, [r7, #7]
	  printf("mode : %d\r\n", mode);
 800cfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	485c      	ldr	r0, [pc, #368]	; (800d12c <Explore+0x194>)
 800cfba:	f008 f8d1 	bl	8015160 <iprintf>
	  ModeSelect( 1, 2, &mode);
 800cfbe:	1dfb      	adds	r3, r7, #7
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	2102      	movs	r1, #2
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f000 facd 	bl	800d564 <ModeSelect>
	  Signal( mode );
 800cfca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fa76 	bl	800d4c0 <Signal>
	  printf("Switch\r\n");
 800cfd4:	4856      	ldr	r0, [pc, #344]	; (800d130 <Explore+0x198>)
 800cfd6:	f008 f94b 	bl	8015270 <puts>
	InitExplore();
 800cfda:	f7ff fcf3 	bl	800c9c4 <InitExplore>

	printf("3\r\n");
 800cfde:	4855      	ldr	r0, [pc, #340]	; (800d134 <Explore+0x19c>)
 800cfe0:	f008 f946 	bl	8015270 <puts>
//	printf("オフセット:%f, double角速度:%f, double角度:%f, float角速度:%f, float角度:%f",zg_offset,ImuAngV, ImuAngle, AngularV, Angle);
//}

	//迷路とステータスの準備
	//方角と座標の初期化。
	InitPosition();
 800cfe4:	f7fb ff08 	bl	8008df8 <InitPosition>
//	uint8_t x, y;
//	Pos.Car = north;
//	x=0,y=0;
	wall_init();
 800cfe8:	f7fe f9a4 	bl	800b334 <wall_init>
	printf("4\r\n");
 800cfec:	4852      	ldr	r0, [pc, #328]	; (800d138 <Explore+0x1a0>)
 800cfee:	f008 f93f 	bl	8015270 <puts>
	//時間用の処理の初期化。
	//int timer = 0;
	//エンコーダ移動量の初期化。
	TotalPulse[RIGHT] = 0;
 800cff2:	4b52      	ldr	r3, [pc, #328]	; (800d13c <Explore+0x1a4>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cff8:	4b50      	ldr	r3, [pc, #320]	; (800d13c <Explore+0x1a4>)
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cffe:	4b4f      	ldr	r3, [pc, #316]	; (800d13c <Explore+0x1a4>)
 800d000:	2200      	movs	r2, #0
 800d002:	609a      	str	r2, [r3, #8]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	//x,y,dir,sbrl,現在→ x2,y2,dir2,sbrl2更新
//void ChangeNowStatus()

	PIDChangeFlag(L_VELO_PID, 1);
 800d004:	2101      	movs	r1, #1
 800d006:	2004      	movs	r0, #4
 800d008:	f000 f8d6 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d00c:	2101      	movs	r1, #1
 800d00e:	2005      	movs	r0, #5
 800d010:	f000 f8d2 	bl	800d1b8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800d014:	4b49      	ldr	r3, [pc, #292]	; (800d13c <Explore+0x1a4>)
 800d016:	6899      	ldr	r1, [r3, #8]
 800d018:	4b48      	ldr	r3, [pc, #288]	; (800d13c <Explore+0x1a4>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	4b47      	ldr	r3, [pc, #284]	; (800d13c <Explore+0x1a4>)
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	4847      	ldr	r0, [pc, #284]	; (800d140 <Explore+0x1a8>)
 800d022:	f008 f89d 	bl	8015160 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d026:	2100      	movs	r1, #0
 800d028:	2001      	movs	r0, #1
 800d02a:	f000 f8c5 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d02e:	2100      	movs	r1, #0
 800d030:	2002      	movs	r0, #2
 800d032:	f000 f8c1 	bl	800d1b8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d036:	2100      	movs	r1, #0
 800d038:	2003      	movs	r0, #3
 800d03a:	f000 f8bd 	bl	800d1b8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=180;
 800d03e:	4b41      	ldr	r3, [pc, #260]	; (800d144 <Explore+0x1ac>)
 800d040:	4a41      	ldr	r2, [pc, #260]	; (800d148 <Explore+0x1b0>)
 800d042:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800d044:	2002      	movs	r0, #2
 800d046:	f002 f845 	bl	800f0d4 <ChangeLED>
	char turn_mode;
	if(mode == 1)
 800d04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d102      	bne.n	800d058 <Explore+0xc0>
	{
		turn_mode = 'T';
 800d052:	2354      	movs	r3, #84	; 0x54
 800d054:	73fb      	strb	r3, [r7, #15]
 800d056:	e005      	b.n	800d064 <Explore+0xcc>
	}
	else if(mode == 2)
 800d058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d101      	bne.n	800d064 <Explore+0xcc>
	{
		turn_mode = 'S';
 800d060:	2353      	movs	r3, #83	; 0x53
 800d062:	73fb      	strb	r3, [r7, #15]
	}
//	while(1)
//	{
//
//	}
	int i=0;
 800d064:	2300      	movs	r3, #0
 800d066:	60bb      	str	r3, [r7, #8]
	SearchOrFast = 0;
 800d068:	4b38      	ldr	r3, [pc, #224]	; (800d14c <Explore+0x1b4>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d06e:	4b38      	ldr	r3, [pc, #224]	; (800d150 <Explore+0x1b8>)
 800d070:	2200      	movs	r2, #0
 800d072:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800d074:	4b36      	ldr	r3, [pc, #216]	; (800d150 <Explore+0x1b8>)
 800d076:	2200      	movs	r2, #0
 800d078:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800d07a:	4b35      	ldr	r3, [pc, #212]	; (800d150 <Explore+0x1b8>)
 800d07c:	781a      	ldrb	r2, [r3, #0]
 800d07e:	4b34      	ldr	r3, [pc, #208]	; (800d150 <Explore+0x1b8>)
 800d080:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800d082:	4b33      	ldr	r3, [pc, #204]	; (800d150 <Explore+0x1b8>)
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	3301      	adds	r3, #1
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	4b31      	ldr	r3, [pc, #196]	; (800d150 <Explore+0x1b8>)
 800d08c:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800d08e:	4b30      	ldr	r3, [pc, #192]	; (800d150 <Explore+0x1b8>)
 800d090:	2200      	movs	r2, #0
 800d092:	725a      	strb	r2, [r3, #9]
	Accel(61.5, ExploreVelocity);
 800d094:	4b2b      	ldr	r3, [pc, #172]	; (800d144 <Explore+0x1ac>)
 800d096:	edd3 7a00 	vldr	s15, [r3]
 800d09a:	eef0 0a67 	vmov.f32	s1, s15
 800d09e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d154 <Explore+0x1bc>
 800d0a2:	f7fc fec9 	bl	8009e38 <Accel>
 	Pos.X = Pos.NextX;
 800d0a6:	4b2a      	ldr	r3, [pc, #168]	; (800d150 <Explore+0x1b8>)
 800d0a8:	799a      	ldrb	r2, [r3, #6]
 800d0aa:	4b29      	ldr	r3, [pc, #164]	; (800d150 <Explore+0x1b8>)
 800d0ac:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800d0ae:	4b28      	ldr	r3, [pc, #160]	; (800d150 <Explore+0x1b8>)
 800d0b0:	79da      	ldrb	r2, [r3, #7]
 800d0b2:	4b27      	ldr	r3, [pc, #156]	; (800d150 <Explore+0x1b8>)
 800d0b4:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;
 800d0b6:	4b26      	ldr	r3, [pc, #152]	; (800d150 <Explore+0x1b8>)
 800d0b8:	7a5a      	ldrb	r2, [r3, #9]
 800d0ba:	4b25      	ldr	r3, [pc, #148]	; (800d150 <Explore+0x1b8>)
 800d0bc:	70da      	strb	r2, [r3, #3]
	//uint8_t xlog[10]={0},ylog[10]={0};

	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d0be:	e012      	b.n	800d0e6 <Explore+0x14e>
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		i++;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	60bb      	str	r3, [r7, #8]
		if(i%2)
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	f003 0301 	and.w	r3, r3, #1
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d003      	beq.n	800d0d8 <Explore+0x140>
			ChangeLED(7);
 800d0d0:	2007      	movs	r0, #7
 800d0d2:	f001 ffff 	bl	800f0d4 <ChangeLED>
 800d0d6:	e002      	b.n	800d0de <Explore+0x146>
		else
			ChangeLED(0);
 800d0d8:	2000      	movs	r0, #0
 800d0da:	f001 fffb 	bl	800f0d4 <ChangeLED>

		//ChangeLED(0);
		//方向決定と、座標方角の更新。
		//方向決定を変える。
		//LeftHandJudge('T');
		KyushinJudge( turn_mode );
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fd7f 	bl	800bbe4 <KyushinJudge>
	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d0e6:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <Explore+0x1b8>)
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d9e8      	bls.n	800d0c0 <Explore+0x128>
 800d0ee:	4b18      	ldr	r3, [pc, #96]	; (800d150 <Explore+0x1b8>)
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b07      	cmp	r3, #7
 800d0f4:	d8e4      	bhi.n	800d0c0 <Explore+0x128>
 800d0f6:	4b16      	ldr	r3, [pc, #88]	; (800d150 <Explore+0x1b8>)
 800d0f8:	785b      	ldrb	r3, [r3, #1]
 800d0fa:	2b08      	cmp	r3, #8
 800d0fc:	d9e0      	bls.n	800d0c0 <Explore+0x128>
 800d0fe:	4b14      	ldr	r3, [pc, #80]	; (800d150 <Explore+0x1b8>)
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b0a      	cmp	r3, #10
 800d104:	d8dc      	bhi.n	800d0c0 <Explore+0x128>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(45, 0);
 800d106:	eddf 0a14 	vldr	s1, [pc, #80]	; 800d158 <Explore+0x1c0>
 800d10a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800d15c <Explore+0x1c4>
 800d10e:	f7fc ff5b 	bl	8009fc8 <Decel>

	//ゴールエリアチェック。
	//諸々停止。

	//flashのクリア。
	Flash_clear_sector1();
 800d112:	f001 fe4d 	bl	800edb0 <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800d116:	f7fe f8ad 	bl	800b274 <flash_store_init>

	//完了の合図
	Signal(7);
 800d11a:	2007      	movs	r0, #7
 800d11c:	f000 f9d0 	bl	800d4c0 <Signal>

	//flashに保存
	while(1)
	{
		wall_ram_print();
 800d120:	f7fe fc36 	bl	800b990 <wall_ram_print>
 800d124:	e7fc      	b.n	800d120 <Explore+0x188>
 800d126:	bf00      	nop
 800d128:	2000044c 	.word	0x2000044c
 800d12c:	0801983c 	.word	0x0801983c
 800d130:	08019848 	.word	0x08019848
 800d134:	08019850 	.word	0x08019850
 800d138:	08019854 	.word	0x08019854
 800d13c:	20000428 	.word	0x20000428
 800d140:	08019784 	.word	0x08019784
 800d144:	2000065c 	.word	0x2000065c
 800d148:	43340000 	.word	0x43340000
 800d14c:	200003e8 	.word	0x200003e8
 800d150:	20000000 	.word	0x20000000
 800d154:	42760000 	.word	0x42760000
 800d158:	00000000 	.word	0x00000000
 800d15c:	42340000 	.word	0x42340000

0800d160 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	ed87 0a02 	vstr	s0, [r7, #8]
 800d16c:	edc7 0a01 	vstr	s1, [r7, #4]
 800d170:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800d174:	4a0f      	ldr	r2, [pc, #60]	; (800d1b4 <PIDSetGain+0x54>)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	212c      	movs	r1, #44	; 0x2c
 800d17a:	fb01 f303 	mul.w	r3, r1, r3
 800d17e:	4413      	add	r3, r2
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800d184:	4a0b      	ldr	r2, [pc, #44]	; (800d1b4 <PIDSetGain+0x54>)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	212c      	movs	r1, #44	; 0x2c
 800d18a:	fb01 f303 	mul.w	r3, r1, r3
 800d18e:	4413      	add	r3, r2
 800d190:	3304      	adds	r3, #4
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800d196:	4a07      	ldr	r2, [pc, #28]	; (800d1b4 <PIDSetGain+0x54>)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	212c      	movs	r1, #44	; 0x2c
 800d19c:	fb01 f303 	mul.w	r3, r1, r3
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3308      	adds	r3, #8
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	601a      	str	r2, [r3, #0]

}
 800d1a8:	bf00      	nop
 800d1aa:	3714      	adds	r7, #20
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	2000025c 	.word	0x2000025c

0800d1b8 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800d1c2:	4a07      	ldr	r2, [pc, #28]	; (800d1e0 <PIDChangeFlag+0x28>)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	212c      	movs	r1, #44	; 0x2c
 800d1c8:	fb01 f303 	mul.w	r3, r1, r3
 800d1cc:	4413      	add	r3, r2
 800d1ce:	3328      	adds	r3, #40	; 0x28
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	601a      	str	r2, [r3, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	2000025c 	.word	0x2000025c

0800d1e4 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800d1ec:	4a1b      	ldr	r2, [pc, #108]	; (800d25c <PIDReset+0x78>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	212c      	movs	r1, #44	; 0x2c
 800d1f2:	fb01 f303 	mul.w	r3, r1, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	330c      	adds	r3, #12
 800d1fa:	f04f 0200 	mov.w	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800d200:	4a16      	ldr	r2, [pc, #88]	; (800d25c <PIDReset+0x78>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	212c      	movs	r1, #44	; 0x2c
 800d206:	fb01 f303 	mul.w	r3, r1, r3
 800d20a:	4413      	add	r3, r2
 800d20c:	3310      	adds	r3, #16
 800d20e:	f04f 0200 	mov.w	r2, #0
 800d212:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800d214:	4a11      	ldr	r2, [pc, #68]	; (800d25c <PIDReset+0x78>)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	212c      	movs	r1, #44	; 0x2c
 800d21a:	fb01 f303 	mul.w	r3, r1, r3
 800d21e:	4413      	add	r3, r2
 800d220:	3314      	adds	r3, #20
 800d222:	f04f 0200 	mov.w	r2, #0
 800d226:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800d228:	4a0c      	ldr	r2, [pc, #48]	; (800d25c <PIDReset+0x78>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	212c      	movs	r1, #44	; 0x2c
 800d22e:	fb01 f303 	mul.w	r3, r1, r3
 800d232:	4413      	add	r3, r2
 800d234:	3318      	adds	r3, #24
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800d23c:	4a07      	ldr	r2, [pc, #28]	; (800d25c <PIDReset+0x78>)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	212c      	movs	r1, #44	; 0x2c
 800d242:	fb01 f303 	mul.w	r3, r1, r3
 800d246:	4413      	add	r3, r2
 800d248:	3324      	adds	r3, #36	; 0x24
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]
}
 800d24e:	bf00      	nop
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	2000025c 	.word	0x2000025c

0800d260 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800d260:	b590      	push	{r4, r7, lr}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	ed87 0a02 	vstr	s0, [r7, #8]
 800d26c:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800d270:	4a90      	ldr	r2, [pc, #576]	; (800d4b4 <PIDControl+0x254>)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	212c      	movs	r1, #44	; 0x2c
 800d276:	fb01 f303 	mul.w	r3, r1, r3
 800d27a:	4413      	add	r3, r2
 800d27c:	3328      	adds	r3, #40	; 0x28
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d132      	bne.n	800d2ea <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800d284:	4a8b      	ldr	r2, [pc, #556]	; (800d4b4 <PIDControl+0x254>)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	212c      	movs	r1, #44	; 0x2c
 800d28a:	fb01 f303 	mul.w	r3, r1, r3
 800d28e:	4413      	add	r3, r2
 800d290:	330c      	adds	r3, #12
 800d292:	f04f 0200 	mov.w	r2, #0
 800d296:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800d298:	4a86      	ldr	r2, [pc, #536]	; (800d4b4 <PIDControl+0x254>)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	212c      	movs	r1, #44	; 0x2c
 800d29e:	fb01 f303 	mul.w	r3, r1, r3
 800d2a2:	4413      	add	r3, r2
 800d2a4:	3310      	adds	r3, #16
 800d2a6:	f04f 0200 	mov.w	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800d2ac:	4a81      	ldr	r2, [pc, #516]	; (800d4b4 <PIDControl+0x254>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	212c      	movs	r1, #44	; 0x2c
 800d2b2:	fb01 f303 	mul.w	r3, r1, r3
 800d2b6:	4413      	add	r3, r2
 800d2b8:	3314      	adds	r3, #20
 800d2ba:	f04f 0200 	mov.w	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800d2c0:	4a7c      	ldr	r2, [pc, #496]	; (800d4b4 <PIDControl+0x254>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	212c      	movs	r1, #44	; 0x2c
 800d2c6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ca:	4413      	add	r3, r2
 800d2cc:	3318      	adds	r3, #24
 800d2ce:	f04f 0200 	mov.w	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800d2d4:	4a77      	ldr	r2, [pc, #476]	; (800d4b4 <PIDControl+0x254>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	212c      	movs	r1, #44	; 0x2c
 800d2da:	fb01 f303 	mul.w	r3, r1, r3
 800d2de:	4413      	add	r3, r2
 800d2e0:	3324      	adds	r3, #36	; 0x24
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
		return 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e0df      	b.n	800d4aa <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800d2ea:	4a72      	ldr	r2, [pc, #456]	; (800d4b4 <PIDControl+0x254>)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	212c      	movs	r1, #44	; 0x2c
 800d2f0:	fb01 f303 	mul.w	r3, r1, r3
 800d2f4:	4413      	add	r3, r2
 800d2f6:	3320      	adds	r3, #32
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800d2fc:	4a6d      	ldr	r2, [pc, #436]	; (800d4b4 <PIDControl+0x254>)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	212c      	movs	r1, #44	; 0x2c
 800d302:	fb01 f303 	mul.w	r3, r1, r3
 800d306:	4413      	add	r3, r2
 800d308:	331c      	adds	r3, #28
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800d30e:	4a69      	ldr	r2, [pc, #420]	; (800d4b4 <PIDControl+0x254>)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	212c      	movs	r1, #44	; 0x2c
 800d314:	fb01 f303 	mul.w	r3, r1, r3
 800d318:	4413      	add	r3, r2
 800d31a:	3320      	adds	r3, #32
 800d31c:	ed93 7a00 	vldr	s14, [r3]
 800d320:	4a64      	ldr	r2, [pc, #400]	; (800d4b4 <PIDControl+0x254>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	212c      	movs	r1, #44	; 0x2c
 800d326:	fb01 f303 	mul.w	r3, r1, r3
 800d32a:	4413      	add	r3, r2
 800d32c:	331c      	adds	r3, #28
 800d32e:	edd3 7a00 	vldr	s15, [r3]
 800d332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d336:	4a5f      	ldr	r2, [pc, #380]	; (800d4b4 <PIDControl+0x254>)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	212c      	movs	r1, #44	; 0x2c
 800d33c:	fb01 f303 	mul.w	r3, r1, r3
 800d340:	4413      	add	r3, r2
 800d342:	330c      	adds	r3, #12
 800d344:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800d348:	4a5a      	ldr	r2, [pc, #360]	; (800d4b4 <PIDControl+0x254>)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	212c      	movs	r1, #44	; 0x2c
 800d34e:	fb01 f303 	mul.w	r3, r1, r3
 800d352:	4413      	add	r3, r2
 800d354:	3310      	adds	r3, #16
 800d356:	ed93 7a00 	vldr	s14, [r3]
 800d35a:	4a56      	ldr	r2, [pc, #344]	; (800d4b4 <PIDControl+0x254>)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	212c      	movs	r1, #44	; 0x2c
 800d360:	fb01 f303 	mul.w	r3, r1, r3
 800d364:	4413      	add	r3, r2
 800d366:	330c      	adds	r3, #12
 800d368:	edd3 7a00 	vldr	s15, [r3]
 800d36c:	eddf 6a52 	vldr	s13, [pc, #328]	; 800d4b8 <PIDControl+0x258>
 800d370:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d374:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d378:	4a4e      	ldr	r2, [pc, #312]	; (800d4b4 <PIDControl+0x254>)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	212c      	movs	r1, #44	; 0x2c
 800d37e:	fb01 f303 	mul.w	r3, r1, r3
 800d382:	4413      	add	r3, r2
 800d384:	3310      	adds	r3, #16
 800d386:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800d38a:	4a4a      	ldr	r2, [pc, #296]	; (800d4b4 <PIDControl+0x254>)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	212c      	movs	r1, #44	; 0x2c
 800d390:	fb01 f303 	mul.w	r3, r1, r3
 800d394:	4413      	add	r3, r2
 800d396:	330c      	adds	r3, #12
 800d398:	ed93 7a00 	vldr	s14, [r3]
 800d39c:	4a45      	ldr	r2, [pc, #276]	; (800d4b4 <PIDControl+0x254>)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	212c      	movs	r1, #44	; 0x2c
 800d3a2:	fb01 f303 	mul.w	r3, r1, r3
 800d3a6:	4413      	add	r3, r2
 800d3a8:	3318      	adds	r3, #24
 800d3aa:	edd3 7a00 	vldr	s15, [r3]
 800d3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d4bc <PIDControl+0x25c>
 800d3b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3ba:	4a3e      	ldr	r2, [pc, #248]	; (800d4b4 <PIDControl+0x254>)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	212c      	movs	r1, #44	; 0x2c
 800d3c0:	fb01 f303 	mul.w	r3, r1, r3
 800d3c4:	4413      	add	r3, r2
 800d3c6:	3314      	adds	r3, #20
 800d3c8:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800d3cc:	4a39      	ldr	r2, [pc, #228]	; (800d4b4 <PIDControl+0x254>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	212c      	movs	r1, #44	; 0x2c
 800d3d2:	fb01 f303 	mul.w	r3, r1, r3
 800d3d6:	4413      	add	r3, r2
 800d3d8:	330c      	adds	r3, #12
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	4935      	ldr	r1, [pc, #212]	; (800d4b4 <PIDControl+0x254>)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	202c      	movs	r0, #44	; 0x2c
 800d3e2:	fb00 f303 	mul.w	r3, r0, r3
 800d3e6:	440b      	add	r3, r1
 800d3e8:	3318      	adds	r3, #24
 800d3ea:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800d3ec:	4a31      	ldr	r2, [pc, #196]	; (800d4b4 <PIDControl+0x254>)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	212c      	movs	r1, #44	; 0x2c
 800d3f2:	fb01 f303 	mul.w	r3, r1, r3
 800d3f6:	4413      	add	r3, r2
 800d3f8:	ed93 7a00 	vldr	s14, [r3]
 800d3fc:	4a2d      	ldr	r2, [pc, #180]	; (800d4b4 <PIDControl+0x254>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	212c      	movs	r1, #44	; 0x2c
 800d402:	fb01 f303 	mul.w	r3, r1, r3
 800d406:	4413      	add	r3, r2
 800d408:	330c      	adds	r3, #12
 800d40a:	edd3 7a00 	vldr	s15, [r3]
 800d40e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d412:	4a28      	ldr	r2, [pc, #160]	; (800d4b4 <PIDControl+0x254>)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	212c      	movs	r1, #44	; 0x2c
 800d418:	fb01 f303 	mul.w	r3, r1, r3
 800d41c:	4413      	add	r3, r2
 800d41e:	3304      	adds	r3, #4
 800d420:	edd3 6a00 	vldr	s13, [r3]
 800d424:	4a23      	ldr	r2, [pc, #140]	; (800d4b4 <PIDControl+0x254>)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	212c      	movs	r1, #44	; 0x2c
 800d42a:	fb01 f303 	mul.w	r3, r1, r3
 800d42e:	4413      	add	r3, r2
 800d430:	3310      	adds	r3, #16
 800d432:	edd3 7a00 	vldr	s15, [r3]
 800d436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d43a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d43e:	4a1d      	ldr	r2, [pc, #116]	; (800d4b4 <PIDControl+0x254>)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	212c      	movs	r1, #44	; 0x2c
 800d444:	fb01 f303 	mul.w	r3, r1, r3
 800d448:	4413      	add	r3, r2
 800d44a:	3308      	adds	r3, #8
 800d44c:	edd3 6a00 	vldr	s13, [r3]
 800d450:	4a18      	ldr	r2, [pc, #96]	; (800d4b4 <PIDControl+0x254>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	212c      	movs	r1, #44	; 0x2c
 800d456:	fb01 f303 	mul.w	r3, r1, r3
 800d45a:	4413      	add	r3, r2
 800d45c:	3314      	adds	r3, #20
 800d45e:	edd3 7a00 	vldr	s15, [r3]
 800d462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d46a:	ee17 0a90 	vmov	r0, s15
 800d46e:	f7fa ffa3 	bl	80083b8 <__aeabi_f2d>
 800d472:	4603      	mov	r3, r0
 800d474:	460c      	mov	r4, r1
 800d476:	ec44 3b10 	vmov	d0, r3, r4
 800d47a:	f006 ffab 	bl	80143d4 <round>
 800d47e:	ec54 3b10 	vmov	r3, r4, d0
 800d482:	4618      	mov	r0, r3
 800d484:	4621      	mov	r1, r4
 800d486:	f7fb fa9f 	bl	80089c8 <__aeabi_d2iz>
 800d48a:	4a0a      	ldr	r2, [pc, #40]	; (800d4b4 <PIDControl+0x254>)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	212c      	movs	r1, #44	; 0x2c
 800d490:	fb01 f303 	mul.w	r3, r1, r3
 800d494:	4413      	add	r3, r2
 800d496:	3324      	adds	r3, #36	; 0x24
 800d498:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 800d49a:	4a06      	ldr	r2, [pc, #24]	; (800d4b4 <PIDControl+0x254>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	212c      	movs	r1, #44	; 0x2c
 800d4a0:	fb01 f303 	mul.w	r3, r1, r3
 800d4a4:	4413      	add	r3, r2
 800d4a6:	3324      	adds	r3, #36	; 0x24
 800d4a8:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd90      	pop	{r4, r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	2000025c 	.word	0x2000025c
 800d4b8:	3a83126f 	.word	0x3a83126f
 800d4bc:	4479ffff 	.word	0x4479ffff

0800d4c0 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int mode)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	e00e      	b.n	800d4ec <Signal+0x2c>
	{
		ChangeLED(mode);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 fe00 	bl	800f0d4 <ChangeLED>
		HAL_Delay(100);
 800d4d4:	2064      	movs	r0, #100	; 0x64
 800d4d6:	f001 ffed 	bl	800f4b4 <HAL_Delay>
		ChangeLED(0);
 800d4da:	2000      	movs	r0, #0
 800d4dc:	f001 fdfa 	bl	800f0d4 <ChangeLED>
		HAL_Delay(100);
 800d4e0:	2064      	movs	r0, #100	; 0x64
 800d4e2:	f001 ffe7 	bl	800f4b4 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	dded      	ble.n	800d4ce <Signal+0xe>
	}
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800d504:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800d550 <BatteryCheck+0x54>
 800d508:	eddf 0a12 	vldr	s1, [pc, #72]	; 800d554 <BatteryCheck+0x58>
 800d50c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7fd f945 	bl	800a7a0 <ADCToBatteryVoltage>
 800d516:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800d51a:	2103      	movs	r1, #3
 800d51c:	2002      	movs	r0, #2
 800d51e:	f7fd f969 	bl	800a7f4 <IntegerPower>
 800d522:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800d524:	6938      	ldr	r0, [r7, #16]
 800d526:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800d558 <BatteryCheck+0x5c>
 800d52a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800d55c <BatteryCheck+0x60>
 800d52e:	ed97 0a05 	vldr	s0, [r7, #20]
 800d532:	f7fd f97c 	bl	800a82e <GetBatteryLevel>
 800d536:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800d538:	68f9      	ldr	r1, [r7, #12]
 800d53a:	4809      	ldr	r0, [pc, #36]	; (800d560 <BatteryCheck+0x64>)
 800d53c:	f007 fe10 	bl	8015160 <iprintf>
	Signal( battery_level );
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff ffbd 	bl	800d4c0 <Signal>
}
 800d546:	bf00      	nop
 800d548:	3718      	adds	r7, #24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	45800000 	.word	0x45800000
 800d554:	40533333 	.word	0x40533333
 800d558:	41066666 	.word	0x41066666
 800d55c:	40e66666 	.word	0x40e66666
 800d560:	08019858 	.word	0x08019858

0800d564 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af02      	add	r7, sp, #8
 800d56a:	4603      	mov	r3, r0
 800d56c:	603a      	str	r2, [r7, #0]
 800d56e:	71fb      	strb	r3, [r7, #7]
 800d570:	460b      	mov	r3, r1
 800d572:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800d574:	f001 fd92 	bl	800f09c <EmitterON>
	ADCStart();
 800d578:	f001 faf4 	bl	800eb64 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800d57c:	484b      	ldr	r0, [pc, #300]	; (800d6ac <ModeSelect+0x148>)
 800d57e:	f004 fe68 	bl	8012252 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800d582:	f001 fd6b 	bl	800f05c <EncoderStart>
	HAL_Delay(1000);
 800d586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d58a:	f001 ff93 	bl	800f4b4 <HAL_Delay>
	//while中で選択
	*pMode=min;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	79fa      	ldrb	r2, [r7, #7]
 800d592:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800d594:	f247 512f 	movw	r1, #29999	; 0x752f
 800d598:	4845      	ldr	r0, [pc, #276]	; (800d6b0 <ModeSelect+0x14c>)
 800d59a:	f7fd f889 	bl	800a6b0 <InitPulse>

	int ENC3_LEFT;
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800d59e:	e06d      	b.n	800d67c <ModeSelect+0x118>
	{
		printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
 800d5a0:	4b44      	ldr	r3, [pc, #272]	; (800d6b4 <ModeSelect+0x150>)
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fa ff07 	bl	80083b8 <__aeabi_f2d>
 800d5aa:	460a      	mov	r2, r1
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	460a      	mov	r2, r1
 800d5b6:	4840      	ldr	r0, [pc, #256]	; (800d6b8 <ModeSelect+0x154>)
 800d5b8:	f007 fdd2 	bl	8015160 <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800d5bc:	4b3f      	ldr	r3, [pc, #252]	; (800d6bc <ModeSelect+0x158>)
 800d5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c0:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	ee07 3a90 	vmov	s15, r3
 800d5c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d6c0 <ModeSelect+0x15c>
 800d5d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d8:	db21      	blt.n	800d61e <ModeSelect+0xba>
		  {
		  	  *pMode += 1;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	f993 3000 	ldrsb.w	r3, [r3]
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	b25a      	sxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	f993 3000 	ldrsb.w	r3, [r3]
 800d5f2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	da02      	bge.n	800d600 <ModeSelect+0x9c>
		  	  {
		  		  *pMode = min;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	79fa      	ldrb	r2, [r7, #7]
 800d5fe:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	f993 3000 	ldrsb.w	r3, [r3]
 800d606:	4618      	mov	r0, r3
 800d608:	f001 fd64 	bl	800f0d4 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800d60c:	f247 512f 	movw	r1, #29999	; 0x752f
 800d610:	4827      	ldr	r0, [pc, #156]	; (800d6b0 <ModeSelect+0x14c>)
 800d612:	f7fd f84d 	bl	800a6b0 <InitPulse>
		  	  HAL_Delay(500);
 800d616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d61a:	f001 ff4b 	bl	800f4b4 <HAL_Delay>

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	ee07 3a90 	vmov	s15, r3
 800d624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d628:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d6c4 <ModeSelect+0x160>
 800d62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d634:	d900      	bls.n	800d638 <ModeSelect+0xd4>
 800d636:	e021      	b.n	800d67c <ModeSelect+0x118>
		  {
		  	  *pMode -= 1;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f993 3000 	ldrsb.w	r3, [r3]
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	3b01      	subs	r3, #1
 800d642:	b2db      	uxtb	r3, r3
 800d644:	b25a      	sxtb	r2, r3
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	f993 3000 	ldrsb.w	r3, [r3]
 800d650:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d654:	429a      	cmp	r2, r3
 800d656:	dd02      	ble.n	800d65e <ModeSelect+0xfa>
		  	  {
		  	  		  *pMode = max;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	79ba      	ldrb	r2, [r7, #6]
 800d65c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	f993 3000 	ldrsb.w	r3, [r3]
 800d664:	4618      	mov	r0, r3
 800d666:	f001 fd35 	bl	800f0d4 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE);
 800d66a:	f247 512f 	movw	r1, #29999	; 0x752f
 800d66e:	4810      	ldr	r0, [pc, #64]	; (800d6b0 <ModeSelect+0x14c>)
 800d670:	f7fd f81e 	bl	800a6b0 <InitPulse>
		  	  HAL_Delay(500);
 800d674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d678:	f001 ff1c 	bl	800f4b4 <HAL_Delay>
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800d67c:	4b0d      	ldr	r3, [pc, #52]	; (800d6b4 <ModeSelect+0x150>)
 800d67e:	edd3 7a03 	vldr	s15, [r3, #12]
 800d682:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d6c8 <ModeSelect+0x164>
 800d686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68e:	d487      	bmi.n	800d5a0 <ModeSelect+0x3c>
		  }
	}

	EmitterOFF();
 800d690:	f001 fd12 	bl	800f0b8 <EmitterOFF>
	ADCStop();
 800d694:	f001 fa86 	bl	800eba4 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800d698:	4804      	ldr	r0, [pc, #16]	; (800d6ac <ModeSelect+0x148>)
 800d69a:	f004 fdfe 	bl	801229a <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800d69e:	f001 fced 	bl	800f07c <EncoderStop>

	//モード選択後どうするか
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20000a8c 	.word	0x20000a8c
 800d6b0:	40000424 	.word	0x40000424
 800d6b4:	2000044c 	.word	0x2000044c
 800d6b8:	08019860 	.word	0x08019860
 800d6bc:	40000400 	.word	0x40000400
 800d6c0:	47352f00 	.word	0x47352f00
 800d6c4:	4654bc00 	.word	0x4654bc00
 800d6c8:	437a0000 	.word	0x437a0000

0800d6cc <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d6d4:	1d39      	adds	r1, r7, #4
 800d6d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6da:	2201      	movs	r2, #1
 800d6dc:	4803      	ldr	r0, [pc, #12]	; (800d6ec <__io_putchar+0x20>)
 800d6de:	f006 f973 	bl	80139c8 <HAL_UART_Transmit>
	return ch;
 800d6e2:	687b      	ldr	r3, [r7, #4]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20000c74 	.word	0x20000c74

0800d6f0 <__io_getchar>:
int __io_getchar(void) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800d6f6:	2302      	movs	r3, #2
 800d6f8:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800d6fa:	e007      	b.n	800d70c <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d6fc:	1db9      	adds	r1, r7, #6
 800d6fe:	230a      	movs	r3, #10
 800d700:	2201      	movs	r2, #1
 800d702:	4806      	ldr	r0, [pc, #24]	; (800d71c <__io_getchar+0x2c>)
 800d704:	f006 f9f9 	bl	8013afa <HAL_UART_Receive>
 800d708:	4603      	mov	r3, r0
 800d70a:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1f4      	bne.n	800d6fc <__io_getchar+0xc>
//	break;
//}

}

return(Data);
 800d712:	79bb      	ldrb	r3, [r7, #6]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	20000c74 	.word	0x20000c74

0800d720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d726:	f001 fe53 	bl	800f3d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d72a:	f000 f8b3 	bl	800d894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d72e:	f000 fcfd 	bl	800e12c <MX_GPIO_Init>
  MX_DMA_Init();
 800d732:	f000 fcd3 	bl	800e0dc <MX_DMA_Init>
  MX_ADC1_Init();
 800d736:	f000 f917 	bl	800d968 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d73a:	f000 f983 	bl	800da44 <MX_ADC2_Init>
  MX_TIM3_Init();
 800d73e:	f000 fadd 	bl	800dcfc <MX_TIM3_Init>
  MX_TIM2_Init();
 800d742:	f000 fa65 	bl	800dc10 <MX_TIM2_Init>
  MX_SPI3_Init();
 800d746:	f000 f9dd 	bl	800db04 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d74a:	f000 fc9d 	bl	800e088 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800d74e:	f000 fb7d 	bl	800de4c <MX_TIM5_Init>
  MX_TIM4_Init();
 800d752:	f000 fb27 	bl	800dda4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800d756:	f000 fbef 	bl	800df38 <MX_TIM8_Init>
  MX_TIM1_Init();
 800d75a:	f000 fa09 	bl	800db70 <MX_TIM1_Init>
//  {
//
//  }


  ADCStart();
 800d75e:	f001 fa01 	bl	800eb64 <ADCStart>
  HAL_Delay(500);
 800d762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d766:	f001 fea5 	bl	800f4b4 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800d76a:	4b41      	ldr	r3, [pc, #260]	; (800d870 <main+0x150>)
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff fec4 	bl	800d4fc <BatteryCheck>

  int8_t mode=0;
 800d774:	2300      	movs	r3, #0
 800d776:	71fb      	strb	r3, [r7, #7]
  printf("mode : %d\r\n", mode);
 800d778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d77c:	4619      	mov	r1, r3
 800d77e:	483d      	ldr	r0, [pc, #244]	; (800d874 <main+0x154>)
 800d780:	f007 fcee 	bl	8015160 <iprintf>
  ModeSelect( 0, 7, &mode);
 800d784:	1dfb      	adds	r3, r7, #7
 800d786:	461a      	mov	r2, r3
 800d788:	2107      	movs	r1, #7
 800d78a:	2000      	movs	r0, #0
 800d78c:	f7ff feea 	bl	800d564 <ModeSelect>
  Signal( mode );
 800d790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff fe93 	bl	800d4c0 <Signal>
  printf("Switch\r\n");
 800d79a:	4837      	ldr	r0, [pc, #220]	; (800d878 <main+0x158>)
 800d79c:	f007 fd68 	bl	8015270 <puts>

  //pidパラメータの初期化をもっと書き換えやすいところで
// Flashから読みしたータを避するRAM
  PIDSetGain(L_VELO_PID, 14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら
 800d7a0:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800d87c <main+0x15c>
 800d7a4:	eddf 0a36 	vldr	s1, [pc, #216]	; 800d880 <main+0x160>
 800d7a8:	eeb2 0a0c 	vmov.f32	s0, #44	; 0x41600000  14.0
 800d7ac:	2004      	movs	r0, #4
 800d7ae:	f7ff fcd7 	bl	800d160 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800d7b2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800d87c <main+0x15c>
 800d7b6:	eddf 0a32 	vldr	s1, [pc, #200]	; 800d880 <main+0x160>
 800d7ba:	eeb2 0a0c 	vmov.f32	s0, #44	; 0x41600000  14.0
 800d7be:	2005      	movs	r0, #5
 800d7c0:	f7ff fcce 	bl	800d160 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  //未調整
  PIDSetGain(A_VELO_PID, 30000,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800d7c4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d884 <main+0x164>
 800d7c8:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800d884 <main+0x164>
 800d7cc:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800d888 <main+0x168>
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f7ff fcc5 	bl	800d160 <PIDSetGain>
  //Iは積�?=偏差を消す。ゲインが大きいと偏差が縮まるが、収束が
  //Dは微
  PIDSetGain(D_WALL_PID, 5.4,0,0);//3.6, 20, 0);//5.2//速度制御�??// 3.200000, 50.000000, 0.00025i55000
 800d7d6:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800d884 <main+0x164>
 800d7da:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800d884 <main+0x164>
 800d7de:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800d88c <main+0x16c>
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	f7ff fcbc 	bl	800d160 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 3.8,0,0);//1.8, 10, 0);
 800d7e8:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800d884 <main+0x164>
 800d7ec:	eddf 0a25 	vldr	s1, [pc, #148]	; 800d884 <main+0x164>
 800d7f0:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800d890 <main+0x170>
 800d7f4:	2002      	movs	r0, #2
 800d7f6:	f7ff fcb3 	bl	800d160 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 3.8,0,0);//1.8, 10, 0);
 800d7fa:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800d884 <main+0x164>
 800d7fe:	eddf 0a21 	vldr	s1, [pc, #132]	; 800d884 <main+0x164>
 800d802:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800d890 <main+0x170>
 800d806:	2003      	movs	r0, #3
 800d808:	f7ff fcaa 	bl	800d160 <PIDSetGain>
  //PidFlag = A_VELO_PID;
  while (1)
  {

	  switch( mode )
 800d80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d810:	2b07      	cmp	r3, #7
 800d812:	d82b      	bhi.n	800d86c <main+0x14c>
 800d814:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <main+0xfc>)
 800d816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81a:	bf00      	nop
 800d81c:	0800d83d 	.word	0x0800d83d
 800d820:	0800d843 	.word	0x0800d843
 800d824:	0800d849 	.word	0x0800d849
 800d828:	0800d84f 	.word	0x0800d84f
 800d82c:	0800d855 	.word	0x0800d855
 800d830:	0800d85b 	.word	0x0800d85b
 800d834:	0800d861 	.word	0x0800d861
 800d838:	0800d867 	.word	0x0800d867
	  {
	  case 0:

		  ParameterSetting();
 800d83c:	f7ff fa94 	bl	800cd68 <ParameterSetting>
		//wall_flash_print();
		  break;
 800d840:	e015      	b.n	800d86e <main+0x14e>
	  case 1:
		  GainTestRWall();
 800d842:	f7ff fa99 	bl	800cd78 <GainTestRWall>
		  break;
 800d846:	e012      	b.n	800d86e <main+0x14e>
	  case 2:
		  GainTestDWall();
 800d848:	f7ff fac8 	bl	800cddc <GainTestDWall>
		  break;
 800d84c:	e00f      	b.n	800d86e <main+0x14e>
	  case 3:
		  Debug();
 800d84e:	f7ff f9f1 	bl	800cc34 <Debug>
		  break;
 800d852:	e00c      	b.n	800d86e <main+0x14e>
	  case 4:
		  //GainTestLWall();
		  FastestRun();
 800d854:	f7ff fb4e 	bl	800cef4 <FastestRun>
		  break;
 800d858:	e009      	b.n	800d86e <main+0x14e>
	  case 5:
		  GainTestAVelo();
 800d85a:	f7ff faf1 	bl	800ce40 <GainTestAVelo>
		  break;
 800d85e:	e006      	b.n	800d86e <main+0x14e>
	  case 6:
		  Explore();
 800d860:	f7ff fb9a 	bl	800cf98 <Explore>
		  break;
 800d864:	e003      	b.n	800d86e <main+0x14e>
	  case 7:
		  WritingFree();
 800d866:	f7ff fb21 	bl	800ceac <WritingFree>
		  break;
 800d86a:	e000      	b.n	800d86e <main+0x14e>
	  default :
		  break;
 800d86c:	bf00      	nop
	  switch( mode )
 800d86e:	e7cd      	b.n	800d80c <main+0xec>
 800d870:	200003c0 	.word	0x200003c0
 800d874:	0801987c 	.word	0x0801987c
 800d878:	08019888 	.word	0x08019888
 800d87c:	3b03126f 	.word	0x3b03126f
 800d880:	45bb8000 	.word	0x45bb8000
 800d884:	00000000 	.word	0x00000000
 800d888:	46ea6000 	.word	0x46ea6000
 800d88c:	40accccd 	.word	0x40accccd
 800d890:	40733333 	.word	0x40733333

0800d894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b094      	sub	sp, #80	; 0x50
 800d898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d89a:	f107 0320 	add.w	r3, r7, #32
 800d89e:	2230      	movs	r2, #48	; 0x30
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f006 fe15 	bl	80144d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	605a      	str	r2, [r3, #4]
 800d8b2:	609a      	str	r2, [r3, #8]
 800d8b4:	60da      	str	r2, [r3, #12]
 800d8b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60bb      	str	r3, [r7, #8]
 800d8bc:	4b28      	ldr	r3, [pc, #160]	; (800d960 <SystemClock_Config+0xcc>)
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	4a27      	ldr	r2, [pc, #156]	; (800d960 <SystemClock_Config+0xcc>)
 800d8c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8c6:	6413      	str	r3, [r2, #64]	; 0x40
 800d8c8:	4b25      	ldr	r3, [pc, #148]	; (800d960 <SystemClock_Config+0xcc>)
 800d8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8d0:	60bb      	str	r3, [r7, #8]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	607b      	str	r3, [r7, #4]
 800d8d8:	4b22      	ldr	r3, [pc, #136]	; (800d964 <SystemClock_Config+0xd0>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a21      	ldr	r2, [pc, #132]	; (800d964 <SystemClock_Config+0xd0>)
 800d8de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	4b1f      	ldr	r3, [pc, #124]	; (800d964 <SystemClock_Config+0xd0>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8ec:	607b      	str	r3, [r7, #4]
 800d8ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d8f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d8f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d8fa:	2302      	movs	r3, #2
 800d8fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d8fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d904:	2304      	movs	r3, #4
 800d906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d908:	23a8      	movs	r3, #168	; 0xa8
 800d90a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d90c:	2302      	movs	r3, #2
 800d90e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d910:	2304      	movs	r3, #4
 800d912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d914:	f107 0320 	add.w	r3, r7, #32
 800d918:	4618      	mov	r0, r3
 800d91a:	f003 fab9 	bl	8010e90 <HAL_RCC_OscConfig>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d924:	f000 fccc 	bl	800e2c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d928:	230f      	movs	r3, #15
 800d92a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d92c:	2302      	movs	r3, #2
 800d92e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d930:	2300      	movs	r3, #0
 800d932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d93a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d93e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d940:	f107 030c 	add.w	r3, r7, #12
 800d944:	2105      	movs	r1, #5
 800d946:	4618      	mov	r0, r3
 800d948:	f003 fd12 	bl	8011370 <HAL_RCC_ClockConfig>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d952:	f000 fcb5 	bl	800e2c0 <Error_Handler>
  }
}
 800d956:	bf00      	nop
 800d958:	3750      	adds	r7, #80	; 0x50
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	40023800 	.word	0x40023800
 800d964:	40007000 	.word	0x40007000

0800d968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d96e:	463b      	mov	r3, r7
 800d970:	2200      	movs	r2, #0
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	605a      	str	r2, [r3, #4]
 800d976:	609a      	str	r2, [r3, #8]
 800d978:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800d97a:	4b2f      	ldr	r3, [pc, #188]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d97c:	4a2f      	ldr	r2, [pc, #188]	; (800da3c <MX_ADC1_Init+0xd4>)
 800d97e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d980:	4b2d      	ldr	r3, [pc, #180]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d988:	4b2b      	ldr	r3, [pc, #172]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800d98e:	4b2a      	ldr	r3, [pc, #168]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d990:	2201      	movs	r2, #1
 800d992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d994:	4b28      	ldr	r3, [pc, #160]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d996:	2201      	movs	r2, #1
 800d998:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d99a:	4b27      	ldr	r3, [pc, #156]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d9a2:	4b25      	ldr	r3, [pc, #148]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d9a8:	4b23      	ldr	r3, [pc, #140]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9aa:	4a25      	ldr	r2, [pc, #148]	; (800da40 <MX_ADC1_Init+0xd8>)
 800d9ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d9ae:	4b22      	ldr	r3, [pc, #136]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800d9b4:	4b20      	ldr	r3, [pc, #128]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9b6:	2203      	movs	r2, #3
 800d9b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d9ba:	4b1f      	ldr	r3, [pc, #124]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d9c2:	4b1d      	ldr	r3, [pc, #116]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d9c8:	481b      	ldr	r0, [pc, #108]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9ca:	f001 fd95 	bl	800f4f8 <HAL_ADC_Init>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d9d4:	f000 fc74 	bl	800e2c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800d9d8:	230a      	movs	r3, #10
 800d9da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9e4:	463b      	mov	r3, r7
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4813      	ldr	r0, [pc, #76]	; (800da38 <MX_ADC1_Init+0xd0>)
 800d9ea:	f001 ff23 	bl	800f834 <HAL_ADC_ConfigChannel>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d9f4:	f000 fc64 	bl	800e2c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800d9f8:	230e      	movs	r3, #14
 800d9fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800da00:	463b      	mov	r3, r7
 800da02:	4619      	mov	r1, r3
 800da04:	480c      	ldr	r0, [pc, #48]	; (800da38 <MX_ADC1_Init+0xd0>)
 800da06:	f001 ff15 	bl	800f834 <HAL_ADC_ConfigChannel>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800da10:	f000 fc56 	bl	800e2c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800da14:	2309      	movs	r3, #9
 800da16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800da18:	2303      	movs	r3, #3
 800da1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800da1c:	463b      	mov	r3, r7
 800da1e:	4619      	mov	r1, r3
 800da20:	4805      	ldr	r0, [pc, #20]	; (800da38 <MX_ADC1_Init+0xd0>)
 800da22:	f001 ff07 	bl	800f834 <HAL_ADC_ConfigChannel>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800da2c:	f000 fc48 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800da30:	bf00      	nop
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000c2c 	.word	0x20000c2c
 800da3c:	40012000 	.word	0x40012000
 800da40:	0f000001 	.word	0x0f000001

0800da44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800da4a:	463b      	mov	r3, r7
 800da4c:	2200      	movs	r2, #0
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	605a      	str	r2, [r3, #4]
 800da52:	609a      	str	r2, [r3, #8]
 800da54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800da56:	4b28      	ldr	r3, [pc, #160]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da58:	4a28      	ldr	r2, [pc, #160]	; (800dafc <MX_ADC2_Init+0xb8>)
 800da5a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800da5c:	4b26      	ldr	r3, [pc, #152]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800da62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800da64:	4b24      	ldr	r3, [pc, #144]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da66:	2200      	movs	r2, #0
 800da68:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800da6a:	4b23      	ldr	r3, [pc, #140]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da6c:	2201      	movs	r2, #1
 800da6e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800da70:	4b21      	ldr	r3, [pc, #132]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da72:	2201      	movs	r2, #1
 800da74:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800da76:	4b20      	ldr	r3, [pc, #128]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800da7e:	4b1e      	ldr	r3, [pc, #120]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da80:	2200      	movs	r2, #0
 800da82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800da84:	4b1c      	ldr	r3, [pc, #112]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da86:	4a1e      	ldr	r2, [pc, #120]	; (800db00 <MX_ADC2_Init+0xbc>)
 800da88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da8a:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800da90:	4b19      	ldr	r3, [pc, #100]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da92:	2202      	movs	r2, #2
 800da94:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800da96:	4b18      	ldr	r3, [pc, #96]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800da9e:	4b16      	ldr	r3, [pc, #88]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800daa4:	4814      	ldr	r0, [pc, #80]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800daa6:	f001 fd27 	bl	800f4f8 <HAL_ADC_Init>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800dab0:	f000 fc06 	bl	800e2c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800dab4:	230b      	movs	r3, #11
 800dab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800dab8:	2301      	movs	r3, #1
 800daba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dabc:	2303      	movs	r3, #3
 800dabe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dac0:	463b      	mov	r3, r7
 800dac2:	4619      	mov	r1, r3
 800dac4:	480c      	ldr	r0, [pc, #48]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800dac6:	f001 feb5 	bl	800f834 <HAL_ADC_ConfigChannel>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800dad0:	f000 fbf6 	bl	800e2c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800dad4:	230f      	movs	r3, #15
 800dad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800dad8:	2302      	movs	r3, #2
 800dada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dadc:	463b      	mov	r3, r7
 800dade:	4619      	mov	r1, r3
 800dae0:	4805      	ldr	r0, [pc, #20]	; (800daf8 <MX_ADC2_Init+0xb4>)
 800dae2:	f001 fea7 	bl	800f834 <HAL_ADC_ConfigChannel>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800daec:	f000 fbe8 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800daf0:	bf00      	nop
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	20000b0c 	.word	0x20000b0c
 800dafc:	40012100 	.word	0x40012100
 800db00:	0f000001 	.word	0x0f000001

0800db04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800db08:	4b17      	ldr	r3, [pc, #92]	; (800db68 <MX_SPI3_Init+0x64>)
 800db0a:	4a18      	ldr	r2, [pc, #96]	; (800db6c <MX_SPI3_Init+0x68>)
 800db0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800db0e:	4b16      	ldr	r3, [pc, #88]	; (800db68 <MX_SPI3_Init+0x64>)
 800db10:	f44f 7282 	mov.w	r2, #260	; 0x104
 800db14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800db16:	4b14      	ldr	r3, [pc, #80]	; (800db68 <MX_SPI3_Init+0x64>)
 800db18:	2200      	movs	r2, #0
 800db1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800db1c:	4b12      	ldr	r3, [pc, #72]	; (800db68 <MX_SPI3_Init+0x64>)
 800db1e:	2200      	movs	r2, #0
 800db20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800db22:	4b11      	ldr	r3, [pc, #68]	; (800db68 <MX_SPI3_Init+0x64>)
 800db24:	2202      	movs	r2, #2
 800db26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800db28:	4b0f      	ldr	r3, [pc, #60]	; (800db68 <MX_SPI3_Init+0x64>)
 800db2a:	2201      	movs	r2, #1
 800db2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800db2e:	4b0e      	ldr	r3, [pc, #56]	; (800db68 <MX_SPI3_Init+0x64>)
 800db30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800db36:	4b0c      	ldr	r3, [pc, #48]	; (800db68 <MX_SPI3_Init+0x64>)
 800db38:	2228      	movs	r2, #40	; 0x28
 800db3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800db3c:	4b0a      	ldr	r3, [pc, #40]	; (800db68 <MX_SPI3_Init+0x64>)
 800db3e:	2200      	movs	r2, #0
 800db40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800db42:	4b09      	ldr	r3, [pc, #36]	; (800db68 <MX_SPI3_Init+0x64>)
 800db44:	2200      	movs	r2, #0
 800db46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db48:	4b07      	ldr	r3, [pc, #28]	; (800db68 <MX_SPI3_Init+0x64>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800db4e:	4b06      	ldr	r3, [pc, #24]	; (800db68 <MX_SPI3_Init+0x64>)
 800db50:	220a      	movs	r2, #10
 800db52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800db54:	4804      	ldr	r0, [pc, #16]	; (800db68 <MX_SPI3_Init+0x64>)
 800db56:	f003 fdfd 	bl	8011754 <HAL_SPI_Init>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800db60:	f000 fbae 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800db64:	bf00      	nop
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20000bd4 	.word	0x20000bd4
 800db6c:	40003c00 	.word	0x40003c00

0800db70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db76:	f107 0308 	add.w	r3, r7, #8
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	605a      	str	r2, [r3, #4]
 800db80:	609a      	str	r2, [r3, #8]
 800db82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db84:	463b      	mov	r3, r7
 800db86:	2200      	movs	r2, #0
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800db8c:	4b1e      	ldr	r3, [pc, #120]	; (800dc08 <MX_TIM1_Init+0x98>)
 800db8e:	4a1f      	ldr	r2, [pc, #124]	; (800dc0c <MX_TIM1_Init+0x9c>)
 800db90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800db92:	4b1d      	ldr	r3, [pc, #116]	; (800dc08 <MX_TIM1_Init+0x98>)
 800db94:	22a7      	movs	r2, #167	; 0xa7
 800db96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db98:	4b1b      	ldr	r3, [pc, #108]	; (800dc08 <MX_TIM1_Init+0x98>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800db9e:	4b1a      	ldr	r3, [pc, #104]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dba6:	4b18      	ldr	r3, [pc, #96]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800dbac:	4b16      	ldr	r3, [pc, #88]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dbb2:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dbb8:	4813      	ldr	r0, [pc, #76]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dbba:	f004 fb1f 	bl	80121fc <HAL_TIM_Base_Init>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800dbc4:	f000 fb7c 	bl	800e2c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dbce:	f107 0308 	add.w	r3, r7, #8
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	480c      	ldr	r0, [pc, #48]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dbd6:	f005 f8e9 	bl	8012dac <HAL_TIM_ConfigClockSource>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800dbe0:	f000 fb6e 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800dbec:	463b      	mov	r3, r7
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4805      	ldr	r0, [pc, #20]	; (800dc08 <MX_TIM1_Init+0x98>)
 800dbf2:	f005 fd95 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800dbfc:	f000 fb60 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800dc00:	bf00      	nop
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20000d14 	.word	0x20000d14
 800dc0c:	40010000 	.word	0x40010000

0800dc10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08e      	sub	sp, #56	; 0x38
 800dc14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	605a      	str	r2, [r3, #4]
 800dc20:	609a      	str	r2, [r3, #8]
 800dc22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc24:	f107 0320 	add.w	r3, r7, #32
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc2e:	1d3b      	adds	r3, r7, #4
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	605a      	str	r2, [r3, #4]
 800dc36:	609a      	str	r2, [r3, #8]
 800dc38:	60da      	str	r2, [r3, #12]
 800dc3a:	611a      	str	r2, [r3, #16]
 800dc3c:	615a      	str	r2, [r3, #20]
 800dc3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc40:	4b2d      	ldr	r3, [pc, #180]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc48:	4b2b      	ldr	r3, [pc, #172]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc4e:	4b2a      	ldr	r3, [pc, #168]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800dc54:	4b28      	ldr	r3, [pc, #160]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc56:	f241 0267 	movw	r2, #4199	; 0x1067
 800dc5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc5c:	4b26      	ldr	r3, [pc, #152]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc62:	4b25      	ldr	r3, [pc, #148]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dc68:	4823      	ldr	r0, [pc, #140]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc6a:	f004 fac7 	bl	80121fc <HAL_TIM_Base_Init>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800dc74:	f000 fb24 	bl	800e2c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dc7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc82:	4619      	mov	r1, r3
 800dc84:	481c      	ldr	r0, [pc, #112]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc86:	f005 f891 	bl	8012dac <HAL_TIM_ConfigClockSource>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800dc90:	f000 fb16 	bl	800e2c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dc94:	4818      	ldr	r0, [pc, #96]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dc96:	f004 fc7f 	bl	8012598 <HAL_TIM_PWM_Init>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dca0:	f000 fb0e 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dca4:	2300      	movs	r3, #0
 800dca6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dcac:	f107 0320 	add.w	r3, r7, #32
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4811      	ldr	r0, [pc, #68]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dcb4:	f005 fd34 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dcbe:	f000 faff 	bl	800e2c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dcc2:	2360      	movs	r3, #96	; 0x60
 800dcc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dcca:	2300      	movs	r3, #0
 800dccc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dcd2:	1d3b      	adds	r3, r7, #4
 800dcd4:	220c      	movs	r2, #12
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4807      	ldr	r0, [pc, #28]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dcda:	f004 ffa1 	bl	8012c20 <HAL_TIM_PWM_ConfigChannel>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dce4:	f000 faec 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dce8:	4803      	ldr	r0, [pc, #12]	; (800dcf8 <MX_TIM2_Init+0xe8>)
 800dcea:	f000 fd43 	bl	800e774 <HAL_TIM_MspPostInit>

}
 800dcee:	bf00      	nop
 800dcf0:	3738      	adds	r7, #56	; 0x38
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20000d54 	.word	0x20000d54

0800dcfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08c      	sub	sp, #48	; 0x30
 800dd00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dd02:	f107 030c 	add.w	r3, r7, #12
 800dd06:	2224      	movs	r2, #36	; 0x24
 800dd08:	2100      	movs	r1, #0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f006 fbe1 	bl	80144d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd10:	1d3b      	adds	r3, r7, #4
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd18:	4b20      	ldr	r3, [pc, #128]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd1a:	4a21      	ldr	r2, [pc, #132]	; (800dda0 <MX_TIM3_Init+0xa4>)
 800dd1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dd1e:	4b1f      	ldr	r3, [pc, #124]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd24:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800dd2a:	4b1c      	ldr	r3, [pc, #112]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd2c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dd30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd32:	4b1a      	ldr	r3, [pc, #104]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd38:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dd42:	2300      	movs	r3, #0
 800dd44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dd46:	2301      	movs	r3, #1
 800dd48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dd52:	2300      	movs	r3, #0
 800dd54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dd56:	2301      	movs	r3, #1
 800dd58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800dd62:	f107 030c 	add.w	r3, r7, #12
 800dd66:	4619      	mov	r1, r3
 800dd68:	480c      	ldr	r0, [pc, #48]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd6a:	f004 fce1 	bl	8012730 <HAL_TIM_Encoder_Init>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800dd74:	f000 faa4 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd80:	1d3b      	adds	r3, r7, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4805      	ldr	r0, [pc, #20]	; (800dd9c <MX_TIM3_Init+0xa0>)
 800dd86:	f005 fccb 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800dd90:	f000 fa96 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dd94:	bf00      	nop
 800dd96:	3730      	adds	r7, #48	; 0x30
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20000b94 	.word	0x20000b94
 800dda0:	40000400 	.word	0x40000400

0800dda4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08c      	sub	sp, #48	; 0x30
 800dda8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ddaa:	f107 030c 	add.w	r3, r7, #12
 800ddae:	2224      	movs	r2, #36	; 0x24
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f006 fb8d 	bl	80144d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddb8:	1d3b      	adds	r3, r7, #4
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ddc0:	4b20      	ldr	r3, [pc, #128]	; (800de44 <MX_TIM4_Init+0xa0>)
 800ddc2:	4a21      	ldr	r2, [pc, #132]	; (800de48 <MX_TIM4_Init+0xa4>)
 800ddc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ddc6:	4b1f      	ldr	r3, [pc, #124]	; (800de44 <MX_TIM4_Init+0xa0>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddcc:	4b1d      	ldr	r3, [pc, #116]	; (800de44 <MX_TIM4_Init+0xa0>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800ddd2:	4b1c      	ldr	r3, [pc, #112]	; (800de44 <MX_TIM4_Init+0xa0>)
 800ddd4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ddd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddda:	4b1a      	ldr	r3, [pc, #104]	; (800de44 <MX_TIM4_Init+0xa0>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dde0:	4b18      	ldr	r3, [pc, #96]	; (800de44 <MX_TIM4_Init+0xa0>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dde6:	2303      	movs	r3, #3
 800dde8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ddea:	2300      	movs	r3, #0
 800ddec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ddfe:	2301      	movs	r3, #1
 800de00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800de02:	2300      	movs	r3, #0
 800de04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800de06:	2300      	movs	r3, #0
 800de08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800de0a:	f107 030c 	add.w	r3, r7, #12
 800de0e:	4619      	mov	r1, r3
 800de10:	480c      	ldr	r0, [pc, #48]	; (800de44 <MX_TIM4_Init+0xa0>)
 800de12:	f004 fc8d 	bl	8012730 <HAL_TIM_Encoder_Init>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800de1c:	f000 fa50 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de20:	2300      	movs	r3, #0
 800de22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de24:	2300      	movs	r3, #0
 800de26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800de28:	1d3b      	adds	r3, r7, #4
 800de2a:	4619      	mov	r1, r3
 800de2c:	4805      	ldr	r0, [pc, #20]	; (800de44 <MX_TIM4_Init+0xa0>)
 800de2e:	f005 fc77 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800de38:	f000 fa42 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800de3c:	bf00      	nop
 800de3e:	3730      	adds	r7, #48	; 0x30
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	20000acc 	.word	0x20000acc
 800de48:	40000800 	.word	0x40000800

0800de4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08e      	sub	sp, #56	; 0x38
 800de50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800de52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	605a      	str	r2, [r3, #4]
 800de5c:	609a      	str	r2, [r3, #8]
 800de5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de60:	f107 0320 	add.w	r3, r7, #32
 800de64:	2200      	movs	r2, #0
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de6a:	1d3b      	adds	r3, r7, #4
 800de6c:	2200      	movs	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	605a      	str	r2, [r3, #4]
 800de72:	609a      	str	r2, [r3, #8]
 800de74:	60da      	str	r2, [r3, #12]
 800de76:	611a      	str	r2, [r3, #16]
 800de78:	615a      	str	r2, [r3, #20]
 800de7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800de7c:	4b2c      	ldr	r3, [pc, #176]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de7e:	4a2d      	ldr	r2, [pc, #180]	; (800df34 <MX_TIM5_Init+0xe8>)
 800de80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800de82:	4b2b      	ldr	r3, [pc, #172]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de84:	2200      	movs	r2, #0
 800de86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de88:	4b29      	ldr	r3, [pc, #164]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800de8e:	4b28      	ldr	r3, [pc, #160]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de90:	f241 0267 	movw	r2, #4199	; 0x1067
 800de94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de96:	4b26      	ldr	r3, [pc, #152]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de98:	2200      	movs	r2, #0
 800de9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de9c:	4b24      	ldr	r3, [pc, #144]	; (800df30 <MX_TIM5_Init+0xe4>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dea2:	4823      	ldr	r0, [pc, #140]	; (800df30 <MX_TIM5_Init+0xe4>)
 800dea4:	f004 f9aa 	bl	80121fc <HAL_TIM_Base_Init>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800deae:	f000 fa07 	bl	800e2c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800deb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800deb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800debc:	4619      	mov	r1, r3
 800debe:	481c      	ldr	r0, [pc, #112]	; (800df30 <MX_TIM5_Init+0xe4>)
 800dec0:	f004 ff74 	bl	8012dac <HAL_TIM_ConfigClockSource>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800deca:	f000 f9f9 	bl	800e2c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dece:	4818      	ldr	r0, [pc, #96]	; (800df30 <MX_TIM5_Init+0xe4>)
 800ded0:	f004 fb62 	bl	8012598 <HAL_TIM_PWM_Init>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800deda:	f000 f9f1 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dede:	2300      	movs	r3, #0
 800dee0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dee2:	2300      	movs	r3, #0
 800dee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dee6:	f107 0320 	add.w	r3, r7, #32
 800deea:	4619      	mov	r1, r3
 800deec:	4810      	ldr	r0, [pc, #64]	; (800df30 <MX_TIM5_Init+0xe4>)
 800deee:	f005 fc17 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800def8:	f000 f9e2 	bl	800e2c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800defc:	2360      	movs	r3, #96	; 0x60
 800defe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df04:	2300      	movs	r3, #0
 800df06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df08:	2300      	movs	r3, #0
 800df0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800df0c:	1d3b      	adds	r3, r7, #4
 800df0e:	2204      	movs	r2, #4
 800df10:	4619      	mov	r1, r3
 800df12:	4807      	ldr	r0, [pc, #28]	; (800df30 <MX_TIM5_Init+0xe4>)
 800df14:	f004 fe84 	bl	8012c20 <HAL_TIM_PWM_ConfigChannel>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800df1e:	f000 f9cf 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800df22:	4803      	ldr	r0, [pc, #12]	; (800df30 <MX_TIM5_Init+0xe4>)
 800df24:	f000 fc26 	bl	800e774 <HAL_TIM_MspPostInit>

}
 800df28:	bf00      	nop
 800df2a:	3738      	adds	r7, #56	; 0x38
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	20000b54 	.word	0x20000b54
 800df34:	40000c00 	.word	0x40000c00

0800df38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b096      	sub	sp, #88	; 0x58
 800df3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	605a      	str	r2, [r3, #4]
 800df48:	609a      	str	r2, [r3, #8]
 800df4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df5a:	2200      	movs	r2, #0
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	605a      	str	r2, [r3, #4]
 800df60:	609a      	str	r2, [r3, #8]
 800df62:	60da      	str	r2, [r3, #12]
 800df64:	611a      	str	r2, [r3, #16]
 800df66:	615a      	str	r2, [r3, #20]
 800df68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800df6a:	1d3b      	adds	r3, r7, #4
 800df6c:	2220      	movs	r2, #32
 800df6e:	2100      	movs	r1, #0
 800df70:	4618      	mov	r0, r3
 800df72:	f006 faae 	bl	80144d2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800df76:	4b42      	ldr	r3, [pc, #264]	; (800e080 <MX_TIM8_Init+0x148>)
 800df78:	4a42      	ldr	r2, [pc, #264]	; (800e084 <MX_TIM8_Init+0x14c>)
 800df7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800df7c:	4b40      	ldr	r3, [pc, #256]	; (800e080 <MX_TIM8_Init+0x148>)
 800df7e:	22a7      	movs	r2, #167	; 0xa7
 800df80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df82:	4b3f      	ldr	r3, [pc, #252]	; (800e080 <MX_TIM8_Init+0x148>)
 800df84:	2200      	movs	r2, #0
 800df86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800df88:	4b3d      	ldr	r3, [pc, #244]	; (800e080 <MX_TIM8_Init+0x148>)
 800df8a:	2231      	movs	r2, #49	; 0x31
 800df8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df8e:	4b3c      	ldr	r3, [pc, #240]	; (800e080 <MX_TIM8_Init+0x148>)
 800df90:	2200      	movs	r2, #0
 800df92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800df94:	4b3a      	ldr	r3, [pc, #232]	; (800e080 <MX_TIM8_Init+0x148>)
 800df96:	2200      	movs	r2, #0
 800df98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800df9a:	4b39      	ldr	r3, [pc, #228]	; (800e080 <MX_TIM8_Init+0x148>)
 800df9c:	2280      	movs	r2, #128	; 0x80
 800df9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dfa0:	4837      	ldr	r0, [pc, #220]	; (800e080 <MX_TIM8_Init+0x148>)
 800dfa2:	f004 f92b 	bl	80121fc <HAL_TIM_Base_Init>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800dfac:	f000 f988 	bl	800e2c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dfb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfba:	4619      	mov	r1, r3
 800dfbc:	4830      	ldr	r0, [pc, #192]	; (800e080 <MX_TIM8_Init+0x148>)
 800dfbe:	f004 fef5 	bl	8012dac <HAL_TIM_ConfigClockSource>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800dfc8:	f000 f97a 	bl	800e2c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800dfcc:	482c      	ldr	r0, [pc, #176]	; (800e080 <MX_TIM8_Init+0x148>)
 800dfce:	f004 f98f 	bl	80122f0 <HAL_TIM_OC_Init>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800dfd8:	f000 f972 	bl	800e2c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dfe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4825      	ldr	r0, [pc, #148]	; (800e080 <MX_TIM8_Init+0x148>)
 800dfec:	f005 fb98 	bl	8013720 <HAL_TIMEx_MasterConfigSynchronization>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800dff6:	f000 f963 	bl	800e2c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800dffa:	2330      	movs	r3, #48	; 0x30
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800dffe:	2318      	movs	r3, #24
 800e000:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e002:	2300      	movs	r3, #0
 800e004:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e006:	2300      	movs	r3, #0
 800e008:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e00e:	2300      	movs	r3, #0
 800e010:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e012:	2300      	movs	r3, #0
 800e014:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e01a:	2200      	movs	r2, #0
 800e01c:	4619      	mov	r1, r3
 800e01e:	4818      	ldr	r0, [pc, #96]	; (800e080 <MX_TIM8_Init+0x148>)
 800e020:	f004 fd9e 	bl	8012b60 <HAL_TIM_OC_ConfigChannel>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800e02a:	f000 f949 	bl	800e2c0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800e02e:	4b14      	ldr	r3, [pc, #80]	; (800e080 <MX_TIM8_Init+0x148>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	699a      	ldr	r2, [r3, #24]
 800e034:	4b12      	ldr	r3, [pc, #72]	; (800e080 <MX_TIM8_Init+0x148>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f042 0208 	orr.w	r2, r2, #8
 800e03c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e03e:	2300      	movs	r3, #0
 800e040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e042:	2300      	movs	r3, #0
 800e044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e046:	2300      	movs	r3, #0
 800e048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e058:	2300      	movs	r3, #0
 800e05a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e05c:	1d3b      	adds	r3, r7, #4
 800e05e:	4619      	mov	r1, r3
 800e060:	4807      	ldr	r0, [pc, #28]	; (800e080 <MX_TIM8_Init+0x148>)
 800e062:	f005 fbd9 	bl	8013818 <HAL_TIMEx_ConfigBreakDeadTime>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800e06c:	f000 f928 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e070:	4803      	ldr	r0, [pc, #12]	; (800e080 <MX_TIM8_Init+0x148>)
 800e072:	f000 fb7f 	bl	800e774 <HAL_TIM_MspPostInit>

}
 800e076:	bf00      	nop
 800e078:	3758      	adds	r7, #88	; 0x58
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20000a8c 	.word	0x20000a8c
 800e084:	40010400 	.word	0x40010400

0800e088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e08c:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e08e:	4a12      	ldr	r2, [pc, #72]	; (800e0d8 <MX_USART1_UART_Init+0x50>)
 800e090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e092:	4b10      	ldr	r3, [pc, #64]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e09a:	4b0e      	ldr	r3, [pc, #56]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0ae:	220c      	movs	r2, #12
 800e0b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e0b2:	4b08      	ldr	r3, [pc, #32]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e0b8:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e0be:	4805      	ldr	r0, [pc, #20]	; (800e0d4 <MX_USART1_UART_Init+0x4c>)
 800e0c0:	f005 fc35 	bl	801392e <HAL_UART_Init>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e0ca:	f000 f8f9 	bl	800e2c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e0ce:	bf00      	nop
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20000c74 	.word	0x20000c74
 800e0d8:	40011000 	.word	0x40011000

0800e0dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	4b10      	ldr	r3, [pc, #64]	; (800e128 <MX_DMA_Init+0x4c>)
 800e0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ea:	4a0f      	ldr	r2, [pc, #60]	; (800e128 <MX_DMA_Init+0x4c>)
 800e0ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e0f0:	6313      	str	r3, [r2, #48]	; 0x30
 800e0f2:	4b0d      	ldr	r3, [pc, #52]	; (800e128 <MX_DMA_Init+0x4c>)
 800e0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0fa:	607b      	str	r3, [r7, #4]
 800e0fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800e0fe:	2200      	movs	r2, #0
 800e100:	2100      	movs	r1, #0
 800e102:	2038      	movs	r0, #56	; 0x38
 800e104:	f001 ff11 	bl	800ff2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e108:	2038      	movs	r0, #56	; 0x38
 800e10a:	f001 ff2a 	bl	800ff62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e10e:	2200      	movs	r2, #0
 800e110:	2100      	movs	r1, #0
 800e112:	203a      	movs	r0, #58	; 0x3a
 800e114:	f001 ff09 	bl	800ff2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e118:	203a      	movs	r0, #58	; 0x3a
 800e11a:	f001 ff22 	bl	800ff62 <HAL_NVIC_EnableIRQ>

}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	40023800 	.word	0x40023800

0800e12c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08a      	sub	sp, #40	; 0x28
 800e130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e132:	f107 0314 	add.w	r3, r7, #20
 800e136:	2200      	movs	r2, #0
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	605a      	str	r2, [r3, #4]
 800e13c:	609a      	str	r2, [r3, #8]
 800e13e:	60da      	str	r2, [r3, #12]
 800e140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]
 800e146:	4b59      	ldr	r3, [pc, #356]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14a:	4a58      	ldr	r2, [pc, #352]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e150:	6313      	str	r3, [r2, #48]	; 0x30
 800e152:	4b56      	ldr	r3, [pc, #344]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e15e:	2300      	movs	r3, #0
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	4b52      	ldr	r3, [pc, #328]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e166:	4a51      	ldr	r2, [pc, #324]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e168:	f043 0304 	orr.w	r3, r3, #4
 800e16c:	6313      	str	r3, [r2, #48]	; 0x30
 800e16e:	4b4f      	ldr	r3, [pc, #316]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	f003 0304 	and.w	r3, r3, #4
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e17a:	2300      	movs	r3, #0
 800e17c:	60bb      	str	r3, [r7, #8]
 800e17e:	4b4b      	ldr	r3, [pc, #300]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e182:	4a4a      	ldr	r2, [pc, #296]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e184:	f043 0301 	orr.w	r3, r3, #1
 800e188:	6313      	str	r3, [r2, #48]	; 0x30
 800e18a:	4b48      	ldr	r3, [pc, #288]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	60bb      	str	r3, [r7, #8]
 800e194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e196:	2300      	movs	r3, #0
 800e198:	607b      	str	r3, [r7, #4]
 800e19a:	4b44      	ldr	r3, [pc, #272]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e19e:	4a43      	ldr	r2, [pc, #268]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e1a0:	f043 0302 	orr.w	r3, r3, #2
 800e1a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1a6:	4b41      	ldr	r3, [pc, #260]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	607b      	str	r3, [r7, #4]
 800e1b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	603b      	str	r3, [r7, #0]
 800e1b6:	4b3d      	ldr	r3, [pc, #244]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	4a3c      	ldr	r2, [pc, #240]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e1bc:	f043 0308 	orr.w	r3, r3, #8
 800e1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1c2:	4b3a      	ldr	r3, [pc, #232]	; (800e2ac <MX_GPIO_Init+0x180>)
 800e1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c6:	f003 0308 	and.w	r3, r3, #8
 800e1ca:	603b      	str	r3, [r7, #0]
 800e1cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e1d4:	4836      	ldr	r0, [pc, #216]	; (800e2b0 <MX_GPIO_Init+0x184>)
 800e1d6:	f002 fe41 	bl	8010e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e1da:	2200      	movs	r2, #0
 800e1dc:	2105      	movs	r1, #5
 800e1de:	4835      	ldr	r0, [pc, #212]	; (800e2b4 <MX_GPIO_Init+0x188>)
 800e1e0:	f002 fe3c 	bl	8010e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	2104      	movs	r1, #4
 800e1e8:	4833      	ldr	r0, [pc, #204]	; (800e2b8 <MX_GPIO_Init+0x18c>)
 800e1ea:	f002 fe37 	bl	8010e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1f4:	4831      	ldr	r0, [pc, #196]	; (800e2bc <MX_GPIO_Init+0x190>)
 800e1f6:	f002 fe31 	bl	8010e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e1fa:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e1fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e200:	2301      	movs	r3, #1
 800e202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e204:	2300      	movs	r3, #0
 800e206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e208:	2300      	movs	r3, #0
 800e20a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e20c:	f107 0314 	add.w	r3, r7, #20
 800e210:	4619      	mov	r1, r3
 800e212:	4827      	ldr	r0, [pc, #156]	; (800e2b0 <MX_GPIO_Init+0x184>)
 800e214:	f002 fc88 	bl	8010b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e218:	2305      	movs	r3, #5
 800e21a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e21c:	2301      	movs	r3, #1
 800e21e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e220:	2300      	movs	r3, #0
 800e222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e224:	2300      	movs	r3, #0
 800e226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e228:	f107 0314 	add.w	r3, r7, #20
 800e22c:	4619      	mov	r1, r3
 800e22e:	4821      	ldr	r0, [pc, #132]	; (800e2b4 <MX_GPIO_Init+0x188>)
 800e230:	f002 fc7a 	bl	8010b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800e234:	f241 0304 	movw	r3, #4100	; 0x1004
 800e238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e23a:	2300      	movs	r3, #0
 800e23c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e23e:	2300      	movs	r3, #0
 800e240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e242:	f107 0314 	add.w	r3, r7, #20
 800e246:	4619      	mov	r1, r3
 800e248:	481c      	ldr	r0, [pc, #112]	; (800e2bc <MX_GPIO_Init+0x190>)
 800e24a:	f002 fc6d 	bl	8010b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800e24e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e254:	2300      	movs	r3, #0
 800e256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	4619      	mov	r1, r3
 800e262:	4814      	ldr	r0, [pc, #80]	; (800e2b4 <MX_GPIO_Init+0x188>)
 800e264:	f002 fc60 	bl	8010b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e268:	2304      	movs	r3, #4
 800e26a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e26c:	2301      	movs	r3, #1
 800e26e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e270:	2300      	movs	r3, #0
 800e272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e274:	2300      	movs	r3, #0
 800e276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e278:	f107 0314 	add.w	r3, r7, #20
 800e27c:	4619      	mov	r1, r3
 800e27e:	480e      	ldr	r0, [pc, #56]	; (800e2b8 <MX_GPIO_Init+0x18c>)
 800e280:	f002 fc52 	bl	8010b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e284:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e28a:	2301      	movs	r3, #1
 800e28c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e292:	2300      	movs	r3, #0
 800e294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e296:	f107 0314 	add.w	r3, r7, #20
 800e29a:	4619      	mov	r1, r3
 800e29c:	4807      	ldr	r0, [pc, #28]	; (800e2bc <MX_GPIO_Init+0x190>)
 800e29e:	f002 fc43 	bl	8010b28 <HAL_GPIO_Init>

}
 800e2a2:	bf00      	nop
 800e2a4:	3728      	adds	r7, #40	; 0x28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	40023800 	.word	0x40023800
 800e2b0:	40020800 	.word	0x40020800
 800e2b4:	40020000 	.word	0x40020000
 800e2b8:	40020c00 	.word	0x40020c00
 800e2bc:	40020400 	.word	0x40020400

0800e2c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e2c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e2c6:	e7fe      	b.n	800e2c6 <Error_Handler+0x6>

0800e2c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	607b      	str	r3, [r7, #4]
 800e2d2:	4b10      	ldr	r3, [pc, #64]	; (800e314 <HAL_MspInit+0x4c>)
 800e2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d6:	4a0f      	ldr	r2, [pc, #60]	; (800e314 <HAL_MspInit+0x4c>)
 800e2d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2dc:	6453      	str	r3, [r2, #68]	; 0x44
 800e2de:	4b0d      	ldr	r3, [pc, #52]	; (800e314 <HAL_MspInit+0x4c>)
 800e2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2e6:	607b      	str	r3, [r7, #4]
 800e2e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	603b      	str	r3, [r7, #0]
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <HAL_MspInit+0x4c>)
 800e2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f2:	4a08      	ldr	r2, [pc, #32]	; (800e314 <HAL_MspInit+0x4c>)
 800e2f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2f8:	6413      	str	r3, [r2, #64]	; 0x40
 800e2fa:	4b06      	ldr	r3, [pc, #24]	; (800e314 <HAL_MspInit+0x4c>)
 800e2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e306:	bf00      	nop
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	40023800 	.word	0x40023800

0800e318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08c      	sub	sp, #48	; 0x30
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e320:	f107 031c 	add.w	r3, r7, #28
 800e324:	2200      	movs	r2, #0
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	605a      	str	r2, [r3, #4]
 800e32a:	609a      	str	r2, [r3, #8]
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a6b      	ldr	r2, [pc, #428]	; (800e4e4 <HAL_ADC_MspInit+0x1cc>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d172      	bne.n	800e420 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e33a:	2300      	movs	r3, #0
 800e33c:	61bb      	str	r3, [r7, #24]
 800e33e:	4b6a      	ldr	r3, [pc, #424]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e342:	4a69      	ldr	r2, [pc, #420]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e348:	6453      	str	r3, [r2, #68]	; 0x44
 800e34a:	4b67      	ldr	r3, [pc, #412]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e352:	61bb      	str	r3, [r7, #24]
 800e354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]
 800e35a:	4b63      	ldr	r3, [pc, #396]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35e:	4a62      	ldr	r2, [pc, #392]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e360:	f043 0304 	orr.w	r3, r3, #4
 800e364:	6313      	str	r3, [r2, #48]	; 0x30
 800e366:	4b60      	ldr	r3, [pc, #384]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36a:	f003 0304 	and.w	r3, r3, #4
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e372:	2300      	movs	r3, #0
 800e374:	613b      	str	r3, [r7, #16]
 800e376:	4b5c      	ldr	r3, [pc, #368]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37a:	4a5b      	ldr	r2, [pc, #364]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e37c:	f043 0302 	orr.w	r3, r3, #2
 800e380:	6313      	str	r3, [r2, #48]	; 0x30
 800e382:	4b59      	ldr	r3, [pc, #356]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e386:	f003 0302 	and.w	r3, r3, #2
 800e38a:	613b      	str	r3, [r7, #16]
 800e38c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800e38e:	2311      	movs	r3, #17
 800e390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e392:	2303      	movs	r3, #3
 800e394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e396:	2300      	movs	r3, #0
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e39a:	f107 031c 	add.w	r3, r7, #28
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4852      	ldr	r0, [pc, #328]	; (800e4ec <HAL_ADC_MspInit+0x1d4>)
 800e3a2:	f002 fbc1 	bl	8010b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3b2:	f107 031c 	add.w	r3, r7, #28
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	484d      	ldr	r0, [pc, #308]	; (800e4f0 <HAL_ADC_MspInit+0x1d8>)
 800e3ba:	f002 fbb5 	bl	8010b28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e3be:	4b4d      	ldr	r3, [pc, #308]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3c0:	4a4d      	ldr	r2, [pc, #308]	; (800e4f8 <HAL_ADC_MspInit+0x1e0>)
 800e3c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e3c4:	4b4b      	ldr	r3, [pc, #300]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3ca:	4b4a      	ldr	r3, [pc, #296]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3d0:	4b48      	ldr	r3, [pc, #288]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e3d6:	4b47      	ldr	r3, [pc, #284]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e3de:	4b45      	ldr	r3, [pc, #276]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e3e6:	4b43      	ldr	r3, [pc, #268]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e3ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e3ee:	4b41      	ldr	r3, [pc, #260]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e3f6:	4b3f      	ldr	r3, [pc, #252]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e3fc:	4b3d      	ldr	r3, [pc, #244]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e402:	483c      	ldr	r0, [pc, #240]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e404:	f001 fdc8 	bl	800ff98 <HAL_DMA_Init>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e40e:	f7ff ff57 	bl	800e2c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a37      	ldr	r2, [pc, #220]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e416:	639a      	str	r2, [r3, #56]	; 0x38
 800e418:	4a36      	ldr	r2, [pc, #216]	; (800e4f4 <HAL_ADC_MspInit+0x1dc>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e41e:	e05d      	b.n	800e4dc <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a35      	ldr	r2, [pc, #212]	; (800e4fc <HAL_ADC_MspInit+0x1e4>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d158      	bne.n	800e4dc <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e42a:	2300      	movs	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
 800e42e:	4b2e      	ldr	r3, [pc, #184]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e432:	4a2d      	ldr	r2, [pc, #180]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e438:	6453      	str	r3, [r2, #68]	; 0x44
 800e43a:	4b2b      	ldr	r3, [pc, #172]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e43e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e446:	2300      	movs	r3, #0
 800e448:	60bb      	str	r3, [r7, #8]
 800e44a:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44e:	4a26      	ldr	r2, [pc, #152]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e450:	f043 0304 	orr.w	r3, r3, #4
 800e454:	6313      	str	r3, [r2, #48]	; 0x30
 800e456:	4b24      	ldr	r3, [pc, #144]	; (800e4e8 <HAL_ADC_MspInit+0x1d0>)
 800e458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45a:	f003 0304 	and.w	r3, r3, #4
 800e45e:	60bb      	str	r3, [r7, #8]
 800e460:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e462:	2322      	movs	r3, #34	; 0x22
 800e464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e466:	2303      	movs	r3, #3
 800e468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e46e:	f107 031c 	add.w	r3, r7, #28
 800e472:	4619      	mov	r1, r3
 800e474:	481d      	ldr	r0, [pc, #116]	; (800e4ec <HAL_ADC_MspInit+0x1d4>)
 800e476:	f002 fb57 	bl	8010b28 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e47a:	4b21      	ldr	r3, [pc, #132]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e47c:	4a21      	ldr	r2, [pc, #132]	; (800e504 <HAL_ADC_MspInit+0x1ec>)
 800e47e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e480:	4b1f      	ldr	r3, [pc, #124]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e486:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e488:	4b1d      	ldr	r3, [pc, #116]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e48e:	4b1c      	ldr	r3, [pc, #112]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e490:	2200      	movs	r2, #0
 800e492:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e494:	4b1a      	ldr	r3, [pc, #104]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e49a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e49c:	4b18      	ldr	r3, [pc, #96]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e49e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e4a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e4a4:	4b16      	ldr	r3, [pc, #88]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e4aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e4ac:	4b14      	ldr	r3, [pc, #80]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4b2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e4b4:	4b12      	ldr	r3, [pc, #72]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e4ba:	4b11      	ldr	r3, [pc, #68]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e4c0:	480f      	ldr	r0, [pc, #60]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4c2:	f001 fd69 	bl	800ff98 <HAL_DMA_Init>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e4cc:	f7ff fef8 	bl	800e2c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a0b      	ldr	r2, [pc, #44]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4d4:	639a      	str	r2, [r3, #56]	; 0x38
 800e4d6:	4a0a      	ldr	r2, [pc, #40]	; (800e500 <HAL_ADC_MspInit+0x1e8>)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e4dc:	bf00      	nop
 800e4de:	3730      	adds	r7, #48	; 0x30
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40012000 	.word	0x40012000
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	40020800 	.word	0x40020800
 800e4f0:	40020400 	.word	0x40020400
 800e4f4:	20000cb4 	.word	0x20000cb4
 800e4f8:	40026410 	.word	0x40026410
 800e4fc:	40012100 	.word	0x40012100
 800e500:	20000d94 	.word	0x20000d94
 800e504:	40026440 	.word	0x40026440

0800e508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08a      	sub	sp, #40	; 0x28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e510:	f107 0314 	add.w	r3, r7, #20
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
 800e518:	605a      	str	r2, [r3, #4]
 800e51a:	609a      	str	r2, [r3, #8]
 800e51c:	60da      	str	r2, [r3, #12]
 800e51e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a19      	ldr	r2, [pc, #100]	; (800e58c <HAL_SPI_MspInit+0x84>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d12c      	bne.n	800e584 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e52a:	2300      	movs	r3, #0
 800e52c:	613b      	str	r3, [r7, #16]
 800e52e:	4b18      	ldr	r3, [pc, #96]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e532:	4a17      	ldr	r2, [pc, #92]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e538:	6413      	str	r3, [r2, #64]	; 0x40
 800e53a:	4b15      	ldr	r3, [pc, #84]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e542:	613b      	str	r3, [r7, #16]
 800e544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	4b11      	ldr	r3, [pc, #68]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54e:	4a10      	ldr	r2, [pc, #64]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e550:	f043 0304 	orr.w	r3, r3, #4
 800e554:	6313      	str	r3, [r2, #48]	; 0x30
 800e556:	4b0e      	ldr	r3, [pc, #56]	; (800e590 <HAL_SPI_MspInit+0x88>)
 800e558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e562:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e568:	2302      	movs	r3, #2
 800e56a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e56c:	2300      	movs	r3, #0
 800e56e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e570:	2303      	movs	r3, #3
 800e572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e574:	2306      	movs	r3, #6
 800e576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e578:	f107 0314 	add.w	r3, r7, #20
 800e57c:	4619      	mov	r1, r3
 800e57e:	4805      	ldr	r0, [pc, #20]	; (800e594 <HAL_SPI_MspInit+0x8c>)
 800e580:	f002 fad2 	bl	8010b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e584:	bf00      	nop
 800e586:	3728      	adds	r7, #40	; 0x28
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	40003c00 	.word	0x40003c00
 800e590:	40023800 	.word	0x40023800
 800e594:	40020800 	.word	0x40020800

0800e598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a30      	ldr	r2, [pc, #192]	; (800e668 <HAL_TIM_Base_MspInit+0xd0>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d116      	bne.n	800e5d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
 800e5ae:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5b2:	4a2e      	ldr	r2, [pc, #184]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5b4:	f043 0301 	orr.w	r3, r3, #1
 800e5b8:	6453      	str	r3, [r2, #68]	; 0x44
 800e5ba:	4b2c      	ldr	r3, [pc, #176]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	2019      	movs	r0, #25
 800e5cc:	f001 fcad 	bl	800ff2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e5d0:	2019      	movs	r0, #25
 800e5d2:	f001 fcc6 	bl	800ff62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e5d6:	e042      	b.n	800e65e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5e0:	d10e      	bne.n	800e600 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	613b      	str	r3, [r7, #16]
 800e5e6:	4b21      	ldr	r3, [pc, #132]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ea:	4a20      	ldr	r2, [pc, #128]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5ec:	f043 0301 	orr.w	r3, r3, #1
 800e5f0:	6413      	str	r3, [r2, #64]	; 0x40
 800e5f2:	4b1e      	ldr	r3, [pc, #120]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	613b      	str	r3, [r7, #16]
 800e5fc:	693b      	ldr	r3, [r7, #16]
}
 800e5fe:	e02e      	b.n	800e65e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1a      	ldr	r2, [pc, #104]	; (800e670 <HAL_TIM_Base_MspInit+0xd8>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d10e      	bne.n	800e628 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e60a:	2300      	movs	r3, #0
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	4b17      	ldr	r3, [pc, #92]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e612:	4a16      	ldr	r2, [pc, #88]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e614:	f043 0308 	orr.w	r3, r3, #8
 800e618:	6413      	str	r3, [r2, #64]	; 0x40
 800e61a:	4b14      	ldr	r3, [pc, #80]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61e:	f003 0308 	and.w	r3, r3, #8
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	68fb      	ldr	r3, [r7, #12]
}
 800e626:	e01a      	b.n	800e65e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a11      	ldr	r2, [pc, #68]	; (800e674 <HAL_TIM_Base_MspInit+0xdc>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d115      	bne.n	800e65e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e632:	2300      	movs	r3, #0
 800e634:	60bb      	str	r3, [r7, #8]
 800e636:	4b0d      	ldr	r3, [pc, #52]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e63a:	4a0c      	ldr	r2, [pc, #48]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e63c:	f043 0302 	orr.w	r3, r3, #2
 800e640:	6453      	str	r3, [r2, #68]	; 0x44
 800e642:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <HAL_TIM_Base_MspInit+0xd4>)
 800e644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e646:	f003 0302 	and.w	r3, r3, #2
 800e64a:	60bb      	str	r3, [r7, #8]
 800e64c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800e64e:	2200      	movs	r2, #0
 800e650:	2101      	movs	r1, #1
 800e652:	202c      	movs	r0, #44	; 0x2c
 800e654:	f001 fc69 	bl	800ff2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e658:	202c      	movs	r0, #44	; 0x2c
 800e65a:	f001 fc82 	bl	800ff62 <HAL_NVIC_EnableIRQ>
}
 800e65e:	bf00      	nop
 800e660:	3718      	adds	r7, #24
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	40010000 	.word	0x40010000
 800e66c:	40023800 	.word	0x40023800
 800e670:	40000c00 	.word	0x40000c00
 800e674:	40010400 	.word	0x40010400

0800e678 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b08c      	sub	sp, #48	; 0x30
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e680:	f107 031c 	add.w	r3, r7, #28
 800e684:	2200      	movs	r2, #0
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	605a      	str	r2, [r3, #4]
 800e68a:	609a      	str	r2, [r3, #8]
 800e68c:	60da      	str	r2, [r3, #12]
 800e68e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a32      	ldr	r2, [pc, #200]	; (800e760 <HAL_TIM_Encoder_MspInit+0xe8>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d12c      	bne.n	800e6f4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e69a:	2300      	movs	r3, #0
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	4b31      	ldr	r3, [pc, #196]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	4a30      	ldr	r2, [pc, #192]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6a4:	f043 0302 	orr.w	r3, r3, #2
 800e6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800e6aa:	4b2e      	ldr	r3, [pc, #184]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	617b      	str	r3, [r7, #20]
 800e6ba:	4b2a      	ldr	r3, [pc, #168]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6be:	4a29      	ldr	r2, [pc, #164]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6c0:	f043 0301 	orr.w	r3, r3, #1
 800e6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e6c6:	4b27      	ldr	r3, [pc, #156]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e6d2:	23c0      	movs	r3, #192	; 0xc0
 800e6d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6d6:	2302      	movs	r3, #2
 800e6d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6e6:	f107 031c 	add.w	r3, r7, #28
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	481e      	ldr	r0, [pc, #120]	; (800e768 <HAL_TIM_Encoder_MspInit+0xf0>)
 800e6ee:	f002 fa1b 	bl	8010b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e6f2:	e030      	b.n	800e756 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a1c      	ldr	r2, [pc, #112]	; (800e76c <HAL_TIM_Encoder_MspInit+0xf4>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d12b      	bne.n	800e756 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e6fe:	2300      	movs	r3, #0
 800e700:	613b      	str	r3, [r7, #16]
 800e702:	4b18      	ldr	r3, [pc, #96]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e706:	4a17      	ldr	r2, [pc, #92]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e708:	f043 0304 	orr.w	r3, r3, #4
 800e70c:	6413      	str	r3, [r2, #64]	; 0x40
 800e70e:	4b15      	ldr	r3, [pc, #84]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	613b      	str	r3, [r7, #16]
 800e718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e71a:	2300      	movs	r3, #0
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	4b11      	ldr	r3, [pc, #68]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	4a10      	ldr	r2, [pc, #64]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e724:	f043 0302 	orr.w	r3, r3, #2
 800e728:	6313      	str	r3, [r2, #48]	; 0x30
 800e72a:	4b0e      	ldr	r3, [pc, #56]	; (800e764 <HAL_TIM_Encoder_MspInit+0xec>)
 800e72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e736:	23c0      	movs	r3, #192	; 0xc0
 800e738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e73a:	2302      	movs	r3, #2
 800e73c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e742:	2300      	movs	r3, #0
 800e744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e746:	2302      	movs	r3, #2
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e74a:	f107 031c 	add.w	r3, r7, #28
 800e74e:	4619      	mov	r1, r3
 800e750:	4807      	ldr	r0, [pc, #28]	; (800e770 <HAL_TIM_Encoder_MspInit+0xf8>)
 800e752:	f002 f9e9 	bl	8010b28 <HAL_GPIO_Init>
}
 800e756:	bf00      	nop
 800e758:	3730      	adds	r7, #48	; 0x30
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	40000400 	.word	0x40000400
 800e764:	40023800 	.word	0x40023800
 800e768:	40020000 	.word	0x40020000
 800e76c:	40000800 	.word	0x40000800
 800e770:	40020400 	.word	0x40020400

0800e774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08c      	sub	sp, #48	; 0x30
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e77c:	f107 031c 	add.w	r3, r7, #28
 800e780:	2200      	movs	r2, #0
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	605a      	str	r2, [r3, #4]
 800e786:	609a      	str	r2, [r3, #8]
 800e788:	60da      	str	r2, [r3, #12]
 800e78a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e794:	d11e      	bne.n	800e7d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e796:	2300      	movs	r3, #0
 800e798:	61bb      	str	r3, [r7, #24]
 800e79a:	4b43      	ldr	r3, [pc, #268]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79e:	4a42      	ldr	r2, [pc, #264]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e7a0:	f043 0301 	orr.w	r3, r3, #1
 800e7a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e7a6:	4b40      	ldr	r3, [pc, #256]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	61bb      	str	r3, [r7, #24]
 800e7b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7be:	2303      	movs	r3, #3
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7c6:	f107 031c 	add.w	r3, r7, #28
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4837      	ldr	r0, [pc, #220]	; (800e8ac <HAL_TIM_MspPostInit+0x138>)
 800e7ce:	f002 f9ab 	bl	8010b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e7d2:	e064      	b.n	800e89e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a35      	ldr	r2, [pc, #212]	; (800e8b0 <HAL_TIM_MspPostInit+0x13c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d11e      	bne.n	800e81c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7de:	2300      	movs	r3, #0
 800e7e0:	617b      	str	r3, [r7, #20]
 800e7e2:	4b31      	ldr	r3, [pc, #196]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e6:	4a30      	ldr	r2, [pc, #192]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e7e8:	f043 0301 	orr.w	r3, r3, #1
 800e7ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ee:	4b2e      	ldr	r3, [pc, #184]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	617b      	str	r3, [r7, #20]
 800e7f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7fe:	2302      	movs	r3, #2
 800e800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e802:	2300      	movs	r3, #0
 800e804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e806:	2300      	movs	r3, #0
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e80a:	2302      	movs	r3, #2
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e80e:	f107 031c 	add.w	r3, r7, #28
 800e812:	4619      	mov	r1, r3
 800e814:	4825      	ldr	r0, [pc, #148]	; (800e8ac <HAL_TIM_MspPostInit+0x138>)
 800e816:	f002 f987 	bl	8010b28 <HAL_GPIO_Init>
}
 800e81a:	e040      	b.n	800e89e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a24      	ldr	r2, [pc, #144]	; (800e8b4 <HAL_TIM_MspPostInit+0x140>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d13b      	bne.n	800e89e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e826:	2300      	movs	r3, #0
 800e828:	613b      	str	r3, [r7, #16]
 800e82a:	4b1f      	ldr	r3, [pc, #124]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82e:	4a1e      	ldr	r2, [pc, #120]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e830:	f043 0301 	orr.w	r3, r3, #1
 800e834:	6313      	str	r3, [r2, #48]	; 0x30
 800e836:	4b1c      	ldr	r3, [pc, #112]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	613b      	str	r3, [r7, #16]
 800e840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e842:	2300      	movs	r3, #0
 800e844:	60fb      	str	r3, [r7, #12]
 800e846:	4b18      	ldr	r3, [pc, #96]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84a:	4a17      	ldr	r2, [pc, #92]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e84c:	f043 0304 	orr.w	r3, r3, #4
 800e850:	6313      	str	r3, [r2, #48]	; 0x30
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <HAL_TIM_MspPostInit+0x134>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e85e:	2320      	movs	r3, #32
 800e860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e862:	2302      	movs	r3, #2
 800e864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e866:	2300      	movs	r3, #0
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e86a:	2300      	movs	r3, #0
 800e86c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e86e:	2303      	movs	r3, #3
 800e870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e872:	f107 031c 	add.w	r3, r7, #28
 800e876:	4619      	mov	r1, r3
 800e878:	480c      	ldr	r0, [pc, #48]	; (800e8ac <HAL_TIM_MspPostInit+0x138>)
 800e87a:	f002 f955 	bl	8010b28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e87e:	2340      	movs	r3, #64	; 0x40
 800e880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e882:	2302      	movs	r3, #2
 800e884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e886:	2300      	movs	r3, #0
 800e888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e88a:	2300      	movs	r3, #0
 800e88c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e88e:	2303      	movs	r3, #3
 800e890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e892:	f107 031c 	add.w	r3, r7, #28
 800e896:	4619      	mov	r1, r3
 800e898:	4807      	ldr	r0, [pc, #28]	; (800e8b8 <HAL_TIM_MspPostInit+0x144>)
 800e89a:	f002 f945 	bl	8010b28 <HAL_GPIO_Init>
}
 800e89e:	bf00      	nop
 800e8a0:	3730      	adds	r7, #48	; 0x30
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	40023800 	.word	0x40023800
 800e8ac:	40020000 	.word	0x40020000
 800e8b0:	40000c00 	.word	0x40000c00
 800e8b4:	40010400 	.word	0x40010400
 800e8b8:	40020800 	.word	0x40020800

0800e8bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08a      	sub	sp, #40	; 0x28
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8c4:	f107 0314 	add.w	r3, r7, #20
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	605a      	str	r2, [r3, #4]
 800e8ce:	609a      	str	r2, [r3, #8]
 800e8d0:	60da      	str	r2, [r3, #12]
 800e8d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a19      	ldr	r2, [pc, #100]	; (800e940 <HAL_UART_MspInit+0x84>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d12c      	bne.n	800e938 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e8de:	2300      	movs	r3, #0
 800e8e0:	613b      	str	r3, [r7, #16]
 800e8e2:	4b18      	ldr	r3, [pc, #96]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e6:	4a17      	ldr	r2, [pc, #92]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e8e8:	f043 0310 	orr.w	r3, r3, #16
 800e8ec:	6453      	str	r3, [r2, #68]	; 0x44
 800e8ee:	4b15      	ldr	r3, [pc, #84]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f2:	f003 0310 	and.w	r3, r3, #16
 800e8f6:	613b      	str	r3, [r7, #16]
 800e8f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	4b11      	ldr	r3, [pc, #68]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	4a10      	ldr	r2, [pc, #64]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e904:	f043 0301 	orr.w	r3, r3, #1
 800e908:	6313      	str	r3, [r2, #48]	; 0x30
 800e90a:	4b0e      	ldr	r3, [pc, #56]	; (800e944 <HAL_UART_MspInit+0x88>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e91a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e91c:	2302      	movs	r3, #2
 800e91e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e920:	2300      	movs	r3, #0
 800e922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e924:	2303      	movs	r3, #3
 800e926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e928:	2307      	movs	r3, #7
 800e92a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e92c:	f107 0314 	add.w	r3, r7, #20
 800e930:	4619      	mov	r1, r3
 800e932:	4805      	ldr	r0, [pc, #20]	; (800e948 <HAL_UART_MspInit+0x8c>)
 800e934:	f002 f8f8 	bl	8010b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e938:	bf00      	nop
 800e93a:	3728      	adds	r7, #40	; 0x28
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	40011000 	.word	0x40011000
 800e944:	40023800 	.word	0x40023800
 800e948:	40020000 	.word	0x40020000

0800e94c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e950:	e7fe      	b.n	800e950 <NMI_Handler+0x4>

0800e952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e952:	b480      	push	{r7}
 800e954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e956:	e7fe      	b.n	800e956 <HardFault_Handler+0x4>

0800e958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e958:	b480      	push	{r7}
 800e95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e95c:	e7fe      	b.n	800e95c <MemManage_Handler+0x4>

0800e95e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e95e:	b480      	push	{r7}
 800e960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e962:	e7fe      	b.n	800e962 <BusFault_Handler+0x4>

0800e964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e964:	b480      	push	{r7}
 800e966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e968:	e7fe      	b.n	800e968 <UsageFault_Handler+0x4>

0800e96a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e96a:	b480      	push	{r7}
 800e96c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e96e:	bf00      	nop
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e978:	b480      	push	{r7}
 800e97a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e97c:	bf00      	nop
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e986:	b480      	push	{r7}
 800e988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e98a:	bf00      	nop
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e998:	f000 fd6c 	bl	800f474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e99c:	bf00      	nop
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e9a4:	4802      	ldr	r0, [pc, #8]	; (800e9b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e9a6:	f003 ffd3 	bl	8012950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e9aa:	bf00      	nop
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000d14 	.word	0x20000d14

0800e9b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800e9b8:	4802      	ldr	r0, [pc, #8]	; (800e9c4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800e9ba:	f003 ffc9 	bl	8012950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800e9be:	bf00      	nop
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20000a8c 	.word	0x20000a8c

0800e9c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e9cc:	4802      	ldr	r0, [pc, #8]	; (800e9d8 <DMA2_Stream0_IRQHandler+0x10>)
 800e9ce:	f001 fc59 	bl	8010284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e9d2:	bf00      	nop
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000cb4 	.word	0x20000cb4

0800e9dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800e9e0:	4802      	ldr	r0, [pc, #8]	; (800e9ec <DMA2_Stream2_IRQHandler+0x10>)
 800e9e2:	f001 fc4f 	bl	8010284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800e9e6:	bf00      	nop
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000d94 	.word	0x20000d94

0800e9f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e9f4:	4b08      	ldr	r3, [pc, #32]	; (800ea18 <SystemInit+0x28>)
 800e9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9fa:	4a07      	ldr	r2, [pc, #28]	; (800ea18 <SystemInit+0x28>)
 800e9fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <SystemInit+0x28>)
 800ea06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ea0a:	609a      	str	r2, [r3, #8]
#endif
}
 800ea0c:	bf00      	nop
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	e000ed00 	.word	0xe000ed00

0800ea1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e00a      	b.n	800ea44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ea2e:	f7fe fe5f 	bl	800d6f0 <__io_getchar>
 800ea32:	4601      	mov	r1, r0
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	60ba      	str	r2, [r7, #8]
 800ea3a:	b2ca      	uxtb	r2, r1
 800ea3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	3301      	adds	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	dbf0      	blt.n	800ea2e <_read+0x12>
	}

return len;
 800ea4c:	687b      	ldr	r3, [r7, #4]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b086      	sub	sp, #24
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea62:	2300      	movs	r3, #0
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e009      	b.n	800ea7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	60ba      	str	r2, [r7, #8]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe fe2b 	bl	800d6cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	dbf1      	blt.n	800ea68 <_write+0x12>
	}
	return len;
 800ea84:	687b      	ldr	r3, [r7, #4]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <_close>:

int _close(int file)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
	return -1;
 800ea96:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b083      	sub	sp, #12
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eab6:	605a      	str	r2, [r3, #4]
	return 0;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <_isatty>:

int _isatty(int file)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b083      	sub	sp, #12
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
	return 1;
 800eace:	2301      	movs	r3, #1
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
	return 0;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eb00:	4a14      	ldr	r2, [pc, #80]	; (800eb54 <_sbrk+0x5c>)
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <_sbrk+0x60>)
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eb0c:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <_sbrk+0x64>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eb14:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <_sbrk+0x64>)
 800eb16:	4a12      	ldr	r2, [pc, #72]	; (800eb60 <_sbrk+0x68>)
 800eb18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eb1a:	4b10      	ldr	r3, [pc, #64]	; (800eb5c <_sbrk+0x64>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d207      	bcs.n	800eb38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eb28:	f005 fc9e 	bl	8014468 <__errno>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	230c      	movs	r3, #12
 800eb30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800eb32:	f04f 33ff 	mov.w	r3, #4294967295
 800eb36:	e009      	b.n	800eb4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800eb38:	4b08      	ldr	r3, [pc, #32]	; (800eb5c <_sbrk+0x64>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eb3e:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <_sbrk+0x64>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4413      	add	r3, r2
 800eb46:	4a05      	ldr	r2, [pc, #20]	; (800eb5c <_sbrk+0x64>)
 800eb48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	20020000 	.word	0x20020000
 800eb58:	00000400 	.word	0x00000400
 800eb5c:	200003bc 	.word	0x200003bc
 800eb60:	20000e38 	.word	0x20000e38

0800eb64 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800eb68:	2203      	movs	r2, #3
 800eb6a:	490a      	ldr	r1, [pc, #40]	; (800eb94 <ADCStart+0x30>)
 800eb6c:	480a      	ldr	r0, [pc, #40]	; (800eb98 <ADCStart+0x34>)
 800eb6e:	f000 fd07 	bl	800f580 <HAL_ADC_Start_DMA>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d001      	beq.n	800eb7c <ADCStart+0x18>
	{
		Error_Handler();
 800eb78:	f7ff fba2 	bl	800e2c0 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	4907      	ldr	r1, [pc, #28]	; (800eb9c <ADCStart+0x38>)
 800eb80:	4807      	ldr	r0, [pc, #28]	; (800eba0 <ADCStart+0x3c>)
 800eb82:	f000 fcfd 	bl	800f580 <HAL_ADC_Start_DMA>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <ADCStart+0x2c>
	{
		Error_Handler();
 800eb8c:	f7ff fb98 	bl	800e2c0 <Error_Handler>
	}

}
 800eb90:	bf00      	nop
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	200003c0 	.word	0x200003c0
 800eb98:	20000c2c 	.word	0x20000c2c
 800eb9c:	200003cc 	.word	0x200003cc
 800eba0:	20000b0c 	.word	0x20000b0c

0800eba4 <ADCStop>:
void ADCStop()
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800eba8:	480e      	ldr	r0, [pc, #56]	; (800ebe4 <ADCStop+0x40>)
 800ebaa:	f000 fddb 	bl	800f764 <HAL_ADC_Stop_DMA>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <ADCStop+0x20>
	{
		printf("な\r\n");
 800ebb4:	480c      	ldr	r0, [pc, #48]	; (800ebe8 <ADCStop+0x44>)
 800ebb6:	f006 fb5b 	bl	8015270 <puts>
		Error_Handler();
 800ebba:	f7ff fb81 	bl	800e2c0 <Error_Handler>
		printf("に\r\n");
 800ebbe:	480b      	ldr	r0, [pc, #44]	; (800ebec <ADCStop+0x48>)
 800ebc0:	f006 fb56 	bl	8015270 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800ebc4:	480a      	ldr	r0, [pc, #40]	; (800ebf0 <ADCStop+0x4c>)
 800ebc6:	f000 fdcd 	bl	800f764 <HAL_ADC_Stop_DMA>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d007      	beq.n	800ebe0 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800ebd0:	4808      	ldr	r0, [pc, #32]	; (800ebf4 <ADCStop+0x50>)
 800ebd2:	f006 fb4d 	bl	8015270 <puts>
		Error_Handler();
 800ebd6:	f7ff fb73 	bl	800e2c0 <Error_Handler>
		printf("ね\r\n");
 800ebda:	4807      	ldr	r0, [pc, #28]	; (800ebf8 <ADCStop+0x54>)
 800ebdc:	f006 fb48 	bl	8015270 <puts>
	}
}
 800ebe0:	bf00      	nop
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	20000c2c 	.word	0x20000c2c
 800ebe8:	08019890 	.word	0x08019890
 800ebec:	08019898 	.word	0x08019898
 800ebf0:	20000b0c 	.word	0x20000b0c
 800ebf4:	080198a0 	.word	0x080198a0
 800ebf8:	080198a8 	.word	0x080198a8

0800ebfc <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <FLASH_Unlock+0x1c>)
 800ec02:	4a06      	ldr	r2, [pc, #24]	; (800ec1c <FLASH_Unlock+0x20>)
 800ec04:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800ec06:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <FLASH_Unlock+0x1c>)
 800ec08:	4a05      	ldr	r2, [pc, #20]	; (800ec20 <FLASH_Unlock+0x24>)
 800ec0a:	605a      	str	r2, [r3, #4]
}
 800ec0c:	bf00      	nop
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40023c00 	.word	0x40023c00
 800ec1c:	45670123 	.word	0x45670123
 800ec20:	cdef89ab 	.word	0xcdef89ab

0800ec24 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800ec24:	b480      	push	{r7}
 800ec26:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800ec28:	4b05      	ldr	r3, [pc, #20]	; (800ec40 <FLASH_Lock+0x1c>)
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	4a04      	ldr	r2, [pc, #16]	; (800ec40 <FLASH_Lock+0x1c>)
 800ec2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ec32:	6113      	str	r3, [r2, #16]

}
 800ec34:	bf00      	nop
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	40023c00 	.word	0x40023c00

0800ec44 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800ec44:	b480      	push	{r7}
 800ec46:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ec48:	bf00      	nop
 800ec4a:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <FLASH_WaitBusy+0x1c>)
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1f9      	bne.n	800ec4a <FLASH_WaitBusy+0x6>
}
 800ec56:	bf00      	nop
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	40023c00 	.word	0x40023c00

0800ec64 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ec6e:	f7ff ffc5 	bl	800ebfc <FLASH_Unlock>

	FLASH_WaitBusy();
 800ec72:	f7ff ffe7 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ec76:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	4a0d      	ldr	r2, [pc, #52]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec80:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ec82:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	4a0a      	ldr	r2, [pc, #40]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec88:	f043 0301 	orr.w	r3, r3, #1
 800ec8c:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ec94:	f7ff ffd6 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ec98:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	4a04      	ldr	r2, [pc, #16]	; (800ecb0 <FLASH_Write_Word+0x4c>)
 800ec9e:	f023 0301 	bic.w	r3, r3, #1
 800eca2:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800eca4:	f7ff ffbe 	bl	800ec24 <FLASH_Lock>
}
 800eca8:	bf00      	nop
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	40023c00 	.word	0x40023c00

0800ecb4 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ecbe:	f7ff ff9d 	bl	800ebfc <FLASH_Unlock>

	FLASH_WaitBusy();
 800ecc2:	f7ff ffbf 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ecc6:	4b0f      	ldr	r3, [pc, #60]	; (800ed04 <FLASH_Read_Word+0x50>)
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	4a0e      	ldr	r2, [pc, #56]	; (800ed04 <FLASH_Read_Word+0x50>)
 800eccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecd0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ecd2:	4b0c      	ldr	r3, [pc, #48]	; (800ed04 <FLASH_Read_Word+0x50>)
 800ecd4:	691b      	ldr	r3, [r3, #16]
 800ecd6:	4a0b      	ldr	r2, [pc, #44]	; (800ed04 <FLASH_Read_Word+0x50>)
 800ecd8:	f043 0301 	orr.w	r3, r3, #1
 800ecdc:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ece6:	f7ff ffad 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ecea:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <FLASH_Read_Word+0x50>)
 800ecec:	691b      	ldr	r3, [r3, #16]
 800ecee:	4a05      	ldr	r2, [pc, #20]	; (800ed04 <FLASH_Read_Word+0x50>)
 800ecf0:	f023 0301 	bic.w	r3, r3, #1
 800ecf4:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ecf6:	f7ff ff95 	bl	800ec24 <FLASH_Lock>
}
 800ecfa:	bf00      	nop
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	40023c00 	.word	0x40023c00

0800ed08 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800ed14:	f7ff ff72 	bl	800ebfc <FLASH_Unlock>

	FLASH_WaitBusy();
 800ed18:	f7ff ff94 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	4a0d      	ldr	r2, [pc, #52]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed26:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	4a0a      	ldr	r2, [pc, #40]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed2e:	f043 0301 	orr.w	r3, r3, #1
 800ed32:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	683a      	ldr	r2, [r7, #0]
 800ed38:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ed3a:	f7ff ff83 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ed3e:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	4a05      	ldr	r2, [pc, #20]	; (800ed58 <FLASH_Write_Word_F+0x50>)
 800ed44:	f023 0301 	bic.w	r3, r3, #1
 800ed48:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ed4a:	f7ff ff6b 	bl	800ec24 <FLASH_Lock>
}
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	40023c00 	.word	0x40023c00

0800ed5c <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ed66:	f7ff ff49 	bl	800ebfc <FLASH_Unlock>

	FLASH_WaitBusy();
 800ed6a:	f7ff ff6b 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	4a0e      	ldr	r2, [pc, #56]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed78:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	4a0b      	ldr	r2, [pc, #44]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed80:	f043 0301 	orr.w	r3, r3, #1
 800ed84:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ed8e:	f7ff ff59 	bl	800ec44 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ed92:	4b06      	ldr	r3, [pc, #24]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	4a05      	ldr	r2, [pc, #20]	; (800edac <FLASH_Read_Word_F+0x50>)
 800ed98:	f023 0301 	bic.w	r3, r3, #1
 800ed9c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ed9e:	f7ff ff41 	bl	800ec24 <FLASH_Lock>
}
 800eda2:	bf00      	nop
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	40023c00 	.word	0x40023c00

0800edb0 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800edb6:	f001 fccd 	bl	8010754 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800edba:	2300      	movs	r3, #0
 800edbc:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800edbe:	2301      	movs	r3, #1
 800edc0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800edc2:	2302      	movs	r3, #2
 800edc4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800edc6:	2301      	movs	r3, #1
 800edc8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800edca:	1d3a      	adds	r2, r7, #4
 800edcc:	f107 0308 	add.w	r3, r7, #8
 800edd0:	4611      	mov	r1, r2
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 fd86 	bl	80108e4 <HAL_FLASHEx_Erase>
 800edd8:	4603      	mov	r3, r0
 800edda:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800eddc:	f001 fcdc 	bl	8010798 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ede0:	7ffb      	ldrb	r3, [r7, #31]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d105      	bne.n	800edf2 <Flash_clear_sector1+0x42>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edec:	d101      	bne.n	800edf2 <Flash_clear_sector1+0x42>
 800edee:	2301      	movs	r3, #1
 800edf0:	e000      	b.n	800edf4 <Flash_clear_sector1+0x44>
 800edf2:	2300      	movs	r3, #0
 800edf4:	f003 0301 	and.w	r3, r3, #1
 800edf8:	b2db      	uxtb	r3, r3
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3720      	adds	r7, #32
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b088      	sub	sp, #32
 800ee06:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ee08:	f001 fca4 	bl	8010754 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800ee10:	2309      	movs	r3, #9
 800ee12:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ee14:	2302      	movs	r3, #2
 800ee16:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ee1c:	1d3a      	adds	r2, r7, #4
 800ee1e:	f107 0308 	add.w	r3, r7, #8
 800ee22:	4611      	mov	r1, r2
 800ee24:	4618      	mov	r0, r3
 800ee26:	f001 fd5d 	bl	80108e4 <HAL_FLASHEx_Erase>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800ee2e:	f001 fcb3 	bl	8010798 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ee32:	7ffb      	ldrb	r3, [r7, #31]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d105      	bne.n	800ee44 <Flash_clear_sector9+0x42>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d101      	bne.n	800ee44 <Flash_clear_sector9+0x42>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <Flash_clear_sector9+0x44>
 800ee44:	2300      	movs	r3, #0
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	b2db      	uxtb	r3, r3
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800ee68:	2200      	movs	r2, #0
 800ee6a:	2104      	movs	r1, #4
 800ee6c:	480d      	ldr	r0, [pc, #52]	; (800eea4 <read_byte+0x50>)
 800ee6e:	f001 fff5 	bl	8010e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800ee72:	f107 010f 	add.w	r1, r7, #15
 800ee76:	2364      	movs	r3, #100	; 0x64
 800ee78:	2201      	movs	r2, #1
 800ee7a:	480b      	ldr	r0, [pc, #44]	; (800eea8 <read_byte+0x54>)
 800ee7c:	f002 fcce 	bl	801181c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800ee80:	f107 010e 	add.w	r1, r7, #14
 800ee84:	2364      	movs	r3, #100	; 0x64
 800ee86:	2201      	movs	r2, #1
 800ee88:	4807      	ldr	r0, [pc, #28]	; (800eea8 <read_byte+0x54>)
 800ee8a:	f002 fdfb 	bl	8011a84 <HAL_SPI_Receive>
	CS_SET;
 800ee8e:	2201      	movs	r2, #1
 800ee90:	2104      	movs	r1, #4
 800ee92:	4804      	ldr	r0, [pc, #16]	; (800eea4 <read_byte+0x50>)
 800ee94:	f001 ffe2 	bl	8010e5c <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	40020c00 	.word	0x40020c00
 800eea8:	20000bd4 	.word	0x20000bd4

0800eeac <write_byte>:
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
}
void write_byte( uint8_t reg, uint8_t val )  {
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	460a      	mov	r2, r1
 800eeb6:	71fb      	strb	r3, [r7, #7]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800eec6:	2200      	movs	r2, #0
 800eec8:	2104      	movs	r1, #4
 800eeca:	480c      	ldr	r0, [pc, #48]	; (800eefc <write_byte+0x50>)
 800eecc:	f001 ffc6 	bl	8010e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800eed0:	f107 010f 	add.w	r1, r7, #15
 800eed4:	2364      	movs	r3, #100	; 0x64
 800eed6:	2201      	movs	r2, #1
 800eed8:	4809      	ldr	r0, [pc, #36]	; (800ef00 <write_byte+0x54>)
 800eeda:	f002 fc9f 	bl	801181c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800eede:	1db9      	adds	r1, r7, #6
 800eee0:	2364      	movs	r3, #100	; 0x64
 800eee2:	2201      	movs	r2, #1
 800eee4:	4806      	ldr	r0, [pc, #24]	; (800ef00 <write_byte+0x54>)
 800eee6:	f002 fc99 	bl	801181c <HAL_SPI_Transmit>
	CS_SET;
 800eeea:	2201      	movs	r2, #1
 800eeec:	2104      	movs	r1, #4
 800eeee:	4803      	ldr	r0, [pc, #12]	; (800eefc <write_byte+0x50>)
 800eef0:	f001 ffb4 	bl	8010e5c <HAL_GPIO_WritePin>
}
 800eef4:	bf00      	nop
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	40020c00 	.word	0x40020c00
 800ef00:	20000bd4 	.word	0x20000bd4

0800ef04 <IMU_init>:

uint8_t IMU_init() {
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	f7ff ffa2 	bl	800ee54 <read_byte>
 800ef10:	4603      	mov	r3, r0
 800ef12:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800ef14:	79bb      	ldrb	r3, [r7, #6]
 800ef16:	2be0      	cmp	r3, #224	; 0xe0
 800ef18:	d119      	bne.n	800ef4e <IMU_init+0x4a>
		ret = 1;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800ef1e:	2101      	movs	r1, #1
 800ef20:	2006      	movs	r0, #6
 800ef22:	f7ff ffc3 	bl	800eeac <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800ef26:	2110      	movs	r1, #16
 800ef28:	2003      	movs	r0, #3
 800ef2a:	f7ff ffbf 	bl	800eeac <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800ef2e:	2120      	movs	r1, #32
 800ef30:	207f      	movs	r0, #127	; 0x7f
 800ef32:	f7ff ffbb 	bl	800eeac <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800ef36:	2117      	movs	r1, #23
 800ef38:	2001      	movs	r0, #1
 800ef3a:	f7ff ffb7 	bl	800eeac <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800ef3e:	2106      	movs	r1, #6
 800ef40:	2014      	movs	r0, #20
 800ef42:	f7ff ffb3 	bl	800eeac <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800ef46:	2100      	movs	r1, #0
 800ef48:	207f      	movs	r0, #127	; 0x7f
 800ef4a:	f7ff ffaf 	bl	800eeac <write_byte>
	}
	return ret;
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 800ef62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef66:	f000 faa5 	bl	800f4b4 <HAL_Delay>

	int num = 2000;
 800ef6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ef6e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef72:	f102 0204 	add.w	r2, r2, #4
 800ef76:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800ef78:	f107 0310 	add.w	r3, r7, #16
 800ef7c:	3b0c      	subs	r3, #12
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ef84:	461a      	mov	r2, r3
 800ef86:	2100      	movs	r1, #0
 800ef88:	f005 faa3 	bl	80144d2 <memset>
	float sum=0;
 800ef8c:	f04f 0300 	mov.w	r3, #0
 800ef90:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef94:	f102 020c 	add.w	r2, r2, #12
 800ef98:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800efa0:	f102 0208 	add.w	r2, r2, #8
 800efa4:	6013      	str	r3, [r2, #0]
 800efa6:	e034      	b.n	800f012 <IMU_Calib+0xba>
		zg_vals[i] = ZGyro;
 800efa8:	4b29      	ldr	r3, [pc, #164]	; (800f050 <IMU_Calib+0xf8>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	f107 0310 	add.w	r3, r7, #16
 800efb0:	3b0c      	subs	r3, #12
 800efb2:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800efb6:	f101 0108 	add.w	r1, r1, #8
 800efba:	6809      	ldr	r1, [r1, #0]
 800efbc:	0089      	lsls	r1, r1, #2
 800efbe:	440b      	add	r3, r1
 800efc0:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800efc2:	f107 0310 	add.w	r3, r7, #16
 800efc6:	3b0c      	subs	r3, #12
 800efc8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800efcc:	f102 0208 	add.w	r2, r2, #8
 800efd0:	6812      	ldr	r2, [r2, #0]
 800efd2:	0092      	lsls	r2, r2, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	edd3 7a00 	vldr	s15, [r3]
 800efda:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efde:	f103 030c 	add.w	r3, r3, #12
 800efe2:	ed93 7a00 	vldr	s14, [r3]
 800efe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efee:	f103 030c 	add.w	r3, r3, #12
 800eff2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800eff6:	2002      	movs	r0, #2
 800eff8:	f000 fa5c 	bl	800f4b4 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800effc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f000:	f103 0308 	add.w	r3, r3, #8
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f00c:	f102 0208 	add.w	r2, r2, #8
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f016:	f103 0308 	add.w	r3, r3, #8
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f020:	f103 0304 	add.w	r3, r3, #4
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	429a      	cmp	r2, r3
 800f028:	dbbe      	blt.n	800efa8 <IMU_Calib+0x50>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800f02a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f02e:	f103 030c 	add.w	r3, r3, #12
 800f032:	ed93 7a00 	vldr	s14, [r3]
 800f036:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f054 <IMU_Calib+0xfc>
 800f03a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f03e:	4b06      	ldr	r3, [pc, #24]	; (800f058 <IMU_Calib+0x100>)
 800f040:	edc3 7a00 	vstr	s15, [r3]
}
 800f044:	bf00      	nop
 800f046:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	20000dfc 	.word	0x20000dfc
 800f054:	44fa0000 	.word	0x44fa0000
 800f058:	20000df8 	.word	0x20000df8

0800f05c <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800f060:	213c      	movs	r1, #60	; 0x3c
 800f062:	4804      	ldr	r0, [pc, #16]	; (800f074 <EncoderStart+0x18>)
 800f064:	f003 fbf6 	bl	8012854 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800f068:	213c      	movs	r1, #60	; 0x3c
 800f06a:	4803      	ldr	r0, [pc, #12]	; (800f078 <EncoderStart+0x1c>)
 800f06c:	f003 fbf2 	bl	8012854 <HAL_TIM_Encoder_Start>
}
 800f070:	bf00      	nop
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20000b94 	.word	0x20000b94
 800f078:	20000acc 	.word	0x20000acc

0800f07c <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800f080:	213c      	movs	r1, #60	; 0x3c
 800f082:	4804      	ldr	r0, [pc, #16]	; (800f094 <EncoderStop+0x18>)
 800f084:	f003 fc1d 	bl	80128c2 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800f088:	213c      	movs	r1, #60	; 0x3c
 800f08a:	4803      	ldr	r0, [pc, #12]	; (800f098 <EncoderStop+0x1c>)
 800f08c:	f003 fc19 	bl	80128c2 <HAL_TIM_Encoder_Stop>
}
 800f090:	bf00      	nop
 800f092:	bd80      	pop	{r7, pc}
 800f094:	20000b94 	.word	0x20000b94
 800f098:	20000acc 	.word	0x20000acc

0800f09c <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	4804      	ldr	r0, [pc, #16]	; (800f0b4 <EmitterON+0x18>)
 800f0a4:	f003 f95a 	bl	801235c <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4802      	ldr	r0, [pc, #8]	; (800f0b4 <EmitterON+0x18>)
 800f0ac:	f004 fa6d 	bl	801358a <HAL_TIMEx_OCN_Start_IT>

}
 800f0b0:	bf00      	nop
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20000a8c 	.word	0x20000a8c

0800f0b8 <EmitterOFF>:
void EmitterOFF()
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4804      	ldr	r0, [pc, #16]	; (800f0d0 <EmitterOFF+0x18>)
 800f0c0:	f003 f9d0 	bl	8012464 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4802      	ldr	r0, [pc, #8]	; (800f0d0 <EmitterOFF+0x18>)
 800f0c8:	f004 fab4 	bl	8013634 <HAL_TIMEx_OCN_Stop_IT>

}
 800f0cc:	bf00      	nop
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	20000a8c 	.word	0x20000a8c

0800f0d4 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b07      	cmp	r3, #7
 800f0e0:	f200 80ac 	bhi.w	800f23c <ChangeLED+0x168>
 800f0e4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <ChangeLED+0x18>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f10d 	.word	0x0800f10d
 800f0f0:	0800f133 	.word	0x0800f133
 800f0f4:	0800f159 	.word	0x0800f159
 800f0f8:	0800f17f 	.word	0x0800f17f
 800f0fc:	0800f1a5 	.word	0x0800f1a5
 800f100:	0800f1cb 	.word	0x0800f1cb
 800f104:	0800f1f1 	.word	0x0800f1f1
 800f108:	0800f217 	.word	0x0800f217
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f10c:	2200      	movs	r2, #0
 800f10e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f112:	484d      	ldr	r0, [pc, #308]	; (800f248 <ChangeLED+0x174>)
 800f114:	f001 fea2 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f118:	2200      	movs	r2, #0
 800f11a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f11e:	484a      	ldr	r0, [pc, #296]	; (800f248 <ChangeLED+0x174>)
 800f120:	f001 fe9c 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f124:	2200      	movs	r2, #0
 800f126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f12a:	4848      	ldr	r0, [pc, #288]	; (800f24c <ChangeLED+0x178>)
 800f12c:	f001 fe96 	bl	8010e5c <HAL_GPIO_WritePin>
		break;
 800f130:	e085      	b.n	800f23e <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f132:	2201      	movs	r2, #1
 800f134:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f138:	4843      	ldr	r0, [pc, #268]	; (800f248 <ChangeLED+0x174>)
 800f13a:	f001 fe8f 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f13e:	2200      	movs	r2, #0
 800f140:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f144:	4840      	ldr	r0, [pc, #256]	; (800f248 <ChangeLED+0x174>)
 800f146:	f001 fe89 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f14a:	2200      	movs	r2, #0
 800f14c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f150:	483e      	ldr	r0, [pc, #248]	; (800f24c <ChangeLED+0x178>)
 800f152:	f001 fe83 	bl	8010e5c <HAL_GPIO_WritePin>
		break;
 800f156:	e072      	b.n	800f23e <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f158:	2200      	movs	r2, #0
 800f15a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f15e:	483a      	ldr	r0, [pc, #232]	; (800f248 <ChangeLED+0x174>)
 800f160:	f001 fe7c 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f164:	2201      	movs	r2, #1
 800f166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f16a:	4837      	ldr	r0, [pc, #220]	; (800f248 <ChangeLED+0x174>)
 800f16c:	f001 fe76 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f170:	2200      	movs	r2, #0
 800f172:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f176:	4835      	ldr	r0, [pc, #212]	; (800f24c <ChangeLED+0x178>)
 800f178:	f001 fe70 	bl	8010e5c <HAL_GPIO_WritePin>

		break;
 800f17c:	e05f      	b.n	800f23e <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f17e:	2201      	movs	r2, #1
 800f180:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f184:	4830      	ldr	r0, [pc, #192]	; (800f248 <ChangeLED+0x174>)
 800f186:	f001 fe69 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f18a:	2201      	movs	r2, #1
 800f18c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f190:	482d      	ldr	r0, [pc, #180]	; (800f248 <ChangeLED+0x174>)
 800f192:	f001 fe63 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f196:	2200      	movs	r2, #0
 800f198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f19c:	482b      	ldr	r0, [pc, #172]	; (800f24c <ChangeLED+0x178>)
 800f19e:	f001 fe5d 	bl	8010e5c <HAL_GPIO_WritePin>
		break;
 800f1a2:	e04c      	b.n	800f23e <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1aa:	4827      	ldr	r0, [pc, #156]	; (800f248 <ChangeLED+0x174>)
 800f1ac:	f001 fe56 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1b6:	4824      	ldr	r0, [pc, #144]	; (800f248 <ChangeLED+0x174>)
 800f1b8:	f001 fe50 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1c2:	4822      	ldr	r0, [pc, #136]	; (800f24c <ChangeLED+0x178>)
 800f1c4:	f001 fe4a 	bl	8010e5c <HAL_GPIO_WritePin>
		break;
 800f1c8:	e039      	b.n	800f23e <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1d0:	481d      	ldr	r0, [pc, #116]	; (800f248 <ChangeLED+0x174>)
 800f1d2:	f001 fe43 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1dc:	481a      	ldr	r0, [pc, #104]	; (800f248 <ChangeLED+0x174>)
 800f1de:	f001 fe3d 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1e8:	4818      	ldr	r0, [pc, #96]	; (800f24c <ChangeLED+0x178>)
 800f1ea:	f001 fe37 	bl	8010e5c <HAL_GPIO_WritePin>
		break;
 800f1ee:	e026      	b.n	800f23e <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1f6:	4814      	ldr	r0, [pc, #80]	; (800f248 <ChangeLED+0x174>)
 800f1f8:	f001 fe30 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f202:	4811      	ldr	r0, [pc, #68]	; (800f248 <ChangeLED+0x174>)
 800f204:	f001 fe2a 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f208:	2201      	movs	r2, #1
 800f20a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f20e:	480f      	ldr	r0, [pc, #60]	; (800f24c <ChangeLED+0x178>)
 800f210:	f001 fe24 	bl	8010e5c <HAL_GPIO_WritePin>

		break;
 800f214:	e013      	b.n	800f23e <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f216:	2201      	movs	r2, #1
 800f218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f21c:	480a      	ldr	r0, [pc, #40]	; (800f248 <ChangeLED+0x174>)
 800f21e:	f001 fe1d 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f222:	2201      	movs	r2, #1
 800f224:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f228:	4807      	ldr	r0, [pc, #28]	; (800f248 <ChangeLED+0x174>)
 800f22a:	f001 fe17 	bl	8010e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f22e:	2201      	movs	r2, #1
 800f230:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f234:	4805      	ldr	r0, [pc, #20]	; (800f24c <ChangeLED+0x178>)
 800f236:	f001 fe11 	bl	8010e5c <HAL_GPIO_WritePin>

		break;
 800f23a:	e000      	b.n	800f23e <ChangeLED+0x16a>
	default: break;
 800f23c:	bf00      	nop

	}
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	40020800 	.word	0x40020800
 800f24c:	40020400 	.word	0x40020400

0800f250 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800f250:	b580      	push	{r7, lr}
 800f252:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f254:	210c      	movs	r1, #12
 800f256:	4809      	ldr	r0, [pc, #36]	; (800f27c <Motor_PWM_Start+0x2c>)
 800f258:	f003 f9d4 	bl	8012604 <HAL_TIM_PWM_Start>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800f262:	f7ff f82d 	bl	800e2c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f266:	2104      	movs	r1, #4
 800f268:	4805      	ldr	r0, [pc, #20]	; (800f280 <Motor_PWM_Start+0x30>)
 800f26a:	f003 f9cb 	bl	8012604 <HAL_TIM_PWM_Start>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800f274:	f7ff f824 	bl	800e2c0 <Error_Handler>
  }
#endif
}
 800f278:	bf00      	nop
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20000d54 	.word	0x20000d54
 800f280:	20000b54 	.word	0x20000b54

0800f284 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800f284:	b580      	push	{r7, lr}
 800f286:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f288:	210c      	movs	r1, #12
 800f28a:	4809      	ldr	r0, [pc, #36]	; (800f2b0 <Motor_PWM_Stop+0x2c>)
 800f28c:	f003 f9f8 	bl	8012680 <HAL_TIM_PWM_Stop>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800f296:	f7ff f813 	bl	800e2c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f29a:	2104      	movs	r1, #4
 800f29c:	4805      	ldr	r0, [pc, #20]	; (800f2b4 <Motor_PWM_Stop+0x30>)
 800f29e:	f003 f9ef 	bl	8012680 <HAL_TIM_PWM_Stop>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800f2a8:	f7ff f80a 	bl	800e2c0 <Error_Handler>
  }
#endif
}
 800f2ac:	bf00      	nop
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	20000d54 	.word	0x20000d54
 800f2b4:	20000b54 	.word	0x20000b54

0800f2b8 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	dd05      	ble.n	800f2d4 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	2104      	movs	r1, #4
 800f2cc:	4828      	ldr	r0, [pc, #160]	; (800f370 <Motor_Switch+0xb8>)
 800f2ce:	f001 fdc5 	bl	8010e5c <HAL_GPIO_WritePin>
 800f2d2:	e00a      	b.n	800f2ea <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da07      	bge.n	800f2ea <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2104      	movs	r1, #4
 800f2de:	4824      	ldr	r0, [pc, #144]	; (800f370 <Motor_Switch+0xb8>)
 800f2e0:	f001 fdbc 	bl	8010e5c <HAL_GPIO_WritePin>
		left = -left;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	425b      	negs	r3, r3
 800f2e8:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	dd05      	ble.n	800f2fc <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	2101      	movs	r1, #1
 800f2f4:	481e      	ldr	r0, [pc, #120]	; (800f370 <Motor_Switch+0xb8>)
 800f2f6:	f001 fdb1 	bl	8010e5c <HAL_GPIO_WritePin>
 800f2fa:	e00a      	b.n	800f312 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da07      	bge.n	800f312 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800f302:	2201      	movs	r2, #1
 800f304:	2101      	movs	r1, #1
 800f306:	481a      	ldr	r0, [pc, #104]	; (800f370 <Motor_Switch+0xb8>)
 800f308:	f001 fda8 	bl	8010e5c <HAL_GPIO_WritePin>
	  	right = -right;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	425b      	negs	r3, r3
 800f310:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7f9 f83e 	bl	8008394 <__aeabi_i2d>
 800f318:	a313      	add	r3, pc, #76	; (adr r3, 800f368 <Motor_Switch+0xb0>)
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	f7f9 fb33 	bl	8008988 <__aeabi_dcmpgt>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <Motor_Switch+0x76>
 800f328:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f32c:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800f32e:	6838      	ldr	r0, [r7, #0]
 800f330:	f7f9 f830 	bl	8008394 <__aeabi_i2d>
 800f334:	a30c      	add	r3, pc, #48	; (adr r3, 800f368 <Motor_Switch+0xb0>)
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	f7f9 fb25 	bl	8008988 <__aeabi_dcmpgt>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <Motor_Switch+0x92>
 800f344:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f348:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800f34a:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <Motor_Switch+0xbc>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800f352:	4b09      	ldr	r3, [pc, #36]	; (800f378 <Motor_Switch+0xc0>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f35a:	bf00      	nop
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	f3af 8000 	nop.w
 800f368:	00000000 	.word	0x00000000
 800f36c:	40a3b000 	.word	0x40a3b000
 800f370:	40020000 	.word	0x40020000
 800f374:	20000d54 	.word	0x20000d54
 800f378:	20000b54 	.word	0x20000b54

0800f37c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f37c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f3b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f382:	e003      	b.n	800f38c <LoopCopyDataInit>

0800f384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f384:	4b0c      	ldr	r3, [pc, #48]	; (800f3b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f38a:	3104      	adds	r1, #4

0800f38c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f38c:	480b      	ldr	r0, [pc, #44]	; (800f3bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f38e:	4b0c      	ldr	r3, [pc, #48]	; (800f3c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f394:	d3f6      	bcc.n	800f384 <CopyDataInit>
  ldr  r2, =_sbss
 800f396:	4a0b      	ldr	r2, [pc, #44]	; (800f3c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f398:	e002      	b.n	800f3a0 <LoopFillZerobss>

0800f39a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f39a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f39c:	f842 3b04 	str.w	r3, [r2], #4

0800f3a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f3a0:	4b09      	ldr	r3, [pc, #36]	; (800f3c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f3a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f3a4:	d3f9      	bcc.n	800f39a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f3a6:	f7ff fb23 	bl	800e9f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f3aa:	f005 f863 	bl	8014474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3ae:	f7fe f9b7 	bl	800d720 <main>
  bx  lr    
 800f3b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f3b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f3b8:	08019c2c 	.word	0x08019c2c
  ldr  r0, =_sdata
 800f3bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f3c0:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800f3c4:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800f3c8:	20000e34 	.word	0x20000e34

0800f3cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f3cc:	e7fe      	b.n	800f3cc <ADC_IRQHandler>
	...

0800f3d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f3d4:	4b0e      	ldr	r3, [pc, #56]	; (800f410 <HAL_Init+0x40>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a0d      	ldr	r2, [pc, #52]	; (800f410 <HAL_Init+0x40>)
 800f3da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f3de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f3e0:	4b0b      	ldr	r3, [pc, #44]	; (800f410 <HAL_Init+0x40>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a0a      	ldr	r2, [pc, #40]	; (800f410 <HAL_Init+0x40>)
 800f3e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f3ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f3ec:	4b08      	ldr	r3, [pc, #32]	; (800f410 <HAL_Init+0x40>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4a07      	ldr	r2, [pc, #28]	; (800f410 <HAL_Init+0x40>)
 800f3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f3f8:	2003      	movs	r0, #3
 800f3fa:	f000 fd8b 	bl	800ff14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f3fe:	2000      	movs	r0, #0
 800f400:	f000 f808 	bl	800f414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f404:	f7fe ff60 	bl	800e2c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	40023c00 	.word	0x40023c00

0800f414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f41c:	4b12      	ldr	r3, [pc, #72]	; (800f468 <HAL_InitTick+0x54>)
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	4b12      	ldr	r3, [pc, #72]	; (800f46c <HAL_InitTick+0x58>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	4619      	mov	r1, r3
 800f426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f42a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f432:	4618      	mov	r0, r3
 800f434:	f000 fda3 	bl	800ff7e <HAL_SYSTICK_Config>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e00e      	b.n	800f460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b0f      	cmp	r3, #15
 800f446:	d80a      	bhi.n	800f45e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f448:	2200      	movs	r2, #0
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295
 800f450:	f000 fd6b 	bl	800ff2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f454:	4a06      	ldr	r2, [pc, #24]	; (800f470 <HAL_InitTick+0x5c>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	e000      	b.n	800f460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
}
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	2000001c 	.word	0x2000001c
 800f46c:	20000024 	.word	0x20000024
 800f470:	20000020 	.word	0x20000020

0800f474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f474:	b480      	push	{r7}
 800f476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f478:	4b06      	ldr	r3, [pc, #24]	; (800f494 <HAL_IncTick+0x20>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	461a      	mov	r2, r3
 800f47e:	4b06      	ldr	r3, [pc, #24]	; (800f498 <HAL_IncTick+0x24>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4413      	add	r3, r2
 800f484:	4a04      	ldr	r2, [pc, #16]	; (800f498 <HAL_IncTick+0x24>)
 800f486:	6013      	str	r3, [r2, #0]
}
 800f488:	bf00      	nop
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	20000024 	.word	0x20000024
 800f498:	20000e0c 	.word	0x20000e0c

0800f49c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f49c:	b480      	push	{r7}
 800f49e:	af00      	add	r7, sp, #0
  return uwTick;
 800f4a0:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <HAL_GetTick+0x14>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	20000e0c 	.word	0x20000e0c

0800f4b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f4bc:	f7ff ffee 	bl	800f49c <HAL_GetTick>
 800f4c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4cc:	d005      	beq.n	800f4da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f4ce:	4b09      	ldr	r3, [pc, #36]	; (800f4f4 <HAL_Delay+0x40>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f4da:	bf00      	nop
 800f4dc:	f7ff ffde 	bl	800f49c <HAL_GetTick>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d8f7      	bhi.n	800f4dc <HAL_Delay+0x28>
  {
  }
}
 800f4ec:	bf00      	nop
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20000024 	.word	0x20000024

0800f4f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d101      	bne.n	800f50e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	e033      	b.n	800f576 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f512:	2b00      	cmp	r3, #0
 800f514:	d109      	bne.n	800f52a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7fe fefe 	bl	800e318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	f003 0310 	and.w	r3, r3, #16
 800f532:	2b00      	cmp	r3, #0
 800f534:	d118      	bne.n	800f568 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f53e:	f023 0302 	bic.w	r3, r3, #2
 800f542:	f043 0202 	orr.w	r2, r3, #2
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fa94 	bl	800fa78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55a:	f023 0303 	bic.w	r3, r3, #3
 800f55e:	f043 0201 	orr.w	r2, r3, #1
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	641a      	str	r2, [r3, #64]	; 0x40
 800f566:	e001      	b.n	800f56c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f574:	7bfb      	ldrb	r3, [r7, #15]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f596:	2b01      	cmp	r3, #1
 800f598:	d101      	bne.n	800f59e <HAL_ADC_Start_DMA+0x1e>
 800f59a:	2302      	movs	r3, #2
 800f59c:	e0cc      	b.n	800f738 <HAL_ADC_Start_DMA+0x1b8>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d018      	beq.n	800f5e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	689a      	ldr	r2, [r3, #8]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f042 0201 	orr.w	r2, r2, #1
 800f5c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f5c4:	4b5e      	ldr	r3, [pc, #376]	; (800f740 <HAL_ADC_Start_DMA+0x1c0>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a5e      	ldr	r2, [pc, #376]	; (800f744 <HAL_ADC_Start_DMA+0x1c4>)
 800f5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ce:	0c9a      	lsrs	r2, r3, #18
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	4413      	add	r3, r2
 800f5d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f5d8:	e002      	b.n	800f5e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1f9      	bne.n	800f5da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	f040 80a0 	bne.w	800f736 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f5fe:	f023 0301 	bic.w	r3, r3, #1
 800f602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f614:	2b00      	cmp	r3, #0
 800f616:	d007      	beq.n	800f628 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f61c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f620:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f62c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f634:	d106      	bne.n	800f644 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63a:	f023 0206 	bic.w	r2, r3, #6
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	645a      	str	r2, [r3, #68]	; 0x44
 800f642:	e002      	b.n	800f64a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f652:	4b3d      	ldr	r3, [pc, #244]	; (800f748 <HAL_ADC_Start_DMA+0x1c8>)
 800f654:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65a:	4a3c      	ldr	r2, [pc, #240]	; (800f74c <HAL_ADC_Start_DMA+0x1cc>)
 800f65c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f662:	4a3b      	ldr	r2, [pc, #236]	; (800f750 <HAL_ADC_Start_DMA+0x1d0>)
 800f664:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f66a:	4a3a      	ldr	r2, [pc, #232]	; (800f754 <HAL_ADC_Start_DMA+0x1d4>)
 800f66c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f676:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	685a      	ldr	r2, [r3, #4]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f686:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	689a      	ldr	r2, [r3, #8]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f696:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	334c      	adds	r3, #76	; 0x4c
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f000 fd24 	bl	80100f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	f003 031f 	and.w	r3, r3, #31
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d12a      	bne.n	800f70e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a26      	ldr	r2, [pc, #152]	; (800f758 <HAL_ADC_Start_DMA+0x1d8>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d015      	beq.n	800f6ee <HAL_ADC_Start_DMA+0x16e>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a25      	ldr	r2, [pc, #148]	; (800f75c <HAL_ADC_Start_DMA+0x1dc>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d105      	bne.n	800f6d8 <HAL_ADC_Start_DMA+0x158>
 800f6cc:	4b1e      	ldr	r3, [pc, #120]	; (800f748 <HAL_ADC_Start_DMA+0x1c8>)
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f003 031f 	and.w	r3, r3, #31
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00a      	beq.n	800f6ee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a20      	ldr	r2, [pc, #128]	; (800f760 <HAL_ADC_Start_DMA+0x1e0>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d129      	bne.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
 800f6e2:	4b19      	ldr	r3, [pc, #100]	; (800f748 <HAL_ADC_Start_DMA+0x1c8>)
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	f003 031f 	and.w	r3, r3, #31
 800f6ea:	2b0f      	cmp	r3, #15
 800f6ec:	d823      	bhi.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d11c      	bne.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	689a      	ldr	r2, [r3, #8]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f70a:	609a      	str	r2, [r3, #8]
 800f70c:	e013      	b.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a11      	ldr	r2, [pc, #68]	; (800f758 <HAL_ADC_Start_DMA+0x1d8>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d10e      	bne.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f722:	2b00      	cmp	r3, #0
 800f724:	d107      	bne.n	800f736 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	689a      	ldr	r2, [r3, #8]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f734:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	2000001c 	.word	0x2000001c
 800f744:	431bde83 	.word	0x431bde83
 800f748:	40012300 	.word	0x40012300
 800f74c:	0800fc71 	.word	0x0800fc71
 800f750:	0800fd2b 	.word	0x0800fd2b
 800f754:	0800fd47 	.word	0x0800fd47
 800f758:	40012000 	.word	0x40012000
 800f75c:	40012100 	.word	0x40012100
 800f760:	40012200 	.word	0x40012200

0800f764 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f76c:	2300      	movs	r3, #0
 800f76e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f776:	2b01      	cmp	r3, #1
 800f778:	d101      	bne.n	800f77e <HAL_ADC_Stop_DMA+0x1a>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e038      	b.n	800f7f0 <HAL_ADC_Stop_DMA+0x8c>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689a      	ldr	r2, [r3, #8]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f022 0201 	bic.w	r2, r2, #1
 800f794:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d120      	bne.n	800f7e6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	689a      	ldr	r2, [r3, #8]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7b2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 fcf3 	bl	80101a4 <HAL_DMA_Abort>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f7d0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f7da:	f023 0301 	bic.w	r3, r3, #1
 800f7de:	f043 0201 	orr.w	r2, r3, #1
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800f7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800f83e:	2300      	movs	r3, #0
 800f840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d101      	bne.n	800f850 <HAL_ADC_ConfigChannel+0x1c>
 800f84c:	2302      	movs	r3, #2
 800f84e:	e105      	b.n	800fa5c <HAL_ADC_ConfigChannel+0x228>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b09      	cmp	r3, #9
 800f85e:	d925      	bls.n	800f8ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	68d9      	ldr	r1, [r3, #12]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	461a      	mov	r2, r3
 800f86e:	4613      	mov	r3, r2
 800f870:	005b      	lsls	r3, r3, #1
 800f872:	4413      	add	r3, r2
 800f874:	3b1e      	subs	r3, #30
 800f876:	2207      	movs	r2, #7
 800f878:	fa02 f303 	lsl.w	r3, r2, r3
 800f87c:	43da      	mvns	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	400a      	ands	r2, r1
 800f884:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	68d9      	ldr	r1, [r3, #12]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	4618      	mov	r0, r3
 800f898:	4603      	mov	r3, r0
 800f89a:	005b      	lsls	r3, r3, #1
 800f89c:	4403      	add	r3, r0
 800f89e:	3b1e      	subs	r3, #30
 800f8a0:	409a      	lsls	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	430a      	orrs	r2, r1
 800f8a8:	60da      	str	r2, [r3, #12]
 800f8aa:	e022      	b.n	800f8f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6919      	ldr	r1, [r3, #16]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	005b      	lsls	r3, r3, #1
 800f8be:	4413      	add	r3, r2
 800f8c0:	2207      	movs	r2, #7
 800f8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c6:	43da      	mvns	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	400a      	ands	r2, r1
 800f8ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6919      	ldr	r1, [r3, #16]
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	689a      	ldr	r2, [r3, #8]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	005b      	lsls	r3, r3, #1
 800f8e6:	4403      	add	r3, r0
 800f8e8:	409a      	lsls	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	430a      	orrs	r2, r1
 800f8f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	2b06      	cmp	r3, #6
 800f8f8:	d824      	bhi.n	800f944 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	685a      	ldr	r2, [r3, #4]
 800f904:	4613      	mov	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	3b05      	subs	r3, #5
 800f90c:	221f      	movs	r2, #31
 800f90e:	fa02 f303 	lsl.w	r3, r2, r3
 800f912:	43da      	mvns	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	400a      	ands	r2, r1
 800f91a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	b29b      	uxth	r3, r3
 800f928:	4618      	mov	r0, r3
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	4613      	mov	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	3b05      	subs	r3, #5
 800f936:	fa00 f203 	lsl.w	r2, r0, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	430a      	orrs	r2, r1
 800f940:	635a      	str	r2, [r3, #52]	; 0x34
 800f942:	e04c      	b.n	800f9de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	2b0c      	cmp	r3, #12
 800f94a:	d824      	bhi.n	800f996 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	4613      	mov	r3, r2
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	4413      	add	r3, r2
 800f95c:	3b23      	subs	r3, #35	; 0x23
 800f95e:	221f      	movs	r2, #31
 800f960:	fa02 f303 	lsl.w	r3, r2, r3
 800f964:	43da      	mvns	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	400a      	ands	r2, r1
 800f96c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	b29b      	uxth	r3, r3
 800f97a:	4618      	mov	r0, r3
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	685a      	ldr	r2, [r3, #4]
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	3b23      	subs	r3, #35	; 0x23
 800f988:	fa00 f203 	lsl.w	r2, r0, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
 800f994:	e023      	b.n	800f9de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	685a      	ldr	r2, [r3, #4]
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	3b41      	subs	r3, #65	; 0x41
 800f9a8:	221f      	movs	r2, #31
 800f9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f9ae:	43da      	mvns	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	400a      	ands	r2, r1
 800f9b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4413      	add	r3, r2
 800f9d0:	3b41      	subs	r3, #65	; 0x41
 800f9d2:	fa00 f203 	lsl.w	r2, r0, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f9de:	4b22      	ldr	r3, [pc, #136]	; (800fa68 <HAL_ADC_ConfigChannel+0x234>)
 800f9e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a21      	ldr	r2, [pc, #132]	; (800fa6c <HAL_ADC_ConfigChannel+0x238>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d109      	bne.n	800fa00 <HAL_ADC_ConfigChannel+0x1cc>
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b12      	cmp	r3, #18
 800f9f2:	d105      	bne.n	800fa00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a19      	ldr	r2, [pc, #100]	; (800fa6c <HAL_ADC_ConfigChannel+0x238>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d123      	bne.n	800fa52 <HAL_ADC_ConfigChannel+0x21e>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b10      	cmp	r3, #16
 800fa10:	d003      	beq.n	800fa1a <HAL_ADC_ConfigChannel+0x1e6>
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b11      	cmp	r3, #17
 800fa18:	d11b      	bne.n	800fa52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b10      	cmp	r3, #16
 800fa2c:	d111      	bne.n	800fa52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fa2e:	4b10      	ldr	r3, [pc, #64]	; (800fa70 <HAL_ADC_ConfigChannel+0x23c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a10      	ldr	r2, [pc, #64]	; (800fa74 <HAL_ADC_ConfigChannel+0x240>)
 800fa34:	fba2 2303 	umull	r2, r3, r2, r3
 800fa38:	0c9a      	lsrs	r2, r3, #18
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	005b      	lsls	r3, r3, #1
 800fa42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fa44:	e002      	b.n	800fa4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1f9      	bne.n	800fa46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3714      	adds	r7, #20
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	40012300 	.word	0x40012300
 800fa6c:	40012000 	.word	0x40012000
 800fa70:	2000001c 	.word	0x2000001c
 800fa74:	431bde83 	.word	0x431bde83

0800fa78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fa80:	4b79      	ldr	r3, [pc, #484]	; (800fc68 <ADC_Init+0x1f0>)
 800fa82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	431a      	orrs	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	685a      	ldr	r2, [r3, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800faac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6859      	ldr	r1, [r3, #4]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	021a      	lsls	r2, r3, #8
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	430a      	orrs	r2, r1
 800fac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	685a      	ldr	r2, [r3, #4]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800fad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	6859      	ldr	r1, [r3, #4]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	689a      	ldr	r2, [r3, #8]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	430a      	orrs	r2, r1
 800fae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	689a      	ldr	r2, [r3, #8]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800faf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6899      	ldr	r1, [r3, #8]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	68da      	ldr	r2, [r3, #12]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	430a      	orrs	r2, r1
 800fb04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0a:	4a58      	ldr	r2, [pc, #352]	; (800fc6c <ADC_Init+0x1f4>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d022      	beq.n	800fb56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	689a      	ldr	r2, [r3, #8]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fb1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6899      	ldr	r1, [r3, #8]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	430a      	orrs	r2, r1
 800fb30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	689a      	ldr	r2, [r3, #8]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fb40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6899      	ldr	r1, [r3, #8]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	430a      	orrs	r2, r1
 800fb52:	609a      	str	r2, [r3, #8]
 800fb54:	e00f      	b.n	800fb76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fb64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	689a      	ldr	r2, [r3, #8]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fb74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	689a      	ldr	r2, [r3, #8]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f022 0202 	bic.w	r2, r2, #2
 800fb84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6899      	ldr	r1, [r3, #8]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	7e1b      	ldrb	r3, [r3, #24]
 800fb90:	005a      	lsls	r2, r3, #1
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	430a      	orrs	r2, r1
 800fb98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d01b      	beq.n	800fbdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	685a      	ldr	r2, [r3, #4]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fbc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6859      	ldr	r1, [r3, #4]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	035a      	lsls	r2, r3, #13
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	430a      	orrs	r2, r1
 800fbd8:	605a      	str	r2, [r3, #4]
 800fbda:	e007      	b.n	800fbec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fbea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800fbfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	69db      	ldr	r3, [r3, #28]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	051a      	lsls	r2, r3, #20
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	430a      	orrs	r2, r1
 800fc10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fc20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	6899      	ldr	r1, [r3, #8]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc2e:	025a      	lsls	r2, r3, #9
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	430a      	orrs	r2, r1
 800fc36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	689a      	ldr	r2, [r3, #8]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6899      	ldr	r1, [r3, #8]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	695b      	ldr	r3, [r3, #20]
 800fc52:	029a      	lsls	r2, r3, #10
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	430a      	orrs	r2, r1
 800fc5a:	609a      	str	r2, [r3, #8]
}
 800fc5c:	bf00      	nop
 800fc5e:	3714      	adds	r7, #20
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	40012300 	.word	0x40012300
 800fc6c:	0f000001 	.word	0x0f000001

0800fc70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d13c      	bne.n	800fd04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d12b      	bne.n	800fcfc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d127      	bne.n	800fcfc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d006      	beq.n	800fcc8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d119      	bne.n	800fcfc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f022 0220 	bic.w	r2, r2, #32
 800fcd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d105      	bne.n	800fcfc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcf4:	f043 0201 	orr.w	r2, r3, #1
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f7ff fd7b 	bl	800f7f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800fd02:	e00e      	b.n	800fd22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd08:	f003 0310 	and.w	r3, r3, #16
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d003      	beq.n	800fd18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7ff fd85 	bl	800f820 <HAL_ADC_ErrorCallback>
}
 800fd16:	e004      	b.n	800fd22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	4798      	blx	r3
}
 800fd22:	bf00      	nop
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b084      	sub	sp, #16
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff fd67 	bl	800f80c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800fd3e:	bf00      	nop
 800fd40:	3710      	adds	r7, #16
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b084      	sub	sp, #16
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2240      	movs	r2, #64	; 0x40
 800fd58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd5e:	f043 0204 	orr.w	r2, r3, #4
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7ff fd5a 	bl	800f820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800fd6c:	bf00      	nop
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f003 0307 	and.w	r3, r3, #7
 800fd82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800fd84:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <__NVIC_SetPriorityGrouping+0x44>)
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800fd90:	4013      	ands	r3, r2
 800fd92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800fd9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800fda0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fda4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800fda6:	4a04      	ldr	r2, [pc, #16]	; (800fdb8 <__NVIC_SetPriorityGrouping+0x44>)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	60d3      	str	r3, [r2, #12]
}
 800fdac:	bf00      	nop
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	e000ed00 	.word	0xe000ed00

0800fdbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fdc0:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <__NVIC_GetPriorityGrouping+0x18>)
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	0a1b      	lsrs	r3, r3, #8
 800fdc6:	f003 0307 	and.w	r3, r3, #7
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr
 800fdd4:	e000ed00 	.word	0xe000ed00

0800fdd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fde2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	db0b      	blt.n	800fe02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	f003 021f 	and.w	r2, r3, #31
 800fdf0:	4907      	ldr	r1, [pc, #28]	; (800fe10 <__NVIC_EnableIRQ+0x38>)
 800fdf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fdf6:	095b      	lsrs	r3, r3, #5
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	fa00 f202 	lsl.w	r2, r0, r2
 800fdfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800fe02:	bf00      	nop
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	e000e100 	.word	0xe000e100

0800fe14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	6039      	str	r1, [r7, #0]
 800fe1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	db0a      	blt.n	800fe3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	490c      	ldr	r1, [pc, #48]	; (800fe60 <__NVIC_SetPriority+0x4c>)
 800fe2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe32:	0112      	lsls	r2, r2, #4
 800fe34:	b2d2      	uxtb	r2, r2
 800fe36:	440b      	add	r3, r1
 800fe38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fe3c:	e00a      	b.n	800fe54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	4908      	ldr	r1, [pc, #32]	; (800fe64 <__NVIC_SetPriority+0x50>)
 800fe44:	79fb      	ldrb	r3, [r7, #7]
 800fe46:	f003 030f 	and.w	r3, r3, #15
 800fe4a:	3b04      	subs	r3, #4
 800fe4c:	0112      	lsls	r2, r2, #4
 800fe4e:	b2d2      	uxtb	r2, r2
 800fe50:	440b      	add	r3, r1
 800fe52:	761a      	strb	r2, [r3, #24]
}
 800fe54:	bf00      	nop
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr
 800fe60:	e000e100 	.word	0xe000e100
 800fe64:	e000ed00 	.word	0xe000ed00

0800fe68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b089      	sub	sp, #36	; 0x24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f003 0307 	and.w	r3, r3, #7
 800fe7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	f1c3 0307 	rsb	r3, r3, #7
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	bf28      	it	cs
 800fe86:	2304      	movcs	r3, #4
 800fe88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	2b06      	cmp	r3, #6
 800fe90:	d902      	bls.n	800fe98 <NVIC_EncodePriority+0x30>
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3b03      	subs	r3, #3
 800fe96:	e000      	b.n	800fe9a <NVIC_EncodePriority+0x32>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fe9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	fa02 f303 	lsl.w	r3, r2, r3
 800fea6:	43da      	mvns	r2, r3
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	401a      	ands	r2, r3
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800feb0:	f04f 31ff 	mov.w	r1, #4294967295
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	fa01 f303 	lsl.w	r3, r1, r3
 800feba:	43d9      	mvns	r1, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fec0:	4313      	orrs	r3, r2
         );
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3724      	adds	r7, #36	; 0x24
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr
	...

0800fed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	3b01      	subs	r3, #1
 800fedc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fee0:	d301      	bcc.n	800fee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fee2:	2301      	movs	r3, #1
 800fee4:	e00f      	b.n	800ff06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fee6:	4a0a      	ldr	r2, [pc, #40]	; (800ff10 <SysTick_Config+0x40>)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3b01      	subs	r3, #1
 800feec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800feee:	210f      	movs	r1, #15
 800fef0:	f04f 30ff 	mov.w	r0, #4294967295
 800fef4:	f7ff ff8e 	bl	800fe14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fef8:	4b05      	ldr	r3, [pc, #20]	; (800ff10 <SysTick_Config+0x40>)
 800fefa:	2200      	movs	r2, #0
 800fefc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fefe:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <SysTick_Config+0x40>)
 800ff00:	2207      	movs	r2, #7
 800ff02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	e000e010 	.word	0xe000e010

0800ff14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff ff29 	bl	800fd74 <__NVIC_SetPriorityGrouping>
}
 800ff22:	bf00      	nop
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b086      	sub	sp, #24
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	4603      	mov	r3, r0
 800ff32:	60b9      	str	r1, [r7, #8]
 800ff34:	607a      	str	r2, [r7, #4]
 800ff36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ff3c:	f7ff ff3e 	bl	800fdbc <__NVIC_GetPriorityGrouping>
 800ff40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	68b9      	ldr	r1, [r7, #8]
 800ff46:	6978      	ldr	r0, [r7, #20]
 800ff48:	f7ff ff8e 	bl	800fe68 <NVIC_EncodePriority>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff52:	4611      	mov	r1, r2
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7ff ff5d 	bl	800fe14 <__NVIC_SetPriority>
}
 800ff5a:	bf00      	nop
 800ff5c:	3718      	adds	r7, #24
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b082      	sub	sp, #8
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	4603      	mov	r3, r0
 800ff6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ff6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff ff31 	bl	800fdd8 <__NVIC_EnableIRQ>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7ff ffa2 	bl	800fed0 <SysTick_Config>
 800ff8c:	4603      	mov	r3, r0
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
	...

0800ff98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ffa4:	f7ff fa7a 	bl	800f49c <HAL_GetTick>
 800ffa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e099      	b.n	80100e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2202      	movs	r2, #2
 800ffc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f022 0201 	bic.w	r2, r2, #1
 800ffd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ffd4:	e00f      	b.n	800fff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ffd6:	f7ff fa61 	bl	800f49c <HAL_GetTick>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	2b05      	cmp	r3, #5
 800ffe2:	d908      	bls.n	800fff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2220      	movs	r2, #32
 800ffe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2203      	movs	r2, #3
 800ffee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e078      	b.n	80100e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f003 0301 	and.w	r3, r3, #1
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1e8      	bne.n	800ffd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	4b38      	ldr	r3, [pc, #224]	; (80100f0 <HAL_DMA_Init+0x158>)
 8010010:	4013      	ands	r3, r2
 8010012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685a      	ldr	r2, [r3, #4]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801002e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	699b      	ldr	r3, [r3, #24]
 8010034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801003a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6a1b      	ldr	r3, [r3, #32]
 8010040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	4313      	orrs	r3, r2
 8010046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004c:	2b04      	cmp	r3, #4
 801004e:	d107      	bne.n	8010060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010058:	4313      	orrs	r3, r2
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	4313      	orrs	r3, r2
 801005e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	697a      	ldr	r2, [r7, #20]
 8010066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	695b      	ldr	r3, [r3, #20]
 801006e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	f023 0307 	bic.w	r3, r3, #7
 8010076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	4313      	orrs	r3, r2
 8010080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010086:	2b04      	cmp	r3, #4
 8010088:	d117      	bne.n	80100ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801008e:	697a      	ldr	r2, [r7, #20]
 8010090:	4313      	orrs	r3, r2
 8010092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00e      	beq.n	80100ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 fadf 	bl	8010660 <DMA_CheckFifoParam>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d008      	beq.n	80100ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2240      	movs	r2, #64	; 0x40
 80100ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2201      	movs	r2, #1
 80100b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80100b6:	2301      	movs	r3, #1
 80100b8:	e016      	b.n	80100e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	697a      	ldr	r2, [r7, #20]
 80100c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 fa96 	bl	80105f4 <DMA_CalcBaseAndBitshift>
 80100c8:	4603      	mov	r3, r0
 80100ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100d0:	223f      	movs	r2, #63	; 0x3f
 80100d2:	409a      	lsls	r2, r3
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2201      	movs	r2, #1
 80100e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80100e6:	2300      	movs	r3, #0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	f010803f 	.word	0xf010803f

080100f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b086      	sub	sp, #24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
 8010100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801010a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010112:	2b01      	cmp	r3, #1
 8010114:	d101      	bne.n	801011a <HAL_DMA_Start_IT+0x26>
 8010116:	2302      	movs	r3, #2
 8010118:	e040      	b.n	801019c <HAL_DMA_Start_IT+0xa8>
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b01      	cmp	r3, #1
 801012c:	d12f      	bne.n	801018e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2202      	movs	r2, #2
 8010132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2200      	movs	r2, #0
 801013a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f000 fa28 	bl	8010598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801014c:	223f      	movs	r2, #63	; 0x3f
 801014e:	409a      	lsls	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f042 0216 	orr.w	r2, r2, #22
 8010162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010168:	2b00      	cmp	r3, #0
 801016a:	d007      	beq.n	801017c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f042 0208 	orr.w	r2, r2, #8
 801017a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f042 0201 	orr.w	r2, r2, #1
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	e005      	b.n	801019a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8010196:	2302      	movs	r3, #2
 8010198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801019a:	7dfb      	ldrb	r3, [r7, #23]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80101b2:	f7ff f973 	bl	800f49c <HAL_GetTick>
 80101b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d008      	beq.n	80101d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2280      	movs	r2, #128	; 0x80
 80101c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80101d2:	2301      	movs	r3, #1
 80101d4:	e052      	b.n	801027c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f022 0216 	bic.w	r2, r2, #22
 80101e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	695a      	ldr	r2, [r3, #20]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80101f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d103      	bne.n	8010206 <HAL_DMA_Abort+0x62>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010202:	2b00      	cmp	r3, #0
 8010204:	d007      	beq.n	8010216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f022 0208 	bic.w	r2, r2, #8
 8010214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f022 0201 	bic.w	r2, r2, #1
 8010224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010226:	e013      	b.n	8010250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010228:	f7ff f938 	bl	800f49c <HAL_GetTick>
 801022c:	4602      	mov	r2, r0
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	2b05      	cmp	r3, #5
 8010234:	d90c      	bls.n	8010250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2220      	movs	r2, #32
 801023a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2203      	movs	r2, #3
 8010248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801024c:	2303      	movs	r3, #3
 801024e:	e015      	b.n	801027c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1e4      	bne.n	8010228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010262:	223f      	movs	r2, #63	; 0x3f
 8010264:	409a      	lsls	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2201      	movs	r2, #1
 8010276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801028c:	2300      	movs	r3, #0
 801028e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010290:	4b92      	ldr	r3, [pc, #584]	; (80104dc <HAL_DMA_IRQHandler+0x258>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a92      	ldr	r2, [pc, #584]	; (80104e0 <HAL_DMA_IRQHandler+0x25c>)
 8010296:	fba2 2303 	umull	r2, r3, r2, r3
 801029a:	0a9b      	lsrs	r3, r3, #10
 801029c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102ae:	2208      	movs	r2, #8
 80102b0:	409a      	lsls	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	4013      	ands	r3, r2
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d01a      	beq.n	80102f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f003 0304 	and.w	r3, r3, #4
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d013      	beq.n	80102f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f022 0204 	bic.w	r2, r2, #4
 80102d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102dc:	2208      	movs	r2, #8
 80102de:	409a      	lsls	r2, r3
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e8:	f043 0201 	orr.w	r2, r3, #1
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102f4:	2201      	movs	r2, #1
 80102f6:	409a      	lsls	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4013      	ands	r3, r2
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d012      	beq.n	8010326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00b      	beq.n	8010326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010312:	2201      	movs	r2, #1
 8010314:	409a      	lsls	r2, r3
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801031e:	f043 0202 	orr.w	r2, r3, #2
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801032a:	2204      	movs	r2, #4
 801032c:	409a      	lsls	r2, r3
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	4013      	ands	r3, r2
 8010332:	2b00      	cmp	r3, #0
 8010334:	d012      	beq.n	801035c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 0302 	and.w	r3, r3, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00b      	beq.n	801035c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010348:	2204      	movs	r2, #4
 801034a:	409a      	lsls	r2, r3
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010354:	f043 0204 	orr.w	r2, r3, #4
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010360:	2210      	movs	r2, #16
 8010362:	409a      	lsls	r2, r3
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4013      	ands	r3, r2
 8010368:	2b00      	cmp	r3, #0
 801036a:	d043      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f003 0308 	and.w	r3, r3, #8
 8010376:	2b00      	cmp	r3, #0
 8010378:	d03c      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801037e:	2210      	movs	r2, #16
 8010380:	409a      	lsls	r2, r3
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010390:	2b00      	cmp	r3, #0
 8010392:	d018      	beq.n	80103c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d108      	bne.n	80103b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d024      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	4798      	blx	r3
 80103b2:	e01f      	b.n	80103f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d01b      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	4798      	blx	r3
 80103c4:	e016      	b.n	80103f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d107      	bne.n	80103e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f022 0208 	bic.w	r2, r2, #8
 80103e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103f8:	2220      	movs	r2, #32
 80103fa:	409a      	lsls	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4013      	ands	r3, r2
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 808e 	beq.w	8010522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f003 0310 	and.w	r3, r3, #16
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 8086 	beq.w	8010522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801041a:	2220      	movs	r2, #32
 801041c:	409a      	lsls	r2, r3
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b05      	cmp	r3, #5
 801042c:	d136      	bne.n	801049c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f022 0216 	bic.w	r2, r2, #22
 801043c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	695a      	ldr	r2, [r3, #20]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801044c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010452:	2b00      	cmp	r3, #0
 8010454:	d103      	bne.n	801045e <HAL_DMA_IRQHandler+0x1da>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801045a:	2b00      	cmp	r3, #0
 801045c:	d007      	beq.n	801046e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f022 0208 	bic.w	r2, r2, #8
 801046c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010472:	223f      	movs	r2, #63	; 0x3f
 8010474:	409a      	lsls	r2, r3
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2200      	movs	r2, #0
 801047e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2201      	movs	r2, #1
 8010486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801048e:	2b00      	cmp	r3, #0
 8010490:	d07d      	beq.n	801058e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	4798      	blx	r3
        }
        return;
 801049a:	e078      	b.n	801058e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d01c      	beq.n	80104e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d108      	bne.n	80104ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d030      	beq.n	8010522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	4798      	blx	r3
 80104c8:	e02b      	b.n	8010522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d027      	beq.n	8010522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	4798      	blx	r3
 80104da:	e022      	b.n	8010522 <HAL_DMA_IRQHandler+0x29e>
 80104dc:	2000001c 	.word	0x2000001c
 80104e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d10f      	bne.n	8010512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f022 0210 	bic.w	r2, r2, #16
 8010500:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2201      	movs	r2, #1
 801050e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d003      	beq.n	8010522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010526:	2b00      	cmp	r3, #0
 8010528:	d032      	beq.n	8010590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	2b00      	cmp	r3, #0
 8010534:	d022      	beq.n	801057c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2205      	movs	r2, #5
 801053a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f022 0201 	bic.w	r2, r2, #1
 801054c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	3301      	adds	r3, #1
 8010552:	60bb      	str	r3, [r7, #8]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	429a      	cmp	r2, r3
 8010558:	d307      	bcc.n	801056a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 0301 	and.w	r3, r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1f2      	bne.n	801054e <HAL_DMA_IRQHandler+0x2ca>
 8010568:	e000      	b.n	801056c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801056a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010580:	2b00      	cmp	r3, #0
 8010582:	d005      	beq.n	8010590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	4798      	blx	r3
 801058c:	e000      	b.n	8010590 <HAL_DMA_IRQHandler+0x30c>
        return;
 801058e:	bf00      	nop
    }
  }
}
 8010590:	3718      	adds	r7, #24
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop

08010598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80105b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	2b40      	cmp	r3, #64	; 0x40
 80105c4:	d108      	bne.n	80105d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80105d6:	e007      	b.n	80105e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	60da      	str	r2, [r3, #12]
}
 80105e8:	bf00      	nop
 80105ea:	3714      	adds	r7, #20
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	b2db      	uxtb	r3, r3
 8010602:	3b10      	subs	r3, #16
 8010604:	4a14      	ldr	r2, [pc, #80]	; (8010658 <DMA_CalcBaseAndBitshift+0x64>)
 8010606:	fba2 2303 	umull	r2, r3, r2, r3
 801060a:	091b      	lsrs	r3, r3, #4
 801060c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801060e:	4a13      	ldr	r2, [pc, #76]	; (801065c <DMA_CalcBaseAndBitshift+0x68>)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	4413      	add	r3, r2
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b03      	cmp	r3, #3
 8010620:	d909      	bls.n	8010636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801062a:	f023 0303 	bic.w	r3, r3, #3
 801062e:	1d1a      	adds	r2, r3, #4
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	659a      	str	r2, [r3, #88]	; 0x58
 8010634:	e007      	b.n	8010646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801063e:	f023 0303 	bic.w	r3, r3, #3
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801064a:	4618      	mov	r0, r3
 801064c:	3714      	adds	r7, #20
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	aaaaaaab 	.word	0xaaaaaaab
 801065c:	080198dc 	.word	0x080198dc

08010660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010668:	2300      	movs	r3, #0
 801066a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d11f      	bne.n	80106ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b03      	cmp	r3, #3
 801067e:	d855      	bhi.n	801072c <DMA_CheckFifoParam+0xcc>
 8010680:	a201      	add	r2, pc, #4	; (adr r2, 8010688 <DMA_CheckFifoParam+0x28>)
 8010682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010686:	bf00      	nop
 8010688:	08010699 	.word	0x08010699
 801068c:	080106ab 	.word	0x080106ab
 8010690:	08010699 	.word	0x08010699
 8010694:	0801072d 	.word	0x0801072d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d045      	beq.n	8010730 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80106a4:	2301      	movs	r3, #1
 80106a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80106a8:	e042      	b.n	8010730 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80106b2:	d13f      	bne.n	8010734 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80106b4:	2301      	movs	r3, #1
 80106b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80106b8:	e03c      	b.n	8010734 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	699b      	ldr	r3, [r3, #24]
 80106be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106c2:	d121      	bne.n	8010708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d836      	bhi.n	8010738 <DMA_CheckFifoParam+0xd8>
 80106ca:	a201      	add	r2, pc, #4	; (adr r2, 80106d0 <DMA_CheckFifoParam+0x70>)
 80106cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d0:	080106e1 	.word	0x080106e1
 80106d4:	080106e7 	.word	0x080106e7
 80106d8:	080106e1 	.word	0x080106e1
 80106dc:	080106f9 	.word	0x080106f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80106e0:	2301      	movs	r3, #1
 80106e2:	73fb      	strb	r3, [r7, #15]
      break;
 80106e4:	e02f      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d024      	beq.n	801073c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80106f6:	e021      	b.n	801073c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010700:	d11e      	bne.n	8010740 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010706:	e01b      	b.n	8010740 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d902      	bls.n	8010714 <DMA_CheckFifoParam+0xb4>
 801070e:	2b03      	cmp	r3, #3
 8010710:	d003      	beq.n	801071a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010712:	e018      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	73fb      	strb	r3, [r7, #15]
      break;
 8010718:	e015      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00e      	beq.n	8010744 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	73fb      	strb	r3, [r7, #15]
      break;
 801072a:	e00b      	b.n	8010744 <DMA_CheckFifoParam+0xe4>
      break;
 801072c:	bf00      	nop
 801072e:	e00a      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;
 8010730:	bf00      	nop
 8010732:	e008      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;
 8010734:	bf00      	nop
 8010736:	e006      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;
 8010738:	bf00      	nop
 801073a:	e004      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;
 801073c:	bf00      	nop
 801073e:	e002      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;   
 8010740:	bf00      	nop
 8010742:	e000      	b.n	8010746 <DMA_CheckFifoParam+0xe6>
      break;
 8010744:	bf00      	nop
    }
  } 
  
  return status; 
 8010746:	7bfb      	ldrb	r3, [r7, #15]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3714      	adds	r7, #20
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801075e:	4b0b      	ldr	r3, [pc, #44]	; (801078c <HAL_FLASH_Unlock+0x38>)
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	2b00      	cmp	r3, #0
 8010764:	da0b      	bge.n	801077e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010766:	4b09      	ldr	r3, [pc, #36]	; (801078c <HAL_FLASH_Unlock+0x38>)
 8010768:	4a09      	ldr	r2, [pc, #36]	; (8010790 <HAL_FLASH_Unlock+0x3c>)
 801076a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801076c:	4b07      	ldr	r3, [pc, #28]	; (801078c <HAL_FLASH_Unlock+0x38>)
 801076e:	4a09      	ldr	r2, [pc, #36]	; (8010794 <HAL_FLASH_Unlock+0x40>)
 8010770:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010772:	4b06      	ldr	r3, [pc, #24]	; (801078c <HAL_FLASH_Unlock+0x38>)
 8010774:	691b      	ldr	r3, [r3, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	da01      	bge.n	801077e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801077a:	2301      	movs	r3, #1
 801077c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801077e:	79fb      	ldrb	r3, [r7, #7]
}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	40023c00 	.word	0x40023c00
 8010790:	45670123 	.word	0x45670123
 8010794:	cdef89ab 	.word	0xcdef89ab

08010798 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010798:	b480      	push	{r7}
 801079a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801079c:	4b05      	ldr	r3, [pc, #20]	; (80107b4 <HAL_FLASH_Lock+0x1c>)
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	4a04      	ldr	r2, [pc, #16]	; (80107b4 <HAL_FLASH_Lock+0x1c>)
 80107a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80107a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	40023c00 	.word	0x40023c00

080107b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80107c0:	2300      	movs	r3, #0
 80107c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107c4:	4b1a      	ldr	r3, [pc, #104]	; (8010830 <FLASH_WaitForLastOperation+0x78>)
 80107c6:	2200      	movs	r2, #0
 80107c8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80107ca:	f7fe fe67 	bl	800f49c <HAL_GetTick>
 80107ce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80107d0:	e010      	b.n	80107f4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d8:	d00c      	beq.n	80107f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d007      	beq.n	80107f0 <FLASH_WaitForLastOperation+0x38>
 80107e0:	f7fe fe5c 	bl	800f49c <HAL_GetTick>
 80107e4:	4602      	mov	r2, r0
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d201      	bcs.n	80107f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80107f0:	2303      	movs	r3, #3
 80107f2:	e019      	b.n	8010828 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80107f4:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <FLASH_WaitForLastOperation+0x7c>)
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1e8      	bne.n	80107d2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010800:	4b0c      	ldr	r3, [pc, #48]	; (8010834 <FLASH_WaitForLastOperation+0x7c>)
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	f003 0301 	and.w	r3, r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801080c:	4b09      	ldr	r3, [pc, #36]	; (8010834 <FLASH_WaitForLastOperation+0x7c>)
 801080e:	2201      	movs	r2, #1
 8010810:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010812:	4b08      	ldr	r3, [pc, #32]	; (8010834 <FLASH_WaitForLastOperation+0x7c>)
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801081a:	2b00      	cmp	r3, #0
 801081c:	d003      	beq.n	8010826 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801081e:	f000 f80b 	bl	8010838 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010822:	2301      	movs	r3, #1
 8010824:	e000      	b.n	8010828 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010826:	2300      	movs	r3, #0
  
}  
 8010828:	4618      	mov	r0, r3
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	20000e10 	.word	0x20000e10
 8010834:	40023c00 	.word	0x40023c00

08010838 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010838:	b480      	push	{r7}
 801083a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801083c:	4b27      	ldr	r3, [pc, #156]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	f003 0310 	and.w	r3, r3, #16
 8010844:	2b00      	cmp	r3, #0
 8010846:	d008      	beq.n	801085a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010848:	4b25      	ldr	r3, [pc, #148]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	f043 0310 	orr.w	r3, r3, #16
 8010850:	4a23      	ldr	r2, [pc, #140]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 8010852:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010854:	4b21      	ldr	r3, [pc, #132]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 8010856:	2210      	movs	r2, #16
 8010858:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801085a:	4b20      	ldr	r3, [pc, #128]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	f003 0320 	and.w	r3, r3, #32
 8010862:	2b00      	cmp	r3, #0
 8010864:	d008      	beq.n	8010878 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010866:	4b1e      	ldr	r3, [pc, #120]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 8010868:	69db      	ldr	r3, [r3, #28]
 801086a:	f043 0308 	orr.w	r3, r3, #8
 801086e:	4a1c      	ldr	r2, [pc, #112]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 8010870:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010872:	4b1a      	ldr	r3, [pc, #104]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 8010874:	2220      	movs	r2, #32
 8010876:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010878:	4b18      	ldr	r3, [pc, #96]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d008      	beq.n	8010896 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010884:	4b16      	ldr	r3, [pc, #88]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 8010886:	69db      	ldr	r3, [r3, #28]
 8010888:	f043 0304 	orr.w	r3, r3, #4
 801088c:	4a14      	ldr	r2, [pc, #80]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 801088e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010890:	4b12      	ldr	r3, [pc, #72]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 8010892:	2240      	movs	r2, #64	; 0x40
 8010894:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010896:	4b11      	ldr	r3, [pc, #68]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d008      	beq.n	80108b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80108a2:	4b0f      	ldr	r3, [pc, #60]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	f043 0302 	orr.w	r3, r3, #2
 80108aa:	4a0d      	ldr	r2, [pc, #52]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 80108ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80108ae:	4b0b      	ldr	r3, [pc, #44]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 80108b0:	2280      	movs	r2, #128	; 0x80
 80108b2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80108b4:	4b09      	ldr	r3, [pc, #36]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	f003 0302 	and.w	r3, r3, #2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d008      	beq.n	80108d2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80108c0:	4b07      	ldr	r3, [pc, #28]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 80108c2:	69db      	ldr	r3, [r3, #28]
 80108c4:	f043 0320 	orr.w	r3, r3, #32
 80108c8:	4a05      	ldr	r2, [pc, #20]	; (80108e0 <FLASH_SetErrorCode+0xa8>)
 80108ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80108cc:	4b03      	ldr	r3, [pc, #12]	; (80108dc <FLASH_SetErrorCode+0xa4>)
 80108ce:	2202      	movs	r2, #2
 80108d0:	60da      	str	r2, [r3, #12]
  }
}
 80108d2:	bf00      	nop
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	40023c00 	.word	0x40023c00
 80108e0:	20000e10 	.word	0x20000e10

080108e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80108ee:	2301      	movs	r3, #1
 80108f0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80108f2:	2300      	movs	r3, #0
 80108f4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80108f6:	4b31      	ldr	r3, [pc, #196]	; (80109bc <HAL_FLASHEx_Erase+0xd8>)
 80108f8:	7e1b      	ldrb	r3, [r3, #24]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d101      	bne.n	8010902 <HAL_FLASHEx_Erase+0x1e>
 80108fe:	2302      	movs	r3, #2
 8010900:	e058      	b.n	80109b4 <HAL_FLASHEx_Erase+0xd0>
 8010902:	4b2e      	ldr	r3, [pc, #184]	; (80109bc <HAL_FLASHEx_Erase+0xd8>)
 8010904:	2201      	movs	r2, #1
 8010906:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010908:	f24c 3050 	movw	r0, #50000	; 0xc350
 801090c:	f7ff ff54 	bl	80107b8 <FLASH_WaitForLastOperation>
 8010910:	4603      	mov	r3, r0
 8010912:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010914:	7bfb      	ldrb	r3, [r7, #15]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d148      	bne.n	80109ac <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	f04f 32ff 	mov.w	r2, #4294967295
 8010920:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b01      	cmp	r3, #1
 8010928:	d115      	bne.n	8010956 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	691b      	ldr	r3, [r3, #16]
 801092e:	b2da      	uxtb	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	4619      	mov	r1, r3
 8010936:	4610      	mov	r0, r2
 8010938:	f000 f844 	bl	80109c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801093c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010940:	f7ff ff3a 	bl	80107b8 <FLASH_WaitForLastOperation>
 8010944:	4603      	mov	r3, r0
 8010946:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010948:	4b1d      	ldr	r3, [pc, #116]	; (80109c0 <HAL_FLASHEx_Erase+0xdc>)
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	4a1c      	ldr	r2, [pc, #112]	; (80109c0 <HAL_FLASHEx_Erase+0xdc>)
 801094e:	f023 0304 	bic.w	r3, r3, #4
 8010952:	6113      	str	r3, [r2, #16]
 8010954:	e028      	b.n	80109a8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	60bb      	str	r3, [r7, #8]
 801095c:	e01c      	b.n	8010998 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	691b      	ldr	r3, [r3, #16]
 8010962:	b2db      	uxtb	r3, r3
 8010964:	4619      	mov	r1, r3
 8010966:	68b8      	ldr	r0, [r7, #8]
 8010968:	f000 f850 	bl	8010a0c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801096c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010970:	f7ff ff22 	bl	80107b8 <FLASH_WaitForLastOperation>
 8010974:	4603      	mov	r3, r0
 8010976:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010978:	4b11      	ldr	r3, [pc, #68]	; (80109c0 <HAL_FLASHEx_Erase+0xdc>)
 801097a:	691b      	ldr	r3, [r3, #16]
 801097c:	4a10      	ldr	r2, [pc, #64]	; (80109c0 <HAL_FLASHEx_Erase+0xdc>)
 801097e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010982:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d003      	beq.n	8010992 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	601a      	str	r2, [r3, #0]
          break;
 8010990:	e00a      	b.n	80109a8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	3301      	adds	r3, #1
 8010996:	60bb      	str	r3, [r7, #8]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68da      	ldr	r2, [r3, #12]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	4413      	add	r3, r2
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d3da      	bcc.n	801095e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80109a8:	f000 f878 	bl	8010a9c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80109ac:	4b03      	ldr	r3, [pc, #12]	; (80109bc <HAL_FLASHEx_Erase+0xd8>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	761a      	strb	r2, [r3, #24]

  return status;
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20000e10 	.word	0x20000e10
 80109c0:	40023c00 	.word	0x40023c00

080109c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	4603      	mov	r3, r0
 80109cc:	6039      	str	r1, [r7, #0]
 80109ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80109d0:	4b0d      	ldr	r3, [pc, #52]	; (8010a08 <FLASH_MassErase+0x44>)
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	4a0c      	ldr	r2, [pc, #48]	; (8010a08 <FLASH_MassErase+0x44>)
 80109d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80109dc:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <FLASH_MassErase+0x44>)
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	4a09      	ldr	r2, [pc, #36]	; (8010a08 <FLASH_MassErase+0x44>)
 80109e2:	f043 0304 	orr.w	r3, r3, #4
 80109e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80109e8:	4b07      	ldr	r3, [pc, #28]	; (8010a08 <FLASH_MassErase+0x44>)
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	021b      	lsls	r3, r3, #8
 80109f0:	4313      	orrs	r3, r2
 80109f2:	4a05      	ldr	r2, [pc, #20]	; (8010a08 <FLASH_MassErase+0x44>)
 80109f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80109f8:	6113      	str	r3, [r2, #16]
}
 80109fa:	bf00      	nop
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	40023c00 	.word	0x40023c00

08010a0c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010a1c:	78fb      	ldrb	r3, [r7, #3]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d102      	bne.n	8010a28 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	e010      	b.n	8010a4a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010a28:	78fb      	ldrb	r3, [r7, #3]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d103      	bne.n	8010a36 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	e009      	b.n	8010a4a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010a36:	78fb      	ldrb	r3, [r7, #3]
 8010a38:	2b02      	cmp	r3, #2
 8010a3a:	d103      	bne.n	8010a44 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	e002      	b.n	8010a4a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010a44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010a48:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010a4a:	4b13      	ldr	r3, [pc, #76]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	4a12      	ldr	r2, [pc, #72]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8010a56:	4b10      	ldr	r3, [pc, #64]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a58:	691a      	ldr	r2, [r3, #16]
 8010a5a:	490f      	ldr	r1, [pc, #60]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010a62:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	4a0c      	ldr	r2, [pc, #48]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010a6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010a6e:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a70:	691a      	ldr	r2, [r3, #16]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	00db      	lsls	r3, r3, #3
 8010a76:	4313      	orrs	r3, r2
 8010a78:	4a07      	ldr	r2, [pc, #28]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a7a:	f043 0302 	orr.w	r3, r3, #2
 8010a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010a80:	4b05      	ldr	r3, [pc, #20]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	4a04      	ldr	r2, [pc, #16]	; (8010a98 <FLASH_Erase_Sector+0x8c>)
 8010a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010a8a:	6113      	str	r3, [r2, #16]
}
 8010a8c:	bf00      	nop
 8010a8e:	3714      	adds	r7, #20
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr
 8010a98:	40023c00 	.word	0x40023c00

08010a9c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8010aa0:	4b20      	ldr	r3, [pc, #128]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d017      	beq.n	8010adc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010aac:	4b1d      	ldr	r3, [pc, #116]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a1c      	ldr	r2, [pc, #112]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010ab2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ab6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010ab8:	4b1a      	ldr	r3, [pc, #104]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a19      	ldr	r2, [pc, #100]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a16      	ldr	r2, [pc, #88]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ace:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010ad0:	4b14      	ldr	r3, [pc, #80]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4a13      	ldr	r2, [pc, #76]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010ada:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010adc:	4b11      	ldr	r3, [pc, #68]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d017      	beq.n	8010b18 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8010ae8:	4b0e      	ldr	r3, [pc, #56]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a0d      	ldr	r2, [pc, #52]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010af2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010af4:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a0a      	ldr	r2, [pc, #40]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010afe:	6013      	str	r3, [r2, #0]
 8010b00:	4b08      	ldr	r3, [pc, #32]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a07      	ldr	r2, [pc, #28]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010b0c:	4b05      	ldr	r3, [pc, #20]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a04      	ldr	r2, [pc, #16]	; (8010b24 <FLASH_FlushCaches+0x88>)
 8010b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010b16:	6013      	str	r3, [r2, #0]
  }
}
 8010b18:	bf00      	nop
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	40023c00 	.word	0x40023c00

08010b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b089      	sub	sp, #36	; 0x24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010b32:	2300      	movs	r3, #0
 8010b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010b36:	2300      	movs	r3, #0
 8010b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010b3e:	2300      	movs	r3, #0
 8010b40:	61fb      	str	r3, [r7, #28]
 8010b42:	e16b      	b.n	8010e1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010b44:	2201      	movs	r2, #1
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	fa02 f303 	lsl.w	r3, r2, r3
 8010b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	697a      	ldr	r2, [r7, #20]
 8010b54:	4013      	ands	r3, r2
 8010b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010b58:	693a      	ldr	r2, [r7, #16]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	f040 815a 	bne.w	8010e16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d00b      	beq.n	8010b82 <HAL_GPIO_Init+0x5a>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d007      	beq.n	8010b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b76:	2b11      	cmp	r3, #17
 8010b78:	d003      	beq.n	8010b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	2b12      	cmp	r3, #18
 8010b80:	d130      	bne.n	8010be4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	689b      	ldr	r3, [r3, #8]
 8010b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	2203      	movs	r2, #3
 8010b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b92:	43db      	mvns	r3, r3
 8010b94:	69ba      	ldr	r2, [r7, #24]
 8010b96:	4013      	ands	r3, r2
 8010b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	68da      	ldr	r2, [r3, #12]
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ba6:	69ba      	ldr	r2, [r7, #24]
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010bb8:	2201      	movs	r2, #1
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8010bc0:	43db      	mvns	r3, r3
 8010bc2:	69ba      	ldr	r2, [r7, #24]
 8010bc4:	4013      	ands	r3, r2
 8010bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	091b      	lsrs	r3, r3, #4
 8010bce:	f003 0201 	and.w	r2, r3, #1
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	69ba      	ldr	r2, [r7, #24]
 8010be2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	2203      	movs	r2, #3
 8010bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bf4:	43db      	mvns	r3, r3
 8010bf6:	69ba      	ldr	r2, [r7, #24]
 8010bf8:	4013      	ands	r3, r2
 8010bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	689a      	ldr	r2, [r3, #8]
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	005b      	lsls	r3, r3, #1
 8010c04:	fa02 f303 	lsl.w	r3, r2, r3
 8010c08:	69ba      	ldr	r2, [r7, #24]
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	2b02      	cmp	r3, #2
 8010c1a:	d003      	beq.n	8010c24 <HAL_GPIO_Init+0xfc>
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	2b12      	cmp	r3, #18
 8010c22:	d123      	bne.n	8010c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	08da      	lsrs	r2, r3, #3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	3208      	adds	r2, #8
 8010c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	f003 0307 	and.w	r3, r3, #7
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	220f      	movs	r2, #15
 8010c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c40:	43db      	mvns	r3, r3
 8010c42:	69ba      	ldr	r2, [r7, #24]
 8010c44:	4013      	ands	r3, r2
 8010c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	691a      	ldr	r2, [r3, #16]
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	f003 0307 	and.w	r3, r3, #7
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	fa02 f303 	lsl.w	r3, r2, r3
 8010c58:	69ba      	ldr	r2, [r7, #24]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	08da      	lsrs	r2, r3, #3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	3208      	adds	r2, #8
 8010c66:	69b9      	ldr	r1, [r7, #24]
 8010c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	005b      	lsls	r3, r3, #1
 8010c76:	2203      	movs	r2, #3
 8010c78:	fa02 f303 	lsl.w	r3, r2, r3
 8010c7c:	43db      	mvns	r3, r3
 8010c7e:	69ba      	ldr	r2, [r7, #24]
 8010c80:	4013      	ands	r3, r2
 8010c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	f003 0203 	and.w	r2, r3, #3
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	005b      	lsls	r3, r3, #1
 8010c90:	fa02 f303 	lsl.w	r3, r2, r3
 8010c94:	69ba      	ldr	r2, [r7, #24]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	69ba      	ldr	r2, [r7, #24]
 8010c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f000 80b4 	beq.w	8010e16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cae:	2300      	movs	r3, #0
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	4b5f      	ldr	r3, [pc, #380]	; (8010e30 <HAL_GPIO_Init+0x308>)
 8010cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb6:	4a5e      	ldr	r2, [pc, #376]	; (8010e30 <HAL_GPIO_Init+0x308>)
 8010cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8010cbe:	4b5c      	ldr	r3, [pc, #368]	; (8010e30 <HAL_GPIO_Init+0x308>)
 8010cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cc6:	60fb      	str	r3, [r7, #12]
 8010cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010cca:	4a5a      	ldr	r2, [pc, #360]	; (8010e34 <HAL_GPIO_Init+0x30c>)
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	089b      	lsrs	r3, r3, #2
 8010cd0:	3302      	adds	r3, #2
 8010cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	f003 0303 	and.w	r3, r3, #3
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	220f      	movs	r2, #15
 8010ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce6:	43db      	mvns	r3, r3
 8010ce8:	69ba      	ldr	r2, [r7, #24]
 8010cea:	4013      	ands	r3, r2
 8010cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4a51      	ldr	r2, [pc, #324]	; (8010e38 <HAL_GPIO_Init+0x310>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d02b      	beq.n	8010d4e <HAL_GPIO_Init+0x226>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4a50      	ldr	r2, [pc, #320]	; (8010e3c <HAL_GPIO_Init+0x314>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d025      	beq.n	8010d4a <HAL_GPIO_Init+0x222>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4a4f      	ldr	r2, [pc, #316]	; (8010e40 <HAL_GPIO_Init+0x318>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d01f      	beq.n	8010d46 <HAL_GPIO_Init+0x21e>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4a4e      	ldr	r2, [pc, #312]	; (8010e44 <HAL_GPIO_Init+0x31c>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d019      	beq.n	8010d42 <HAL_GPIO_Init+0x21a>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4a4d      	ldr	r2, [pc, #308]	; (8010e48 <HAL_GPIO_Init+0x320>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d013      	beq.n	8010d3e <HAL_GPIO_Init+0x216>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4a4c      	ldr	r2, [pc, #304]	; (8010e4c <HAL_GPIO_Init+0x324>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d00d      	beq.n	8010d3a <HAL_GPIO_Init+0x212>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4a4b      	ldr	r2, [pc, #300]	; (8010e50 <HAL_GPIO_Init+0x328>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d007      	beq.n	8010d36 <HAL_GPIO_Init+0x20e>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	4a4a      	ldr	r2, [pc, #296]	; (8010e54 <HAL_GPIO_Init+0x32c>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d101      	bne.n	8010d32 <HAL_GPIO_Init+0x20a>
 8010d2e:	2307      	movs	r3, #7
 8010d30:	e00e      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d32:	2308      	movs	r3, #8
 8010d34:	e00c      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d36:	2306      	movs	r3, #6
 8010d38:	e00a      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d3a:	2305      	movs	r3, #5
 8010d3c:	e008      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d3e:	2304      	movs	r3, #4
 8010d40:	e006      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d42:	2303      	movs	r3, #3
 8010d44:	e004      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d46:	2302      	movs	r3, #2
 8010d48:	e002      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e000      	b.n	8010d50 <HAL_GPIO_Init+0x228>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	69fa      	ldr	r2, [r7, #28]
 8010d52:	f002 0203 	and.w	r2, r2, #3
 8010d56:	0092      	lsls	r2, r2, #2
 8010d58:	4093      	lsls	r3, r2
 8010d5a:	69ba      	ldr	r2, [r7, #24]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010d60:	4934      	ldr	r1, [pc, #208]	; (8010e34 <HAL_GPIO_Init+0x30c>)
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	089b      	lsrs	r3, r3, #2
 8010d66:	3302      	adds	r3, #2
 8010d68:	69ba      	ldr	r2, [r7, #24]
 8010d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010d6e:	4b3a      	ldr	r3, [pc, #232]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	43db      	mvns	r3, r3
 8010d78:	69ba      	ldr	r2, [r7, #24]
 8010d7a:	4013      	ands	r3, r2
 8010d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010d8a:	69ba      	ldr	r2, [r7, #24]
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010d92:	4a31      	ldr	r2, [pc, #196]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010d98:	4b2f      	ldr	r3, [pc, #188]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	43db      	mvns	r3, r3
 8010da2:	69ba      	ldr	r2, [r7, #24]
 8010da4:	4013      	ands	r3, r2
 8010da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d003      	beq.n	8010dbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010dbc:	4a26      	ldr	r2, [pc, #152]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010dc2:	4b25      	ldr	r3, [pc, #148]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010dc4:	689b      	ldr	r3, [r3, #8]
 8010dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	43db      	mvns	r3, r3
 8010dcc:	69ba      	ldr	r2, [r7, #24]
 8010dce:	4013      	ands	r3, r2
 8010dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d003      	beq.n	8010de6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010dde:	69ba      	ldr	r2, [r7, #24]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010de6:	4a1c      	ldr	r2, [pc, #112]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010dec:	4b1a      	ldr	r3, [pc, #104]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	43db      	mvns	r3, r3
 8010df6:	69ba      	ldr	r2, [r7, #24]
 8010df8:	4013      	ands	r3, r2
 8010dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d003      	beq.n	8010e10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010e08:	69ba      	ldr	r2, [r7, #24]
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010e10:	4a11      	ldr	r2, [pc, #68]	; (8010e58 <HAL_GPIO_Init+0x330>)
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	3301      	adds	r3, #1
 8010e1a:	61fb      	str	r3, [r7, #28]
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	2b0f      	cmp	r3, #15
 8010e20:	f67f ae90 	bls.w	8010b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010e24:	bf00      	nop
 8010e26:	3724      	adds	r7, #36	; 0x24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	40023800 	.word	0x40023800
 8010e34:	40013800 	.word	0x40013800
 8010e38:	40020000 	.word	0x40020000
 8010e3c:	40020400 	.word	0x40020400
 8010e40:	40020800 	.word	0x40020800
 8010e44:	40020c00 	.word	0x40020c00
 8010e48:	40021000 	.word	0x40021000
 8010e4c:	40021400 	.word	0x40021400
 8010e50:	40021800 	.word	0x40021800
 8010e54:	40021c00 	.word	0x40021c00
 8010e58:	40013c00 	.word	0x40013c00

08010e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	807b      	strh	r3, [r7, #2]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010e6c:	787b      	ldrb	r3, [r7, #1]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d003      	beq.n	8010e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010e72:	887a      	ldrh	r2, [r7, #2]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010e78:	e003      	b.n	8010e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010e7a:	887b      	ldrh	r3, [r7, #2]
 8010e7c:	041a      	lsls	r2, r3, #16
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	619a      	str	r2, [r3, #24]
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
	...

08010e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e25b      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d075      	beq.n	8010f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010eae:	4ba3      	ldr	r3, [pc, #652]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	f003 030c 	and.w	r3, r3, #12
 8010eb6:	2b04      	cmp	r3, #4
 8010eb8:	d00c      	beq.n	8010ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010eba:	4ba0      	ldr	r3, [pc, #640]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010ec2:	2b08      	cmp	r3, #8
 8010ec4:	d112      	bne.n	8010eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010ec6:	4b9d      	ldr	r3, [pc, #628]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ed2:	d10b      	bne.n	8010eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ed4:	4b99      	ldr	r3, [pc, #612]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d05b      	beq.n	8010f98 <HAL_RCC_OscConfig+0x108>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d157      	bne.n	8010f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e236      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ef4:	d106      	bne.n	8010f04 <HAL_RCC_OscConfig+0x74>
 8010ef6:	4b91      	ldr	r3, [pc, #580]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a90      	ldr	r2, [pc, #576]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f00:	6013      	str	r3, [r2, #0]
 8010f02:	e01d      	b.n	8010f40 <HAL_RCC_OscConfig+0xb0>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010f0c:	d10c      	bne.n	8010f28 <HAL_RCC_OscConfig+0x98>
 8010f0e:	4b8b      	ldr	r3, [pc, #556]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a8a      	ldr	r2, [pc, #552]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f18:	6013      	str	r3, [r2, #0]
 8010f1a:	4b88      	ldr	r3, [pc, #544]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a87      	ldr	r2, [pc, #540]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f24:	6013      	str	r3, [r2, #0]
 8010f26:	e00b      	b.n	8010f40 <HAL_RCC_OscConfig+0xb0>
 8010f28:	4b84      	ldr	r3, [pc, #528]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a83      	ldr	r2, [pc, #524]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	4b81      	ldr	r3, [pc, #516]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a80      	ldr	r2, [pc, #512]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d013      	beq.n	8010f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010f48:	f7fe faa8 	bl	800f49c <HAL_GetTick>
 8010f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f4e:	e008      	b.n	8010f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010f50:	f7fe faa4 	bl	800f49c <HAL_GetTick>
 8010f54:	4602      	mov	r2, r0
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	2b64      	cmp	r3, #100	; 0x64
 8010f5c:	d901      	bls.n	8010f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	e1fb      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f62:	4b76      	ldr	r3, [pc, #472]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d0f0      	beq.n	8010f50 <HAL_RCC_OscConfig+0xc0>
 8010f6e:	e014      	b.n	8010f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010f70:	f7fe fa94 	bl	800f49c <HAL_GetTick>
 8010f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f76:	e008      	b.n	8010f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010f78:	f7fe fa90 	bl	800f49c <HAL_GetTick>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	2b64      	cmp	r3, #100	; 0x64
 8010f84:	d901      	bls.n	8010f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010f86:	2303      	movs	r3, #3
 8010f88:	e1e7      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f8a:	4b6c      	ldr	r3, [pc, #432]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1f0      	bne.n	8010f78 <HAL_RCC_OscConfig+0xe8>
 8010f96:	e000      	b.n	8010f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f003 0302 	and.w	r3, r3, #2
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d063      	beq.n	801106e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010fa6:	4b65      	ldr	r3, [pc, #404]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	f003 030c 	and.w	r3, r3, #12
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00b      	beq.n	8010fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010fb2:	4b62      	ldr	r3, [pc, #392]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010fba:	2b08      	cmp	r3, #8
 8010fbc:	d11c      	bne.n	8010ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010fbe:	4b5f      	ldr	r3, [pc, #380]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d116      	bne.n	8010ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fca:	4b5c      	ldr	r3, [pc, #368]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d005      	beq.n	8010fe2 <HAL_RCC_OscConfig+0x152>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d001      	beq.n	8010fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e1bb      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fe2:	4b56      	ldr	r3, [pc, #344]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	4952      	ldr	r1, [pc, #328]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010ff6:	e03a      	b.n	801106e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d020      	beq.n	8011042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011000:	4b4f      	ldr	r3, [pc, #316]	; (8011140 <HAL_RCC_OscConfig+0x2b0>)
 8011002:	2201      	movs	r2, #1
 8011004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011006:	f7fe fa49 	bl	800f49c <HAL_GetTick>
 801100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801100c:	e008      	b.n	8011020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801100e:	f7fe fa45 	bl	800f49c <HAL_GetTick>
 8011012:	4602      	mov	r2, r0
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	2b02      	cmp	r3, #2
 801101a:	d901      	bls.n	8011020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801101c:	2303      	movs	r3, #3
 801101e:	e19c      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011020:	4b46      	ldr	r3, [pc, #280]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f003 0302 	and.w	r3, r3, #2
 8011028:	2b00      	cmp	r3, #0
 801102a:	d0f0      	beq.n	801100e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801102c:	4b43      	ldr	r3, [pc, #268]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	691b      	ldr	r3, [r3, #16]
 8011038:	00db      	lsls	r3, r3, #3
 801103a:	4940      	ldr	r1, [pc, #256]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 801103c:	4313      	orrs	r3, r2
 801103e:	600b      	str	r3, [r1, #0]
 8011040:	e015      	b.n	801106e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011042:	4b3f      	ldr	r3, [pc, #252]	; (8011140 <HAL_RCC_OscConfig+0x2b0>)
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011048:	f7fe fa28 	bl	800f49c <HAL_GetTick>
 801104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801104e:	e008      	b.n	8011062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011050:	f7fe fa24 	bl	800f49c <HAL_GetTick>
 8011054:	4602      	mov	r2, r0
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	2b02      	cmp	r3, #2
 801105c:	d901      	bls.n	8011062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801105e:	2303      	movs	r3, #3
 8011060:	e17b      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011062:	4b36      	ldr	r3, [pc, #216]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f003 0302 	and.w	r3, r3, #2
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1f0      	bne.n	8011050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f003 0308 	and.w	r3, r3, #8
 8011076:	2b00      	cmp	r3, #0
 8011078:	d030      	beq.n	80110dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d016      	beq.n	80110b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011082:	4b30      	ldr	r3, [pc, #192]	; (8011144 <HAL_RCC_OscConfig+0x2b4>)
 8011084:	2201      	movs	r2, #1
 8011086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011088:	f7fe fa08 	bl	800f49c <HAL_GetTick>
 801108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801108e:	e008      	b.n	80110a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011090:	f7fe fa04 	bl	800f49c <HAL_GetTick>
 8011094:	4602      	mov	r2, r0
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	2b02      	cmp	r3, #2
 801109c:	d901      	bls.n	80110a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801109e:	2303      	movs	r3, #3
 80110a0:	e15b      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80110a2:	4b26      	ldr	r3, [pc, #152]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 80110a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110a6:	f003 0302 	and.w	r3, r3, #2
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0f0      	beq.n	8011090 <HAL_RCC_OscConfig+0x200>
 80110ae:	e015      	b.n	80110dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80110b0:	4b24      	ldr	r3, [pc, #144]	; (8011144 <HAL_RCC_OscConfig+0x2b4>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80110b6:	f7fe f9f1 	bl	800f49c <HAL_GetTick>
 80110ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110bc:	e008      	b.n	80110d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80110be:	f7fe f9ed 	bl	800f49c <HAL_GetTick>
 80110c2:	4602      	mov	r2, r0
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d901      	bls.n	80110d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80110cc:	2303      	movs	r3, #3
 80110ce:	e144      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110d0:	4b1a      	ldr	r3, [pc, #104]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 80110d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110d4:	f003 0302 	and.w	r3, r3, #2
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1f0      	bne.n	80110be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f003 0304 	and.w	r3, r3, #4
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 80a0 	beq.w	801122a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80110ea:	2300      	movs	r3, #0
 80110ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110ee:	4b13      	ldr	r3, [pc, #76]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10f      	bne.n	801111a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80110fa:	2300      	movs	r3, #0
 80110fc:	60bb      	str	r3, [r7, #8]
 80110fe:	4b0f      	ldr	r3, [pc, #60]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8011100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011102:	4a0e      	ldr	r2, [pc, #56]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 8011104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011108:	6413      	str	r3, [r2, #64]	; 0x40
 801110a:	4b0c      	ldr	r3, [pc, #48]	; (801113c <HAL_RCC_OscConfig+0x2ac>)
 801110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011112:	60bb      	str	r3, [r7, #8]
 8011114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011116:	2301      	movs	r3, #1
 8011118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801111a:	4b0b      	ldr	r3, [pc, #44]	; (8011148 <HAL_RCC_OscConfig+0x2b8>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011122:	2b00      	cmp	r3, #0
 8011124:	d121      	bne.n	801116a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011126:	4b08      	ldr	r3, [pc, #32]	; (8011148 <HAL_RCC_OscConfig+0x2b8>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a07      	ldr	r2, [pc, #28]	; (8011148 <HAL_RCC_OscConfig+0x2b8>)
 801112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011132:	f7fe f9b3 	bl	800f49c <HAL_GetTick>
 8011136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011138:	e011      	b.n	801115e <HAL_RCC_OscConfig+0x2ce>
 801113a:	bf00      	nop
 801113c:	40023800 	.word	0x40023800
 8011140:	42470000 	.word	0x42470000
 8011144:	42470e80 	.word	0x42470e80
 8011148:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801114c:	f7fe f9a6 	bl	800f49c <HAL_GetTick>
 8011150:	4602      	mov	r2, r0
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	2b02      	cmp	r3, #2
 8011158:	d901      	bls.n	801115e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801115a:	2303      	movs	r3, #3
 801115c:	e0fd      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801115e:	4b81      	ldr	r3, [pc, #516]	; (8011364 <HAL_RCC_OscConfig+0x4d4>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011166:	2b00      	cmp	r3, #0
 8011168:	d0f0      	beq.n	801114c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d106      	bne.n	8011180 <HAL_RCC_OscConfig+0x2f0>
 8011172:	4b7d      	ldr	r3, [pc, #500]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011176:	4a7c      	ldr	r2, [pc, #496]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011178:	f043 0301 	orr.w	r3, r3, #1
 801117c:	6713      	str	r3, [r2, #112]	; 0x70
 801117e:	e01c      	b.n	80111ba <HAL_RCC_OscConfig+0x32a>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	2b05      	cmp	r3, #5
 8011186:	d10c      	bne.n	80111a2 <HAL_RCC_OscConfig+0x312>
 8011188:	4b77      	ldr	r3, [pc, #476]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801118a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801118c:	4a76      	ldr	r2, [pc, #472]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801118e:	f043 0304 	orr.w	r3, r3, #4
 8011192:	6713      	str	r3, [r2, #112]	; 0x70
 8011194:	4b74      	ldr	r3, [pc, #464]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011198:	4a73      	ldr	r2, [pc, #460]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801119a:	f043 0301 	orr.w	r3, r3, #1
 801119e:	6713      	str	r3, [r2, #112]	; 0x70
 80111a0:	e00b      	b.n	80111ba <HAL_RCC_OscConfig+0x32a>
 80111a2:	4b71      	ldr	r3, [pc, #452]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80111a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a6:	4a70      	ldr	r2, [pc, #448]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80111a8:	f023 0301 	bic.w	r3, r3, #1
 80111ac:	6713      	str	r3, [r2, #112]	; 0x70
 80111ae:	4b6e      	ldr	r3, [pc, #440]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80111b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b2:	4a6d      	ldr	r2, [pc, #436]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80111b4:	f023 0304 	bic.w	r3, r3, #4
 80111b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d015      	beq.n	80111ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111c2:	f7fe f96b 	bl	800f49c <HAL_GetTick>
 80111c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111c8:	e00a      	b.n	80111e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111ca:	f7fe f967 	bl	800f49c <HAL_GetTick>
 80111ce:	4602      	mov	r2, r0
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80111d8:	4293      	cmp	r3, r2
 80111da:	d901      	bls.n	80111e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80111dc:	2303      	movs	r3, #3
 80111de:	e0bc      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111e0:	4b61      	ldr	r3, [pc, #388]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80111e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e4:	f003 0302 	and.w	r3, r3, #2
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0ee      	beq.n	80111ca <HAL_RCC_OscConfig+0x33a>
 80111ec:	e014      	b.n	8011218 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80111ee:	f7fe f955 	bl	800f49c <HAL_GetTick>
 80111f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111f4:	e00a      	b.n	801120c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80111f6:	f7fe f951 	bl	800f49c <HAL_GetTick>
 80111fa:	4602      	mov	r2, r0
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	f241 3288 	movw	r2, #5000	; 0x1388
 8011204:	4293      	cmp	r3, r2
 8011206:	d901      	bls.n	801120c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011208:	2303      	movs	r3, #3
 801120a:	e0a6      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801120c:	4b56      	ldr	r3, [pc, #344]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011210:	f003 0302 	and.w	r3, r3, #2
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1ee      	bne.n	80111f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011218:	7dfb      	ldrb	r3, [r7, #23]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d105      	bne.n	801122a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801121e:	4b52      	ldr	r3, [pc, #328]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011222:	4a51      	ldr	r2, [pc, #324]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f000 8092 	beq.w	8011358 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011234:	4b4c      	ldr	r3, [pc, #304]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	f003 030c 	and.w	r3, r3, #12
 801123c:	2b08      	cmp	r3, #8
 801123e:	d05c      	beq.n	80112fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	699b      	ldr	r3, [r3, #24]
 8011244:	2b02      	cmp	r3, #2
 8011246:	d141      	bne.n	80112cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011248:	4b48      	ldr	r3, [pc, #288]	; (801136c <HAL_RCC_OscConfig+0x4dc>)
 801124a:	2200      	movs	r2, #0
 801124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801124e:	f7fe f925 	bl	800f49c <HAL_GetTick>
 8011252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011254:	e008      	b.n	8011268 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011256:	f7fe f921 	bl	800f49c <HAL_GetTick>
 801125a:	4602      	mov	r2, r0
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	1ad3      	subs	r3, r2, r3
 8011260:	2b02      	cmp	r3, #2
 8011262:	d901      	bls.n	8011268 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8011264:	2303      	movs	r3, #3
 8011266:	e078      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011268:	4b3f      	ldr	r3, [pc, #252]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1f0      	bne.n	8011256 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	69da      	ldr	r2, [r3, #28]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6a1b      	ldr	r3, [r3, #32]
 801127c:	431a      	orrs	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011282:	019b      	lsls	r3, r3, #6
 8011284:	431a      	orrs	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801128a:	085b      	lsrs	r3, r3, #1
 801128c:	3b01      	subs	r3, #1
 801128e:	041b      	lsls	r3, r3, #16
 8011290:	431a      	orrs	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011296:	061b      	lsls	r3, r3, #24
 8011298:	4933      	ldr	r1, [pc, #204]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 801129a:	4313      	orrs	r3, r2
 801129c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801129e:	4b33      	ldr	r3, [pc, #204]	; (801136c <HAL_RCC_OscConfig+0x4dc>)
 80112a0:	2201      	movs	r2, #1
 80112a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112a4:	f7fe f8fa 	bl	800f49c <HAL_GetTick>
 80112a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112aa:	e008      	b.n	80112be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112ac:	f7fe f8f6 	bl	800f49c <HAL_GetTick>
 80112b0:	4602      	mov	r2, r0
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d901      	bls.n	80112be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80112ba:	2303      	movs	r3, #3
 80112bc:	e04d      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112be:	4b2a      	ldr	r3, [pc, #168]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d0f0      	beq.n	80112ac <HAL_RCC_OscConfig+0x41c>
 80112ca:	e045      	b.n	8011358 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112cc:	4b27      	ldr	r3, [pc, #156]	; (801136c <HAL_RCC_OscConfig+0x4dc>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112d2:	f7fe f8e3 	bl	800f49c <HAL_GetTick>
 80112d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112d8:	e008      	b.n	80112ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112da:	f7fe f8df 	bl	800f49c <HAL_GetTick>
 80112de:	4602      	mov	r2, r0
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	d901      	bls.n	80112ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80112e8:	2303      	movs	r3, #3
 80112ea:	e036      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112ec:	4b1e      	ldr	r3, [pc, #120]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d1f0      	bne.n	80112da <HAL_RCC_OscConfig+0x44a>
 80112f8:	e02e      	b.n	8011358 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	699b      	ldr	r3, [r3, #24]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d101      	bne.n	8011306 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8011302:	2301      	movs	r3, #1
 8011304:	e029      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011306:	4b18      	ldr	r3, [pc, #96]	; (8011368 <HAL_RCC_OscConfig+0x4d8>)
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	69db      	ldr	r3, [r3, #28]
 8011316:	429a      	cmp	r2, r3
 8011318:	d11c      	bne.n	8011354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011324:	429a      	cmp	r2, r3
 8011326:	d115      	bne.n	8011354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801132e:	4013      	ands	r3, r2
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011334:	4293      	cmp	r3, r2
 8011336:	d10d      	bne.n	8011354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011342:	429a      	cmp	r2, r3
 8011344:	d106      	bne.n	8011354 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011350:	429a      	cmp	r2, r3
 8011352:	d001      	beq.n	8011358 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
 8011356:	e000      	b.n	801135a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3718      	adds	r7, #24
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	40007000 	.word	0x40007000
 8011368:	40023800 	.word	0x40023800
 801136c:	42470060 	.word	0x42470060

08011370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d101      	bne.n	8011384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011380:	2301      	movs	r3, #1
 8011382:	e0cc      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011384:	4b68      	ldr	r3, [pc, #416]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f003 030f 	and.w	r3, r3, #15
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d90c      	bls.n	80113ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011392:	4b65      	ldr	r3, [pc, #404]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	b2d2      	uxtb	r2, r2
 8011398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801139a:	4b63      	ldr	r3, [pc, #396]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 030f 	and.w	r3, r3, #15
 80113a2:	683a      	ldr	r2, [r7, #0]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d001      	beq.n	80113ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e0b8      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 0302 	and.w	r3, r3, #2
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d020      	beq.n	80113fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0304 	and.w	r3, r3, #4
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d005      	beq.n	80113d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80113c4:	4b59      	ldr	r3, [pc, #356]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	4a58      	ldr	r2, [pc, #352]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80113ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f003 0308 	and.w	r3, r3, #8
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d005      	beq.n	80113e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80113dc:	4b53      	ldr	r3, [pc, #332]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	4a52      	ldr	r2, [pc, #328]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80113e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80113e8:	4b50      	ldr	r3, [pc, #320]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113ea:	689b      	ldr	r3, [r3, #8]
 80113ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	494d      	ldr	r1, [pc, #308]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80113f6:	4313      	orrs	r3, r2
 80113f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 0301 	and.w	r3, r3, #1
 8011402:	2b00      	cmp	r3, #0
 8011404:	d044      	beq.n	8011490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d107      	bne.n	801141e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801140e:	4b47      	ldr	r3, [pc, #284]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011416:	2b00      	cmp	r3, #0
 8011418:	d119      	bne.n	801144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	e07f      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	2b02      	cmp	r3, #2
 8011424:	d003      	beq.n	801142e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801142a:	2b03      	cmp	r3, #3
 801142c:	d107      	bne.n	801143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801142e:	4b3f      	ldr	r3, [pc, #252]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011436:	2b00      	cmp	r3, #0
 8011438:	d109      	bne.n	801144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801143a:	2301      	movs	r3, #1
 801143c:	e06f      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801143e:	4b3b      	ldr	r3, [pc, #236]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	f003 0302 	and.w	r3, r3, #2
 8011446:	2b00      	cmp	r3, #0
 8011448:	d101      	bne.n	801144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801144a:	2301      	movs	r3, #1
 801144c:	e067      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801144e:	4b37      	ldr	r3, [pc, #220]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 8011450:	689b      	ldr	r3, [r3, #8]
 8011452:	f023 0203 	bic.w	r2, r3, #3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	4934      	ldr	r1, [pc, #208]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 801145c:	4313      	orrs	r3, r2
 801145e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011460:	f7fe f81c 	bl	800f49c <HAL_GetTick>
 8011464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011466:	e00a      	b.n	801147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011468:	f7fe f818 	bl	800f49c <HAL_GetTick>
 801146c:	4602      	mov	r2, r0
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	1ad3      	subs	r3, r2, r3
 8011472:	f241 3288 	movw	r2, #5000	; 0x1388
 8011476:	4293      	cmp	r3, r2
 8011478:	d901      	bls.n	801147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801147a:	2303      	movs	r3, #3
 801147c:	e04f      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801147e:	4b2b      	ldr	r3, [pc, #172]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 8011480:	689b      	ldr	r3, [r3, #8]
 8011482:	f003 020c 	and.w	r2, r3, #12
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	429a      	cmp	r2, r3
 801148e:	d1eb      	bne.n	8011468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011490:	4b25      	ldr	r3, [pc, #148]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f003 030f 	and.w	r3, r3, #15
 8011498:	683a      	ldr	r2, [r7, #0]
 801149a:	429a      	cmp	r2, r3
 801149c:	d20c      	bcs.n	80114b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801149e:	4b22      	ldr	r3, [pc, #136]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	b2d2      	uxtb	r2, r2
 80114a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80114a6:	4b20      	ldr	r3, [pc, #128]	; (8011528 <HAL_RCC_ClockConfig+0x1b8>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f003 030f 	and.w	r3, r3, #15
 80114ae:	683a      	ldr	r2, [r7, #0]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d001      	beq.n	80114b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80114b4:	2301      	movs	r3, #1
 80114b6:	e032      	b.n	801151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f003 0304 	and.w	r3, r3, #4
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d008      	beq.n	80114d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80114c4:	4b19      	ldr	r3, [pc, #100]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	4916      	ldr	r1, [pc, #88]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80114d2:	4313      	orrs	r3, r2
 80114d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f003 0308 	and.w	r3, r3, #8
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d009      	beq.n	80114f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80114e2:	4b12      	ldr	r3, [pc, #72]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	490e      	ldr	r1, [pc, #56]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80114f2:	4313      	orrs	r3, r2
 80114f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80114f6:	f000 f821 	bl	801153c <HAL_RCC_GetSysClockFreq>
 80114fa:	4601      	mov	r1, r0
 80114fc:	4b0b      	ldr	r3, [pc, #44]	; (801152c <HAL_RCC_ClockConfig+0x1bc>)
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	091b      	lsrs	r3, r3, #4
 8011502:	f003 030f 	and.w	r3, r3, #15
 8011506:	4a0a      	ldr	r2, [pc, #40]	; (8011530 <HAL_RCC_ClockConfig+0x1c0>)
 8011508:	5cd3      	ldrb	r3, [r2, r3]
 801150a:	fa21 f303 	lsr.w	r3, r1, r3
 801150e:	4a09      	ldr	r2, [pc, #36]	; (8011534 <HAL_RCC_ClockConfig+0x1c4>)
 8011510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011512:	4b09      	ldr	r3, [pc, #36]	; (8011538 <HAL_RCC_ClockConfig+0x1c8>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fd ff7c 	bl	800f414 <HAL_InitTick>

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	40023c00 	.word	0x40023c00
 801152c:	40023800 	.word	0x40023800
 8011530:	080198bc 	.word	0x080198bc
 8011534:	2000001c 	.word	0x2000001c
 8011538:	20000020 	.word	0x20000020

0801153c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011542:	2300      	movs	r3, #0
 8011544:	607b      	str	r3, [r7, #4]
 8011546:	2300      	movs	r3, #0
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	2300      	movs	r3, #0
 801154c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801154e:	2300      	movs	r3, #0
 8011550:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011552:	4b63      	ldr	r3, [pc, #396]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	f003 030c 	and.w	r3, r3, #12
 801155a:	2b04      	cmp	r3, #4
 801155c:	d007      	beq.n	801156e <HAL_RCC_GetSysClockFreq+0x32>
 801155e:	2b08      	cmp	r3, #8
 8011560:	d008      	beq.n	8011574 <HAL_RCC_GetSysClockFreq+0x38>
 8011562:	2b00      	cmp	r3, #0
 8011564:	f040 80b4 	bne.w	80116d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011568:	4b5e      	ldr	r3, [pc, #376]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801156a:	60bb      	str	r3, [r7, #8]
       break;
 801156c:	e0b3      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801156e:	4b5e      	ldr	r3, [pc, #376]	; (80116e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8011570:	60bb      	str	r3, [r7, #8]
      break;
 8011572:	e0b0      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011574:	4b5a      	ldr	r3, [pc, #360]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801157c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801157e:	4b58      	ldr	r3, [pc, #352]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011586:	2b00      	cmp	r3, #0
 8011588:	d04a      	beq.n	8011620 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801158a:	4b55      	ldr	r3, [pc, #340]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	099b      	lsrs	r3, r3, #6
 8011590:	f04f 0400 	mov.w	r4, #0
 8011594:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011598:	f04f 0200 	mov.w	r2, #0
 801159c:	ea03 0501 	and.w	r5, r3, r1
 80115a0:	ea04 0602 	and.w	r6, r4, r2
 80115a4:	4629      	mov	r1, r5
 80115a6:	4632      	mov	r2, r6
 80115a8:	f04f 0300 	mov.w	r3, #0
 80115ac:	f04f 0400 	mov.w	r4, #0
 80115b0:	0154      	lsls	r4, r2, #5
 80115b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80115b6:	014b      	lsls	r3, r1, #5
 80115b8:	4619      	mov	r1, r3
 80115ba:	4622      	mov	r2, r4
 80115bc:	1b49      	subs	r1, r1, r5
 80115be:	eb62 0206 	sbc.w	r2, r2, r6
 80115c2:	f04f 0300 	mov.w	r3, #0
 80115c6:	f04f 0400 	mov.w	r4, #0
 80115ca:	0194      	lsls	r4, r2, #6
 80115cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80115d0:	018b      	lsls	r3, r1, #6
 80115d2:	1a5b      	subs	r3, r3, r1
 80115d4:	eb64 0402 	sbc.w	r4, r4, r2
 80115d8:	f04f 0100 	mov.w	r1, #0
 80115dc:	f04f 0200 	mov.w	r2, #0
 80115e0:	00e2      	lsls	r2, r4, #3
 80115e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80115e6:	00d9      	lsls	r1, r3, #3
 80115e8:	460b      	mov	r3, r1
 80115ea:	4614      	mov	r4, r2
 80115ec:	195b      	adds	r3, r3, r5
 80115ee:	eb44 0406 	adc.w	r4, r4, r6
 80115f2:	f04f 0100 	mov.w	r1, #0
 80115f6:	f04f 0200 	mov.w	r2, #0
 80115fa:	0262      	lsls	r2, r4, #9
 80115fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8011600:	0259      	lsls	r1, r3, #9
 8011602:	460b      	mov	r3, r1
 8011604:	4614      	mov	r4, r2
 8011606:	4618      	mov	r0, r3
 8011608:	4621      	mov	r1, r4
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f04f 0400 	mov.w	r4, #0
 8011610:	461a      	mov	r2, r3
 8011612:	4623      	mov	r3, r4
 8011614:	f7f7 fa70 	bl	8008af8 <__aeabi_uldivmod>
 8011618:	4603      	mov	r3, r0
 801161a:	460c      	mov	r4, r1
 801161c:	60fb      	str	r3, [r7, #12]
 801161e:	e049      	b.n	80116b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011620:	4b2f      	ldr	r3, [pc, #188]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	099b      	lsrs	r3, r3, #6
 8011626:	f04f 0400 	mov.w	r4, #0
 801162a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801162e:	f04f 0200 	mov.w	r2, #0
 8011632:	ea03 0501 	and.w	r5, r3, r1
 8011636:	ea04 0602 	and.w	r6, r4, r2
 801163a:	4629      	mov	r1, r5
 801163c:	4632      	mov	r2, r6
 801163e:	f04f 0300 	mov.w	r3, #0
 8011642:	f04f 0400 	mov.w	r4, #0
 8011646:	0154      	lsls	r4, r2, #5
 8011648:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801164c:	014b      	lsls	r3, r1, #5
 801164e:	4619      	mov	r1, r3
 8011650:	4622      	mov	r2, r4
 8011652:	1b49      	subs	r1, r1, r5
 8011654:	eb62 0206 	sbc.w	r2, r2, r6
 8011658:	f04f 0300 	mov.w	r3, #0
 801165c:	f04f 0400 	mov.w	r4, #0
 8011660:	0194      	lsls	r4, r2, #6
 8011662:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011666:	018b      	lsls	r3, r1, #6
 8011668:	1a5b      	subs	r3, r3, r1
 801166a:	eb64 0402 	sbc.w	r4, r4, r2
 801166e:	f04f 0100 	mov.w	r1, #0
 8011672:	f04f 0200 	mov.w	r2, #0
 8011676:	00e2      	lsls	r2, r4, #3
 8011678:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801167c:	00d9      	lsls	r1, r3, #3
 801167e:	460b      	mov	r3, r1
 8011680:	4614      	mov	r4, r2
 8011682:	195b      	adds	r3, r3, r5
 8011684:	eb44 0406 	adc.w	r4, r4, r6
 8011688:	f04f 0100 	mov.w	r1, #0
 801168c:	f04f 0200 	mov.w	r2, #0
 8011690:	02a2      	lsls	r2, r4, #10
 8011692:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011696:	0299      	lsls	r1, r3, #10
 8011698:	460b      	mov	r3, r1
 801169a:	4614      	mov	r4, r2
 801169c:	4618      	mov	r0, r3
 801169e:	4621      	mov	r1, r4
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f04f 0400 	mov.w	r4, #0
 80116a6:	461a      	mov	r2, r3
 80116a8:	4623      	mov	r3, r4
 80116aa:	f7f7 fa25 	bl	8008af8 <__aeabi_uldivmod>
 80116ae:	4603      	mov	r3, r0
 80116b0:	460c      	mov	r4, r1
 80116b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80116b4:	4b0a      	ldr	r3, [pc, #40]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	0c1b      	lsrs	r3, r3, #16
 80116ba:	f003 0303 	and.w	r3, r3, #3
 80116be:	3301      	adds	r3, #1
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80116c4:	68fa      	ldr	r2, [r7, #12]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116cc:	60bb      	str	r3, [r7, #8]
      break;
 80116ce:	e002      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80116d0:	4b04      	ldr	r3, [pc, #16]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80116d2:	60bb      	str	r3, [r7, #8]
      break;
 80116d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80116d6:	68bb      	ldr	r3, [r7, #8]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3714      	adds	r7, #20
 80116dc:	46bd      	mov	sp, r7
 80116de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e0:	40023800 	.word	0x40023800
 80116e4:	00f42400 	.word	0x00f42400
 80116e8:	007a1200 	.word	0x007a1200

080116ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80116f0:	4b03      	ldr	r3, [pc, #12]	; (8011700 <HAL_RCC_GetHCLKFreq+0x14>)
 80116f2:	681b      	ldr	r3, [r3, #0]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	2000001c 	.word	0x2000001c

08011704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011708:	f7ff fff0 	bl	80116ec <HAL_RCC_GetHCLKFreq>
 801170c:	4601      	mov	r1, r0
 801170e:	4b05      	ldr	r3, [pc, #20]	; (8011724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	0a9b      	lsrs	r3, r3, #10
 8011714:	f003 0307 	and.w	r3, r3, #7
 8011718:	4a03      	ldr	r2, [pc, #12]	; (8011728 <HAL_RCC_GetPCLK1Freq+0x24>)
 801171a:	5cd3      	ldrb	r3, [r2, r3]
 801171c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011720:	4618      	mov	r0, r3
 8011722:	bd80      	pop	{r7, pc}
 8011724:	40023800 	.word	0x40023800
 8011728:	080198cc 	.word	0x080198cc

0801172c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011730:	f7ff ffdc 	bl	80116ec <HAL_RCC_GetHCLKFreq>
 8011734:	4601      	mov	r1, r0
 8011736:	4b05      	ldr	r3, [pc, #20]	; (801174c <HAL_RCC_GetPCLK2Freq+0x20>)
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	0b5b      	lsrs	r3, r3, #13
 801173c:	f003 0307 	and.w	r3, r3, #7
 8011740:	4a03      	ldr	r2, [pc, #12]	; (8011750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011742:	5cd3      	ldrb	r3, [r2, r3]
 8011744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011748:	4618      	mov	r0, r3
 801174a:	bd80      	pop	{r7, pc}
 801174c:	40023800 	.word	0x40023800
 8011750:	080198cc 	.word	0x080198cc

08011754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d101      	bne.n	8011766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011762:	2301      	movs	r3, #1
 8011764:	e056      	b.n	8011814 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d106      	bne.n	8011786 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7fc fec1 	bl	800e508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2202      	movs	r2, #2
 801178a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801179c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685a      	ldr	r2, [r3, #4]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	431a      	orrs	r2, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	431a      	orrs	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	431a      	orrs	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	695b      	ldr	r3, [r3, #20]
 80117b8:	431a      	orrs	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	699b      	ldr	r3, [r3, #24]
 80117be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117c2:	431a      	orrs	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	69db      	ldr	r3, [r3, #28]
 80117c8:	431a      	orrs	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a1b      	ldr	r3, [r3, #32]
 80117ce:	ea42 0103 	orr.w	r1, r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	430a      	orrs	r2, r1
 80117dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	699b      	ldr	r3, [r3, #24]
 80117e2:	0c1b      	lsrs	r3, r3, #16
 80117e4:	f003 0104 	and.w	r1, r3, #4
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	430a      	orrs	r2, r1
 80117f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	69da      	ldr	r2, [r3, #28]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2201      	movs	r2, #1
 801180e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b088      	sub	sp, #32
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	603b      	str	r3, [r7, #0]
 8011828:	4613      	mov	r3, r2
 801182a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801182c:	2300      	movs	r3, #0
 801182e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011836:	2b01      	cmp	r3, #1
 8011838:	d101      	bne.n	801183e <HAL_SPI_Transmit+0x22>
 801183a:	2302      	movs	r3, #2
 801183c:	e11e      	b.n	8011a7c <HAL_SPI_Transmit+0x260>
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2201      	movs	r2, #1
 8011842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011846:	f7fd fe29 	bl	800f49c <HAL_GetTick>
 801184a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801184c:	88fb      	ldrh	r3, [r7, #6]
 801184e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b01      	cmp	r3, #1
 801185a:	d002      	beq.n	8011862 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801185c:	2302      	movs	r3, #2
 801185e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011860:	e103      	b.n	8011a6a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d002      	beq.n	801186e <HAL_SPI_Transmit+0x52>
 8011868:	88fb      	ldrh	r3, [r7, #6]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011872:	e0fa      	b.n	8011a6a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2203      	movs	r2, #3
 8011878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	2200      	movs	r2, #0
 8011880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	88fa      	ldrh	r2, [r7, #6]
 801188c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	88fa      	ldrh	r2, [r7, #6]
 8011892:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2200      	movs	r2, #0
 8011898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2200      	movs	r2, #0
 801189e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2200      	movs	r2, #0
 80118aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2200      	movs	r2, #0
 80118b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	689b      	ldr	r3, [r3, #8]
 80118b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118ba:	d107      	bne.n	80118cc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80118ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118d6:	2b40      	cmp	r3, #64	; 0x40
 80118d8:	d007      	beq.n	80118ea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118f2:	d14b      	bne.n	801198c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <HAL_SPI_Transmit+0xe6>
 80118fc:	8afb      	ldrh	r3, [r7, #22]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d13e      	bne.n	8011980 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011906:	881a      	ldrh	r2, [r3, #0]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011912:	1c9a      	adds	r2, r3, #2
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801191c:	b29b      	uxth	r3, r3
 801191e:	3b01      	subs	r3, #1
 8011920:	b29a      	uxth	r2, r3
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011926:	e02b      	b.n	8011980 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	f003 0302 	and.w	r3, r3, #2
 8011932:	2b02      	cmp	r3, #2
 8011934:	d112      	bne.n	801195c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801193a:	881a      	ldrh	r2, [r3, #0]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011946:	1c9a      	adds	r2, r3, #2
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011950:	b29b      	uxth	r3, r3
 8011952:	3b01      	subs	r3, #1
 8011954:	b29a      	uxth	r2, r3
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	86da      	strh	r2, [r3, #54]	; 0x36
 801195a:	e011      	b.n	8011980 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801195c:	f7fd fd9e 	bl	800f49c <HAL_GetTick>
 8011960:	4602      	mov	r2, r0
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	683a      	ldr	r2, [r7, #0]
 8011968:	429a      	cmp	r2, r3
 801196a:	d803      	bhi.n	8011974 <HAL_SPI_Transmit+0x158>
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011972:	d102      	bne.n	801197a <HAL_SPI_Transmit+0x15e>
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d102      	bne.n	8011980 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801197a:	2303      	movs	r3, #3
 801197c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801197e:	e074      	b.n	8011a6a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011984:	b29b      	uxth	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1ce      	bne.n	8011928 <HAL_SPI_Transmit+0x10c>
 801198a:	e04c      	b.n	8011a26 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <HAL_SPI_Transmit+0x17e>
 8011994:	8afb      	ldrh	r3, [r7, #22]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d140      	bne.n	8011a1c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	330c      	adds	r3, #12
 80119a4:	7812      	ldrb	r2, [r2, #0]
 80119a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	3b01      	subs	r3, #1
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80119c0:	e02c      	b.n	8011a1c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	f003 0302 	and.w	r3, r3, #2
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d113      	bne.n	80119f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	330c      	adds	r3, #12
 80119da:	7812      	ldrb	r2, [r2, #0]
 80119dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80119f6:	e011      	b.n	8011a1c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80119f8:	f7fd fd50 	bl	800f49c <HAL_GetTick>
 80119fc:	4602      	mov	r2, r0
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d803      	bhi.n	8011a10 <HAL_SPI_Transmit+0x1f4>
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a0e:	d102      	bne.n	8011a16 <HAL_SPI_Transmit+0x1fa>
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8011a16:	2303      	movs	r3, #3
 8011a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011a1a:	e026      	b.n	8011a6a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1cd      	bne.n	80119c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011a26:	69ba      	ldr	r2, [r7, #24]
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f000 fba4 	bl	8012178 <SPI_EndRxTxTransaction>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d002      	beq.n	8011a3c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2220      	movs	r2, #32
 8011a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10a      	bne.n	8011a5a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a44:	2300      	movs	r3, #0
 8011a46:	613b      	str	r3, [r7, #16]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	613b      	str	r3, [r7, #16]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	613b      	str	r3, [r7, #16]
 8011a58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8011a62:	2301      	movs	r3, #1
 8011a64:	77fb      	strb	r3, [r7, #31]
 8011a66:	e000      	b.n	8011a6a <HAL_SPI_Transmit+0x24e>
  }

error:
 8011a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2200      	movs	r2, #0
 8011a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3720      	adds	r7, #32
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b088      	sub	sp, #32
 8011a88:	af02      	add	r7, sp, #8
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	603b      	str	r3, [r7, #0]
 8011a90:	4613      	mov	r3, r2
 8011a92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011a94:	2300      	movs	r3, #0
 8011a96:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011aa0:	d112      	bne.n	8011ac8 <HAL_SPI_Receive+0x44>
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d10e      	bne.n	8011ac8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2204      	movs	r2, #4
 8011aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011ab2:	88fa      	ldrh	r2, [r7, #6]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	68ba      	ldr	r2, [r7, #8]
 8011abc:	68b9      	ldr	r1, [r7, #8]
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f000 f8e9 	bl	8011c96 <HAL_SPI_TransmitReceive>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	e0e2      	b.n	8011c8e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d101      	bne.n	8011ad6 <HAL_SPI_Receive+0x52>
 8011ad2:	2302      	movs	r3, #2
 8011ad4:	e0db      	b.n	8011c8e <HAL_SPI_Receive+0x20a>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011ade:	f7fd fcdd 	bl	800f49c <HAL_GetTick>
 8011ae2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d002      	beq.n	8011af6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011af0:	2302      	movs	r3, #2
 8011af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011af4:	e0c2      	b.n	8011c7c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d002      	beq.n	8011b02 <HAL_SPI_Receive+0x7e>
 8011afc:	88fb      	ldrh	r3, [r7, #6]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d102      	bne.n	8011b08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011b02:	2301      	movs	r3, #1
 8011b04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011b06:	e0b9      	b.n	8011c7c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2200      	movs	r2, #0
 8011b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	88fa      	ldrh	r2, [r7, #6]
 8011b20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	88fa      	ldrh	r2, [r7, #6]
 8011b26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2200      	movs	r2, #0
 8011b32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	689b      	ldr	r3, [r3, #8]
 8011b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b4e:	d107      	bne.n	8011b60 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011b5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b6a:	2b40      	cmp	r3, #64	; 0x40
 8011b6c:	d007      	beq.n	8011b7e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d162      	bne.n	8011c4c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011b86:	e02e      	b.n	8011be6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	f003 0301 	and.w	r3, r3, #1
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d115      	bne.n	8011bc2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f103 020c 	add.w	r2, r3, #12
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba2:	7812      	ldrb	r2, [r2, #0]
 8011ba4:	b2d2      	uxtb	r2, r2
 8011ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bac:	1c5a      	adds	r2, r3, #1
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011bc0:	e011      	b.n	8011be6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011bc2:	f7fd fc6b 	bl	800f49c <HAL_GetTick>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d803      	bhi.n	8011bda <HAL_SPI_Receive+0x156>
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd8:	d102      	bne.n	8011be0 <HAL_SPI_Receive+0x15c>
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d102      	bne.n	8011be6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8011be0:	2303      	movs	r3, #3
 8011be2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011be4:	e04a      	b.n	8011c7c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d1cb      	bne.n	8011b88 <HAL_SPI_Receive+0x104>
 8011bf0:	e031      	b.n	8011c56 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d113      	bne.n	8011c28 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68da      	ldr	r2, [r3, #12]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c0a:	b292      	uxth	r2, r2
 8011c0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c12:	1c9a      	adds	r2, r3, #2
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c26:	e011      	b.n	8011c4c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c28:	f7fd fc38 	bl	800f49c <HAL_GetTick>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	683a      	ldr	r2, [r7, #0]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d803      	bhi.n	8011c40 <HAL_SPI_Receive+0x1bc>
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3e:	d102      	bne.n	8011c46 <HAL_SPI_Receive+0x1c2>
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d102      	bne.n	8011c4c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8011c46:	2303      	movs	r3, #3
 8011c48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011c4a:	e017      	b.n	8011c7c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1cd      	bne.n	8011bf2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011c56:	693a      	ldr	r2, [r7, #16]
 8011c58:	6839      	ldr	r1, [r7, #0]
 8011c5a:	68f8      	ldr	r0, [r7, #12]
 8011c5c:	f000 fa27 	bl	80120ae <SPI_EndRxTransaction>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d002      	beq.n	8011c6c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2220      	movs	r2, #32
 8011c6a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d002      	beq.n	8011c7a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8011c74:	2301      	movs	r3, #1
 8011c76:	75fb      	strb	r3, [r7, #23]
 8011c78:	e000      	b.n	8011c7c <HAL_SPI_Receive+0x1f8>
  }

error :
 8011c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3718      	adds	r7, #24
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}

08011c96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011c96:	b580      	push	{r7, lr}
 8011c98:	b08c      	sub	sp, #48	; 0x30
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	60f8      	str	r0, [r7, #12]
 8011c9e:	60b9      	str	r1, [r7, #8]
 8011ca0:	607a      	str	r2, [r7, #4]
 8011ca2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d101      	bne.n	8011cbc <HAL_SPI_TransmitReceive+0x26>
 8011cb8:	2302      	movs	r3, #2
 8011cba:	e18a      	b.n	8011fd2 <HAL_SPI_TransmitReceive+0x33c>
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011cc4:	f7fd fbea 	bl	800f49c <HAL_GetTick>
 8011cc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011cda:	887b      	ldrh	r3, [r7, #2]
 8011cdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d00f      	beq.n	8011d06 <HAL_SPI_TransmitReceive+0x70>
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011cec:	d107      	bne.n	8011cfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d103      	bne.n	8011cfe <HAL_SPI_TransmitReceive+0x68>
 8011cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011cfa:	2b04      	cmp	r3, #4
 8011cfc:	d003      	beq.n	8011d06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011cfe:	2302      	movs	r3, #2
 8011d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011d04:	e15b      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d005      	beq.n	8011d18 <HAL_SPI_TransmitReceive+0x82>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <HAL_SPI_TransmitReceive+0x82>
 8011d12:	887b      	ldrh	r3, [r7, #2]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d103      	bne.n	8011d20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011d1e:	e14e      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	2b04      	cmp	r3, #4
 8011d2a:	d003      	beq.n	8011d34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2205      	movs	r2, #5
 8011d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2200      	movs	r2, #0
 8011d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	887a      	ldrh	r2, [r7, #2]
 8011d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	887a      	ldrh	r2, [r7, #2]
 8011d4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	68ba      	ldr	r2, [r7, #8]
 8011d50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	887a      	ldrh	r2, [r7, #2]
 8011d56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	887a      	ldrh	r2, [r7, #2]
 8011d5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2200      	movs	r2, #0
 8011d68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d74:	2b40      	cmp	r3, #64	; 0x40
 8011d76:	d007      	beq.n	8011d88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d90:	d178      	bne.n	8011e84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <HAL_SPI_TransmitReceive+0x10a>
 8011d9a:	8b7b      	ldrh	r3, [r7, #26]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d166      	bne.n	8011e6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da4:	881a      	ldrh	r2, [r3, #0]
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db0:	1c9a      	adds	r2, r3, #2
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	3b01      	subs	r3, #1
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dc4:	e053      	b.n	8011e6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	f003 0302 	and.w	r3, r3, #2
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d11b      	bne.n	8011e0c <HAL_SPI_TransmitReceive+0x176>
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d016      	beq.n	8011e0c <HAL_SPI_TransmitReceive+0x176>
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d113      	bne.n	8011e0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011de8:	881a      	ldrh	r2, [r3, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011df4:	1c9a      	adds	r2, r3, #2
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	3b01      	subs	r3, #1
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011e08:	2300      	movs	r3, #0
 8011e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	f003 0301 	and.w	r3, r3, #1
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d119      	bne.n	8011e4e <HAL_SPI_TransmitReceive+0x1b8>
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d014      	beq.n	8011e4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68da      	ldr	r2, [r3, #12]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e2e:	b292      	uxth	r2, r2
 8011e30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e36:	1c9a      	adds	r2, r3, #2
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	3b01      	subs	r3, #1
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011e4e:	f7fd fb25 	bl	800f49c <HAL_GetTick>
 8011e52:	4602      	mov	r2, r0
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	1ad3      	subs	r3, r2, r3
 8011e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d807      	bhi.n	8011e6e <HAL_SPI_TransmitReceive+0x1d8>
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e64:	d003      	beq.n	8011e6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011e66:	2303      	movs	r3, #3
 8011e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011e6c:	e0a7      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d1a6      	bne.n	8011dc6 <HAL_SPI_TransmitReceive+0x130>
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d1a1      	bne.n	8011dc6 <HAL_SPI_TransmitReceive+0x130>
 8011e82:	e07c      	b.n	8011f7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d002      	beq.n	8011e92 <HAL_SPI_TransmitReceive+0x1fc>
 8011e8c:	8b7b      	ldrh	r3, [r7, #26]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d16b      	bne.n	8011f6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	330c      	adds	r3, #12
 8011e9c:	7812      	ldrb	r2, [r2, #0]
 8011e9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ea4:	1c5a      	adds	r2, r3, #1
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011eb8:	e057      	b.n	8011f6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	f003 0302 	and.w	r3, r3, #2
 8011ec4:	2b02      	cmp	r3, #2
 8011ec6:	d11c      	bne.n	8011f02 <HAL_SPI_TransmitReceive+0x26c>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d017      	beq.n	8011f02 <HAL_SPI_TransmitReceive+0x26c>
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d114      	bne.n	8011f02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	330c      	adds	r3, #12
 8011ee2:	7812      	ldrb	r2, [r2, #0]
 8011ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011efe:	2300      	movs	r3, #0
 8011f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d119      	bne.n	8011f44 <HAL_SPI_TransmitReceive+0x2ae>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d014      	beq.n	8011f44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f24:	b2d2      	uxtb	r2, r2
 8011f26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f2c:	1c5a      	adds	r2, r3, #1
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011f40:	2301      	movs	r3, #1
 8011f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011f44:	f7fd faaa 	bl	800f49c <HAL_GetTick>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d803      	bhi.n	8011f5c <HAL_SPI_TransmitReceive+0x2c6>
 8011f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5a:	d102      	bne.n	8011f62 <HAL_SPI_TransmitReceive+0x2cc>
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d103      	bne.n	8011f6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011f62:	2303      	movs	r3, #3
 8011f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011f68:	e029      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1a2      	bne.n	8011eba <HAL_SPI_TransmitReceive+0x224>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d19d      	bne.n	8011eba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f000 f8f8 	bl	8012178 <SPI_EndRxTxTransaction>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d006      	beq.n	8011f9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2220      	movs	r2, #32
 8011f98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011f9a:	e010      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d10b      	bne.n	8011fbc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	617b      	str	r3, [r7, #20]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	617b      	str	r3, [r7, #20]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	e000      	b.n	8011fbe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011fbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3730      	adds	r7, #48	; 0x30
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b084      	sub	sp, #16
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	603b      	str	r3, [r7, #0]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011fea:	e04c      	b.n	8012086 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff2:	d048      	beq.n	8012086 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8011ff4:	f7fd fa52 	bl	800f49c <HAL_GetTick>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	1ad3      	subs	r3, r2, r3
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	429a      	cmp	r2, r3
 8012002:	d902      	bls.n	801200a <SPI_WaitFlagStateUntilTimeout+0x30>
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d13d      	bne.n	8012086 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	685a      	ldr	r2, [r3, #4]
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012022:	d111      	bne.n	8012048 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801202c:	d004      	beq.n	8012038 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012036:	d107      	bne.n	8012048 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012050:	d10f      	bne.n	8012072 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2201      	movs	r2, #1
 8012076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2200      	movs	r2, #0
 801207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8012082:	2303      	movs	r3, #3
 8012084:	e00f      	b.n	80120a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	689a      	ldr	r2, [r3, #8]
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	4013      	ands	r3, r2
 8012090:	68ba      	ldr	r2, [r7, #8]
 8012092:	429a      	cmp	r2, r3
 8012094:	bf0c      	ite	eq
 8012096:	2301      	moveq	r3, #1
 8012098:	2300      	movne	r3, #0
 801209a:	b2db      	uxtb	r3, r3
 801209c:	461a      	mov	r2, r3
 801209e:	79fb      	ldrb	r3, [r7, #7]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d1a3      	bne.n	8011fec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b086      	sub	sp, #24
 80120b2:	af02      	add	r7, sp, #8
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	60b9      	str	r1, [r7, #8]
 80120b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80120c2:	d111      	bne.n	80120e8 <SPI_EndRxTransaction+0x3a>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80120cc:	d004      	beq.n	80120d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120d6:	d107      	bne.n	80120e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80120e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80120f0:	d12a      	bne.n	8012148 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	689b      	ldr	r3, [r3, #8]
 80120f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120fa:	d012      	beq.n	8012122 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	2200      	movs	r2, #0
 8012104:	2180      	movs	r1, #128	; 0x80
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f7ff ff67 	bl	8011fda <SPI_WaitFlagStateUntilTimeout>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d02d      	beq.n	801216e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012116:	f043 0220 	orr.w	r2, r3, #32
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801211e:	2303      	movs	r3, #3
 8012120:	e026      	b.n	8012170 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2200      	movs	r2, #0
 801212a:	2101      	movs	r1, #1
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7ff ff54 	bl	8011fda <SPI_WaitFlagStateUntilTimeout>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d01a      	beq.n	801216e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801213c:	f043 0220 	orr.w	r2, r3, #32
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012144:	2303      	movs	r3, #3
 8012146:	e013      	b.n	8012170 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	2200      	movs	r2, #0
 8012150:	2101      	movs	r1, #1
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f7ff ff41 	bl	8011fda <SPI_WaitFlagStateUntilTimeout>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d007      	beq.n	801216e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012162:	f043 0220 	orr.w	r2, r3, #32
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801216a:	2303      	movs	r3, #3
 801216c:	e000      	b.n	8012170 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b088      	sub	sp, #32
 801217c:	af02      	add	r7, sp, #8
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012184:	4b1b      	ldr	r3, [pc, #108]	; (80121f4 <SPI_EndRxTxTransaction+0x7c>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4a1b      	ldr	r2, [pc, #108]	; (80121f8 <SPI_EndRxTxTransaction+0x80>)
 801218a:	fba2 2303 	umull	r2, r3, r2, r3
 801218e:	0d5b      	lsrs	r3, r3, #21
 8012190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012194:	fb02 f303 	mul.w	r3, r2, r3
 8012198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80121a2:	d112      	bne.n	80121ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	2200      	movs	r2, #0
 80121ac:	2180      	movs	r1, #128	; 0x80
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f7ff ff13 	bl	8011fda <SPI_WaitFlagStateUntilTimeout>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d016      	beq.n	80121e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121be:	f043 0220 	orr.w	r2, r3, #32
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80121c6:	2303      	movs	r3, #3
 80121c8:	e00f      	b.n	80121ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d00a      	beq.n	80121e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	3b01      	subs	r3, #1
 80121d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121e0:	2b80      	cmp	r3, #128	; 0x80
 80121e2:	d0f2      	beq.n	80121ca <SPI_EndRxTxTransaction+0x52>
 80121e4:	e000      	b.n	80121e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80121e6:	bf00      	nop
  }

  return HAL_OK;
 80121e8:	2300      	movs	r3, #0
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3718      	adds	r7, #24
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	2000001c 	.word	0x2000001c
 80121f8:	165e9f81 	.word	0x165e9f81

080121fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801220a:	2301      	movs	r3, #1
 801220c:	e01d      	b.n	801224a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	d106      	bne.n	8012228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7fc f9b8 	bl	800e598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2202      	movs	r2, #2
 801222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3304      	adds	r3, #4
 8012238:	4619      	mov	r1, r3
 801223a:	4610      	mov	r0, r2
 801223c:	f000 fe96 	bl	8012f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2201      	movs	r2, #1
 8012244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012252:	b480      	push	{r7}
 8012254:	b085      	sub	sp, #20
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	68da      	ldr	r2, [r3, #12]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f042 0201 	orr.w	r2, r2, #1
 8012268:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	f003 0307 	and.w	r3, r3, #7
 8012274:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b06      	cmp	r3, #6
 801227a:	d007      	beq.n	801228c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f042 0201 	orr.w	r2, r2, #1
 801228a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	3714      	adds	r7, #20
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr

0801229a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801229a:	b480      	push	{r7}
 801229c:	b083      	sub	sp, #12
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68da      	ldr	r2, [r3, #12]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f022 0201 	bic.w	r2, r2, #1
 80122b0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6a1a      	ldr	r2, [r3, #32]
 80122b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80122bc:	4013      	ands	r3, r2
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d10f      	bne.n	80122e2 <HAL_TIM_Base_Stop_IT+0x48>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	6a1a      	ldr	r2, [r3, #32]
 80122c8:	f240 4344 	movw	r3, #1092	; 0x444
 80122cc:	4013      	ands	r3, r2
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d107      	bne.n	80122e2 <HAL_TIM_Base_Stop_IT+0x48>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f022 0201 	bic.w	r2, r2, #1
 80122e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80122e2:	2300      	movs	r3, #0
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr

080122f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	e01d      	b.n	801233e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 f815 	bl	8012346 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2202      	movs	r2, #2
 8012320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	3304      	adds	r3, #4
 801232c:	4619      	mov	r1, r3
 801232e:	4610      	mov	r0, r2
 8012330:	f000 fe1c 	bl	8012f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012346:	b480      	push	{r7}
 8012348:	b083      	sub	sp, #12
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801234e:	bf00      	nop
 8012350:	370c      	adds	r7, #12
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
	...

0801235c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	2b0c      	cmp	r3, #12
 801236a:	d841      	bhi.n	80123f0 <HAL_TIM_OC_Start_IT+0x94>
 801236c:	a201      	add	r2, pc, #4	; (adr r2, 8012374 <HAL_TIM_OC_Start_IT+0x18>)
 801236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012372:	bf00      	nop
 8012374:	080123a9 	.word	0x080123a9
 8012378:	080123f1 	.word	0x080123f1
 801237c:	080123f1 	.word	0x080123f1
 8012380:	080123f1 	.word	0x080123f1
 8012384:	080123bb 	.word	0x080123bb
 8012388:	080123f1 	.word	0x080123f1
 801238c:	080123f1 	.word	0x080123f1
 8012390:	080123f1 	.word	0x080123f1
 8012394:	080123cd 	.word	0x080123cd
 8012398:	080123f1 	.word	0x080123f1
 801239c:	080123f1 	.word	0x080123f1
 80123a0:	080123f1 	.word	0x080123f1
 80123a4:	080123df 	.word	0x080123df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68da      	ldr	r2, [r3, #12]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f042 0202 	orr.w	r2, r2, #2
 80123b6:	60da      	str	r2, [r3, #12]
      break;
 80123b8:	e01b      	b.n	80123f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68da      	ldr	r2, [r3, #12]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f042 0204 	orr.w	r2, r2, #4
 80123c8:	60da      	str	r2, [r3, #12]
      break;
 80123ca:	e012      	b.n	80123f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68da      	ldr	r2, [r3, #12]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f042 0208 	orr.w	r2, r2, #8
 80123da:	60da      	str	r2, [r3, #12]
      break;
 80123dc:	e009      	b.n	80123f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	68da      	ldr	r2, [r3, #12]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f042 0210 	orr.w	r2, r2, #16
 80123ec:	60da      	str	r2, [r3, #12]
      break;
 80123ee:	e000      	b.n	80123f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80123f0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2201      	movs	r2, #1
 80123f8:	6839      	ldr	r1, [r7, #0]
 80123fa:	4618      	mov	r0, r3
 80123fc:	f001 f8a0 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a15      	ldr	r2, [pc, #84]	; (801245c <HAL_TIM_OC_Start_IT+0x100>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d004      	beq.n	8012414 <HAL_TIM_OC_Start_IT+0xb8>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a14      	ldr	r2, [pc, #80]	; (8012460 <HAL_TIM_OC_Start_IT+0x104>)
 8012410:	4293      	cmp	r3, r2
 8012412:	d101      	bne.n	8012418 <HAL_TIM_OC_Start_IT+0xbc>
 8012414:	2301      	movs	r3, #1
 8012416:	e000      	b.n	801241a <HAL_TIM_OC_Start_IT+0xbe>
 8012418:	2300      	movs	r3, #0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d007      	beq.n	801242e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801242c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	f003 0307 	and.w	r3, r3, #7
 8012438:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b06      	cmp	r3, #6
 801243e:	d007      	beq.n	8012450 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f042 0201 	orr.w	r2, r2, #1
 801244e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	40010000 	.word	0x40010000
 8012460:	40010400 	.word	0x40010400

08012464 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	2b0c      	cmp	r3, #12
 8012472:	d841      	bhi.n	80124f8 <HAL_TIM_OC_Stop_IT+0x94>
 8012474:	a201      	add	r2, pc, #4	; (adr r2, 801247c <HAL_TIM_OC_Stop_IT+0x18>)
 8012476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801247a:	bf00      	nop
 801247c:	080124b1 	.word	0x080124b1
 8012480:	080124f9 	.word	0x080124f9
 8012484:	080124f9 	.word	0x080124f9
 8012488:	080124f9 	.word	0x080124f9
 801248c:	080124c3 	.word	0x080124c3
 8012490:	080124f9 	.word	0x080124f9
 8012494:	080124f9 	.word	0x080124f9
 8012498:	080124f9 	.word	0x080124f9
 801249c:	080124d5 	.word	0x080124d5
 80124a0:	080124f9 	.word	0x080124f9
 80124a4:	080124f9 	.word	0x080124f9
 80124a8:	080124f9 	.word	0x080124f9
 80124ac:	080124e7 	.word	0x080124e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68da      	ldr	r2, [r3, #12]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f022 0202 	bic.w	r2, r2, #2
 80124be:	60da      	str	r2, [r3, #12]
      break;
 80124c0:	e01b      	b.n	80124fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68da      	ldr	r2, [r3, #12]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f022 0204 	bic.w	r2, r2, #4
 80124d0:	60da      	str	r2, [r3, #12]
      break;
 80124d2:	e012      	b.n	80124fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68da      	ldr	r2, [r3, #12]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f022 0208 	bic.w	r2, r2, #8
 80124e2:	60da      	str	r2, [r3, #12]
      break;
 80124e4:	e009      	b.n	80124fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	68da      	ldr	r2, [r3, #12]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f022 0210 	bic.w	r2, r2, #16
 80124f4:	60da      	str	r2, [r3, #12]
      break;
 80124f6:	e000      	b.n	80124fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80124f8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2200      	movs	r2, #0
 8012500:	6839      	ldr	r1, [r7, #0]
 8012502:	4618      	mov	r0, r3
 8012504:	f001 f81c 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4a20      	ldr	r2, [pc, #128]	; (8012590 <HAL_TIM_OC_Stop_IT+0x12c>)
 801250e:	4293      	cmp	r3, r2
 8012510:	d004      	beq.n	801251c <HAL_TIM_OC_Stop_IT+0xb8>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	4a1f      	ldr	r2, [pc, #124]	; (8012594 <HAL_TIM_OC_Stop_IT+0x130>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d101      	bne.n	8012520 <HAL_TIM_OC_Stop_IT+0xbc>
 801251c:	2301      	movs	r3, #1
 801251e:	e000      	b.n	8012522 <HAL_TIM_OC_Stop_IT+0xbe>
 8012520:	2300      	movs	r3, #0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d017      	beq.n	8012556 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	6a1a      	ldr	r2, [r3, #32]
 801252c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012530:	4013      	ands	r3, r2
 8012532:	2b00      	cmp	r3, #0
 8012534:	d10f      	bne.n	8012556 <HAL_TIM_OC_Stop_IT+0xf2>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	6a1a      	ldr	r2, [r3, #32]
 801253c:	f240 4344 	movw	r3, #1092	; 0x444
 8012540:	4013      	ands	r3, r2
 8012542:	2b00      	cmp	r3, #0
 8012544:	d107      	bne.n	8012556 <HAL_TIM_OC_Stop_IT+0xf2>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	6a1a      	ldr	r2, [r3, #32]
 801255c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012560:	4013      	ands	r3, r2
 8012562:	2b00      	cmp	r3, #0
 8012564:	d10f      	bne.n	8012586 <HAL_TIM_OC_Stop_IT+0x122>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	6a1a      	ldr	r2, [r3, #32]
 801256c:	f240 4344 	movw	r3, #1092	; 0x444
 8012570:	4013      	ands	r3, r2
 8012572:	2b00      	cmp	r3, #0
 8012574:	d107      	bne.n	8012586 <HAL_TIM_OC_Stop_IT+0x122>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f022 0201 	bic.w	r2, r2, #1
 8012584:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012586:	2300      	movs	r3, #0
}
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	40010000 	.word	0x40010000
 8012594:	40010400 	.word	0x40010400

08012598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d101      	bne.n	80125aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e01d      	b.n	80125e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d106      	bne.n	80125c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2200      	movs	r2, #0
 80125ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 f815 	bl	80125ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2202      	movs	r2, #2
 80125c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	3304      	adds	r3, #4
 80125d4:	4619      	mov	r1, r3
 80125d6:	4610      	mov	r0, r2
 80125d8:	f000 fcc8 	bl	8012f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2201      	movs	r2, #1
 80125e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b083      	sub	sp, #12
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80125f6:	bf00      	nop
 80125f8:	370c      	adds	r7, #12
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
	...

08012604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2201      	movs	r2, #1
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	4618      	mov	r0, r3
 8012618:	f000 ff92 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a15      	ldr	r2, [pc, #84]	; (8012678 <HAL_TIM_PWM_Start+0x74>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d004      	beq.n	8012630 <HAL_TIM_PWM_Start+0x2c>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a14      	ldr	r2, [pc, #80]	; (801267c <HAL_TIM_PWM_Start+0x78>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d101      	bne.n	8012634 <HAL_TIM_PWM_Start+0x30>
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <HAL_TIM_PWM_Start+0x32>
 8012634:	2300      	movs	r3, #0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d007      	beq.n	801264a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	f003 0307 	and.w	r3, r3, #7
 8012654:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2b06      	cmp	r3, #6
 801265a:	d007      	beq.n	801266c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f042 0201 	orr.w	r2, r2, #1
 801266a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801266c:	2300      	movs	r3, #0
}
 801266e:	4618      	mov	r0, r3
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	40010000 	.word	0x40010000
 801267c:	40010400 	.word	0x40010400

08012680 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2200      	movs	r2, #0
 8012690:	6839      	ldr	r1, [r7, #0]
 8012692:	4618      	mov	r0, r3
 8012694:	f000 ff54 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4a22      	ldr	r2, [pc, #136]	; (8012728 <HAL_TIM_PWM_Stop+0xa8>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d004      	beq.n	80126ac <HAL_TIM_PWM_Stop+0x2c>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a21      	ldr	r2, [pc, #132]	; (801272c <HAL_TIM_PWM_Stop+0xac>)
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d101      	bne.n	80126b0 <HAL_TIM_PWM_Stop+0x30>
 80126ac:	2301      	movs	r3, #1
 80126ae:	e000      	b.n	80126b2 <HAL_TIM_PWM_Stop+0x32>
 80126b0:	2300      	movs	r3, #0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d017      	beq.n	80126e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	6a1a      	ldr	r2, [r3, #32]
 80126bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80126c0:	4013      	ands	r3, r2
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10f      	bne.n	80126e6 <HAL_TIM_PWM_Stop+0x66>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	6a1a      	ldr	r2, [r3, #32]
 80126cc:	f240 4344 	movw	r3, #1092	; 0x444
 80126d0:	4013      	ands	r3, r2
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d107      	bne.n	80126e6 <HAL_TIM_PWM_Stop+0x66>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80126e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	6a1a      	ldr	r2, [r3, #32]
 80126ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80126f0:	4013      	ands	r3, r2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d10f      	bne.n	8012716 <HAL_TIM_PWM_Stop+0x96>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	6a1a      	ldr	r2, [r3, #32]
 80126fc:	f240 4344 	movw	r3, #1092	; 0x444
 8012700:	4013      	ands	r3, r2
 8012702:	2b00      	cmp	r3, #0
 8012704:	d107      	bne.n	8012716 <HAL_TIM_PWM_Stop+0x96>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f022 0201 	bic.w	r2, r2, #1
 8012714:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2201      	movs	r2, #1
 801271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	40010000 	.word	0x40010000
 801272c:	40010400 	.word	0x40010400

08012730 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012740:	2301      	movs	r3, #1
 8012742:	e083      	b.n	801284c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801274a:	b2db      	uxtb	r3, r3
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7fb ff8d 	bl	800e678 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2202      	movs	r2, #2
 8012762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	689b      	ldr	r3, [r3, #8]
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	6812      	ldr	r2, [r2, #0]
 8012770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012774:	f023 0307 	bic.w	r3, r3, #7
 8012778:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	3304      	adds	r3, #4
 8012782:	4619      	mov	r1, r3
 8012784:	4610      	mov	r0, r2
 8012786:	f000 fbf1 	bl	8012f6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	699b      	ldr	r3, [r3, #24]
 8012798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	6a1b      	ldr	r3, [r3, #32]
 80127a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	4313      	orrs	r3, r2
 80127aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127b2:	f023 0303 	bic.w	r3, r3, #3
 80127b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	689a      	ldr	r2, [r3, #8]
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	699b      	ldr	r3, [r3, #24]
 80127c0:	021b      	lsls	r3, r3, #8
 80127c2:	4313      	orrs	r3, r2
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80127d0:	f023 030c 	bic.w	r3, r3, #12
 80127d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80127dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80127e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	68da      	ldr	r2, [r3, #12]
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	021b      	lsls	r3, r3, #8
 80127ec:	4313      	orrs	r3, r2
 80127ee:	693a      	ldr	r2, [r7, #16]
 80127f0:	4313      	orrs	r3, r2
 80127f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	691b      	ldr	r3, [r3, #16]
 80127f8:	011a      	lsls	r2, r3, #4
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	6a1b      	ldr	r3, [r3, #32]
 80127fe:	031b      	lsls	r3, r3, #12
 8012800:	4313      	orrs	r3, r2
 8012802:	693a      	ldr	r2, [r7, #16]
 8012804:	4313      	orrs	r3, r2
 8012806:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801280e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012816:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	685a      	ldr	r2, [r3, #4]
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	695b      	ldr	r3, [r3, #20]
 8012820:	011b      	lsls	r3, r3, #4
 8012822:	4313      	orrs	r3, r2
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	4313      	orrs	r3, r2
 8012828:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	697a      	ldr	r2, [r7, #20]
 8012830:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	693a      	ldr	r2, [r7, #16]
 8012838:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	68fa      	ldr	r2, [r7, #12]
 8012840:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3718      	adds	r7, #24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <HAL_TIM_Encoder_Start+0x16>
 8012864:	2b04      	cmp	r3, #4
 8012866:	d008      	beq.n	801287a <HAL_TIM_Encoder_Start+0x26>
 8012868:	e00f      	b.n	801288a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2201      	movs	r2, #1
 8012870:	2100      	movs	r1, #0
 8012872:	4618      	mov	r0, r3
 8012874:	f000 fe64 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 8012878:	e016      	b.n	80128a8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	2201      	movs	r2, #1
 8012880:	2104      	movs	r1, #4
 8012882:	4618      	mov	r0, r3
 8012884:	f000 fe5c 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 8012888:	e00e      	b.n	80128a8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2201      	movs	r2, #1
 8012890:	2100      	movs	r1, #0
 8012892:	4618      	mov	r0, r3
 8012894:	f000 fe54 	bl	8013540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2201      	movs	r2, #1
 801289e:	2104      	movs	r1, #4
 80128a0:	4618      	mov	r0, r3
 80128a2:	f000 fe4d 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 80128a6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f042 0201 	orr.w	r2, r2, #1
 80128b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b082      	sub	sp, #8
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d002      	beq.n	80128d8 <HAL_TIM_Encoder_Stop+0x16>
 80128d2:	2b04      	cmp	r3, #4
 80128d4:	d008      	beq.n	80128e8 <HAL_TIM_Encoder_Stop+0x26>
 80128d6:	e00f      	b.n	80128f8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2200      	movs	r2, #0
 80128de:	2100      	movs	r1, #0
 80128e0:	4618      	mov	r0, r3
 80128e2:	f000 fe2d 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 80128e6:	e016      	b.n	8012916 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2200      	movs	r2, #0
 80128ee:	2104      	movs	r1, #4
 80128f0:	4618      	mov	r0, r3
 80128f2:	f000 fe25 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 80128f6:	e00e      	b.n	8012916 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2200      	movs	r2, #0
 80128fe:	2100      	movs	r1, #0
 8012900:	4618      	mov	r0, r3
 8012902:	f000 fe1d 	bl	8013540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	2104      	movs	r1, #4
 801290e:	4618      	mov	r0, r3
 8012910:	f000 fe16 	bl	8013540 <TIM_CCxChannelCmd>
      break;
 8012914:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	6a1a      	ldr	r2, [r3, #32]
 801291c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012920:	4013      	ands	r3, r2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10f      	bne.n	8012946 <HAL_TIM_Encoder_Stop+0x84>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6a1a      	ldr	r2, [r3, #32]
 801292c:	f240 4344 	movw	r3, #1092	; 0x444
 8012930:	4013      	ands	r3, r2
 8012932:	2b00      	cmp	r3, #0
 8012934:	d107      	bne.n	8012946 <HAL_TIM_Encoder_Stop+0x84>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f022 0201 	bic.w	r2, r2, #1
 8012944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	691b      	ldr	r3, [r3, #16]
 801295e:	f003 0302 	and.w	r3, r3, #2
 8012962:	2b02      	cmp	r3, #2
 8012964:	d122      	bne.n	80129ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	f003 0302 	and.w	r3, r3, #2
 8012970:	2b02      	cmp	r3, #2
 8012972:	d11b      	bne.n	80129ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f06f 0202 	mvn.w	r2, #2
 801297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2201      	movs	r2, #1
 8012982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	699b      	ldr	r3, [r3, #24]
 801298a:	f003 0303 	and.w	r3, r3, #3
 801298e:	2b00      	cmp	r3, #0
 8012990:	d003      	beq.n	801299a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 facb 	bl	8012f2e <HAL_TIM_IC_CaptureCallback>
 8012998:	e005      	b.n	80129a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 fabd 	bl	8012f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 face 	bl	8012f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	691b      	ldr	r3, [r3, #16]
 80129b2:	f003 0304 	and.w	r3, r3, #4
 80129b6:	2b04      	cmp	r3, #4
 80129b8:	d122      	bne.n	8012a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	f003 0304 	and.w	r3, r3, #4
 80129c4:	2b04      	cmp	r3, #4
 80129c6:	d11b      	bne.n	8012a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f06f 0204 	mvn.w	r2, #4
 80129d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2202      	movs	r2, #2
 80129d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	699b      	ldr	r3, [r3, #24]
 80129de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 faa1 	bl	8012f2e <HAL_TIM_IC_CaptureCallback>
 80129ec:	e005      	b.n	80129fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f000 fa93 	bl	8012f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 faa4 	bl	8012f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2200      	movs	r2, #0
 80129fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	f003 0308 	and.w	r3, r3, #8
 8012a0a:	2b08      	cmp	r3, #8
 8012a0c:	d122      	bne.n	8012a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	f003 0308 	and.w	r3, r3, #8
 8012a18:	2b08      	cmp	r3, #8
 8012a1a:	d11b      	bne.n	8012a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f06f 0208 	mvn.w	r2, #8
 8012a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2204      	movs	r2, #4
 8012a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	69db      	ldr	r3, [r3, #28]
 8012a32:	f003 0303 	and.w	r3, r3, #3
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d003      	beq.n	8012a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fa77 	bl	8012f2e <HAL_TIM_IC_CaptureCallback>
 8012a40:	e005      	b.n	8012a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f000 fa69 	bl	8012f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fa7a 	bl	8012f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	f003 0310 	and.w	r3, r3, #16
 8012a5e:	2b10      	cmp	r3, #16
 8012a60:	d122      	bne.n	8012aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	f003 0310 	and.w	r3, r3, #16
 8012a6c:	2b10      	cmp	r3, #16
 8012a6e:	d11b      	bne.n	8012aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f06f 0210 	mvn.w	r2, #16
 8012a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2208      	movs	r2, #8
 8012a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d003      	beq.n	8012a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 fa4d 	bl	8012f2e <HAL_TIM_IC_CaptureCallback>
 8012a94:	e005      	b.n	8012aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 fa3f 	bl	8012f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 fa50 	bl	8012f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d10e      	bne.n	8012ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	f003 0301 	and.w	r3, r3, #1
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d107      	bne.n	8012ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f06f 0201 	mvn.w	r2, #1
 8012acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7f8 fa04 	bl	800aedc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	691b      	ldr	r3, [r3, #16]
 8012ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ade:	2b80      	cmp	r3, #128	; 0x80
 8012ae0:	d10e      	bne.n	8012b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012aec:	2b80      	cmp	r3, #128	; 0x80
 8012aee:	d107      	bne.n	8012b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 fee8 	bl	80138d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b0a:	2b40      	cmp	r3, #64	; 0x40
 8012b0c:	d10e      	bne.n	8012b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b18:	2b40      	cmp	r3, #64	; 0x40
 8012b1a:	d107      	bne.n	8012b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 fa15 	bl	8012f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	f003 0320 	and.w	r3, r3, #32
 8012b36:	2b20      	cmp	r3, #32
 8012b38:	d10e      	bne.n	8012b58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	f003 0320 	and.w	r3, r3, #32
 8012b44:	2b20      	cmp	r3, #32
 8012b46:	d107      	bne.n	8012b58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f06f 0220 	mvn.w	r2, #32
 8012b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 feb2 	bl	80138bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012b58:	bf00      	nop
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d101      	bne.n	8012b7a <HAL_TIM_OC_ConfigChannel+0x1a>
 8012b76:	2302      	movs	r3, #2
 8012b78:	e04e      	b.n	8012c18 <HAL_TIM_OC_ConfigChannel+0xb8>
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2202      	movs	r2, #2
 8012b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2b0c      	cmp	r3, #12
 8012b8e:	d839      	bhi.n	8012c04 <HAL_TIM_OC_ConfigChannel+0xa4>
 8012b90:	a201      	add	r2, pc, #4	; (adr r2, 8012b98 <HAL_TIM_OC_ConfigChannel+0x38>)
 8012b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b96:	bf00      	nop
 8012b98:	08012bcd 	.word	0x08012bcd
 8012b9c:	08012c05 	.word	0x08012c05
 8012ba0:	08012c05 	.word	0x08012c05
 8012ba4:	08012c05 	.word	0x08012c05
 8012ba8:	08012bdb 	.word	0x08012bdb
 8012bac:	08012c05 	.word	0x08012c05
 8012bb0:	08012c05 	.word	0x08012c05
 8012bb4:	08012c05 	.word	0x08012c05
 8012bb8:	08012be9 	.word	0x08012be9
 8012bbc:	08012c05 	.word	0x08012c05
 8012bc0:	08012c05 	.word	0x08012c05
 8012bc4:	08012c05 	.word	0x08012c05
 8012bc8:	08012bf7 	.word	0x08012bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68b9      	ldr	r1, [r7, #8]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fa6a 	bl	80130ac <TIM_OC1_SetConfig>
      break;
 8012bd8:	e015      	b.n	8012c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	68b9      	ldr	r1, [r7, #8]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f000 fad3 	bl	801318c <TIM_OC2_SetConfig>
      break;
 8012be6:	e00e      	b.n	8012c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68b9      	ldr	r1, [r7, #8]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f000 fb42 	bl	8013278 <TIM_OC3_SetConfig>
      break;
 8012bf4:	e007      	b.n	8012c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	68b9      	ldr	r1, [r7, #8]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f000 fbaf 	bl	8013360 <TIM_OC4_SetConfig>
      break;
 8012c02:	e000      	b.n	8012c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8012c04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c16:	2300      	movs	r3, #0
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d101      	bne.n	8012c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012c36:	2302      	movs	r3, #2
 8012c38:	e0b4      	b.n	8012da4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2202      	movs	r2, #2
 8012c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2b0c      	cmp	r3, #12
 8012c4e:	f200 809f 	bhi.w	8012d90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012c52:	a201      	add	r2, pc, #4	; (adr r2, 8012c58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c58:	08012c8d 	.word	0x08012c8d
 8012c5c:	08012d91 	.word	0x08012d91
 8012c60:	08012d91 	.word	0x08012d91
 8012c64:	08012d91 	.word	0x08012d91
 8012c68:	08012ccd 	.word	0x08012ccd
 8012c6c:	08012d91 	.word	0x08012d91
 8012c70:	08012d91 	.word	0x08012d91
 8012c74:	08012d91 	.word	0x08012d91
 8012c78:	08012d0f 	.word	0x08012d0f
 8012c7c:	08012d91 	.word	0x08012d91
 8012c80:	08012d91 	.word	0x08012d91
 8012c84:	08012d91 	.word	0x08012d91
 8012c88:	08012d4f 	.word	0x08012d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	68b9      	ldr	r1, [r7, #8]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f000 fa0a 	bl	80130ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	699a      	ldr	r2, [r3, #24]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f042 0208 	orr.w	r2, r2, #8
 8012ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	699a      	ldr	r2, [r3, #24]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f022 0204 	bic.w	r2, r2, #4
 8012cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	6999      	ldr	r1, [r3, #24]
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	691a      	ldr	r2, [r3, #16]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	430a      	orrs	r2, r1
 8012cc8:	619a      	str	r2, [r3, #24]
      break;
 8012cca:	e062      	b.n	8012d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	68b9      	ldr	r1, [r7, #8]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 fa5a 	bl	801318c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	699a      	ldr	r2, [r3, #24]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	699a      	ldr	r2, [r3, #24]
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	6999      	ldr	r1, [r3, #24]
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	691b      	ldr	r3, [r3, #16]
 8012d02:	021a      	lsls	r2, r3, #8
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	430a      	orrs	r2, r1
 8012d0a:	619a      	str	r2, [r3, #24]
      break;
 8012d0c:	e041      	b.n	8012d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	68b9      	ldr	r1, [r7, #8]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f000 faaf 	bl	8013278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	69da      	ldr	r2, [r3, #28]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f042 0208 	orr.w	r2, r2, #8
 8012d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	69da      	ldr	r2, [r3, #28]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f022 0204 	bic.w	r2, r2, #4
 8012d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	69d9      	ldr	r1, [r3, #28]
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	691a      	ldr	r2, [r3, #16]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	430a      	orrs	r2, r1
 8012d4a:	61da      	str	r2, [r3, #28]
      break;
 8012d4c:	e021      	b.n	8012d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68b9      	ldr	r1, [r7, #8]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 fb03 	bl	8013360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	69da      	ldr	r2, [r3, #28]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	69da      	ldr	r2, [r3, #28]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	69d9      	ldr	r1, [r3, #28]
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	021a      	lsls	r2, r3, #8
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	430a      	orrs	r2, r1
 8012d8c:	61da      	str	r2, [r3, #28]
      break;
 8012d8e:	e000      	b.n	8012d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012d90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2201      	movs	r2, #1
 8012d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012da2:	2300      	movs	r3, #0
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3710      	adds	r7, #16
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d101      	bne.n	8012dc4 <HAL_TIM_ConfigClockSource+0x18>
 8012dc0:	2302      	movs	r3, #2
 8012dc2:	e0a6      	b.n	8012f12 <HAL_TIM_ConfigClockSource+0x166>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2202      	movs	r2, #2
 8012dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	689b      	ldr	r3, [r3, #8]
 8012dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2b40      	cmp	r3, #64	; 0x40
 8012dfa:	d067      	beq.n	8012ecc <HAL_TIM_ConfigClockSource+0x120>
 8012dfc:	2b40      	cmp	r3, #64	; 0x40
 8012dfe:	d80b      	bhi.n	8012e18 <HAL_TIM_ConfigClockSource+0x6c>
 8012e00:	2b10      	cmp	r3, #16
 8012e02:	d073      	beq.n	8012eec <HAL_TIM_ConfigClockSource+0x140>
 8012e04:	2b10      	cmp	r3, #16
 8012e06:	d802      	bhi.n	8012e0e <HAL_TIM_ConfigClockSource+0x62>
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d06f      	beq.n	8012eec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8012e0c:	e078      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012e0e:	2b20      	cmp	r3, #32
 8012e10:	d06c      	beq.n	8012eec <HAL_TIM_ConfigClockSource+0x140>
 8012e12:	2b30      	cmp	r3, #48	; 0x30
 8012e14:	d06a      	beq.n	8012eec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8012e16:	e073      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012e18:	2b70      	cmp	r3, #112	; 0x70
 8012e1a:	d00d      	beq.n	8012e38 <HAL_TIM_ConfigClockSource+0x8c>
 8012e1c:	2b70      	cmp	r3, #112	; 0x70
 8012e1e:	d804      	bhi.n	8012e2a <HAL_TIM_ConfigClockSource+0x7e>
 8012e20:	2b50      	cmp	r3, #80	; 0x50
 8012e22:	d033      	beq.n	8012e8c <HAL_TIM_ConfigClockSource+0xe0>
 8012e24:	2b60      	cmp	r3, #96	; 0x60
 8012e26:	d041      	beq.n	8012eac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8012e28:	e06a      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e2e:	d066      	beq.n	8012efe <HAL_TIM_ConfigClockSource+0x152>
 8012e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e34:	d017      	beq.n	8012e66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8012e36:	e063      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6818      	ldr	r0, [r3, #0]
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	6899      	ldr	r1, [r3, #8]
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	685a      	ldr	r2, [r3, #4]
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	68db      	ldr	r3, [r3, #12]
 8012e48:	f000 fb5a 	bl	8013500 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012e5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	609a      	str	r2, [r3, #8]
      break;
 8012e64:	e04c      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6818      	ldr	r0, [r3, #0]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	6899      	ldr	r1, [r3, #8]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	f000 fb43 	bl	8013500 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	689a      	ldr	r2, [r3, #8]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012e88:	609a      	str	r2, [r3, #8]
      break;
 8012e8a:	e039      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6818      	ldr	r0, [r3, #0]
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	6859      	ldr	r1, [r3, #4]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	461a      	mov	r2, r3
 8012e9a:	f000 fab7 	bl	801340c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2150      	movs	r1, #80	; 0x50
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f000 fb10 	bl	80134ca <TIM_ITRx_SetConfig>
      break;
 8012eaa:	e029      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6818      	ldr	r0, [r3, #0]
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	6859      	ldr	r1, [r3, #4]
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	461a      	mov	r2, r3
 8012eba:	f000 fad6 	bl	801346a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2160      	movs	r1, #96	; 0x60
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f000 fb00 	bl	80134ca <TIM_ITRx_SetConfig>
      break;
 8012eca:	e019      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6818      	ldr	r0, [r3, #0]
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	6859      	ldr	r1, [r3, #4]
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	f000 fa97 	bl	801340c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2140      	movs	r1, #64	; 0x40
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 faf0 	bl	80134ca <TIM_ITRx_SetConfig>
      break;
 8012eea:	e009      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	4610      	mov	r0, r2
 8012ef8:	f000 fae7 	bl	80134ca <TIM_ITRx_SetConfig>
      break;
 8012efc:	e000      	b.n	8012f00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8012efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2201      	movs	r2, #1
 8012f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012f10:	2300      	movs	r3, #0
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012f1a:	b480      	push	{r7}
 8012f1c:	b083      	sub	sp, #12
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012f22:	bf00      	nop
 8012f24:	370c      	adds	r7, #12
 8012f26:	46bd      	mov	sp, r7
 8012f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2c:	4770      	bx	lr

08012f2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012f2e:	b480      	push	{r7}
 8012f30:	b083      	sub	sp, #12
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012f36:	bf00      	nop
 8012f38:	370c      	adds	r7, #12
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012f42:	b480      	push	{r7}
 8012f44:	b083      	sub	sp, #12
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012f4a:	bf00      	nop
 8012f4c:	370c      	adds	r7, #12
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr

08012f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012f56:	b480      	push	{r7}
 8012f58:	b083      	sub	sp, #12
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012f5e:	bf00      	nop
 8012f60:	370c      	adds	r7, #12
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr
	...

08012f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	4a40      	ldr	r2, [pc, #256]	; (8013080 <TIM_Base_SetConfig+0x114>)
 8012f80:	4293      	cmp	r3, r2
 8012f82:	d013      	beq.n	8012fac <TIM_Base_SetConfig+0x40>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f8a:	d00f      	beq.n	8012fac <TIM_Base_SetConfig+0x40>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	4a3d      	ldr	r2, [pc, #244]	; (8013084 <TIM_Base_SetConfig+0x118>)
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d00b      	beq.n	8012fac <TIM_Base_SetConfig+0x40>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	4a3c      	ldr	r2, [pc, #240]	; (8013088 <TIM_Base_SetConfig+0x11c>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d007      	beq.n	8012fac <TIM_Base_SetConfig+0x40>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	4a3b      	ldr	r2, [pc, #236]	; (801308c <TIM_Base_SetConfig+0x120>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d003      	beq.n	8012fac <TIM_Base_SetConfig+0x40>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	4a3a      	ldr	r2, [pc, #232]	; (8013090 <TIM_Base_SetConfig+0x124>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d108      	bne.n	8012fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	68fa      	ldr	r2, [r7, #12]
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4a2f      	ldr	r2, [pc, #188]	; (8013080 <TIM_Base_SetConfig+0x114>)
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d02b      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012fcc:	d027      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4a2c      	ldr	r2, [pc, #176]	; (8013084 <TIM_Base_SetConfig+0x118>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d023      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4a2b      	ldr	r2, [pc, #172]	; (8013088 <TIM_Base_SetConfig+0x11c>)
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d01f      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	4a2a      	ldr	r2, [pc, #168]	; (801308c <TIM_Base_SetConfig+0x120>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d01b      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4a29      	ldr	r2, [pc, #164]	; (8013090 <TIM_Base_SetConfig+0x124>)
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d017      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4a28      	ldr	r2, [pc, #160]	; (8013094 <TIM_Base_SetConfig+0x128>)
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	d013      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	4a27      	ldr	r2, [pc, #156]	; (8013098 <TIM_Base_SetConfig+0x12c>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d00f      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4a26      	ldr	r2, [pc, #152]	; (801309c <TIM_Base_SetConfig+0x130>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d00b      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4a25      	ldr	r2, [pc, #148]	; (80130a0 <TIM_Base_SetConfig+0x134>)
 801300a:	4293      	cmp	r3, r2
 801300c:	d007      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	4a24      	ldr	r2, [pc, #144]	; (80130a4 <TIM_Base_SetConfig+0x138>)
 8013012:	4293      	cmp	r3, r2
 8013014:	d003      	beq.n	801301e <TIM_Base_SetConfig+0xb2>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	4a23      	ldr	r2, [pc, #140]	; (80130a8 <TIM_Base_SetConfig+0x13c>)
 801301a:	4293      	cmp	r3, r2
 801301c:	d108      	bne.n	8013030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	4313      	orrs	r3, r2
 801302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	695b      	ldr	r3, [r3, #20]
 801303a:	4313      	orrs	r3, r2
 801303c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	68fa      	ldr	r2, [r7, #12]
 8013042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	689a      	ldr	r2, [r3, #8]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	4a0a      	ldr	r2, [pc, #40]	; (8013080 <TIM_Base_SetConfig+0x114>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d003      	beq.n	8013064 <TIM_Base_SetConfig+0xf8>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	4a0c      	ldr	r2, [pc, #48]	; (8013090 <TIM_Base_SetConfig+0x124>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d103      	bne.n	801306c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	691a      	ldr	r2, [r3, #16]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2201      	movs	r2, #1
 8013070:	615a      	str	r2, [r3, #20]
}
 8013072:	bf00      	nop
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	40010000 	.word	0x40010000
 8013084:	40000400 	.word	0x40000400
 8013088:	40000800 	.word	0x40000800
 801308c:	40000c00 	.word	0x40000c00
 8013090:	40010400 	.word	0x40010400
 8013094:	40014000 	.word	0x40014000
 8013098:	40014400 	.word	0x40014400
 801309c:	40014800 	.word	0x40014800
 80130a0:	40001800 	.word	0x40001800
 80130a4:	40001c00 	.word	0x40001c00
 80130a8:	40002000 	.word	0x40002000

080130ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b087      	sub	sp, #28
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6a1b      	ldr	r3, [r3, #32]
 80130ba:	f023 0201 	bic.w	r2, r3, #1
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f023 0303 	bic.w	r3, r3, #3
 80130e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	4313      	orrs	r3, r2
 80130ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	f023 0302 	bic.w	r3, r3, #2
 80130f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	697a      	ldr	r2, [r7, #20]
 80130fc:	4313      	orrs	r3, r2
 80130fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4a20      	ldr	r2, [pc, #128]	; (8013184 <TIM_OC1_SetConfig+0xd8>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d003      	beq.n	8013110 <TIM_OC1_SetConfig+0x64>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4a1f      	ldr	r2, [pc, #124]	; (8013188 <TIM_OC1_SetConfig+0xdc>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d10c      	bne.n	801312a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	f023 0308 	bic.w	r3, r3, #8
 8013116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	697a      	ldr	r2, [r7, #20]
 801311e:	4313      	orrs	r3, r2
 8013120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	f023 0304 	bic.w	r3, r3, #4
 8013128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	4a15      	ldr	r2, [pc, #84]	; (8013184 <TIM_OC1_SetConfig+0xd8>)
 801312e:	4293      	cmp	r3, r2
 8013130:	d003      	beq.n	801313a <TIM_OC1_SetConfig+0x8e>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	4a14      	ldr	r2, [pc, #80]	; (8013188 <TIM_OC1_SetConfig+0xdc>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d111      	bne.n	801315e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	695b      	ldr	r3, [r3, #20]
 801314e:	693a      	ldr	r2, [r7, #16]
 8013150:	4313      	orrs	r3, r2
 8013152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	699b      	ldr	r3, [r3, #24]
 8013158:	693a      	ldr	r2, [r7, #16]
 801315a:	4313      	orrs	r3, r2
 801315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	693a      	ldr	r2, [r7, #16]
 8013162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	697a      	ldr	r2, [r7, #20]
 8013176:	621a      	str	r2, [r3, #32]
}
 8013178:	bf00      	nop
 801317a:	371c      	adds	r7, #28
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr
 8013184:	40010000 	.word	0x40010000
 8013188:	40010400 	.word	0x40010400

0801318c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801318c:	b480      	push	{r7}
 801318e:	b087      	sub	sp, #28
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6a1b      	ldr	r3, [r3, #32]
 801319a:	f023 0210 	bic.w	r2, r3, #16
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6a1b      	ldr	r3, [r3, #32]
 80131a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	699b      	ldr	r3, [r3, #24]
 80131b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80131c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	021b      	lsls	r3, r3, #8
 80131ca:	68fa      	ldr	r2, [r7, #12]
 80131cc:	4313      	orrs	r3, r2
 80131ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	f023 0320 	bic.w	r3, r3, #32
 80131d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	011b      	lsls	r3, r3, #4
 80131de:	697a      	ldr	r2, [r7, #20]
 80131e0:	4313      	orrs	r3, r2
 80131e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4a22      	ldr	r2, [pc, #136]	; (8013270 <TIM_OC2_SetConfig+0xe4>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d003      	beq.n	80131f4 <TIM_OC2_SetConfig+0x68>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4a21      	ldr	r2, [pc, #132]	; (8013274 <TIM_OC2_SetConfig+0xe8>)
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d10d      	bne.n	8013210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80131fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	68db      	ldr	r3, [r3, #12]
 8013200:	011b      	lsls	r3, r3, #4
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	4313      	orrs	r3, r2
 8013206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801320e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a17      	ldr	r2, [pc, #92]	; (8013270 <TIM_OC2_SetConfig+0xe4>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d003      	beq.n	8013220 <TIM_OC2_SetConfig+0x94>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a16      	ldr	r2, [pc, #88]	; (8013274 <TIM_OC2_SetConfig+0xe8>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d113      	bne.n	8013248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801322e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	695b      	ldr	r3, [r3, #20]
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4313      	orrs	r3, r2
 801323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	699b      	ldr	r3, [r3, #24]
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	693a      	ldr	r2, [r7, #16]
 8013244:	4313      	orrs	r3, r2
 8013246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	693a      	ldr	r2, [r7, #16]
 801324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	685a      	ldr	r2, [r3, #4]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	697a      	ldr	r2, [r7, #20]
 8013260:	621a      	str	r2, [r3, #32]
}
 8013262:	bf00      	nop
 8013264:	371c      	adds	r7, #28
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr
 801326e:	bf00      	nop
 8013270:	40010000 	.word	0x40010000
 8013274:	40010400 	.word	0x40010400

08013278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013278:	b480      	push	{r7}
 801327a:	b087      	sub	sp, #28
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6a1b      	ldr	r3, [r3, #32]
 8013286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6a1b      	ldr	r3, [r3, #32]
 8013292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	69db      	ldr	r3, [r3, #28]
 801329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f023 0303 	bic.w	r3, r3, #3
 80132ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	68fa      	ldr	r2, [r7, #12]
 80132b6:	4313      	orrs	r3, r2
 80132b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80132c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	021b      	lsls	r3, r3, #8
 80132c8:	697a      	ldr	r2, [r7, #20]
 80132ca:	4313      	orrs	r3, r2
 80132cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4a21      	ldr	r2, [pc, #132]	; (8013358 <TIM_OC3_SetConfig+0xe0>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d003      	beq.n	80132de <TIM_OC3_SetConfig+0x66>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4a20      	ldr	r2, [pc, #128]	; (801335c <TIM_OC3_SetConfig+0xe4>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	d10d      	bne.n	80132fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80132e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	68db      	ldr	r3, [r3, #12]
 80132ea:	021b      	lsls	r3, r3, #8
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	4313      	orrs	r3, r2
 80132f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80132f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	4a16      	ldr	r2, [pc, #88]	; (8013358 <TIM_OC3_SetConfig+0xe0>)
 80132fe:	4293      	cmp	r3, r2
 8013300:	d003      	beq.n	801330a <TIM_OC3_SetConfig+0x92>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4a15      	ldr	r2, [pc, #84]	; (801335c <TIM_OC3_SetConfig+0xe4>)
 8013306:	4293      	cmp	r3, r2
 8013308:	d113      	bne.n	8013332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	695b      	ldr	r3, [r3, #20]
 801331e:	011b      	lsls	r3, r3, #4
 8013320:	693a      	ldr	r2, [r7, #16]
 8013322:	4313      	orrs	r3, r2
 8013324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	011b      	lsls	r3, r3, #4
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	4313      	orrs	r3, r2
 8013330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	693a      	ldr	r2, [r7, #16]
 8013336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	685a      	ldr	r2, [r3, #4]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	621a      	str	r2, [r3, #32]
}
 801334c:	bf00      	nop
 801334e:	371c      	adds	r7, #28
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr
 8013358:	40010000 	.word	0x40010000
 801335c:	40010400 	.word	0x40010400

08013360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013360:	b480      	push	{r7}
 8013362:	b087      	sub	sp, #28
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a1b      	ldr	r3, [r3, #32]
 801336e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6a1b      	ldr	r3, [r3, #32]
 801337a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	69db      	ldr	r3, [r3, #28]
 8013386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	021b      	lsls	r3, r3, #8
 801339e:	68fa      	ldr	r2, [r7, #12]
 80133a0:	4313      	orrs	r3, r2
 80133a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80133aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	031b      	lsls	r3, r3, #12
 80133b2:	693a      	ldr	r2, [r7, #16]
 80133b4:	4313      	orrs	r3, r2
 80133b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	4a12      	ldr	r2, [pc, #72]	; (8013404 <TIM_OC4_SetConfig+0xa4>)
 80133bc:	4293      	cmp	r3, r2
 80133be:	d003      	beq.n	80133c8 <TIM_OC4_SetConfig+0x68>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	4a11      	ldr	r2, [pc, #68]	; (8013408 <TIM_OC4_SetConfig+0xa8>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d109      	bne.n	80133dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	695b      	ldr	r3, [r3, #20]
 80133d4:	019b      	lsls	r3, r3, #6
 80133d6:	697a      	ldr	r2, [r7, #20]
 80133d8:	4313      	orrs	r3, r2
 80133da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	685a      	ldr	r2, [r3, #4]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	693a      	ldr	r2, [r7, #16]
 80133f4:	621a      	str	r2, [r3, #32]
}
 80133f6:	bf00      	nop
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	40010000 	.word	0x40010000
 8013408:	40010400 	.word	0x40010400

0801340c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801340c:	b480      	push	{r7}
 801340e:	b087      	sub	sp, #28
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6a1b      	ldr	r3, [r3, #32]
 8013422:	f023 0201 	bic.w	r2, r3, #1
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	699b      	ldr	r3, [r3, #24]
 801342e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	011b      	lsls	r3, r3, #4
 801343c:	693a      	ldr	r2, [r7, #16]
 801343e:	4313      	orrs	r3, r2
 8013440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	f023 030a 	bic.w	r3, r3, #10
 8013448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	4313      	orrs	r3, r2
 8013450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	693a      	ldr	r2, [r7, #16]
 8013456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	697a      	ldr	r2, [r7, #20]
 801345c:	621a      	str	r2, [r3, #32]
}
 801345e:	bf00      	nop
 8013460:	371c      	adds	r7, #28
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr

0801346a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801346a:	b480      	push	{r7}
 801346c:	b087      	sub	sp, #28
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	60b9      	str	r1, [r7, #8]
 8013474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6a1b      	ldr	r3, [r3, #32]
 801347a:	f023 0210 	bic.w	r2, r3, #16
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	699b      	ldr	r3, [r3, #24]
 8013486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	6a1b      	ldr	r3, [r3, #32]
 801348c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	031b      	lsls	r3, r3, #12
 801349a:	697a      	ldr	r2, [r7, #20]
 801349c:	4313      	orrs	r3, r2
 801349e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80134a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	011b      	lsls	r3, r3, #4
 80134ac:	693a      	ldr	r2, [r7, #16]
 80134ae:	4313      	orrs	r3, r2
 80134b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	697a      	ldr	r2, [r7, #20]
 80134b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	693a      	ldr	r2, [r7, #16]
 80134bc:	621a      	str	r2, [r3, #32]
}
 80134be:	bf00      	nop
 80134c0:	371c      	adds	r7, #28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr

080134ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80134ca:	b480      	push	{r7}
 80134cc:	b085      	sub	sp, #20
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	6078      	str	r0, [r7, #4]
 80134d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80134e2:	683a      	ldr	r2, [r7, #0]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4313      	orrs	r3, r2
 80134e8:	f043 0307 	orr.w	r3, r3, #7
 80134ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	68fa      	ldr	r2, [r7, #12]
 80134f2:	609a      	str	r2, [r3, #8]
}
 80134f4:	bf00      	nop
 80134f6:	3714      	adds	r7, #20
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr

08013500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013500:	b480      	push	{r7}
 8013502:	b087      	sub	sp, #28
 8013504:	af00      	add	r7, sp, #0
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
 801350c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801351a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	021a      	lsls	r2, r3, #8
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	431a      	orrs	r2, r3
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	4313      	orrs	r3, r2
 8013528:	697a      	ldr	r2, [r7, #20]
 801352a:	4313      	orrs	r3, r2
 801352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	697a      	ldr	r2, [r7, #20]
 8013532:	609a      	str	r2, [r3, #8]
}
 8013534:	bf00      	nop
 8013536:	371c      	adds	r7, #28
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr

08013540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013540:	b480      	push	{r7}
 8013542:	b087      	sub	sp, #28
 8013544:	af00      	add	r7, sp, #0
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	f003 031f 	and.w	r3, r3, #31
 8013552:	2201      	movs	r2, #1
 8013554:	fa02 f303 	lsl.w	r3, r2, r3
 8013558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6a1a      	ldr	r2, [r3, #32]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	43db      	mvns	r3, r3
 8013562:	401a      	ands	r2, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	6a1a      	ldr	r2, [r3, #32]
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	f003 031f 	and.w	r3, r3, #31
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	fa01 f303 	lsl.w	r3, r1, r3
 8013578:	431a      	orrs	r2, r3
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	621a      	str	r2, [r3, #32]
}
 801357e:	bf00      	nop
 8013580:	371c      	adds	r7, #28
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801358a:	b580      	push	{r7, lr}
 801358c:	b084      	sub	sp, #16
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	2b04      	cmp	r3, #4
 8013598:	d00d      	beq.n	80135b6 <HAL_TIMEx_OCN_Start_IT+0x2c>
 801359a:	2b08      	cmp	r3, #8
 801359c:	d014      	beq.n	80135c8 <HAL_TIMEx_OCN_Start_IT+0x3e>
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d000      	beq.n	80135a4 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 80135a2:	e01a      	b.n	80135da <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	68da      	ldr	r2, [r3, #12]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f042 0202 	orr.w	r2, r2, #2
 80135b2:	60da      	str	r2, [r3, #12]
      break;
 80135b4:	e011      	b.n	80135da <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f042 0204 	orr.w	r2, r2, #4
 80135c4:	60da      	str	r2, [r3, #12]
      break;
 80135c6:	e008      	b.n	80135da <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68da      	ldr	r2, [r3, #12]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f042 0208 	orr.w	r2, r2, #8
 80135d6:	60da      	str	r2, [r3, #12]
      break;
 80135d8:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	68da      	ldr	r2, [r3, #12]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80135e8:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2204      	movs	r2, #4
 80135f0:	6839      	ldr	r1, [r7, #0]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 f976 	bl	80138e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013606:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	f003 0307 	and.w	r3, r3, #7
 8013612:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2b06      	cmp	r3, #6
 8013618:	d007      	beq.n	801362a <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	681a      	ldr	r2, [r3, #0]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f042 0201 	orr.w	r2, r2, #1
 8013628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801362a:	2300      	movs	r3, #0
}
 801362c:	4618      	mov	r0, r3
 801362e:	3710      	adds	r7, #16
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	2b04      	cmp	r3, #4
 8013642:	d00d      	beq.n	8013660 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8013644:	2b08      	cmp	r3, #8
 8013646:	d014      	beq.n	8013672 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8013648:	2b00      	cmp	r3, #0
 801364a:	d000      	beq.n	801364e <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 801364c:	e01a      	b.n	8013684 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	68da      	ldr	r2, [r3, #12]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f022 0202 	bic.w	r2, r2, #2
 801365c:	60da      	str	r2, [r3, #12]
      break;
 801365e:	e011      	b.n	8013684 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	68da      	ldr	r2, [r3, #12]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f022 0204 	bic.w	r2, r2, #4
 801366e:	60da      	str	r2, [r3, #12]
      break;
 8013670:	e008      	b.n	8013684 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	68da      	ldr	r2, [r3, #12]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	f022 0208 	bic.w	r2, r2, #8
 8013680:	60da      	str	r2, [r3, #12]
      break;
 8013682:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2200      	movs	r2, #0
 801368a:	6839      	ldr	r1, [r7, #0]
 801368c:	4618      	mov	r0, r3
 801368e:	f000 f929 	bl	80138e4 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	6a1b      	ldr	r3, [r3, #32]
 8013698:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	f240 4344 	movw	r3, #1092	; 0x444
 80136a0:	4013      	ands	r3, r2
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d107      	bne.n	80136b6 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	68da      	ldr	r2, [r3, #12]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80136b4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	6a1a      	ldr	r2, [r3, #32]
 80136bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80136c0:	4013      	ands	r3, r2
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d10f      	bne.n	80136e6 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	6a1a      	ldr	r2, [r3, #32]
 80136cc:	f240 4344 	movw	r3, #1092	; 0x444
 80136d0:	4013      	ands	r3, r2
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d107      	bne.n	80136e6 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80136e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	6a1a      	ldr	r2, [r3, #32]
 80136ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80136f0:	4013      	ands	r3, r2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d10f      	bne.n	8013716 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	6a1a      	ldr	r2, [r3, #32]
 80136fc:	f240 4344 	movw	r3, #1092	; 0x444
 8013700:	4013      	ands	r3, r2
 8013702:	2b00      	cmp	r3, #0
 8013704:	d107      	bne.n	8013716 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	681a      	ldr	r2, [r3, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f022 0201 	bic.w	r2, r2, #1
 8013714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013716:	2300      	movs	r3, #0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013730:	2b01      	cmp	r3, #1
 8013732:	d101      	bne.n	8013738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013734:	2302      	movs	r3, #2
 8013736:	e05a      	b.n	80137ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2201      	movs	r2, #1
 801373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2202      	movs	r2, #2
 8013744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	689b      	ldr	r3, [r3, #8]
 8013756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	4313      	orrs	r3, r2
 8013768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	68fa      	ldr	r2, [r7, #12]
 8013770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	4a21      	ldr	r2, [pc, #132]	; (80137fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d022      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013784:	d01d      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	4a1d      	ldr	r2, [pc, #116]	; (8013800 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801378c:	4293      	cmp	r3, r2
 801378e:	d018      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	4a1b      	ldr	r2, [pc, #108]	; (8013804 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d013      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	4a1a      	ldr	r2, [pc, #104]	; (8013808 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d00e      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4a18      	ldr	r2, [pc, #96]	; (801380c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d009      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	4a17      	ldr	r2, [pc, #92]	; (8013810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d004      	beq.n	80137c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a15      	ldr	r2, [pc, #84]	; (8013814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d10c      	bne.n	80137dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	4313      	orrs	r3, r2
 80137d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	68ba      	ldr	r2, [r7, #8]
 80137da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2201      	movs	r2, #1
 80137e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80137ec:	2300      	movs	r3, #0
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3714      	adds	r7, #20
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop
 80137fc:	40010000 	.word	0x40010000
 8013800:	40000400 	.word	0x40000400
 8013804:	40000800 	.word	0x40000800
 8013808:	40000c00 	.word	0x40000c00
 801380c:	40010400 	.word	0x40010400
 8013810:	40014000 	.word	0x40014000
 8013814:	40001800 	.word	0x40001800

08013818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013818:	b480      	push	{r7}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013822:	2300      	movs	r3, #0
 8013824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801382c:	2b01      	cmp	r3, #1
 801382e:	d101      	bne.n	8013834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013830:	2302      	movs	r3, #2
 8013832:	e03d      	b.n	80138b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2201      	movs	r2, #1
 8013838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	4313      	orrs	r3, r2
 8013848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	689b      	ldr	r3, [r3, #8]
 8013854:	4313      	orrs	r3, r2
 8013856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	4313      	orrs	r3, r2
 8013864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	4313      	orrs	r3, r2
 8013872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	4313      	orrs	r3, r2
 8013880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	695b      	ldr	r3, [r3, #20]
 801388c:	4313      	orrs	r3, r2
 801388e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	69db      	ldr	r3, [r3, #28]
 801389a:	4313      	orrs	r3, r2
 801389c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3714      	adds	r7, #20
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80138c4:	bf00      	nop
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80138d8:	bf00      	nop
 80138da:	370c      	adds	r7, #12
 80138dc:	46bd      	mov	sp, r7
 80138de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e2:	4770      	bx	lr

080138e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b087      	sub	sp, #28
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	f003 031f 	and.w	r3, r3, #31
 80138f6:	2204      	movs	r2, #4
 80138f8:	fa02 f303 	lsl.w	r3, r2, r3
 80138fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6a1a      	ldr	r2, [r3, #32]
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	43db      	mvns	r3, r3
 8013906:	401a      	ands	r2, r3
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	6a1a      	ldr	r2, [r3, #32]
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	f003 031f 	and.w	r3, r3, #31
 8013916:	6879      	ldr	r1, [r7, #4]
 8013918:	fa01 f303 	lsl.w	r3, r1, r3
 801391c:	431a      	orrs	r2, r3
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	621a      	str	r2, [r3, #32]
}
 8013922:	bf00      	nop
 8013924:	371c      	adds	r7, #28
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr

0801392e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801392e:	b580      	push	{r7, lr}
 8013930:	b082      	sub	sp, #8
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d101      	bne.n	8013940 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801393c:	2301      	movs	r3, #1
 801393e:	e03f      	b.n	80139c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7fa ffb1 	bl	800e8bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2224      	movs	r2, #36	; 0x24
 801395e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	68da      	ldr	r2, [r3, #12]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013970:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f000 f9b2 	bl	8013cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	691a      	ldr	r2, [r3, #16]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013986:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	695a      	ldr	r2, [r3, #20]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013996:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	68da      	ldr	r2, [r3, #12]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80139a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2220      	movs	r2, #32
 80139b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2220      	movs	r2, #32
 80139ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b088      	sub	sp, #32
 80139cc:	af02      	add	r7, sp, #8
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	4613      	mov	r3, r2
 80139d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80139d8:	2300      	movs	r3, #0
 80139da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	2b20      	cmp	r3, #32
 80139e6:	f040 8083 	bne.w	8013af0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d002      	beq.n	80139f6 <HAL_UART_Transmit+0x2e>
 80139f0:	88fb      	ldrh	r3, [r7, #6]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d101      	bne.n	80139fa <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80139f6:	2301      	movs	r3, #1
 80139f8:	e07b      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d101      	bne.n	8013a08 <HAL_UART_Transmit+0x40>
 8013a04:	2302      	movs	r3, #2
 8013a06:	e074      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2221      	movs	r2, #33	; 0x21
 8013a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8013a1e:	f7fb fd3d 	bl	800f49c <HAL_GetTick>
 8013a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	88fa      	ldrh	r2, [r7, #6]
 8013a28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	88fa      	ldrh	r2, [r7, #6]
 8013a2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2200      	movs	r2, #0
 8013a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8013a38:	e042      	b.n	8013ac0 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	3b01      	subs	r3, #1
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a50:	d122      	bne.n	8013a98 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2180      	movs	r1, #128	; 0x80
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f000 f8f2 	bl	8013c46 <UART_WaitOnFlagUntilTimeout>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d001      	beq.n	8013a6c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8013a68:	2303      	movs	r3, #3
 8013a6a:	e042      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	461a      	mov	r2, r3
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a7e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	691b      	ldr	r3, [r3, #16]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d103      	bne.n	8013a90 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	3302      	adds	r3, #2
 8013a8c:	60bb      	str	r3, [r7, #8]
 8013a8e:	e017      	b.n	8013ac0 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	3301      	adds	r3, #1
 8013a94:	60bb      	str	r3, [r7, #8]
 8013a96:	e013      	b.n	8013ac0 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	2180      	movs	r1, #128	; 0x80
 8013aa2:	68f8      	ldr	r0, [r7, #12]
 8013aa4:	f000 f8cf 	bl	8013c46 <UART_WaitOnFlagUntilTimeout>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d001      	beq.n	8013ab2 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	e01f      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	60ba      	str	r2, [r7, #8]
 8013ab8:	781a      	ldrb	r2, [r3, #0]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d1b7      	bne.n	8013a3a <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2140      	movs	r1, #64	; 0x40
 8013ad4:	68f8      	ldr	r0, [r7, #12]
 8013ad6:	f000 f8b6 	bl	8013c46 <UART_WaitOnFlagUntilTimeout>
 8013ada:	4603      	mov	r3, r0
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8013ae0:	2303      	movs	r3, #3
 8013ae2:	e006      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2220      	movs	r2, #32
 8013ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8013aec:	2300      	movs	r3, #0
 8013aee:	e000      	b.n	8013af2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8013af0:	2302      	movs	r3, #2
  }
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3718      	adds	r7, #24
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b088      	sub	sp, #32
 8013afe:	af02      	add	r7, sp, #8
 8013b00:	60f8      	str	r0, [r7, #12]
 8013b02:	60b9      	str	r1, [r7, #8]
 8013b04:	603b      	str	r3, [r7, #0]
 8013b06:	4613      	mov	r3, r2
 8013b08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	2b20      	cmp	r3, #32
 8013b18:	f040 8090 	bne.w	8013c3c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d002      	beq.n	8013b28 <HAL_UART_Receive+0x2e>
 8013b22:	88fb      	ldrh	r3, [r7, #6]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d101      	bne.n	8013b2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e088      	b.n	8013c3e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d101      	bne.n	8013b3a <HAL_UART_Receive+0x40>
 8013b36:	2302      	movs	r3, #2
 8013b38:	e081      	b.n	8013c3e <HAL_UART_Receive+0x144>
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2200      	movs	r2, #0
 8013b46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2222      	movs	r2, #34	; 0x22
 8013b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8013b50:	f7fb fca4 	bl	800f49c <HAL_GetTick>
 8013b54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	88fa      	ldrh	r2, [r7, #6]
 8013b5a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	88fa      	ldrh	r2, [r7, #6]
 8013b60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2200      	movs	r2, #0
 8013b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8013b6a:	e05c      	b.n	8013c26 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	3b01      	subs	r3, #1
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b82:	d12b      	bne.n	8013bdc <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	2120      	movs	r1, #32
 8013b8e:	68f8      	ldr	r0, [r7, #12]
 8013b90:	f000 f859 	bl	8013c46 <UART_WaitOnFlagUntilTimeout>
 8013b94:	4603      	mov	r3, r0
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d001      	beq.n	8013b9e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8013b9a:	2303      	movs	r3, #3
 8013b9c:	e04f      	b.n	8013c3e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	691b      	ldr	r3, [r3, #16]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10c      	bne.n	8013bc4 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	3302      	adds	r3, #2
 8013bc0:	60bb      	str	r3, [r7, #8]
 8013bc2:	e030      	b.n	8013c26 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	b2db      	uxtb	r3, r3
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	60bb      	str	r3, [r7, #8]
 8013bda:	e024      	b.n	8013c26 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	2200      	movs	r2, #0
 8013be4:	2120      	movs	r1, #32
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	f000 f82d 	bl	8013c46 <UART_WaitOnFlagUntilTimeout>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8013bf2:	2303      	movs	r3, #3
 8013bf4:	e023      	b.n	8013c3e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d108      	bne.n	8013c10 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	6859      	ldr	r1, [r3, #4]
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	1c5a      	adds	r2, r3, #1
 8013c08:	60ba      	str	r2, [r7, #8]
 8013c0a:	b2ca      	uxtb	r2, r1
 8013c0c:	701a      	strb	r2, [r3, #0]
 8013c0e:	e00a      	b.n	8013c26 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	b2da      	uxtb	r2, r3
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	1c59      	adds	r1, r3, #1
 8013c1c:	60b9      	str	r1, [r7, #8]
 8013c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013c22:	b2d2      	uxtb	r2, r2
 8013c24:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d19d      	bne.n	8013b6c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2220      	movs	r2, #32
 8013c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	e000      	b.n	8013c3e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8013c3c:	2302      	movs	r3, #2
  }
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}

08013c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8013c46:	b580      	push	{r7, lr}
 8013c48:	b084      	sub	sp, #16
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	60f8      	str	r0, [r7, #12]
 8013c4e:	60b9      	str	r1, [r7, #8]
 8013c50:	603b      	str	r3, [r7, #0]
 8013c52:	4613      	mov	r3, r2
 8013c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c56:	e02c      	b.n	8013cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c58:	69bb      	ldr	r3, [r7, #24]
 8013c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c5e:	d028      	beq.n	8013cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d007      	beq.n	8013c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c66:	f7fb fc19 	bl	800f49c <HAL_GetTick>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	69ba      	ldr	r2, [r7, #24]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d21d      	bcs.n	8013cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	68da      	ldr	r2, [r3, #12]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013c84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	695a      	ldr	r2, [r3, #20]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f022 0201 	bic.w	r2, r2, #1
 8013c94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2220      	movs	r2, #32
 8013c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2220      	movs	r2, #32
 8013ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8013cae:	2303      	movs	r3, #3
 8013cb0:	e00f      	b.n	8013cd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	4013      	ands	r3, r2
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	bf0c      	ite	eq
 8013cc2:	2301      	moveq	r3, #1
 8013cc4:	2300      	movne	r3, #0
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	461a      	mov	r2, r3
 8013cca:	79fb      	ldrb	r3, [r7, #7]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d0c3      	beq.n	8013c58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
	...

08013cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce0:	b085      	sub	sp, #20
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	691b      	ldr	r3, [r3, #16]
 8013cec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	68da      	ldr	r2, [r3, #12]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	430a      	orrs	r2, r1
 8013cfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	689a      	ldr	r2, [r3, #8]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	431a      	orrs	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	695b      	ldr	r3, [r3, #20]
 8013d0a:	431a      	orrs	r2, r3
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	69db      	ldr	r3, [r3, #28]
 8013d10:	4313      	orrs	r3, r2
 8013d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	68db      	ldr	r3, [r3, #12]
 8013d1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013d1e:	f023 030c 	bic.w	r3, r3, #12
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	6812      	ldr	r2, [r2, #0]
 8013d26:	68f9      	ldr	r1, [r7, #12]
 8013d28:	430b      	orrs	r3, r1
 8013d2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	699a      	ldr	r2, [r3, #24]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	430a      	orrs	r2, r1
 8013d40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	69db      	ldr	r3, [r3, #28]
 8013d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d4a:	f040 818b 	bne.w	8014064 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	4ac1      	ldr	r2, [pc, #772]	; (8014058 <UART_SetConfig+0x37c>)
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d005      	beq.n	8013d64 <UART_SetConfig+0x88>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4abf      	ldr	r2, [pc, #764]	; (801405c <UART_SetConfig+0x380>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	f040 80bd 	bne.w	8013ede <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013d64:	f7fd fce2 	bl	801172c <HAL_RCC_GetPCLK2Freq>
 8013d68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	461d      	mov	r5, r3
 8013d6e:	f04f 0600 	mov.w	r6, #0
 8013d72:	46a8      	mov	r8, r5
 8013d74:	46b1      	mov	r9, r6
 8013d76:	eb18 0308 	adds.w	r3, r8, r8
 8013d7a:	eb49 0409 	adc.w	r4, r9, r9
 8013d7e:	4698      	mov	r8, r3
 8013d80:	46a1      	mov	r9, r4
 8013d82:	eb18 0805 	adds.w	r8, r8, r5
 8013d86:	eb49 0906 	adc.w	r9, r9, r6
 8013d8a:	f04f 0100 	mov.w	r1, #0
 8013d8e:	f04f 0200 	mov.w	r2, #0
 8013d92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013d96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013d9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013d9e:	4688      	mov	r8, r1
 8013da0:	4691      	mov	r9, r2
 8013da2:	eb18 0005 	adds.w	r0, r8, r5
 8013da6:	eb49 0106 	adc.w	r1, r9, r6
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	461d      	mov	r5, r3
 8013db0:	f04f 0600 	mov.w	r6, #0
 8013db4:	196b      	adds	r3, r5, r5
 8013db6:	eb46 0406 	adc.w	r4, r6, r6
 8013dba:	461a      	mov	r2, r3
 8013dbc:	4623      	mov	r3, r4
 8013dbe:	f7f4 fe9b 	bl	8008af8 <__aeabi_uldivmod>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	4ba5      	ldr	r3, [pc, #660]	; (8014060 <UART_SetConfig+0x384>)
 8013dca:	fba3 2302 	umull	r2, r3, r3, r2
 8013dce:	095b      	lsrs	r3, r3, #5
 8013dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	461d      	mov	r5, r3
 8013dd8:	f04f 0600 	mov.w	r6, #0
 8013ddc:	46a9      	mov	r9, r5
 8013dde:	46b2      	mov	sl, r6
 8013de0:	eb19 0309 	adds.w	r3, r9, r9
 8013de4:	eb4a 040a 	adc.w	r4, sl, sl
 8013de8:	4699      	mov	r9, r3
 8013dea:	46a2      	mov	sl, r4
 8013dec:	eb19 0905 	adds.w	r9, r9, r5
 8013df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8013df4:	f04f 0100 	mov.w	r1, #0
 8013df8:	f04f 0200 	mov.w	r2, #0
 8013dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013e08:	4689      	mov	r9, r1
 8013e0a:	4692      	mov	sl, r2
 8013e0c:	eb19 0005 	adds.w	r0, r9, r5
 8013e10:	eb4a 0106 	adc.w	r1, sl, r6
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	461d      	mov	r5, r3
 8013e1a:	f04f 0600 	mov.w	r6, #0
 8013e1e:	196b      	adds	r3, r5, r5
 8013e20:	eb46 0406 	adc.w	r4, r6, r6
 8013e24:	461a      	mov	r2, r3
 8013e26:	4623      	mov	r3, r4
 8013e28:	f7f4 fe66 	bl	8008af8 <__aeabi_uldivmod>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	460c      	mov	r4, r1
 8013e30:	461a      	mov	r2, r3
 8013e32:	4b8b      	ldr	r3, [pc, #556]	; (8014060 <UART_SetConfig+0x384>)
 8013e34:	fba3 1302 	umull	r1, r3, r3, r2
 8013e38:	095b      	lsrs	r3, r3, #5
 8013e3a:	2164      	movs	r1, #100	; 0x64
 8013e3c:	fb01 f303 	mul.w	r3, r1, r3
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	3332      	adds	r3, #50	; 0x32
 8013e46:	4a86      	ldr	r2, [pc, #536]	; (8014060 <UART_SetConfig+0x384>)
 8013e48:	fba2 2303 	umull	r2, r3, r2, r3
 8013e4c:	095b      	lsrs	r3, r3, #5
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013e54:	4498      	add	r8, r3
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	461d      	mov	r5, r3
 8013e5a:	f04f 0600 	mov.w	r6, #0
 8013e5e:	46a9      	mov	r9, r5
 8013e60:	46b2      	mov	sl, r6
 8013e62:	eb19 0309 	adds.w	r3, r9, r9
 8013e66:	eb4a 040a 	adc.w	r4, sl, sl
 8013e6a:	4699      	mov	r9, r3
 8013e6c:	46a2      	mov	sl, r4
 8013e6e:	eb19 0905 	adds.w	r9, r9, r5
 8013e72:	eb4a 0a06 	adc.w	sl, sl, r6
 8013e76:	f04f 0100 	mov.w	r1, #0
 8013e7a:	f04f 0200 	mov.w	r2, #0
 8013e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013e82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013e86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013e8a:	4689      	mov	r9, r1
 8013e8c:	4692      	mov	sl, r2
 8013e8e:	eb19 0005 	adds.w	r0, r9, r5
 8013e92:	eb4a 0106 	adc.w	r1, sl, r6
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	461d      	mov	r5, r3
 8013e9c:	f04f 0600 	mov.w	r6, #0
 8013ea0:	196b      	adds	r3, r5, r5
 8013ea2:	eb46 0406 	adc.w	r4, r6, r6
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	4623      	mov	r3, r4
 8013eaa:	f7f4 fe25 	bl	8008af8 <__aeabi_uldivmod>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	4b6a      	ldr	r3, [pc, #424]	; (8014060 <UART_SetConfig+0x384>)
 8013eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8013eba:	095b      	lsrs	r3, r3, #5
 8013ebc:	2164      	movs	r1, #100	; 0x64
 8013ebe:	fb01 f303 	mul.w	r3, r1, r3
 8013ec2:	1ad3      	subs	r3, r2, r3
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	3332      	adds	r3, #50	; 0x32
 8013ec8:	4a65      	ldr	r2, [pc, #404]	; (8014060 <UART_SetConfig+0x384>)
 8013eca:	fba2 2303 	umull	r2, r3, r2, r3
 8013ece:	095b      	lsrs	r3, r3, #5
 8013ed0:	f003 0207 	and.w	r2, r3, #7
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	4442      	add	r2, r8
 8013eda:	609a      	str	r2, [r3, #8]
 8013edc:	e26f      	b.n	80143be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013ede:	f7fd fc11 	bl	8011704 <HAL_RCC_GetPCLK1Freq>
 8013ee2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	461d      	mov	r5, r3
 8013ee8:	f04f 0600 	mov.w	r6, #0
 8013eec:	46a8      	mov	r8, r5
 8013eee:	46b1      	mov	r9, r6
 8013ef0:	eb18 0308 	adds.w	r3, r8, r8
 8013ef4:	eb49 0409 	adc.w	r4, r9, r9
 8013ef8:	4698      	mov	r8, r3
 8013efa:	46a1      	mov	r9, r4
 8013efc:	eb18 0805 	adds.w	r8, r8, r5
 8013f00:	eb49 0906 	adc.w	r9, r9, r6
 8013f04:	f04f 0100 	mov.w	r1, #0
 8013f08:	f04f 0200 	mov.w	r2, #0
 8013f0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013f10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013f14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013f18:	4688      	mov	r8, r1
 8013f1a:	4691      	mov	r9, r2
 8013f1c:	eb18 0005 	adds.w	r0, r8, r5
 8013f20:	eb49 0106 	adc.w	r1, r9, r6
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	461d      	mov	r5, r3
 8013f2a:	f04f 0600 	mov.w	r6, #0
 8013f2e:	196b      	adds	r3, r5, r5
 8013f30:	eb46 0406 	adc.w	r4, r6, r6
 8013f34:	461a      	mov	r2, r3
 8013f36:	4623      	mov	r3, r4
 8013f38:	f7f4 fdde 	bl	8008af8 <__aeabi_uldivmod>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	461a      	mov	r2, r3
 8013f42:	4b47      	ldr	r3, [pc, #284]	; (8014060 <UART_SetConfig+0x384>)
 8013f44:	fba3 2302 	umull	r2, r3, r3, r2
 8013f48:	095b      	lsrs	r3, r3, #5
 8013f4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	461d      	mov	r5, r3
 8013f52:	f04f 0600 	mov.w	r6, #0
 8013f56:	46a9      	mov	r9, r5
 8013f58:	46b2      	mov	sl, r6
 8013f5a:	eb19 0309 	adds.w	r3, r9, r9
 8013f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8013f62:	4699      	mov	r9, r3
 8013f64:	46a2      	mov	sl, r4
 8013f66:	eb19 0905 	adds.w	r9, r9, r5
 8013f6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8013f6e:	f04f 0100 	mov.w	r1, #0
 8013f72:	f04f 0200 	mov.w	r2, #0
 8013f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013f82:	4689      	mov	r9, r1
 8013f84:	4692      	mov	sl, r2
 8013f86:	eb19 0005 	adds.w	r0, r9, r5
 8013f8a:	eb4a 0106 	adc.w	r1, sl, r6
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	461d      	mov	r5, r3
 8013f94:	f04f 0600 	mov.w	r6, #0
 8013f98:	196b      	adds	r3, r5, r5
 8013f9a:	eb46 0406 	adc.w	r4, r6, r6
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	4623      	mov	r3, r4
 8013fa2:	f7f4 fda9 	bl	8008af8 <__aeabi_uldivmod>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	460c      	mov	r4, r1
 8013faa:	461a      	mov	r2, r3
 8013fac:	4b2c      	ldr	r3, [pc, #176]	; (8014060 <UART_SetConfig+0x384>)
 8013fae:	fba3 1302 	umull	r1, r3, r3, r2
 8013fb2:	095b      	lsrs	r3, r3, #5
 8013fb4:	2164      	movs	r1, #100	; 0x64
 8013fb6:	fb01 f303 	mul.w	r3, r1, r3
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	3332      	adds	r3, #50	; 0x32
 8013fc0:	4a27      	ldr	r2, [pc, #156]	; (8014060 <UART_SetConfig+0x384>)
 8013fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8013fc6:	095b      	lsrs	r3, r3, #5
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013fce:	4498      	add	r8, r3
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	461d      	mov	r5, r3
 8013fd4:	f04f 0600 	mov.w	r6, #0
 8013fd8:	46a9      	mov	r9, r5
 8013fda:	46b2      	mov	sl, r6
 8013fdc:	eb19 0309 	adds.w	r3, r9, r9
 8013fe0:	eb4a 040a 	adc.w	r4, sl, sl
 8013fe4:	4699      	mov	r9, r3
 8013fe6:	46a2      	mov	sl, r4
 8013fe8:	eb19 0905 	adds.w	r9, r9, r5
 8013fec:	eb4a 0a06 	adc.w	sl, sl, r6
 8013ff0:	f04f 0100 	mov.w	r1, #0
 8013ff4:	f04f 0200 	mov.w	r2, #0
 8013ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014004:	4689      	mov	r9, r1
 8014006:	4692      	mov	sl, r2
 8014008:	eb19 0005 	adds.w	r0, r9, r5
 801400c:	eb4a 0106 	adc.w	r1, sl, r6
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	461d      	mov	r5, r3
 8014016:	f04f 0600 	mov.w	r6, #0
 801401a:	196b      	adds	r3, r5, r5
 801401c:	eb46 0406 	adc.w	r4, r6, r6
 8014020:	461a      	mov	r2, r3
 8014022:	4623      	mov	r3, r4
 8014024:	f7f4 fd68 	bl	8008af8 <__aeabi_uldivmod>
 8014028:	4603      	mov	r3, r0
 801402a:	460c      	mov	r4, r1
 801402c:	461a      	mov	r2, r3
 801402e:	4b0c      	ldr	r3, [pc, #48]	; (8014060 <UART_SetConfig+0x384>)
 8014030:	fba3 1302 	umull	r1, r3, r3, r2
 8014034:	095b      	lsrs	r3, r3, #5
 8014036:	2164      	movs	r1, #100	; 0x64
 8014038:	fb01 f303 	mul.w	r3, r1, r3
 801403c:	1ad3      	subs	r3, r2, r3
 801403e:	00db      	lsls	r3, r3, #3
 8014040:	3332      	adds	r3, #50	; 0x32
 8014042:	4a07      	ldr	r2, [pc, #28]	; (8014060 <UART_SetConfig+0x384>)
 8014044:	fba2 2303 	umull	r2, r3, r2, r3
 8014048:	095b      	lsrs	r3, r3, #5
 801404a:	f003 0207 	and.w	r2, r3, #7
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4442      	add	r2, r8
 8014054:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8014056:	e1b2      	b.n	80143be <UART_SetConfig+0x6e2>
 8014058:	40011000 	.word	0x40011000
 801405c:	40011400 	.word	0x40011400
 8014060:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4ad7      	ldr	r2, [pc, #860]	; (80143c8 <UART_SetConfig+0x6ec>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d005      	beq.n	801407a <UART_SetConfig+0x39e>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4ad6      	ldr	r2, [pc, #856]	; (80143cc <UART_SetConfig+0x6f0>)
 8014074:	4293      	cmp	r3, r2
 8014076:	f040 80d1 	bne.w	801421c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801407a:	f7fd fb57 	bl	801172c <HAL_RCC_GetPCLK2Freq>
 801407e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	469a      	mov	sl, r3
 8014084:	f04f 0b00 	mov.w	fp, #0
 8014088:	46d0      	mov	r8, sl
 801408a:	46d9      	mov	r9, fp
 801408c:	eb18 0308 	adds.w	r3, r8, r8
 8014090:	eb49 0409 	adc.w	r4, r9, r9
 8014094:	4698      	mov	r8, r3
 8014096:	46a1      	mov	r9, r4
 8014098:	eb18 080a 	adds.w	r8, r8, sl
 801409c:	eb49 090b 	adc.w	r9, r9, fp
 80140a0:	f04f 0100 	mov.w	r1, #0
 80140a4:	f04f 0200 	mov.w	r2, #0
 80140a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80140ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80140b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80140b4:	4688      	mov	r8, r1
 80140b6:	4691      	mov	r9, r2
 80140b8:	eb1a 0508 	adds.w	r5, sl, r8
 80140bc:	eb4b 0609 	adc.w	r6, fp, r9
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	4619      	mov	r1, r3
 80140c6:	f04f 0200 	mov.w	r2, #0
 80140ca:	f04f 0300 	mov.w	r3, #0
 80140ce:	f04f 0400 	mov.w	r4, #0
 80140d2:	0094      	lsls	r4, r2, #2
 80140d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80140d8:	008b      	lsls	r3, r1, #2
 80140da:	461a      	mov	r2, r3
 80140dc:	4623      	mov	r3, r4
 80140de:	4628      	mov	r0, r5
 80140e0:	4631      	mov	r1, r6
 80140e2:	f7f4 fd09 	bl	8008af8 <__aeabi_uldivmod>
 80140e6:	4603      	mov	r3, r0
 80140e8:	460c      	mov	r4, r1
 80140ea:	461a      	mov	r2, r3
 80140ec:	4bb8      	ldr	r3, [pc, #736]	; (80143d0 <UART_SetConfig+0x6f4>)
 80140ee:	fba3 2302 	umull	r2, r3, r3, r2
 80140f2:	095b      	lsrs	r3, r3, #5
 80140f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	469b      	mov	fp, r3
 80140fc:	f04f 0c00 	mov.w	ip, #0
 8014100:	46d9      	mov	r9, fp
 8014102:	46e2      	mov	sl, ip
 8014104:	eb19 0309 	adds.w	r3, r9, r9
 8014108:	eb4a 040a 	adc.w	r4, sl, sl
 801410c:	4699      	mov	r9, r3
 801410e:	46a2      	mov	sl, r4
 8014110:	eb19 090b 	adds.w	r9, r9, fp
 8014114:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014118:	f04f 0100 	mov.w	r1, #0
 801411c:	f04f 0200 	mov.w	r2, #0
 8014120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014124:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014128:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801412c:	4689      	mov	r9, r1
 801412e:	4692      	mov	sl, r2
 8014130:	eb1b 0509 	adds.w	r5, fp, r9
 8014134:	eb4c 060a 	adc.w	r6, ip, sl
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	4619      	mov	r1, r3
 801413e:	f04f 0200 	mov.w	r2, #0
 8014142:	f04f 0300 	mov.w	r3, #0
 8014146:	f04f 0400 	mov.w	r4, #0
 801414a:	0094      	lsls	r4, r2, #2
 801414c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014150:	008b      	lsls	r3, r1, #2
 8014152:	461a      	mov	r2, r3
 8014154:	4623      	mov	r3, r4
 8014156:	4628      	mov	r0, r5
 8014158:	4631      	mov	r1, r6
 801415a:	f7f4 fccd 	bl	8008af8 <__aeabi_uldivmod>
 801415e:	4603      	mov	r3, r0
 8014160:	460c      	mov	r4, r1
 8014162:	461a      	mov	r2, r3
 8014164:	4b9a      	ldr	r3, [pc, #616]	; (80143d0 <UART_SetConfig+0x6f4>)
 8014166:	fba3 1302 	umull	r1, r3, r3, r2
 801416a:	095b      	lsrs	r3, r3, #5
 801416c:	2164      	movs	r1, #100	; 0x64
 801416e:	fb01 f303 	mul.w	r3, r1, r3
 8014172:	1ad3      	subs	r3, r2, r3
 8014174:	011b      	lsls	r3, r3, #4
 8014176:	3332      	adds	r3, #50	; 0x32
 8014178:	4a95      	ldr	r2, [pc, #596]	; (80143d0 <UART_SetConfig+0x6f4>)
 801417a:	fba2 2303 	umull	r2, r3, r2, r3
 801417e:	095b      	lsrs	r3, r3, #5
 8014180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014184:	4498      	add	r8, r3
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	469b      	mov	fp, r3
 801418a:	f04f 0c00 	mov.w	ip, #0
 801418e:	46d9      	mov	r9, fp
 8014190:	46e2      	mov	sl, ip
 8014192:	eb19 0309 	adds.w	r3, r9, r9
 8014196:	eb4a 040a 	adc.w	r4, sl, sl
 801419a:	4699      	mov	r9, r3
 801419c:	46a2      	mov	sl, r4
 801419e:	eb19 090b 	adds.w	r9, r9, fp
 80141a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80141a6:	f04f 0100 	mov.w	r1, #0
 80141aa:	f04f 0200 	mov.w	r2, #0
 80141ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80141b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80141b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80141ba:	4689      	mov	r9, r1
 80141bc:	4692      	mov	sl, r2
 80141be:	eb1b 0509 	adds.w	r5, fp, r9
 80141c2:	eb4c 060a 	adc.w	r6, ip, sl
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	4619      	mov	r1, r3
 80141cc:	f04f 0200 	mov.w	r2, #0
 80141d0:	f04f 0300 	mov.w	r3, #0
 80141d4:	f04f 0400 	mov.w	r4, #0
 80141d8:	0094      	lsls	r4, r2, #2
 80141da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80141de:	008b      	lsls	r3, r1, #2
 80141e0:	461a      	mov	r2, r3
 80141e2:	4623      	mov	r3, r4
 80141e4:	4628      	mov	r0, r5
 80141e6:	4631      	mov	r1, r6
 80141e8:	f7f4 fc86 	bl	8008af8 <__aeabi_uldivmod>
 80141ec:	4603      	mov	r3, r0
 80141ee:	460c      	mov	r4, r1
 80141f0:	461a      	mov	r2, r3
 80141f2:	4b77      	ldr	r3, [pc, #476]	; (80143d0 <UART_SetConfig+0x6f4>)
 80141f4:	fba3 1302 	umull	r1, r3, r3, r2
 80141f8:	095b      	lsrs	r3, r3, #5
 80141fa:	2164      	movs	r1, #100	; 0x64
 80141fc:	fb01 f303 	mul.w	r3, r1, r3
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	011b      	lsls	r3, r3, #4
 8014204:	3332      	adds	r3, #50	; 0x32
 8014206:	4a72      	ldr	r2, [pc, #456]	; (80143d0 <UART_SetConfig+0x6f4>)
 8014208:	fba2 2303 	umull	r2, r3, r2, r3
 801420c:	095b      	lsrs	r3, r3, #5
 801420e:	f003 020f 	and.w	r2, r3, #15
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4442      	add	r2, r8
 8014218:	609a      	str	r2, [r3, #8]
 801421a:	e0d0      	b.n	80143be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801421c:	f7fd fa72 	bl	8011704 <HAL_RCC_GetPCLK1Freq>
 8014220:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	469a      	mov	sl, r3
 8014226:	f04f 0b00 	mov.w	fp, #0
 801422a:	46d0      	mov	r8, sl
 801422c:	46d9      	mov	r9, fp
 801422e:	eb18 0308 	adds.w	r3, r8, r8
 8014232:	eb49 0409 	adc.w	r4, r9, r9
 8014236:	4698      	mov	r8, r3
 8014238:	46a1      	mov	r9, r4
 801423a:	eb18 080a 	adds.w	r8, r8, sl
 801423e:	eb49 090b 	adc.w	r9, r9, fp
 8014242:	f04f 0100 	mov.w	r1, #0
 8014246:	f04f 0200 	mov.w	r2, #0
 801424a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801424e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014252:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014256:	4688      	mov	r8, r1
 8014258:	4691      	mov	r9, r2
 801425a:	eb1a 0508 	adds.w	r5, sl, r8
 801425e:	eb4b 0609 	adc.w	r6, fp, r9
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	4619      	mov	r1, r3
 8014268:	f04f 0200 	mov.w	r2, #0
 801426c:	f04f 0300 	mov.w	r3, #0
 8014270:	f04f 0400 	mov.w	r4, #0
 8014274:	0094      	lsls	r4, r2, #2
 8014276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801427a:	008b      	lsls	r3, r1, #2
 801427c:	461a      	mov	r2, r3
 801427e:	4623      	mov	r3, r4
 8014280:	4628      	mov	r0, r5
 8014282:	4631      	mov	r1, r6
 8014284:	f7f4 fc38 	bl	8008af8 <__aeabi_uldivmod>
 8014288:	4603      	mov	r3, r0
 801428a:	460c      	mov	r4, r1
 801428c:	461a      	mov	r2, r3
 801428e:	4b50      	ldr	r3, [pc, #320]	; (80143d0 <UART_SetConfig+0x6f4>)
 8014290:	fba3 2302 	umull	r2, r3, r3, r2
 8014294:	095b      	lsrs	r3, r3, #5
 8014296:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	469b      	mov	fp, r3
 801429e:	f04f 0c00 	mov.w	ip, #0
 80142a2:	46d9      	mov	r9, fp
 80142a4:	46e2      	mov	sl, ip
 80142a6:	eb19 0309 	adds.w	r3, r9, r9
 80142aa:	eb4a 040a 	adc.w	r4, sl, sl
 80142ae:	4699      	mov	r9, r3
 80142b0:	46a2      	mov	sl, r4
 80142b2:	eb19 090b 	adds.w	r9, r9, fp
 80142b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80142ba:	f04f 0100 	mov.w	r1, #0
 80142be:	f04f 0200 	mov.w	r2, #0
 80142c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80142c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80142ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80142ce:	4689      	mov	r9, r1
 80142d0:	4692      	mov	sl, r2
 80142d2:	eb1b 0509 	adds.w	r5, fp, r9
 80142d6:	eb4c 060a 	adc.w	r6, ip, sl
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	4619      	mov	r1, r3
 80142e0:	f04f 0200 	mov.w	r2, #0
 80142e4:	f04f 0300 	mov.w	r3, #0
 80142e8:	f04f 0400 	mov.w	r4, #0
 80142ec:	0094      	lsls	r4, r2, #2
 80142ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80142f2:	008b      	lsls	r3, r1, #2
 80142f4:	461a      	mov	r2, r3
 80142f6:	4623      	mov	r3, r4
 80142f8:	4628      	mov	r0, r5
 80142fa:	4631      	mov	r1, r6
 80142fc:	f7f4 fbfc 	bl	8008af8 <__aeabi_uldivmod>
 8014300:	4603      	mov	r3, r0
 8014302:	460c      	mov	r4, r1
 8014304:	461a      	mov	r2, r3
 8014306:	4b32      	ldr	r3, [pc, #200]	; (80143d0 <UART_SetConfig+0x6f4>)
 8014308:	fba3 1302 	umull	r1, r3, r3, r2
 801430c:	095b      	lsrs	r3, r3, #5
 801430e:	2164      	movs	r1, #100	; 0x64
 8014310:	fb01 f303 	mul.w	r3, r1, r3
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	011b      	lsls	r3, r3, #4
 8014318:	3332      	adds	r3, #50	; 0x32
 801431a:	4a2d      	ldr	r2, [pc, #180]	; (80143d0 <UART_SetConfig+0x6f4>)
 801431c:	fba2 2303 	umull	r2, r3, r2, r3
 8014320:	095b      	lsrs	r3, r3, #5
 8014322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014326:	4498      	add	r8, r3
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	469b      	mov	fp, r3
 801432c:	f04f 0c00 	mov.w	ip, #0
 8014330:	46d9      	mov	r9, fp
 8014332:	46e2      	mov	sl, ip
 8014334:	eb19 0309 	adds.w	r3, r9, r9
 8014338:	eb4a 040a 	adc.w	r4, sl, sl
 801433c:	4699      	mov	r9, r3
 801433e:	46a2      	mov	sl, r4
 8014340:	eb19 090b 	adds.w	r9, r9, fp
 8014344:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014348:	f04f 0100 	mov.w	r1, #0
 801434c:	f04f 0200 	mov.w	r2, #0
 8014350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014354:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014358:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801435c:	4689      	mov	r9, r1
 801435e:	4692      	mov	sl, r2
 8014360:	eb1b 0509 	adds.w	r5, fp, r9
 8014364:	eb4c 060a 	adc.w	r6, ip, sl
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	4619      	mov	r1, r3
 801436e:	f04f 0200 	mov.w	r2, #0
 8014372:	f04f 0300 	mov.w	r3, #0
 8014376:	f04f 0400 	mov.w	r4, #0
 801437a:	0094      	lsls	r4, r2, #2
 801437c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014380:	008b      	lsls	r3, r1, #2
 8014382:	461a      	mov	r2, r3
 8014384:	4623      	mov	r3, r4
 8014386:	4628      	mov	r0, r5
 8014388:	4631      	mov	r1, r6
 801438a:	f7f4 fbb5 	bl	8008af8 <__aeabi_uldivmod>
 801438e:	4603      	mov	r3, r0
 8014390:	460c      	mov	r4, r1
 8014392:	461a      	mov	r2, r3
 8014394:	4b0e      	ldr	r3, [pc, #56]	; (80143d0 <UART_SetConfig+0x6f4>)
 8014396:	fba3 1302 	umull	r1, r3, r3, r2
 801439a:	095b      	lsrs	r3, r3, #5
 801439c:	2164      	movs	r1, #100	; 0x64
 801439e:	fb01 f303 	mul.w	r3, r1, r3
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	011b      	lsls	r3, r3, #4
 80143a6:	3332      	adds	r3, #50	; 0x32
 80143a8:	4a09      	ldr	r2, [pc, #36]	; (80143d0 <UART_SetConfig+0x6f4>)
 80143aa:	fba2 2303 	umull	r2, r3, r2, r3
 80143ae:	095b      	lsrs	r3, r3, #5
 80143b0:	f003 020f 	and.w	r2, r3, #15
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	4442      	add	r2, r8
 80143ba:	609a      	str	r2, [r3, #8]
}
 80143bc:	e7ff      	b.n	80143be <UART_SetConfig+0x6e2>
 80143be:	bf00      	nop
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c8:	40011000 	.word	0x40011000
 80143cc:	40011400 	.word	0x40011400
 80143d0:	51eb851f 	.word	0x51eb851f

080143d4 <round>:
 80143d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d6:	ec57 6b10 	vmov	r6, r7, d0
 80143da:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80143de:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80143e2:	2c13      	cmp	r4, #19
 80143e4:	463b      	mov	r3, r7
 80143e6:	463d      	mov	r5, r7
 80143e8:	dc17      	bgt.n	801441a <round+0x46>
 80143ea:	2c00      	cmp	r4, #0
 80143ec:	da09      	bge.n	8014402 <round+0x2e>
 80143ee:	3401      	adds	r4, #1
 80143f0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80143f4:	d103      	bne.n	80143fe <round+0x2a>
 80143f6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80143fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80143fe:	2100      	movs	r1, #0
 8014400:	e02c      	b.n	801445c <round+0x88>
 8014402:	4a18      	ldr	r2, [pc, #96]	; (8014464 <round+0x90>)
 8014404:	4122      	asrs	r2, r4
 8014406:	4217      	tst	r7, r2
 8014408:	d100      	bne.n	801440c <round+0x38>
 801440a:	b19e      	cbz	r6, 8014434 <round+0x60>
 801440c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014410:	4123      	asrs	r3, r4
 8014412:	442b      	add	r3, r5
 8014414:	ea23 0302 	bic.w	r3, r3, r2
 8014418:	e7f1      	b.n	80143fe <round+0x2a>
 801441a:	2c33      	cmp	r4, #51	; 0x33
 801441c:	dd0d      	ble.n	801443a <round+0x66>
 801441e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014422:	d107      	bne.n	8014434 <round+0x60>
 8014424:	4630      	mov	r0, r6
 8014426:	4639      	mov	r1, r7
 8014428:	ee10 2a10 	vmov	r2, s0
 801442c:	f7f3 fe66 	bl	80080fc <__adddf3>
 8014430:	4606      	mov	r6, r0
 8014432:	460f      	mov	r7, r1
 8014434:	ec47 6b10 	vmov	d0, r6, r7
 8014438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801443a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801443e:	f04f 30ff 	mov.w	r0, #4294967295
 8014442:	40d0      	lsrs	r0, r2
 8014444:	4206      	tst	r6, r0
 8014446:	d0f5      	beq.n	8014434 <round+0x60>
 8014448:	2201      	movs	r2, #1
 801444a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801444e:	fa02 f404 	lsl.w	r4, r2, r4
 8014452:	1931      	adds	r1, r6, r4
 8014454:	bf28      	it	cs
 8014456:	189b      	addcs	r3, r3, r2
 8014458:	ea21 0100 	bic.w	r1, r1, r0
 801445c:	461f      	mov	r7, r3
 801445e:	460e      	mov	r6, r1
 8014460:	e7e8      	b.n	8014434 <round+0x60>
 8014462:	bf00      	nop
 8014464:	000fffff 	.word	0x000fffff

08014468 <__errno>:
 8014468:	4b01      	ldr	r3, [pc, #4]	; (8014470 <__errno+0x8>)
 801446a:	6818      	ldr	r0, [r3, #0]
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	20000028 	.word	0x20000028

08014474 <__libc_init_array>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	4e0d      	ldr	r6, [pc, #52]	; (80144ac <__libc_init_array+0x38>)
 8014478:	4c0d      	ldr	r4, [pc, #52]	; (80144b0 <__libc_init_array+0x3c>)
 801447a:	1ba4      	subs	r4, r4, r6
 801447c:	10a4      	asrs	r4, r4, #2
 801447e:	2500      	movs	r5, #0
 8014480:	42a5      	cmp	r5, r4
 8014482:	d109      	bne.n	8014498 <__libc_init_array+0x24>
 8014484:	4e0b      	ldr	r6, [pc, #44]	; (80144b4 <__libc_init_array+0x40>)
 8014486:	4c0c      	ldr	r4, [pc, #48]	; (80144b8 <__libc_init_array+0x44>)
 8014488:	f005 f884 	bl	8019594 <_init>
 801448c:	1ba4      	subs	r4, r4, r6
 801448e:	10a4      	asrs	r4, r4, #2
 8014490:	2500      	movs	r5, #0
 8014492:	42a5      	cmp	r5, r4
 8014494:	d105      	bne.n	80144a2 <__libc_init_array+0x2e>
 8014496:	bd70      	pop	{r4, r5, r6, pc}
 8014498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801449c:	4798      	blx	r3
 801449e:	3501      	adds	r5, #1
 80144a0:	e7ee      	b.n	8014480 <__libc_init_array+0xc>
 80144a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80144a6:	4798      	blx	r3
 80144a8:	3501      	adds	r5, #1
 80144aa:	e7f2      	b.n	8014492 <__libc_init_array+0x1e>
 80144ac:	08019c24 	.word	0x08019c24
 80144b0:	08019c24 	.word	0x08019c24
 80144b4:	08019c24 	.word	0x08019c24
 80144b8:	08019c28 	.word	0x08019c28

080144bc <memcpy>:
 80144bc:	b510      	push	{r4, lr}
 80144be:	1e43      	subs	r3, r0, #1
 80144c0:	440a      	add	r2, r1
 80144c2:	4291      	cmp	r1, r2
 80144c4:	d100      	bne.n	80144c8 <memcpy+0xc>
 80144c6:	bd10      	pop	{r4, pc}
 80144c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80144d0:	e7f7      	b.n	80144c2 <memcpy+0x6>

080144d2 <memset>:
 80144d2:	4402      	add	r2, r0
 80144d4:	4603      	mov	r3, r0
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d100      	bne.n	80144dc <memset+0xa>
 80144da:	4770      	bx	lr
 80144dc:	f803 1b01 	strb.w	r1, [r3], #1
 80144e0:	e7f9      	b.n	80144d6 <memset+0x4>

080144e2 <__cvt>:
 80144e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144e6:	ec55 4b10 	vmov	r4, r5, d0
 80144ea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80144ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80144f0:	2d00      	cmp	r5, #0
 80144f2:	460e      	mov	r6, r1
 80144f4:	4691      	mov	r9, r2
 80144f6:	4619      	mov	r1, r3
 80144f8:	bfb8      	it	lt
 80144fa:	4622      	movlt	r2, r4
 80144fc:	462b      	mov	r3, r5
 80144fe:	f027 0720 	bic.w	r7, r7, #32
 8014502:	bfbb      	ittet	lt
 8014504:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014508:	461d      	movlt	r5, r3
 801450a:	2300      	movge	r3, #0
 801450c:	232d      	movlt	r3, #45	; 0x2d
 801450e:	bfb8      	it	lt
 8014510:	4614      	movlt	r4, r2
 8014512:	2f46      	cmp	r7, #70	; 0x46
 8014514:	700b      	strb	r3, [r1, #0]
 8014516:	d004      	beq.n	8014522 <__cvt+0x40>
 8014518:	2f45      	cmp	r7, #69	; 0x45
 801451a:	d100      	bne.n	801451e <__cvt+0x3c>
 801451c:	3601      	adds	r6, #1
 801451e:	2102      	movs	r1, #2
 8014520:	e000      	b.n	8014524 <__cvt+0x42>
 8014522:	2103      	movs	r1, #3
 8014524:	ab03      	add	r3, sp, #12
 8014526:	9301      	str	r3, [sp, #4]
 8014528:	ab02      	add	r3, sp, #8
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	4632      	mov	r2, r6
 801452e:	4653      	mov	r3, sl
 8014530:	ec45 4b10 	vmov	d0, r4, r5
 8014534:	f001 ff94 	bl	8016460 <_dtoa_r>
 8014538:	2f47      	cmp	r7, #71	; 0x47
 801453a:	4680      	mov	r8, r0
 801453c:	d102      	bne.n	8014544 <__cvt+0x62>
 801453e:	f019 0f01 	tst.w	r9, #1
 8014542:	d026      	beq.n	8014592 <__cvt+0xb0>
 8014544:	2f46      	cmp	r7, #70	; 0x46
 8014546:	eb08 0906 	add.w	r9, r8, r6
 801454a:	d111      	bne.n	8014570 <__cvt+0x8e>
 801454c:	f898 3000 	ldrb.w	r3, [r8]
 8014550:	2b30      	cmp	r3, #48	; 0x30
 8014552:	d10a      	bne.n	801456a <__cvt+0x88>
 8014554:	2200      	movs	r2, #0
 8014556:	2300      	movs	r3, #0
 8014558:	4620      	mov	r0, r4
 801455a:	4629      	mov	r1, r5
 801455c:	f7f4 f9ec 	bl	8008938 <__aeabi_dcmpeq>
 8014560:	b918      	cbnz	r0, 801456a <__cvt+0x88>
 8014562:	f1c6 0601 	rsb	r6, r6, #1
 8014566:	f8ca 6000 	str.w	r6, [sl]
 801456a:	f8da 3000 	ldr.w	r3, [sl]
 801456e:	4499      	add	r9, r3
 8014570:	2200      	movs	r2, #0
 8014572:	2300      	movs	r3, #0
 8014574:	4620      	mov	r0, r4
 8014576:	4629      	mov	r1, r5
 8014578:	f7f4 f9de 	bl	8008938 <__aeabi_dcmpeq>
 801457c:	b938      	cbnz	r0, 801458e <__cvt+0xac>
 801457e:	2230      	movs	r2, #48	; 0x30
 8014580:	9b03      	ldr	r3, [sp, #12]
 8014582:	454b      	cmp	r3, r9
 8014584:	d205      	bcs.n	8014592 <__cvt+0xb0>
 8014586:	1c59      	adds	r1, r3, #1
 8014588:	9103      	str	r1, [sp, #12]
 801458a:	701a      	strb	r2, [r3, #0]
 801458c:	e7f8      	b.n	8014580 <__cvt+0x9e>
 801458e:	f8cd 900c 	str.w	r9, [sp, #12]
 8014592:	9b03      	ldr	r3, [sp, #12]
 8014594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014596:	eba3 0308 	sub.w	r3, r3, r8
 801459a:	4640      	mov	r0, r8
 801459c:	6013      	str	r3, [r2, #0]
 801459e:	b004      	add	sp, #16
 80145a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080145a4 <__exponent>:
 80145a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145a6:	2900      	cmp	r1, #0
 80145a8:	4604      	mov	r4, r0
 80145aa:	bfba      	itte	lt
 80145ac:	4249      	neglt	r1, r1
 80145ae:	232d      	movlt	r3, #45	; 0x2d
 80145b0:	232b      	movge	r3, #43	; 0x2b
 80145b2:	2909      	cmp	r1, #9
 80145b4:	f804 2b02 	strb.w	r2, [r4], #2
 80145b8:	7043      	strb	r3, [r0, #1]
 80145ba:	dd20      	ble.n	80145fe <__exponent+0x5a>
 80145bc:	f10d 0307 	add.w	r3, sp, #7
 80145c0:	461f      	mov	r7, r3
 80145c2:	260a      	movs	r6, #10
 80145c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80145c8:	fb06 1115 	mls	r1, r6, r5, r1
 80145cc:	3130      	adds	r1, #48	; 0x30
 80145ce:	2d09      	cmp	r5, #9
 80145d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80145d4:	f103 32ff 	add.w	r2, r3, #4294967295
 80145d8:	4629      	mov	r1, r5
 80145da:	dc09      	bgt.n	80145f0 <__exponent+0x4c>
 80145dc:	3130      	adds	r1, #48	; 0x30
 80145de:	3b02      	subs	r3, #2
 80145e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80145e4:	42bb      	cmp	r3, r7
 80145e6:	4622      	mov	r2, r4
 80145e8:	d304      	bcc.n	80145f4 <__exponent+0x50>
 80145ea:	1a10      	subs	r0, r2, r0
 80145ec:	b003      	add	sp, #12
 80145ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145f0:	4613      	mov	r3, r2
 80145f2:	e7e7      	b.n	80145c4 <__exponent+0x20>
 80145f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145f8:	f804 2b01 	strb.w	r2, [r4], #1
 80145fc:	e7f2      	b.n	80145e4 <__exponent+0x40>
 80145fe:	2330      	movs	r3, #48	; 0x30
 8014600:	4419      	add	r1, r3
 8014602:	7083      	strb	r3, [r0, #2]
 8014604:	1d02      	adds	r2, r0, #4
 8014606:	70c1      	strb	r1, [r0, #3]
 8014608:	e7ef      	b.n	80145ea <__exponent+0x46>
	...

0801460c <_printf_float>:
 801460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014610:	b08d      	sub	sp, #52	; 0x34
 8014612:	460c      	mov	r4, r1
 8014614:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014618:	4616      	mov	r6, r2
 801461a:	461f      	mov	r7, r3
 801461c:	4605      	mov	r5, r0
 801461e:	f003 f9b9 	bl	8017994 <_localeconv_r>
 8014622:	6803      	ldr	r3, [r0, #0]
 8014624:	9304      	str	r3, [sp, #16]
 8014626:	4618      	mov	r0, r3
 8014628:	f7f3 fd0a 	bl	8008040 <strlen>
 801462c:	2300      	movs	r3, #0
 801462e:	930a      	str	r3, [sp, #40]	; 0x28
 8014630:	f8d8 3000 	ldr.w	r3, [r8]
 8014634:	9005      	str	r0, [sp, #20]
 8014636:	3307      	adds	r3, #7
 8014638:	f023 0307 	bic.w	r3, r3, #7
 801463c:	f103 0208 	add.w	r2, r3, #8
 8014640:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014644:	f8d4 b000 	ldr.w	fp, [r4]
 8014648:	f8c8 2000 	str.w	r2, [r8]
 801464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014650:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014654:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014658:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801465c:	9307      	str	r3, [sp, #28]
 801465e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014662:	f04f 32ff 	mov.w	r2, #4294967295
 8014666:	4ba7      	ldr	r3, [pc, #668]	; (8014904 <_printf_float+0x2f8>)
 8014668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801466c:	f7f4 f996 	bl	800899c <__aeabi_dcmpun>
 8014670:	bb70      	cbnz	r0, 80146d0 <_printf_float+0xc4>
 8014672:	f04f 32ff 	mov.w	r2, #4294967295
 8014676:	4ba3      	ldr	r3, [pc, #652]	; (8014904 <_printf_float+0x2f8>)
 8014678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801467c:	f7f4 f970 	bl	8008960 <__aeabi_dcmple>
 8014680:	bb30      	cbnz	r0, 80146d0 <_printf_float+0xc4>
 8014682:	2200      	movs	r2, #0
 8014684:	2300      	movs	r3, #0
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7f4 f95f 	bl	800894c <__aeabi_dcmplt>
 801468e:	b110      	cbz	r0, 8014696 <_printf_float+0x8a>
 8014690:	232d      	movs	r3, #45	; 0x2d
 8014692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014696:	4a9c      	ldr	r2, [pc, #624]	; (8014908 <_printf_float+0x2fc>)
 8014698:	4b9c      	ldr	r3, [pc, #624]	; (801490c <_printf_float+0x300>)
 801469a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801469e:	bf8c      	ite	hi
 80146a0:	4690      	movhi	r8, r2
 80146a2:	4698      	movls	r8, r3
 80146a4:	2303      	movs	r3, #3
 80146a6:	f02b 0204 	bic.w	r2, fp, #4
 80146aa:	6123      	str	r3, [r4, #16]
 80146ac:	6022      	str	r2, [r4, #0]
 80146ae:	f04f 0900 	mov.w	r9, #0
 80146b2:	9700      	str	r7, [sp, #0]
 80146b4:	4633      	mov	r3, r6
 80146b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80146b8:	4621      	mov	r1, r4
 80146ba:	4628      	mov	r0, r5
 80146bc:	f000 f9e6 	bl	8014a8c <_printf_common>
 80146c0:	3001      	adds	r0, #1
 80146c2:	f040 808d 	bne.w	80147e0 <_printf_float+0x1d4>
 80146c6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ca:	b00d      	add	sp, #52	; 0x34
 80146cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d0:	4642      	mov	r2, r8
 80146d2:	464b      	mov	r3, r9
 80146d4:	4640      	mov	r0, r8
 80146d6:	4649      	mov	r1, r9
 80146d8:	f7f4 f960 	bl	800899c <__aeabi_dcmpun>
 80146dc:	b110      	cbz	r0, 80146e4 <_printf_float+0xd8>
 80146de:	4a8c      	ldr	r2, [pc, #560]	; (8014910 <_printf_float+0x304>)
 80146e0:	4b8c      	ldr	r3, [pc, #560]	; (8014914 <_printf_float+0x308>)
 80146e2:	e7da      	b.n	801469a <_printf_float+0x8e>
 80146e4:	6861      	ldr	r1, [r4, #4]
 80146e6:	1c4b      	adds	r3, r1, #1
 80146e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80146ec:	a80a      	add	r0, sp, #40	; 0x28
 80146ee:	d13e      	bne.n	801476e <_printf_float+0x162>
 80146f0:	2306      	movs	r3, #6
 80146f2:	6063      	str	r3, [r4, #4]
 80146f4:	2300      	movs	r3, #0
 80146f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80146fa:	ab09      	add	r3, sp, #36	; 0x24
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	ec49 8b10 	vmov	d0, r8, r9
 8014702:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014706:	6022      	str	r2, [r4, #0]
 8014708:	f8cd a004 	str.w	sl, [sp, #4]
 801470c:	6861      	ldr	r1, [r4, #4]
 801470e:	4628      	mov	r0, r5
 8014710:	f7ff fee7 	bl	80144e2 <__cvt>
 8014714:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014718:	2b47      	cmp	r3, #71	; 0x47
 801471a:	4680      	mov	r8, r0
 801471c:	d109      	bne.n	8014732 <_printf_float+0x126>
 801471e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014720:	1cd8      	adds	r0, r3, #3
 8014722:	db02      	blt.n	801472a <_printf_float+0x11e>
 8014724:	6862      	ldr	r2, [r4, #4]
 8014726:	4293      	cmp	r3, r2
 8014728:	dd47      	ble.n	80147ba <_printf_float+0x1ae>
 801472a:	f1aa 0a02 	sub.w	sl, sl, #2
 801472e:	fa5f fa8a 	uxtb.w	sl, sl
 8014732:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014738:	d824      	bhi.n	8014784 <_printf_float+0x178>
 801473a:	3901      	subs	r1, #1
 801473c:	4652      	mov	r2, sl
 801473e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014742:	9109      	str	r1, [sp, #36]	; 0x24
 8014744:	f7ff ff2e 	bl	80145a4 <__exponent>
 8014748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801474a:	1813      	adds	r3, r2, r0
 801474c:	2a01      	cmp	r2, #1
 801474e:	4681      	mov	r9, r0
 8014750:	6123      	str	r3, [r4, #16]
 8014752:	dc02      	bgt.n	801475a <_printf_float+0x14e>
 8014754:	6822      	ldr	r2, [r4, #0]
 8014756:	07d1      	lsls	r1, r2, #31
 8014758:	d501      	bpl.n	801475e <_printf_float+0x152>
 801475a:	3301      	adds	r3, #1
 801475c:	6123      	str	r3, [r4, #16]
 801475e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014762:	2b00      	cmp	r3, #0
 8014764:	d0a5      	beq.n	80146b2 <_printf_float+0xa6>
 8014766:	232d      	movs	r3, #45	; 0x2d
 8014768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801476c:	e7a1      	b.n	80146b2 <_printf_float+0xa6>
 801476e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014772:	f000 8177 	beq.w	8014a64 <_printf_float+0x458>
 8014776:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801477a:	d1bb      	bne.n	80146f4 <_printf_float+0xe8>
 801477c:	2900      	cmp	r1, #0
 801477e:	d1b9      	bne.n	80146f4 <_printf_float+0xe8>
 8014780:	2301      	movs	r3, #1
 8014782:	e7b6      	b.n	80146f2 <_printf_float+0xe6>
 8014784:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014788:	d119      	bne.n	80147be <_printf_float+0x1b2>
 801478a:	2900      	cmp	r1, #0
 801478c:	6863      	ldr	r3, [r4, #4]
 801478e:	dd0c      	ble.n	80147aa <_printf_float+0x19e>
 8014790:	6121      	str	r1, [r4, #16]
 8014792:	b913      	cbnz	r3, 801479a <_printf_float+0x18e>
 8014794:	6822      	ldr	r2, [r4, #0]
 8014796:	07d2      	lsls	r2, r2, #31
 8014798:	d502      	bpl.n	80147a0 <_printf_float+0x194>
 801479a:	3301      	adds	r3, #1
 801479c:	440b      	add	r3, r1
 801479e:	6123      	str	r3, [r4, #16]
 80147a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80147a4:	f04f 0900 	mov.w	r9, #0
 80147a8:	e7d9      	b.n	801475e <_printf_float+0x152>
 80147aa:	b913      	cbnz	r3, 80147b2 <_printf_float+0x1a6>
 80147ac:	6822      	ldr	r2, [r4, #0]
 80147ae:	07d0      	lsls	r0, r2, #31
 80147b0:	d501      	bpl.n	80147b6 <_printf_float+0x1aa>
 80147b2:	3302      	adds	r3, #2
 80147b4:	e7f3      	b.n	801479e <_printf_float+0x192>
 80147b6:	2301      	movs	r3, #1
 80147b8:	e7f1      	b.n	801479e <_printf_float+0x192>
 80147ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80147be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80147c2:	4293      	cmp	r3, r2
 80147c4:	db05      	blt.n	80147d2 <_printf_float+0x1c6>
 80147c6:	6822      	ldr	r2, [r4, #0]
 80147c8:	6123      	str	r3, [r4, #16]
 80147ca:	07d1      	lsls	r1, r2, #31
 80147cc:	d5e8      	bpl.n	80147a0 <_printf_float+0x194>
 80147ce:	3301      	adds	r3, #1
 80147d0:	e7e5      	b.n	801479e <_printf_float+0x192>
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bfd4      	ite	le
 80147d6:	f1c3 0302 	rsble	r3, r3, #2
 80147da:	2301      	movgt	r3, #1
 80147dc:	4413      	add	r3, r2
 80147de:	e7de      	b.n	801479e <_printf_float+0x192>
 80147e0:	6823      	ldr	r3, [r4, #0]
 80147e2:	055a      	lsls	r2, r3, #21
 80147e4:	d407      	bmi.n	80147f6 <_printf_float+0x1ea>
 80147e6:	6923      	ldr	r3, [r4, #16]
 80147e8:	4642      	mov	r2, r8
 80147ea:	4631      	mov	r1, r6
 80147ec:	4628      	mov	r0, r5
 80147ee:	47b8      	blx	r7
 80147f0:	3001      	adds	r0, #1
 80147f2:	d12b      	bne.n	801484c <_printf_float+0x240>
 80147f4:	e767      	b.n	80146c6 <_printf_float+0xba>
 80147f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80147fa:	f240 80dc 	bls.w	80149b6 <_printf_float+0x3aa>
 80147fe:	2200      	movs	r2, #0
 8014800:	2300      	movs	r3, #0
 8014802:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014806:	f7f4 f897 	bl	8008938 <__aeabi_dcmpeq>
 801480a:	2800      	cmp	r0, #0
 801480c:	d033      	beq.n	8014876 <_printf_float+0x26a>
 801480e:	2301      	movs	r3, #1
 8014810:	4a41      	ldr	r2, [pc, #260]	; (8014918 <_printf_float+0x30c>)
 8014812:	4631      	mov	r1, r6
 8014814:	4628      	mov	r0, r5
 8014816:	47b8      	blx	r7
 8014818:	3001      	adds	r0, #1
 801481a:	f43f af54 	beq.w	80146c6 <_printf_float+0xba>
 801481e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014822:	429a      	cmp	r2, r3
 8014824:	db02      	blt.n	801482c <_printf_float+0x220>
 8014826:	6823      	ldr	r3, [r4, #0]
 8014828:	07d8      	lsls	r0, r3, #31
 801482a:	d50f      	bpl.n	801484c <_printf_float+0x240>
 801482c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014830:	4631      	mov	r1, r6
 8014832:	4628      	mov	r0, r5
 8014834:	47b8      	blx	r7
 8014836:	3001      	adds	r0, #1
 8014838:	f43f af45 	beq.w	80146c6 <_printf_float+0xba>
 801483c:	f04f 0800 	mov.w	r8, #0
 8014840:	f104 091a 	add.w	r9, r4, #26
 8014844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014846:	3b01      	subs	r3, #1
 8014848:	4543      	cmp	r3, r8
 801484a:	dc09      	bgt.n	8014860 <_printf_float+0x254>
 801484c:	6823      	ldr	r3, [r4, #0]
 801484e:	079b      	lsls	r3, r3, #30
 8014850:	f100 8103 	bmi.w	8014a5a <_printf_float+0x44e>
 8014854:	68e0      	ldr	r0, [r4, #12]
 8014856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014858:	4298      	cmp	r0, r3
 801485a:	bfb8      	it	lt
 801485c:	4618      	movlt	r0, r3
 801485e:	e734      	b.n	80146ca <_printf_float+0xbe>
 8014860:	2301      	movs	r3, #1
 8014862:	464a      	mov	r2, r9
 8014864:	4631      	mov	r1, r6
 8014866:	4628      	mov	r0, r5
 8014868:	47b8      	blx	r7
 801486a:	3001      	adds	r0, #1
 801486c:	f43f af2b 	beq.w	80146c6 <_printf_float+0xba>
 8014870:	f108 0801 	add.w	r8, r8, #1
 8014874:	e7e6      	b.n	8014844 <_printf_float+0x238>
 8014876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014878:	2b00      	cmp	r3, #0
 801487a:	dc2b      	bgt.n	80148d4 <_printf_float+0x2c8>
 801487c:	2301      	movs	r3, #1
 801487e:	4a26      	ldr	r2, [pc, #152]	; (8014918 <_printf_float+0x30c>)
 8014880:	4631      	mov	r1, r6
 8014882:	4628      	mov	r0, r5
 8014884:	47b8      	blx	r7
 8014886:	3001      	adds	r0, #1
 8014888:	f43f af1d 	beq.w	80146c6 <_printf_float+0xba>
 801488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488e:	b923      	cbnz	r3, 801489a <_printf_float+0x28e>
 8014890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014892:	b913      	cbnz	r3, 801489a <_printf_float+0x28e>
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	07d9      	lsls	r1, r3, #31
 8014898:	d5d8      	bpl.n	801484c <_printf_float+0x240>
 801489a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801489e:	4631      	mov	r1, r6
 80148a0:	4628      	mov	r0, r5
 80148a2:	47b8      	blx	r7
 80148a4:	3001      	adds	r0, #1
 80148a6:	f43f af0e 	beq.w	80146c6 <_printf_float+0xba>
 80148aa:	f04f 0900 	mov.w	r9, #0
 80148ae:	f104 0a1a 	add.w	sl, r4, #26
 80148b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148b4:	425b      	negs	r3, r3
 80148b6:	454b      	cmp	r3, r9
 80148b8:	dc01      	bgt.n	80148be <_printf_float+0x2b2>
 80148ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148bc:	e794      	b.n	80147e8 <_printf_float+0x1dc>
 80148be:	2301      	movs	r3, #1
 80148c0:	4652      	mov	r2, sl
 80148c2:	4631      	mov	r1, r6
 80148c4:	4628      	mov	r0, r5
 80148c6:	47b8      	blx	r7
 80148c8:	3001      	adds	r0, #1
 80148ca:	f43f aefc 	beq.w	80146c6 <_printf_float+0xba>
 80148ce:	f109 0901 	add.w	r9, r9, #1
 80148d2:	e7ee      	b.n	80148b2 <_printf_float+0x2a6>
 80148d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148d8:	429a      	cmp	r2, r3
 80148da:	bfa8      	it	ge
 80148dc:	461a      	movge	r2, r3
 80148de:	2a00      	cmp	r2, #0
 80148e0:	4691      	mov	r9, r2
 80148e2:	dd07      	ble.n	80148f4 <_printf_float+0x2e8>
 80148e4:	4613      	mov	r3, r2
 80148e6:	4631      	mov	r1, r6
 80148e8:	4642      	mov	r2, r8
 80148ea:	4628      	mov	r0, r5
 80148ec:	47b8      	blx	r7
 80148ee:	3001      	adds	r0, #1
 80148f0:	f43f aee9 	beq.w	80146c6 <_printf_float+0xba>
 80148f4:	f104 031a 	add.w	r3, r4, #26
 80148f8:	f04f 0b00 	mov.w	fp, #0
 80148fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014900:	9306      	str	r3, [sp, #24]
 8014902:	e015      	b.n	8014930 <_printf_float+0x324>
 8014904:	7fefffff 	.word	0x7fefffff
 8014908:	080198ec 	.word	0x080198ec
 801490c:	080198e8 	.word	0x080198e8
 8014910:	080198f4 	.word	0x080198f4
 8014914:	080198f0 	.word	0x080198f0
 8014918:	08019b13 	.word	0x08019b13
 801491c:	2301      	movs	r3, #1
 801491e:	9a06      	ldr	r2, [sp, #24]
 8014920:	4631      	mov	r1, r6
 8014922:	4628      	mov	r0, r5
 8014924:	47b8      	blx	r7
 8014926:	3001      	adds	r0, #1
 8014928:	f43f aecd 	beq.w	80146c6 <_printf_float+0xba>
 801492c:	f10b 0b01 	add.w	fp, fp, #1
 8014930:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014934:	ebaa 0309 	sub.w	r3, sl, r9
 8014938:	455b      	cmp	r3, fp
 801493a:	dcef      	bgt.n	801491c <_printf_float+0x310>
 801493c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014940:	429a      	cmp	r2, r3
 8014942:	44d0      	add	r8, sl
 8014944:	db15      	blt.n	8014972 <_printf_float+0x366>
 8014946:	6823      	ldr	r3, [r4, #0]
 8014948:	07da      	lsls	r2, r3, #31
 801494a:	d412      	bmi.n	8014972 <_printf_float+0x366>
 801494c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801494e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014950:	eba3 020a 	sub.w	r2, r3, sl
 8014954:	eba3 0a01 	sub.w	sl, r3, r1
 8014958:	4592      	cmp	sl, r2
 801495a:	bfa8      	it	ge
 801495c:	4692      	movge	sl, r2
 801495e:	f1ba 0f00 	cmp.w	sl, #0
 8014962:	dc0e      	bgt.n	8014982 <_printf_float+0x376>
 8014964:	f04f 0800 	mov.w	r8, #0
 8014968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801496c:	f104 091a 	add.w	r9, r4, #26
 8014970:	e019      	b.n	80149a6 <_printf_float+0x39a>
 8014972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014976:	4631      	mov	r1, r6
 8014978:	4628      	mov	r0, r5
 801497a:	47b8      	blx	r7
 801497c:	3001      	adds	r0, #1
 801497e:	d1e5      	bne.n	801494c <_printf_float+0x340>
 8014980:	e6a1      	b.n	80146c6 <_printf_float+0xba>
 8014982:	4653      	mov	r3, sl
 8014984:	4642      	mov	r2, r8
 8014986:	4631      	mov	r1, r6
 8014988:	4628      	mov	r0, r5
 801498a:	47b8      	blx	r7
 801498c:	3001      	adds	r0, #1
 801498e:	d1e9      	bne.n	8014964 <_printf_float+0x358>
 8014990:	e699      	b.n	80146c6 <_printf_float+0xba>
 8014992:	2301      	movs	r3, #1
 8014994:	464a      	mov	r2, r9
 8014996:	4631      	mov	r1, r6
 8014998:	4628      	mov	r0, r5
 801499a:	47b8      	blx	r7
 801499c:	3001      	adds	r0, #1
 801499e:	f43f ae92 	beq.w	80146c6 <_printf_float+0xba>
 80149a2:	f108 0801 	add.w	r8, r8, #1
 80149a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149aa:	1a9b      	subs	r3, r3, r2
 80149ac:	eba3 030a 	sub.w	r3, r3, sl
 80149b0:	4543      	cmp	r3, r8
 80149b2:	dcee      	bgt.n	8014992 <_printf_float+0x386>
 80149b4:	e74a      	b.n	801484c <_printf_float+0x240>
 80149b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149b8:	2a01      	cmp	r2, #1
 80149ba:	dc01      	bgt.n	80149c0 <_printf_float+0x3b4>
 80149bc:	07db      	lsls	r3, r3, #31
 80149be:	d53a      	bpl.n	8014a36 <_printf_float+0x42a>
 80149c0:	2301      	movs	r3, #1
 80149c2:	4642      	mov	r2, r8
 80149c4:	4631      	mov	r1, r6
 80149c6:	4628      	mov	r0, r5
 80149c8:	47b8      	blx	r7
 80149ca:	3001      	adds	r0, #1
 80149cc:	f43f ae7b 	beq.w	80146c6 <_printf_float+0xba>
 80149d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149d4:	4631      	mov	r1, r6
 80149d6:	4628      	mov	r0, r5
 80149d8:	47b8      	blx	r7
 80149da:	3001      	adds	r0, #1
 80149dc:	f108 0801 	add.w	r8, r8, #1
 80149e0:	f43f ae71 	beq.w	80146c6 <_printf_float+0xba>
 80149e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149e6:	2200      	movs	r2, #0
 80149e8:	f103 3aff 	add.w	sl, r3, #4294967295
 80149ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80149f0:	2300      	movs	r3, #0
 80149f2:	f7f3 ffa1 	bl	8008938 <__aeabi_dcmpeq>
 80149f6:	b9c8      	cbnz	r0, 8014a2c <_printf_float+0x420>
 80149f8:	4653      	mov	r3, sl
 80149fa:	4642      	mov	r2, r8
 80149fc:	4631      	mov	r1, r6
 80149fe:	4628      	mov	r0, r5
 8014a00:	47b8      	blx	r7
 8014a02:	3001      	adds	r0, #1
 8014a04:	d10e      	bne.n	8014a24 <_printf_float+0x418>
 8014a06:	e65e      	b.n	80146c6 <_printf_float+0xba>
 8014a08:	2301      	movs	r3, #1
 8014a0a:	4652      	mov	r2, sl
 8014a0c:	4631      	mov	r1, r6
 8014a0e:	4628      	mov	r0, r5
 8014a10:	47b8      	blx	r7
 8014a12:	3001      	adds	r0, #1
 8014a14:	f43f ae57 	beq.w	80146c6 <_printf_float+0xba>
 8014a18:	f108 0801 	add.w	r8, r8, #1
 8014a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	4543      	cmp	r3, r8
 8014a22:	dcf1      	bgt.n	8014a08 <_printf_float+0x3fc>
 8014a24:	464b      	mov	r3, r9
 8014a26:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014a2a:	e6de      	b.n	80147ea <_printf_float+0x1de>
 8014a2c:	f04f 0800 	mov.w	r8, #0
 8014a30:	f104 0a1a 	add.w	sl, r4, #26
 8014a34:	e7f2      	b.n	8014a1c <_printf_float+0x410>
 8014a36:	2301      	movs	r3, #1
 8014a38:	e7df      	b.n	80149fa <_printf_float+0x3ee>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	464a      	mov	r2, r9
 8014a3e:	4631      	mov	r1, r6
 8014a40:	4628      	mov	r0, r5
 8014a42:	47b8      	blx	r7
 8014a44:	3001      	adds	r0, #1
 8014a46:	f43f ae3e 	beq.w	80146c6 <_printf_float+0xba>
 8014a4a:	f108 0801 	add.w	r8, r8, #1
 8014a4e:	68e3      	ldr	r3, [r4, #12]
 8014a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a52:	1a9b      	subs	r3, r3, r2
 8014a54:	4543      	cmp	r3, r8
 8014a56:	dcf0      	bgt.n	8014a3a <_printf_float+0x42e>
 8014a58:	e6fc      	b.n	8014854 <_printf_float+0x248>
 8014a5a:	f04f 0800 	mov.w	r8, #0
 8014a5e:	f104 0919 	add.w	r9, r4, #25
 8014a62:	e7f4      	b.n	8014a4e <_printf_float+0x442>
 8014a64:	2900      	cmp	r1, #0
 8014a66:	f43f ae8b 	beq.w	8014780 <_printf_float+0x174>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014a70:	ab09      	add	r3, sp, #36	; 0x24
 8014a72:	9300      	str	r3, [sp, #0]
 8014a74:	ec49 8b10 	vmov	d0, r8, r9
 8014a78:	6022      	str	r2, [r4, #0]
 8014a7a:	f8cd a004 	str.w	sl, [sp, #4]
 8014a7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014a82:	4628      	mov	r0, r5
 8014a84:	f7ff fd2d 	bl	80144e2 <__cvt>
 8014a88:	4680      	mov	r8, r0
 8014a8a:	e648      	b.n	801471e <_printf_float+0x112>

08014a8c <_printf_common>:
 8014a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a90:	4691      	mov	r9, r2
 8014a92:	461f      	mov	r7, r3
 8014a94:	688a      	ldr	r2, [r1, #8]
 8014a96:	690b      	ldr	r3, [r1, #16]
 8014a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	bfb8      	it	lt
 8014aa0:	4613      	movlt	r3, r2
 8014aa2:	f8c9 3000 	str.w	r3, [r9]
 8014aa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014aaa:	4606      	mov	r6, r0
 8014aac:	460c      	mov	r4, r1
 8014aae:	b112      	cbz	r2, 8014ab6 <_printf_common+0x2a>
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	f8c9 3000 	str.w	r3, [r9]
 8014ab6:	6823      	ldr	r3, [r4, #0]
 8014ab8:	0699      	lsls	r1, r3, #26
 8014aba:	bf42      	ittt	mi
 8014abc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ac0:	3302      	addmi	r3, #2
 8014ac2:	f8c9 3000 	strmi.w	r3, [r9]
 8014ac6:	6825      	ldr	r5, [r4, #0]
 8014ac8:	f015 0506 	ands.w	r5, r5, #6
 8014acc:	d107      	bne.n	8014ade <_printf_common+0x52>
 8014ace:	f104 0a19 	add.w	sl, r4, #25
 8014ad2:	68e3      	ldr	r3, [r4, #12]
 8014ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8014ad8:	1a9b      	subs	r3, r3, r2
 8014ada:	42ab      	cmp	r3, r5
 8014adc:	dc28      	bgt.n	8014b30 <_printf_common+0xa4>
 8014ade:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014ae2:	6822      	ldr	r2, [r4, #0]
 8014ae4:	3300      	adds	r3, #0
 8014ae6:	bf18      	it	ne
 8014ae8:	2301      	movne	r3, #1
 8014aea:	0692      	lsls	r2, r2, #26
 8014aec:	d42d      	bmi.n	8014b4a <_printf_common+0xbe>
 8014aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014af2:	4639      	mov	r1, r7
 8014af4:	4630      	mov	r0, r6
 8014af6:	47c0      	blx	r8
 8014af8:	3001      	adds	r0, #1
 8014afa:	d020      	beq.n	8014b3e <_printf_common+0xb2>
 8014afc:	6823      	ldr	r3, [r4, #0]
 8014afe:	68e5      	ldr	r5, [r4, #12]
 8014b00:	f8d9 2000 	ldr.w	r2, [r9]
 8014b04:	f003 0306 	and.w	r3, r3, #6
 8014b08:	2b04      	cmp	r3, #4
 8014b0a:	bf08      	it	eq
 8014b0c:	1aad      	subeq	r5, r5, r2
 8014b0e:	68a3      	ldr	r3, [r4, #8]
 8014b10:	6922      	ldr	r2, [r4, #16]
 8014b12:	bf0c      	ite	eq
 8014b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b18:	2500      	movne	r5, #0
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	bfc4      	itt	gt
 8014b1e:	1a9b      	subgt	r3, r3, r2
 8014b20:	18ed      	addgt	r5, r5, r3
 8014b22:	f04f 0900 	mov.w	r9, #0
 8014b26:	341a      	adds	r4, #26
 8014b28:	454d      	cmp	r5, r9
 8014b2a:	d11a      	bne.n	8014b62 <_printf_common+0xd6>
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	e008      	b.n	8014b42 <_printf_common+0xb6>
 8014b30:	2301      	movs	r3, #1
 8014b32:	4652      	mov	r2, sl
 8014b34:	4639      	mov	r1, r7
 8014b36:	4630      	mov	r0, r6
 8014b38:	47c0      	blx	r8
 8014b3a:	3001      	adds	r0, #1
 8014b3c:	d103      	bne.n	8014b46 <_printf_common+0xba>
 8014b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b46:	3501      	adds	r5, #1
 8014b48:	e7c3      	b.n	8014ad2 <_printf_common+0x46>
 8014b4a:	18e1      	adds	r1, r4, r3
 8014b4c:	1c5a      	adds	r2, r3, #1
 8014b4e:	2030      	movs	r0, #48	; 0x30
 8014b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b54:	4422      	add	r2, r4
 8014b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b5e:	3302      	adds	r3, #2
 8014b60:	e7c5      	b.n	8014aee <_printf_common+0x62>
 8014b62:	2301      	movs	r3, #1
 8014b64:	4622      	mov	r2, r4
 8014b66:	4639      	mov	r1, r7
 8014b68:	4630      	mov	r0, r6
 8014b6a:	47c0      	blx	r8
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	d0e6      	beq.n	8014b3e <_printf_common+0xb2>
 8014b70:	f109 0901 	add.w	r9, r9, #1
 8014b74:	e7d8      	b.n	8014b28 <_printf_common+0x9c>
	...

08014b78 <_printf_i>:
 8014b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014b80:	460c      	mov	r4, r1
 8014b82:	7e09      	ldrb	r1, [r1, #24]
 8014b84:	b085      	sub	sp, #20
 8014b86:	296e      	cmp	r1, #110	; 0x6e
 8014b88:	4617      	mov	r7, r2
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	4698      	mov	r8, r3
 8014b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b90:	f000 80b3 	beq.w	8014cfa <_printf_i+0x182>
 8014b94:	d822      	bhi.n	8014bdc <_printf_i+0x64>
 8014b96:	2963      	cmp	r1, #99	; 0x63
 8014b98:	d036      	beq.n	8014c08 <_printf_i+0x90>
 8014b9a:	d80a      	bhi.n	8014bb2 <_printf_i+0x3a>
 8014b9c:	2900      	cmp	r1, #0
 8014b9e:	f000 80b9 	beq.w	8014d14 <_printf_i+0x19c>
 8014ba2:	2958      	cmp	r1, #88	; 0x58
 8014ba4:	f000 8083 	beq.w	8014cae <_printf_i+0x136>
 8014ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014bb0:	e032      	b.n	8014c18 <_printf_i+0xa0>
 8014bb2:	2964      	cmp	r1, #100	; 0x64
 8014bb4:	d001      	beq.n	8014bba <_printf_i+0x42>
 8014bb6:	2969      	cmp	r1, #105	; 0x69
 8014bb8:	d1f6      	bne.n	8014ba8 <_printf_i+0x30>
 8014bba:	6820      	ldr	r0, [r4, #0]
 8014bbc:	6813      	ldr	r3, [r2, #0]
 8014bbe:	0605      	lsls	r5, r0, #24
 8014bc0:	f103 0104 	add.w	r1, r3, #4
 8014bc4:	d52a      	bpl.n	8014c1c <_printf_i+0xa4>
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	6011      	str	r1, [r2, #0]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	da03      	bge.n	8014bd6 <_printf_i+0x5e>
 8014bce:	222d      	movs	r2, #45	; 0x2d
 8014bd0:	425b      	negs	r3, r3
 8014bd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014bd6:	486f      	ldr	r0, [pc, #444]	; (8014d94 <_printf_i+0x21c>)
 8014bd8:	220a      	movs	r2, #10
 8014bda:	e039      	b.n	8014c50 <_printf_i+0xd8>
 8014bdc:	2973      	cmp	r1, #115	; 0x73
 8014bde:	f000 809d 	beq.w	8014d1c <_printf_i+0x1a4>
 8014be2:	d808      	bhi.n	8014bf6 <_printf_i+0x7e>
 8014be4:	296f      	cmp	r1, #111	; 0x6f
 8014be6:	d020      	beq.n	8014c2a <_printf_i+0xb2>
 8014be8:	2970      	cmp	r1, #112	; 0x70
 8014bea:	d1dd      	bne.n	8014ba8 <_printf_i+0x30>
 8014bec:	6823      	ldr	r3, [r4, #0]
 8014bee:	f043 0320 	orr.w	r3, r3, #32
 8014bf2:	6023      	str	r3, [r4, #0]
 8014bf4:	e003      	b.n	8014bfe <_printf_i+0x86>
 8014bf6:	2975      	cmp	r1, #117	; 0x75
 8014bf8:	d017      	beq.n	8014c2a <_printf_i+0xb2>
 8014bfa:	2978      	cmp	r1, #120	; 0x78
 8014bfc:	d1d4      	bne.n	8014ba8 <_printf_i+0x30>
 8014bfe:	2378      	movs	r3, #120	; 0x78
 8014c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014c04:	4864      	ldr	r0, [pc, #400]	; (8014d98 <_printf_i+0x220>)
 8014c06:	e055      	b.n	8014cb4 <_printf_i+0x13c>
 8014c08:	6813      	ldr	r3, [r2, #0]
 8014c0a:	1d19      	adds	r1, r3, #4
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	6011      	str	r1, [r2, #0]
 8014c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e08c      	b.n	8014d36 <_printf_i+0x1be>
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	6011      	str	r1, [r2, #0]
 8014c20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c24:	bf18      	it	ne
 8014c26:	b21b      	sxthne	r3, r3
 8014c28:	e7cf      	b.n	8014bca <_printf_i+0x52>
 8014c2a:	6813      	ldr	r3, [r2, #0]
 8014c2c:	6825      	ldr	r5, [r4, #0]
 8014c2e:	1d18      	adds	r0, r3, #4
 8014c30:	6010      	str	r0, [r2, #0]
 8014c32:	0628      	lsls	r0, r5, #24
 8014c34:	d501      	bpl.n	8014c3a <_printf_i+0xc2>
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	e002      	b.n	8014c40 <_printf_i+0xc8>
 8014c3a:	0668      	lsls	r0, r5, #25
 8014c3c:	d5fb      	bpl.n	8014c36 <_printf_i+0xbe>
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	4854      	ldr	r0, [pc, #336]	; (8014d94 <_printf_i+0x21c>)
 8014c42:	296f      	cmp	r1, #111	; 0x6f
 8014c44:	bf14      	ite	ne
 8014c46:	220a      	movne	r2, #10
 8014c48:	2208      	moveq	r2, #8
 8014c4a:	2100      	movs	r1, #0
 8014c4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c50:	6865      	ldr	r5, [r4, #4]
 8014c52:	60a5      	str	r5, [r4, #8]
 8014c54:	2d00      	cmp	r5, #0
 8014c56:	f2c0 8095 	blt.w	8014d84 <_printf_i+0x20c>
 8014c5a:	6821      	ldr	r1, [r4, #0]
 8014c5c:	f021 0104 	bic.w	r1, r1, #4
 8014c60:	6021      	str	r1, [r4, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d13d      	bne.n	8014ce2 <_printf_i+0x16a>
 8014c66:	2d00      	cmp	r5, #0
 8014c68:	f040 808e 	bne.w	8014d88 <_printf_i+0x210>
 8014c6c:	4665      	mov	r5, ip
 8014c6e:	2a08      	cmp	r2, #8
 8014c70:	d10b      	bne.n	8014c8a <_printf_i+0x112>
 8014c72:	6823      	ldr	r3, [r4, #0]
 8014c74:	07db      	lsls	r3, r3, #31
 8014c76:	d508      	bpl.n	8014c8a <_printf_i+0x112>
 8014c78:	6923      	ldr	r3, [r4, #16]
 8014c7a:	6862      	ldr	r2, [r4, #4]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	bfde      	ittt	le
 8014c80:	2330      	movle	r3, #48	; 0x30
 8014c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c8a:	ebac 0305 	sub.w	r3, ip, r5
 8014c8e:	6123      	str	r3, [r4, #16]
 8014c90:	f8cd 8000 	str.w	r8, [sp]
 8014c94:	463b      	mov	r3, r7
 8014c96:	aa03      	add	r2, sp, #12
 8014c98:	4621      	mov	r1, r4
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f7ff fef6 	bl	8014a8c <_printf_common>
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	d14d      	bne.n	8014d40 <_printf_i+0x1c8>
 8014ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca8:	b005      	add	sp, #20
 8014caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cae:	4839      	ldr	r0, [pc, #228]	; (8014d94 <_printf_i+0x21c>)
 8014cb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014cb4:	6813      	ldr	r3, [r2, #0]
 8014cb6:	6821      	ldr	r1, [r4, #0]
 8014cb8:	1d1d      	adds	r5, r3, #4
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	6015      	str	r5, [r2, #0]
 8014cbe:	060a      	lsls	r2, r1, #24
 8014cc0:	d50b      	bpl.n	8014cda <_printf_i+0x162>
 8014cc2:	07ca      	lsls	r2, r1, #31
 8014cc4:	bf44      	itt	mi
 8014cc6:	f041 0120 	orrmi.w	r1, r1, #32
 8014cca:	6021      	strmi	r1, [r4, #0]
 8014ccc:	b91b      	cbnz	r3, 8014cd6 <_printf_i+0x15e>
 8014cce:	6822      	ldr	r2, [r4, #0]
 8014cd0:	f022 0220 	bic.w	r2, r2, #32
 8014cd4:	6022      	str	r2, [r4, #0]
 8014cd6:	2210      	movs	r2, #16
 8014cd8:	e7b7      	b.n	8014c4a <_printf_i+0xd2>
 8014cda:	064d      	lsls	r5, r1, #25
 8014cdc:	bf48      	it	mi
 8014cde:	b29b      	uxthmi	r3, r3
 8014ce0:	e7ef      	b.n	8014cc2 <_printf_i+0x14a>
 8014ce2:	4665      	mov	r5, ip
 8014ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8014cec:	5cc3      	ldrb	r3, [r0, r3]
 8014cee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	2900      	cmp	r1, #0
 8014cf6:	d1f5      	bne.n	8014ce4 <_printf_i+0x16c>
 8014cf8:	e7b9      	b.n	8014c6e <_printf_i+0xf6>
 8014cfa:	6813      	ldr	r3, [r2, #0]
 8014cfc:	6825      	ldr	r5, [r4, #0]
 8014cfe:	6961      	ldr	r1, [r4, #20]
 8014d00:	1d18      	adds	r0, r3, #4
 8014d02:	6010      	str	r0, [r2, #0]
 8014d04:	0628      	lsls	r0, r5, #24
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	d501      	bpl.n	8014d0e <_printf_i+0x196>
 8014d0a:	6019      	str	r1, [r3, #0]
 8014d0c:	e002      	b.n	8014d14 <_printf_i+0x19c>
 8014d0e:	066a      	lsls	r2, r5, #25
 8014d10:	d5fb      	bpl.n	8014d0a <_printf_i+0x192>
 8014d12:	8019      	strh	r1, [r3, #0]
 8014d14:	2300      	movs	r3, #0
 8014d16:	6123      	str	r3, [r4, #16]
 8014d18:	4665      	mov	r5, ip
 8014d1a:	e7b9      	b.n	8014c90 <_printf_i+0x118>
 8014d1c:	6813      	ldr	r3, [r2, #0]
 8014d1e:	1d19      	adds	r1, r3, #4
 8014d20:	6011      	str	r1, [r2, #0]
 8014d22:	681d      	ldr	r5, [r3, #0]
 8014d24:	6862      	ldr	r2, [r4, #4]
 8014d26:	2100      	movs	r1, #0
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f7f3 f991 	bl	8008050 <memchr>
 8014d2e:	b108      	cbz	r0, 8014d34 <_printf_i+0x1bc>
 8014d30:	1b40      	subs	r0, r0, r5
 8014d32:	6060      	str	r0, [r4, #4]
 8014d34:	6863      	ldr	r3, [r4, #4]
 8014d36:	6123      	str	r3, [r4, #16]
 8014d38:	2300      	movs	r3, #0
 8014d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d3e:	e7a7      	b.n	8014c90 <_printf_i+0x118>
 8014d40:	6923      	ldr	r3, [r4, #16]
 8014d42:	462a      	mov	r2, r5
 8014d44:	4639      	mov	r1, r7
 8014d46:	4630      	mov	r0, r6
 8014d48:	47c0      	blx	r8
 8014d4a:	3001      	adds	r0, #1
 8014d4c:	d0aa      	beq.n	8014ca4 <_printf_i+0x12c>
 8014d4e:	6823      	ldr	r3, [r4, #0]
 8014d50:	079b      	lsls	r3, r3, #30
 8014d52:	d413      	bmi.n	8014d7c <_printf_i+0x204>
 8014d54:	68e0      	ldr	r0, [r4, #12]
 8014d56:	9b03      	ldr	r3, [sp, #12]
 8014d58:	4298      	cmp	r0, r3
 8014d5a:	bfb8      	it	lt
 8014d5c:	4618      	movlt	r0, r3
 8014d5e:	e7a3      	b.n	8014ca8 <_printf_i+0x130>
 8014d60:	2301      	movs	r3, #1
 8014d62:	464a      	mov	r2, r9
 8014d64:	4639      	mov	r1, r7
 8014d66:	4630      	mov	r0, r6
 8014d68:	47c0      	blx	r8
 8014d6a:	3001      	adds	r0, #1
 8014d6c:	d09a      	beq.n	8014ca4 <_printf_i+0x12c>
 8014d6e:	3501      	adds	r5, #1
 8014d70:	68e3      	ldr	r3, [r4, #12]
 8014d72:	9a03      	ldr	r2, [sp, #12]
 8014d74:	1a9b      	subs	r3, r3, r2
 8014d76:	42ab      	cmp	r3, r5
 8014d78:	dcf2      	bgt.n	8014d60 <_printf_i+0x1e8>
 8014d7a:	e7eb      	b.n	8014d54 <_printf_i+0x1dc>
 8014d7c:	2500      	movs	r5, #0
 8014d7e:	f104 0919 	add.w	r9, r4, #25
 8014d82:	e7f5      	b.n	8014d70 <_printf_i+0x1f8>
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1ac      	bne.n	8014ce2 <_printf_i+0x16a>
 8014d88:	7803      	ldrb	r3, [r0, #0]
 8014d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d92:	e76c      	b.n	8014c6e <_printf_i+0xf6>
 8014d94:	080198f8 	.word	0x080198f8
 8014d98:	08019909 	.word	0x08019909

08014d9c <_scanf_float>:
 8014d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da0:	469a      	mov	sl, r3
 8014da2:	688b      	ldr	r3, [r1, #8]
 8014da4:	4616      	mov	r6, r2
 8014da6:	1e5a      	subs	r2, r3, #1
 8014da8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014dac:	b087      	sub	sp, #28
 8014dae:	bf83      	ittte	hi
 8014db0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014db4:	189b      	addhi	r3, r3, r2
 8014db6:	9301      	strhi	r3, [sp, #4]
 8014db8:	2300      	movls	r3, #0
 8014dba:	bf86      	itte	hi
 8014dbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014dc0:	608b      	strhi	r3, [r1, #8]
 8014dc2:	9301      	strls	r3, [sp, #4]
 8014dc4:	680b      	ldr	r3, [r1, #0]
 8014dc6:	4688      	mov	r8, r1
 8014dc8:	f04f 0b00 	mov.w	fp, #0
 8014dcc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014dd0:	f848 3b1c 	str.w	r3, [r8], #28
 8014dd4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014dd8:	4607      	mov	r7, r0
 8014dda:	460c      	mov	r4, r1
 8014ddc:	4645      	mov	r5, r8
 8014dde:	465a      	mov	r2, fp
 8014de0:	46d9      	mov	r9, fp
 8014de2:	f8cd b008 	str.w	fp, [sp, #8]
 8014de6:	68a1      	ldr	r1, [r4, #8]
 8014de8:	b181      	cbz	r1, 8014e0c <_scanf_float+0x70>
 8014dea:	6833      	ldr	r3, [r6, #0]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	2b49      	cmp	r3, #73	; 0x49
 8014df0:	d071      	beq.n	8014ed6 <_scanf_float+0x13a>
 8014df2:	d84d      	bhi.n	8014e90 <_scanf_float+0xf4>
 8014df4:	2b39      	cmp	r3, #57	; 0x39
 8014df6:	d840      	bhi.n	8014e7a <_scanf_float+0xde>
 8014df8:	2b31      	cmp	r3, #49	; 0x31
 8014dfa:	f080 8088 	bcs.w	8014f0e <_scanf_float+0x172>
 8014dfe:	2b2d      	cmp	r3, #45	; 0x2d
 8014e00:	f000 8090 	beq.w	8014f24 <_scanf_float+0x188>
 8014e04:	d815      	bhi.n	8014e32 <_scanf_float+0x96>
 8014e06:	2b2b      	cmp	r3, #43	; 0x2b
 8014e08:	f000 808c 	beq.w	8014f24 <_scanf_float+0x188>
 8014e0c:	f1b9 0f00 	cmp.w	r9, #0
 8014e10:	d003      	beq.n	8014e1a <_scanf_float+0x7e>
 8014e12:	6823      	ldr	r3, [r4, #0]
 8014e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e18:	6023      	str	r3, [r4, #0]
 8014e1a:	3a01      	subs	r2, #1
 8014e1c:	2a01      	cmp	r2, #1
 8014e1e:	f200 80ea 	bhi.w	8014ff6 <_scanf_float+0x25a>
 8014e22:	4545      	cmp	r5, r8
 8014e24:	f200 80dc 	bhi.w	8014fe0 <_scanf_float+0x244>
 8014e28:	2601      	movs	r6, #1
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	b007      	add	sp, #28
 8014e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e32:	2b2e      	cmp	r3, #46	; 0x2e
 8014e34:	f000 809f 	beq.w	8014f76 <_scanf_float+0x1da>
 8014e38:	2b30      	cmp	r3, #48	; 0x30
 8014e3a:	d1e7      	bne.n	8014e0c <_scanf_float+0x70>
 8014e3c:	6820      	ldr	r0, [r4, #0]
 8014e3e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014e42:	d064      	beq.n	8014f0e <_scanf_float+0x172>
 8014e44:	9b01      	ldr	r3, [sp, #4]
 8014e46:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014e4a:	6020      	str	r0, [r4, #0]
 8014e4c:	f109 0901 	add.w	r9, r9, #1
 8014e50:	b11b      	cbz	r3, 8014e5a <_scanf_float+0xbe>
 8014e52:	3b01      	subs	r3, #1
 8014e54:	3101      	adds	r1, #1
 8014e56:	9301      	str	r3, [sp, #4]
 8014e58:	60a1      	str	r1, [r4, #8]
 8014e5a:	68a3      	ldr	r3, [r4, #8]
 8014e5c:	3b01      	subs	r3, #1
 8014e5e:	60a3      	str	r3, [r4, #8]
 8014e60:	6923      	ldr	r3, [r4, #16]
 8014e62:	3301      	adds	r3, #1
 8014e64:	6123      	str	r3, [r4, #16]
 8014e66:	6873      	ldr	r3, [r6, #4]
 8014e68:	3b01      	subs	r3, #1
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	6073      	str	r3, [r6, #4]
 8014e6e:	f340 80ac 	ble.w	8014fca <_scanf_float+0x22e>
 8014e72:	6833      	ldr	r3, [r6, #0]
 8014e74:	3301      	adds	r3, #1
 8014e76:	6033      	str	r3, [r6, #0]
 8014e78:	e7b5      	b.n	8014de6 <_scanf_float+0x4a>
 8014e7a:	2b45      	cmp	r3, #69	; 0x45
 8014e7c:	f000 8085 	beq.w	8014f8a <_scanf_float+0x1ee>
 8014e80:	2b46      	cmp	r3, #70	; 0x46
 8014e82:	d06a      	beq.n	8014f5a <_scanf_float+0x1be>
 8014e84:	2b41      	cmp	r3, #65	; 0x41
 8014e86:	d1c1      	bne.n	8014e0c <_scanf_float+0x70>
 8014e88:	2a01      	cmp	r2, #1
 8014e8a:	d1bf      	bne.n	8014e0c <_scanf_float+0x70>
 8014e8c:	2202      	movs	r2, #2
 8014e8e:	e046      	b.n	8014f1e <_scanf_float+0x182>
 8014e90:	2b65      	cmp	r3, #101	; 0x65
 8014e92:	d07a      	beq.n	8014f8a <_scanf_float+0x1ee>
 8014e94:	d818      	bhi.n	8014ec8 <_scanf_float+0x12c>
 8014e96:	2b54      	cmp	r3, #84	; 0x54
 8014e98:	d066      	beq.n	8014f68 <_scanf_float+0x1cc>
 8014e9a:	d811      	bhi.n	8014ec0 <_scanf_float+0x124>
 8014e9c:	2b4e      	cmp	r3, #78	; 0x4e
 8014e9e:	d1b5      	bne.n	8014e0c <_scanf_float+0x70>
 8014ea0:	2a00      	cmp	r2, #0
 8014ea2:	d146      	bne.n	8014f32 <_scanf_float+0x196>
 8014ea4:	f1b9 0f00 	cmp.w	r9, #0
 8014ea8:	d145      	bne.n	8014f36 <_scanf_float+0x19a>
 8014eaa:	6821      	ldr	r1, [r4, #0]
 8014eac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014eb0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014eb4:	d13f      	bne.n	8014f36 <_scanf_float+0x19a>
 8014eb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014eba:	6021      	str	r1, [r4, #0]
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	e02e      	b.n	8014f1e <_scanf_float+0x182>
 8014ec0:	2b59      	cmp	r3, #89	; 0x59
 8014ec2:	d01e      	beq.n	8014f02 <_scanf_float+0x166>
 8014ec4:	2b61      	cmp	r3, #97	; 0x61
 8014ec6:	e7de      	b.n	8014e86 <_scanf_float+0xea>
 8014ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8014eca:	d0e9      	beq.n	8014ea0 <_scanf_float+0x104>
 8014ecc:	d815      	bhi.n	8014efa <_scanf_float+0x15e>
 8014ece:	2b66      	cmp	r3, #102	; 0x66
 8014ed0:	d043      	beq.n	8014f5a <_scanf_float+0x1be>
 8014ed2:	2b69      	cmp	r3, #105	; 0x69
 8014ed4:	d19a      	bne.n	8014e0c <_scanf_float+0x70>
 8014ed6:	f1bb 0f00 	cmp.w	fp, #0
 8014eda:	d138      	bne.n	8014f4e <_scanf_float+0x1b2>
 8014edc:	f1b9 0f00 	cmp.w	r9, #0
 8014ee0:	d197      	bne.n	8014e12 <_scanf_float+0x76>
 8014ee2:	6821      	ldr	r1, [r4, #0]
 8014ee4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014ee8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014eec:	d195      	bne.n	8014e1a <_scanf_float+0x7e>
 8014eee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014ef2:	6021      	str	r1, [r4, #0]
 8014ef4:	f04f 0b01 	mov.w	fp, #1
 8014ef8:	e011      	b.n	8014f1e <_scanf_float+0x182>
 8014efa:	2b74      	cmp	r3, #116	; 0x74
 8014efc:	d034      	beq.n	8014f68 <_scanf_float+0x1cc>
 8014efe:	2b79      	cmp	r3, #121	; 0x79
 8014f00:	d184      	bne.n	8014e0c <_scanf_float+0x70>
 8014f02:	f1bb 0f07 	cmp.w	fp, #7
 8014f06:	d181      	bne.n	8014e0c <_scanf_float+0x70>
 8014f08:	f04f 0b08 	mov.w	fp, #8
 8014f0c:	e007      	b.n	8014f1e <_scanf_float+0x182>
 8014f0e:	eb12 0f0b 	cmn.w	r2, fp
 8014f12:	f47f af7b 	bne.w	8014e0c <_scanf_float+0x70>
 8014f16:	6821      	ldr	r1, [r4, #0]
 8014f18:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014f1c:	6021      	str	r1, [r4, #0]
 8014f1e:	702b      	strb	r3, [r5, #0]
 8014f20:	3501      	adds	r5, #1
 8014f22:	e79a      	b.n	8014e5a <_scanf_float+0xbe>
 8014f24:	6821      	ldr	r1, [r4, #0]
 8014f26:	0608      	lsls	r0, r1, #24
 8014f28:	f57f af70 	bpl.w	8014e0c <_scanf_float+0x70>
 8014f2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014f30:	e7f4      	b.n	8014f1c <_scanf_float+0x180>
 8014f32:	2a02      	cmp	r2, #2
 8014f34:	d047      	beq.n	8014fc6 <_scanf_float+0x22a>
 8014f36:	f1bb 0f01 	cmp.w	fp, #1
 8014f3a:	d003      	beq.n	8014f44 <_scanf_float+0x1a8>
 8014f3c:	f1bb 0f04 	cmp.w	fp, #4
 8014f40:	f47f af64 	bne.w	8014e0c <_scanf_float+0x70>
 8014f44:	f10b 0b01 	add.w	fp, fp, #1
 8014f48:	fa5f fb8b 	uxtb.w	fp, fp
 8014f4c:	e7e7      	b.n	8014f1e <_scanf_float+0x182>
 8014f4e:	f1bb 0f03 	cmp.w	fp, #3
 8014f52:	d0f7      	beq.n	8014f44 <_scanf_float+0x1a8>
 8014f54:	f1bb 0f05 	cmp.w	fp, #5
 8014f58:	e7f2      	b.n	8014f40 <_scanf_float+0x1a4>
 8014f5a:	f1bb 0f02 	cmp.w	fp, #2
 8014f5e:	f47f af55 	bne.w	8014e0c <_scanf_float+0x70>
 8014f62:	f04f 0b03 	mov.w	fp, #3
 8014f66:	e7da      	b.n	8014f1e <_scanf_float+0x182>
 8014f68:	f1bb 0f06 	cmp.w	fp, #6
 8014f6c:	f47f af4e 	bne.w	8014e0c <_scanf_float+0x70>
 8014f70:	f04f 0b07 	mov.w	fp, #7
 8014f74:	e7d3      	b.n	8014f1e <_scanf_float+0x182>
 8014f76:	6821      	ldr	r1, [r4, #0]
 8014f78:	0588      	lsls	r0, r1, #22
 8014f7a:	f57f af47 	bpl.w	8014e0c <_scanf_float+0x70>
 8014f7e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014f82:	6021      	str	r1, [r4, #0]
 8014f84:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f88:	e7c9      	b.n	8014f1e <_scanf_float+0x182>
 8014f8a:	6821      	ldr	r1, [r4, #0]
 8014f8c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014f90:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014f94:	d006      	beq.n	8014fa4 <_scanf_float+0x208>
 8014f96:	0548      	lsls	r0, r1, #21
 8014f98:	f57f af38 	bpl.w	8014e0c <_scanf_float+0x70>
 8014f9c:	f1b9 0f00 	cmp.w	r9, #0
 8014fa0:	f43f af3b 	beq.w	8014e1a <_scanf_float+0x7e>
 8014fa4:	0588      	lsls	r0, r1, #22
 8014fa6:	bf58      	it	pl
 8014fa8:	9802      	ldrpl	r0, [sp, #8]
 8014faa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014fae:	bf58      	it	pl
 8014fb0:	eba9 0000 	subpl.w	r0, r9, r0
 8014fb4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8014fb8:	bf58      	it	pl
 8014fba:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014fbe:	6021      	str	r1, [r4, #0]
 8014fc0:	f04f 0900 	mov.w	r9, #0
 8014fc4:	e7ab      	b.n	8014f1e <_scanf_float+0x182>
 8014fc6:	2203      	movs	r2, #3
 8014fc8:	e7a9      	b.n	8014f1e <_scanf_float+0x182>
 8014fca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014fce:	9205      	str	r2, [sp, #20]
 8014fd0:	4631      	mov	r1, r6
 8014fd2:	4638      	mov	r0, r7
 8014fd4:	4798      	blx	r3
 8014fd6:	9a05      	ldr	r2, [sp, #20]
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	f43f af04 	beq.w	8014de6 <_scanf_float+0x4a>
 8014fde:	e715      	b.n	8014e0c <_scanf_float+0x70>
 8014fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fe4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014fe8:	4632      	mov	r2, r6
 8014fea:	4638      	mov	r0, r7
 8014fec:	4798      	blx	r3
 8014fee:	6923      	ldr	r3, [r4, #16]
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	6123      	str	r3, [r4, #16]
 8014ff4:	e715      	b.n	8014e22 <_scanf_float+0x86>
 8014ff6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014ffa:	2b06      	cmp	r3, #6
 8014ffc:	d80a      	bhi.n	8015014 <_scanf_float+0x278>
 8014ffe:	f1bb 0f02 	cmp.w	fp, #2
 8015002:	d968      	bls.n	80150d6 <_scanf_float+0x33a>
 8015004:	f1ab 0b03 	sub.w	fp, fp, #3
 8015008:	fa5f fb8b 	uxtb.w	fp, fp
 801500c:	eba5 0b0b 	sub.w	fp, r5, fp
 8015010:	455d      	cmp	r5, fp
 8015012:	d14b      	bne.n	80150ac <_scanf_float+0x310>
 8015014:	6823      	ldr	r3, [r4, #0]
 8015016:	05da      	lsls	r2, r3, #23
 8015018:	d51f      	bpl.n	801505a <_scanf_float+0x2be>
 801501a:	055b      	lsls	r3, r3, #21
 801501c:	d468      	bmi.n	80150f0 <_scanf_float+0x354>
 801501e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015022:	6923      	ldr	r3, [r4, #16]
 8015024:	2965      	cmp	r1, #101	; 0x65
 8015026:	f103 33ff 	add.w	r3, r3, #4294967295
 801502a:	f105 3bff 	add.w	fp, r5, #4294967295
 801502e:	6123      	str	r3, [r4, #16]
 8015030:	d00d      	beq.n	801504e <_scanf_float+0x2b2>
 8015032:	2945      	cmp	r1, #69	; 0x45
 8015034:	d00b      	beq.n	801504e <_scanf_float+0x2b2>
 8015036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801503a:	4632      	mov	r2, r6
 801503c:	4638      	mov	r0, r7
 801503e:	4798      	blx	r3
 8015040:	6923      	ldr	r3, [r4, #16]
 8015042:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015046:	3b01      	subs	r3, #1
 8015048:	f1a5 0b02 	sub.w	fp, r5, #2
 801504c:	6123      	str	r3, [r4, #16]
 801504e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015052:	4632      	mov	r2, r6
 8015054:	4638      	mov	r0, r7
 8015056:	4798      	blx	r3
 8015058:	465d      	mov	r5, fp
 801505a:	6826      	ldr	r6, [r4, #0]
 801505c:	f016 0610 	ands.w	r6, r6, #16
 8015060:	d17a      	bne.n	8015158 <_scanf_float+0x3bc>
 8015062:	702e      	strb	r6, [r5, #0]
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801506e:	d142      	bne.n	80150f6 <_scanf_float+0x35a>
 8015070:	9b02      	ldr	r3, [sp, #8]
 8015072:	eba9 0303 	sub.w	r3, r9, r3
 8015076:	425a      	negs	r2, r3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d149      	bne.n	8015110 <_scanf_float+0x374>
 801507c:	2200      	movs	r2, #0
 801507e:	4641      	mov	r1, r8
 8015080:	4638      	mov	r0, r7
 8015082:	f001 f801 	bl	8016088 <_strtod_r>
 8015086:	6825      	ldr	r5, [r4, #0]
 8015088:	f8da 3000 	ldr.w	r3, [sl]
 801508c:	f015 0f02 	tst.w	r5, #2
 8015090:	f103 0204 	add.w	r2, r3, #4
 8015094:	ec59 8b10 	vmov	r8, r9, d0
 8015098:	f8ca 2000 	str.w	r2, [sl]
 801509c:	d043      	beq.n	8015126 <_scanf_float+0x38a>
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	e9c3 8900 	strd	r8, r9, [r3]
 80150a4:	68e3      	ldr	r3, [r4, #12]
 80150a6:	3301      	adds	r3, #1
 80150a8:	60e3      	str	r3, [r4, #12]
 80150aa:	e6be      	b.n	8014e2a <_scanf_float+0x8e>
 80150ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80150b4:	4632      	mov	r2, r6
 80150b6:	4638      	mov	r0, r7
 80150b8:	4798      	blx	r3
 80150ba:	6923      	ldr	r3, [r4, #16]
 80150bc:	3b01      	subs	r3, #1
 80150be:	6123      	str	r3, [r4, #16]
 80150c0:	e7a6      	b.n	8015010 <_scanf_float+0x274>
 80150c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150c6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80150ca:	4632      	mov	r2, r6
 80150cc:	4638      	mov	r0, r7
 80150ce:	4798      	blx	r3
 80150d0:	6923      	ldr	r3, [r4, #16]
 80150d2:	3b01      	subs	r3, #1
 80150d4:	6123      	str	r3, [r4, #16]
 80150d6:	4545      	cmp	r5, r8
 80150d8:	d8f3      	bhi.n	80150c2 <_scanf_float+0x326>
 80150da:	e6a5      	b.n	8014e28 <_scanf_float+0x8c>
 80150dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80150e4:	4632      	mov	r2, r6
 80150e6:	4638      	mov	r0, r7
 80150e8:	4798      	blx	r3
 80150ea:	6923      	ldr	r3, [r4, #16]
 80150ec:	3b01      	subs	r3, #1
 80150ee:	6123      	str	r3, [r4, #16]
 80150f0:	4545      	cmp	r5, r8
 80150f2:	d8f3      	bhi.n	80150dc <_scanf_float+0x340>
 80150f4:	e698      	b.n	8014e28 <_scanf_float+0x8c>
 80150f6:	9b03      	ldr	r3, [sp, #12]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d0bf      	beq.n	801507c <_scanf_float+0x2e0>
 80150fc:	9904      	ldr	r1, [sp, #16]
 80150fe:	230a      	movs	r3, #10
 8015100:	4632      	mov	r2, r6
 8015102:	3101      	adds	r1, #1
 8015104:	4638      	mov	r0, r7
 8015106:	f001 f84b 	bl	80161a0 <_strtol_r>
 801510a:	9b03      	ldr	r3, [sp, #12]
 801510c:	9d04      	ldr	r5, [sp, #16]
 801510e:	1ac2      	subs	r2, r0, r3
 8015110:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015114:	429d      	cmp	r5, r3
 8015116:	bf28      	it	cs
 8015118:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801511c:	490f      	ldr	r1, [pc, #60]	; (801515c <_scanf_float+0x3c0>)
 801511e:	4628      	mov	r0, r5
 8015120:	f000 f982 	bl	8015428 <siprintf>
 8015124:	e7aa      	b.n	801507c <_scanf_float+0x2e0>
 8015126:	f015 0504 	ands.w	r5, r5, #4
 801512a:	d1b8      	bne.n	801509e <_scanf_float+0x302>
 801512c:	681f      	ldr	r7, [r3, #0]
 801512e:	ee10 2a10 	vmov	r2, s0
 8015132:	464b      	mov	r3, r9
 8015134:	ee10 0a10 	vmov	r0, s0
 8015138:	4649      	mov	r1, r9
 801513a:	f7f3 fc2f 	bl	800899c <__aeabi_dcmpun>
 801513e:	b128      	cbz	r0, 801514c <_scanf_float+0x3b0>
 8015140:	4628      	mov	r0, r5
 8015142:	f000 f96b 	bl	801541c <nanf>
 8015146:	ed87 0a00 	vstr	s0, [r7]
 801514a:	e7ab      	b.n	80150a4 <_scanf_float+0x308>
 801514c:	4640      	mov	r0, r8
 801514e:	4649      	mov	r1, r9
 8015150:	f7f3 fc82 	bl	8008a58 <__aeabi_d2f>
 8015154:	6038      	str	r0, [r7, #0]
 8015156:	e7a5      	b.n	80150a4 <_scanf_float+0x308>
 8015158:	2600      	movs	r6, #0
 801515a:	e666      	b.n	8014e2a <_scanf_float+0x8e>
 801515c:	0801991a 	.word	0x0801991a

08015160 <iprintf>:
 8015160:	b40f      	push	{r0, r1, r2, r3}
 8015162:	4b0a      	ldr	r3, [pc, #40]	; (801518c <iprintf+0x2c>)
 8015164:	b513      	push	{r0, r1, r4, lr}
 8015166:	681c      	ldr	r4, [r3, #0]
 8015168:	b124      	cbz	r4, 8015174 <iprintf+0x14>
 801516a:	69a3      	ldr	r3, [r4, #24]
 801516c:	b913      	cbnz	r3, 8015174 <iprintf+0x14>
 801516e:	4620      	mov	r0, r4
 8015170:	f002 f830 	bl	80171d4 <__sinit>
 8015174:	ab05      	add	r3, sp, #20
 8015176:	9a04      	ldr	r2, [sp, #16]
 8015178:	68a1      	ldr	r1, [r4, #8]
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	4620      	mov	r0, r4
 801517e:	f003 fac7 	bl	8018710 <_vfiprintf_r>
 8015182:	b002      	add	sp, #8
 8015184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015188:	b004      	add	sp, #16
 801518a:	4770      	bx	lr
 801518c:	20000028 	.word	0x20000028

08015190 <putchar>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4b08      	ldr	r3, [pc, #32]	; (80151b4 <putchar+0x24>)
 8015194:	681c      	ldr	r4, [r3, #0]
 8015196:	4605      	mov	r5, r0
 8015198:	b124      	cbz	r4, 80151a4 <putchar+0x14>
 801519a:	69a3      	ldr	r3, [r4, #24]
 801519c:	b913      	cbnz	r3, 80151a4 <putchar+0x14>
 801519e:	4620      	mov	r0, r4
 80151a0:	f002 f818 	bl	80171d4 <__sinit>
 80151a4:	68a2      	ldr	r2, [r4, #8]
 80151a6:	4629      	mov	r1, r5
 80151a8:	4620      	mov	r0, r4
 80151aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151ae:	f003 be95 	b.w	8018edc <_putc_r>
 80151b2:	bf00      	nop
 80151b4:	20000028 	.word	0x20000028

080151b8 <_puts_r>:
 80151b8:	b570      	push	{r4, r5, r6, lr}
 80151ba:	460e      	mov	r6, r1
 80151bc:	4605      	mov	r5, r0
 80151be:	b118      	cbz	r0, 80151c8 <_puts_r+0x10>
 80151c0:	6983      	ldr	r3, [r0, #24]
 80151c2:	b90b      	cbnz	r3, 80151c8 <_puts_r+0x10>
 80151c4:	f002 f806 	bl	80171d4 <__sinit>
 80151c8:	69ab      	ldr	r3, [r5, #24]
 80151ca:	68ac      	ldr	r4, [r5, #8]
 80151cc:	b913      	cbnz	r3, 80151d4 <_puts_r+0x1c>
 80151ce:	4628      	mov	r0, r5
 80151d0:	f002 f800 	bl	80171d4 <__sinit>
 80151d4:	4b23      	ldr	r3, [pc, #140]	; (8015264 <_puts_r+0xac>)
 80151d6:	429c      	cmp	r4, r3
 80151d8:	d117      	bne.n	801520a <_puts_r+0x52>
 80151da:	686c      	ldr	r4, [r5, #4]
 80151dc:	89a3      	ldrh	r3, [r4, #12]
 80151de:	071b      	lsls	r3, r3, #28
 80151e0:	d51d      	bpl.n	801521e <_puts_r+0x66>
 80151e2:	6923      	ldr	r3, [r4, #16]
 80151e4:	b1db      	cbz	r3, 801521e <_puts_r+0x66>
 80151e6:	3e01      	subs	r6, #1
 80151e8:	68a3      	ldr	r3, [r4, #8]
 80151ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80151ee:	3b01      	subs	r3, #1
 80151f0:	60a3      	str	r3, [r4, #8]
 80151f2:	b9e9      	cbnz	r1, 8015230 <_puts_r+0x78>
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	da2e      	bge.n	8015256 <_puts_r+0x9e>
 80151f8:	4622      	mov	r2, r4
 80151fa:	210a      	movs	r1, #10
 80151fc:	4628      	mov	r0, r5
 80151fe:	f000 ffe1 	bl	80161c4 <__swbuf_r>
 8015202:	3001      	adds	r0, #1
 8015204:	d011      	beq.n	801522a <_puts_r+0x72>
 8015206:	200a      	movs	r0, #10
 8015208:	e011      	b.n	801522e <_puts_r+0x76>
 801520a:	4b17      	ldr	r3, [pc, #92]	; (8015268 <_puts_r+0xb0>)
 801520c:	429c      	cmp	r4, r3
 801520e:	d101      	bne.n	8015214 <_puts_r+0x5c>
 8015210:	68ac      	ldr	r4, [r5, #8]
 8015212:	e7e3      	b.n	80151dc <_puts_r+0x24>
 8015214:	4b15      	ldr	r3, [pc, #84]	; (801526c <_puts_r+0xb4>)
 8015216:	429c      	cmp	r4, r3
 8015218:	bf08      	it	eq
 801521a:	68ec      	ldreq	r4, [r5, #12]
 801521c:	e7de      	b.n	80151dc <_puts_r+0x24>
 801521e:	4621      	mov	r1, r4
 8015220:	4628      	mov	r0, r5
 8015222:	f001 f821 	bl	8016268 <__swsetup_r>
 8015226:	2800      	cmp	r0, #0
 8015228:	d0dd      	beq.n	80151e6 <_puts_r+0x2e>
 801522a:	f04f 30ff 	mov.w	r0, #4294967295
 801522e:	bd70      	pop	{r4, r5, r6, pc}
 8015230:	2b00      	cmp	r3, #0
 8015232:	da04      	bge.n	801523e <_puts_r+0x86>
 8015234:	69a2      	ldr	r2, [r4, #24]
 8015236:	429a      	cmp	r2, r3
 8015238:	dc06      	bgt.n	8015248 <_puts_r+0x90>
 801523a:	290a      	cmp	r1, #10
 801523c:	d004      	beq.n	8015248 <_puts_r+0x90>
 801523e:	6823      	ldr	r3, [r4, #0]
 8015240:	1c5a      	adds	r2, r3, #1
 8015242:	6022      	str	r2, [r4, #0]
 8015244:	7019      	strb	r1, [r3, #0]
 8015246:	e7cf      	b.n	80151e8 <_puts_r+0x30>
 8015248:	4622      	mov	r2, r4
 801524a:	4628      	mov	r0, r5
 801524c:	f000 ffba 	bl	80161c4 <__swbuf_r>
 8015250:	3001      	adds	r0, #1
 8015252:	d1c9      	bne.n	80151e8 <_puts_r+0x30>
 8015254:	e7e9      	b.n	801522a <_puts_r+0x72>
 8015256:	6823      	ldr	r3, [r4, #0]
 8015258:	200a      	movs	r0, #10
 801525a:	1c5a      	adds	r2, r3, #1
 801525c:	6022      	str	r2, [r4, #0]
 801525e:	7018      	strb	r0, [r3, #0]
 8015260:	e7e5      	b.n	801522e <_puts_r+0x76>
 8015262:	bf00      	nop
 8015264:	080199a0 	.word	0x080199a0
 8015268:	080199c0 	.word	0x080199c0
 801526c:	08019980 	.word	0x08019980

08015270 <puts>:
 8015270:	4b02      	ldr	r3, [pc, #8]	; (801527c <puts+0xc>)
 8015272:	4601      	mov	r1, r0
 8015274:	6818      	ldr	r0, [r3, #0]
 8015276:	f7ff bf9f 	b.w	80151b8 <_puts_r>
 801527a:	bf00      	nop
 801527c:	20000028 	.word	0x20000028

08015280 <iscanf>:
 8015280:	b40f      	push	{r0, r1, r2, r3}
 8015282:	4b0a      	ldr	r3, [pc, #40]	; (80152ac <iscanf+0x2c>)
 8015284:	b513      	push	{r0, r1, r4, lr}
 8015286:	681c      	ldr	r4, [r3, #0]
 8015288:	b124      	cbz	r4, 8015294 <iscanf+0x14>
 801528a:	69a3      	ldr	r3, [r4, #24]
 801528c:	b913      	cbnz	r3, 8015294 <iscanf+0x14>
 801528e:	4620      	mov	r0, r4
 8015290:	f001 ffa0 	bl	80171d4 <__sinit>
 8015294:	ab05      	add	r3, sp, #20
 8015296:	9a04      	ldr	r2, [sp, #16]
 8015298:	6861      	ldr	r1, [r4, #4]
 801529a:	9301      	str	r3, [sp, #4]
 801529c:	4620      	mov	r0, r4
 801529e:	f003 fc9d 	bl	8018bdc <_vfiscanf_r>
 80152a2:	b002      	add	sp, #8
 80152a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152a8:	b004      	add	sp, #16
 80152aa:	4770      	bx	lr
 80152ac:	20000028 	.word	0x20000028

080152b0 <setbuf>:
 80152b0:	2900      	cmp	r1, #0
 80152b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152b6:	bf0c      	ite	eq
 80152b8:	2202      	moveq	r2, #2
 80152ba:	2200      	movne	r2, #0
 80152bc:	f000 b800 	b.w	80152c0 <setvbuf>

080152c0 <setvbuf>:
 80152c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152c4:	461d      	mov	r5, r3
 80152c6:	4b51      	ldr	r3, [pc, #324]	; (801540c <setvbuf+0x14c>)
 80152c8:	681e      	ldr	r6, [r3, #0]
 80152ca:	4604      	mov	r4, r0
 80152cc:	460f      	mov	r7, r1
 80152ce:	4690      	mov	r8, r2
 80152d0:	b126      	cbz	r6, 80152dc <setvbuf+0x1c>
 80152d2:	69b3      	ldr	r3, [r6, #24]
 80152d4:	b913      	cbnz	r3, 80152dc <setvbuf+0x1c>
 80152d6:	4630      	mov	r0, r6
 80152d8:	f001 ff7c 	bl	80171d4 <__sinit>
 80152dc:	4b4c      	ldr	r3, [pc, #304]	; (8015410 <setvbuf+0x150>)
 80152de:	429c      	cmp	r4, r3
 80152e0:	d152      	bne.n	8015388 <setvbuf+0xc8>
 80152e2:	6874      	ldr	r4, [r6, #4]
 80152e4:	f1b8 0f02 	cmp.w	r8, #2
 80152e8:	d006      	beq.n	80152f8 <setvbuf+0x38>
 80152ea:	f1b8 0f01 	cmp.w	r8, #1
 80152ee:	f200 8089 	bhi.w	8015404 <setvbuf+0x144>
 80152f2:	2d00      	cmp	r5, #0
 80152f4:	f2c0 8086 	blt.w	8015404 <setvbuf+0x144>
 80152f8:	4621      	mov	r1, r4
 80152fa:	4630      	mov	r0, r6
 80152fc:	f001 feee 	bl	80170dc <_fflush_r>
 8015300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015302:	b141      	cbz	r1, 8015316 <setvbuf+0x56>
 8015304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015308:	4299      	cmp	r1, r3
 801530a:	d002      	beq.n	8015312 <setvbuf+0x52>
 801530c:	4630      	mov	r0, r6
 801530e:	f002 ffdb 	bl	80182c8 <_free_r>
 8015312:	2300      	movs	r3, #0
 8015314:	6363      	str	r3, [r4, #52]	; 0x34
 8015316:	2300      	movs	r3, #0
 8015318:	61a3      	str	r3, [r4, #24]
 801531a:	6063      	str	r3, [r4, #4]
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	061b      	lsls	r3, r3, #24
 8015320:	d503      	bpl.n	801532a <setvbuf+0x6a>
 8015322:	6921      	ldr	r1, [r4, #16]
 8015324:	4630      	mov	r0, r6
 8015326:	f002 ffcf 	bl	80182c8 <_free_r>
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8015330:	f023 0303 	bic.w	r3, r3, #3
 8015334:	f1b8 0f02 	cmp.w	r8, #2
 8015338:	81a3      	strh	r3, [r4, #12]
 801533a:	d05d      	beq.n	80153f8 <setvbuf+0x138>
 801533c:	ab01      	add	r3, sp, #4
 801533e:	466a      	mov	r2, sp
 8015340:	4621      	mov	r1, r4
 8015342:	4630      	mov	r0, r6
 8015344:	f002 fb34 	bl	80179b0 <__swhatbuf_r>
 8015348:	89a3      	ldrh	r3, [r4, #12]
 801534a:	4318      	orrs	r0, r3
 801534c:	81a0      	strh	r0, [r4, #12]
 801534e:	bb2d      	cbnz	r5, 801539c <setvbuf+0xdc>
 8015350:	9d00      	ldr	r5, [sp, #0]
 8015352:	4628      	mov	r0, r5
 8015354:	f002 fb90 	bl	8017a78 <malloc>
 8015358:	4607      	mov	r7, r0
 801535a:	2800      	cmp	r0, #0
 801535c:	d14e      	bne.n	80153fc <setvbuf+0x13c>
 801535e:	f8dd 9000 	ldr.w	r9, [sp]
 8015362:	45a9      	cmp	r9, r5
 8015364:	d13c      	bne.n	80153e0 <setvbuf+0x120>
 8015366:	f04f 30ff 	mov.w	r0, #4294967295
 801536a:	89a3      	ldrh	r3, [r4, #12]
 801536c:	f043 0302 	orr.w	r3, r3, #2
 8015370:	81a3      	strh	r3, [r4, #12]
 8015372:	2300      	movs	r3, #0
 8015374:	60a3      	str	r3, [r4, #8]
 8015376:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801537a:	6023      	str	r3, [r4, #0]
 801537c:	6123      	str	r3, [r4, #16]
 801537e:	2301      	movs	r3, #1
 8015380:	6163      	str	r3, [r4, #20]
 8015382:	b003      	add	sp, #12
 8015384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015388:	4b22      	ldr	r3, [pc, #136]	; (8015414 <setvbuf+0x154>)
 801538a:	429c      	cmp	r4, r3
 801538c:	d101      	bne.n	8015392 <setvbuf+0xd2>
 801538e:	68b4      	ldr	r4, [r6, #8]
 8015390:	e7a8      	b.n	80152e4 <setvbuf+0x24>
 8015392:	4b21      	ldr	r3, [pc, #132]	; (8015418 <setvbuf+0x158>)
 8015394:	429c      	cmp	r4, r3
 8015396:	bf08      	it	eq
 8015398:	68f4      	ldreq	r4, [r6, #12]
 801539a:	e7a3      	b.n	80152e4 <setvbuf+0x24>
 801539c:	2f00      	cmp	r7, #0
 801539e:	d0d8      	beq.n	8015352 <setvbuf+0x92>
 80153a0:	69b3      	ldr	r3, [r6, #24]
 80153a2:	b913      	cbnz	r3, 80153aa <setvbuf+0xea>
 80153a4:	4630      	mov	r0, r6
 80153a6:	f001 ff15 	bl	80171d4 <__sinit>
 80153aa:	f1b8 0f01 	cmp.w	r8, #1
 80153ae:	bf08      	it	eq
 80153b0:	89a3      	ldrheq	r3, [r4, #12]
 80153b2:	6027      	str	r7, [r4, #0]
 80153b4:	bf04      	itt	eq
 80153b6:	f043 0301 	orreq.w	r3, r3, #1
 80153ba:	81a3      	strheq	r3, [r4, #12]
 80153bc:	89a3      	ldrh	r3, [r4, #12]
 80153be:	f013 0008 	ands.w	r0, r3, #8
 80153c2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80153c6:	d01b      	beq.n	8015400 <setvbuf+0x140>
 80153c8:	f013 0001 	ands.w	r0, r3, #1
 80153cc:	bf18      	it	ne
 80153ce:	426d      	negne	r5, r5
 80153d0:	f04f 0300 	mov.w	r3, #0
 80153d4:	bf1d      	ittte	ne
 80153d6:	60a3      	strne	r3, [r4, #8]
 80153d8:	61a5      	strne	r5, [r4, #24]
 80153da:	4618      	movne	r0, r3
 80153dc:	60a5      	streq	r5, [r4, #8]
 80153de:	e7d0      	b.n	8015382 <setvbuf+0xc2>
 80153e0:	4648      	mov	r0, r9
 80153e2:	f002 fb49 	bl	8017a78 <malloc>
 80153e6:	4607      	mov	r7, r0
 80153e8:	2800      	cmp	r0, #0
 80153ea:	d0bc      	beq.n	8015366 <setvbuf+0xa6>
 80153ec:	89a3      	ldrh	r3, [r4, #12]
 80153ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153f2:	81a3      	strh	r3, [r4, #12]
 80153f4:	464d      	mov	r5, r9
 80153f6:	e7d3      	b.n	80153a0 <setvbuf+0xe0>
 80153f8:	2000      	movs	r0, #0
 80153fa:	e7b6      	b.n	801536a <setvbuf+0xaa>
 80153fc:	46a9      	mov	r9, r5
 80153fe:	e7f5      	b.n	80153ec <setvbuf+0x12c>
 8015400:	60a0      	str	r0, [r4, #8]
 8015402:	e7be      	b.n	8015382 <setvbuf+0xc2>
 8015404:	f04f 30ff 	mov.w	r0, #4294967295
 8015408:	e7bb      	b.n	8015382 <setvbuf+0xc2>
 801540a:	bf00      	nop
 801540c:	20000028 	.word	0x20000028
 8015410:	080199a0 	.word	0x080199a0
 8015414:	080199c0 	.word	0x080199c0
 8015418:	08019980 	.word	0x08019980

0801541c <nanf>:
 801541c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015424 <nanf+0x8>
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	7fc00000 	.word	0x7fc00000

08015428 <siprintf>:
 8015428:	b40e      	push	{r1, r2, r3}
 801542a:	b500      	push	{lr}
 801542c:	b09c      	sub	sp, #112	; 0x70
 801542e:	ab1d      	add	r3, sp, #116	; 0x74
 8015430:	9002      	str	r0, [sp, #8]
 8015432:	9006      	str	r0, [sp, #24]
 8015434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015438:	4809      	ldr	r0, [pc, #36]	; (8015460 <siprintf+0x38>)
 801543a:	9107      	str	r1, [sp, #28]
 801543c:	9104      	str	r1, [sp, #16]
 801543e:	4909      	ldr	r1, [pc, #36]	; (8015464 <siprintf+0x3c>)
 8015440:	f853 2b04 	ldr.w	r2, [r3], #4
 8015444:	9105      	str	r1, [sp, #20]
 8015446:	6800      	ldr	r0, [r0, #0]
 8015448:	9301      	str	r3, [sp, #4]
 801544a:	a902      	add	r1, sp, #8
 801544c:	f003 f83e 	bl	80184cc <_svfiprintf_r>
 8015450:	9b02      	ldr	r3, [sp, #8]
 8015452:	2200      	movs	r2, #0
 8015454:	701a      	strb	r2, [r3, #0]
 8015456:	b01c      	add	sp, #112	; 0x70
 8015458:	f85d eb04 	ldr.w	lr, [sp], #4
 801545c:	b003      	add	sp, #12
 801545e:	4770      	bx	lr
 8015460:	20000028 	.word	0x20000028
 8015464:	ffff0208 	.word	0xffff0208

08015468 <sulp>:
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	4604      	mov	r4, r0
 801546c:	460d      	mov	r5, r1
 801546e:	ec45 4b10 	vmov	d0, r4, r5
 8015472:	4616      	mov	r6, r2
 8015474:	f002 fde6 	bl	8018044 <__ulp>
 8015478:	ec51 0b10 	vmov	r0, r1, d0
 801547c:	b17e      	cbz	r6, 801549e <sulp+0x36>
 801547e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015482:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015486:	2b00      	cmp	r3, #0
 8015488:	dd09      	ble.n	801549e <sulp+0x36>
 801548a:	051b      	lsls	r3, r3, #20
 801548c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015490:	2400      	movs	r4, #0
 8015492:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015496:	4622      	mov	r2, r4
 8015498:	462b      	mov	r3, r5
 801549a:	f7f2 ffe5 	bl	8008468 <__aeabi_dmul>
 801549e:	bd70      	pop	{r4, r5, r6, pc}

080154a0 <_strtod_l>:
 80154a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a4:	461f      	mov	r7, r3
 80154a6:	b0a1      	sub	sp, #132	; 0x84
 80154a8:	2300      	movs	r3, #0
 80154aa:	4681      	mov	r9, r0
 80154ac:	4638      	mov	r0, r7
 80154ae:	460e      	mov	r6, r1
 80154b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80154b2:	931c      	str	r3, [sp, #112]	; 0x70
 80154b4:	f002 fa6c 	bl	8017990 <__localeconv_l>
 80154b8:	4680      	mov	r8, r0
 80154ba:	6800      	ldr	r0, [r0, #0]
 80154bc:	f7f2 fdc0 	bl	8008040 <strlen>
 80154c0:	f04f 0a00 	mov.w	sl, #0
 80154c4:	4604      	mov	r4, r0
 80154c6:	f04f 0b00 	mov.w	fp, #0
 80154ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80154cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154ce:	781a      	ldrb	r2, [r3, #0]
 80154d0:	2a0d      	cmp	r2, #13
 80154d2:	d832      	bhi.n	801553a <_strtod_l+0x9a>
 80154d4:	2a09      	cmp	r2, #9
 80154d6:	d236      	bcs.n	8015546 <_strtod_l+0xa6>
 80154d8:	2a00      	cmp	r2, #0
 80154da:	d03e      	beq.n	801555a <_strtod_l+0xba>
 80154dc:	2300      	movs	r3, #0
 80154de:	930d      	str	r3, [sp, #52]	; 0x34
 80154e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80154e2:	782b      	ldrb	r3, [r5, #0]
 80154e4:	2b30      	cmp	r3, #48	; 0x30
 80154e6:	f040 80ac 	bne.w	8015642 <_strtod_l+0x1a2>
 80154ea:	786b      	ldrb	r3, [r5, #1]
 80154ec:	2b58      	cmp	r3, #88	; 0x58
 80154ee:	d001      	beq.n	80154f4 <_strtod_l+0x54>
 80154f0:	2b78      	cmp	r3, #120	; 0x78
 80154f2:	d167      	bne.n	80155c4 <_strtod_l+0x124>
 80154f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154f6:	9301      	str	r3, [sp, #4]
 80154f8:	ab1c      	add	r3, sp, #112	; 0x70
 80154fa:	9300      	str	r3, [sp, #0]
 80154fc:	9702      	str	r7, [sp, #8]
 80154fe:	ab1d      	add	r3, sp, #116	; 0x74
 8015500:	4a88      	ldr	r2, [pc, #544]	; (8015724 <_strtod_l+0x284>)
 8015502:	a91b      	add	r1, sp, #108	; 0x6c
 8015504:	4648      	mov	r0, r9
 8015506:	f001 ff5a 	bl	80173be <__gethex>
 801550a:	f010 0407 	ands.w	r4, r0, #7
 801550e:	4606      	mov	r6, r0
 8015510:	d005      	beq.n	801551e <_strtod_l+0x7e>
 8015512:	2c06      	cmp	r4, #6
 8015514:	d12b      	bne.n	801556e <_strtod_l+0xce>
 8015516:	3501      	adds	r5, #1
 8015518:	2300      	movs	r3, #0
 801551a:	951b      	str	r5, [sp, #108]	; 0x6c
 801551c:	930d      	str	r3, [sp, #52]	; 0x34
 801551e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015520:	2b00      	cmp	r3, #0
 8015522:	f040 859a 	bne.w	801605a <_strtod_l+0xbba>
 8015526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015528:	b1e3      	cbz	r3, 8015564 <_strtod_l+0xc4>
 801552a:	4652      	mov	r2, sl
 801552c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015530:	ec43 2b10 	vmov	d0, r2, r3
 8015534:	b021      	add	sp, #132	; 0x84
 8015536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801553a:	2a2b      	cmp	r2, #43	; 0x2b
 801553c:	d015      	beq.n	801556a <_strtod_l+0xca>
 801553e:	2a2d      	cmp	r2, #45	; 0x2d
 8015540:	d004      	beq.n	801554c <_strtod_l+0xac>
 8015542:	2a20      	cmp	r2, #32
 8015544:	d1ca      	bne.n	80154dc <_strtod_l+0x3c>
 8015546:	3301      	adds	r3, #1
 8015548:	931b      	str	r3, [sp, #108]	; 0x6c
 801554a:	e7bf      	b.n	80154cc <_strtod_l+0x2c>
 801554c:	2201      	movs	r2, #1
 801554e:	920d      	str	r2, [sp, #52]	; 0x34
 8015550:	1c5a      	adds	r2, r3, #1
 8015552:	921b      	str	r2, [sp, #108]	; 0x6c
 8015554:	785b      	ldrb	r3, [r3, #1]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d1c2      	bne.n	80154e0 <_strtod_l+0x40>
 801555a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801555c:	961b      	str	r6, [sp, #108]	; 0x6c
 801555e:	2b00      	cmp	r3, #0
 8015560:	f040 8579 	bne.w	8016056 <_strtod_l+0xbb6>
 8015564:	4652      	mov	r2, sl
 8015566:	465b      	mov	r3, fp
 8015568:	e7e2      	b.n	8015530 <_strtod_l+0x90>
 801556a:	2200      	movs	r2, #0
 801556c:	e7ef      	b.n	801554e <_strtod_l+0xae>
 801556e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015570:	b13a      	cbz	r2, 8015582 <_strtod_l+0xe2>
 8015572:	2135      	movs	r1, #53	; 0x35
 8015574:	a81e      	add	r0, sp, #120	; 0x78
 8015576:	f002 fe5d 	bl	8018234 <__copybits>
 801557a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801557c:	4648      	mov	r0, r9
 801557e:	f002 fac9 	bl	8017b14 <_Bfree>
 8015582:	3c01      	subs	r4, #1
 8015584:	2c04      	cmp	r4, #4
 8015586:	d806      	bhi.n	8015596 <_strtod_l+0xf6>
 8015588:	e8df f004 	tbb	[pc, r4]
 801558c:	1714030a 	.word	0x1714030a
 8015590:	0a          	.byte	0x0a
 8015591:	00          	.byte	0x00
 8015592:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015596:	0730      	lsls	r0, r6, #28
 8015598:	d5c1      	bpl.n	801551e <_strtod_l+0x7e>
 801559a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801559e:	e7be      	b.n	801551e <_strtod_l+0x7e>
 80155a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80155a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80155a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80155aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80155ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80155b2:	e7f0      	b.n	8015596 <_strtod_l+0xf6>
 80155b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015728 <_strtod_l+0x288>
 80155b8:	e7ed      	b.n	8015596 <_strtod_l+0xf6>
 80155ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80155be:	f04f 3aff 	mov.w	sl, #4294967295
 80155c2:	e7e8      	b.n	8015596 <_strtod_l+0xf6>
 80155c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155c6:	1c5a      	adds	r2, r3, #1
 80155c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80155ca:	785b      	ldrb	r3, [r3, #1]
 80155cc:	2b30      	cmp	r3, #48	; 0x30
 80155ce:	d0f9      	beq.n	80155c4 <_strtod_l+0x124>
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d0a4      	beq.n	801551e <_strtod_l+0x7e>
 80155d4:	2301      	movs	r3, #1
 80155d6:	2500      	movs	r5, #0
 80155d8:	9306      	str	r3, [sp, #24]
 80155da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155dc:	9308      	str	r3, [sp, #32]
 80155de:	9507      	str	r5, [sp, #28]
 80155e0:	9505      	str	r5, [sp, #20]
 80155e2:	220a      	movs	r2, #10
 80155e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80155e6:	7807      	ldrb	r7, [r0, #0]
 80155e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80155ec:	b2d9      	uxtb	r1, r3
 80155ee:	2909      	cmp	r1, #9
 80155f0:	d929      	bls.n	8015646 <_strtod_l+0x1a6>
 80155f2:	4622      	mov	r2, r4
 80155f4:	f8d8 1000 	ldr.w	r1, [r8]
 80155f8:	f003 fdc1 	bl	801917e <strncmp>
 80155fc:	2800      	cmp	r0, #0
 80155fe:	d031      	beq.n	8015664 <_strtod_l+0x1c4>
 8015600:	2000      	movs	r0, #0
 8015602:	9c05      	ldr	r4, [sp, #20]
 8015604:	9004      	str	r0, [sp, #16]
 8015606:	463b      	mov	r3, r7
 8015608:	4602      	mov	r2, r0
 801560a:	2b65      	cmp	r3, #101	; 0x65
 801560c:	d001      	beq.n	8015612 <_strtod_l+0x172>
 801560e:	2b45      	cmp	r3, #69	; 0x45
 8015610:	d114      	bne.n	801563c <_strtod_l+0x19c>
 8015612:	b924      	cbnz	r4, 801561e <_strtod_l+0x17e>
 8015614:	b910      	cbnz	r0, 801561c <_strtod_l+0x17c>
 8015616:	9b06      	ldr	r3, [sp, #24]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d09e      	beq.n	801555a <_strtod_l+0xba>
 801561c:	2400      	movs	r4, #0
 801561e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015620:	1c73      	adds	r3, r6, #1
 8015622:	931b      	str	r3, [sp, #108]	; 0x6c
 8015624:	7873      	ldrb	r3, [r6, #1]
 8015626:	2b2b      	cmp	r3, #43	; 0x2b
 8015628:	d078      	beq.n	801571c <_strtod_l+0x27c>
 801562a:	2b2d      	cmp	r3, #45	; 0x2d
 801562c:	d070      	beq.n	8015710 <_strtod_l+0x270>
 801562e:	f04f 0c00 	mov.w	ip, #0
 8015632:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015636:	2f09      	cmp	r7, #9
 8015638:	d97c      	bls.n	8015734 <_strtod_l+0x294>
 801563a:	961b      	str	r6, [sp, #108]	; 0x6c
 801563c:	f04f 0e00 	mov.w	lr, #0
 8015640:	e09a      	b.n	8015778 <_strtod_l+0x2d8>
 8015642:	2300      	movs	r3, #0
 8015644:	e7c7      	b.n	80155d6 <_strtod_l+0x136>
 8015646:	9905      	ldr	r1, [sp, #20]
 8015648:	2908      	cmp	r1, #8
 801564a:	bfdd      	ittte	le
 801564c:	9907      	ldrle	r1, [sp, #28]
 801564e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015652:	9307      	strle	r3, [sp, #28]
 8015654:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015658:	9b05      	ldr	r3, [sp, #20]
 801565a:	3001      	adds	r0, #1
 801565c:	3301      	adds	r3, #1
 801565e:	9305      	str	r3, [sp, #20]
 8015660:	901b      	str	r0, [sp, #108]	; 0x6c
 8015662:	e7bf      	b.n	80155e4 <_strtod_l+0x144>
 8015664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015666:	191a      	adds	r2, r3, r4
 8015668:	921b      	str	r2, [sp, #108]	; 0x6c
 801566a:	9a05      	ldr	r2, [sp, #20]
 801566c:	5d1b      	ldrb	r3, [r3, r4]
 801566e:	2a00      	cmp	r2, #0
 8015670:	d037      	beq.n	80156e2 <_strtod_l+0x242>
 8015672:	9c05      	ldr	r4, [sp, #20]
 8015674:	4602      	mov	r2, r0
 8015676:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801567a:	2909      	cmp	r1, #9
 801567c:	d913      	bls.n	80156a6 <_strtod_l+0x206>
 801567e:	2101      	movs	r1, #1
 8015680:	9104      	str	r1, [sp, #16]
 8015682:	e7c2      	b.n	801560a <_strtod_l+0x16a>
 8015684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015686:	1c5a      	adds	r2, r3, #1
 8015688:	921b      	str	r2, [sp, #108]	; 0x6c
 801568a:	785b      	ldrb	r3, [r3, #1]
 801568c:	3001      	adds	r0, #1
 801568e:	2b30      	cmp	r3, #48	; 0x30
 8015690:	d0f8      	beq.n	8015684 <_strtod_l+0x1e4>
 8015692:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015696:	2a08      	cmp	r2, #8
 8015698:	f200 84e4 	bhi.w	8016064 <_strtod_l+0xbc4>
 801569c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801569e:	9208      	str	r2, [sp, #32]
 80156a0:	4602      	mov	r2, r0
 80156a2:	2000      	movs	r0, #0
 80156a4:	4604      	mov	r4, r0
 80156a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80156aa:	f100 0101 	add.w	r1, r0, #1
 80156ae:	d012      	beq.n	80156d6 <_strtod_l+0x236>
 80156b0:	440a      	add	r2, r1
 80156b2:	eb00 0c04 	add.w	ip, r0, r4
 80156b6:	4621      	mov	r1, r4
 80156b8:	270a      	movs	r7, #10
 80156ba:	458c      	cmp	ip, r1
 80156bc:	d113      	bne.n	80156e6 <_strtod_l+0x246>
 80156be:	1821      	adds	r1, r4, r0
 80156c0:	2908      	cmp	r1, #8
 80156c2:	f104 0401 	add.w	r4, r4, #1
 80156c6:	4404      	add	r4, r0
 80156c8:	dc19      	bgt.n	80156fe <_strtod_l+0x25e>
 80156ca:	9b07      	ldr	r3, [sp, #28]
 80156cc:	210a      	movs	r1, #10
 80156ce:	fb01 e303 	mla	r3, r1, r3, lr
 80156d2:	9307      	str	r3, [sp, #28]
 80156d4:	2100      	movs	r1, #0
 80156d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156d8:	1c58      	adds	r0, r3, #1
 80156da:	901b      	str	r0, [sp, #108]	; 0x6c
 80156dc:	785b      	ldrb	r3, [r3, #1]
 80156de:	4608      	mov	r0, r1
 80156e0:	e7c9      	b.n	8015676 <_strtod_l+0x1d6>
 80156e2:	9805      	ldr	r0, [sp, #20]
 80156e4:	e7d3      	b.n	801568e <_strtod_l+0x1ee>
 80156e6:	2908      	cmp	r1, #8
 80156e8:	f101 0101 	add.w	r1, r1, #1
 80156ec:	dc03      	bgt.n	80156f6 <_strtod_l+0x256>
 80156ee:	9b07      	ldr	r3, [sp, #28]
 80156f0:	437b      	muls	r3, r7
 80156f2:	9307      	str	r3, [sp, #28]
 80156f4:	e7e1      	b.n	80156ba <_strtod_l+0x21a>
 80156f6:	2910      	cmp	r1, #16
 80156f8:	bfd8      	it	le
 80156fa:	437d      	mulle	r5, r7
 80156fc:	e7dd      	b.n	80156ba <_strtod_l+0x21a>
 80156fe:	2c10      	cmp	r4, #16
 8015700:	bfdc      	itt	le
 8015702:	210a      	movle	r1, #10
 8015704:	fb01 e505 	mlale	r5, r1, r5, lr
 8015708:	e7e4      	b.n	80156d4 <_strtod_l+0x234>
 801570a:	2301      	movs	r3, #1
 801570c:	9304      	str	r3, [sp, #16]
 801570e:	e781      	b.n	8015614 <_strtod_l+0x174>
 8015710:	f04f 0c01 	mov.w	ip, #1
 8015714:	1cb3      	adds	r3, r6, #2
 8015716:	931b      	str	r3, [sp, #108]	; 0x6c
 8015718:	78b3      	ldrb	r3, [r6, #2]
 801571a:	e78a      	b.n	8015632 <_strtod_l+0x192>
 801571c:	f04f 0c00 	mov.w	ip, #0
 8015720:	e7f8      	b.n	8015714 <_strtod_l+0x274>
 8015722:	bf00      	nop
 8015724:	08019920 	.word	0x08019920
 8015728:	7ff00000 	.word	0x7ff00000
 801572c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801572e:	1c5f      	adds	r7, r3, #1
 8015730:	971b      	str	r7, [sp, #108]	; 0x6c
 8015732:	785b      	ldrb	r3, [r3, #1]
 8015734:	2b30      	cmp	r3, #48	; 0x30
 8015736:	d0f9      	beq.n	801572c <_strtod_l+0x28c>
 8015738:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801573c:	2f08      	cmp	r7, #8
 801573e:	f63f af7d 	bhi.w	801563c <_strtod_l+0x19c>
 8015742:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015748:	930a      	str	r3, [sp, #40]	; 0x28
 801574a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801574c:	1c5f      	adds	r7, r3, #1
 801574e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015750:	785b      	ldrb	r3, [r3, #1]
 8015752:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015756:	f1b8 0f09 	cmp.w	r8, #9
 801575a:	d937      	bls.n	80157cc <_strtod_l+0x32c>
 801575c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801575e:	1a7f      	subs	r7, r7, r1
 8015760:	2f08      	cmp	r7, #8
 8015762:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015766:	dc37      	bgt.n	80157d8 <_strtod_l+0x338>
 8015768:	45be      	cmp	lr, r7
 801576a:	bfa8      	it	ge
 801576c:	46be      	movge	lr, r7
 801576e:	f1bc 0f00 	cmp.w	ip, #0
 8015772:	d001      	beq.n	8015778 <_strtod_l+0x2d8>
 8015774:	f1ce 0e00 	rsb	lr, lr, #0
 8015778:	2c00      	cmp	r4, #0
 801577a:	d151      	bne.n	8015820 <_strtod_l+0x380>
 801577c:	2800      	cmp	r0, #0
 801577e:	f47f aece 	bne.w	801551e <_strtod_l+0x7e>
 8015782:	9a06      	ldr	r2, [sp, #24]
 8015784:	2a00      	cmp	r2, #0
 8015786:	f47f aeca 	bne.w	801551e <_strtod_l+0x7e>
 801578a:	9a04      	ldr	r2, [sp, #16]
 801578c:	2a00      	cmp	r2, #0
 801578e:	f47f aee4 	bne.w	801555a <_strtod_l+0xba>
 8015792:	2b4e      	cmp	r3, #78	; 0x4e
 8015794:	d027      	beq.n	80157e6 <_strtod_l+0x346>
 8015796:	dc21      	bgt.n	80157dc <_strtod_l+0x33c>
 8015798:	2b49      	cmp	r3, #73	; 0x49
 801579a:	f47f aede 	bne.w	801555a <_strtod_l+0xba>
 801579e:	49a0      	ldr	r1, [pc, #640]	; (8015a20 <_strtod_l+0x580>)
 80157a0:	a81b      	add	r0, sp, #108	; 0x6c
 80157a2:	f002 f83f 	bl	8017824 <__match>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	f43f aed7 	beq.w	801555a <_strtod_l+0xba>
 80157ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157ae:	499d      	ldr	r1, [pc, #628]	; (8015a24 <_strtod_l+0x584>)
 80157b0:	3b01      	subs	r3, #1
 80157b2:	a81b      	add	r0, sp, #108	; 0x6c
 80157b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80157b6:	f002 f835 	bl	8017824 <__match>
 80157ba:	b910      	cbnz	r0, 80157c2 <_strtod_l+0x322>
 80157bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157be:	3301      	adds	r3, #1
 80157c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80157c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015a38 <_strtod_l+0x598>
 80157c6:	f04f 0a00 	mov.w	sl, #0
 80157ca:	e6a8      	b.n	801551e <_strtod_l+0x7e>
 80157cc:	210a      	movs	r1, #10
 80157ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80157d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80157d6:	e7b8      	b.n	801574a <_strtod_l+0x2aa>
 80157d8:	46be      	mov	lr, r7
 80157da:	e7c8      	b.n	801576e <_strtod_l+0x2ce>
 80157dc:	2b69      	cmp	r3, #105	; 0x69
 80157de:	d0de      	beq.n	801579e <_strtod_l+0x2fe>
 80157e0:	2b6e      	cmp	r3, #110	; 0x6e
 80157e2:	f47f aeba 	bne.w	801555a <_strtod_l+0xba>
 80157e6:	4990      	ldr	r1, [pc, #576]	; (8015a28 <_strtod_l+0x588>)
 80157e8:	a81b      	add	r0, sp, #108	; 0x6c
 80157ea:	f002 f81b 	bl	8017824 <__match>
 80157ee:	2800      	cmp	r0, #0
 80157f0:	f43f aeb3 	beq.w	801555a <_strtod_l+0xba>
 80157f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	2b28      	cmp	r3, #40	; 0x28
 80157fa:	d10e      	bne.n	801581a <_strtod_l+0x37a>
 80157fc:	aa1e      	add	r2, sp, #120	; 0x78
 80157fe:	498b      	ldr	r1, [pc, #556]	; (8015a2c <_strtod_l+0x58c>)
 8015800:	a81b      	add	r0, sp, #108	; 0x6c
 8015802:	f002 f823 	bl	801784c <__hexnan>
 8015806:	2805      	cmp	r0, #5
 8015808:	d107      	bne.n	801581a <_strtod_l+0x37a>
 801580a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801580c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015810:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015814:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015818:	e681      	b.n	801551e <_strtod_l+0x7e>
 801581a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015a40 <_strtod_l+0x5a0>
 801581e:	e7d2      	b.n	80157c6 <_strtod_l+0x326>
 8015820:	ebae 0302 	sub.w	r3, lr, r2
 8015824:	9306      	str	r3, [sp, #24]
 8015826:	9b05      	ldr	r3, [sp, #20]
 8015828:	9807      	ldr	r0, [sp, #28]
 801582a:	2b00      	cmp	r3, #0
 801582c:	bf08      	it	eq
 801582e:	4623      	moveq	r3, r4
 8015830:	2c10      	cmp	r4, #16
 8015832:	9305      	str	r3, [sp, #20]
 8015834:	46a0      	mov	r8, r4
 8015836:	bfa8      	it	ge
 8015838:	f04f 0810 	movge.w	r8, #16
 801583c:	f7f2 fd9a 	bl	8008374 <__aeabi_ui2d>
 8015840:	2c09      	cmp	r4, #9
 8015842:	4682      	mov	sl, r0
 8015844:	468b      	mov	fp, r1
 8015846:	dc13      	bgt.n	8015870 <_strtod_l+0x3d0>
 8015848:	9b06      	ldr	r3, [sp, #24]
 801584a:	2b00      	cmp	r3, #0
 801584c:	f43f ae67 	beq.w	801551e <_strtod_l+0x7e>
 8015850:	9b06      	ldr	r3, [sp, #24]
 8015852:	dd7a      	ble.n	801594a <_strtod_l+0x4aa>
 8015854:	2b16      	cmp	r3, #22
 8015856:	dc61      	bgt.n	801591c <_strtod_l+0x47c>
 8015858:	4a75      	ldr	r2, [pc, #468]	; (8015a30 <_strtod_l+0x590>)
 801585a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801585e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015862:	4652      	mov	r2, sl
 8015864:	465b      	mov	r3, fp
 8015866:	f7f2 fdff 	bl	8008468 <__aeabi_dmul>
 801586a:	4682      	mov	sl, r0
 801586c:	468b      	mov	fp, r1
 801586e:	e656      	b.n	801551e <_strtod_l+0x7e>
 8015870:	4b6f      	ldr	r3, [pc, #444]	; (8015a30 <_strtod_l+0x590>)
 8015872:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015876:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801587a:	f7f2 fdf5 	bl	8008468 <__aeabi_dmul>
 801587e:	4606      	mov	r6, r0
 8015880:	4628      	mov	r0, r5
 8015882:	460f      	mov	r7, r1
 8015884:	f7f2 fd76 	bl	8008374 <__aeabi_ui2d>
 8015888:	4602      	mov	r2, r0
 801588a:	460b      	mov	r3, r1
 801588c:	4630      	mov	r0, r6
 801588e:	4639      	mov	r1, r7
 8015890:	f7f2 fc34 	bl	80080fc <__adddf3>
 8015894:	2c0f      	cmp	r4, #15
 8015896:	4682      	mov	sl, r0
 8015898:	468b      	mov	fp, r1
 801589a:	ddd5      	ble.n	8015848 <_strtod_l+0x3a8>
 801589c:	9b06      	ldr	r3, [sp, #24]
 801589e:	eba4 0808 	sub.w	r8, r4, r8
 80158a2:	4498      	add	r8, r3
 80158a4:	f1b8 0f00 	cmp.w	r8, #0
 80158a8:	f340 8096 	ble.w	80159d8 <_strtod_l+0x538>
 80158ac:	f018 030f 	ands.w	r3, r8, #15
 80158b0:	d00a      	beq.n	80158c8 <_strtod_l+0x428>
 80158b2:	495f      	ldr	r1, [pc, #380]	; (8015a30 <_strtod_l+0x590>)
 80158b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80158b8:	4652      	mov	r2, sl
 80158ba:	465b      	mov	r3, fp
 80158bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158c0:	f7f2 fdd2 	bl	8008468 <__aeabi_dmul>
 80158c4:	4682      	mov	sl, r0
 80158c6:	468b      	mov	fp, r1
 80158c8:	f038 080f 	bics.w	r8, r8, #15
 80158cc:	d073      	beq.n	80159b6 <_strtod_l+0x516>
 80158ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80158d2:	dd47      	ble.n	8015964 <_strtod_l+0x4c4>
 80158d4:	2400      	movs	r4, #0
 80158d6:	46a0      	mov	r8, r4
 80158d8:	9407      	str	r4, [sp, #28]
 80158da:	9405      	str	r4, [sp, #20]
 80158dc:	2322      	movs	r3, #34	; 0x22
 80158de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015a38 <_strtod_l+0x598>
 80158e2:	f8c9 3000 	str.w	r3, [r9]
 80158e6:	f04f 0a00 	mov.w	sl, #0
 80158ea:	9b07      	ldr	r3, [sp, #28]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f43f ae16 	beq.w	801551e <_strtod_l+0x7e>
 80158f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158f4:	4648      	mov	r0, r9
 80158f6:	f002 f90d 	bl	8017b14 <_Bfree>
 80158fa:	9905      	ldr	r1, [sp, #20]
 80158fc:	4648      	mov	r0, r9
 80158fe:	f002 f909 	bl	8017b14 <_Bfree>
 8015902:	4641      	mov	r1, r8
 8015904:	4648      	mov	r0, r9
 8015906:	f002 f905 	bl	8017b14 <_Bfree>
 801590a:	9907      	ldr	r1, [sp, #28]
 801590c:	4648      	mov	r0, r9
 801590e:	f002 f901 	bl	8017b14 <_Bfree>
 8015912:	4621      	mov	r1, r4
 8015914:	4648      	mov	r0, r9
 8015916:	f002 f8fd 	bl	8017b14 <_Bfree>
 801591a:	e600      	b.n	801551e <_strtod_l+0x7e>
 801591c:	9a06      	ldr	r2, [sp, #24]
 801591e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015922:	4293      	cmp	r3, r2
 8015924:	dbba      	blt.n	801589c <_strtod_l+0x3fc>
 8015926:	4d42      	ldr	r5, [pc, #264]	; (8015a30 <_strtod_l+0x590>)
 8015928:	f1c4 040f 	rsb	r4, r4, #15
 801592c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015930:	4652      	mov	r2, sl
 8015932:	465b      	mov	r3, fp
 8015934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015938:	f7f2 fd96 	bl	8008468 <__aeabi_dmul>
 801593c:	9b06      	ldr	r3, [sp, #24]
 801593e:	1b1c      	subs	r4, r3, r4
 8015940:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015944:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015948:	e78d      	b.n	8015866 <_strtod_l+0x3c6>
 801594a:	f113 0f16 	cmn.w	r3, #22
 801594e:	dba5      	blt.n	801589c <_strtod_l+0x3fc>
 8015950:	4a37      	ldr	r2, [pc, #220]	; (8015a30 <_strtod_l+0x590>)
 8015952:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015956:	e9d2 2300 	ldrd	r2, r3, [r2]
 801595a:	4650      	mov	r0, sl
 801595c:	4659      	mov	r1, fp
 801595e:	f7f2 fead 	bl	80086bc <__aeabi_ddiv>
 8015962:	e782      	b.n	801586a <_strtod_l+0x3ca>
 8015964:	2300      	movs	r3, #0
 8015966:	4e33      	ldr	r6, [pc, #204]	; (8015a34 <_strtod_l+0x594>)
 8015968:	ea4f 1828 	mov.w	r8, r8, asr #4
 801596c:	4650      	mov	r0, sl
 801596e:	4659      	mov	r1, fp
 8015970:	461d      	mov	r5, r3
 8015972:	f1b8 0f01 	cmp.w	r8, #1
 8015976:	dc21      	bgt.n	80159bc <_strtod_l+0x51c>
 8015978:	b10b      	cbz	r3, 801597e <_strtod_l+0x4de>
 801597a:	4682      	mov	sl, r0
 801597c:	468b      	mov	fp, r1
 801597e:	4b2d      	ldr	r3, [pc, #180]	; (8015a34 <_strtod_l+0x594>)
 8015980:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015984:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015988:	4652      	mov	r2, sl
 801598a:	465b      	mov	r3, fp
 801598c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015990:	f7f2 fd6a 	bl	8008468 <__aeabi_dmul>
 8015994:	4b28      	ldr	r3, [pc, #160]	; (8015a38 <_strtod_l+0x598>)
 8015996:	460a      	mov	r2, r1
 8015998:	400b      	ands	r3, r1
 801599a:	4928      	ldr	r1, [pc, #160]	; (8015a3c <_strtod_l+0x59c>)
 801599c:	428b      	cmp	r3, r1
 801599e:	4682      	mov	sl, r0
 80159a0:	d898      	bhi.n	80158d4 <_strtod_l+0x434>
 80159a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80159a6:	428b      	cmp	r3, r1
 80159a8:	bf86      	itte	hi
 80159aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015a44 <_strtod_l+0x5a4>
 80159ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80159b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80159b6:	2300      	movs	r3, #0
 80159b8:	9304      	str	r3, [sp, #16]
 80159ba:	e077      	b.n	8015aac <_strtod_l+0x60c>
 80159bc:	f018 0f01 	tst.w	r8, #1
 80159c0:	d006      	beq.n	80159d0 <_strtod_l+0x530>
 80159c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	f7f2 fd4d 	bl	8008468 <__aeabi_dmul>
 80159ce:	2301      	movs	r3, #1
 80159d0:	3501      	adds	r5, #1
 80159d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80159d6:	e7cc      	b.n	8015972 <_strtod_l+0x4d2>
 80159d8:	d0ed      	beq.n	80159b6 <_strtod_l+0x516>
 80159da:	f1c8 0800 	rsb	r8, r8, #0
 80159de:	f018 020f 	ands.w	r2, r8, #15
 80159e2:	d00a      	beq.n	80159fa <_strtod_l+0x55a>
 80159e4:	4b12      	ldr	r3, [pc, #72]	; (8015a30 <_strtod_l+0x590>)
 80159e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159ea:	4650      	mov	r0, sl
 80159ec:	4659      	mov	r1, fp
 80159ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f2:	f7f2 fe63 	bl	80086bc <__aeabi_ddiv>
 80159f6:	4682      	mov	sl, r0
 80159f8:	468b      	mov	fp, r1
 80159fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80159fe:	d0da      	beq.n	80159b6 <_strtod_l+0x516>
 8015a00:	f1b8 0f1f 	cmp.w	r8, #31
 8015a04:	dd20      	ble.n	8015a48 <_strtod_l+0x5a8>
 8015a06:	2400      	movs	r4, #0
 8015a08:	46a0      	mov	r8, r4
 8015a0a:	9407      	str	r4, [sp, #28]
 8015a0c:	9405      	str	r4, [sp, #20]
 8015a0e:	2322      	movs	r3, #34	; 0x22
 8015a10:	f04f 0a00 	mov.w	sl, #0
 8015a14:	f04f 0b00 	mov.w	fp, #0
 8015a18:	f8c9 3000 	str.w	r3, [r9]
 8015a1c:	e765      	b.n	80158ea <_strtod_l+0x44a>
 8015a1e:	bf00      	nop
 8015a20:	080198ed 	.word	0x080198ed
 8015a24:	08019973 	.word	0x08019973
 8015a28:	080198f5 	.word	0x080198f5
 8015a2c:	08019934 	.word	0x08019934
 8015a30:	08019a18 	.word	0x08019a18
 8015a34:	080199f0 	.word	0x080199f0
 8015a38:	7ff00000 	.word	0x7ff00000
 8015a3c:	7ca00000 	.word	0x7ca00000
 8015a40:	fff80000 	.word	0xfff80000
 8015a44:	7fefffff 	.word	0x7fefffff
 8015a48:	f018 0310 	ands.w	r3, r8, #16
 8015a4c:	bf18      	it	ne
 8015a4e:	236a      	movne	r3, #106	; 0x6a
 8015a50:	4da0      	ldr	r5, [pc, #640]	; (8015cd4 <_strtod_l+0x834>)
 8015a52:	9304      	str	r3, [sp, #16]
 8015a54:	4650      	mov	r0, sl
 8015a56:	4659      	mov	r1, fp
 8015a58:	2300      	movs	r3, #0
 8015a5a:	f1b8 0f00 	cmp.w	r8, #0
 8015a5e:	f300 810a 	bgt.w	8015c76 <_strtod_l+0x7d6>
 8015a62:	b10b      	cbz	r3, 8015a68 <_strtod_l+0x5c8>
 8015a64:	4682      	mov	sl, r0
 8015a66:	468b      	mov	fp, r1
 8015a68:	9b04      	ldr	r3, [sp, #16]
 8015a6a:	b1bb      	cbz	r3, 8015a9c <_strtod_l+0x5fc>
 8015a6c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015a70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	4659      	mov	r1, fp
 8015a78:	dd10      	ble.n	8015a9c <_strtod_l+0x5fc>
 8015a7a:	2b1f      	cmp	r3, #31
 8015a7c:	f340 8107 	ble.w	8015c8e <_strtod_l+0x7ee>
 8015a80:	2b34      	cmp	r3, #52	; 0x34
 8015a82:	bfde      	ittt	le
 8015a84:	3b20      	suble	r3, #32
 8015a86:	f04f 32ff 	movle.w	r2, #4294967295
 8015a8a:	fa02 f303 	lslle.w	r3, r2, r3
 8015a8e:	f04f 0a00 	mov.w	sl, #0
 8015a92:	bfcc      	ite	gt
 8015a94:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015a98:	ea03 0b01 	andle.w	fp, r3, r1
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	4650      	mov	r0, sl
 8015aa2:	4659      	mov	r1, fp
 8015aa4:	f7f2 ff48 	bl	8008938 <__aeabi_dcmpeq>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d1ac      	bne.n	8015a06 <_strtod_l+0x566>
 8015aac:	9b07      	ldr	r3, [sp, #28]
 8015aae:	9300      	str	r3, [sp, #0]
 8015ab0:	9a05      	ldr	r2, [sp, #20]
 8015ab2:	9908      	ldr	r1, [sp, #32]
 8015ab4:	4623      	mov	r3, r4
 8015ab6:	4648      	mov	r0, r9
 8015ab8:	f002 f87e 	bl	8017bb8 <__s2b>
 8015abc:	9007      	str	r0, [sp, #28]
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	f43f af08 	beq.w	80158d4 <_strtod_l+0x434>
 8015ac4:	9a06      	ldr	r2, [sp, #24]
 8015ac6:	9b06      	ldr	r3, [sp, #24]
 8015ac8:	2a00      	cmp	r2, #0
 8015aca:	f1c3 0300 	rsb	r3, r3, #0
 8015ace:	bfa8      	it	ge
 8015ad0:	2300      	movge	r3, #0
 8015ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8015ad4:	2400      	movs	r4, #0
 8015ad6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015ada:	9316      	str	r3, [sp, #88]	; 0x58
 8015adc:	46a0      	mov	r8, r4
 8015ade:	9b07      	ldr	r3, [sp, #28]
 8015ae0:	4648      	mov	r0, r9
 8015ae2:	6859      	ldr	r1, [r3, #4]
 8015ae4:	f001 ffe2 	bl	8017aac <_Balloc>
 8015ae8:	9005      	str	r0, [sp, #20]
 8015aea:	2800      	cmp	r0, #0
 8015aec:	f43f aef6 	beq.w	80158dc <_strtod_l+0x43c>
 8015af0:	9b07      	ldr	r3, [sp, #28]
 8015af2:	691a      	ldr	r2, [r3, #16]
 8015af4:	3202      	adds	r2, #2
 8015af6:	f103 010c 	add.w	r1, r3, #12
 8015afa:	0092      	lsls	r2, r2, #2
 8015afc:	300c      	adds	r0, #12
 8015afe:	f7fe fcdd 	bl	80144bc <memcpy>
 8015b02:	aa1e      	add	r2, sp, #120	; 0x78
 8015b04:	a91d      	add	r1, sp, #116	; 0x74
 8015b06:	ec4b ab10 	vmov	d0, sl, fp
 8015b0a:	4648      	mov	r0, r9
 8015b0c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015b10:	f002 fb0e 	bl	8018130 <__d2b>
 8015b14:	901c      	str	r0, [sp, #112]	; 0x70
 8015b16:	2800      	cmp	r0, #0
 8015b18:	f43f aee0 	beq.w	80158dc <_strtod_l+0x43c>
 8015b1c:	2101      	movs	r1, #1
 8015b1e:	4648      	mov	r0, r9
 8015b20:	f002 f8d6 	bl	8017cd0 <__i2b>
 8015b24:	4680      	mov	r8, r0
 8015b26:	2800      	cmp	r0, #0
 8015b28:	f43f aed8 	beq.w	80158dc <_strtod_l+0x43c>
 8015b2c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015b2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015b30:	2e00      	cmp	r6, #0
 8015b32:	bfab      	itete	ge
 8015b34:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015b36:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015b38:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015b3a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015b3c:	bfac      	ite	ge
 8015b3e:	18f7      	addge	r7, r6, r3
 8015b40:	1b9d      	sublt	r5, r3, r6
 8015b42:	9b04      	ldr	r3, [sp, #16]
 8015b44:	1af6      	subs	r6, r6, r3
 8015b46:	4416      	add	r6, r2
 8015b48:	4b63      	ldr	r3, [pc, #396]	; (8015cd8 <_strtod_l+0x838>)
 8015b4a:	3e01      	subs	r6, #1
 8015b4c:	429e      	cmp	r6, r3
 8015b4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015b52:	f280 80af 	bge.w	8015cb4 <_strtod_l+0x814>
 8015b56:	1b9b      	subs	r3, r3, r6
 8015b58:	2b1f      	cmp	r3, #31
 8015b5a:	eba2 0203 	sub.w	r2, r2, r3
 8015b5e:	f04f 0101 	mov.w	r1, #1
 8015b62:	f300 809b 	bgt.w	8015c9c <_strtod_l+0x7fc>
 8015b66:	fa01 f303 	lsl.w	r3, r1, r3
 8015b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015b70:	18be      	adds	r6, r7, r2
 8015b72:	9b04      	ldr	r3, [sp, #16]
 8015b74:	42b7      	cmp	r7, r6
 8015b76:	4415      	add	r5, r2
 8015b78:	441d      	add	r5, r3
 8015b7a:	463b      	mov	r3, r7
 8015b7c:	bfa8      	it	ge
 8015b7e:	4633      	movge	r3, r6
 8015b80:	42ab      	cmp	r3, r5
 8015b82:	bfa8      	it	ge
 8015b84:	462b      	movge	r3, r5
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bfc2      	ittt	gt
 8015b8a:	1af6      	subgt	r6, r6, r3
 8015b8c:	1aed      	subgt	r5, r5, r3
 8015b8e:	1aff      	subgt	r7, r7, r3
 8015b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b92:	b1bb      	cbz	r3, 8015bc4 <_strtod_l+0x724>
 8015b94:	4641      	mov	r1, r8
 8015b96:	461a      	mov	r2, r3
 8015b98:	4648      	mov	r0, r9
 8015b9a:	f002 f939 	bl	8017e10 <__pow5mult>
 8015b9e:	4680      	mov	r8, r0
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	f43f ae9b 	beq.w	80158dc <_strtod_l+0x43c>
 8015ba6:	4601      	mov	r1, r0
 8015ba8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015baa:	4648      	mov	r0, r9
 8015bac:	f002 f899 	bl	8017ce2 <__multiply>
 8015bb0:	900c      	str	r0, [sp, #48]	; 0x30
 8015bb2:	2800      	cmp	r0, #0
 8015bb4:	f43f ae92 	beq.w	80158dc <_strtod_l+0x43c>
 8015bb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015bba:	4648      	mov	r0, r9
 8015bbc:	f001 ffaa 	bl	8017b14 <_Bfree>
 8015bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bc2:	931c      	str	r3, [sp, #112]	; 0x70
 8015bc4:	2e00      	cmp	r6, #0
 8015bc6:	dc7a      	bgt.n	8015cbe <_strtod_l+0x81e>
 8015bc8:	9b06      	ldr	r3, [sp, #24]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	dd08      	ble.n	8015be0 <_strtod_l+0x740>
 8015bce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015bd0:	9905      	ldr	r1, [sp, #20]
 8015bd2:	4648      	mov	r0, r9
 8015bd4:	f002 f91c 	bl	8017e10 <__pow5mult>
 8015bd8:	9005      	str	r0, [sp, #20]
 8015bda:	2800      	cmp	r0, #0
 8015bdc:	f43f ae7e 	beq.w	80158dc <_strtod_l+0x43c>
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	dd08      	ble.n	8015bf6 <_strtod_l+0x756>
 8015be4:	462a      	mov	r2, r5
 8015be6:	9905      	ldr	r1, [sp, #20]
 8015be8:	4648      	mov	r0, r9
 8015bea:	f002 f95f 	bl	8017eac <__lshift>
 8015bee:	9005      	str	r0, [sp, #20]
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	f43f ae73 	beq.w	80158dc <_strtod_l+0x43c>
 8015bf6:	2f00      	cmp	r7, #0
 8015bf8:	dd08      	ble.n	8015c0c <_strtod_l+0x76c>
 8015bfa:	4641      	mov	r1, r8
 8015bfc:	463a      	mov	r2, r7
 8015bfe:	4648      	mov	r0, r9
 8015c00:	f002 f954 	bl	8017eac <__lshift>
 8015c04:	4680      	mov	r8, r0
 8015c06:	2800      	cmp	r0, #0
 8015c08:	f43f ae68 	beq.w	80158dc <_strtod_l+0x43c>
 8015c0c:	9a05      	ldr	r2, [sp, #20]
 8015c0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c10:	4648      	mov	r0, r9
 8015c12:	f002 f9b9 	bl	8017f88 <__mdiff>
 8015c16:	4604      	mov	r4, r0
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	f43f ae5f 	beq.w	80158dc <_strtod_l+0x43c>
 8015c1e:	68c3      	ldr	r3, [r0, #12]
 8015c20:	930c      	str	r3, [sp, #48]	; 0x30
 8015c22:	2300      	movs	r3, #0
 8015c24:	60c3      	str	r3, [r0, #12]
 8015c26:	4641      	mov	r1, r8
 8015c28:	f002 f994 	bl	8017f54 <__mcmp>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	da55      	bge.n	8015cdc <_strtod_l+0x83c>
 8015c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c32:	b9e3      	cbnz	r3, 8015c6e <_strtod_l+0x7ce>
 8015c34:	f1ba 0f00 	cmp.w	sl, #0
 8015c38:	d119      	bne.n	8015c6e <_strtod_l+0x7ce>
 8015c3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c3e:	b9b3      	cbnz	r3, 8015c6e <_strtod_l+0x7ce>
 8015c40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c44:	0d1b      	lsrs	r3, r3, #20
 8015c46:	051b      	lsls	r3, r3, #20
 8015c48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015c4c:	d90f      	bls.n	8015c6e <_strtod_l+0x7ce>
 8015c4e:	6963      	ldr	r3, [r4, #20]
 8015c50:	b913      	cbnz	r3, 8015c58 <_strtod_l+0x7b8>
 8015c52:	6923      	ldr	r3, [r4, #16]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	dd0a      	ble.n	8015c6e <_strtod_l+0x7ce>
 8015c58:	4621      	mov	r1, r4
 8015c5a:	2201      	movs	r2, #1
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f002 f925 	bl	8017eac <__lshift>
 8015c62:	4641      	mov	r1, r8
 8015c64:	4604      	mov	r4, r0
 8015c66:	f002 f975 	bl	8017f54 <__mcmp>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	dc67      	bgt.n	8015d3e <_strtod_l+0x89e>
 8015c6e:	9b04      	ldr	r3, [sp, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d171      	bne.n	8015d58 <_strtod_l+0x8b8>
 8015c74:	e63d      	b.n	80158f2 <_strtod_l+0x452>
 8015c76:	f018 0f01 	tst.w	r8, #1
 8015c7a:	d004      	beq.n	8015c86 <_strtod_l+0x7e6>
 8015c7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c80:	f7f2 fbf2 	bl	8008468 <__aeabi_dmul>
 8015c84:	2301      	movs	r3, #1
 8015c86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c8a:	3508      	adds	r5, #8
 8015c8c:	e6e5      	b.n	8015a5a <_strtod_l+0x5ba>
 8015c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015c92:	fa02 f303 	lsl.w	r3, r2, r3
 8015c96:	ea03 0a0a 	and.w	sl, r3, sl
 8015c9a:	e6ff      	b.n	8015a9c <_strtod_l+0x5fc>
 8015c9c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015ca0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015ca4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ca8:	36e2      	adds	r6, #226	; 0xe2
 8015caa:	fa01 f306 	lsl.w	r3, r1, r6
 8015cae:	930a      	str	r3, [sp, #40]	; 0x28
 8015cb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cb2:	e75d      	b.n	8015b70 <_strtod_l+0x6d0>
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015cb8:	2301      	movs	r3, #1
 8015cba:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cbc:	e758      	b.n	8015b70 <_strtod_l+0x6d0>
 8015cbe:	4632      	mov	r2, r6
 8015cc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015cc2:	4648      	mov	r0, r9
 8015cc4:	f002 f8f2 	bl	8017eac <__lshift>
 8015cc8:	901c      	str	r0, [sp, #112]	; 0x70
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	f47f af7c 	bne.w	8015bc8 <_strtod_l+0x728>
 8015cd0:	e604      	b.n	80158dc <_strtod_l+0x43c>
 8015cd2:	bf00      	nop
 8015cd4:	08019948 	.word	0x08019948
 8015cd8:	fffffc02 	.word	0xfffffc02
 8015cdc:	465d      	mov	r5, fp
 8015cde:	f040 8086 	bne.w	8015dee <_strtod_l+0x94e>
 8015ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ce8:	b32a      	cbz	r2, 8015d36 <_strtod_l+0x896>
 8015cea:	4aaf      	ldr	r2, [pc, #700]	; (8015fa8 <_strtod_l+0xb08>)
 8015cec:	4293      	cmp	r3, r2
 8015cee:	d153      	bne.n	8015d98 <_strtod_l+0x8f8>
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	4650      	mov	r0, sl
 8015cf4:	b1d3      	cbz	r3, 8015d2c <_strtod_l+0x88c>
 8015cf6:	4aad      	ldr	r2, [pc, #692]	; (8015fac <_strtod_l+0xb0c>)
 8015cf8:	402a      	ands	r2, r5
 8015cfa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8015d02:	d816      	bhi.n	8015d32 <_strtod_l+0x892>
 8015d04:	0d12      	lsrs	r2, r2, #20
 8015d06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8015d0e:	4298      	cmp	r0, r3
 8015d10:	d142      	bne.n	8015d98 <_strtod_l+0x8f8>
 8015d12:	4ba7      	ldr	r3, [pc, #668]	; (8015fb0 <_strtod_l+0xb10>)
 8015d14:	429d      	cmp	r5, r3
 8015d16:	d102      	bne.n	8015d1e <_strtod_l+0x87e>
 8015d18:	3001      	adds	r0, #1
 8015d1a:	f43f addf 	beq.w	80158dc <_strtod_l+0x43c>
 8015d1e:	4ba3      	ldr	r3, [pc, #652]	; (8015fac <_strtod_l+0xb0c>)
 8015d20:	402b      	ands	r3, r5
 8015d22:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015d26:	f04f 0a00 	mov.w	sl, #0
 8015d2a:	e7a0      	b.n	8015c6e <_strtod_l+0x7ce>
 8015d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d30:	e7ed      	b.n	8015d0e <_strtod_l+0x86e>
 8015d32:	460b      	mov	r3, r1
 8015d34:	e7eb      	b.n	8015d0e <_strtod_l+0x86e>
 8015d36:	bb7b      	cbnz	r3, 8015d98 <_strtod_l+0x8f8>
 8015d38:	f1ba 0f00 	cmp.w	sl, #0
 8015d3c:	d12c      	bne.n	8015d98 <_strtod_l+0x8f8>
 8015d3e:	9904      	ldr	r1, [sp, #16]
 8015d40:	4a9a      	ldr	r2, [pc, #616]	; (8015fac <_strtod_l+0xb0c>)
 8015d42:	465b      	mov	r3, fp
 8015d44:	b1f1      	cbz	r1, 8015d84 <_strtod_l+0x8e4>
 8015d46:	ea02 010b 	and.w	r1, r2, fp
 8015d4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015d4e:	dc19      	bgt.n	8015d84 <_strtod_l+0x8e4>
 8015d50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015d54:	f77f ae5b 	ble.w	8015a0e <_strtod_l+0x56e>
 8015d58:	4a96      	ldr	r2, [pc, #600]	; (8015fb4 <_strtod_l+0xb14>)
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015d60:	4650      	mov	r0, sl
 8015d62:	4659      	mov	r1, fp
 8015d64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015d68:	f7f2 fb7e 	bl	8008468 <__aeabi_dmul>
 8015d6c:	4682      	mov	sl, r0
 8015d6e:	468b      	mov	fp, r1
 8015d70:	2900      	cmp	r1, #0
 8015d72:	f47f adbe 	bne.w	80158f2 <_strtod_l+0x452>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	f47f adbb 	bne.w	80158f2 <_strtod_l+0x452>
 8015d7c:	2322      	movs	r3, #34	; 0x22
 8015d7e:	f8c9 3000 	str.w	r3, [r9]
 8015d82:	e5b6      	b.n	80158f2 <_strtod_l+0x452>
 8015d84:	4013      	ands	r3, r2
 8015d86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015d8a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015d8e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015d92:	f04f 3aff 	mov.w	sl, #4294967295
 8015d96:	e76a      	b.n	8015c6e <_strtod_l+0x7ce>
 8015d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d9a:	b193      	cbz	r3, 8015dc2 <_strtod_l+0x922>
 8015d9c:	422b      	tst	r3, r5
 8015d9e:	f43f af66 	beq.w	8015c6e <_strtod_l+0x7ce>
 8015da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015da4:	9a04      	ldr	r2, [sp, #16]
 8015da6:	4650      	mov	r0, sl
 8015da8:	4659      	mov	r1, fp
 8015daa:	b173      	cbz	r3, 8015dca <_strtod_l+0x92a>
 8015dac:	f7ff fb5c 	bl	8015468 <sulp>
 8015db0:	4602      	mov	r2, r0
 8015db2:	460b      	mov	r3, r1
 8015db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015db8:	f7f2 f9a0 	bl	80080fc <__adddf3>
 8015dbc:	4682      	mov	sl, r0
 8015dbe:	468b      	mov	fp, r1
 8015dc0:	e755      	b.n	8015c6e <_strtod_l+0x7ce>
 8015dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dc4:	ea13 0f0a 	tst.w	r3, sl
 8015dc8:	e7e9      	b.n	8015d9e <_strtod_l+0x8fe>
 8015dca:	f7ff fb4d 	bl	8015468 <sulp>
 8015dce:	4602      	mov	r2, r0
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015dd6:	f7f2 f98f 	bl	80080f8 <__aeabi_dsub>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2300      	movs	r3, #0
 8015dde:	4682      	mov	sl, r0
 8015de0:	468b      	mov	fp, r1
 8015de2:	f7f2 fda9 	bl	8008938 <__aeabi_dcmpeq>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	f47f ae11 	bne.w	8015a0e <_strtod_l+0x56e>
 8015dec:	e73f      	b.n	8015c6e <_strtod_l+0x7ce>
 8015dee:	4641      	mov	r1, r8
 8015df0:	4620      	mov	r0, r4
 8015df2:	f002 f9ec 	bl	80181ce <__ratio>
 8015df6:	ec57 6b10 	vmov	r6, r7, d0
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015e00:	ee10 0a10 	vmov	r0, s0
 8015e04:	4639      	mov	r1, r7
 8015e06:	f7f2 fdab 	bl	8008960 <__aeabi_dcmple>
 8015e0a:	2800      	cmp	r0, #0
 8015e0c:	d077      	beq.n	8015efe <_strtod_l+0xa5e>
 8015e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d04a      	beq.n	8015eaa <_strtod_l+0xa0a>
 8015e14:	4b68      	ldr	r3, [pc, #416]	; (8015fb8 <_strtod_l+0xb18>)
 8015e16:	2200      	movs	r2, #0
 8015e18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e1c:	4f66      	ldr	r7, [pc, #408]	; (8015fb8 <_strtod_l+0xb18>)
 8015e1e:	2600      	movs	r6, #0
 8015e20:	4b62      	ldr	r3, [pc, #392]	; (8015fac <_strtod_l+0xb0c>)
 8015e22:	402b      	ands	r3, r5
 8015e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e28:	4b64      	ldr	r3, [pc, #400]	; (8015fbc <_strtod_l+0xb1c>)
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	f040 80ce 	bne.w	8015fcc <_strtod_l+0xb2c>
 8015e30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015e38:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015e3c:	ec4b ab10 	vmov	d0, sl, fp
 8015e40:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015e44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015e48:	f002 f8fc 	bl	8018044 <__ulp>
 8015e4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015e50:	ec53 2b10 	vmov	r2, r3, d0
 8015e54:	f7f2 fb08 	bl	8008468 <__aeabi_dmul>
 8015e58:	4652      	mov	r2, sl
 8015e5a:	465b      	mov	r3, fp
 8015e5c:	f7f2 f94e 	bl	80080fc <__adddf3>
 8015e60:	460b      	mov	r3, r1
 8015e62:	4952      	ldr	r1, [pc, #328]	; (8015fac <_strtod_l+0xb0c>)
 8015e64:	4a56      	ldr	r2, [pc, #344]	; (8015fc0 <_strtod_l+0xb20>)
 8015e66:	4019      	ands	r1, r3
 8015e68:	4291      	cmp	r1, r2
 8015e6a:	4682      	mov	sl, r0
 8015e6c:	d95b      	bls.n	8015f26 <_strtod_l+0xa86>
 8015e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e70:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015e74:	4293      	cmp	r3, r2
 8015e76:	d103      	bne.n	8015e80 <_strtod_l+0x9e0>
 8015e78:	9b08      	ldr	r3, [sp, #32]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	f43f ad2e 	beq.w	80158dc <_strtod_l+0x43c>
 8015e80:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015fb0 <_strtod_l+0xb10>
 8015e84:	f04f 3aff 	mov.w	sl, #4294967295
 8015e88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e8a:	4648      	mov	r0, r9
 8015e8c:	f001 fe42 	bl	8017b14 <_Bfree>
 8015e90:	9905      	ldr	r1, [sp, #20]
 8015e92:	4648      	mov	r0, r9
 8015e94:	f001 fe3e 	bl	8017b14 <_Bfree>
 8015e98:	4641      	mov	r1, r8
 8015e9a:	4648      	mov	r0, r9
 8015e9c:	f001 fe3a 	bl	8017b14 <_Bfree>
 8015ea0:	4621      	mov	r1, r4
 8015ea2:	4648      	mov	r0, r9
 8015ea4:	f001 fe36 	bl	8017b14 <_Bfree>
 8015ea8:	e619      	b.n	8015ade <_strtod_l+0x63e>
 8015eaa:	f1ba 0f00 	cmp.w	sl, #0
 8015eae:	d11a      	bne.n	8015ee6 <_strtod_l+0xa46>
 8015eb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015eb4:	b9eb      	cbnz	r3, 8015ef2 <_strtod_l+0xa52>
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	4b3f      	ldr	r3, [pc, #252]	; (8015fb8 <_strtod_l+0xb18>)
 8015eba:	4630      	mov	r0, r6
 8015ebc:	4639      	mov	r1, r7
 8015ebe:	f7f2 fd45 	bl	800894c <__aeabi_dcmplt>
 8015ec2:	b9c8      	cbnz	r0, 8015ef8 <_strtod_l+0xa58>
 8015ec4:	4630      	mov	r0, r6
 8015ec6:	4639      	mov	r1, r7
 8015ec8:	2200      	movs	r2, #0
 8015eca:	4b3e      	ldr	r3, [pc, #248]	; (8015fc4 <_strtod_l+0xb24>)
 8015ecc:	f7f2 facc 	bl	8008468 <__aeabi_dmul>
 8015ed0:	4606      	mov	r6, r0
 8015ed2:	460f      	mov	r7, r1
 8015ed4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015ed8:	9618      	str	r6, [sp, #96]	; 0x60
 8015eda:	9319      	str	r3, [sp, #100]	; 0x64
 8015edc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015ee0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ee4:	e79c      	b.n	8015e20 <_strtod_l+0x980>
 8015ee6:	f1ba 0f01 	cmp.w	sl, #1
 8015eea:	d102      	bne.n	8015ef2 <_strtod_l+0xa52>
 8015eec:	2d00      	cmp	r5, #0
 8015eee:	f43f ad8e 	beq.w	8015a0e <_strtod_l+0x56e>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	4b34      	ldr	r3, [pc, #208]	; (8015fc8 <_strtod_l+0xb28>)
 8015ef6:	e78f      	b.n	8015e18 <_strtod_l+0x978>
 8015ef8:	2600      	movs	r6, #0
 8015efa:	4f32      	ldr	r7, [pc, #200]	; (8015fc4 <_strtod_l+0xb24>)
 8015efc:	e7ea      	b.n	8015ed4 <_strtod_l+0xa34>
 8015efe:	4b31      	ldr	r3, [pc, #196]	; (8015fc4 <_strtod_l+0xb24>)
 8015f00:	4630      	mov	r0, r6
 8015f02:	4639      	mov	r1, r7
 8015f04:	2200      	movs	r2, #0
 8015f06:	f7f2 faaf 	bl	8008468 <__aeabi_dmul>
 8015f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f0c:	4606      	mov	r6, r0
 8015f0e:	460f      	mov	r7, r1
 8015f10:	b933      	cbnz	r3, 8015f20 <_strtod_l+0xa80>
 8015f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f16:	9010      	str	r0, [sp, #64]	; 0x40
 8015f18:	9311      	str	r3, [sp, #68]	; 0x44
 8015f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015f1e:	e7df      	b.n	8015ee0 <_strtod_l+0xa40>
 8015f20:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015f24:	e7f9      	b.n	8015f1a <_strtod_l+0xa7a>
 8015f26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015f2a:	9b04      	ldr	r3, [sp, #16]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d1ab      	bne.n	8015e88 <_strtod_l+0x9e8>
 8015f30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f34:	0d1b      	lsrs	r3, r3, #20
 8015f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f38:	051b      	lsls	r3, r3, #20
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	465d      	mov	r5, fp
 8015f3e:	d1a3      	bne.n	8015e88 <_strtod_l+0x9e8>
 8015f40:	4639      	mov	r1, r7
 8015f42:	4630      	mov	r0, r6
 8015f44:	f7f2 fd40 	bl	80089c8 <__aeabi_d2iz>
 8015f48:	f7f2 fa24 	bl	8008394 <__aeabi_i2d>
 8015f4c:	460b      	mov	r3, r1
 8015f4e:	4602      	mov	r2, r0
 8015f50:	4639      	mov	r1, r7
 8015f52:	4630      	mov	r0, r6
 8015f54:	f7f2 f8d0 	bl	80080f8 <__aeabi_dsub>
 8015f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f5a:	4606      	mov	r6, r0
 8015f5c:	460f      	mov	r7, r1
 8015f5e:	b933      	cbnz	r3, 8015f6e <_strtod_l+0xace>
 8015f60:	f1ba 0f00 	cmp.w	sl, #0
 8015f64:	d103      	bne.n	8015f6e <_strtod_l+0xace>
 8015f66:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	d06d      	beq.n	801604a <_strtod_l+0xbaa>
 8015f6e:	a30a      	add	r3, pc, #40	; (adr r3, 8015f98 <_strtod_l+0xaf8>)
 8015f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f74:	4630      	mov	r0, r6
 8015f76:	4639      	mov	r1, r7
 8015f78:	f7f2 fce8 	bl	800894c <__aeabi_dcmplt>
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	f47f acb8 	bne.w	80158f2 <_strtod_l+0x452>
 8015f82:	a307      	add	r3, pc, #28	; (adr r3, 8015fa0 <_strtod_l+0xb00>)
 8015f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f88:	4630      	mov	r0, r6
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	f7f2 fcfc 	bl	8008988 <__aeabi_dcmpgt>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	f43f af79 	beq.w	8015e88 <_strtod_l+0x9e8>
 8015f96:	e4ac      	b.n	80158f2 <_strtod_l+0x452>
 8015f98:	94a03595 	.word	0x94a03595
 8015f9c:	3fdfffff 	.word	0x3fdfffff
 8015fa0:	35afe535 	.word	0x35afe535
 8015fa4:	3fe00000 	.word	0x3fe00000
 8015fa8:	000fffff 	.word	0x000fffff
 8015fac:	7ff00000 	.word	0x7ff00000
 8015fb0:	7fefffff 	.word	0x7fefffff
 8015fb4:	39500000 	.word	0x39500000
 8015fb8:	3ff00000 	.word	0x3ff00000
 8015fbc:	7fe00000 	.word	0x7fe00000
 8015fc0:	7c9fffff 	.word	0x7c9fffff
 8015fc4:	3fe00000 	.word	0x3fe00000
 8015fc8:	bff00000 	.word	0xbff00000
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	b333      	cbz	r3, 801601e <_strtod_l+0xb7e>
 8015fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fd2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015fd6:	d822      	bhi.n	801601e <_strtod_l+0xb7e>
 8015fd8:	a327      	add	r3, pc, #156	; (adr r3, 8016078 <_strtod_l+0xbd8>)
 8015fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fde:	4630      	mov	r0, r6
 8015fe0:	4639      	mov	r1, r7
 8015fe2:	f7f2 fcbd 	bl	8008960 <__aeabi_dcmple>
 8015fe6:	b1a0      	cbz	r0, 8016012 <_strtod_l+0xb72>
 8015fe8:	4639      	mov	r1, r7
 8015fea:	4630      	mov	r0, r6
 8015fec:	f7f2 fd14 	bl	8008a18 <__aeabi_d2uiz>
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	bf08      	it	eq
 8015ff4:	2001      	moveq	r0, #1
 8015ff6:	f7f2 f9bd 	bl	8008374 <__aeabi_ui2d>
 8015ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ffc:	4606      	mov	r6, r0
 8015ffe:	460f      	mov	r7, r1
 8016000:	bb03      	cbnz	r3, 8016044 <_strtod_l+0xba4>
 8016002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016006:	9012      	str	r0, [sp, #72]	; 0x48
 8016008:	9313      	str	r3, [sp, #76]	; 0x4c
 801600a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801600e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016016:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801601a:	1a9b      	subs	r3, r3, r2
 801601c:	930b      	str	r3, [sp, #44]	; 0x2c
 801601e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016022:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016026:	f002 f80d 	bl	8018044 <__ulp>
 801602a:	4650      	mov	r0, sl
 801602c:	ec53 2b10 	vmov	r2, r3, d0
 8016030:	4659      	mov	r1, fp
 8016032:	f7f2 fa19 	bl	8008468 <__aeabi_dmul>
 8016036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801603a:	f7f2 f85f 	bl	80080fc <__adddf3>
 801603e:	4682      	mov	sl, r0
 8016040:	468b      	mov	fp, r1
 8016042:	e772      	b.n	8015f2a <_strtod_l+0xa8a>
 8016044:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016048:	e7df      	b.n	801600a <_strtod_l+0xb6a>
 801604a:	a30d      	add	r3, pc, #52	; (adr r3, 8016080 <_strtod_l+0xbe0>)
 801604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016050:	f7f2 fc7c 	bl	800894c <__aeabi_dcmplt>
 8016054:	e79c      	b.n	8015f90 <_strtod_l+0xaf0>
 8016056:	2300      	movs	r3, #0
 8016058:	930d      	str	r3, [sp, #52]	; 0x34
 801605a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801605c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801605e:	6013      	str	r3, [r2, #0]
 8016060:	f7ff ba61 	b.w	8015526 <_strtod_l+0x86>
 8016064:	2b65      	cmp	r3, #101	; 0x65
 8016066:	f04f 0200 	mov.w	r2, #0
 801606a:	f43f ab4e 	beq.w	801570a <_strtod_l+0x26a>
 801606e:	2101      	movs	r1, #1
 8016070:	4614      	mov	r4, r2
 8016072:	9104      	str	r1, [sp, #16]
 8016074:	f7ff bacb 	b.w	801560e <_strtod_l+0x16e>
 8016078:	ffc00000 	.word	0xffc00000
 801607c:	41dfffff 	.word	0x41dfffff
 8016080:	94a03595 	.word	0x94a03595
 8016084:	3fcfffff 	.word	0x3fcfffff

08016088 <_strtod_r>:
 8016088:	4b05      	ldr	r3, [pc, #20]	; (80160a0 <_strtod_r+0x18>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	b410      	push	{r4}
 801608e:	6a1b      	ldr	r3, [r3, #32]
 8016090:	4c04      	ldr	r4, [pc, #16]	; (80160a4 <_strtod_r+0x1c>)
 8016092:	2b00      	cmp	r3, #0
 8016094:	bf08      	it	eq
 8016096:	4623      	moveq	r3, r4
 8016098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801609c:	f7ff ba00 	b.w	80154a0 <_strtod_l>
 80160a0:	20000028 	.word	0x20000028
 80160a4:	2000008c 	.word	0x2000008c

080160a8 <_strtol_l.isra.0>:
 80160a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160ac:	4680      	mov	r8, r0
 80160ae:	4689      	mov	r9, r1
 80160b0:	4692      	mov	sl, r2
 80160b2:	461e      	mov	r6, r3
 80160b4:	460f      	mov	r7, r1
 80160b6:	463d      	mov	r5, r7
 80160b8:	9808      	ldr	r0, [sp, #32]
 80160ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160be:	f001 fc55 	bl	801796c <__locale_ctype_ptr_l>
 80160c2:	4420      	add	r0, r4
 80160c4:	7843      	ldrb	r3, [r0, #1]
 80160c6:	f013 0308 	ands.w	r3, r3, #8
 80160ca:	d132      	bne.n	8016132 <_strtol_l.isra.0+0x8a>
 80160cc:	2c2d      	cmp	r4, #45	; 0x2d
 80160ce:	d132      	bne.n	8016136 <_strtol_l.isra.0+0x8e>
 80160d0:	787c      	ldrb	r4, [r7, #1]
 80160d2:	1cbd      	adds	r5, r7, #2
 80160d4:	2201      	movs	r2, #1
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d05d      	beq.n	8016196 <_strtol_l.isra.0+0xee>
 80160da:	2e10      	cmp	r6, #16
 80160dc:	d109      	bne.n	80160f2 <_strtol_l.isra.0+0x4a>
 80160de:	2c30      	cmp	r4, #48	; 0x30
 80160e0:	d107      	bne.n	80160f2 <_strtol_l.isra.0+0x4a>
 80160e2:	782b      	ldrb	r3, [r5, #0]
 80160e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80160e8:	2b58      	cmp	r3, #88	; 0x58
 80160ea:	d14f      	bne.n	801618c <_strtol_l.isra.0+0xe4>
 80160ec:	786c      	ldrb	r4, [r5, #1]
 80160ee:	2610      	movs	r6, #16
 80160f0:	3502      	adds	r5, #2
 80160f2:	2a00      	cmp	r2, #0
 80160f4:	bf14      	ite	ne
 80160f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80160fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80160fe:	2700      	movs	r7, #0
 8016100:	fbb1 fcf6 	udiv	ip, r1, r6
 8016104:	4638      	mov	r0, r7
 8016106:	fb06 1e1c 	mls	lr, r6, ip, r1
 801610a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801610e:	2b09      	cmp	r3, #9
 8016110:	d817      	bhi.n	8016142 <_strtol_l.isra.0+0x9a>
 8016112:	461c      	mov	r4, r3
 8016114:	42a6      	cmp	r6, r4
 8016116:	dd23      	ble.n	8016160 <_strtol_l.isra.0+0xb8>
 8016118:	1c7b      	adds	r3, r7, #1
 801611a:	d007      	beq.n	801612c <_strtol_l.isra.0+0x84>
 801611c:	4584      	cmp	ip, r0
 801611e:	d31c      	bcc.n	801615a <_strtol_l.isra.0+0xb2>
 8016120:	d101      	bne.n	8016126 <_strtol_l.isra.0+0x7e>
 8016122:	45a6      	cmp	lr, r4
 8016124:	db19      	blt.n	801615a <_strtol_l.isra.0+0xb2>
 8016126:	fb00 4006 	mla	r0, r0, r6, r4
 801612a:	2701      	movs	r7, #1
 801612c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016130:	e7eb      	b.n	801610a <_strtol_l.isra.0+0x62>
 8016132:	462f      	mov	r7, r5
 8016134:	e7bf      	b.n	80160b6 <_strtol_l.isra.0+0xe>
 8016136:	2c2b      	cmp	r4, #43	; 0x2b
 8016138:	bf04      	itt	eq
 801613a:	1cbd      	addeq	r5, r7, #2
 801613c:	787c      	ldrbeq	r4, [r7, #1]
 801613e:	461a      	mov	r2, r3
 8016140:	e7c9      	b.n	80160d6 <_strtol_l.isra.0+0x2e>
 8016142:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016146:	2b19      	cmp	r3, #25
 8016148:	d801      	bhi.n	801614e <_strtol_l.isra.0+0xa6>
 801614a:	3c37      	subs	r4, #55	; 0x37
 801614c:	e7e2      	b.n	8016114 <_strtol_l.isra.0+0x6c>
 801614e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016152:	2b19      	cmp	r3, #25
 8016154:	d804      	bhi.n	8016160 <_strtol_l.isra.0+0xb8>
 8016156:	3c57      	subs	r4, #87	; 0x57
 8016158:	e7dc      	b.n	8016114 <_strtol_l.isra.0+0x6c>
 801615a:	f04f 37ff 	mov.w	r7, #4294967295
 801615e:	e7e5      	b.n	801612c <_strtol_l.isra.0+0x84>
 8016160:	1c7b      	adds	r3, r7, #1
 8016162:	d108      	bne.n	8016176 <_strtol_l.isra.0+0xce>
 8016164:	2322      	movs	r3, #34	; 0x22
 8016166:	f8c8 3000 	str.w	r3, [r8]
 801616a:	4608      	mov	r0, r1
 801616c:	f1ba 0f00 	cmp.w	sl, #0
 8016170:	d107      	bne.n	8016182 <_strtol_l.isra.0+0xda>
 8016172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016176:	b102      	cbz	r2, 801617a <_strtol_l.isra.0+0xd2>
 8016178:	4240      	negs	r0, r0
 801617a:	f1ba 0f00 	cmp.w	sl, #0
 801617e:	d0f8      	beq.n	8016172 <_strtol_l.isra.0+0xca>
 8016180:	b10f      	cbz	r7, 8016186 <_strtol_l.isra.0+0xde>
 8016182:	f105 39ff 	add.w	r9, r5, #4294967295
 8016186:	f8ca 9000 	str.w	r9, [sl]
 801618a:	e7f2      	b.n	8016172 <_strtol_l.isra.0+0xca>
 801618c:	2430      	movs	r4, #48	; 0x30
 801618e:	2e00      	cmp	r6, #0
 8016190:	d1af      	bne.n	80160f2 <_strtol_l.isra.0+0x4a>
 8016192:	2608      	movs	r6, #8
 8016194:	e7ad      	b.n	80160f2 <_strtol_l.isra.0+0x4a>
 8016196:	2c30      	cmp	r4, #48	; 0x30
 8016198:	d0a3      	beq.n	80160e2 <_strtol_l.isra.0+0x3a>
 801619a:	260a      	movs	r6, #10
 801619c:	e7a9      	b.n	80160f2 <_strtol_l.isra.0+0x4a>
	...

080161a0 <_strtol_r>:
 80161a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161a2:	4c06      	ldr	r4, [pc, #24]	; (80161bc <_strtol_r+0x1c>)
 80161a4:	4d06      	ldr	r5, [pc, #24]	; (80161c0 <_strtol_r+0x20>)
 80161a6:	6824      	ldr	r4, [r4, #0]
 80161a8:	6a24      	ldr	r4, [r4, #32]
 80161aa:	2c00      	cmp	r4, #0
 80161ac:	bf08      	it	eq
 80161ae:	462c      	moveq	r4, r5
 80161b0:	9400      	str	r4, [sp, #0]
 80161b2:	f7ff ff79 	bl	80160a8 <_strtol_l.isra.0>
 80161b6:	b003      	add	sp, #12
 80161b8:	bd30      	pop	{r4, r5, pc}
 80161ba:	bf00      	nop
 80161bc:	20000028 	.word	0x20000028
 80161c0:	2000008c 	.word	0x2000008c

080161c4 <__swbuf_r>:
 80161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c6:	460e      	mov	r6, r1
 80161c8:	4614      	mov	r4, r2
 80161ca:	4605      	mov	r5, r0
 80161cc:	b118      	cbz	r0, 80161d6 <__swbuf_r+0x12>
 80161ce:	6983      	ldr	r3, [r0, #24]
 80161d0:	b90b      	cbnz	r3, 80161d6 <__swbuf_r+0x12>
 80161d2:	f000 ffff 	bl	80171d4 <__sinit>
 80161d6:	4b21      	ldr	r3, [pc, #132]	; (801625c <__swbuf_r+0x98>)
 80161d8:	429c      	cmp	r4, r3
 80161da:	d12a      	bne.n	8016232 <__swbuf_r+0x6e>
 80161dc:	686c      	ldr	r4, [r5, #4]
 80161de:	69a3      	ldr	r3, [r4, #24]
 80161e0:	60a3      	str	r3, [r4, #8]
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	071a      	lsls	r2, r3, #28
 80161e6:	d52e      	bpl.n	8016246 <__swbuf_r+0x82>
 80161e8:	6923      	ldr	r3, [r4, #16]
 80161ea:	b363      	cbz	r3, 8016246 <__swbuf_r+0x82>
 80161ec:	6923      	ldr	r3, [r4, #16]
 80161ee:	6820      	ldr	r0, [r4, #0]
 80161f0:	1ac0      	subs	r0, r0, r3
 80161f2:	6963      	ldr	r3, [r4, #20]
 80161f4:	b2f6      	uxtb	r6, r6
 80161f6:	4283      	cmp	r3, r0
 80161f8:	4637      	mov	r7, r6
 80161fa:	dc04      	bgt.n	8016206 <__swbuf_r+0x42>
 80161fc:	4621      	mov	r1, r4
 80161fe:	4628      	mov	r0, r5
 8016200:	f000 ff6c 	bl	80170dc <_fflush_r>
 8016204:	bb28      	cbnz	r0, 8016252 <__swbuf_r+0x8e>
 8016206:	68a3      	ldr	r3, [r4, #8]
 8016208:	3b01      	subs	r3, #1
 801620a:	60a3      	str	r3, [r4, #8]
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	1c5a      	adds	r2, r3, #1
 8016210:	6022      	str	r2, [r4, #0]
 8016212:	701e      	strb	r6, [r3, #0]
 8016214:	6963      	ldr	r3, [r4, #20]
 8016216:	3001      	adds	r0, #1
 8016218:	4283      	cmp	r3, r0
 801621a:	d004      	beq.n	8016226 <__swbuf_r+0x62>
 801621c:	89a3      	ldrh	r3, [r4, #12]
 801621e:	07db      	lsls	r3, r3, #31
 8016220:	d519      	bpl.n	8016256 <__swbuf_r+0x92>
 8016222:	2e0a      	cmp	r6, #10
 8016224:	d117      	bne.n	8016256 <__swbuf_r+0x92>
 8016226:	4621      	mov	r1, r4
 8016228:	4628      	mov	r0, r5
 801622a:	f000 ff57 	bl	80170dc <_fflush_r>
 801622e:	b190      	cbz	r0, 8016256 <__swbuf_r+0x92>
 8016230:	e00f      	b.n	8016252 <__swbuf_r+0x8e>
 8016232:	4b0b      	ldr	r3, [pc, #44]	; (8016260 <__swbuf_r+0x9c>)
 8016234:	429c      	cmp	r4, r3
 8016236:	d101      	bne.n	801623c <__swbuf_r+0x78>
 8016238:	68ac      	ldr	r4, [r5, #8]
 801623a:	e7d0      	b.n	80161de <__swbuf_r+0x1a>
 801623c:	4b09      	ldr	r3, [pc, #36]	; (8016264 <__swbuf_r+0xa0>)
 801623e:	429c      	cmp	r4, r3
 8016240:	bf08      	it	eq
 8016242:	68ec      	ldreq	r4, [r5, #12]
 8016244:	e7cb      	b.n	80161de <__swbuf_r+0x1a>
 8016246:	4621      	mov	r1, r4
 8016248:	4628      	mov	r0, r5
 801624a:	f000 f80d 	bl	8016268 <__swsetup_r>
 801624e:	2800      	cmp	r0, #0
 8016250:	d0cc      	beq.n	80161ec <__swbuf_r+0x28>
 8016252:	f04f 37ff 	mov.w	r7, #4294967295
 8016256:	4638      	mov	r0, r7
 8016258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801625a:	bf00      	nop
 801625c:	080199a0 	.word	0x080199a0
 8016260:	080199c0 	.word	0x080199c0
 8016264:	08019980 	.word	0x08019980

08016268 <__swsetup_r>:
 8016268:	4b32      	ldr	r3, [pc, #200]	; (8016334 <__swsetup_r+0xcc>)
 801626a:	b570      	push	{r4, r5, r6, lr}
 801626c:	681d      	ldr	r5, [r3, #0]
 801626e:	4606      	mov	r6, r0
 8016270:	460c      	mov	r4, r1
 8016272:	b125      	cbz	r5, 801627e <__swsetup_r+0x16>
 8016274:	69ab      	ldr	r3, [r5, #24]
 8016276:	b913      	cbnz	r3, 801627e <__swsetup_r+0x16>
 8016278:	4628      	mov	r0, r5
 801627a:	f000 ffab 	bl	80171d4 <__sinit>
 801627e:	4b2e      	ldr	r3, [pc, #184]	; (8016338 <__swsetup_r+0xd0>)
 8016280:	429c      	cmp	r4, r3
 8016282:	d10f      	bne.n	80162a4 <__swsetup_r+0x3c>
 8016284:	686c      	ldr	r4, [r5, #4]
 8016286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801628a:	b29a      	uxth	r2, r3
 801628c:	0715      	lsls	r5, r2, #28
 801628e:	d42c      	bmi.n	80162ea <__swsetup_r+0x82>
 8016290:	06d0      	lsls	r0, r2, #27
 8016292:	d411      	bmi.n	80162b8 <__swsetup_r+0x50>
 8016294:	2209      	movs	r2, #9
 8016296:	6032      	str	r2, [r6, #0]
 8016298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801629c:	81a3      	strh	r3, [r4, #12]
 801629e:	f04f 30ff 	mov.w	r0, #4294967295
 80162a2:	e03e      	b.n	8016322 <__swsetup_r+0xba>
 80162a4:	4b25      	ldr	r3, [pc, #148]	; (801633c <__swsetup_r+0xd4>)
 80162a6:	429c      	cmp	r4, r3
 80162a8:	d101      	bne.n	80162ae <__swsetup_r+0x46>
 80162aa:	68ac      	ldr	r4, [r5, #8]
 80162ac:	e7eb      	b.n	8016286 <__swsetup_r+0x1e>
 80162ae:	4b24      	ldr	r3, [pc, #144]	; (8016340 <__swsetup_r+0xd8>)
 80162b0:	429c      	cmp	r4, r3
 80162b2:	bf08      	it	eq
 80162b4:	68ec      	ldreq	r4, [r5, #12]
 80162b6:	e7e6      	b.n	8016286 <__swsetup_r+0x1e>
 80162b8:	0751      	lsls	r1, r2, #29
 80162ba:	d512      	bpl.n	80162e2 <__swsetup_r+0x7a>
 80162bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162be:	b141      	cbz	r1, 80162d2 <__swsetup_r+0x6a>
 80162c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162c4:	4299      	cmp	r1, r3
 80162c6:	d002      	beq.n	80162ce <__swsetup_r+0x66>
 80162c8:	4630      	mov	r0, r6
 80162ca:	f001 fffd 	bl	80182c8 <_free_r>
 80162ce:	2300      	movs	r3, #0
 80162d0:	6363      	str	r3, [r4, #52]	; 0x34
 80162d2:	89a3      	ldrh	r3, [r4, #12]
 80162d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80162d8:	81a3      	strh	r3, [r4, #12]
 80162da:	2300      	movs	r3, #0
 80162dc:	6063      	str	r3, [r4, #4]
 80162de:	6923      	ldr	r3, [r4, #16]
 80162e0:	6023      	str	r3, [r4, #0]
 80162e2:	89a3      	ldrh	r3, [r4, #12]
 80162e4:	f043 0308 	orr.w	r3, r3, #8
 80162e8:	81a3      	strh	r3, [r4, #12]
 80162ea:	6923      	ldr	r3, [r4, #16]
 80162ec:	b94b      	cbnz	r3, 8016302 <__swsetup_r+0x9a>
 80162ee:	89a3      	ldrh	r3, [r4, #12]
 80162f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80162f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162f8:	d003      	beq.n	8016302 <__swsetup_r+0x9a>
 80162fa:	4621      	mov	r1, r4
 80162fc:	4630      	mov	r0, r6
 80162fe:	f001 fb7b 	bl	80179f8 <__smakebuf_r>
 8016302:	89a2      	ldrh	r2, [r4, #12]
 8016304:	f012 0301 	ands.w	r3, r2, #1
 8016308:	d00c      	beq.n	8016324 <__swsetup_r+0xbc>
 801630a:	2300      	movs	r3, #0
 801630c:	60a3      	str	r3, [r4, #8]
 801630e:	6963      	ldr	r3, [r4, #20]
 8016310:	425b      	negs	r3, r3
 8016312:	61a3      	str	r3, [r4, #24]
 8016314:	6923      	ldr	r3, [r4, #16]
 8016316:	b953      	cbnz	r3, 801632e <__swsetup_r+0xc6>
 8016318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801631c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016320:	d1ba      	bne.n	8016298 <__swsetup_r+0x30>
 8016322:	bd70      	pop	{r4, r5, r6, pc}
 8016324:	0792      	lsls	r2, r2, #30
 8016326:	bf58      	it	pl
 8016328:	6963      	ldrpl	r3, [r4, #20]
 801632a:	60a3      	str	r3, [r4, #8]
 801632c:	e7f2      	b.n	8016314 <__swsetup_r+0xac>
 801632e:	2000      	movs	r0, #0
 8016330:	e7f7      	b.n	8016322 <__swsetup_r+0xba>
 8016332:	bf00      	nop
 8016334:	20000028 	.word	0x20000028
 8016338:	080199a0 	.word	0x080199a0
 801633c:	080199c0 	.word	0x080199c0
 8016340:	08019980 	.word	0x08019980

08016344 <quorem>:
 8016344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016348:	6903      	ldr	r3, [r0, #16]
 801634a:	690c      	ldr	r4, [r1, #16]
 801634c:	42a3      	cmp	r3, r4
 801634e:	4680      	mov	r8, r0
 8016350:	f2c0 8082 	blt.w	8016458 <quorem+0x114>
 8016354:	3c01      	subs	r4, #1
 8016356:	f101 0714 	add.w	r7, r1, #20
 801635a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801635e:	f100 0614 	add.w	r6, r0, #20
 8016362:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016366:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801636a:	eb06 030c 	add.w	r3, r6, ip
 801636e:	3501      	adds	r5, #1
 8016370:	eb07 090c 	add.w	r9, r7, ip
 8016374:	9301      	str	r3, [sp, #4]
 8016376:	fbb0 f5f5 	udiv	r5, r0, r5
 801637a:	b395      	cbz	r5, 80163e2 <quorem+0x9e>
 801637c:	f04f 0a00 	mov.w	sl, #0
 8016380:	4638      	mov	r0, r7
 8016382:	46b6      	mov	lr, r6
 8016384:	46d3      	mov	fp, sl
 8016386:	f850 2b04 	ldr.w	r2, [r0], #4
 801638a:	b293      	uxth	r3, r2
 801638c:	fb05 a303 	mla	r3, r5, r3, sl
 8016390:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016394:	b29b      	uxth	r3, r3
 8016396:	ebab 0303 	sub.w	r3, fp, r3
 801639a:	0c12      	lsrs	r2, r2, #16
 801639c:	f8de b000 	ldr.w	fp, [lr]
 80163a0:	fb05 a202 	mla	r2, r5, r2, sl
 80163a4:	fa13 f38b 	uxtah	r3, r3, fp
 80163a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80163ac:	fa1f fb82 	uxth.w	fp, r2
 80163b0:	f8de 2000 	ldr.w	r2, [lr]
 80163b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80163b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80163bc:	b29b      	uxth	r3, r3
 80163be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163c2:	4581      	cmp	r9, r0
 80163c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80163c8:	f84e 3b04 	str.w	r3, [lr], #4
 80163cc:	d2db      	bcs.n	8016386 <quorem+0x42>
 80163ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80163d2:	b933      	cbnz	r3, 80163e2 <quorem+0x9e>
 80163d4:	9b01      	ldr	r3, [sp, #4]
 80163d6:	3b04      	subs	r3, #4
 80163d8:	429e      	cmp	r6, r3
 80163da:	461a      	mov	r2, r3
 80163dc:	d330      	bcc.n	8016440 <quorem+0xfc>
 80163de:	f8c8 4010 	str.w	r4, [r8, #16]
 80163e2:	4640      	mov	r0, r8
 80163e4:	f001 fdb6 	bl	8017f54 <__mcmp>
 80163e8:	2800      	cmp	r0, #0
 80163ea:	db25      	blt.n	8016438 <quorem+0xf4>
 80163ec:	3501      	adds	r5, #1
 80163ee:	4630      	mov	r0, r6
 80163f0:	f04f 0c00 	mov.w	ip, #0
 80163f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80163f8:	f8d0 e000 	ldr.w	lr, [r0]
 80163fc:	b293      	uxth	r3, r2
 80163fe:	ebac 0303 	sub.w	r3, ip, r3
 8016402:	0c12      	lsrs	r2, r2, #16
 8016404:	fa13 f38e 	uxtah	r3, r3, lr
 8016408:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801640c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016410:	b29b      	uxth	r3, r3
 8016412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016416:	45b9      	cmp	r9, r7
 8016418:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801641c:	f840 3b04 	str.w	r3, [r0], #4
 8016420:	d2e8      	bcs.n	80163f4 <quorem+0xb0>
 8016422:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016426:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801642a:	b92a      	cbnz	r2, 8016438 <quorem+0xf4>
 801642c:	3b04      	subs	r3, #4
 801642e:	429e      	cmp	r6, r3
 8016430:	461a      	mov	r2, r3
 8016432:	d30b      	bcc.n	801644c <quorem+0x108>
 8016434:	f8c8 4010 	str.w	r4, [r8, #16]
 8016438:	4628      	mov	r0, r5
 801643a:	b003      	add	sp, #12
 801643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016440:	6812      	ldr	r2, [r2, #0]
 8016442:	3b04      	subs	r3, #4
 8016444:	2a00      	cmp	r2, #0
 8016446:	d1ca      	bne.n	80163de <quorem+0x9a>
 8016448:	3c01      	subs	r4, #1
 801644a:	e7c5      	b.n	80163d8 <quorem+0x94>
 801644c:	6812      	ldr	r2, [r2, #0]
 801644e:	3b04      	subs	r3, #4
 8016450:	2a00      	cmp	r2, #0
 8016452:	d1ef      	bne.n	8016434 <quorem+0xf0>
 8016454:	3c01      	subs	r4, #1
 8016456:	e7ea      	b.n	801642e <quorem+0xea>
 8016458:	2000      	movs	r0, #0
 801645a:	e7ee      	b.n	801643a <quorem+0xf6>
 801645c:	0000      	movs	r0, r0
	...

08016460 <_dtoa_r>:
 8016460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016464:	ec57 6b10 	vmov	r6, r7, d0
 8016468:	b097      	sub	sp, #92	; 0x5c
 801646a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801646c:	9106      	str	r1, [sp, #24]
 801646e:	4604      	mov	r4, r0
 8016470:	920b      	str	r2, [sp, #44]	; 0x2c
 8016472:	9312      	str	r3, [sp, #72]	; 0x48
 8016474:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016478:	e9cd 6700 	strd	r6, r7, [sp]
 801647c:	b93d      	cbnz	r5, 801648e <_dtoa_r+0x2e>
 801647e:	2010      	movs	r0, #16
 8016480:	f001 fafa 	bl	8017a78 <malloc>
 8016484:	6260      	str	r0, [r4, #36]	; 0x24
 8016486:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801648a:	6005      	str	r5, [r0, #0]
 801648c:	60c5      	str	r5, [r0, #12]
 801648e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016490:	6819      	ldr	r1, [r3, #0]
 8016492:	b151      	cbz	r1, 80164aa <_dtoa_r+0x4a>
 8016494:	685a      	ldr	r2, [r3, #4]
 8016496:	604a      	str	r2, [r1, #4]
 8016498:	2301      	movs	r3, #1
 801649a:	4093      	lsls	r3, r2
 801649c:	608b      	str	r3, [r1, #8]
 801649e:	4620      	mov	r0, r4
 80164a0:	f001 fb38 	bl	8017b14 <_Bfree>
 80164a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164a6:	2200      	movs	r2, #0
 80164a8:	601a      	str	r2, [r3, #0]
 80164aa:	1e3b      	subs	r3, r7, #0
 80164ac:	bfbb      	ittet	lt
 80164ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80164b2:	9301      	strlt	r3, [sp, #4]
 80164b4:	2300      	movge	r3, #0
 80164b6:	2201      	movlt	r2, #1
 80164b8:	bfac      	ite	ge
 80164ba:	f8c8 3000 	strge.w	r3, [r8]
 80164be:	f8c8 2000 	strlt.w	r2, [r8]
 80164c2:	4baf      	ldr	r3, [pc, #700]	; (8016780 <_dtoa_r+0x320>)
 80164c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80164c8:	ea33 0308 	bics.w	r3, r3, r8
 80164cc:	d114      	bne.n	80164f8 <_dtoa_r+0x98>
 80164ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80164d4:	6013      	str	r3, [r2, #0]
 80164d6:	9b00      	ldr	r3, [sp, #0]
 80164d8:	b923      	cbnz	r3, 80164e4 <_dtoa_r+0x84>
 80164da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80164de:	2800      	cmp	r0, #0
 80164e0:	f000 8542 	beq.w	8016f68 <_dtoa_r+0xb08>
 80164e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016794 <_dtoa_r+0x334>
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	f000 8544 	beq.w	8016f78 <_dtoa_r+0xb18>
 80164f0:	f10b 0303 	add.w	r3, fp, #3
 80164f4:	f000 bd3e 	b.w	8016f74 <_dtoa_r+0xb14>
 80164f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80164fc:	2200      	movs	r2, #0
 80164fe:	2300      	movs	r3, #0
 8016500:	4630      	mov	r0, r6
 8016502:	4639      	mov	r1, r7
 8016504:	f7f2 fa18 	bl	8008938 <__aeabi_dcmpeq>
 8016508:	4681      	mov	r9, r0
 801650a:	b168      	cbz	r0, 8016528 <_dtoa_r+0xc8>
 801650c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801650e:	2301      	movs	r3, #1
 8016510:	6013      	str	r3, [r2, #0]
 8016512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016514:	2b00      	cmp	r3, #0
 8016516:	f000 8524 	beq.w	8016f62 <_dtoa_r+0xb02>
 801651a:	4b9a      	ldr	r3, [pc, #616]	; (8016784 <_dtoa_r+0x324>)
 801651c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801651e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	f000 bd28 	b.w	8016f78 <_dtoa_r+0xb18>
 8016528:	aa14      	add	r2, sp, #80	; 0x50
 801652a:	a915      	add	r1, sp, #84	; 0x54
 801652c:	ec47 6b10 	vmov	d0, r6, r7
 8016530:	4620      	mov	r0, r4
 8016532:	f001 fdfd 	bl	8018130 <__d2b>
 8016536:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801653a:	9004      	str	r0, [sp, #16]
 801653c:	2d00      	cmp	r5, #0
 801653e:	d07c      	beq.n	801663a <_dtoa_r+0x1da>
 8016540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016544:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016548:	46b2      	mov	sl, r6
 801654a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801654e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016552:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016556:	2200      	movs	r2, #0
 8016558:	4b8b      	ldr	r3, [pc, #556]	; (8016788 <_dtoa_r+0x328>)
 801655a:	4650      	mov	r0, sl
 801655c:	4659      	mov	r1, fp
 801655e:	f7f1 fdcb 	bl	80080f8 <__aeabi_dsub>
 8016562:	a381      	add	r3, pc, #516	; (adr r3, 8016768 <_dtoa_r+0x308>)
 8016564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016568:	f7f1 ff7e 	bl	8008468 <__aeabi_dmul>
 801656c:	a380      	add	r3, pc, #512	; (adr r3, 8016770 <_dtoa_r+0x310>)
 801656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016572:	f7f1 fdc3 	bl	80080fc <__adddf3>
 8016576:	4606      	mov	r6, r0
 8016578:	4628      	mov	r0, r5
 801657a:	460f      	mov	r7, r1
 801657c:	f7f1 ff0a 	bl	8008394 <__aeabi_i2d>
 8016580:	a37d      	add	r3, pc, #500	; (adr r3, 8016778 <_dtoa_r+0x318>)
 8016582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016586:	f7f1 ff6f 	bl	8008468 <__aeabi_dmul>
 801658a:	4602      	mov	r2, r0
 801658c:	460b      	mov	r3, r1
 801658e:	4630      	mov	r0, r6
 8016590:	4639      	mov	r1, r7
 8016592:	f7f1 fdb3 	bl	80080fc <__adddf3>
 8016596:	4606      	mov	r6, r0
 8016598:	460f      	mov	r7, r1
 801659a:	f7f2 fa15 	bl	80089c8 <__aeabi_d2iz>
 801659e:	2200      	movs	r2, #0
 80165a0:	4682      	mov	sl, r0
 80165a2:	2300      	movs	r3, #0
 80165a4:	4630      	mov	r0, r6
 80165a6:	4639      	mov	r1, r7
 80165a8:	f7f2 f9d0 	bl	800894c <__aeabi_dcmplt>
 80165ac:	b148      	cbz	r0, 80165c2 <_dtoa_r+0x162>
 80165ae:	4650      	mov	r0, sl
 80165b0:	f7f1 fef0 	bl	8008394 <__aeabi_i2d>
 80165b4:	4632      	mov	r2, r6
 80165b6:	463b      	mov	r3, r7
 80165b8:	f7f2 f9be 	bl	8008938 <__aeabi_dcmpeq>
 80165bc:	b908      	cbnz	r0, 80165c2 <_dtoa_r+0x162>
 80165be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165c2:	f1ba 0f16 	cmp.w	sl, #22
 80165c6:	d859      	bhi.n	801667c <_dtoa_r+0x21c>
 80165c8:	4970      	ldr	r1, [pc, #448]	; (801678c <_dtoa_r+0x32c>)
 80165ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80165ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165d6:	f7f2 f9d7 	bl	8008988 <__aeabi_dcmpgt>
 80165da:	2800      	cmp	r0, #0
 80165dc:	d050      	beq.n	8016680 <_dtoa_r+0x220>
 80165de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165e2:	2300      	movs	r3, #0
 80165e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80165e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165e8:	1b5d      	subs	r5, r3, r5
 80165ea:	f1b5 0801 	subs.w	r8, r5, #1
 80165ee:	bf49      	itett	mi
 80165f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80165f4:	2300      	movpl	r3, #0
 80165f6:	9305      	strmi	r3, [sp, #20]
 80165f8:	f04f 0800 	movmi.w	r8, #0
 80165fc:	bf58      	it	pl
 80165fe:	9305      	strpl	r3, [sp, #20]
 8016600:	f1ba 0f00 	cmp.w	sl, #0
 8016604:	db3e      	blt.n	8016684 <_dtoa_r+0x224>
 8016606:	2300      	movs	r3, #0
 8016608:	44d0      	add	r8, sl
 801660a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801660e:	9307      	str	r3, [sp, #28]
 8016610:	9b06      	ldr	r3, [sp, #24]
 8016612:	2b09      	cmp	r3, #9
 8016614:	f200 8090 	bhi.w	8016738 <_dtoa_r+0x2d8>
 8016618:	2b05      	cmp	r3, #5
 801661a:	bfc4      	itt	gt
 801661c:	3b04      	subgt	r3, #4
 801661e:	9306      	strgt	r3, [sp, #24]
 8016620:	9b06      	ldr	r3, [sp, #24]
 8016622:	f1a3 0302 	sub.w	r3, r3, #2
 8016626:	bfcc      	ite	gt
 8016628:	2500      	movgt	r5, #0
 801662a:	2501      	movle	r5, #1
 801662c:	2b03      	cmp	r3, #3
 801662e:	f200 808f 	bhi.w	8016750 <_dtoa_r+0x2f0>
 8016632:	e8df f003 	tbb	[pc, r3]
 8016636:	7f7d      	.short	0x7f7d
 8016638:	7131      	.short	0x7131
 801663a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801663e:	441d      	add	r5, r3
 8016640:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016644:	2820      	cmp	r0, #32
 8016646:	dd13      	ble.n	8016670 <_dtoa_r+0x210>
 8016648:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801664c:	9b00      	ldr	r3, [sp, #0]
 801664e:	fa08 f800 	lsl.w	r8, r8, r0
 8016652:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016656:	fa23 f000 	lsr.w	r0, r3, r0
 801665a:	ea48 0000 	orr.w	r0, r8, r0
 801665e:	f7f1 fe89 	bl	8008374 <__aeabi_ui2d>
 8016662:	2301      	movs	r3, #1
 8016664:	4682      	mov	sl, r0
 8016666:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801666a:	3d01      	subs	r5, #1
 801666c:	9313      	str	r3, [sp, #76]	; 0x4c
 801666e:	e772      	b.n	8016556 <_dtoa_r+0xf6>
 8016670:	9b00      	ldr	r3, [sp, #0]
 8016672:	f1c0 0020 	rsb	r0, r0, #32
 8016676:	fa03 f000 	lsl.w	r0, r3, r0
 801667a:	e7f0      	b.n	801665e <_dtoa_r+0x1fe>
 801667c:	2301      	movs	r3, #1
 801667e:	e7b1      	b.n	80165e4 <_dtoa_r+0x184>
 8016680:	900f      	str	r0, [sp, #60]	; 0x3c
 8016682:	e7b0      	b.n	80165e6 <_dtoa_r+0x186>
 8016684:	9b05      	ldr	r3, [sp, #20]
 8016686:	eba3 030a 	sub.w	r3, r3, sl
 801668a:	9305      	str	r3, [sp, #20]
 801668c:	f1ca 0300 	rsb	r3, sl, #0
 8016690:	9307      	str	r3, [sp, #28]
 8016692:	2300      	movs	r3, #0
 8016694:	930e      	str	r3, [sp, #56]	; 0x38
 8016696:	e7bb      	b.n	8016610 <_dtoa_r+0x1b0>
 8016698:	2301      	movs	r3, #1
 801669a:	930a      	str	r3, [sp, #40]	; 0x28
 801669c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	dd59      	ble.n	8016756 <_dtoa_r+0x2f6>
 80166a2:	9302      	str	r3, [sp, #8]
 80166a4:	4699      	mov	r9, r3
 80166a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80166a8:	2200      	movs	r2, #0
 80166aa:	6072      	str	r2, [r6, #4]
 80166ac:	2204      	movs	r2, #4
 80166ae:	f102 0014 	add.w	r0, r2, #20
 80166b2:	4298      	cmp	r0, r3
 80166b4:	6871      	ldr	r1, [r6, #4]
 80166b6:	d953      	bls.n	8016760 <_dtoa_r+0x300>
 80166b8:	4620      	mov	r0, r4
 80166ba:	f001 f9f7 	bl	8017aac <_Balloc>
 80166be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166c0:	6030      	str	r0, [r6, #0]
 80166c2:	f1b9 0f0e 	cmp.w	r9, #14
 80166c6:	f8d3 b000 	ldr.w	fp, [r3]
 80166ca:	f200 80e6 	bhi.w	801689a <_dtoa_r+0x43a>
 80166ce:	2d00      	cmp	r5, #0
 80166d0:	f000 80e3 	beq.w	801689a <_dtoa_r+0x43a>
 80166d4:	ed9d 7b00 	vldr	d7, [sp]
 80166d8:	f1ba 0f00 	cmp.w	sl, #0
 80166dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80166e0:	dd74      	ble.n	80167cc <_dtoa_r+0x36c>
 80166e2:	4a2a      	ldr	r2, [pc, #168]	; (801678c <_dtoa_r+0x32c>)
 80166e4:	f00a 030f 	and.w	r3, sl, #15
 80166e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80166ec:	ed93 7b00 	vldr	d7, [r3]
 80166f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80166f4:	06f0      	lsls	r0, r6, #27
 80166f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80166fa:	d565      	bpl.n	80167c8 <_dtoa_r+0x368>
 80166fc:	4b24      	ldr	r3, [pc, #144]	; (8016790 <_dtoa_r+0x330>)
 80166fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016702:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016706:	f7f1 ffd9 	bl	80086bc <__aeabi_ddiv>
 801670a:	e9cd 0100 	strd	r0, r1, [sp]
 801670e:	f006 060f 	and.w	r6, r6, #15
 8016712:	2503      	movs	r5, #3
 8016714:	4f1e      	ldr	r7, [pc, #120]	; (8016790 <_dtoa_r+0x330>)
 8016716:	e04c      	b.n	80167b2 <_dtoa_r+0x352>
 8016718:	2301      	movs	r3, #1
 801671a:	930a      	str	r3, [sp, #40]	; 0x28
 801671c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801671e:	4453      	add	r3, sl
 8016720:	f103 0901 	add.w	r9, r3, #1
 8016724:	9302      	str	r3, [sp, #8]
 8016726:	464b      	mov	r3, r9
 8016728:	2b01      	cmp	r3, #1
 801672a:	bfb8      	it	lt
 801672c:	2301      	movlt	r3, #1
 801672e:	e7ba      	b.n	80166a6 <_dtoa_r+0x246>
 8016730:	2300      	movs	r3, #0
 8016732:	e7b2      	b.n	801669a <_dtoa_r+0x23a>
 8016734:	2300      	movs	r3, #0
 8016736:	e7f0      	b.n	801671a <_dtoa_r+0x2ba>
 8016738:	2501      	movs	r5, #1
 801673a:	2300      	movs	r3, #0
 801673c:	9306      	str	r3, [sp, #24]
 801673e:	950a      	str	r5, [sp, #40]	; 0x28
 8016740:	f04f 33ff 	mov.w	r3, #4294967295
 8016744:	9302      	str	r3, [sp, #8]
 8016746:	4699      	mov	r9, r3
 8016748:	2200      	movs	r2, #0
 801674a:	2312      	movs	r3, #18
 801674c:	920b      	str	r2, [sp, #44]	; 0x2c
 801674e:	e7aa      	b.n	80166a6 <_dtoa_r+0x246>
 8016750:	2301      	movs	r3, #1
 8016752:	930a      	str	r3, [sp, #40]	; 0x28
 8016754:	e7f4      	b.n	8016740 <_dtoa_r+0x2e0>
 8016756:	2301      	movs	r3, #1
 8016758:	9302      	str	r3, [sp, #8]
 801675a:	4699      	mov	r9, r3
 801675c:	461a      	mov	r2, r3
 801675e:	e7f5      	b.n	801674c <_dtoa_r+0x2ec>
 8016760:	3101      	adds	r1, #1
 8016762:	6071      	str	r1, [r6, #4]
 8016764:	0052      	lsls	r2, r2, #1
 8016766:	e7a2      	b.n	80166ae <_dtoa_r+0x24e>
 8016768:	636f4361 	.word	0x636f4361
 801676c:	3fd287a7 	.word	0x3fd287a7
 8016770:	8b60c8b3 	.word	0x8b60c8b3
 8016774:	3fc68a28 	.word	0x3fc68a28
 8016778:	509f79fb 	.word	0x509f79fb
 801677c:	3fd34413 	.word	0x3fd34413
 8016780:	7ff00000 	.word	0x7ff00000
 8016784:	08019b14 	.word	0x08019b14
 8016788:	3ff80000 	.word	0x3ff80000
 801678c:	08019a18 	.word	0x08019a18
 8016790:	080199f0 	.word	0x080199f0
 8016794:	08019979 	.word	0x08019979
 8016798:	07f1      	lsls	r1, r6, #31
 801679a:	d508      	bpl.n	80167ae <_dtoa_r+0x34e>
 801679c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167a4:	f7f1 fe60 	bl	8008468 <__aeabi_dmul>
 80167a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167ac:	3501      	adds	r5, #1
 80167ae:	1076      	asrs	r6, r6, #1
 80167b0:	3708      	adds	r7, #8
 80167b2:	2e00      	cmp	r6, #0
 80167b4:	d1f0      	bne.n	8016798 <_dtoa_r+0x338>
 80167b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80167ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167be:	f7f1 ff7d 	bl	80086bc <__aeabi_ddiv>
 80167c2:	e9cd 0100 	strd	r0, r1, [sp]
 80167c6:	e01a      	b.n	80167fe <_dtoa_r+0x39e>
 80167c8:	2502      	movs	r5, #2
 80167ca:	e7a3      	b.n	8016714 <_dtoa_r+0x2b4>
 80167cc:	f000 80a0 	beq.w	8016910 <_dtoa_r+0x4b0>
 80167d0:	f1ca 0600 	rsb	r6, sl, #0
 80167d4:	4b9f      	ldr	r3, [pc, #636]	; (8016a54 <_dtoa_r+0x5f4>)
 80167d6:	4fa0      	ldr	r7, [pc, #640]	; (8016a58 <_dtoa_r+0x5f8>)
 80167d8:	f006 020f 	and.w	r2, r6, #15
 80167dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167e8:	f7f1 fe3e 	bl	8008468 <__aeabi_dmul>
 80167ec:	e9cd 0100 	strd	r0, r1, [sp]
 80167f0:	1136      	asrs	r6, r6, #4
 80167f2:	2300      	movs	r3, #0
 80167f4:	2502      	movs	r5, #2
 80167f6:	2e00      	cmp	r6, #0
 80167f8:	d17f      	bne.n	80168fa <_dtoa_r+0x49a>
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d1e1      	bne.n	80167c2 <_dtoa_r+0x362>
 80167fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 8087 	beq.w	8016914 <_dtoa_r+0x4b4>
 8016806:	e9dd 6700 	ldrd	r6, r7, [sp]
 801680a:	2200      	movs	r2, #0
 801680c:	4b93      	ldr	r3, [pc, #588]	; (8016a5c <_dtoa_r+0x5fc>)
 801680e:	4630      	mov	r0, r6
 8016810:	4639      	mov	r1, r7
 8016812:	f7f2 f89b 	bl	800894c <__aeabi_dcmplt>
 8016816:	2800      	cmp	r0, #0
 8016818:	d07c      	beq.n	8016914 <_dtoa_r+0x4b4>
 801681a:	f1b9 0f00 	cmp.w	r9, #0
 801681e:	d079      	beq.n	8016914 <_dtoa_r+0x4b4>
 8016820:	9b02      	ldr	r3, [sp, #8]
 8016822:	2b00      	cmp	r3, #0
 8016824:	dd35      	ble.n	8016892 <_dtoa_r+0x432>
 8016826:	f10a 33ff 	add.w	r3, sl, #4294967295
 801682a:	9308      	str	r3, [sp, #32]
 801682c:	4639      	mov	r1, r7
 801682e:	2200      	movs	r2, #0
 8016830:	4b8b      	ldr	r3, [pc, #556]	; (8016a60 <_dtoa_r+0x600>)
 8016832:	4630      	mov	r0, r6
 8016834:	f7f1 fe18 	bl	8008468 <__aeabi_dmul>
 8016838:	e9cd 0100 	strd	r0, r1, [sp]
 801683c:	9f02      	ldr	r7, [sp, #8]
 801683e:	3501      	adds	r5, #1
 8016840:	4628      	mov	r0, r5
 8016842:	f7f1 fda7 	bl	8008394 <__aeabi_i2d>
 8016846:	e9dd 2300 	ldrd	r2, r3, [sp]
 801684a:	f7f1 fe0d 	bl	8008468 <__aeabi_dmul>
 801684e:	2200      	movs	r2, #0
 8016850:	4b84      	ldr	r3, [pc, #528]	; (8016a64 <_dtoa_r+0x604>)
 8016852:	f7f1 fc53 	bl	80080fc <__adddf3>
 8016856:	4605      	mov	r5, r0
 8016858:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801685c:	2f00      	cmp	r7, #0
 801685e:	d15d      	bne.n	801691c <_dtoa_r+0x4bc>
 8016860:	2200      	movs	r2, #0
 8016862:	4b81      	ldr	r3, [pc, #516]	; (8016a68 <_dtoa_r+0x608>)
 8016864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016868:	f7f1 fc46 	bl	80080f8 <__aeabi_dsub>
 801686c:	462a      	mov	r2, r5
 801686e:	4633      	mov	r3, r6
 8016870:	e9cd 0100 	strd	r0, r1, [sp]
 8016874:	f7f2 f888 	bl	8008988 <__aeabi_dcmpgt>
 8016878:	2800      	cmp	r0, #0
 801687a:	f040 8288 	bne.w	8016d8e <_dtoa_r+0x92e>
 801687e:	462a      	mov	r2, r5
 8016880:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016888:	f7f2 f860 	bl	800894c <__aeabi_dcmplt>
 801688c:	2800      	cmp	r0, #0
 801688e:	f040 827c 	bne.w	8016d8a <_dtoa_r+0x92a>
 8016892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016896:	e9cd 2300 	strd	r2, r3, [sp]
 801689a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801689c:	2b00      	cmp	r3, #0
 801689e:	f2c0 8150 	blt.w	8016b42 <_dtoa_r+0x6e2>
 80168a2:	f1ba 0f0e 	cmp.w	sl, #14
 80168a6:	f300 814c 	bgt.w	8016b42 <_dtoa_r+0x6e2>
 80168aa:	4b6a      	ldr	r3, [pc, #424]	; (8016a54 <_dtoa_r+0x5f4>)
 80168ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80168b0:	ed93 7b00 	vldr	d7, [r3]
 80168b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80168bc:	f280 80d8 	bge.w	8016a70 <_dtoa_r+0x610>
 80168c0:	f1b9 0f00 	cmp.w	r9, #0
 80168c4:	f300 80d4 	bgt.w	8016a70 <_dtoa_r+0x610>
 80168c8:	f040 825e 	bne.w	8016d88 <_dtoa_r+0x928>
 80168cc:	2200      	movs	r2, #0
 80168ce:	4b66      	ldr	r3, [pc, #408]	; (8016a68 <_dtoa_r+0x608>)
 80168d0:	ec51 0b17 	vmov	r0, r1, d7
 80168d4:	f7f1 fdc8 	bl	8008468 <__aeabi_dmul>
 80168d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168dc:	f7f2 f84a 	bl	8008974 <__aeabi_dcmpge>
 80168e0:	464f      	mov	r7, r9
 80168e2:	464e      	mov	r6, r9
 80168e4:	2800      	cmp	r0, #0
 80168e6:	f040 8234 	bne.w	8016d52 <_dtoa_r+0x8f2>
 80168ea:	2331      	movs	r3, #49	; 0x31
 80168ec:	f10b 0501 	add.w	r5, fp, #1
 80168f0:	f88b 3000 	strb.w	r3, [fp]
 80168f4:	f10a 0a01 	add.w	sl, sl, #1
 80168f8:	e22f      	b.n	8016d5a <_dtoa_r+0x8fa>
 80168fa:	07f2      	lsls	r2, r6, #31
 80168fc:	d505      	bpl.n	801690a <_dtoa_r+0x4aa>
 80168fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016902:	f7f1 fdb1 	bl	8008468 <__aeabi_dmul>
 8016906:	3501      	adds	r5, #1
 8016908:	2301      	movs	r3, #1
 801690a:	1076      	asrs	r6, r6, #1
 801690c:	3708      	adds	r7, #8
 801690e:	e772      	b.n	80167f6 <_dtoa_r+0x396>
 8016910:	2502      	movs	r5, #2
 8016912:	e774      	b.n	80167fe <_dtoa_r+0x39e>
 8016914:	f8cd a020 	str.w	sl, [sp, #32]
 8016918:	464f      	mov	r7, r9
 801691a:	e791      	b.n	8016840 <_dtoa_r+0x3e0>
 801691c:	4b4d      	ldr	r3, [pc, #308]	; (8016a54 <_dtoa_r+0x5f4>)
 801691e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016922:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016928:	2b00      	cmp	r3, #0
 801692a:	d047      	beq.n	80169bc <_dtoa_r+0x55c>
 801692c:	4602      	mov	r2, r0
 801692e:	460b      	mov	r3, r1
 8016930:	2000      	movs	r0, #0
 8016932:	494e      	ldr	r1, [pc, #312]	; (8016a6c <_dtoa_r+0x60c>)
 8016934:	f7f1 fec2 	bl	80086bc <__aeabi_ddiv>
 8016938:	462a      	mov	r2, r5
 801693a:	4633      	mov	r3, r6
 801693c:	f7f1 fbdc 	bl	80080f8 <__aeabi_dsub>
 8016940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016944:	465d      	mov	r5, fp
 8016946:	e9dd 0100 	ldrd	r0, r1, [sp]
 801694a:	f7f2 f83d 	bl	80089c8 <__aeabi_d2iz>
 801694e:	4606      	mov	r6, r0
 8016950:	f7f1 fd20 	bl	8008394 <__aeabi_i2d>
 8016954:	4602      	mov	r2, r0
 8016956:	460b      	mov	r3, r1
 8016958:	e9dd 0100 	ldrd	r0, r1, [sp]
 801695c:	f7f1 fbcc 	bl	80080f8 <__aeabi_dsub>
 8016960:	3630      	adds	r6, #48	; 0x30
 8016962:	f805 6b01 	strb.w	r6, [r5], #1
 8016966:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801696a:	e9cd 0100 	strd	r0, r1, [sp]
 801696e:	f7f1 ffed 	bl	800894c <__aeabi_dcmplt>
 8016972:	2800      	cmp	r0, #0
 8016974:	d163      	bne.n	8016a3e <_dtoa_r+0x5de>
 8016976:	e9dd 2300 	ldrd	r2, r3, [sp]
 801697a:	2000      	movs	r0, #0
 801697c:	4937      	ldr	r1, [pc, #220]	; (8016a5c <_dtoa_r+0x5fc>)
 801697e:	f7f1 fbbb 	bl	80080f8 <__aeabi_dsub>
 8016982:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016986:	f7f1 ffe1 	bl	800894c <__aeabi_dcmplt>
 801698a:	2800      	cmp	r0, #0
 801698c:	f040 80b7 	bne.w	8016afe <_dtoa_r+0x69e>
 8016990:	eba5 030b 	sub.w	r3, r5, fp
 8016994:	429f      	cmp	r7, r3
 8016996:	f77f af7c 	ble.w	8016892 <_dtoa_r+0x432>
 801699a:	2200      	movs	r2, #0
 801699c:	4b30      	ldr	r3, [pc, #192]	; (8016a60 <_dtoa_r+0x600>)
 801699e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80169a2:	f7f1 fd61 	bl	8008468 <__aeabi_dmul>
 80169a6:	2200      	movs	r2, #0
 80169a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80169ac:	4b2c      	ldr	r3, [pc, #176]	; (8016a60 <_dtoa_r+0x600>)
 80169ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169b2:	f7f1 fd59 	bl	8008468 <__aeabi_dmul>
 80169b6:	e9cd 0100 	strd	r0, r1, [sp]
 80169ba:	e7c4      	b.n	8016946 <_dtoa_r+0x4e6>
 80169bc:	462a      	mov	r2, r5
 80169be:	4633      	mov	r3, r6
 80169c0:	f7f1 fd52 	bl	8008468 <__aeabi_dmul>
 80169c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80169c8:	eb0b 0507 	add.w	r5, fp, r7
 80169cc:	465e      	mov	r6, fp
 80169ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169d2:	f7f1 fff9 	bl	80089c8 <__aeabi_d2iz>
 80169d6:	4607      	mov	r7, r0
 80169d8:	f7f1 fcdc 	bl	8008394 <__aeabi_i2d>
 80169dc:	3730      	adds	r7, #48	; 0x30
 80169de:	4602      	mov	r2, r0
 80169e0:	460b      	mov	r3, r1
 80169e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169e6:	f7f1 fb87 	bl	80080f8 <__aeabi_dsub>
 80169ea:	f806 7b01 	strb.w	r7, [r6], #1
 80169ee:	42ae      	cmp	r6, r5
 80169f0:	e9cd 0100 	strd	r0, r1, [sp]
 80169f4:	f04f 0200 	mov.w	r2, #0
 80169f8:	d126      	bne.n	8016a48 <_dtoa_r+0x5e8>
 80169fa:	4b1c      	ldr	r3, [pc, #112]	; (8016a6c <_dtoa_r+0x60c>)
 80169fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016a00:	f7f1 fb7c 	bl	80080fc <__adddf3>
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a0c:	f7f1 ffbc 	bl	8008988 <__aeabi_dcmpgt>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d174      	bne.n	8016afe <_dtoa_r+0x69e>
 8016a14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a18:	2000      	movs	r0, #0
 8016a1a:	4914      	ldr	r1, [pc, #80]	; (8016a6c <_dtoa_r+0x60c>)
 8016a1c:	f7f1 fb6c 	bl	80080f8 <__aeabi_dsub>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a28:	f7f1 ff90 	bl	800894c <__aeabi_dcmplt>
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	f43f af30 	beq.w	8016892 <_dtoa_r+0x432>
 8016a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016a36:	2b30      	cmp	r3, #48	; 0x30
 8016a38:	f105 32ff 	add.w	r2, r5, #4294967295
 8016a3c:	d002      	beq.n	8016a44 <_dtoa_r+0x5e4>
 8016a3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016a42:	e04a      	b.n	8016ada <_dtoa_r+0x67a>
 8016a44:	4615      	mov	r5, r2
 8016a46:	e7f4      	b.n	8016a32 <_dtoa_r+0x5d2>
 8016a48:	4b05      	ldr	r3, [pc, #20]	; (8016a60 <_dtoa_r+0x600>)
 8016a4a:	f7f1 fd0d 	bl	8008468 <__aeabi_dmul>
 8016a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8016a52:	e7bc      	b.n	80169ce <_dtoa_r+0x56e>
 8016a54:	08019a18 	.word	0x08019a18
 8016a58:	080199f0 	.word	0x080199f0
 8016a5c:	3ff00000 	.word	0x3ff00000
 8016a60:	40240000 	.word	0x40240000
 8016a64:	401c0000 	.word	0x401c0000
 8016a68:	40140000 	.word	0x40140000
 8016a6c:	3fe00000 	.word	0x3fe00000
 8016a70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a74:	465d      	mov	r5, fp
 8016a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	4639      	mov	r1, r7
 8016a7e:	f7f1 fe1d 	bl	80086bc <__aeabi_ddiv>
 8016a82:	f7f1 ffa1 	bl	80089c8 <__aeabi_d2iz>
 8016a86:	4680      	mov	r8, r0
 8016a88:	f7f1 fc84 	bl	8008394 <__aeabi_i2d>
 8016a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a90:	f7f1 fcea 	bl	8008468 <__aeabi_dmul>
 8016a94:	4602      	mov	r2, r0
 8016a96:	460b      	mov	r3, r1
 8016a98:	4630      	mov	r0, r6
 8016a9a:	4639      	mov	r1, r7
 8016a9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016aa0:	f7f1 fb2a 	bl	80080f8 <__aeabi_dsub>
 8016aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8016aa8:	eba5 060b 	sub.w	r6, r5, fp
 8016aac:	45b1      	cmp	r9, r6
 8016aae:	4602      	mov	r2, r0
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	d139      	bne.n	8016b28 <_dtoa_r+0x6c8>
 8016ab4:	f7f1 fb22 	bl	80080fc <__adddf3>
 8016ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016abc:	4606      	mov	r6, r0
 8016abe:	460f      	mov	r7, r1
 8016ac0:	f7f1 ff62 	bl	8008988 <__aeabi_dcmpgt>
 8016ac4:	b9c8      	cbnz	r0, 8016afa <_dtoa_r+0x69a>
 8016ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016aca:	4630      	mov	r0, r6
 8016acc:	4639      	mov	r1, r7
 8016ace:	f7f1 ff33 	bl	8008938 <__aeabi_dcmpeq>
 8016ad2:	b110      	cbz	r0, 8016ada <_dtoa_r+0x67a>
 8016ad4:	f018 0f01 	tst.w	r8, #1
 8016ad8:	d10f      	bne.n	8016afa <_dtoa_r+0x69a>
 8016ada:	9904      	ldr	r1, [sp, #16]
 8016adc:	4620      	mov	r0, r4
 8016ade:	f001 f819 	bl	8017b14 <_Bfree>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ae6:	702b      	strb	r3, [r5, #0]
 8016ae8:	f10a 0301 	add.w	r3, sl, #1
 8016aec:	6013      	str	r3, [r2, #0]
 8016aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	f000 8241 	beq.w	8016f78 <_dtoa_r+0xb18>
 8016af6:	601d      	str	r5, [r3, #0]
 8016af8:	e23e      	b.n	8016f78 <_dtoa_r+0xb18>
 8016afa:	f8cd a020 	str.w	sl, [sp, #32]
 8016afe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016b02:	2a39      	cmp	r2, #57	; 0x39
 8016b04:	f105 33ff 	add.w	r3, r5, #4294967295
 8016b08:	d108      	bne.n	8016b1c <_dtoa_r+0x6bc>
 8016b0a:	459b      	cmp	fp, r3
 8016b0c:	d10a      	bne.n	8016b24 <_dtoa_r+0x6c4>
 8016b0e:	9b08      	ldr	r3, [sp, #32]
 8016b10:	3301      	adds	r3, #1
 8016b12:	9308      	str	r3, [sp, #32]
 8016b14:	2330      	movs	r3, #48	; 0x30
 8016b16:	f88b 3000 	strb.w	r3, [fp]
 8016b1a:	465b      	mov	r3, fp
 8016b1c:	781a      	ldrb	r2, [r3, #0]
 8016b1e:	3201      	adds	r2, #1
 8016b20:	701a      	strb	r2, [r3, #0]
 8016b22:	e78c      	b.n	8016a3e <_dtoa_r+0x5de>
 8016b24:	461d      	mov	r5, r3
 8016b26:	e7ea      	b.n	8016afe <_dtoa_r+0x69e>
 8016b28:	2200      	movs	r2, #0
 8016b2a:	4b9b      	ldr	r3, [pc, #620]	; (8016d98 <_dtoa_r+0x938>)
 8016b2c:	f7f1 fc9c 	bl	8008468 <__aeabi_dmul>
 8016b30:	2200      	movs	r2, #0
 8016b32:	2300      	movs	r3, #0
 8016b34:	4606      	mov	r6, r0
 8016b36:	460f      	mov	r7, r1
 8016b38:	f7f1 fefe 	bl	8008938 <__aeabi_dcmpeq>
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	d09a      	beq.n	8016a76 <_dtoa_r+0x616>
 8016b40:	e7cb      	b.n	8016ada <_dtoa_r+0x67a>
 8016b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b44:	2a00      	cmp	r2, #0
 8016b46:	f000 808b 	beq.w	8016c60 <_dtoa_r+0x800>
 8016b4a:	9a06      	ldr	r2, [sp, #24]
 8016b4c:	2a01      	cmp	r2, #1
 8016b4e:	dc6e      	bgt.n	8016c2e <_dtoa_r+0x7ce>
 8016b50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b52:	2a00      	cmp	r2, #0
 8016b54:	d067      	beq.n	8016c26 <_dtoa_r+0x7c6>
 8016b56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016b5a:	9f07      	ldr	r7, [sp, #28]
 8016b5c:	9d05      	ldr	r5, [sp, #20]
 8016b5e:	9a05      	ldr	r2, [sp, #20]
 8016b60:	2101      	movs	r1, #1
 8016b62:	441a      	add	r2, r3
 8016b64:	4620      	mov	r0, r4
 8016b66:	9205      	str	r2, [sp, #20]
 8016b68:	4498      	add	r8, r3
 8016b6a:	f001 f8b1 	bl	8017cd0 <__i2b>
 8016b6e:	4606      	mov	r6, r0
 8016b70:	2d00      	cmp	r5, #0
 8016b72:	dd0c      	ble.n	8016b8e <_dtoa_r+0x72e>
 8016b74:	f1b8 0f00 	cmp.w	r8, #0
 8016b78:	dd09      	ble.n	8016b8e <_dtoa_r+0x72e>
 8016b7a:	4545      	cmp	r5, r8
 8016b7c:	9a05      	ldr	r2, [sp, #20]
 8016b7e:	462b      	mov	r3, r5
 8016b80:	bfa8      	it	ge
 8016b82:	4643      	movge	r3, r8
 8016b84:	1ad2      	subs	r2, r2, r3
 8016b86:	9205      	str	r2, [sp, #20]
 8016b88:	1aed      	subs	r5, r5, r3
 8016b8a:	eba8 0803 	sub.w	r8, r8, r3
 8016b8e:	9b07      	ldr	r3, [sp, #28]
 8016b90:	b1eb      	cbz	r3, 8016bce <_dtoa_r+0x76e>
 8016b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d067      	beq.n	8016c68 <_dtoa_r+0x808>
 8016b98:	b18f      	cbz	r7, 8016bbe <_dtoa_r+0x75e>
 8016b9a:	4631      	mov	r1, r6
 8016b9c:	463a      	mov	r2, r7
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f001 f936 	bl	8017e10 <__pow5mult>
 8016ba4:	9a04      	ldr	r2, [sp, #16]
 8016ba6:	4601      	mov	r1, r0
 8016ba8:	4606      	mov	r6, r0
 8016baa:	4620      	mov	r0, r4
 8016bac:	f001 f899 	bl	8017ce2 <__multiply>
 8016bb0:	9904      	ldr	r1, [sp, #16]
 8016bb2:	9008      	str	r0, [sp, #32]
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f000 ffad 	bl	8017b14 <_Bfree>
 8016bba:	9b08      	ldr	r3, [sp, #32]
 8016bbc:	9304      	str	r3, [sp, #16]
 8016bbe:	9b07      	ldr	r3, [sp, #28]
 8016bc0:	1bda      	subs	r2, r3, r7
 8016bc2:	d004      	beq.n	8016bce <_dtoa_r+0x76e>
 8016bc4:	9904      	ldr	r1, [sp, #16]
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f001 f922 	bl	8017e10 <__pow5mult>
 8016bcc:	9004      	str	r0, [sp, #16]
 8016bce:	2101      	movs	r1, #1
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f001 f87d 	bl	8017cd0 <__i2b>
 8016bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd8:	4607      	mov	r7, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f000 81d0 	beq.w	8016f80 <_dtoa_r+0xb20>
 8016be0:	461a      	mov	r2, r3
 8016be2:	4601      	mov	r1, r0
 8016be4:	4620      	mov	r0, r4
 8016be6:	f001 f913 	bl	8017e10 <__pow5mult>
 8016bea:	9b06      	ldr	r3, [sp, #24]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	4607      	mov	r7, r0
 8016bf0:	dc40      	bgt.n	8016c74 <_dtoa_r+0x814>
 8016bf2:	9b00      	ldr	r3, [sp, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d139      	bne.n	8016c6c <_dtoa_r+0x80c>
 8016bf8:	9b01      	ldr	r3, [sp, #4]
 8016bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d136      	bne.n	8016c70 <_dtoa_r+0x810>
 8016c02:	9b01      	ldr	r3, [sp, #4]
 8016c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c08:	0d1b      	lsrs	r3, r3, #20
 8016c0a:	051b      	lsls	r3, r3, #20
 8016c0c:	b12b      	cbz	r3, 8016c1a <_dtoa_r+0x7ba>
 8016c0e:	9b05      	ldr	r3, [sp, #20]
 8016c10:	3301      	adds	r3, #1
 8016c12:	9305      	str	r3, [sp, #20]
 8016c14:	f108 0801 	add.w	r8, r8, #1
 8016c18:	2301      	movs	r3, #1
 8016c1a:	9307      	str	r3, [sp, #28]
 8016c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d12a      	bne.n	8016c78 <_dtoa_r+0x818>
 8016c22:	2001      	movs	r0, #1
 8016c24:	e030      	b.n	8016c88 <_dtoa_r+0x828>
 8016c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016c2c:	e795      	b.n	8016b5a <_dtoa_r+0x6fa>
 8016c2e:	9b07      	ldr	r3, [sp, #28]
 8016c30:	f109 37ff 	add.w	r7, r9, #4294967295
 8016c34:	42bb      	cmp	r3, r7
 8016c36:	bfbf      	itttt	lt
 8016c38:	9b07      	ldrlt	r3, [sp, #28]
 8016c3a:	9707      	strlt	r7, [sp, #28]
 8016c3c:	1afa      	sublt	r2, r7, r3
 8016c3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016c40:	bfbb      	ittet	lt
 8016c42:	189b      	addlt	r3, r3, r2
 8016c44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016c46:	1bdf      	subge	r7, r3, r7
 8016c48:	2700      	movlt	r7, #0
 8016c4a:	f1b9 0f00 	cmp.w	r9, #0
 8016c4e:	bfb5      	itete	lt
 8016c50:	9b05      	ldrlt	r3, [sp, #20]
 8016c52:	9d05      	ldrge	r5, [sp, #20]
 8016c54:	eba3 0509 	sublt.w	r5, r3, r9
 8016c58:	464b      	movge	r3, r9
 8016c5a:	bfb8      	it	lt
 8016c5c:	2300      	movlt	r3, #0
 8016c5e:	e77e      	b.n	8016b5e <_dtoa_r+0x6fe>
 8016c60:	9f07      	ldr	r7, [sp, #28]
 8016c62:	9d05      	ldr	r5, [sp, #20]
 8016c64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016c66:	e783      	b.n	8016b70 <_dtoa_r+0x710>
 8016c68:	9a07      	ldr	r2, [sp, #28]
 8016c6a:	e7ab      	b.n	8016bc4 <_dtoa_r+0x764>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	e7d4      	b.n	8016c1a <_dtoa_r+0x7ba>
 8016c70:	9b00      	ldr	r3, [sp, #0]
 8016c72:	e7d2      	b.n	8016c1a <_dtoa_r+0x7ba>
 8016c74:	2300      	movs	r3, #0
 8016c76:	9307      	str	r3, [sp, #28]
 8016c78:	693b      	ldr	r3, [r7, #16]
 8016c7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016c7e:	6918      	ldr	r0, [r3, #16]
 8016c80:	f000 ffd8 	bl	8017c34 <__hi0bits>
 8016c84:	f1c0 0020 	rsb	r0, r0, #32
 8016c88:	4440      	add	r0, r8
 8016c8a:	f010 001f 	ands.w	r0, r0, #31
 8016c8e:	d047      	beq.n	8016d20 <_dtoa_r+0x8c0>
 8016c90:	f1c0 0320 	rsb	r3, r0, #32
 8016c94:	2b04      	cmp	r3, #4
 8016c96:	dd3b      	ble.n	8016d10 <_dtoa_r+0x8b0>
 8016c98:	9b05      	ldr	r3, [sp, #20]
 8016c9a:	f1c0 001c 	rsb	r0, r0, #28
 8016c9e:	4403      	add	r3, r0
 8016ca0:	9305      	str	r3, [sp, #20]
 8016ca2:	4405      	add	r5, r0
 8016ca4:	4480      	add	r8, r0
 8016ca6:	9b05      	ldr	r3, [sp, #20]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	dd05      	ble.n	8016cb8 <_dtoa_r+0x858>
 8016cac:	461a      	mov	r2, r3
 8016cae:	9904      	ldr	r1, [sp, #16]
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	f001 f8fb 	bl	8017eac <__lshift>
 8016cb6:	9004      	str	r0, [sp, #16]
 8016cb8:	f1b8 0f00 	cmp.w	r8, #0
 8016cbc:	dd05      	ble.n	8016cca <_dtoa_r+0x86a>
 8016cbe:	4639      	mov	r1, r7
 8016cc0:	4642      	mov	r2, r8
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	f001 f8f2 	bl	8017eac <__lshift>
 8016cc8:	4607      	mov	r7, r0
 8016cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ccc:	b353      	cbz	r3, 8016d24 <_dtoa_r+0x8c4>
 8016cce:	4639      	mov	r1, r7
 8016cd0:	9804      	ldr	r0, [sp, #16]
 8016cd2:	f001 f93f 	bl	8017f54 <__mcmp>
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	da24      	bge.n	8016d24 <_dtoa_r+0x8c4>
 8016cda:	2300      	movs	r3, #0
 8016cdc:	220a      	movs	r2, #10
 8016cde:	9904      	ldr	r1, [sp, #16]
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f000 ff2e 	bl	8017b42 <__multadd>
 8016ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ce8:	9004      	str	r0, [sp, #16]
 8016cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	f000 814d 	beq.w	8016f8e <_dtoa_r+0xb2e>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	4631      	mov	r1, r6
 8016cf8:	220a      	movs	r2, #10
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f000 ff21 	bl	8017b42 <__multadd>
 8016d00:	9b02      	ldr	r3, [sp, #8]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	4606      	mov	r6, r0
 8016d06:	dc4f      	bgt.n	8016da8 <_dtoa_r+0x948>
 8016d08:	9b06      	ldr	r3, [sp, #24]
 8016d0a:	2b02      	cmp	r3, #2
 8016d0c:	dd4c      	ble.n	8016da8 <_dtoa_r+0x948>
 8016d0e:	e011      	b.n	8016d34 <_dtoa_r+0x8d4>
 8016d10:	d0c9      	beq.n	8016ca6 <_dtoa_r+0x846>
 8016d12:	9a05      	ldr	r2, [sp, #20]
 8016d14:	331c      	adds	r3, #28
 8016d16:	441a      	add	r2, r3
 8016d18:	9205      	str	r2, [sp, #20]
 8016d1a:	441d      	add	r5, r3
 8016d1c:	4498      	add	r8, r3
 8016d1e:	e7c2      	b.n	8016ca6 <_dtoa_r+0x846>
 8016d20:	4603      	mov	r3, r0
 8016d22:	e7f6      	b.n	8016d12 <_dtoa_r+0x8b2>
 8016d24:	f1b9 0f00 	cmp.w	r9, #0
 8016d28:	dc38      	bgt.n	8016d9c <_dtoa_r+0x93c>
 8016d2a:	9b06      	ldr	r3, [sp, #24]
 8016d2c:	2b02      	cmp	r3, #2
 8016d2e:	dd35      	ble.n	8016d9c <_dtoa_r+0x93c>
 8016d30:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d34:	9b02      	ldr	r3, [sp, #8]
 8016d36:	b963      	cbnz	r3, 8016d52 <_dtoa_r+0x8f2>
 8016d38:	4639      	mov	r1, r7
 8016d3a:	2205      	movs	r2, #5
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f000 ff00 	bl	8017b42 <__multadd>
 8016d42:	4601      	mov	r1, r0
 8016d44:	4607      	mov	r7, r0
 8016d46:	9804      	ldr	r0, [sp, #16]
 8016d48:	f001 f904 	bl	8017f54 <__mcmp>
 8016d4c:	2800      	cmp	r0, #0
 8016d4e:	f73f adcc 	bgt.w	80168ea <_dtoa_r+0x48a>
 8016d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d54:	465d      	mov	r5, fp
 8016d56:	ea6f 0a03 	mvn.w	sl, r3
 8016d5a:	f04f 0900 	mov.w	r9, #0
 8016d5e:	4639      	mov	r1, r7
 8016d60:	4620      	mov	r0, r4
 8016d62:	f000 fed7 	bl	8017b14 <_Bfree>
 8016d66:	2e00      	cmp	r6, #0
 8016d68:	f43f aeb7 	beq.w	8016ada <_dtoa_r+0x67a>
 8016d6c:	f1b9 0f00 	cmp.w	r9, #0
 8016d70:	d005      	beq.n	8016d7e <_dtoa_r+0x91e>
 8016d72:	45b1      	cmp	r9, r6
 8016d74:	d003      	beq.n	8016d7e <_dtoa_r+0x91e>
 8016d76:	4649      	mov	r1, r9
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 fecb 	bl	8017b14 <_Bfree>
 8016d7e:	4631      	mov	r1, r6
 8016d80:	4620      	mov	r0, r4
 8016d82:	f000 fec7 	bl	8017b14 <_Bfree>
 8016d86:	e6a8      	b.n	8016ada <_dtoa_r+0x67a>
 8016d88:	2700      	movs	r7, #0
 8016d8a:	463e      	mov	r6, r7
 8016d8c:	e7e1      	b.n	8016d52 <_dtoa_r+0x8f2>
 8016d8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016d92:	463e      	mov	r6, r7
 8016d94:	e5a9      	b.n	80168ea <_dtoa_r+0x48a>
 8016d96:	bf00      	nop
 8016d98:	40240000 	.word	0x40240000
 8016d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	f000 80fa 	beq.w	8016f9c <_dtoa_r+0xb3c>
 8016da8:	2d00      	cmp	r5, #0
 8016daa:	dd05      	ble.n	8016db8 <_dtoa_r+0x958>
 8016dac:	4631      	mov	r1, r6
 8016dae:	462a      	mov	r2, r5
 8016db0:	4620      	mov	r0, r4
 8016db2:	f001 f87b 	bl	8017eac <__lshift>
 8016db6:	4606      	mov	r6, r0
 8016db8:	9b07      	ldr	r3, [sp, #28]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d04c      	beq.n	8016e58 <_dtoa_r+0x9f8>
 8016dbe:	6871      	ldr	r1, [r6, #4]
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f000 fe73 	bl	8017aac <_Balloc>
 8016dc6:	6932      	ldr	r2, [r6, #16]
 8016dc8:	3202      	adds	r2, #2
 8016dca:	4605      	mov	r5, r0
 8016dcc:	0092      	lsls	r2, r2, #2
 8016dce:	f106 010c 	add.w	r1, r6, #12
 8016dd2:	300c      	adds	r0, #12
 8016dd4:	f7fd fb72 	bl	80144bc <memcpy>
 8016dd8:	2201      	movs	r2, #1
 8016dda:	4629      	mov	r1, r5
 8016ddc:	4620      	mov	r0, r4
 8016dde:	f001 f865 	bl	8017eac <__lshift>
 8016de2:	9b00      	ldr	r3, [sp, #0]
 8016de4:	f8cd b014 	str.w	fp, [sp, #20]
 8016de8:	f003 0301 	and.w	r3, r3, #1
 8016dec:	46b1      	mov	r9, r6
 8016dee:	9307      	str	r3, [sp, #28]
 8016df0:	4606      	mov	r6, r0
 8016df2:	4639      	mov	r1, r7
 8016df4:	9804      	ldr	r0, [sp, #16]
 8016df6:	f7ff faa5 	bl	8016344 <quorem>
 8016dfa:	4649      	mov	r1, r9
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016e02:	9804      	ldr	r0, [sp, #16]
 8016e04:	f001 f8a6 	bl	8017f54 <__mcmp>
 8016e08:	4632      	mov	r2, r6
 8016e0a:	9000      	str	r0, [sp, #0]
 8016e0c:	4639      	mov	r1, r7
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f001 f8ba 	bl	8017f88 <__mdiff>
 8016e14:	68c3      	ldr	r3, [r0, #12]
 8016e16:	4602      	mov	r2, r0
 8016e18:	bb03      	cbnz	r3, 8016e5c <_dtoa_r+0x9fc>
 8016e1a:	4601      	mov	r1, r0
 8016e1c:	9008      	str	r0, [sp, #32]
 8016e1e:	9804      	ldr	r0, [sp, #16]
 8016e20:	f001 f898 	bl	8017f54 <__mcmp>
 8016e24:	9a08      	ldr	r2, [sp, #32]
 8016e26:	4603      	mov	r3, r0
 8016e28:	4611      	mov	r1, r2
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	9308      	str	r3, [sp, #32]
 8016e2e:	f000 fe71 	bl	8017b14 <_Bfree>
 8016e32:	9b08      	ldr	r3, [sp, #32]
 8016e34:	b9a3      	cbnz	r3, 8016e60 <_dtoa_r+0xa00>
 8016e36:	9a06      	ldr	r2, [sp, #24]
 8016e38:	b992      	cbnz	r2, 8016e60 <_dtoa_r+0xa00>
 8016e3a:	9a07      	ldr	r2, [sp, #28]
 8016e3c:	b982      	cbnz	r2, 8016e60 <_dtoa_r+0xa00>
 8016e3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e42:	d029      	beq.n	8016e98 <_dtoa_r+0xa38>
 8016e44:	9b00      	ldr	r3, [sp, #0]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	dd01      	ble.n	8016e4e <_dtoa_r+0x9ee>
 8016e4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016e4e:	9b05      	ldr	r3, [sp, #20]
 8016e50:	1c5d      	adds	r5, r3, #1
 8016e52:	f883 8000 	strb.w	r8, [r3]
 8016e56:	e782      	b.n	8016d5e <_dtoa_r+0x8fe>
 8016e58:	4630      	mov	r0, r6
 8016e5a:	e7c2      	b.n	8016de2 <_dtoa_r+0x982>
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	e7e3      	b.n	8016e28 <_dtoa_r+0x9c8>
 8016e60:	9a00      	ldr	r2, [sp, #0]
 8016e62:	2a00      	cmp	r2, #0
 8016e64:	db04      	blt.n	8016e70 <_dtoa_r+0xa10>
 8016e66:	d125      	bne.n	8016eb4 <_dtoa_r+0xa54>
 8016e68:	9a06      	ldr	r2, [sp, #24]
 8016e6a:	bb1a      	cbnz	r2, 8016eb4 <_dtoa_r+0xa54>
 8016e6c:	9a07      	ldr	r2, [sp, #28]
 8016e6e:	bb0a      	cbnz	r2, 8016eb4 <_dtoa_r+0xa54>
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	ddec      	ble.n	8016e4e <_dtoa_r+0x9ee>
 8016e74:	2201      	movs	r2, #1
 8016e76:	9904      	ldr	r1, [sp, #16]
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f001 f817 	bl	8017eac <__lshift>
 8016e7e:	4639      	mov	r1, r7
 8016e80:	9004      	str	r0, [sp, #16]
 8016e82:	f001 f867 	bl	8017f54 <__mcmp>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	dc03      	bgt.n	8016e92 <_dtoa_r+0xa32>
 8016e8a:	d1e0      	bne.n	8016e4e <_dtoa_r+0x9ee>
 8016e8c:	f018 0f01 	tst.w	r8, #1
 8016e90:	d0dd      	beq.n	8016e4e <_dtoa_r+0x9ee>
 8016e92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e96:	d1d8      	bne.n	8016e4a <_dtoa_r+0x9ea>
 8016e98:	9b05      	ldr	r3, [sp, #20]
 8016e9a:	9a05      	ldr	r2, [sp, #20]
 8016e9c:	1c5d      	adds	r5, r3, #1
 8016e9e:	2339      	movs	r3, #57	; 0x39
 8016ea0:	7013      	strb	r3, [r2, #0]
 8016ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016ea6:	2b39      	cmp	r3, #57	; 0x39
 8016ea8:	f105 32ff 	add.w	r2, r5, #4294967295
 8016eac:	d04f      	beq.n	8016f4e <_dtoa_r+0xaee>
 8016eae:	3301      	adds	r3, #1
 8016eb0:	7013      	strb	r3, [r2, #0]
 8016eb2:	e754      	b.n	8016d5e <_dtoa_r+0x8fe>
 8016eb4:	9a05      	ldr	r2, [sp, #20]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	f102 0501 	add.w	r5, r2, #1
 8016ebc:	dd06      	ble.n	8016ecc <_dtoa_r+0xa6c>
 8016ebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016ec2:	d0e9      	beq.n	8016e98 <_dtoa_r+0xa38>
 8016ec4:	f108 0801 	add.w	r8, r8, #1
 8016ec8:	9b05      	ldr	r3, [sp, #20]
 8016eca:	e7c2      	b.n	8016e52 <_dtoa_r+0x9f2>
 8016ecc:	9a02      	ldr	r2, [sp, #8]
 8016ece:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016ed2:	eba5 030b 	sub.w	r3, r5, fp
 8016ed6:	4293      	cmp	r3, r2
 8016ed8:	d021      	beq.n	8016f1e <_dtoa_r+0xabe>
 8016eda:	2300      	movs	r3, #0
 8016edc:	220a      	movs	r2, #10
 8016ede:	9904      	ldr	r1, [sp, #16]
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f000 fe2e 	bl	8017b42 <__multadd>
 8016ee6:	45b1      	cmp	r9, r6
 8016ee8:	9004      	str	r0, [sp, #16]
 8016eea:	f04f 0300 	mov.w	r3, #0
 8016eee:	f04f 020a 	mov.w	r2, #10
 8016ef2:	4649      	mov	r1, r9
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	d105      	bne.n	8016f04 <_dtoa_r+0xaa4>
 8016ef8:	f000 fe23 	bl	8017b42 <__multadd>
 8016efc:	4681      	mov	r9, r0
 8016efe:	4606      	mov	r6, r0
 8016f00:	9505      	str	r5, [sp, #20]
 8016f02:	e776      	b.n	8016df2 <_dtoa_r+0x992>
 8016f04:	f000 fe1d 	bl	8017b42 <__multadd>
 8016f08:	4631      	mov	r1, r6
 8016f0a:	4681      	mov	r9, r0
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	220a      	movs	r2, #10
 8016f10:	4620      	mov	r0, r4
 8016f12:	f000 fe16 	bl	8017b42 <__multadd>
 8016f16:	4606      	mov	r6, r0
 8016f18:	e7f2      	b.n	8016f00 <_dtoa_r+0xaa0>
 8016f1a:	f04f 0900 	mov.w	r9, #0
 8016f1e:	2201      	movs	r2, #1
 8016f20:	9904      	ldr	r1, [sp, #16]
 8016f22:	4620      	mov	r0, r4
 8016f24:	f000 ffc2 	bl	8017eac <__lshift>
 8016f28:	4639      	mov	r1, r7
 8016f2a:	9004      	str	r0, [sp, #16]
 8016f2c:	f001 f812 	bl	8017f54 <__mcmp>
 8016f30:	2800      	cmp	r0, #0
 8016f32:	dcb6      	bgt.n	8016ea2 <_dtoa_r+0xa42>
 8016f34:	d102      	bne.n	8016f3c <_dtoa_r+0xadc>
 8016f36:	f018 0f01 	tst.w	r8, #1
 8016f3a:	d1b2      	bne.n	8016ea2 <_dtoa_r+0xa42>
 8016f3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f40:	2b30      	cmp	r3, #48	; 0x30
 8016f42:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f46:	f47f af0a 	bne.w	8016d5e <_dtoa_r+0x8fe>
 8016f4a:	4615      	mov	r5, r2
 8016f4c:	e7f6      	b.n	8016f3c <_dtoa_r+0xadc>
 8016f4e:	4593      	cmp	fp, r2
 8016f50:	d105      	bne.n	8016f5e <_dtoa_r+0xafe>
 8016f52:	2331      	movs	r3, #49	; 0x31
 8016f54:	f10a 0a01 	add.w	sl, sl, #1
 8016f58:	f88b 3000 	strb.w	r3, [fp]
 8016f5c:	e6ff      	b.n	8016d5e <_dtoa_r+0x8fe>
 8016f5e:	4615      	mov	r5, r2
 8016f60:	e79f      	b.n	8016ea2 <_dtoa_r+0xa42>
 8016f62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016fc8 <_dtoa_r+0xb68>
 8016f66:	e007      	b.n	8016f78 <_dtoa_r+0xb18>
 8016f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016fcc <_dtoa_r+0xb6c>
 8016f6e:	b11b      	cbz	r3, 8016f78 <_dtoa_r+0xb18>
 8016f70:	f10b 0308 	add.w	r3, fp, #8
 8016f74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f76:	6013      	str	r3, [r2, #0]
 8016f78:	4658      	mov	r0, fp
 8016f7a:	b017      	add	sp, #92	; 0x5c
 8016f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f80:	9b06      	ldr	r3, [sp, #24]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	f77f ae35 	ble.w	8016bf2 <_dtoa_r+0x792>
 8016f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f8a:	9307      	str	r3, [sp, #28]
 8016f8c:	e649      	b.n	8016c22 <_dtoa_r+0x7c2>
 8016f8e:	9b02      	ldr	r3, [sp, #8]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	dc03      	bgt.n	8016f9c <_dtoa_r+0xb3c>
 8016f94:	9b06      	ldr	r3, [sp, #24]
 8016f96:	2b02      	cmp	r3, #2
 8016f98:	f73f aecc 	bgt.w	8016d34 <_dtoa_r+0x8d4>
 8016f9c:	465d      	mov	r5, fp
 8016f9e:	4639      	mov	r1, r7
 8016fa0:	9804      	ldr	r0, [sp, #16]
 8016fa2:	f7ff f9cf 	bl	8016344 <quorem>
 8016fa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016faa:	f805 8b01 	strb.w	r8, [r5], #1
 8016fae:	9a02      	ldr	r2, [sp, #8]
 8016fb0:	eba5 030b 	sub.w	r3, r5, fp
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	ddb0      	ble.n	8016f1a <_dtoa_r+0xaba>
 8016fb8:	2300      	movs	r3, #0
 8016fba:	220a      	movs	r2, #10
 8016fbc:	9904      	ldr	r1, [sp, #16]
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f000 fdbf 	bl	8017b42 <__multadd>
 8016fc4:	9004      	str	r0, [sp, #16]
 8016fc6:	e7ea      	b.n	8016f9e <_dtoa_r+0xb3e>
 8016fc8:	08019b13 	.word	0x08019b13
 8016fcc:	08019970 	.word	0x08019970

08016fd0 <__sflush_r>:
 8016fd0:	898a      	ldrh	r2, [r1, #12]
 8016fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd6:	4605      	mov	r5, r0
 8016fd8:	0710      	lsls	r0, r2, #28
 8016fda:	460c      	mov	r4, r1
 8016fdc:	d458      	bmi.n	8017090 <__sflush_r+0xc0>
 8016fde:	684b      	ldr	r3, [r1, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	dc05      	bgt.n	8016ff0 <__sflush_r+0x20>
 8016fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	dc02      	bgt.n	8016ff0 <__sflush_r+0x20>
 8016fea:	2000      	movs	r0, #0
 8016fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ff2:	2e00      	cmp	r6, #0
 8016ff4:	d0f9      	beq.n	8016fea <__sflush_r+0x1a>
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ffc:	682f      	ldr	r7, [r5, #0]
 8016ffe:	6a21      	ldr	r1, [r4, #32]
 8017000:	602b      	str	r3, [r5, #0]
 8017002:	d032      	beq.n	801706a <__sflush_r+0x9a>
 8017004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017006:	89a3      	ldrh	r3, [r4, #12]
 8017008:	075a      	lsls	r2, r3, #29
 801700a:	d505      	bpl.n	8017018 <__sflush_r+0x48>
 801700c:	6863      	ldr	r3, [r4, #4]
 801700e:	1ac0      	subs	r0, r0, r3
 8017010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017012:	b10b      	cbz	r3, 8017018 <__sflush_r+0x48>
 8017014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017016:	1ac0      	subs	r0, r0, r3
 8017018:	2300      	movs	r3, #0
 801701a:	4602      	mov	r2, r0
 801701c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801701e:	6a21      	ldr	r1, [r4, #32]
 8017020:	4628      	mov	r0, r5
 8017022:	47b0      	blx	r6
 8017024:	1c43      	adds	r3, r0, #1
 8017026:	89a3      	ldrh	r3, [r4, #12]
 8017028:	d106      	bne.n	8017038 <__sflush_r+0x68>
 801702a:	6829      	ldr	r1, [r5, #0]
 801702c:	291d      	cmp	r1, #29
 801702e:	d848      	bhi.n	80170c2 <__sflush_r+0xf2>
 8017030:	4a29      	ldr	r2, [pc, #164]	; (80170d8 <__sflush_r+0x108>)
 8017032:	40ca      	lsrs	r2, r1
 8017034:	07d6      	lsls	r6, r2, #31
 8017036:	d544      	bpl.n	80170c2 <__sflush_r+0xf2>
 8017038:	2200      	movs	r2, #0
 801703a:	6062      	str	r2, [r4, #4]
 801703c:	04d9      	lsls	r1, r3, #19
 801703e:	6922      	ldr	r2, [r4, #16]
 8017040:	6022      	str	r2, [r4, #0]
 8017042:	d504      	bpl.n	801704e <__sflush_r+0x7e>
 8017044:	1c42      	adds	r2, r0, #1
 8017046:	d101      	bne.n	801704c <__sflush_r+0x7c>
 8017048:	682b      	ldr	r3, [r5, #0]
 801704a:	b903      	cbnz	r3, 801704e <__sflush_r+0x7e>
 801704c:	6560      	str	r0, [r4, #84]	; 0x54
 801704e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017050:	602f      	str	r7, [r5, #0]
 8017052:	2900      	cmp	r1, #0
 8017054:	d0c9      	beq.n	8016fea <__sflush_r+0x1a>
 8017056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801705a:	4299      	cmp	r1, r3
 801705c:	d002      	beq.n	8017064 <__sflush_r+0x94>
 801705e:	4628      	mov	r0, r5
 8017060:	f001 f932 	bl	80182c8 <_free_r>
 8017064:	2000      	movs	r0, #0
 8017066:	6360      	str	r0, [r4, #52]	; 0x34
 8017068:	e7c0      	b.n	8016fec <__sflush_r+0x1c>
 801706a:	2301      	movs	r3, #1
 801706c:	4628      	mov	r0, r5
 801706e:	47b0      	blx	r6
 8017070:	1c41      	adds	r1, r0, #1
 8017072:	d1c8      	bne.n	8017006 <__sflush_r+0x36>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d0c5      	beq.n	8017006 <__sflush_r+0x36>
 801707a:	2b1d      	cmp	r3, #29
 801707c:	d001      	beq.n	8017082 <__sflush_r+0xb2>
 801707e:	2b16      	cmp	r3, #22
 8017080:	d101      	bne.n	8017086 <__sflush_r+0xb6>
 8017082:	602f      	str	r7, [r5, #0]
 8017084:	e7b1      	b.n	8016fea <__sflush_r+0x1a>
 8017086:	89a3      	ldrh	r3, [r4, #12]
 8017088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801708c:	81a3      	strh	r3, [r4, #12]
 801708e:	e7ad      	b.n	8016fec <__sflush_r+0x1c>
 8017090:	690f      	ldr	r7, [r1, #16]
 8017092:	2f00      	cmp	r7, #0
 8017094:	d0a9      	beq.n	8016fea <__sflush_r+0x1a>
 8017096:	0793      	lsls	r3, r2, #30
 8017098:	680e      	ldr	r6, [r1, #0]
 801709a:	bf08      	it	eq
 801709c:	694b      	ldreq	r3, [r1, #20]
 801709e:	600f      	str	r7, [r1, #0]
 80170a0:	bf18      	it	ne
 80170a2:	2300      	movne	r3, #0
 80170a4:	eba6 0807 	sub.w	r8, r6, r7
 80170a8:	608b      	str	r3, [r1, #8]
 80170aa:	f1b8 0f00 	cmp.w	r8, #0
 80170ae:	dd9c      	ble.n	8016fea <__sflush_r+0x1a>
 80170b0:	4643      	mov	r3, r8
 80170b2:	463a      	mov	r2, r7
 80170b4:	6a21      	ldr	r1, [r4, #32]
 80170b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170b8:	4628      	mov	r0, r5
 80170ba:	47b0      	blx	r6
 80170bc:	2800      	cmp	r0, #0
 80170be:	dc06      	bgt.n	80170ce <__sflush_r+0xfe>
 80170c0:	89a3      	ldrh	r3, [r4, #12]
 80170c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170c6:	81a3      	strh	r3, [r4, #12]
 80170c8:	f04f 30ff 	mov.w	r0, #4294967295
 80170cc:	e78e      	b.n	8016fec <__sflush_r+0x1c>
 80170ce:	4407      	add	r7, r0
 80170d0:	eba8 0800 	sub.w	r8, r8, r0
 80170d4:	e7e9      	b.n	80170aa <__sflush_r+0xda>
 80170d6:	bf00      	nop
 80170d8:	20400001 	.word	0x20400001

080170dc <_fflush_r>:
 80170dc:	b538      	push	{r3, r4, r5, lr}
 80170de:	690b      	ldr	r3, [r1, #16]
 80170e0:	4605      	mov	r5, r0
 80170e2:	460c      	mov	r4, r1
 80170e4:	b1db      	cbz	r3, 801711e <_fflush_r+0x42>
 80170e6:	b118      	cbz	r0, 80170f0 <_fflush_r+0x14>
 80170e8:	6983      	ldr	r3, [r0, #24]
 80170ea:	b90b      	cbnz	r3, 80170f0 <_fflush_r+0x14>
 80170ec:	f000 f872 	bl	80171d4 <__sinit>
 80170f0:	4b0c      	ldr	r3, [pc, #48]	; (8017124 <_fflush_r+0x48>)
 80170f2:	429c      	cmp	r4, r3
 80170f4:	d109      	bne.n	801710a <_fflush_r+0x2e>
 80170f6:	686c      	ldr	r4, [r5, #4]
 80170f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170fc:	b17b      	cbz	r3, 801711e <_fflush_r+0x42>
 80170fe:	4621      	mov	r1, r4
 8017100:	4628      	mov	r0, r5
 8017102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017106:	f7ff bf63 	b.w	8016fd0 <__sflush_r>
 801710a:	4b07      	ldr	r3, [pc, #28]	; (8017128 <_fflush_r+0x4c>)
 801710c:	429c      	cmp	r4, r3
 801710e:	d101      	bne.n	8017114 <_fflush_r+0x38>
 8017110:	68ac      	ldr	r4, [r5, #8]
 8017112:	e7f1      	b.n	80170f8 <_fflush_r+0x1c>
 8017114:	4b05      	ldr	r3, [pc, #20]	; (801712c <_fflush_r+0x50>)
 8017116:	429c      	cmp	r4, r3
 8017118:	bf08      	it	eq
 801711a:	68ec      	ldreq	r4, [r5, #12]
 801711c:	e7ec      	b.n	80170f8 <_fflush_r+0x1c>
 801711e:	2000      	movs	r0, #0
 8017120:	bd38      	pop	{r3, r4, r5, pc}
 8017122:	bf00      	nop
 8017124:	080199a0 	.word	0x080199a0
 8017128:	080199c0 	.word	0x080199c0
 801712c:	08019980 	.word	0x08019980

08017130 <fflush>:
 8017130:	4601      	mov	r1, r0
 8017132:	b920      	cbnz	r0, 801713e <fflush+0xe>
 8017134:	4b04      	ldr	r3, [pc, #16]	; (8017148 <fflush+0x18>)
 8017136:	4905      	ldr	r1, [pc, #20]	; (801714c <fflush+0x1c>)
 8017138:	6818      	ldr	r0, [r3, #0]
 801713a:	f000 b8d3 	b.w	80172e4 <_fwalk_reent>
 801713e:	4b04      	ldr	r3, [pc, #16]	; (8017150 <fflush+0x20>)
 8017140:	6818      	ldr	r0, [r3, #0]
 8017142:	f7ff bfcb 	b.w	80170dc <_fflush_r>
 8017146:	bf00      	nop
 8017148:	080198e4 	.word	0x080198e4
 801714c:	080170dd 	.word	0x080170dd
 8017150:	20000028 	.word	0x20000028

08017154 <std>:
 8017154:	2300      	movs	r3, #0
 8017156:	b510      	push	{r4, lr}
 8017158:	4604      	mov	r4, r0
 801715a:	e9c0 3300 	strd	r3, r3, [r0]
 801715e:	6083      	str	r3, [r0, #8]
 8017160:	8181      	strh	r1, [r0, #12]
 8017162:	6643      	str	r3, [r0, #100]	; 0x64
 8017164:	81c2      	strh	r2, [r0, #14]
 8017166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801716a:	6183      	str	r3, [r0, #24]
 801716c:	4619      	mov	r1, r3
 801716e:	2208      	movs	r2, #8
 8017170:	305c      	adds	r0, #92	; 0x5c
 8017172:	f7fd f9ae 	bl	80144d2 <memset>
 8017176:	4b05      	ldr	r3, [pc, #20]	; (801718c <std+0x38>)
 8017178:	6263      	str	r3, [r4, #36]	; 0x24
 801717a:	4b05      	ldr	r3, [pc, #20]	; (8017190 <std+0x3c>)
 801717c:	62a3      	str	r3, [r4, #40]	; 0x28
 801717e:	4b05      	ldr	r3, [pc, #20]	; (8017194 <std+0x40>)
 8017180:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017182:	4b05      	ldr	r3, [pc, #20]	; (8017198 <std+0x44>)
 8017184:	6224      	str	r4, [r4, #32]
 8017186:	6323      	str	r3, [r4, #48]	; 0x30
 8017188:	bd10      	pop	{r4, pc}
 801718a:	bf00      	nop
 801718c:	080190f9 	.word	0x080190f9
 8017190:	0801911b 	.word	0x0801911b
 8017194:	08019153 	.word	0x08019153
 8017198:	08019177 	.word	0x08019177

0801719c <_cleanup_r>:
 801719c:	4901      	ldr	r1, [pc, #4]	; (80171a4 <_cleanup_r+0x8>)
 801719e:	f000 b8a1 	b.w	80172e4 <_fwalk_reent>
 80171a2:	bf00      	nop
 80171a4:	080170dd 	.word	0x080170dd

080171a8 <__sfmoreglue>:
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	1e4a      	subs	r2, r1, #1
 80171ac:	2568      	movs	r5, #104	; 0x68
 80171ae:	4355      	muls	r5, r2
 80171b0:	460e      	mov	r6, r1
 80171b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80171b6:	f001 f8d5 	bl	8018364 <_malloc_r>
 80171ba:	4604      	mov	r4, r0
 80171bc:	b140      	cbz	r0, 80171d0 <__sfmoreglue+0x28>
 80171be:	2100      	movs	r1, #0
 80171c0:	e9c0 1600 	strd	r1, r6, [r0]
 80171c4:	300c      	adds	r0, #12
 80171c6:	60a0      	str	r0, [r4, #8]
 80171c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171cc:	f7fd f981 	bl	80144d2 <memset>
 80171d0:	4620      	mov	r0, r4
 80171d2:	bd70      	pop	{r4, r5, r6, pc}

080171d4 <__sinit>:
 80171d4:	6983      	ldr	r3, [r0, #24]
 80171d6:	b510      	push	{r4, lr}
 80171d8:	4604      	mov	r4, r0
 80171da:	bb33      	cbnz	r3, 801722a <__sinit+0x56>
 80171dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80171e0:	6503      	str	r3, [r0, #80]	; 0x50
 80171e2:	4b12      	ldr	r3, [pc, #72]	; (801722c <__sinit+0x58>)
 80171e4:	4a12      	ldr	r2, [pc, #72]	; (8017230 <__sinit+0x5c>)
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	6282      	str	r2, [r0, #40]	; 0x28
 80171ea:	4298      	cmp	r0, r3
 80171ec:	bf04      	itt	eq
 80171ee:	2301      	moveq	r3, #1
 80171f0:	6183      	streq	r3, [r0, #24]
 80171f2:	f000 f81f 	bl	8017234 <__sfp>
 80171f6:	6060      	str	r0, [r4, #4]
 80171f8:	4620      	mov	r0, r4
 80171fa:	f000 f81b 	bl	8017234 <__sfp>
 80171fe:	60a0      	str	r0, [r4, #8]
 8017200:	4620      	mov	r0, r4
 8017202:	f000 f817 	bl	8017234 <__sfp>
 8017206:	2200      	movs	r2, #0
 8017208:	60e0      	str	r0, [r4, #12]
 801720a:	2104      	movs	r1, #4
 801720c:	6860      	ldr	r0, [r4, #4]
 801720e:	f7ff ffa1 	bl	8017154 <std>
 8017212:	2201      	movs	r2, #1
 8017214:	2109      	movs	r1, #9
 8017216:	68a0      	ldr	r0, [r4, #8]
 8017218:	f7ff ff9c 	bl	8017154 <std>
 801721c:	2202      	movs	r2, #2
 801721e:	2112      	movs	r1, #18
 8017220:	68e0      	ldr	r0, [r4, #12]
 8017222:	f7ff ff97 	bl	8017154 <std>
 8017226:	2301      	movs	r3, #1
 8017228:	61a3      	str	r3, [r4, #24]
 801722a:	bd10      	pop	{r4, pc}
 801722c:	080198e4 	.word	0x080198e4
 8017230:	0801719d 	.word	0x0801719d

08017234 <__sfp>:
 8017234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017236:	4b1b      	ldr	r3, [pc, #108]	; (80172a4 <__sfp+0x70>)
 8017238:	681e      	ldr	r6, [r3, #0]
 801723a:	69b3      	ldr	r3, [r6, #24]
 801723c:	4607      	mov	r7, r0
 801723e:	b913      	cbnz	r3, 8017246 <__sfp+0x12>
 8017240:	4630      	mov	r0, r6
 8017242:	f7ff ffc7 	bl	80171d4 <__sinit>
 8017246:	3648      	adds	r6, #72	; 0x48
 8017248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801724c:	3b01      	subs	r3, #1
 801724e:	d503      	bpl.n	8017258 <__sfp+0x24>
 8017250:	6833      	ldr	r3, [r6, #0]
 8017252:	b133      	cbz	r3, 8017262 <__sfp+0x2e>
 8017254:	6836      	ldr	r6, [r6, #0]
 8017256:	e7f7      	b.n	8017248 <__sfp+0x14>
 8017258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801725c:	b16d      	cbz	r5, 801727a <__sfp+0x46>
 801725e:	3468      	adds	r4, #104	; 0x68
 8017260:	e7f4      	b.n	801724c <__sfp+0x18>
 8017262:	2104      	movs	r1, #4
 8017264:	4638      	mov	r0, r7
 8017266:	f7ff ff9f 	bl	80171a8 <__sfmoreglue>
 801726a:	6030      	str	r0, [r6, #0]
 801726c:	2800      	cmp	r0, #0
 801726e:	d1f1      	bne.n	8017254 <__sfp+0x20>
 8017270:	230c      	movs	r3, #12
 8017272:	603b      	str	r3, [r7, #0]
 8017274:	4604      	mov	r4, r0
 8017276:	4620      	mov	r0, r4
 8017278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801727a:	4b0b      	ldr	r3, [pc, #44]	; (80172a8 <__sfp+0x74>)
 801727c:	6665      	str	r5, [r4, #100]	; 0x64
 801727e:	e9c4 5500 	strd	r5, r5, [r4]
 8017282:	60a5      	str	r5, [r4, #8]
 8017284:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017288:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801728c:	2208      	movs	r2, #8
 801728e:	4629      	mov	r1, r5
 8017290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017294:	f7fd f91d 	bl	80144d2 <memset>
 8017298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801729c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172a0:	e7e9      	b.n	8017276 <__sfp+0x42>
 80172a2:	bf00      	nop
 80172a4:	080198e4 	.word	0x080198e4
 80172a8:	ffff0001 	.word	0xffff0001

080172ac <_fwalk>:
 80172ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b0:	4688      	mov	r8, r1
 80172b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172b6:	2600      	movs	r6, #0
 80172b8:	b914      	cbnz	r4, 80172c0 <_fwalk+0x14>
 80172ba:	4630      	mov	r0, r6
 80172bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172c0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80172c4:	3f01      	subs	r7, #1
 80172c6:	d501      	bpl.n	80172cc <_fwalk+0x20>
 80172c8:	6824      	ldr	r4, [r4, #0]
 80172ca:	e7f5      	b.n	80172b8 <_fwalk+0xc>
 80172cc:	89ab      	ldrh	r3, [r5, #12]
 80172ce:	2b01      	cmp	r3, #1
 80172d0:	d906      	bls.n	80172e0 <_fwalk+0x34>
 80172d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172d6:	3301      	adds	r3, #1
 80172d8:	d002      	beq.n	80172e0 <_fwalk+0x34>
 80172da:	4628      	mov	r0, r5
 80172dc:	47c0      	blx	r8
 80172de:	4306      	orrs	r6, r0
 80172e0:	3568      	adds	r5, #104	; 0x68
 80172e2:	e7ef      	b.n	80172c4 <_fwalk+0x18>

080172e4 <_fwalk_reent>:
 80172e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172e8:	4680      	mov	r8, r0
 80172ea:	4689      	mov	r9, r1
 80172ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172f0:	2600      	movs	r6, #0
 80172f2:	b914      	cbnz	r4, 80172fa <_fwalk_reent+0x16>
 80172f4:	4630      	mov	r0, r6
 80172f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80172fe:	3f01      	subs	r7, #1
 8017300:	d501      	bpl.n	8017306 <_fwalk_reent+0x22>
 8017302:	6824      	ldr	r4, [r4, #0]
 8017304:	e7f5      	b.n	80172f2 <_fwalk_reent+0xe>
 8017306:	89ab      	ldrh	r3, [r5, #12]
 8017308:	2b01      	cmp	r3, #1
 801730a:	d907      	bls.n	801731c <_fwalk_reent+0x38>
 801730c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017310:	3301      	adds	r3, #1
 8017312:	d003      	beq.n	801731c <_fwalk_reent+0x38>
 8017314:	4629      	mov	r1, r5
 8017316:	4640      	mov	r0, r8
 8017318:	47c8      	blx	r9
 801731a:	4306      	orrs	r6, r0
 801731c:	3568      	adds	r5, #104	; 0x68
 801731e:	e7ee      	b.n	80172fe <_fwalk_reent+0x1a>

08017320 <rshift>:
 8017320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017322:	6906      	ldr	r6, [r0, #16]
 8017324:	114b      	asrs	r3, r1, #5
 8017326:	429e      	cmp	r6, r3
 8017328:	f100 0414 	add.w	r4, r0, #20
 801732c:	dd30      	ble.n	8017390 <rshift+0x70>
 801732e:	f011 011f 	ands.w	r1, r1, #31
 8017332:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017336:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801733a:	d108      	bne.n	801734e <rshift+0x2e>
 801733c:	4621      	mov	r1, r4
 801733e:	42b2      	cmp	r2, r6
 8017340:	460b      	mov	r3, r1
 8017342:	d211      	bcs.n	8017368 <rshift+0x48>
 8017344:	f852 3b04 	ldr.w	r3, [r2], #4
 8017348:	f841 3b04 	str.w	r3, [r1], #4
 801734c:	e7f7      	b.n	801733e <rshift+0x1e>
 801734e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017352:	f1c1 0c20 	rsb	ip, r1, #32
 8017356:	40cd      	lsrs	r5, r1
 8017358:	3204      	adds	r2, #4
 801735a:	4623      	mov	r3, r4
 801735c:	42b2      	cmp	r2, r6
 801735e:	4617      	mov	r7, r2
 8017360:	d30c      	bcc.n	801737c <rshift+0x5c>
 8017362:	601d      	str	r5, [r3, #0]
 8017364:	b105      	cbz	r5, 8017368 <rshift+0x48>
 8017366:	3304      	adds	r3, #4
 8017368:	1b1a      	subs	r2, r3, r4
 801736a:	42a3      	cmp	r3, r4
 801736c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017370:	bf08      	it	eq
 8017372:	2300      	moveq	r3, #0
 8017374:	6102      	str	r2, [r0, #16]
 8017376:	bf08      	it	eq
 8017378:	6143      	streq	r3, [r0, #20]
 801737a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801737c:	683f      	ldr	r7, [r7, #0]
 801737e:	fa07 f70c 	lsl.w	r7, r7, ip
 8017382:	433d      	orrs	r5, r7
 8017384:	f843 5b04 	str.w	r5, [r3], #4
 8017388:	f852 5b04 	ldr.w	r5, [r2], #4
 801738c:	40cd      	lsrs	r5, r1
 801738e:	e7e5      	b.n	801735c <rshift+0x3c>
 8017390:	4623      	mov	r3, r4
 8017392:	e7e9      	b.n	8017368 <rshift+0x48>

08017394 <__hexdig_fun>:
 8017394:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017398:	2b09      	cmp	r3, #9
 801739a:	d802      	bhi.n	80173a2 <__hexdig_fun+0xe>
 801739c:	3820      	subs	r0, #32
 801739e:	b2c0      	uxtb	r0, r0
 80173a0:	4770      	bx	lr
 80173a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80173a6:	2b05      	cmp	r3, #5
 80173a8:	d801      	bhi.n	80173ae <__hexdig_fun+0x1a>
 80173aa:	3847      	subs	r0, #71	; 0x47
 80173ac:	e7f7      	b.n	801739e <__hexdig_fun+0xa>
 80173ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80173b2:	2b05      	cmp	r3, #5
 80173b4:	d801      	bhi.n	80173ba <__hexdig_fun+0x26>
 80173b6:	3827      	subs	r0, #39	; 0x27
 80173b8:	e7f1      	b.n	801739e <__hexdig_fun+0xa>
 80173ba:	2000      	movs	r0, #0
 80173bc:	4770      	bx	lr

080173be <__gethex>:
 80173be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c2:	b08b      	sub	sp, #44	; 0x2c
 80173c4:	468a      	mov	sl, r1
 80173c6:	9002      	str	r0, [sp, #8]
 80173c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80173ca:	9306      	str	r3, [sp, #24]
 80173cc:	4690      	mov	r8, r2
 80173ce:	f000 fadf 	bl	8017990 <__localeconv_l>
 80173d2:	6803      	ldr	r3, [r0, #0]
 80173d4:	9303      	str	r3, [sp, #12]
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f0 fe32 	bl	8008040 <strlen>
 80173dc:	9b03      	ldr	r3, [sp, #12]
 80173de:	9001      	str	r0, [sp, #4]
 80173e0:	4403      	add	r3, r0
 80173e2:	f04f 0b00 	mov.w	fp, #0
 80173e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80173ea:	9307      	str	r3, [sp, #28]
 80173ec:	f8da 3000 	ldr.w	r3, [sl]
 80173f0:	3302      	adds	r3, #2
 80173f2:	461f      	mov	r7, r3
 80173f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80173f8:	2830      	cmp	r0, #48	; 0x30
 80173fa:	d06c      	beq.n	80174d6 <__gethex+0x118>
 80173fc:	f7ff ffca 	bl	8017394 <__hexdig_fun>
 8017400:	4604      	mov	r4, r0
 8017402:	2800      	cmp	r0, #0
 8017404:	d16a      	bne.n	80174dc <__gethex+0x11e>
 8017406:	9a01      	ldr	r2, [sp, #4]
 8017408:	9903      	ldr	r1, [sp, #12]
 801740a:	4638      	mov	r0, r7
 801740c:	f001 feb7 	bl	801917e <strncmp>
 8017410:	2800      	cmp	r0, #0
 8017412:	d166      	bne.n	80174e2 <__gethex+0x124>
 8017414:	9b01      	ldr	r3, [sp, #4]
 8017416:	5cf8      	ldrb	r0, [r7, r3]
 8017418:	18fe      	adds	r6, r7, r3
 801741a:	f7ff ffbb 	bl	8017394 <__hexdig_fun>
 801741e:	2800      	cmp	r0, #0
 8017420:	d062      	beq.n	80174e8 <__gethex+0x12a>
 8017422:	4633      	mov	r3, r6
 8017424:	7818      	ldrb	r0, [r3, #0]
 8017426:	2830      	cmp	r0, #48	; 0x30
 8017428:	461f      	mov	r7, r3
 801742a:	f103 0301 	add.w	r3, r3, #1
 801742e:	d0f9      	beq.n	8017424 <__gethex+0x66>
 8017430:	f7ff ffb0 	bl	8017394 <__hexdig_fun>
 8017434:	fab0 f580 	clz	r5, r0
 8017438:	096d      	lsrs	r5, r5, #5
 801743a:	4634      	mov	r4, r6
 801743c:	f04f 0b01 	mov.w	fp, #1
 8017440:	463a      	mov	r2, r7
 8017442:	4616      	mov	r6, r2
 8017444:	3201      	adds	r2, #1
 8017446:	7830      	ldrb	r0, [r6, #0]
 8017448:	f7ff ffa4 	bl	8017394 <__hexdig_fun>
 801744c:	2800      	cmp	r0, #0
 801744e:	d1f8      	bne.n	8017442 <__gethex+0x84>
 8017450:	9a01      	ldr	r2, [sp, #4]
 8017452:	9903      	ldr	r1, [sp, #12]
 8017454:	4630      	mov	r0, r6
 8017456:	f001 fe92 	bl	801917e <strncmp>
 801745a:	b950      	cbnz	r0, 8017472 <__gethex+0xb4>
 801745c:	b954      	cbnz	r4, 8017474 <__gethex+0xb6>
 801745e:	9b01      	ldr	r3, [sp, #4]
 8017460:	18f4      	adds	r4, r6, r3
 8017462:	4622      	mov	r2, r4
 8017464:	4616      	mov	r6, r2
 8017466:	3201      	adds	r2, #1
 8017468:	7830      	ldrb	r0, [r6, #0]
 801746a:	f7ff ff93 	bl	8017394 <__hexdig_fun>
 801746e:	2800      	cmp	r0, #0
 8017470:	d1f8      	bne.n	8017464 <__gethex+0xa6>
 8017472:	b10c      	cbz	r4, 8017478 <__gethex+0xba>
 8017474:	1ba4      	subs	r4, r4, r6
 8017476:	00a4      	lsls	r4, r4, #2
 8017478:	7833      	ldrb	r3, [r6, #0]
 801747a:	2b50      	cmp	r3, #80	; 0x50
 801747c:	d001      	beq.n	8017482 <__gethex+0xc4>
 801747e:	2b70      	cmp	r3, #112	; 0x70
 8017480:	d140      	bne.n	8017504 <__gethex+0x146>
 8017482:	7873      	ldrb	r3, [r6, #1]
 8017484:	2b2b      	cmp	r3, #43	; 0x2b
 8017486:	d031      	beq.n	80174ec <__gethex+0x12e>
 8017488:	2b2d      	cmp	r3, #45	; 0x2d
 801748a:	d033      	beq.n	80174f4 <__gethex+0x136>
 801748c:	1c71      	adds	r1, r6, #1
 801748e:	f04f 0900 	mov.w	r9, #0
 8017492:	7808      	ldrb	r0, [r1, #0]
 8017494:	f7ff ff7e 	bl	8017394 <__hexdig_fun>
 8017498:	1e43      	subs	r3, r0, #1
 801749a:	b2db      	uxtb	r3, r3
 801749c:	2b18      	cmp	r3, #24
 801749e:	d831      	bhi.n	8017504 <__gethex+0x146>
 80174a0:	f1a0 0210 	sub.w	r2, r0, #16
 80174a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80174a8:	f7ff ff74 	bl	8017394 <__hexdig_fun>
 80174ac:	1e43      	subs	r3, r0, #1
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	2b18      	cmp	r3, #24
 80174b2:	d922      	bls.n	80174fa <__gethex+0x13c>
 80174b4:	f1b9 0f00 	cmp.w	r9, #0
 80174b8:	d000      	beq.n	80174bc <__gethex+0xfe>
 80174ba:	4252      	negs	r2, r2
 80174bc:	4414      	add	r4, r2
 80174be:	f8ca 1000 	str.w	r1, [sl]
 80174c2:	b30d      	cbz	r5, 8017508 <__gethex+0x14a>
 80174c4:	f1bb 0f00 	cmp.w	fp, #0
 80174c8:	bf0c      	ite	eq
 80174ca:	2706      	moveq	r7, #6
 80174cc:	2700      	movne	r7, #0
 80174ce:	4638      	mov	r0, r7
 80174d0:	b00b      	add	sp, #44	; 0x2c
 80174d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d6:	f10b 0b01 	add.w	fp, fp, #1
 80174da:	e78a      	b.n	80173f2 <__gethex+0x34>
 80174dc:	2500      	movs	r5, #0
 80174de:	462c      	mov	r4, r5
 80174e0:	e7ae      	b.n	8017440 <__gethex+0x82>
 80174e2:	463e      	mov	r6, r7
 80174e4:	2501      	movs	r5, #1
 80174e6:	e7c7      	b.n	8017478 <__gethex+0xba>
 80174e8:	4604      	mov	r4, r0
 80174ea:	e7fb      	b.n	80174e4 <__gethex+0x126>
 80174ec:	f04f 0900 	mov.w	r9, #0
 80174f0:	1cb1      	adds	r1, r6, #2
 80174f2:	e7ce      	b.n	8017492 <__gethex+0xd4>
 80174f4:	f04f 0901 	mov.w	r9, #1
 80174f8:	e7fa      	b.n	80174f0 <__gethex+0x132>
 80174fa:	230a      	movs	r3, #10
 80174fc:	fb03 0202 	mla	r2, r3, r2, r0
 8017500:	3a10      	subs	r2, #16
 8017502:	e7cf      	b.n	80174a4 <__gethex+0xe6>
 8017504:	4631      	mov	r1, r6
 8017506:	e7da      	b.n	80174be <__gethex+0x100>
 8017508:	1bf3      	subs	r3, r6, r7
 801750a:	3b01      	subs	r3, #1
 801750c:	4629      	mov	r1, r5
 801750e:	2b07      	cmp	r3, #7
 8017510:	dc49      	bgt.n	80175a6 <__gethex+0x1e8>
 8017512:	9802      	ldr	r0, [sp, #8]
 8017514:	f000 faca 	bl	8017aac <_Balloc>
 8017518:	9b01      	ldr	r3, [sp, #4]
 801751a:	f100 0914 	add.w	r9, r0, #20
 801751e:	f04f 0b00 	mov.w	fp, #0
 8017522:	f1c3 0301 	rsb	r3, r3, #1
 8017526:	4605      	mov	r5, r0
 8017528:	f8cd 9010 	str.w	r9, [sp, #16]
 801752c:	46da      	mov	sl, fp
 801752e:	9308      	str	r3, [sp, #32]
 8017530:	42b7      	cmp	r7, r6
 8017532:	d33b      	bcc.n	80175ac <__gethex+0x1ee>
 8017534:	9804      	ldr	r0, [sp, #16]
 8017536:	f840 ab04 	str.w	sl, [r0], #4
 801753a:	eba0 0009 	sub.w	r0, r0, r9
 801753e:	1080      	asrs	r0, r0, #2
 8017540:	6128      	str	r0, [r5, #16]
 8017542:	0147      	lsls	r7, r0, #5
 8017544:	4650      	mov	r0, sl
 8017546:	f000 fb75 	bl	8017c34 <__hi0bits>
 801754a:	f8d8 6000 	ldr.w	r6, [r8]
 801754e:	1a3f      	subs	r7, r7, r0
 8017550:	42b7      	cmp	r7, r6
 8017552:	dd64      	ble.n	801761e <__gethex+0x260>
 8017554:	1bbf      	subs	r7, r7, r6
 8017556:	4639      	mov	r1, r7
 8017558:	4628      	mov	r0, r5
 801755a:	f000 fe85 	bl	8018268 <__any_on>
 801755e:	4682      	mov	sl, r0
 8017560:	b178      	cbz	r0, 8017582 <__gethex+0x1c4>
 8017562:	1e7b      	subs	r3, r7, #1
 8017564:	1159      	asrs	r1, r3, #5
 8017566:	f003 021f 	and.w	r2, r3, #31
 801756a:	f04f 0a01 	mov.w	sl, #1
 801756e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017572:	fa0a f202 	lsl.w	r2, sl, r2
 8017576:	420a      	tst	r2, r1
 8017578:	d003      	beq.n	8017582 <__gethex+0x1c4>
 801757a:	4553      	cmp	r3, sl
 801757c:	dc46      	bgt.n	801760c <__gethex+0x24e>
 801757e:	f04f 0a02 	mov.w	sl, #2
 8017582:	4639      	mov	r1, r7
 8017584:	4628      	mov	r0, r5
 8017586:	f7ff fecb 	bl	8017320 <rshift>
 801758a:	443c      	add	r4, r7
 801758c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017590:	42a3      	cmp	r3, r4
 8017592:	da52      	bge.n	801763a <__gethex+0x27c>
 8017594:	4629      	mov	r1, r5
 8017596:	9802      	ldr	r0, [sp, #8]
 8017598:	f000 fabc 	bl	8017b14 <_Bfree>
 801759c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801759e:	2300      	movs	r3, #0
 80175a0:	6013      	str	r3, [r2, #0]
 80175a2:	27a3      	movs	r7, #163	; 0xa3
 80175a4:	e793      	b.n	80174ce <__gethex+0x110>
 80175a6:	3101      	adds	r1, #1
 80175a8:	105b      	asrs	r3, r3, #1
 80175aa:	e7b0      	b.n	801750e <__gethex+0x150>
 80175ac:	1e73      	subs	r3, r6, #1
 80175ae:	9305      	str	r3, [sp, #20]
 80175b0:	9a07      	ldr	r2, [sp, #28]
 80175b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d018      	beq.n	80175ec <__gethex+0x22e>
 80175ba:	f1bb 0f20 	cmp.w	fp, #32
 80175be:	d107      	bne.n	80175d0 <__gethex+0x212>
 80175c0:	9b04      	ldr	r3, [sp, #16]
 80175c2:	f8c3 a000 	str.w	sl, [r3]
 80175c6:	3304      	adds	r3, #4
 80175c8:	f04f 0a00 	mov.w	sl, #0
 80175cc:	9304      	str	r3, [sp, #16]
 80175ce:	46d3      	mov	fp, sl
 80175d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80175d4:	f7ff fede 	bl	8017394 <__hexdig_fun>
 80175d8:	f000 000f 	and.w	r0, r0, #15
 80175dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80175e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80175e4:	f10b 0b04 	add.w	fp, fp, #4
 80175e8:	9b05      	ldr	r3, [sp, #20]
 80175ea:	e00d      	b.n	8017608 <__gethex+0x24a>
 80175ec:	9b05      	ldr	r3, [sp, #20]
 80175ee:	9a08      	ldr	r2, [sp, #32]
 80175f0:	4413      	add	r3, r2
 80175f2:	42bb      	cmp	r3, r7
 80175f4:	d3e1      	bcc.n	80175ba <__gethex+0x1fc>
 80175f6:	4618      	mov	r0, r3
 80175f8:	9a01      	ldr	r2, [sp, #4]
 80175fa:	9903      	ldr	r1, [sp, #12]
 80175fc:	9309      	str	r3, [sp, #36]	; 0x24
 80175fe:	f001 fdbe 	bl	801917e <strncmp>
 8017602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017604:	2800      	cmp	r0, #0
 8017606:	d1d8      	bne.n	80175ba <__gethex+0x1fc>
 8017608:	461e      	mov	r6, r3
 801760a:	e791      	b.n	8017530 <__gethex+0x172>
 801760c:	1eb9      	subs	r1, r7, #2
 801760e:	4628      	mov	r0, r5
 8017610:	f000 fe2a 	bl	8018268 <__any_on>
 8017614:	2800      	cmp	r0, #0
 8017616:	d0b2      	beq.n	801757e <__gethex+0x1c0>
 8017618:	f04f 0a03 	mov.w	sl, #3
 801761c:	e7b1      	b.n	8017582 <__gethex+0x1c4>
 801761e:	da09      	bge.n	8017634 <__gethex+0x276>
 8017620:	1bf7      	subs	r7, r6, r7
 8017622:	4629      	mov	r1, r5
 8017624:	463a      	mov	r2, r7
 8017626:	9802      	ldr	r0, [sp, #8]
 8017628:	f000 fc40 	bl	8017eac <__lshift>
 801762c:	1be4      	subs	r4, r4, r7
 801762e:	4605      	mov	r5, r0
 8017630:	f100 0914 	add.w	r9, r0, #20
 8017634:	f04f 0a00 	mov.w	sl, #0
 8017638:	e7a8      	b.n	801758c <__gethex+0x1ce>
 801763a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801763e:	42a0      	cmp	r0, r4
 8017640:	dd6a      	ble.n	8017718 <__gethex+0x35a>
 8017642:	1b04      	subs	r4, r0, r4
 8017644:	42a6      	cmp	r6, r4
 8017646:	dc2e      	bgt.n	80176a6 <__gethex+0x2e8>
 8017648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801764c:	2b02      	cmp	r3, #2
 801764e:	d022      	beq.n	8017696 <__gethex+0x2d8>
 8017650:	2b03      	cmp	r3, #3
 8017652:	d024      	beq.n	801769e <__gethex+0x2e0>
 8017654:	2b01      	cmp	r3, #1
 8017656:	d115      	bne.n	8017684 <__gethex+0x2c6>
 8017658:	42a6      	cmp	r6, r4
 801765a:	d113      	bne.n	8017684 <__gethex+0x2c6>
 801765c:	2e01      	cmp	r6, #1
 801765e:	dc0b      	bgt.n	8017678 <__gethex+0x2ba>
 8017660:	9a06      	ldr	r2, [sp, #24]
 8017662:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017666:	6013      	str	r3, [r2, #0]
 8017668:	2301      	movs	r3, #1
 801766a:	612b      	str	r3, [r5, #16]
 801766c:	f8c9 3000 	str.w	r3, [r9]
 8017670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017672:	2762      	movs	r7, #98	; 0x62
 8017674:	601d      	str	r5, [r3, #0]
 8017676:	e72a      	b.n	80174ce <__gethex+0x110>
 8017678:	1e71      	subs	r1, r6, #1
 801767a:	4628      	mov	r0, r5
 801767c:	f000 fdf4 	bl	8018268 <__any_on>
 8017680:	2800      	cmp	r0, #0
 8017682:	d1ed      	bne.n	8017660 <__gethex+0x2a2>
 8017684:	4629      	mov	r1, r5
 8017686:	9802      	ldr	r0, [sp, #8]
 8017688:	f000 fa44 	bl	8017b14 <_Bfree>
 801768c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801768e:	2300      	movs	r3, #0
 8017690:	6013      	str	r3, [r2, #0]
 8017692:	2750      	movs	r7, #80	; 0x50
 8017694:	e71b      	b.n	80174ce <__gethex+0x110>
 8017696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017698:	2b00      	cmp	r3, #0
 801769a:	d0e1      	beq.n	8017660 <__gethex+0x2a2>
 801769c:	e7f2      	b.n	8017684 <__gethex+0x2c6>
 801769e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d1dd      	bne.n	8017660 <__gethex+0x2a2>
 80176a4:	e7ee      	b.n	8017684 <__gethex+0x2c6>
 80176a6:	1e67      	subs	r7, r4, #1
 80176a8:	f1ba 0f00 	cmp.w	sl, #0
 80176ac:	d131      	bne.n	8017712 <__gethex+0x354>
 80176ae:	b127      	cbz	r7, 80176ba <__gethex+0x2fc>
 80176b0:	4639      	mov	r1, r7
 80176b2:	4628      	mov	r0, r5
 80176b4:	f000 fdd8 	bl	8018268 <__any_on>
 80176b8:	4682      	mov	sl, r0
 80176ba:	117a      	asrs	r2, r7, #5
 80176bc:	2301      	movs	r3, #1
 80176be:	f007 071f 	and.w	r7, r7, #31
 80176c2:	fa03 f707 	lsl.w	r7, r3, r7
 80176c6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80176ca:	4621      	mov	r1, r4
 80176cc:	421f      	tst	r7, r3
 80176ce:	4628      	mov	r0, r5
 80176d0:	bf18      	it	ne
 80176d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80176d6:	1b36      	subs	r6, r6, r4
 80176d8:	f7ff fe22 	bl	8017320 <rshift>
 80176dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80176e0:	2702      	movs	r7, #2
 80176e2:	f1ba 0f00 	cmp.w	sl, #0
 80176e6:	d048      	beq.n	801777a <__gethex+0x3bc>
 80176e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80176ec:	2b02      	cmp	r3, #2
 80176ee:	d015      	beq.n	801771c <__gethex+0x35e>
 80176f0:	2b03      	cmp	r3, #3
 80176f2:	d017      	beq.n	8017724 <__gethex+0x366>
 80176f4:	2b01      	cmp	r3, #1
 80176f6:	d109      	bne.n	801770c <__gethex+0x34e>
 80176f8:	f01a 0f02 	tst.w	sl, #2
 80176fc:	d006      	beq.n	801770c <__gethex+0x34e>
 80176fe:	f8d9 3000 	ldr.w	r3, [r9]
 8017702:	ea4a 0a03 	orr.w	sl, sl, r3
 8017706:	f01a 0f01 	tst.w	sl, #1
 801770a:	d10e      	bne.n	801772a <__gethex+0x36c>
 801770c:	f047 0710 	orr.w	r7, r7, #16
 8017710:	e033      	b.n	801777a <__gethex+0x3bc>
 8017712:	f04f 0a01 	mov.w	sl, #1
 8017716:	e7d0      	b.n	80176ba <__gethex+0x2fc>
 8017718:	2701      	movs	r7, #1
 801771a:	e7e2      	b.n	80176e2 <__gethex+0x324>
 801771c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801771e:	f1c3 0301 	rsb	r3, r3, #1
 8017722:	9315      	str	r3, [sp, #84]	; 0x54
 8017724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017726:	2b00      	cmp	r3, #0
 8017728:	d0f0      	beq.n	801770c <__gethex+0x34e>
 801772a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801772e:	f105 0314 	add.w	r3, r5, #20
 8017732:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017736:	eb03 010a 	add.w	r1, r3, sl
 801773a:	f04f 0c00 	mov.w	ip, #0
 801773e:	4618      	mov	r0, r3
 8017740:	f853 2b04 	ldr.w	r2, [r3], #4
 8017744:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017748:	d01c      	beq.n	8017784 <__gethex+0x3c6>
 801774a:	3201      	adds	r2, #1
 801774c:	6002      	str	r2, [r0, #0]
 801774e:	2f02      	cmp	r7, #2
 8017750:	f105 0314 	add.w	r3, r5, #20
 8017754:	d138      	bne.n	80177c8 <__gethex+0x40a>
 8017756:	f8d8 2000 	ldr.w	r2, [r8]
 801775a:	3a01      	subs	r2, #1
 801775c:	42b2      	cmp	r2, r6
 801775e:	d10a      	bne.n	8017776 <__gethex+0x3b8>
 8017760:	1171      	asrs	r1, r6, #5
 8017762:	2201      	movs	r2, #1
 8017764:	f006 061f 	and.w	r6, r6, #31
 8017768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801776c:	fa02 f606 	lsl.w	r6, r2, r6
 8017770:	421e      	tst	r6, r3
 8017772:	bf18      	it	ne
 8017774:	4617      	movne	r7, r2
 8017776:	f047 0720 	orr.w	r7, r7, #32
 801777a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801777c:	601d      	str	r5, [r3, #0]
 801777e:	9b06      	ldr	r3, [sp, #24]
 8017780:	601c      	str	r4, [r3, #0]
 8017782:	e6a4      	b.n	80174ce <__gethex+0x110>
 8017784:	4299      	cmp	r1, r3
 8017786:	f843 cc04 	str.w	ip, [r3, #-4]
 801778a:	d8d8      	bhi.n	801773e <__gethex+0x380>
 801778c:	68ab      	ldr	r3, [r5, #8]
 801778e:	4599      	cmp	r9, r3
 8017790:	db12      	blt.n	80177b8 <__gethex+0x3fa>
 8017792:	6869      	ldr	r1, [r5, #4]
 8017794:	9802      	ldr	r0, [sp, #8]
 8017796:	3101      	adds	r1, #1
 8017798:	f000 f988 	bl	8017aac <_Balloc>
 801779c:	692a      	ldr	r2, [r5, #16]
 801779e:	3202      	adds	r2, #2
 80177a0:	f105 010c 	add.w	r1, r5, #12
 80177a4:	4683      	mov	fp, r0
 80177a6:	0092      	lsls	r2, r2, #2
 80177a8:	300c      	adds	r0, #12
 80177aa:	f7fc fe87 	bl	80144bc <memcpy>
 80177ae:	4629      	mov	r1, r5
 80177b0:	9802      	ldr	r0, [sp, #8]
 80177b2:	f000 f9af 	bl	8017b14 <_Bfree>
 80177b6:	465d      	mov	r5, fp
 80177b8:	692b      	ldr	r3, [r5, #16]
 80177ba:	1c5a      	adds	r2, r3, #1
 80177bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80177c0:	612a      	str	r2, [r5, #16]
 80177c2:	2201      	movs	r2, #1
 80177c4:	615a      	str	r2, [r3, #20]
 80177c6:	e7c2      	b.n	801774e <__gethex+0x390>
 80177c8:	692a      	ldr	r2, [r5, #16]
 80177ca:	454a      	cmp	r2, r9
 80177cc:	dd0b      	ble.n	80177e6 <__gethex+0x428>
 80177ce:	2101      	movs	r1, #1
 80177d0:	4628      	mov	r0, r5
 80177d2:	f7ff fda5 	bl	8017320 <rshift>
 80177d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80177da:	3401      	adds	r4, #1
 80177dc:	42a3      	cmp	r3, r4
 80177de:	f6ff aed9 	blt.w	8017594 <__gethex+0x1d6>
 80177e2:	2701      	movs	r7, #1
 80177e4:	e7c7      	b.n	8017776 <__gethex+0x3b8>
 80177e6:	f016 061f 	ands.w	r6, r6, #31
 80177ea:	d0fa      	beq.n	80177e2 <__gethex+0x424>
 80177ec:	449a      	add	sl, r3
 80177ee:	f1c6 0620 	rsb	r6, r6, #32
 80177f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80177f6:	f000 fa1d 	bl	8017c34 <__hi0bits>
 80177fa:	42b0      	cmp	r0, r6
 80177fc:	dbe7      	blt.n	80177ce <__gethex+0x410>
 80177fe:	e7f0      	b.n	80177e2 <__gethex+0x424>

08017800 <L_shift>:
 8017800:	f1c2 0208 	rsb	r2, r2, #8
 8017804:	0092      	lsls	r2, r2, #2
 8017806:	b570      	push	{r4, r5, r6, lr}
 8017808:	f1c2 0620 	rsb	r6, r2, #32
 801780c:	6843      	ldr	r3, [r0, #4]
 801780e:	6804      	ldr	r4, [r0, #0]
 8017810:	fa03 f506 	lsl.w	r5, r3, r6
 8017814:	432c      	orrs	r4, r5
 8017816:	40d3      	lsrs	r3, r2
 8017818:	6004      	str	r4, [r0, #0]
 801781a:	f840 3f04 	str.w	r3, [r0, #4]!
 801781e:	4288      	cmp	r0, r1
 8017820:	d3f4      	bcc.n	801780c <L_shift+0xc>
 8017822:	bd70      	pop	{r4, r5, r6, pc}

08017824 <__match>:
 8017824:	b530      	push	{r4, r5, lr}
 8017826:	6803      	ldr	r3, [r0, #0]
 8017828:	3301      	adds	r3, #1
 801782a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801782e:	b914      	cbnz	r4, 8017836 <__match+0x12>
 8017830:	6003      	str	r3, [r0, #0]
 8017832:	2001      	movs	r0, #1
 8017834:	bd30      	pop	{r4, r5, pc}
 8017836:	f813 2b01 	ldrb.w	r2, [r3], #1
 801783a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801783e:	2d19      	cmp	r5, #25
 8017840:	bf98      	it	ls
 8017842:	3220      	addls	r2, #32
 8017844:	42a2      	cmp	r2, r4
 8017846:	d0f0      	beq.n	801782a <__match+0x6>
 8017848:	2000      	movs	r0, #0
 801784a:	e7f3      	b.n	8017834 <__match+0x10>

0801784c <__hexnan>:
 801784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017850:	680b      	ldr	r3, [r1, #0]
 8017852:	6801      	ldr	r1, [r0, #0]
 8017854:	115f      	asrs	r7, r3, #5
 8017856:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801785a:	f013 031f 	ands.w	r3, r3, #31
 801785e:	b087      	sub	sp, #28
 8017860:	bf18      	it	ne
 8017862:	3704      	addne	r7, #4
 8017864:	2500      	movs	r5, #0
 8017866:	1f3e      	subs	r6, r7, #4
 8017868:	4682      	mov	sl, r0
 801786a:	4690      	mov	r8, r2
 801786c:	9301      	str	r3, [sp, #4]
 801786e:	f847 5c04 	str.w	r5, [r7, #-4]
 8017872:	46b1      	mov	r9, r6
 8017874:	4634      	mov	r4, r6
 8017876:	9502      	str	r5, [sp, #8]
 8017878:	46ab      	mov	fp, r5
 801787a:	784a      	ldrb	r2, [r1, #1]
 801787c:	1c4b      	adds	r3, r1, #1
 801787e:	9303      	str	r3, [sp, #12]
 8017880:	b342      	cbz	r2, 80178d4 <__hexnan+0x88>
 8017882:	4610      	mov	r0, r2
 8017884:	9105      	str	r1, [sp, #20]
 8017886:	9204      	str	r2, [sp, #16]
 8017888:	f7ff fd84 	bl	8017394 <__hexdig_fun>
 801788c:	2800      	cmp	r0, #0
 801788e:	d143      	bne.n	8017918 <__hexnan+0xcc>
 8017890:	9a04      	ldr	r2, [sp, #16]
 8017892:	9905      	ldr	r1, [sp, #20]
 8017894:	2a20      	cmp	r2, #32
 8017896:	d818      	bhi.n	80178ca <__hexnan+0x7e>
 8017898:	9b02      	ldr	r3, [sp, #8]
 801789a:	459b      	cmp	fp, r3
 801789c:	dd13      	ble.n	80178c6 <__hexnan+0x7a>
 801789e:	454c      	cmp	r4, r9
 80178a0:	d206      	bcs.n	80178b0 <__hexnan+0x64>
 80178a2:	2d07      	cmp	r5, #7
 80178a4:	dc04      	bgt.n	80178b0 <__hexnan+0x64>
 80178a6:	462a      	mov	r2, r5
 80178a8:	4649      	mov	r1, r9
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7ff ffa8 	bl	8017800 <L_shift>
 80178b0:	4544      	cmp	r4, r8
 80178b2:	d944      	bls.n	801793e <__hexnan+0xf2>
 80178b4:	2300      	movs	r3, #0
 80178b6:	f1a4 0904 	sub.w	r9, r4, #4
 80178ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80178be:	f8cd b008 	str.w	fp, [sp, #8]
 80178c2:	464c      	mov	r4, r9
 80178c4:	461d      	mov	r5, r3
 80178c6:	9903      	ldr	r1, [sp, #12]
 80178c8:	e7d7      	b.n	801787a <__hexnan+0x2e>
 80178ca:	2a29      	cmp	r2, #41	; 0x29
 80178cc:	d14a      	bne.n	8017964 <__hexnan+0x118>
 80178ce:	3102      	adds	r1, #2
 80178d0:	f8ca 1000 	str.w	r1, [sl]
 80178d4:	f1bb 0f00 	cmp.w	fp, #0
 80178d8:	d044      	beq.n	8017964 <__hexnan+0x118>
 80178da:	454c      	cmp	r4, r9
 80178dc:	d206      	bcs.n	80178ec <__hexnan+0xa0>
 80178de:	2d07      	cmp	r5, #7
 80178e0:	dc04      	bgt.n	80178ec <__hexnan+0xa0>
 80178e2:	462a      	mov	r2, r5
 80178e4:	4649      	mov	r1, r9
 80178e6:	4620      	mov	r0, r4
 80178e8:	f7ff ff8a 	bl	8017800 <L_shift>
 80178ec:	4544      	cmp	r4, r8
 80178ee:	d928      	bls.n	8017942 <__hexnan+0xf6>
 80178f0:	4643      	mov	r3, r8
 80178f2:	f854 2b04 	ldr.w	r2, [r4], #4
 80178f6:	f843 2b04 	str.w	r2, [r3], #4
 80178fa:	42a6      	cmp	r6, r4
 80178fc:	d2f9      	bcs.n	80178f2 <__hexnan+0xa6>
 80178fe:	2200      	movs	r2, #0
 8017900:	f843 2b04 	str.w	r2, [r3], #4
 8017904:	429e      	cmp	r6, r3
 8017906:	d2fb      	bcs.n	8017900 <__hexnan+0xb4>
 8017908:	6833      	ldr	r3, [r6, #0]
 801790a:	b91b      	cbnz	r3, 8017914 <__hexnan+0xc8>
 801790c:	4546      	cmp	r6, r8
 801790e:	d127      	bne.n	8017960 <__hexnan+0x114>
 8017910:	2301      	movs	r3, #1
 8017912:	6033      	str	r3, [r6, #0]
 8017914:	2005      	movs	r0, #5
 8017916:	e026      	b.n	8017966 <__hexnan+0x11a>
 8017918:	3501      	adds	r5, #1
 801791a:	2d08      	cmp	r5, #8
 801791c:	f10b 0b01 	add.w	fp, fp, #1
 8017920:	dd06      	ble.n	8017930 <__hexnan+0xe4>
 8017922:	4544      	cmp	r4, r8
 8017924:	d9cf      	bls.n	80178c6 <__hexnan+0x7a>
 8017926:	2300      	movs	r3, #0
 8017928:	f844 3c04 	str.w	r3, [r4, #-4]
 801792c:	2501      	movs	r5, #1
 801792e:	3c04      	subs	r4, #4
 8017930:	6822      	ldr	r2, [r4, #0]
 8017932:	f000 000f 	and.w	r0, r0, #15
 8017936:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801793a:	6020      	str	r0, [r4, #0]
 801793c:	e7c3      	b.n	80178c6 <__hexnan+0x7a>
 801793e:	2508      	movs	r5, #8
 8017940:	e7c1      	b.n	80178c6 <__hexnan+0x7a>
 8017942:	9b01      	ldr	r3, [sp, #4]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d0df      	beq.n	8017908 <__hexnan+0xbc>
 8017948:	f04f 32ff 	mov.w	r2, #4294967295
 801794c:	f1c3 0320 	rsb	r3, r3, #32
 8017950:	fa22 f303 	lsr.w	r3, r2, r3
 8017954:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017958:	401a      	ands	r2, r3
 801795a:	f847 2c04 	str.w	r2, [r7, #-4]
 801795e:	e7d3      	b.n	8017908 <__hexnan+0xbc>
 8017960:	3e04      	subs	r6, #4
 8017962:	e7d1      	b.n	8017908 <__hexnan+0xbc>
 8017964:	2004      	movs	r0, #4
 8017966:	b007      	add	sp, #28
 8017968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801796c <__locale_ctype_ptr_l>:
 801796c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017970:	4770      	bx	lr
	...

08017974 <__locale_ctype_ptr>:
 8017974:	4b04      	ldr	r3, [pc, #16]	; (8017988 <__locale_ctype_ptr+0x14>)
 8017976:	4a05      	ldr	r2, [pc, #20]	; (801798c <__locale_ctype_ptr+0x18>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	6a1b      	ldr	r3, [r3, #32]
 801797c:	2b00      	cmp	r3, #0
 801797e:	bf08      	it	eq
 8017980:	4613      	moveq	r3, r2
 8017982:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017986:	4770      	bx	lr
 8017988:	20000028 	.word	0x20000028
 801798c:	2000008c 	.word	0x2000008c

08017990 <__localeconv_l>:
 8017990:	30f0      	adds	r0, #240	; 0xf0
 8017992:	4770      	bx	lr

08017994 <_localeconv_r>:
 8017994:	4b04      	ldr	r3, [pc, #16]	; (80179a8 <_localeconv_r+0x14>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	6a18      	ldr	r0, [r3, #32]
 801799a:	4b04      	ldr	r3, [pc, #16]	; (80179ac <_localeconv_r+0x18>)
 801799c:	2800      	cmp	r0, #0
 801799e:	bf08      	it	eq
 80179a0:	4618      	moveq	r0, r3
 80179a2:	30f0      	adds	r0, #240	; 0xf0
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop
 80179a8:	20000028 	.word	0x20000028
 80179ac:	2000008c 	.word	0x2000008c

080179b0 <__swhatbuf_r>:
 80179b0:	b570      	push	{r4, r5, r6, lr}
 80179b2:	460e      	mov	r6, r1
 80179b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179b8:	2900      	cmp	r1, #0
 80179ba:	b096      	sub	sp, #88	; 0x58
 80179bc:	4614      	mov	r4, r2
 80179be:	461d      	mov	r5, r3
 80179c0:	da07      	bge.n	80179d2 <__swhatbuf_r+0x22>
 80179c2:	2300      	movs	r3, #0
 80179c4:	602b      	str	r3, [r5, #0]
 80179c6:	89b3      	ldrh	r3, [r6, #12]
 80179c8:	061a      	lsls	r2, r3, #24
 80179ca:	d410      	bmi.n	80179ee <__swhatbuf_r+0x3e>
 80179cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179d0:	e00e      	b.n	80179f0 <__swhatbuf_r+0x40>
 80179d2:	466a      	mov	r2, sp
 80179d4:	f001 fd4e 	bl	8019474 <_fstat_r>
 80179d8:	2800      	cmp	r0, #0
 80179da:	dbf2      	blt.n	80179c2 <__swhatbuf_r+0x12>
 80179dc:	9a01      	ldr	r2, [sp, #4]
 80179de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80179e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80179e6:	425a      	negs	r2, r3
 80179e8:	415a      	adcs	r2, r3
 80179ea:	602a      	str	r2, [r5, #0]
 80179ec:	e7ee      	b.n	80179cc <__swhatbuf_r+0x1c>
 80179ee:	2340      	movs	r3, #64	; 0x40
 80179f0:	2000      	movs	r0, #0
 80179f2:	6023      	str	r3, [r4, #0]
 80179f4:	b016      	add	sp, #88	; 0x58
 80179f6:	bd70      	pop	{r4, r5, r6, pc}

080179f8 <__smakebuf_r>:
 80179f8:	898b      	ldrh	r3, [r1, #12]
 80179fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80179fc:	079d      	lsls	r5, r3, #30
 80179fe:	4606      	mov	r6, r0
 8017a00:	460c      	mov	r4, r1
 8017a02:	d507      	bpl.n	8017a14 <__smakebuf_r+0x1c>
 8017a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a08:	6023      	str	r3, [r4, #0]
 8017a0a:	6123      	str	r3, [r4, #16]
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	6163      	str	r3, [r4, #20]
 8017a10:	b002      	add	sp, #8
 8017a12:	bd70      	pop	{r4, r5, r6, pc}
 8017a14:	ab01      	add	r3, sp, #4
 8017a16:	466a      	mov	r2, sp
 8017a18:	f7ff ffca 	bl	80179b0 <__swhatbuf_r>
 8017a1c:	9900      	ldr	r1, [sp, #0]
 8017a1e:	4605      	mov	r5, r0
 8017a20:	4630      	mov	r0, r6
 8017a22:	f000 fc9f 	bl	8018364 <_malloc_r>
 8017a26:	b948      	cbnz	r0, 8017a3c <__smakebuf_r+0x44>
 8017a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a2c:	059a      	lsls	r2, r3, #22
 8017a2e:	d4ef      	bmi.n	8017a10 <__smakebuf_r+0x18>
 8017a30:	f023 0303 	bic.w	r3, r3, #3
 8017a34:	f043 0302 	orr.w	r3, r3, #2
 8017a38:	81a3      	strh	r3, [r4, #12]
 8017a3a:	e7e3      	b.n	8017a04 <__smakebuf_r+0xc>
 8017a3c:	4b0d      	ldr	r3, [pc, #52]	; (8017a74 <__smakebuf_r+0x7c>)
 8017a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a40:	89a3      	ldrh	r3, [r4, #12]
 8017a42:	6020      	str	r0, [r4, #0]
 8017a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a48:	81a3      	strh	r3, [r4, #12]
 8017a4a:	9b00      	ldr	r3, [sp, #0]
 8017a4c:	6163      	str	r3, [r4, #20]
 8017a4e:	9b01      	ldr	r3, [sp, #4]
 8017a50:	6120      	str	r0, [r4, #16]
 8017a52:	b15b      	cbz	r3, 8017a6c <__smakebuf_r+0x74>
 8017a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f001 fd1d 	bl	8019498 <_isatty_r>
 8017a5e:	b128      	cbz	r0, 8017a6c <__smakebuf_r+0x74>
 8017a60:	89a3      	ldrh	r3, [r4, #12]
 8017a62:	f023 0303 	bic.w	r3, r3, #3
 8017a66:	f043 0301 	orr.w	r3, r3, #1
 8017a6a:	81a3      	strh	r3, [r4, #12]
 8017a6c:	89a3      	ldrh	r3, [r4, #12]
 8017a6e:	431d      	orrs	r5, r3
 8017a70:	81a5      	strh	r5, [r4, #12]
 8017a72:	e7cd      	b.n	8017a10 <__smakebuf_r+0x18>
 8017a74:	0801719d 	.word	0x0801719d

08017a78 <malloc>:
 8017a78:	4b02      	ldr	r3, [pc, #8]	; (8017a84 <malloc+0xc>)
 8017a7a:	4601      	mov	r1, r0
 8017a7c:	6818      	ldr	r0, [r3, #0]
 8017a7e:	f000 bc71 	b.w	8018364 <_malloc_r>
 8017a82:	bf00      	nop
 8017a84:	20000028 	.word	0x20000028

08017a88 <__ascii_mbtowc>:
 8017a88:	b082      	sub	sp, #8
 8017a8a:	b901      	cbnz	r1, 8017a8e <__ascii_mbtowc+0x6>
 8017a8c:	a901      	add	r1, sp, #4
 8017a8e:	b142      	cbz	r2, 8017aa2 <__ascii_mbtowc+0x1a>
 8017a90:	b14b      	cbz	r3, 8017aa6 <__ascii_mbtowc+0x1e>
 8017a92:	7813      	ldrb	r3, [r2, #0]
 8017a94:	600b      	str	r3, [r1, #0]
 8017a96:	7812      	ldrb	r2, [r2, #0]
 8017a98:	1c10      	adds	r0, r2, #0
 8017a9a:	bf18      	it	ne
 8017a9c:	2001      	movne	r0, #1
 8017a9e:	b002      	add	sp, #8
 8017aa0:	4770      	bx	lr
 8017aa2:	4610      	mov	r0, r2
 8017aa4:	e7fb      	b.n	8017a9e <__ascii_mbtowc+0x16>
 8017aa6:	f06f 0001 	mvn.w	r0, #1
 8017aaa:	e7f8      	b.n	8017a9e <__ascii_mbtowc+0x16>

08017aac <_Balloc>:
 8017aac:	b570      	push	{r4, r5, r6, lr}
 8017aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	460e      	mov	r6, r1
 8017ab4:	b93d      	cbnz	r5, 8017ac6 <_Balloc+0x1a>
 8017ab6:	2010      	movs	r0, #16
 8017ab8:	f7ff ffde 	bl	8017a78 <malloc>
 8017abc:	6260      	str	r0, [r4, #36]	; 0x24
 8017abe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ac2:	6005      	str	r5, [r0, #0]
 8017ac4:	60c5      	str	r5, [r0, #12]
 8017ac6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017ac8:	68eb      	ldr	r3, [r5, #12]
 8017aca:	b183      	cbz	r3, 8017aee <_Balloc+0x42>
 8017acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ace:	68db      	ldr	r3, [r3, #12]
 8017ad0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017ad4:	b9b8      	cbnz	r0, 8017b06 <_Balloc+0x5a>
 8017ad6:	2101      	movs	r1, #1
 8017ad8:	fa01 f506 	lsl.w	r5, r1, r6
 8017adc:	1d6a      	adds	r2, r5, #5
 8017ade:	0092      	lsls	r2, r2, #2
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f000 fbe2 	bl	80182aa <_calloc_r>
 8017ae6:	b160      	cbz	r0, 8017b02 <_Balloc+0x56>
 8017ae8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017aec:	e00e      	b.n	8017b0c <_Balloc+0x60>
 8017aee:	2221      	movs	r2, #33	; 0x21
 8017af0:	2104      	movs	r1, #4
 8017af2:	4620      	mov	r0, r4
 8017af4:	f000 fbd9 	bl	80182aa <_calloc_r>
 8017af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017afa:	60e8      	str	r0, [r5, #12]
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d1e4      	bne.n	8017acc <_Balloc+0x20>
 8017b02:	2000      	movs	r0, #0
 8017b04:	bd70      	pop	{r4, r5, r6, pc}
 8017b06:	6802      	ldr	r2, [r0, #0]
 8017b08:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017b12:	e7f7      	b.n	8017b04 <_Balloc+0x58>

08017b14 <_Bfree>:
 8017b14:	b570      	push	{r4, r5, r6, lr}
 8017b16:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017b18:	4606      	mov	r6, r0
 8017b1a:	460d      	mov	r5, r1
 8017b1c:	b93c      	cbnz	r4, 8017b2e <_Bfree+0x1a>
 8017b1e:	2010      	movs	r0, #16
 8017b20:	f7ff ffaa 	bl	8017a78 <malloc>
 8017b24:	6270      	str	r0, [r6, #36]	; 0x24
 8017b26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b2a:	6004      	str	r4, [r0, #0]
 8017b2c:	60c4      	str	r4, [r0, #12]
 8017b2e:	b13d      	cbz	r5, 8017b40 <_Bfree+0x2c>
 8017b30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017b32:	686a      	ldr	r2, [r5, #4]
 8017b34:	68db      	ldr	r3, [r3, #12]
 8017b36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017b3a:	6029      	str	r1, [r5, #0]
 8017b3c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017b40:	bd70      	pop	{r4, r5, r6, pc}

08017b42 <__multadd>:
 8017b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b46:	690d      	ldr	r5, [r1, #16]
 8017b48:	461f      	mov	r7, r3
 8017b4a:	4606      	mov	r6, r0
 8017b4c:	460c      	mov	r4, r1
 8017b4e:	f101 0c14 	add.w	ip, r1, #20
 8017b52:	2300      	movs	r3, #0
 8017b54:	f8dc 0000 	ldr.w	r0, [ip]
 8017b58:	b281      	uxth	r1, r0
 8017b5a:	fb02 7101 	mla	r1, r2, r1, r7
 8017b5e:	0c0f      	lsrs	r7, r1, #16
 8017b60:	0c00      	lsrs	r0, r0, #16
 8017b62:	fb02 7000 	mla	r0, r2, r0, r7
 8017b66:	b289      	uxth	r1, r1
 8017b68:	3301      	adds	r3, #1
 8017b6a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017b6e:	429d      	cmp	r5, r3
 8017b70:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017b74:	f84c 1b04 	str.w	r1, [ip], #4
 8017b78:	dcec      	bgt.n	8017b54 <__multadd+0x12>
 8017b7a:	b1d7      	cbz	r7, 8017bb2 <__multadd+0x70>
 8017b7c:	68a3      	ldr	r3, [r4, #8]
 8017b7e:	42ab      	cmp	r3, r5
 8017b80:	dc12      	bgt.n	8017ba8 <__multadd+0x66>
 8017b82:	6861      	ldr	r1, [r4, #4]
 8017b84:	4630      	mov	r0, r6
 8017b86:	3101      	adds	r1, #1
 8017b88:	f7ff ff90 	bl	8017aac <_Balloc>
 8017b8c:	6922      	ldr	r2, [r4, #16]
 8017b8e:	3202      	adds	r2, #2
 8017b90:	f104 010c 	add.w	r1, r4, #12
 8017b94:	4680      	mov	r8, r0
 8017b96:	0092      	lsls	r2, r2, #2
 8017b98:	300c      	adds	r0, #12
 8017b9a:	f7fc fc8f 	bl	80144bc <memcpy>
 8017b9e:	4621      	mov	r1, r4
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	f7ff ffb7 	bl	8017b14 <_Bfree>
 8017ba6:	4644      	mov	r4, r8
 8017ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017bac:	3501      	adds	r5, #1
 8017bae:	615f      	str	r7, [r3, #20]
 8017bb0:	6125      	str	r5, [r4, #16]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017bb8 <__s2b>:
 8017bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bbc:	460c      	mov	r4, r1
 8017bbe:	4615      	mov	r5, r2
 8017bc0:	461f      	mov	r7, r3
 8017bc2:	2209      	movs	r2, #9
 8017bc4:	3308      	adds	r3, #8
 8017bc6:	4606      	mov	r6, r0
 8017bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8017bcc:	2100      	movs	r1, #0
 8017bce:	2201      	movs	r2, #1
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	db20      	blt.n	8017c16 <__s2b+0x5e>
 8017bd4:	4630      	mov	r0, r6
 8017bd6:	f7ff ff69 	bl	8017aac <_Balloc>
 8017bda:	9b08      	ldr	r3, [sp, #32]
 8017bdc:	6143      	str	r3, [r0, #20]
 8017bde:	2d09      	cmp	r5, #9
 8017be0:	f04f 0301 	mov.w	r3, #1
 8017be4:	6103      	str	r3, [r0, #16]
 8017be6:	dd19      	ble.n	8017c1c <__s2b+0x64>
 8017be8:	f104 0809 	add.w	r8, r4, #9
 8017bec:	46c1      	mov	r9, r8
 8017bee:	442c      	add	r4, r5
 8017bf0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017bf4:	4601      	mov	r1, r0
 8017bf6:	3b30      	subs	r3, #48	; 0x30
 8017bf8:	220a      	movs	r2, #10
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	f7ff ffa1 	bl	8017b42 <__multadd>
 8017c00:	45a1      	cmp	r9, r4
 8017c02:	d1f5      	bne.n	8017bf0 <__s2b+0x38>
 8017c04:	eb08 0405 	add.w	r4, r8, r5
 8017c08:	3c08      	subs	r4, #8
 8017c0a:	1b2d      	subs	r5, r5, r4
 8017c0c:	1963      	adds	r3, r4, r5
 8017c0e:	42bb      	cmp	r3, r7
 8017c10:	db07      	blt.n	8017c22 <__s2b+0x6a>
 8017c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c16:	0052      	lsls	r2, r2, #1
 8017c18:	3101      	adds	r1, #1
 8017c1a:	e7d9      	b.n	8017bd0 <__s2b+0x18>
 8017c1c:	340a      	adds	r4, #10
 8017c1e:	2509      	movs	r5, #9
 8017c20:	e7f3      	b.n	8017c0a <__s2b+0x52>
 8017c22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017c26:	4601      	mov	r1, r0
 8017c28:	3b30      	subs	r3, #48	; 0x30
 8017c2a:	220a      	movs	r2, #10
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	f7ff ff88 	bl	8017b42 <__multadd>
 8017c32:	e7eb      	b.n	8017c0c <__s2b+0x54>

08017c34 <__hi0bits>:
 8017c34:	0c02      	lsrs	r2, r0, #16
 8017c36:	0412      	lsls	r2, r2, #16
 8017c38:	4603      	mov	r3, r0
 8017c3a:	b9b2      	cbnz	r2, 8017c6a <__hi0bits+0x36>
 8017c3c:	0403      	lsls	r3, r0, #16
 8017c3e:	2010      	movs	r0, #16
 8017c40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017c44:	bf04      	itt	eq
 8017c46:	021b      	lsleq	r3, r3, #8
 8017c48:	3008      	addeq	r0, #8
 8017c4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017c4e:	bf04      	itt	eq
 8017c50:	011b      	lsleq	r3, r3, #4
 8017c52:	3004      	addeq	r0, #4
 8017c54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017c58:	bf04      	itt	eq
 8017c5a:	009b      	lsleq	r3, r3, #2
 8017c5c:	3002      	addeq	r0, #2
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	db06      	blt.n	8017c70 <__hi0bits+0x3c>
 8017c62:	005b      	lsls	r3, r3, #1
 8017c64:	d503      	bpl.n	8017c6e <__hi0bits+0x3a>
 8017c66:	3001      	adds	r0, #1
 8017c68:	4770      	bx	lr
 8017c6a:	2000      	movs	r0, #0
 8017c6c:	e7e8      	b.n	8017c40 <__hi0bits+0xc>
 8017c6e:	2020      	movs	r0, #32
 8017c70:	4770      	bx	lr

08017c72 <__lo0bits>:
 8017c72:	6803      	ldr	r3, [r0, #0]
 8017c74:	f013 0207 	ands.w	r2, r3, #7
 8017c78:	4601      	mov	r1, r0
 8017c7a:	d00b      	beq.n	8017c94 <__lo0bits+0x22>
 8017c7c:	07da      	lsls	r2, r3, #31
 8017c7e:	d423      	bmi.n	8017cc8 <__lo0bits+0x56>
 8017c80:	0798      	lsls	r0, r3, #30
 8017c82:	bf49      	itett	mi
 8017c84:	085b      	lsrmi	r3, r3, #1
 8017c86:	089b      	lsrpl	r3, r3, #2
 8017c88:	2001      	movmi	r0, #1
 8017c8a:	600b      	strmi	r3, [r1, #0]
 8017c8c:	bf5c      	itt	pl
 8017c8e:	600b      	strpl	r3, [r1, #0]
 8017c90:	2002      	movpl	r0, #2
 8017c92:	4770      	bx	lr
 8017c94:	b298      	uxth	r0, r3
 8017c96:	b9a8      	cbnz	r0, 8017cc4 <__lo0bits+0x52>
 8017c98:	0c1b      	lsrs	r3, r3, #16
 8017c9a:	2010      	movs	r0, #16
 8017c9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017ca0:	bf04      	itt	eq
 8017ca2:	0a1b      	lsreq	r3, r3, #8
 8017ca4:	3008      	addeq	r0, #8
 8017ca6:	071a      	lsls	r2, r3, #28
 8017ca8:	bf04      	itt	eq
 8017caa:	091b      	lsreq	r3, r3, #4
 8017cac:	3004      	addeq	r0, #4
 8017cae:	079a      	lsls	r2, r3, #30
 8017cb0:	bf04      	itt	eq
 8017cb2:	089b      	lsreq	r3, r3, #2
 8017cb4:	3002      	addeq	r0, #2
 8017cb6:	07da      	lsls	r2, r3, #31
 8017cb8:	d402      	bmi.n	8017cc0 <__lo0bits+0x4e>
 8017cba:	085b      	lsrs	r3, r3, #1
 8017cbc:	d006      	beq.n	8017ccc <__lo0bits+0x5a>
 8017cbe:	3001      	adds	r0, #1
 8017cc0:	600b      	str	r3, [r1, #0]
 8017cc2:	4770      	bx	lr
 8017cc4:	4610      	mov	r0, r2
 8017cc6:	e7e9      	b.n	8017c9c <__lo0bits+0x2a>
 8017cc8:	2000      	movs	r0, #0
 8017cca:	4770      	bx	lr
 8017ccc:	2020      	movs	r0, #32
 8017cce:	4770      	bx	lr

08017cd0 <__i2b>:
 8017cd0:	b510      	push	{r4, lr}
 8017cd2:	460c      	mov	r4, r1
 8017cd4:	2101      	movs	r1, #1
 8017cd6:	f7ff fee9 	bl	8017aac <_Balloc>
 8017cda:	2201      	movs	r2, #1
 8017cdc:	6144      	str	r4, [r0, #20]
 8017cde:	6102      	str	r2, [r0, #16]
 8017ce0:	bd10      	pop	{r4, pc}

08017ce2 <__multiply>:
 8017ce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce6:	4614      	mov	r4, r2
 8017ce8:	690a      	ldr	r2, [r1, #16]
 8017cea:	6923      	ldr	r3, [r4, #16]
 8017cec:	429a      	cmp	r2, r3
 8017cee:	bfb8      	it	lt
 8017cf0:	460b      	movlt	r3, r1
 8017cf2:	4688      	mov	r8, r1
 8017cf4:	bfbc      	itt	lt
 8017cf6:	46a0      	movlt	r8, r4
 8017cf8:	461c      	movlt	r4, r3
 8017cfa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017cfe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017d0a:	eb07 0609 	add.w	r6, r7, r9
 8017d0e:	42b3      	cmp	r3, r6
 8017d10:	bfb8      	it	lt
 8017d12:	3101      	addlt	r1, #1
 8017d14:	f7ff feca 	bl	8017aac <_Balloc>
 8017d18:	f100 0514 	add.w	r5, r0, #20
 8017d1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017d20:	462b      	mov	r3, r5
 8017d22:	2200      	movs	r2, #0
 8017d24:	4573      	cmp	r3, lr
 8017d26:	d316      	bcc.n	8017d56 <__multiply+0x74>
 8017d28:	f104 0214 	add.w	r2, r4, #20
 8017d2c:	f108 0114 	add.w	r1, r8, #20
 8017d30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017d34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	9b00      	ldr	r3, [sp, #0]
 8017d3c:	9201      	str	r2, [sp, #4]
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d80c      	bhi.n	8017d5c <__multiply+0x7a>
 8017d42:	2e00      	cmp	r6, #0
 8017d44:	dd03      	ble.n	8017d4e <__multiply+0x6c>
 8017d46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d05d      	beq.n	8017e0a <__multiply+0x128>
 8017d4e:	6106      	str	r6, [r0, #16]
 8017d50:	b003      	add	sp, #12
 8017d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d56:	f843 2b04 	str.w	r2, [r3], #4
 8017d5a:	e7e3      	b.n	8017d24 <__multiply+0x42>
 8017d5c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017d60:	f1bb 0f00 	cmp.w	fp, #0
 8017d64:	d023      	beq.n	8017dae <__multiply+0xcc>
 8017d66:	4689      	mov	r9, r1
 8017d68:	46ac      	mov	ip, r5
 8017d6a:	f04f 0800 	mov.w	r8, #0
 8017d6e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d72:	f8dc a000 	ldr.w	sl, [ip]
 8017d76:	b2a3      	uxth	r3, r4
 8017d78:	fa1f fa8a 	uxth.w	sl, sl
 8017d7c:	fb0b a303 	mla	r3, fp, r3, sl
 8017d80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017d84:	f8dc 4000 	ldr.w	r4, [ip]
 8017d88:	4443      	add	r3, r8
 8017d8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017d8e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017d92:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017d96:	46e2      	mov	sl, ip
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017d9e:	454f      	cmp	r7, r9
 8017da0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017da4:	f84a 3b04 	str.w	r3, [sl], #4
 8017da8:	d82b      	bhi.n	8017e02 <__multiply+0x120>
 8017daa:	f8cc 8004 	str.w	r8, [ip, #4]
 8017dae:	9b01      	ldr	r3, [sp, #4]
 8017db0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017db4:	3204      	adds	r2, #4
 8017db6:	f1ba 0f00 	cmp.w	sl, #0
 8017dba:	d020      	beq.n	8017dfe <__multiply+0x11c>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	4689      	mov	r9, r1
 8017dc0:	46a8      	mov	r8, r5
 8017dc2:	f04f 0b00 	mov.w	fp, #0
 8017dc6:	f8b9 c000 	ldrh.w	ip, [r9]
 8017dca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017dce:	fb0a 440c 	mla	r4, sl, ip, r4
 8017dd2:	445c      	add	r4, fp
 8017dd4:	46c4      	mov	ip, r8
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017ddc:	f84c 3b04 	str.w	r3, [ip], #4
 8017de0:	f859 3b04 	ldr.w	r3, [r9], #4
 8017de4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017de8:	0c1b      	lsrs	r3, r3, #16
 8017dea:	fb0a b303 	mla	r3, sl, r3, fp
 8017dee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017df2:	454f      	cmp	r7, r9
 8017df4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017df8:	d805      	bhi.n	8017e06 <__multiply+0x124>
 8017dfa:	f8c8 3004 	str.w	r3, [r8, #4]
 8017dfe:	3504      	adds	r5, #4
 8017e00:	e79b      	b.n	8017d3a <__multiply+0x58>
 8017e02:	46d4      	mov	ip, sl
 8017e04:	e7b3      	b.n	8017d6e <__multiply+0x8c>
 8017e06:	46e0      	mov	r8, ip
 8017e08:	e7dd      	b.n	8017dc6 <__multiply+0xe4>
 8017e0a:	3e01      	subs	r6, #1
 8017e0c:	e799      	b.n	8017d42 <__multiply+0x60>
	...

08017e10 <__pow5mult>:
 8017e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e14:	4615      	mov	r5, r2
 8017e16:	f012 0203 	ands.w	r2, r2, #3
 8017e1a:	4606      	mov	r6, r0
 8017e1c:	460f      	mov	r7, r1
 8017e1e:	d007      	beq.n	8017e30 <__pow5mult+0x20>
 8017e20:	3a01      	subs	r2, #1
 8017e22:	4c21      	ldr	r4, [pc, #132]	; (8017ea8 <__pow5mult+0x98>)
 8017e24:	2300      	movs	r3, #0
 8017e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e2a:	f7ff fe8a 	bl	8017b42 <__multadd>
 8017e2e:	4607      	mov	r7, r0
 8017e30:	10ad      	asrs	r5, r5, #2
 8017e32:	d035      	beq.n	8017ea0 <__pow5mult+0x90>
 8017e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017e36:	b93c      	cbnz	r4, 8017e48 <__pow5mult+0x38>
 8017e38:	2010      	movs	r0, #16
 8017e3a:	f7ff fe1d 	bl	8017a78 <malloc>
 8017e3e:	6270      	str	r0, [r6, #36]	; 0x24
 8017e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017e44:	6004      	str	r4, [r0, #0]
 8017e46:	60c4      	str	r4, [r0, #12]
 8017e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017e50:	b94c      	cbnz	r4, 8017e66 <__pow5mult+0x56>
 8017e52:	f240 2171 	movw	r1, #625	; 0x271
 8017e56:	4630      	mov	r0, r6
 8017e58:	f7ff ff3a 	bl	8017cd0 <__i2b>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017e62:	4604      	mov	r4, r0
 8017e64:	6003      	str	r3, [r0, #0]
 8017e66:	f04f 0800 	mov.w	r8, #0
 8017e6a:	07eb      	lsls	r3, r5, #31
 8017e6c:	d50a      	bpl.n	8017e84 <__pow5mult+0x74>
 8017e6e:	4639      	mov	r1, r7
 8017e70:	4622      	mov	r2, r4
 8017e72:	4630      	mov	r0, r6
 8017e74:	f7ff ff35 	bl	8017ce2 <__multiply>
 8017e78:	4639      	mov	r1, r7
 8017e7a:	4681      	mov	r9, r0
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	f7ff fe49 	bl	8017b14 <_Bfree>
 8017e82:	464f      	mov	r7, r9
 8017e84:	106d      	asrs	r5, r5, #1
 8017e86:	d00b      	beq.n	8017ea0 <__pow5mult+0x90>
 8017e88:	6820      	ldr	r0, [r4, #0]
 8017e8a:	b938      	cbnz	r0, 8017e9c <__pow5mult+0x8c>
 8017e8c:	4622      	mov	r2, r4
 8017e8e:	4621      	mov	r1, r4
 8017e90:	4630      	mov	r0, r6
 8017e92:	f7ff ff26 	bl	8017ce2 <__multiply>
 8017e96:	6020      	str	r0, [r4, #0]
 8017e98:	f8c0 8000 	str.w	r8, [r0]
 8017e9c:	4604      	mov	r4, r0
 8017e9e:	e7e4      	b.n	8017e6a <__pow5mult+0x5a>
 8017ea0:	4638      	mov	r0, r7
 8017ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ea6:	bf00      	nop
 8017ea8:	08019ae0 	.word	0x08019ae0

08017eac <__lshift>:
 8017eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eb0:	460c      	mov	r4, r1
 8017eb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017eb6:	6923      	ldr	r3, [r4, #16]
 8017eb8:	6849      	ldr	r1, [r1, #4]
 8017eba:	eb0a 0903 	add.w	r9, sl, r3
 8017ebe:	68a3      	ldr	r3, [r4, #8]
 8017ec0:	4607      	mov	r7, r0
 8017ec2:	4616      	mov	r6, r2
 8017ec4:	f109 0501 	add.w	r5, r9, #1
 8017ec8:	42ab      	cmp	r3, r5
 8017eca:	db32      	blt.n	8017f32 <__lshift+0x86>
 8017ecc:	4638      	mov	r0, r7
 8017ece:	f7ff fded 	bl	8017aac <_Balloc>
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	4680      	mov	r8, r0
 8017ed6:	f100 0114 	add.w	r1, r0, #20
 8017eda:	461a      	mov	r2, r3
 8017edc:	4553      	cmp	r3, sl
 8017ede:	db2b      	blt.n	8017f38 <__lshift+0x8c>
 8017ee0:	6920      	ldr	r0, [r4, #16]
 8017ee2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ee6:	f104 0314 	add.w	r3, r4, #20
 8017eea:	f016 021f 	ands.w	r2, r6, #31
 8017eee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ef2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ef6:	d025      	beq.n	8017f44 <__lshift+0x98>
 8017ef8:	f1c2 0e20 	rsb	lr, r2, #32
 8017efc:	2000      	movs	r0, #0
 8017efe:	681e      	ldr	r6, [r3, #0]
 8017f00:	468a      	mov	sl, r1
 8017f02:	4096      	lsls	r6, r2
 8017f04:	4330      	orrs	r0, r6
 8017f06:	f84a 0b04 	str.w	r0, [sl], #4
 8017f0a:	f853 0b04 	ldr.w	r0, [r3], #4
 8017f0e:	459c      	cmp	ip, r3
 8017f10:	fa20 f00e 	lsr.w	r0, r0, lr
 8017f14:	d814      	bhi.n	8017f40 <__lshift+0x94>
 8017f16:	6048      	str	r0, [r1, #4]
 8017f18:	b108      	cbz	r0, 8017f1e <__lshift+0x72>
 8017f1a:	f109 0502 	add.w	r5, r9, #2
 8017f1e:	3d01      	subs	r5, #1
 8017f20:	4638      	mov	r0, r7
 8017f22:	f8c8 5010 	str.w	r5, [r8, #16]
 8017f26:	4621      	mov	r1, r4
 8017f28:	f7ff fdf4 	bl	8017b14 <_Bfree>
 8017f2c:	4640      	mov	r0, r8
 8017f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f32:	3101      	adds	r1, #1
 8017f34:	005b      	lsls	r3, r3, #1
 8017f36:	e7c7      	b.n	8017ec8 <__lshift+0x1c>
 8017f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	e7cd      	b.n	8017edc <__lshift+0x30>
 8017f40:	4651      	mov	r1, sl
 8017f42:	e7dc      	b.n	8017efe <__lshift+0x52>
 8017f44:	3904      	subs	r1, #4
 8017f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017f4e:	459c      	cmp	ip, r3
 8017f50:	d8f9      	bhi.n	8017f46 <__lshift+0x9a>
 8017f52:	e7e4      	b.n	8017f1e <__lshift+0x72>

08017f54 <__mcmp>:
 8017f54:	6903      	ldr	r3, [r0, #16]
 8017f56:	690a      	ldr	r2, [r1, #16]
 8017f58:	1a9b      	subs	r3, r3, r2
 8017f5a:	b530      	push	{r4, r5, lr}
 8017f5c:	d10c      	bne.n	8017f78 <__mcmp+0x24>
 8017f5e:	0092      	lsls	r2, r2, #2
 8017f60:	3014      	adds	r0, #20
 8017f62:	3114      	adds	r1, #20
 8017f64:	1884      	adds	r4, r0, r2
 8017f66:	4411      	add	r1, r2
 8017f68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017f6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017f70:	4295      	cmp	r5, r2
 8017f72:	d003      	beq.n	8017f7c <__mcmp+0x28>
 8017f74:	d305      	bcc.n	8017f82 <__mcmp+0x2e>
 8017f76:	2301      	movs	r3, #1
 8017f78:	4618      	mov	r0, r3
 8017f7a:	bd30      	pop	{r4, r5, pc}
 8017f7c:	42a0      	cmp	r0, r4
 8017f7e:	d3f3      	bcc.n	8017f68 <__mcmp+0x14>
 8017f80:	e7fa      	b.n	8017f78 <__mcmp+0x24>
 8017f82:	f04f 33ff 	mov.w	r3, #4294967295
 8017f86:	e7f7      	b.n	8017f78 <__mcmp+0x24>

08017f88 <__mdiff>:
 8017f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f8c:	460d      	mov	r5, r1
 8017f8e:	4607      	mov	r7, r0
 8017f90:	4611      	mov	r1, r2
 8017f92:	4628      	mov	r0, r5
 8017f94:	4614      	mov	r4, r2
 8017f96:	f7ff ffdd 	bl	8017f54 <__mcmp>
 8017f9a:	1e06      	subs	r6, r0, #0
 8017f9c:	d108      	bne.n	8017fb0 <__mdiff+0x28>
 8017f9e:	4631      	mov	r1, r6
 8017fa0:	4638      	mov	r0, r7
 8017fa2:	f7ff fd83 	bl	8017aac <_Balloc>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb0:	bfa4      	itt	ge
 8017fb2:	4623      	movge	r3, r4
 8017fb4:	462c      	movge	r4, r5
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	6861      	ldr	r1, [r4, #4]
 8017fba:	bfa6      	itte	ge
 8017fbc:	461d      	movge	r5, r3
 8017fbe:	2600      	movge	r6, #0
 8017fc0:	2601      	movlt	r6, #1
 8017fc2:	f7ff fd73 	bl	8017aac <_Balloc>
 8017fc6:	692b      	ldr	r3, [r5, #16]
 8017fc8:	60c6      	str	r6, [r0, #12]
 8017fca:	6926      	ldr	r6, [r4, #16]
 8017fcc:	f105 0914 	add.w	r9, r5, #20
 8017fd0:	f104 0214 	add.w	r2, r4, #20
 8017fd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017fd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017fdc:	f100 0514 	add.w	r5, r0, #20
 8017fe0:	f04f 0e00 	mov.w	lr, #0
 8017fe4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017fe8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017fec:	fa1e f18a 	uxtah	r1, lr, sl
 8017ff0:	b2a3      	uxth	r3, r4
 8017ff2:	1ac9      	subs	r1, r1, r3
 8017ff4:	0c23      	lsrs	r3, r4, #16
 8017ff6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017ffa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017ffe:	b289      	uxth	r1, r1
 8018000:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018004:	45c8      	cmp	r8, r9
 8018006:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801800a:	4694      	mov	ip, r2
 801800c:	f845 3b04 	str.w	r3, [r5], #4
 8018010:	d8e8      	bhi.n	8017fe4 <__mdiff+0x5c>
 8018012:	45bc      	cmp	ip, r7
 8018014:	d304      	bcc.n	8018020 <__mdiff+0x98>
 8018016:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801801a:	b183      	cbz	r3, 801803e <__mdiff+0xb6>
 801801c:	6106      	str	r6, [r0, #16]
 801801e:	e7c5      	b.n	8017fac <__mdiff+0x24>
 8018020:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018024:	fa1e f381 	uxtah	r3, lr, r1
 8018028:	141a      	asrs	r2, r3, #16
 801802a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801802e:	b29b      	uxth	r3, r3
 8018030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018034:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018038:	f845 3b04 	str.w	r3, [r5], #4
 801803c:	e7e9      	b.n	8018012 <__mdiff+0x8a>
 801803e:	3e01      	subs	r6, #1
 8018040:	e7e9      	b.n	8018016 <__mdiff+0x8e>
	...

08018044 <__ulp>:
 8018044:	4b12      	ldr	r3, [pc, #72]	; (8018090 <__ulp+0x4c>)
 8018046:	ee10 2a90 	vmov	r2, s1
 801804a:	401a      	ands	r2, r3
 801804c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018050:	2b00      	cmp	r3, #0
 8018052:	dd04      	ble.n	801805e <__ulp+0x1a>
 8018054:	2000      	movs	r0, #0
 8018056:	4619      	mov	r1, r3
 8018058:	ec41 0b10 	vmov	d0, r0, r1
 801805c:	4770      	bx	lr
 801805e:	425b      	negs	r3, r3
 8018060:	151b      	asrs	r3, r3, #20
 8018062:	2b13      	cmp	r3, #19
 8018064:	f04f 0000 	mov.w	r0, #0
 8018068:	f04f 0100 	mov.w	r1, #0
 801806c:	dc04      	bgt.n	8018078 <__ulp+0x34>
 801806e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018072:	fa42 f103 	asr.w	r1, r2, r3
 8018076:	e7ef      	b.n	8018058 <__ulp+0x14>
 8018078:	3b14      	subs	r3, #20
 801807a:	2b1e      	cmp	r3, #30
 801807c:	f04f 0201 	mov.w	r2, #1
 8018080:	bfda      	itte	le
 8018082:	f1c3 031f 	rsble	r3, r3, #31
 8018086:	fa02 f303 	lslle.w	r3, r2, r3
 801808a:	4613      	movgt	r3, r2
 801808c:	4618      	mov	r0, r3
 801808e:	e7e3      	b.n	8018058 <__ulp+0x14>
 8018090:	7ff00000 	.word	0x7ff00000

08018094 <__b2d>:
 8018094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018096:	6905      	ldr	r5, [r0, #16]
 8018098:	f100 0714 	add.w	r7, r0, #20
 801809c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80180a0:	1f2e      	subs	r6, r5, #4
 80180a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80180a6:	4620      	mov	r0, r4
 80180a8:	f7ff fdc4 	bl	8017c34 <__hi0bits>
 80180ac:	f1c0 0320 	rsb	r3, r0, #32
 80180b0:	280a      	cmp	r0, #10
 80180b2:	600b      	str	r3, [r1, #0]
 80180b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801812c <__b2d+0x98>
 80180b8:	dc14      	bgt.n	80180e4 <__b2d+0x50>
 80180ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80180be:	fa24 f10e 	lsr.w	r1, r4, lr
 80180c2:	42b7      	cmp	r7, r6
 80180c4:	ea41 030c 	orr.w	r3, r1, ip
 80180c8:	bf34      	ite	cc
 80180ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80180ce:	2100      	movcs	r1, #0
 80180d0:	3015      	adds	r0, #21
 80180d2:	fa04 f000 	lsl.w	r0, r4, r0
 80180d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80180da:	ea40 0201 	orr.w	r2, r0, r1
 80180de:	ec43 2b10 	vmov	d0, r2, r3
 80180e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180e4:	42b7      	cmp	r7, r6
 80180e6:	bf3a      	itte	cc
 80180e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80180ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80180f0:	2100      	movcs	r1, #0
 80180f2:	380b      	subs	r0, #11
 80180f4:	d015      	beq.n	8018122 <__b2d+0x8e>
 80180f6:	4084      	lsls	r4, r0
 80180f8:	f1c0 0520 	rsb	r5, r0, #32
 80180fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018100:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018104:	42be      	cmp	r6, r7
 8018106:	fa21 fc05 	lsr.w	ip, r1, r5
 801810a:	ea44 030c 	orr.w	r3, r4, ip
 801810e:	bf8c      	ite	hi
 8018110:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018114:	2400      	movls	r4, #0
 8018116:	fa01 f000 	lsl.w	r0, r1, r0
 801811a:	40ec      	lsrs	r4, r5
 801811c:	ea40 0204 	orr.w	r2, r0, r4
 8018120:	e7dd      	b.n	80180de <__b2d+0x4a>
 8018122:	ea44 030c 	orr.w	r3, r4, ip
 8018126:	460a      	mov	r2, r1
 8018128:	e7d9      	b.n	80180de <__b2d+0x4a>
 801812a:	bf00      	nop
 801812c:	3ff00000 	.word	0x3ff00000

08018130 <__d2b>:
 8018130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018134:	460e      	mov	r6, r1
 8018136:	2101      	movs	r1, #1
 8018138:	ec59 8b10 	vmov	r8, r9, d0
 801813c:	4615      	mov	r5, r2
 801813e:	f7ff fcb5 	bl	8017aac <_Balloc>
 8018142:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018146:	4607      	mov	r7, r0
 8018148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801814c:	bb34      	cbnz	r4, 801819c <__d2b+0x6c>
 801814e:	9301      	str	r3, [sp, #4]
 8018150:	f1b8 0300 	subs.w	r3, r8, #0
 8018154:	d027      	beq.n	80181a6 <__d2b+0x76>
 8018156:	a802      	add	r0, sp, #8
 8018158:	f840 3d08 	str.w	r3, [r0, #-8]!
 801815c:	f7ff fd89 	bl	8017c72 <__lo0bits>
 8018160:	9900      	ldr	r1, [sp, #0]
 8018162:	b1f0      	cbz	r0, 80181a2 <__d2b+0x72>
 8018164:	9a01      	ldr	r2, [sp, #4]
 8018166:	f1c0 0320 	rsb	r3, r0, #32
 801816a:	fa02 f303 	lsl.w	r3, r2, r3
 801816e:	430b      	orrs	r3, r1
 8018170:	40c2      	lsrs	r2, r0
 8018172:	617b      	str	r3, [r7, #20]
 8018174:	9201      	str	r2, [sp, #4]
 8018176:	9b01      	ldr	r3, [sp, #4]
 8018178:	61bb      	str	r3, [r7, #24]
 801817a:	2b00      	cmp	r3, #0
 801817c:	bf14      	ite	ne
 801817e:	2102      	movne	r1, #2
 8018180:	2101      	moveq	r1, #1
 8018182:	6139      	str	r1, [r7, #16]
 8018184:	b1c4      	cbz	r4, 80181b8 <__d2b+0x88>
 8018186:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801818a:	4404      	add	r4, r0
 801818c:	6034      	str	r4, [r6, #0]
 801818e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018192:	6028      	str	r0, [r5, #0]
 8018194:	4638      	mov	r0, r7
 8018196:	b003      	add	sp, #12
 8018198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801819c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80181a0:	e7d5      	b.n	801814e <__d2b+0x1e>
 80181a2:	6179      	str	r1, [r7, #20]
 80181a4:	e7e7      	b.n	8018176 <__d2b+0x46>
 80181a6:	a801      	add	r0, sp, #4
 80181a8:	f7ff fd63 	bl	8017c72 <__lo0bits>
 80181ac:	9b01      	ldr	r3, [sp, #4]
 80181ae:	617b      	str	r3, [r7, #20]
 80181b0:	2101      	movs	r1, #1
 80181b2:	6139      	str	r1, [r7, #16]
 80181b4:	3020      	adds	r0, #32
 80181b6:	e7e5      	b.n	8018184 <__d2b+0x54>
 80181b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80181bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80181c0:	6030      	str	r0, [r6, #0]
 80181c2:	6918      	ldr	r0, [r3, #16]
 80181c4:	f7ff fd36 	bl	8017c34 <__hi0bits>
 80181c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80181cc:	e7e1      	b.n	8018192 <__d2b+0x62>

080181ce <__ratio>:
 80181ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d2:	4688      	mov	r8, r1
 80181d4:	4669      	mov	r1, sp
 80181d6:	4681      	mov	r9, r0
 80181d8:	f7ff ff5c 	bl	8018094 <__b2d>
 80181dc:	a901      	add	r1, sp, #4
 80181de:	4640      	mov	r0, r8
 80181e0:	ec57 6b10 	vmov	r6, r7, d0
 80181e4:	f7ff ff56 	bl	8018094 <__b2d>
 80181e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80181ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80181f0:	eba3 0c02 	sub.w	ip, r3, r2
 80181f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80181f8:	1a9b      	subs	r3, r3, r2
 80181fa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80181fe:	ec5b ab10 	vmov	sl, fp, d0
 8018202:	2b00      	cmp	r3, #0
 8018204:	bfce      	itee	gt
 8018206:	463a      	movgt	r2, r7
 8018208:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801820c:	465a      	movle	r2, fp
 801820e:	4659      	mov	r1, fp
 8018210:	463d      	mov	r5, r7
 8018212:	bfd4      	ite	le
 8018214:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018218:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801821c:	4630      	mov	r0, r6
 801821e:	ee10 2a10 	vmov	r2, s0
 8018222:	460b      	mov	r3, r1
 8018224:	4629      	mov	r1, r5
 8018226:	f7f0 fa49 	bl	80086bc <__aeabi_ddiv>
 801822a:	ec41 0b10 	vmov	d0, r0, r1
 801822e:	b003      	add	sp, #12
 8018230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018234 <__copybits>:
 8018234:	3901      	subs	r1, #1
 8018236:	b510      	push	{r4, lr}
 8018238:	1149      	asrs	r1, r1, #5
 801823a:	6914      	ldr	r4, [r2, #16]
 801823c:	3101      	adds	r1, #1
 801823e:	f102 0314 	add.w	r3, r2, #20
 8018242:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018246:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801824a:	42a3      	cmp	r3, r4
 801824c:	4602      	mov	r2, r0
 801824e:	d303      	bcc.n	8018258 <__copybits+0x24>
 8018250:	2300      	movs	r3, #0
 8018252:	428a      	cmp	r2, r1
 8018254:	d305      	bcc.n	8018262 <__copybits+0x2e>
 8018256:	bd10      	pop	{r4, pc}
 8018258:	f853 2b04 	ldr.w	r2, [r3], #4
 801825c:	f840 2b04 	str.w	r2, [r0], #4
 8018260:	e7f3      	b.n	801824a <__copybits+0x16>
 8018262:	f842 3b04 	str.w	r3, [r2], #4
 8018266:	e7f4      	b.n	8018252 <__copybits+0x1e>

08018268 <__any_on>:
 8018268:	f100 0214 	add.w	r2, r0, #20
 801826c:	6900      	ldr	r0, [r0, #16]
 801826e:	114b      	asrs	r3, r1, #5
 8018270:	4298      	cmp	r0, r3
 8018272:	b510      	push	{r4, lr}
 8018274:	db11      	blt.n	801829a <__any_on+0x32>
 8018276:	dd0a      	ble.n	801828e <__any_on+0x26>
 8018278:	f011 011f 	ands.w	r1, r1, #31
 801827c:	d007      	beq.n	801828e <__any_on+0x26>
 801827e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018282:	fa24 f001 	lsr.w	r0, r4, r1
 8018286:	fa00 f101 	lsl.w	r1, r0, r1
 801828a:	428c      	cmp	r4, r1
 801828c:	d10b      	bne.n	80182a6 <__any_on+0x3e>
 801828e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018292:	4293      	cmp	r3, r2
 8018294:	d803      	bhi.n	801829e <__any_on+0x36>
 8018296:	2000      	movs	r0, #0
 8018298:	bd10      	pop	{r4, pc}
 801829a:	4603      	mov	r3, r0
 801829c:	e7f7      	b.n	801828e <__any_on+0x26>
 801829e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80182a2:	2900      	cmp	r1, #0
 80182a4:	d0f5      	beq.n	8018292 <__any_on+0x2a>
 80182a6:	2001      	movs	r0, #1
 80182a8:	e7f6      	b.n	8018298 <__any_on+0x30>

080182aa <_calloc_r>:
 80182aa:	b538      	push	{r3, r4, r5, lr}
 80182ac:	fb02 f401 	mul.w	r4, r2, r1
 80182b0:	4621      	mov	r1, r4
 80182b2:	f000 f857 	bl	8018364 <_malloc_r>
 80182b6:	4605      	mov	r5, r0
 80182b8:	b118      	cbz	r0, 80182c2 <_calloc_r+0x18>
 80182ba:	4622      	mov	r2, r4
 80182bc:	2100      	movs	r1, #0
 80182be:	f7fc f908 	bl	80144d2 <memset>
 80182c2:	4628      	mov	r0, r5
 80182c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080182c8 <_free_r>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	4605      	mov	r5, r0
 80182cc:	2900      	cmp	r1, #0
 80182ce:	d045      	beq.n	801835c <_free_r+0x94>
 80182d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182d4:	1f0c      	subs	r4, r1, #4
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	bfb8      	it	lt
 80182da:	18e4      	addlt	r4, r4, r3
 80182dc:	f001 f917 	bl	801950e <__malloc_lock>
 80182e0:	4a1f      	ldr	r2, [pc, #124]	; (8018360 <_free_r+0x98>)
 80182e2:	6813      	ldr	r3, [r2, #0]
 80182e4:	4610      	mov	r0, r2
 80182e6:	b933      	cbnz	r3, 80182f6 <_free_r+0x2e>
 80182e8:	6063      	str	r3, [r4, #4]
 80182ea:	6014      	str	r4, [r2, #0]
 80182ec:	4628      	mov	r0, r5
 80182ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182f2:	f001 b90d 	b.w	8019510 <__malloc_unlock>
 80182f6:	42a3      	cmp	r3, r4
 80182f8:	d90c      	bls.n	8018314 <_free_r+0x4c>
 80182fa:	6821      	ldr	r1, [r4, #0]
 80182fc:	1862      	adds	r2, r4, r1
 80182fe:	4293      	cmp	r3, r2
 8018300:	bf04      	itt	eq
 8018302:	681a      	ldreq	r2, [r3, #0]
 8018304:	685b      	ldreq	r3, [r3, #4]
 8018306:	6063      	str	r3, [r4, #4]
 8018308:	bf04      	itt	eq
 801830a:	1852      	addeq	r2, r2, r1
 801830c:	6022      	streq	r2, [r4, #0]
 801830e:	6004      	str	r4, [r0, #0]
 8018310:	e7ec      	b.n	80182ec <_free_r+0x24>
 8018312:	4613      	mov	r3, r2
 8018314:	685a      	ldr	r2, [r3, #4]
 8018316:	b10a      	cbz	r2, 801831c <_free_r+0x54>
 8018318:	42a2      	cmp	r2, r4
 801831a:	d9fa      	bls.n	8018312 <_free_r+0x4a>
 801831c:	6819      	ldr	r1, [r3, #0]
 801831e:	1858      	adds	r0, r3, r1
 8018320:	42a0      	cmp	r0, r4
 8018322:	d10b      	bne.n	801833c <_free_r+0x74>
 8018324:	6820      	ldr	r0, [r4, #0]
 8018326:	4401      	add	r1, r0
 8018328:	1858      	adds	r0, r3, r1
 801832a:	4282      	cmp	r2, r0
 801832c:	6019      	str	r1, [r3, #0]
 801832e:	d1dd      	bne.n	80182ec <_free_r+0x24>
 8018330:	6810      	ldr	r0, [r2, #0]
 8018332:	6852      	ldr	r2, [r2, #4]
 8018334:	605a      	str	r2, [r3, #4]
 8018336:	4401      	add	r1, r0
 8018338:	6019      	str	r1, [r3, #0]
 801833a:	e7d7      	b.n	80182ec <_free_r+0x24>
 801833c:	d902      	bls.n	8018344 <_free_r+0x7c>
 801833e:	230c      	movs	r3, #12
 8018340:	602b      	str	r3, [r5, #0]
 8018342:	e7d3      	b.n	80182ec <_free_r+0x24>
 8018344:	6820      	ldr	r0, [r4, #0]
 8018346:	1821      	adds	r1, r4, r0
 8018348:	428a      	cmp	r2, r1
 801834a:	bf04      	itt	eq
 801834c:	6811      	ldreq	r1, [r2, #0]
 801834e:	6852      	ldreq	r2, [r2, #4]
 8018350:	6062      	str	r2, [r4, #4]
 8018352:	bf04      	itt	eq
 8018354:	1809      	addeq	r1, r1, r0
 8018356:	6021      	streq	r1, [r4, #0]
 8018358:	605c      	str	r4, [r3, #4]
 801835a:	e7c7      	b.n	80182ec <_free_r+0x24>
 801835c:	bd38      	pop	{r3, r4, r5, pc}
 801835e:	bf00      	nop
 8018360:	200003d4 	.word	0x200003d4

08018364 <_malloc_r>:
 8018364:	b570      	push	{r4, r5, r6, lr}
 8018366:	1ccd      	adds	r5, r1, #3
 8018368:	f025 0503 	bic.w	r5, r5, #3
 801836c:	3508      	adds	r5, #8
 801836e:	2d0c      	cmp	r5, #12
 8018370:	bf38      	it	cc
 8018372:	250c      	movcc	r5, #12
 8018374:	2d00      	cmp	r5, #0
 8018376:	4606      	mov	r6, r0
 8018378:	db01      	blt.n	801837e <_malloc_r+0x1a>
 801837a:	42a9      	cmp	r1, r5
 801837c:	d903      	bls.n	8018386 <_malloc_r+0x22>
 801837e:	230c      	movs	r3, #12
 8018380:	6033      	str	r3, [r6, #0]
 8018382:	2000      	movs	r0, #0
 8018384:	bd70      	pop	{r4, r5, r6, pc}
 8018386:	f001 f8c2 	bl	801950e <__malloc_lock>
 801838a:	4a21      	ldr	r2, [pc, #132]	; (8018410 <_malloc_r+0xac>)
 801838c:	6814      	ldr	r4, [r2, #0]
 801838e:	4621      	mov	r1, r4
 8018390:	b991      	cbnz	r1, 80183b8 <_malloc_r+0x54>
 8018392:	4c20      	ldr	r4, [pc, #128]	; (8018414 <_malloc_r+0xb0>)
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	b91b      	cbnz	r3, 80183a0 <_malloc_r+0x3c>
 8018398:	4630      	mov	r0, r6
 801839a:	f000 fe6b 	bl	8019074 <_sbrk_r>
 801839e:	6020      	str	r0, [r4, #0]
 80183a0:	4629      	mov	r1, r5
 80183a2:	4630      	mov	r0, r6
 80183a4:	f000 fe66 	bl	8019074 <_sbrk_r>
 80183a8:	1c43      	adds	r3, r0, #1
 80183aa:	d124      	bne.n	80183f6 <_malloc_r+0x92>
 80183ac:	230c      	movs	r3, #12
 80183ae:	6033      	str	r3, [r6, #0]
 80183b0:	4630      	mov	r0, r6
 80183b2:	f001 f8ad 	bl	8019510 <__malloc_unlock>
 80183b6:	e7e4      	b.n	8018382 <_malloc_r+0x1e>
 80183b8:	680b      	ldr	r3, [r1, #0]
 80183ba:	1b5b      	subs	r3, r3, r5
 80183bc:	d418      	bmi.n	80183f0 <_malloc_r+0x8c>
 80183be:	2b0b      	cmp	r3, #11
 80183c0:	d90f      	bls.n	80183e2 <_malloc_r+0x7e>
 80183c2:	600b      	str	r3, [r1, #0]
 80183c4:	50cd      	str	r5, [r1, r3]
 80183c6:	18cc      	adds	r4, r1, r3
 80183c8:	4630      	mov	r0, r6
 80183ca:	f001 f8a1 	bl	8019510 <__malloc_unlock>
 80183ce:	f104 000b 	add.w	r0, r4, #11
 80183d2:	1d23      	adds	r3, r4, #4
 80183d4:	f020 0007 	bic.w	r0, r0, #7
 80183d8:	1ac3      	subs	r3, r0, r3
 80183da:	d0d3      	beq.n	8018384 <_malloc_r+0x20>
 80183dc:	425a      	negs	r2, r3
 80183de:	50e2      	str	r2, [r4, r3]
 80183e0:	e7d0      	b.n	8018384 <_malloc_r+0x20>
 80183e2:	428c      	cmp	r4, r1
 80183e4:	684b      	ldr	r3, [r1, #4]
 80183e6:	bf16      	itet	ne
 80183e8:	6063      	strne	r3, [r4, #4]
 80183ea:	6013      	streq	r3, [r2, #0]
 80183ec:	460c      	movne	r4, r1
 80183ee:	e7eb      	b.n	80183c8 <_malloc_r+0x64>
 80183f0:	460c      	mov	r4, r1
 80183f2:	6849      	ldr	r1, [r1, #4]
 80183f4:	e7cc      	b.n	8018390 <_malloc_r+0x2c>
 80183f6:	1cc4      	adds	r4, r0, #3
 80183f8:	f024 0403 	bic.w	r4, r4, #3
 80183fc:	42a0      	cmp	r0, r4
 80183fe:	d005      	beq.n	801840c <_malloc_r+0xa8>
 8018400:	1a21      	subs	r1, r4, r0
 8018402:	4630      	mov	r0, r6
 8018404:	f000 fe36 	bl	8019074 <_sbrk_r>
 8018408:	3001      	adds	r0, #1
 801840a:	d0cf      	beq.n	80183ac <_malloc_r+0x48>
 801840c:	6025      	str	r5, [r4, #0]
 801840e:	e7db      	b.n	80183c8 <_malloc_r+0x64>
 8018410:	200003d4 	.word	0x200003d4
 8018414:	200003d8 	.word	0x200003d8

08018418 <__ssputs_r>:
 8018418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801841c:	688e      	ldr	r6, [r1, #8]
 801841e:	429e      	cmp	r6, r3
 8018420:	4682      	mov	sl, r0
 8018422:	460c      	mov	r4, r1
 8018424:	4690      	mov	r8, r2
 8018426:	4699      	mov	r9, r3
 8018428:	d837      	bhi.n	801849a <__ssputs_r+0x82>
 801842a:	898a      	ldrh	r2, [r1, #12]
 801842c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018430:	d031      	beq.n	8018496 <__ssputs_r+0x7e>
 8018432:	6825      	ldr	r5, [r4, #0]
 8018434:	6909      	ldr	r1, [r1, #16]
 8018436:	1a6f      	subs	r7, r5, r1
 8018438:	6965      	ldr	r5, [r4, #20]
 801843a:	2302      	movs	r3, #2
 801843c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018440:	fb95 f5f3 	sdiv	r5, r5, r3
 8018444:	f109 0301 	add.w	r3, r9, #1
 8018448:	443b      	add	r3, r7
 801844a:	429d      	cmp	r5, r3
 801844c:	bf38      	it	cc
 801844e:	461d      	movcc	r5, r3
 8018450:	0553      	lsls	r3, r2, #21
 8018452:	d530      	bpl.n	80184b6 <__ssputs_r+0x9e>
 8018454:	4629      	mov	r1, r5
 8018456:	f7ff ff85 	bl	8018364 <_malloc_r>
 801845a:	4606      	mov	r6, r0
 801845c:	b950      	cbnz	r0, 8018474 <__ssputs_r+0x5c>
 801845e:	230c      	movs	r3, #12
 8018460:	f8ca 3000 	str.w	r3, [sl]
 8018464:	89a3      	ldrh	r3, [r4, #12]
 8018466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801846a:	81a3      	strh	r3, [r4, #12]
 801846c:	f04f 30ff 	mov.w	r0, #4294967295
 8018470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018474:	463a      	mov	r2, r7
 8018476:	6921      	ldr	r1, [r4, #16]
 8018478:	f7fc f820 	bl	80144bc <memcpy>
 801847c:	89a3      	ldrh	r3, [r4, #12]
 801847e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	6126      	str	r6, [r4, #16]
 801848a:	6165      	str	r5, [r4, #20]
 801848c:	443e      	add	r6, r7
 801848e:	1bed      	subs	r5, r5, r7
 8018490:	6026      	str	r6, [r4, #0]
 8018492:	60a5      	str	r5, [r4, #8]
 8018494:	464e      	mov	r6, r9
 8018496:	454e      	cmp	r6, r9
 8018498:	d900      	bls.n	801849c <__ssputs_r+0x84>
 801849a:	464e      	mov	r6, r9
 801849c:	4632      	mov	r2, r6
 801849e:	4641      	mov	r1, r8
 80184a0:	6820      	ldr	r0, [r4, #0]
 80184a2:	f001 f81b 	bl	80194dc <memmove>
 80184a6:	68a3      	ldr	r3, [r4, #8]
 80184a8:	1b9b      	subs	r3, r3, r6
 80184aa:	60a3      	str	r3, [r4, #8]
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	441e      	add	r6, r3
 80184b0:	6026      	str	r6, [r4, #0]
 80184b2:	2000      	movs	r0, #0
 80184b4:	e7dc      	b.n	8018470 <__ssputs_r+0x58>
 80184b6:	462a      	mov	r2, r5
 80184b8:	f001 f82b 	bl	8019512 <_realloc_r>
 80184bc:	4606      	mov	r6, r0
 80184be:	2800      	cmp	r0, #0
 80184c0:	d1e2      	bne.n	8018488 <__ssputs_r+0x70>
 80184c2:	6921      	ldr	r1, [r4, #16]
 80184c4:	4650      	mov	r0, sl
 80184c6:	f7ff feff 	bl	80182c8 <_free_r>
 80184ca:	e7c8      	b.n	801845e <__ssputs_r+0x46>

080184cc <_svfiprintf_r>:
 80184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	461d      	mov	r5, r3
 80184d2:	898b      	ldrh	r3, [r1, #12]
 80184d4:	061f      	lsls	r7, r3, #24
 80184d6:	b09d      	sub	sp, #116	; 0x74
 80184d8:	4680      	mov	r8, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	4616      	mov	r6, r2
 80184de:	d50f      	bpl.n	8018500 <_svfiprintf_r+0x34>
 80184e0:	690b      	ldr	r3, [r1, #16]
 80184e2:	b96b      	cbnz	r3, 8018500 <_svfiprintf_r+0x34>
 80184e4:	2140      	movs	r1, #64	; 0x40
 80184e6:	f7ff ff3d 	bl	8018364 <_malloc_r>
 80184ea:	6020      	str	r0, [r4, #0]
 80184ec:	6120      	str	r0, [r4, #16]
 80184ee:	b928      	cbnz	r0, 80184fc <_svfiprintf_r+0x30>
 80184f0:	230c      	movs	r3, #12
 80184f2:	f8c8 3000 	str.w	r3, [r8]
 80184f6:	f04f 30ff 	mov.w	r0, #4294967295
 80184fa:	e0c8      	b.n	801868e <_svfiprintf_r+0x1c2>
 80184fc:	2340      	movs	r3, #64	; 0x40
 80184fe:	6163      	str	r3, [r4, #20]
 8018500:	2300      	movs	r3, #0
 8018502:	9309      	str	r3, [sp, #36]	; 0x24
 8018504:	2320      	movs	r3, #32
 8018506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801850a:	2330      	movs	r3, #48	; 0x30
 801850c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018510:	9503      	str	r5, [sp, #12]
 8018512:	f04f 0b01 	mov.w	fp, #1
 8018516:	4637      	mov	r7, r6
 8018518:	463d      	mov	r5, r7
 801851a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801851e:	b10b      	cbz	r3, 8018524 <_svfiprintf_r+0x58>
 8018520:	2b25      	cmp	r3, #37	; 0x25
 8018522:	d13e      	bne.n	80185a2 <_svfiprintf_r+0xd6>
 8018524:	ebb7 0a06 	subs.w	sl, r7, r6
 8018528:	d00b      	beq.n	8018542 <_svfiprintf_r+0x76>
 801852a:	4653      	mov	r3, sl
 801852c:	4632      	mov	r2, r6
 801852e:	4621      	mov	r1, r4
 8018530:	4640      	mov	r0, r8
 8018532:	f7ff ff71 	bl	8018418 <__ssputs_r>
 8018536:	3001      	adds	r0, #1
 8018538:	f000 80a4 	beq.w	8018684 <_svfiprintf_r+0x1b8>
 801853c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801853e:	4453      	add	r3, sl
 8018540:	9309      	str	r3, [sp, #36]	; 0x24
 8018542:	783b      	ldrb	r3, [r7, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	f000 809d 	beq.w	8018684 <_svfiprintf_r+0x1b8>
 801854a:	2300      	movs	r3, #0
 801854c:	f04f 32ff 	mov.w	r2, #4294967295
 8018550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018554:	9304      	str	r3, [sp, #16]
 8018556:	9307      	str	r3, [sp, #28]
 8018558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801855c:	931a      	str	r3, [sp, #104]	; 0x68
 801855e:	462f      	mov	r7, r5
 8018560:	2205      	movs	r2, #5
 8018562:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018566:	4850      	ldr	r0, [pc, #320]	; (80186a8 <_svfiprintf_r+0x1dc>)
 8018568:	f7ef fd72 	bl	8008050 <memchr>
 801856c:	9b04      	ldr	r3, [sp, #16]
 801856e:	b9d0      	cbnz	r0, 80185a6 <_svfiprintf_r+0xda>
 8018570:	06d9      	lsls	r1, r3, #27
 8018572:	bf44      	itt	mi
 8018574:	2220      	movmi	r2, #32
 8018576:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801857a:	071a      	lsls	r2, r3, #28
 801857c:	bf44      	itt	mi
 801857e:	222b      	movmi	r2, #43	; 0x2b
 8018580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018584:	782a      	ldrb	r2, [r5, #0]
 8018586:	2a2a      	cmp	r2, #42	; 0x2a
 8018588:	d015      	beq.n	80185b6 <_svfiprintf_r+0xea>
 801858a:	9a07      	ldr	r2, [sp, #28]
 801858c:	462f      	mov	r7, r5
 801858e:	2000      	movs	r0, #0
 8018590:	250a      	movs	r5, #10
 8018592:	4639      	mov	r1, r7
 8018594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018598:	3b30      	subs	r3, #48	; 0x30
 801859a:	2b09      	cmp	r3, #9
 801859c:	d94d      	bls.n	801863a <_svfiprintf_r+0x16e>
 801859e:	b1b8      	cbz	r0, 80185d0 <_svfiprintf_r+0x104>
 80185a0:	e00f      	b.n	80185c2 <_svfiprintf_r+0xf6>
 80185a2:	462f      	mov	r7, r5
 80185a4:	e7b8      	b.n	8018518 <_svfiprintf_r+0x4c>
 80185a6:	4a40      	ldr	r2, [pc, #256]	; (80186a8 <_svfiprintf_r+0x1dc>)
 80185a8:	1a80      	subs	r0, r0, r2
 80185aa:	fa0b f000 	lsl.w	r0, fp, r0
 80185ae:	4318      	orrs	r0, r3
 80185b0:	9004      	str	r0, [sp, #16]
 80185b2:	463d      	mov	r5, r7
 80185b4:	e7d3      	b.n	801855e <_svfiprintf_r+0x92>
 80185b6:	9a03      	ldr	r2, [sp, #12]
 80185b8:	1d11      	adds	r1, r2, #4
 80185ba:	6812      	ldr	r2, [r2, #0]
 80185bc:	9103      	str	r1, [sp, #12]
 80185be:	2a00      	cmp	r2, #0
 80185c0:	db01      	blt.n	80185c6 <_svfiprintf_r+0xfa>
 80185c2:	9207      	str	r2, [sp, #28]
 80185c4:	e004      	b.n	80185d0 <_svfiprintf_r+0x104>
 80185c6:	4252      	negs	r2, r2
 80185c8:	f043 0302 	orr.w	r3, r3, #2
 80185cc:	9207      	str	r2, [sp, #28]
 80185ce:	9304      	str	r3, [sp, #16]
 80185d0:	783b      	ldrb	r3, [r7, #0]
 80185d2:	2b2e      	cmp	r3, #46	; 0x2e
 80185d4:	d10c      	bne.n	80185f0 <_svfiprintf_r+0x124>
 80185d6:	787b      	ldrb	r3, [r7, #1]
 80185d8:	2b2a      	cmp	r3, #42	; 0x2a
 80185da:	d133      	bne.n	8018644 <_svfiprintf_r+0x178>
 80185dc:	9b03      	ldr	r3, [sp, #12]
 80185de:	1d1a      	adds	r2, r3, #4
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	9203      	str	r2, [sp, #12]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	bfb8      	it	lt
 80185e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80185ec:	3702      	adds	r7, #2
 80185ee:	9305      	str	r3, [sp, #20]
 80185f0:	4d2e      	ldr	r5, [pc, #184]	; (80186ac <_svfiprintf_r+0x1e0>)
 80185f2:	7839      	ldrb	r1, [r7, #0]
 80185f4:	2203      	movs	r2, #3
 80185f6:	4628      	mov	r0, r5
 80185f8:	f7ef fd2a 	bl	8008050 <memchr>
 80185fc:	b138      	cbz	r0, 801860e <_svfiprintf_r+0x142>
 80185fe:	2340      	movs	r3, #64	; 0x40
 8018600:	1b40      	subs	r0, r0, r5
 8018602:	fa03 f000 	lsl.w	r0, r3, r0
 8018606:	9b04      	ldr	r3, [sp, #16]
 8018608:	4303      	orrs	r3, r0
 801860a:	3701      	adds	r7, #1
 801860c:	9304      	str	r3, [sp, #16]
 801860e:	7839      	ldrb	r1, [r7, #0]
 8018610:	4827      	ldr	r0, [pc, #156]	; (80186b0 <_svfiprintf_r+0x1e4>)
 8018612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018616:	2206      	movs	r2, #6
 8018618:	1c7e      	adds	r6, r7, #1
 801861a:	f7ef fd19 	bl	8008050 <memchr>
 801861e:	2800      	cmp	r0, #0
 8018620:	d038      	beq.n	8018694 <_svfiprintf_r+0x1c8>
 8018622:	4b24      	ldr	r3, [pc, #144]	; (80186b4 <_svfiprintf_r+0x1e8>)
 8018624:	bb13      	cbnz	r3, 801866c <_svfiprintf_r+0x1a0>
 8018626:	9b03      	ldr	r3, [sp, #12]
 8018628:	3307      	adds	r3, #7
 801862a:	f023 0307 	bic.w	r3, r3, #7
 801862e:	3308      	adds	r3, #8
 8018630:	9303      	str	r3, [sp, #12]
 8018632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018634:	444b      	add	r3, r9
 8018636:	9309      	str	r3, [sp, #36]	; 0x24
 8018638:	e76d      	b.n	8018516 <_svfiprintf_r+0x4a>
 801863a:	fb05 3202 	mla	r2, r5, r2, r3
 801863e:	2001      	movs	r0, #1
 8018640:	460f      	mov	r7, r1
 8018642:	e7a6      	b.n	8018592 <_svfiprintf_r+0xc6>
 8018644:	2300      	movs	r3, #0
 8018646:	3701      	adds	r7, #1
 8018648:	9305      	str	r3, [sp, #20]
 801864a:	4619      	mov	r1, r3
 801864c:	250a      	movs	r5, #10
 801864e:	4638      	mov	r0, r7
 8018650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018654:	3a30      	subs	r2, #48	; 0x30
 8018656:	2a09      	cmp	r2, #9
 8018658:	d903      	bls.n	8018662 <_svfiprintf_r+0x196>
 801865a:	2b00      	cmp	r3, #0
 801865c:	d0c8      	beq.n	80185f0 <_svfiprintf_r+0x124>
 801865e:	9105      	str	r1, [sp, #20]
 8018660:	e7c6      	b.n	80185f0 <_svfiprintf_r+0x124>
 8018662:	fb05 2101 	mla	r1, r5, r1, r2
 8018666:	2301      	movs	r3, #1
 8018668:	4607      	mov	r7, r0
 801866a:	e7f0      	b.n	801864e <_svfiprintf_r+0x182>
 801866c:	ab03      	add	r3, sp, #12
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	4622      	mov	r2, r4
 8018672:	4b11      	ldr	r3, [pc, #68]	; (80186b8 <_svfiprintf_r+0x1ec>)
 8018674:	a904      	add	r1, sp, #16
 8018676:	4640      	mov	r0, r8
 8018678:	f7fb ffc8 	bl	801460c <_printf_float>
 801867c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018680:	4681      	mov	r9, r0
 8018682:	d1d6      	bne.n	8018632 <_svfiprintf_r+0x166>
 8018684:	89a3      	ldrh	r3, [r4, #12]
 8018686:	065b      	lsls	r3, r3, #25
 8018688:	f53f af35 	bmi.w	80184f6 <_svfiprintf_r+0x2a>
 801868c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801868e:	b01d      	add	sp, #116	; 0x74
 8018690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018694:	ab03      	add	r3, sp, #12
 8018696:	9300      	str	r3, [sp, #0]
 8018698:	4622      	mov	r2, r4
 801869a:	4b07      	ldr	r3, [pc, #28]	; (80186b8 <_svfiprintf_r+0x1ec>)
 801869c:	a904      	add	r1, sp, #16
 801869e:	4640      	mov	r0, r8
 80186a0:	f7fc fa6a 	bl	8014b78 <_printf_i>
 80186a4:	e7ea      	b.n	801867c <_svfiprintf_r+0x1b0>
 80186a6:	bf00      	nop
 80186a8:	08019aec 	.word	0x08019aec
 80186ac:	08019af2 	.word	0x08019af2
 80186b0:	08019af6 	.word	0x08019af6
 80186b4:	0801460d 	.word	0x0801460d
 80186b8:	08018419 	.word	0x08018419

080186bc <__sfputc_r>:
 80186bc:	6893      	ldr	r3, [r2, #8]
 80186be:	3b01      	subs	r3, #1
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	b410      	push	{r4}
 80186c4:	6093      	str	r3, [r2, #8]
 80186c6:	da08      	bge.n	80186da <__sfputc_r+0x1e>
 80186c8:	6994      	ldr	r4, [r2, #24]
 80186ca:	42a3      	cmp	r3, r4
 80186cc:	db01      	blt.n	80186d2 <__sfputc_r+0x16>
 80186ce:	290a      	cmp	r1, #10
 80186d0:	d103      	bne.n	80186da <__sfputc_r+0x1e>
 80186d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186d6:	f7fd bd75 	b.w	80161c4 <__swbuf_r>
 80186da:	6813      	ldr	r3, [r2, #0]
 80186dc:	1c58      	adds	r0, r3, #1
 80186de:	6010      	str	r0, [r2, #0]
 80186e0:	7019      	strb	r1, [r3, #0]
 80186e2:	4608      	mov	r0, r1
 80186e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186e8:	4770      	bx	lr

080186ea <__sfputs_r>:
 80186ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ec:	4606      	mov	r6, r0
 80186ee:	460f      	mov	r7, r1
 80186f0:	4614      	mov	r4, r2
 80186f2:	18d5      	adds	r5, r2, r3
 80186f4:	42ac      	cmp	r4, r5
 80186f6:	d101      	bne.n	80186fc <__sfputs_r+0x12>
 80186f8:	2000      	movs	r0, #0
 80186fa:	e007      	b.n	801870c <__sfputs_r+0x22>
 80186fc:	463a      	mov	r2, r7
 80186fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018702:	4630      	mov	r0, r6
 8018704:	f7ff ffda 	bl	80186bc <__sfputc_r>
 8018708:	1c43      	adds	r3, r0, #1
 801870a:	d1f3      	bne.n	80186f4 <__sfputs_r+0xa>
 801870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018710 <_vfiprintf_r>:
 8018710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018714:	460c      	mov	r4, r1
 8018716:	b09d      	sub	sp, #116	; 0x74
 8018718:	4617      	mov	r7, r2
 801871a:	461d      	mov	r5, r3
 801871c:	4606      	mov	r6, r0
 801871e:	b118      	cbz	r0, 8018728 <_vfiprintf_r+0x18>
 8018720:	6983      	ldr	r3, [r0, #24]
 8018722:	b90b      	cbnz	r3, 8018728 <_vfiprintf_r+0x18>
 8018724:	f7fe fd56 	bl	80171d4 <__sinit>
 8018728:	4b7c      	ldr	r3, [pc, #496]	; (801891c <_vfiprintf_r+0x20c>)
 801872a:	429c      	cmp	r4, r3
 801872c:	d158      	bne.n	80187e0 <_vfiprintf_r+0xd0>
 801872e:	6874      	ldr	r4, [r6, #4]
 8018730:	89a3      	ldrh	r3, [r4, #12]
 8018732:	0718      	lsls	r0, r3, #28
 8018734:	d55e      	bpl.n	80187f4 <_vfiprintf_r+0xe4>
 8018736:	6923      	ldr	r3, [r4, #16]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d05b      	beq.n	80187f4 <_vfiprintf_r+0xe4>
 801873c:	2300      	movs	r3, #0
 801873e:	9309      	str	r3, [sp, #36]	; 0x24
 8018740:	2320      	movs	r3, #32
 8018742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018746:	2330      	movs	r3, #48	; 0x30
 8018748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801874c:	9503      	str	r5, [sp, #12]
 801874e:	f04f 0b01 	mov.w	fp, #1
 8018752:	46b8      	mov	r8, r7
 8018754:	4645      	mov	r5, r8
 8018756:	f815 3b01 	ldrb.w	r3, [r5], #1
 801875a:	b10b      	cbz	r3, 8018760 <_vfiprintf_r+0x50>
 801875c:	2b25      	cmp	r3, #37	; 0x25
 801875e:	d154      	bne.n	801880a <_vfiprintf_r+0xfa>
 8018760:	ebb8 0a07 	subs.w	sl, r8, r7
 8018764:	d00b      	beq.n	801877e <_vfiprintf_r+0x6e>
 8018766:	4653      	mov	r3, sl
 8018768:	463a      	mov	r2, r7
 801876a:	4621      	mov	r1, r4
 801876c:	4630      	mov	r0, r6
 801876e:	f7ff ffbc 	bl	80186ea <__sfputs_r>
 8018772:	3001      	adds	r0, #1
 8018774:	f000 80c2 	beq.w	80188fc <_vfiprintf_r+0x1ec>
 8018778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801877a:	4453      	add	r3, sl
 801877c:	9309      	str	r3, [sp, #36]	; 0x24
 801877e:	f898 3000 	ldrb.w	r3, [r8]
 8018782:	2b00      	cmp	r3, #0
 8018784:	f000 80ba 	beq.w	80188fc <_vfiprintf_r+0x1ec>
 8018788:	2300      	movs	r3, #0
 801878a:	f04f 32ff 	mov.w	r2, #4294967295
 801878e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018792:	9304      	str	r3, [sp, #16]
 8018794:	9307      	str	r3, [sp, #28]
 8018796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801879a:	931a      	str	r3, [sp, #104]	; 0x68
 801879c:	46a8      	mov	r8, r5
 801879e:	2205      	movs	r2, #5
 80187a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80187a4:	485e      	ldr	r0, [pc, #376]	; (8018920 <_vfiprintf_r+0x210>)
 80187a6:	f7ef fc53 	bl	8008050 <memchr>
 80187aa:	9b04      	ldr	r3, [sp, #16]
 80187ac:	bb78      	cbnz	r0, 801880e <_vfiprintf_r+0xfe>
 80187ae:	06d9      	lsls	r1, r3, #27
 80187b0:	bf44      	itt	mi
 80187b2:	2220      	movmi	r2, #32
 80187b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80187b8:	071a      	lsls	r2, r3, #28
 80187ba:	bf44      	itt	mi
 80187bc:	222b      	movmi	r2, #43	; 0x2b
 80187be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80187c2:	782a      	ldrb	r2, [r5, #0]
 80187c4:	2a2a      	cmp	r2, #42	; 0x2a
 80187c6:	d02a      	beq.n	801881e <_vfiprintf_r+0x10e>
 80187c8:	9a07      	ldr	r2, [sp, #28]
 80187ca:	46a8      	mov	r8, r5
 80187cc:	2000      	movs	r0, #0
 80187ce:	250a      	movs	r5, #10
 80187d0:	4641      	mov	r1, r8
 80187d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187d6:	3b30      	subs	r3, #48	; 0x30
 80187d8:	2b09      	cmp	r3, #9
 80187da:	d969      	bls.n	80188b0 <_vfiprintf_r+0x1a0>
 80187dc:	b360      	cbz	r0, 8018838 <_vfiprintf_r+0x128>
 80187de:	e024      	b.n	801882a <_vfiprintf_r+0x11a>
 80187e0:	4b50      	ldr	r3, [pc, #320]	; (8018924 <_vfiprintf_r+0x214>)
 80187e2:	429c      	cmp	r4, r3
 80187e4:	d101      	bne.n	80187ea <_vfiprintf_r+0xda>
 80187e6:	68b4      	ldr	r4, [r6, #8]
 80187e8:	e7a2      	b.n	8018730 <_vfiprintf_r+0x20>
 80187ea:	4b4f      	ldr	r3, [pc, #316]	; (8018928 <_vfiprintf_r+0x218>)
 80187ec:	429c      	cmp	r4, r3
 80187ee:	bf08      	it	eq
 80187f0:	68f4      	ldreq	r4, [r6, #12]
 80187f2:	e79d      	b.n	8018730 <_vfiprintf_r+0x20>
 80187f4:	4621      	mov	r1, r4
 80187f6:	4630      	mov	r0, r6
 80187f8:	f7fd fd36 	bl	8016268 <__swsetup_r>
 80187fc:	2800      	cmp	r0, #0
 80187fe:	d09d      	beq.n	801873c <_vfiprintf_r+0x2c>
 8018800:	f04f 30ff 	mov.w	r0, #4294967295
 8018804:	b01d      	add	sp, #116	; 0x74
 8018806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801880a:	46a8      	mov	r8, r5
 801880c:	e7a2      	b.n	8018754 <_vfiprintf_r+0x44>
 801880e:	4a44      	ldr	r2, [pc, #272]	; (8018920 <_vfiprintf_r+0x210>)
 8018810:	1a80      	subs	r0, r0, r2
 8018812:	fa0b f000 	lsl.w	r0, fp, r0
 8018816:	4318      	orrs	r0, r3
 8018818:	9004      	str	r0, [sp, #16]
 801881a:	4645      	mov	r5, r8
 801881c:	e7be      	b.n	801879c <_vfiprintf_r+0x8c>
 801881e:	9a03      	ldr	r2, [sp, #12]
 8018820:	1d11      	adds	r1, r2, #4
 8018822:	6812      	ldr	r2, [r2, #0]
 8018824:	9103      	str	r1, [sp, #12]
 8018826:	2a00      	cmp	r2, #0
 8018828:	db01      	blt.n	801882e <_vfiprintf_r+0x11e>
 801882a:	9207      	str	r2, [sp, #28]
 801882c:	e004      	b.n	8018838 <_vfiprintf_r+0x128>
 801882e:	4252      	negs	r2, r2
 8018830:	f043 0302 	orr.w	r3, r3, #2
 8018834:	9207      	str	r2, [sp, #28]
 8018836:	9304      	str	r3, [sp, #16]
 8018838:	f898 3000 	ldrb.w	r3, [r8]
 801883c:	2b2e      	cmp	r3, #46	; 0x2e
 801883e:	d10e      	bne.n	801885e <_vfiprintf_r+0x14e>
 8018840:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018844:	2b2a      	cmp	r3, #42	; 0x2a
 8018846:	d138      	bne.n	80188ba <_vfiprintf_r+0x1aa>
 8018848:	9b03      	ldr	r3, [sp, #12]
 801884a:	1d1a      	adds	r2, r3, #4
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	9203      	str	r2, [sp, #12]
 8018850:	2b00      	cmp	r3, #0
 8018852:	bfb8      	it	lt
 8018854:	f04f 33ff 	movlt.w	r3, #4294967295
 8018858:	f108 0802 	add.w	r8, r8, #2
 801885c:	9305      	str	r3, [sp, #20]
 801885e:	4d33      	ldr	r5, [pc, #204]	; (801892c <_vfiprintf_r+0x21c>)
 8018860:	f898 1000 	ldrb.w	r1, [r8]
 8018864:	2203      	movs	r2, #3
 8018866:	4628      	mov	r0, r5
 8018868:	f7ef fbf2 	bl	8008050 <memchr>
 801886c:	b140      	cbz	r0, 8018880 <_vfiprintf_r+0x170>
 801886e:	2340      	movs	r3, #64	; 0x40
 8018870:	1b40      	subs	r0, r0, r5
 8018872:	fa03 f000 	lsl.w	r0, r3, r0
 8018876:	9b04      	ldr	r3, [sp, #16]
 8018878:	4303      	orrs	r3, r0
 801887a:	f108 0801 	add.w	r8, r8, #1
 801887e:	9304      	str	r3, [sp, #16]
 8018880:	f898 1000 	ldrb.w	r1, [r8]
 8018884:	482a      	ldr	r0, [pc, #168]	; (8018930 <_vfiprintf_r+0x220>)
 8018886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801888a:	2206      	movs	r2, #6
 801888c:	f108 0701 	add.w	r7, r8, #1
 8018890:	f7ef fbde 	bl	8008050 <memchr>
 8018894:	2800      	cmp	r0, #0
 8018896:	d037      	beq.n	8018908 <_vfiprintf_r+0x1f8>
 8018898:	4b26      	ldr	r3, [pc, #152]	; (8018934 <_vfiprintf_r+0x224>)
 801889a:	bb1b      	cbnz	r3, 80188e4 <_vfiprintf_r+0x1d4>
 801889c:	9b03      	ldr	r3, [sp, #12]
 801889e:	3307      	adds	r3, #7
 80188a0:	f023 0307 	bic.w	r3, r3, #7
 80188a4:	3308      	adds	r3, #8
 80188a6:	9303      	str	r3, [sp, #12]
 80188a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188aa:	444b      	add	r3, r9
 80188ac:	9309      	str	r3, [sp, #36]	; 0x24
 80188ae:	e750      	b.n	8018752 <_vfiprintf_r+0x42>
 80188b0:	fb05 3202 	mla	r2, r5, r2, r3
 80188b4:	2001      	movs	r0, #1
 80188b6:	4688      	mov	r8, r1
 80188b8:	e78a      	b.n	80187d0 <_vfiprintf_r+0xc0>
 80188ba:	2300      	movs	r3, #0
 80188bc:	f108 0801 	add.w	r8, r8, #1
 80188c0:	9305      	str	r3, [sp, #20]
 80188c2:	4619      	mov	r1, r3
 80188c4:	250a      	movs	r5, #10
 80188c6:	4640      	mov	r0, r8
 80188c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188cc:	3a30      	subs	r2, #48	; 0x30
 80188ce:	2a09      	cmp	r2, #9
 80188d0:	d903      	bls.n	80188da <_vfiprintf_r+0x1ca>
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d0c3      	beq.n	801885e <_vfiprintf_r+0x14e>
 80188d6:	9105      	str	r1, [sp, #20]
 80188d8:	e7c1      	b.n	801885e <_vfiprintf_r+0x14e>
 80188da:	fb05 2101 	mla	r1, r5, r1, r2
 80188de:	2301      	movs	r3, #1
 80188e0:	4680      	mov	r8, r0
 80188e2:	e7f0      	b.n	80188c6 <_vfiprintf_r+0x1b6>
 80188e4:	ab03      	add	r3, sp, #12
 80188e6:	9300      	str	r3, [sp, #0]
 80188e8:	4622      	mov	r2, r4
 80188ea:	4b13      	ldr	r3, [pc, #76]	; (8018938 <_vfiprintf_r+0x228>)
 80188ec:	a904      	add	r1, sp, #16
 80188ee:	4630      	mov	r0, r6
 80188f0:	f7fb fe8c 	bl	801460c <_printf_float>
 80188f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80188f8:	4681      	mov	r9, r0
 80188fa:	d1d5      	bne.n	80188a8 <_vfiprintf_r+0x198>
 80188fc:	89a3      	ldrh	r3, [r4, #12]
 80188fe:	065b      	lsls	r3, r3, #25
 8018900:	f53f af7e 	bmi.w	8018800 <_vfiprintf_r+0xf0>
 8018904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018906:	e77d      	b.n	8018804 <_vfiprintf_r+0xf4>
 8018908:	ab03      	add	r3, sp, #12
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	4622      	mov	r2, r4
 801890e:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <_vfiprintf_r+0x228>)
 8018910:	a904      	add	r1, sp, #16
 8018912:	4630      	mov	r0, r6
 8018914:	f7fc f930 	bl	8014b78 <_printf_i>
 8018918:	e7ec      	b.n	80188f4 <_vfiprintf_r+0x1e4>
 801891a:	bf00      	nop
 801891c:	080199a0 	.word	0x080199a0
 8018920:	08019aec 	.word	0x08019aec
 8018924:	080199c0 	.word	0x080199c0
 8018928:	08019980 	.word	0x08019980
 801892c:	08019af2 	.word	0x08019af2
 8018930:	08019af6 	.word	0x08019af6
 8018934:	0801460d 	.word	0x0801460d
 8018938:	080186eb 	.word	0x080186eb

0801893c <__svfiscanf_r>:
 801893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018940:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018944:	460c      	mov	r4, r1
 8018946:	2100      	movs	r1, #0
 8018948:	9144      	str	r1, [sp, #272]	; 0x110
 801894a:	9145      	str	r1, [sp, #276]	; 0x114
 801894c:	499f      	ldr	r1, [pc, #636]	; (8018bcc <__svfiscanf_r+0x290>)
 801894e:	91a0      	str	r1, [sp, #640]	; 0x280
 8018950:	f10d 0804 	add.w	r8, sp, #4
 8018954:	499e      	ldr	r1, [pc, #632]	; (8018bd0 <__svfiscanf_r+0x294>)
 8018956:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018bd4 <__svfiscanf_r+0x298>
 801895a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801895e:	4606      	mov	r6, r0
 8018960:	4692      	mov	sl, r2
 8018962:	91a1      	str	r1, [sp, #644]	; 0x284
 8018964:	9300      	str	r3, [sp, #0]
 8018966:	270a      	movs	r7, #10
 8018968:	f89a 3000 	ldrb.w	r3, [sl]
 801896c:	2b00      	cmp	r3, #0
 801896e:	f000 812a 	beq.w	8018bc6 <__svfiscanf_r+0x28a>
 8018972:	4655      	mov	r5, sl
 8018974:	f7fe fffe 	bl	8017974 <__locale_ctype_ptr>
 8018978:	f815 bb01 	ldrb.w	fp, [r5], #1
 801897c:	4458      	add	r0, fp
 801897e:	7843      	ldrb	r3, [r0, #1]
 8018980:	f013 0308 	ands.w	r3, r3, #8
 8018984:	d01c      	beq.n	80189c0 <__svfiscanf_r+0x84>
 8018986:	6863      	ldr	r3, [r4, #4]
 8018988:	2b00      	cmp	r3, #0
 801898a:	dd12      	ble.n	80189b2 <__svfiscanf_r+0x76>
 801898c:	f7fe fff2 	bl	8017974 <__locale_ctype_ptr>
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	781a      	ldrb	r2, [r3, #0]
 8018994:	4410      	add	r0, r2
 8018996:	7842      	ldrb	r2, [r0, #1]
 8018998:	0712      	lsls	r2, r2, #28
 801899a:	d401      	bmi.n	80189a0 <__svfiscanf_r+0x64>
 801899c:	46aa      	mov	sl, r5
 801899e:	e7e3      	b.n	8018968 <__svfiscanf_r+0x2c>
 80189a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80189a2:	3201      	adds	r2, #1
 80189a4:	9245      	str	r2, [sp, #276]	; 0x114
 80189a6:	6862      	ldr	r2, [r4, #4]
 80189a8:	3301      	adds	r3, #1
 80189aa:	3a01      	subs	r2, #1
 80189ac:	6062      	str	r2, [r4, #4]
 80189ae:	6023      	str	r3, [r4, #0]
 80189b0:	e7e9      	b.n	8018986 <__svfiscanf_r+0x4a>
 80189b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80189b4:	4621      	mov	r1, r4
 80189b6:	4630      	mov	r0, r6
 80189b8:	4798      	blx	r3
 80189ba:	2800      	cmp	r0, #0
 80189bc:	d0e6      	beq.n	801898c <__svfiscanf_r+0x50>
 80189be:	e7ed      	b.n	801899c <__svfiscanf_r+0x60>
 80189c0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80189c4:	f040 8082 	bne.w	8018acc <__svfiscanf_r+0x190>
 80189c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80189ca:	9341      	str	r3, [sp, #260]	; 0x104
 80189cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80189d0:	2b2a      	cmp	r3, #42	; 0x2a
 80189d2:	d103      	bne.n	80189dc <__svfiscanf_r+0xa0>
 80189d4:	2310      	movs	r3, #16
 80189d6:	9341      	str	r3, [sp, #260]	; 0x104
 80189d8:	f10a 0502 	add.w	r5, sl, #2
 80189dc:	46aa      	mov	sl, r5
 80189de:	f815 1b01 	ldrb.w	r1, [r5], #1
 80189e2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80189e6:	2a09      	cmp	r2, #9
 80189e8:	d922      	bls.n	8018a30 <__svfiscanf_r+0xf4>
 80189ea:	2203      	movs	r2, #3
 80189ec:	4879      	ldr	r0, [pc, #484]	; (8018bd4 <__svfiscanf_r+0x298>)
 80189ee:	f7ef fb2f 	bl	8008050 <memchr>
 80189f2:	b138      	cbz	r0, 8018a04 <__svfiscanf_r+0xc8>
 80189f4:	eba0 0309 	sub.w	r3, r0, r9
 80189f8:	2001      	movs	r0, #1
 80189fa:	4098      	lsls	r0, r3
 80189fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80189fe:	4318      	orrs	r0, r3
 8018a00:	9041      	str	r0, [sp, #260]	; 0x104
 8018a02:	46aa      	mov	sl, r5
 8018a04:	f89a 3000 	ldrb.w	r3, [sl]
 8018a08:	2b67      	cmp	r3, #103	; 0x67
 8018a0a:	f10a 0501 	add.w	r5, sl, #1
 8018a0e:	d82b      	bhi.n	8018a68 <__svfiscanf_r+0x12c>
 8018a10:	2b65      	cmp	r3, #101	; 0x65
 8018a12:	f080 809f 	bcs.w	8018b54 <__svfiscanf_r+0x218>
 8018a16:	2b47      	cmp	r3, #71	; 0x47
 8018a18:	d810      	bhi.n	8018a3c <__svfiscanf_r+0x100>
 8018a1a:	2b45      	cmp	r3, #69	; 0x45
 8018a1c:	f080 809a 	bcs.w	8018b54 <__svfiscanf_r+0x218>
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d06c      	beq.n	8018afe <__svfiscanf_r+0x1c2>
 8018a24:	2b25      	cmp	r3, #37	; 0x25
 8018a26:	d051      	beq.n	8018acc <__svfiscanf_r+0x190>
 8018a28:	2303      	movs	r3, #3
 8018a2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8018a2c:	9742      	str	r7, [sp, #264]	; 0x108
 8018a2e:	e027      	b.n	8018a80 <__svfiscanf_r+0x144>
 8018a30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018a32:	fb07 1303 	mla	r3, r7, r3, r1
 8018a36:	3b30      	subs	r3, #48	; 0x30
 8018a38:	9343      	str	r3, [sp, #268]	; 0x10c
 8018a3a:	e7cf      	b.n	80189dc <__svfiscanf_r+0xa0>
 8018a3c:	2b5b      	cmp	r3, #91	; 0x5b
 8018a3e:	d06a      	beq.n	8018b16 <__svfiscanf_r+0x1da>
 8018a40:	d80c      	bhi.n	8018a5c <__svfiscanf_r+0x120>
 8018a42:	2b58      	cmp	r3, #88	; 0x58
 8018a44:	d1f0      	bne.n	8018a28 <__svfiscanf_r+0xec>
 8018a46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018a4c:	9241      	str	r2, [sp, #260]	; 0x104
 8018a4e:	2210      	movs	r2, #16
 8018a50:	9242      	str	r2, [sp, #264]	; 0x108
 8018a52:	2b6e      	cmp	r3, #110	; 0x6e
 8018a54:	bf8c      	ite	hi
 8018a56:	2304      	movhi	r3, #4
 8018a58:	2303      	movls	r3, #3
 8018a5a:	e010      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018a5c:	2b63      	cmp	r3, #99	; 0x63
 8018a5e:	d065      	beq.n	8018b2c <__svfiscanf_r+0x1f0>
 8018a60:	2b64      	cmp	r3, #100	; 0x64
 8018a62:	d1e1      	bne.n	8018a28 <__svfiscanf_r+0xec>
 8018a64:	9742      	str	r7, [sp, #264]	; 0x108
 8018a66:	e7f4      	b.n	8018a52 <__svfiscanf_r+0x116>
 8018a68:	2b70      	cmp	r3, #112	; 0x70
 8018a6a:	d04b      	beq.n	8018b04 <__svfiscanf_r+0x1c8>
 8018a6c:	d826      	bhi.n	8018abc <__svfiscanf_r+0x180>
 8018a6e:	2b6e      	cmp	r3, #110	; 0x6e
 8018a70:	d062      	beq.n	8018b38 <__svfiscanf_r+0x1fc>
 8018a72:	d84c      	bhi.n	8018b0e <__svfiscanf_r+0x1d2>
 8018a74:	2b69      	cmp	r3, #105	; 0x69
 8018a76:	d1d7      	bne.n	8018a28 <__svfiscanf_r+0xec>
 8018a78:	2300      	movs	r3, #0
 8018a7a:	9342      	str	r3, [sp, #264]	; 0x108
 8018a7c:	2303      	movs	r3, #3
 8018a7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018a80:	6863      	ldr	r3, [r4, #4]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	dd68      	ble.n	8018b58 <__svfiscanf_r+0x21c>
 8018a86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018a88:	0659      	lsls	r1, r3, #25
 8018a8a:	d407      	bmi.n	8018a9c <__svfiscanf_r+0x160>
 8018a8c:	f7fe ff72 	bl	8017974 <__locale_ctype_ptr>
 8018a90:	6823      	ldr	r3, [r4, #0]
 8018a92:	781a      	ldrb	r2, [r3, #0]
 8018a94:	4410      	add	r0, r2
 8018a96:	7842      	ldrb	r2, [r0, #1]
 8018a98:	0712      	lsls	r2, r2, #28
 8018a9a:	d464      	bmi.n	8018b66 <__svfiscanf_r+0x22a>
 8018a9c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018a9e:	2b02      	cmp	r3, #2
 8018aa0:	dc73      	bgt.n	8018b8a <__svfiscanf_r+0x24e>
 8018aa2:	466b      	mov	r3, sp
 8018aa4:	4622      	mov	r2, r4
 8018aa6:	a941      	add	r1, sp, #260	; 0x104
 8018aa8:	4630      	mov	r0, r6
 8018aaa:	f000 f8bf 	bl	8018c2c <_scanf_chars>
 8018aae:	2801      	cmp	r0, #1
 8018ab0:	f000 8089 	beq.w	8018bc6 <__svfiscanf_r+0x28a>
 8018ab4:	2802      	cmp	r0, #2
 8018ab6:	f47f af71 	bne.w	801899c <__svfiscanf_r+0x60>
 8018aba:	e01d      	b.n	8018af8 <__svfiscanf_r+0x1bc>
 8018abc:	2b75      	cmp	r3, #117	; 0x75
 8018abe:	d0d1      	beq.n	8018a64 <__svfiscanf_r+0x128>
 8018ac0:	2b78      	cmp	r3, #120	; 0x78
 8018ac2:	d0c0      	beq.n	8018a46 <__svfiscanf_r+0x10a>
 8018ac4:	2b73      	cmp	r3, #115	; 0x73
 8018ac6:	d1af      	bne.n	8018a28 <__svfiscanf_r+0xec>
 8018ac8:	2302      	movs	r3, #2
 8018aca:	e7d8      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018acc:	6863      	ldr	r3, [r4, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	dd0c      	ble.n	8018aec <__svfiscanf_r+0x1b0>
 8018ad2:	6823      	ldr	r3, [r4, #0]
 8018ad4:	781a      	ldrb	r2, [r3, #0]
 8018ad6:	455a      	cmp	r2, fp
 8018ad8:	d175      	bne.n	8018bc6 <__svfiscanf_r+0x28a>
 8018ada:	3301      	adds	r3, #1
 8018adc:	6862      	ldr	r2, [r4, #4]
 8018ade:	6023      	str	r3, [r4, #0]
 8018ae0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018ae2:	3a01      	subs	r2, #1
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	6062      	str	r2, [r4, #4]
 8018ae8:	9345      	str	r3, [sp, #276]	; 0x114
 8018aea:	e757      	b.n	801899c <__svfiscanf_r+0x60>
 8018aec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018aee:	4621      	mov	r1, r4
 8018af0:	4630      	mov	r0, r6
 8018af2:	4798      	blx	r3
 8018af4:	2800      	cmp	r0, #0
 8018af6:	d0ec      	beq.n	8018ad2 <__svfiscanf_r+0x196>
 8018af8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018afa:	2800      	cmp	r0, #0
 8018afc:	d159      	bne.n	8018bb2 <__svfiscanf_r+0x276>
 8018afe:	f04f 30ff 	mov.w	r0, #4294967295
 8018b02:	e05c      	b.n	8018bbe <__svfiscanf_r+0x282>
 8018b04:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018b06:	f042 0220 	orr.w	r2, r2, #32
 8018b0a:	9241      	str	r2, [sp, #260]	; 0x104
 8018b0c:	e79b      	b.n	8018a46 <__svfiscanf_r+0x10a>
 8018b0e:	2308      	movs	r3, #8
 8018b10:	9342      	str	r3, [sp, #264]	; 0x108
 8018b12:	2304      	movs	r3, #4
 8018b14:	e7b3      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018b16:	4629      	mov	r1, r5
 8018b18:	4640      	mov	r0, r8
 8018b1a:	f000 fabb 	bl	8019094 <__sccl>
 8018b1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b24:	9341      	str	r3, [sp, #260]	; 0x104
 8018b26:	4605      	mov	r5, r0
 8018b28:	2301      	movs	r3, #1
 8018b2a:	e7a8      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018b2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b32:	9341      	str	r3, [sp, #260]	; 0x104
 8018b34:	2300      	movs	r3, #0
 8018b36:	e7a2      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018b38:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018b3a:	06c3      	lsls	r3, r0, #27
 8018b3c:	f53f af2e 	bmi.w	801899c <__svfiscanf_r+0x60>
 8018b40:	9b00      	ldr	r3, [sp, #0]
 8018b42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018b44:	1d19      	adds	r1, r3, #4
 8018b46:	9100      	str	r1, [sp, #0]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	07c0      	lsls	r0, r0, #31
 8018b4c:	bf4c      	ite	mi
 8018b4e:	801a      	strhmi	r2, [r3, #0]
 8018b50:	601a      	strpl	r2, [r3, #0]
 8018b52:	e723      	b.n	801899c <__svfiscanf_r+0x60>
 8018b54:	2305      	movs	r3, #5
 8018b56:	e792      	b.n	8018a7e <__svfiscanf_r+0x142>
 8018b58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018b5a:	4621      	mov	r1, r4
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	4798      	blx	r3
 8018b60:	2800      	cmp	r0, #0
 8018b62:	d090      	beq.n	8018a86 <__svfiscanf_r+0x14a>
 8018b64:	e7c8      	b.n	8018af8 <__svfiscanf_r+0x1bc>
 8018b66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018b68:	3201      	adds	r2, #1
 8018b6a:	9245      	str	r2, [sp, #276]	; 0x114
 8018b6c:	6862      	ldr	r2, [r4, #4]
 8018b6e:	3a01      	subs	r2, #1
 8018b70:	2a00      	cmp	r2, #0
 8018b72:	6062      	str	r2, [r4, #4]
 8018b74:	dd02      	ble.n	8018b7c <__svfiscanf_r+0x240>
 8018b76:	3301      	adds	r3, #1
 8018b78:	6023      	str	r3, [r4, #0]
 8018b7a:	e787      	b.n	8018a8c <__svfiscanf_r+0x150>
 8018b7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018b7e:	4621      	mov	r1, r4
 8018b80:	4630      	mov	r0, r6
 8018b82:	4798      	blx	r3
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d081      	beq.n	8018a8c <__svfiscanf_r+0x150>
 8018b88:	e7b6      	b.n	8018af8 <__svfiscanf_r+0x1bc>
 8018b8a:	2b04      	cmp	r3, #4
 8018b8c:	dc06      	bgt.n	8018b9c <__svfiscanf_r+0x260>
 8018b8e:	466b      	mov	r3, sp
 8018b90:	4622      	mov	r2, r4
 8018b92:	a941      	add	r1, sp, #260	; 0x104
 8018b94:	4630      	mov	r0, r6
 8018b96:	f000 f8ad 	bl	8018cf4 <_scanf_i>
 8018b9a:	e788      	b.n	8018aae <__svfiscanf_r+0x172>
 8018b9c:	4b0e      	ldr	r3, [pc, #56]	; (8018bd8 <__svfiscanf_r+0x29c>)
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	f43f aefc 	beq.w	801899c <__svfiscanf_r+0x60>
 8018ba4:	466b      	mov	r3, sp
 8018ba6:	4622      	mov	r2, r4
 8018ba8:	a941      	add	r1, sp, #260	; 0x104
 8018baa:	4630      	mov	r0, r6
 8018bac:	f7fc f8f6 	bl	8014d9c <_scanf_float>
 8018bb0:	e77d      	b.n	8018aae <__svfiscanf_r+0x172>
 8018bb2:	89a3      	ldrh	r3, [r4, #12]
 8018bb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018bb8:	bf18      	it	ne
 8018bba:	f04f 30ff 	movne.w	r0, #4294967295
 8018bbe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018bc8:	e7f9      	b.n	8018bbe <__svfiscanf_r+0x282>
 8018bca:	bf00      	nop
 8018bcc:	08019331 	.word	0x08019331
 8018bd0:	08018f5d 	.word	0x08018f5d
 8018bd4:	08019af2 	.word	0x08019af2
 8018bd8:	08014d9d 	.word	0x08014d9d

08018bdc <_vfiscanf_r>:
 8018bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be0:	460c      	mov	r4, r1
 8018be2:	4616      	mov	r6, r2
 8018be4:	461f      	mov	r7, r3
 8018be6:	4605      	mov	r5, r0
 8018be8:	b118      	cbz	r0, 8018bf2 <_vfiscanf_r+0x16>
 8018bea:	6983      	ldr	r3, [r0, #24]
 8018bec:	b90b      	cbnz	r3, 8018bf2 <_vfiscanf_r+0x16>
 8018bee:	f7fe faf1 	bl	80171d4 <__sinit>
 8018bf2:	4b0b      	ldr	r3, [pc, #44]	; (8018c20 <_vfiscanf_r+0x44>)
 8018bf4:	429c      	cmp	r4, r3
 8018bf6:	d108      	bne.n	8018c0a <_vfiscanf_r+0x2e>
 8018bf8:	686c      	ldr	r4, [r5, #4]
 8018bfa:	463b      	mov	r3, r7
 8018bfc:	4632      	mov	r2, r6
 8018bfe:	4621      	mov	r1, r4
 8018c00:	4628      	mov	r0, r5
 8018c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c06:	f7ff be99 	b.w	801893c <__svfiscanf_r>
 8018c0a:	4b06      	ldr	r3, [pc, #24]	; (8018c24 <_vfiscanf_r+0x48>)
 8018c0c:	429c      	cmp	r4, r3
 8018c0e:	d101      	bne.n	8018c14 <_vfiscanf_r+0x38>
 8018c10:	68ac      	ldr	r4, [r5, #8]
 8018c12:	e7f2      	b.n	8018bfa <_vfiscanf_r+0x1e>
 8018c14:	4b04      	ldr	r3, [pc, #16]	; (8018c28 <_vfiscanf_r+0x4c>)
 8018c16:	429c      	cmp	r4, r3
 8018c18:	bf08      	it	eq
 8018c1a:	68ec      	ldreq	r4, [r5, #12]
 8018c1c:	e7ed      	b.n	8018bfa <_vfiscanf_r+0x1e>
 8018c1e:	bf00      	nop
 8018c20:	080199a0 	.word	0x080199a0
 8018c24:	080199c0 	.word	0x080199c0
 8018c28:	08019980 	.word	0x08019980

08018c2c <_scanf_chars>:
 8018c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c30:	4615      	mov	r5, r2
 8018c32:	688a      	ldr	r2, [r1, #8]
 8018c34:	4680      	mov	r8, r0
 8018c36:	460c      	mov	r4, r1
 8018c38:	b932      	cbnz	r2, 8018c48 <_scanf_chars+0x1c>
 8018c3a:	698a      	ldr	r2, [r1, #24]
 8018c3c:	2a00      	cmp	r2, #0
 8018c3e:	bf14      	ite	ne
 8018c40:	f04f 32ff 	movne.w	r2, #4294967295
 8018c44:	2201      	moveq	r2, #1
 8018c46:	608a      	str	r2, [r1, #8]
 8018c48:	6822      	ldr	r2, [r4, #0]
 8018c4a:	06d1      	lsls	r1, r2, #27
 8018c4c:	bf5f      	itttt	pl
 8018c4e:	681a      	ldrpl	r2, [r3, #0]
 8018c50:	1d11      	addpl	r1, r2, #4
 8018c52:	6019      	strpl	r1, [r3, #0]
 8018c54:	6817      	ldrpl	r7, [r2, #0]
 8018c56:	2600      	movs	r6, #0
 8018c58:	69a3      	ldr	r3, [r4, #24]
 8018c5a:	b1db      	cbz	r3, 8018c94 <_scanf_chars+0x68>
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d107      	bne.n	8018c70 <_scanf_chars+0x44>
 8018c60:	682b      	ldr	r3, [r5, #0]
 8018c62:	6962      	ldr	r2, [r4, #20]
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	5cd3      	ldrb	r3, [r2, r3]
 8018c68:	b9a3      	cbnz	r3, 8018c94 <_scanf_chars+0x68>
 8018c6a:	2e00      	cmp	r6, #0
 8018c6c:	d132      	bne.n	8018cd4 <_scanf_chars+0xa8>
 8018c6e:	e006      	b.n	8018c7e <_scanf_chars+0x52>
 8018c70:	2b02      	cmp	r3, #2
 8018c72:	d007      	beq.n	8018c84 <_scanf_chars+0x58>
 8018c74:	2e00      	cmp	r6, #0
 8018c76:	d12d      	bne.n	8018cd4 <_scanf_chars+0xa8>
 8018c78:	69a3      	ldr	r3, [r4, #24]
 8018c7a:	2b01      	cmp	r3, #1
 8018c7c:	d12a      	bne.n	8018cd4 <_scanf_chars+0xa8>
 8018c7e:	2001      	movs	r0, #1
 8018c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c84:	f7fe fe76 	bl	8017974 <__locale_ctype_ptr>
 8018c88:	682b      	ldr	r3, [r5, #0]
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	4418      	add	r0, r3
 8018c8e:	7843      	ldrb	r3, [r0, #1]
 8018c90:	071b      	lsls	r3, r3, #28
 8018c92:	d4ef      	bmi.n	8018c74 <_scanf_chars+0x48>
 8018c94:	6823      	ldr	r3, [r4, #0]
 8018c96:	06da      	lsls	r2, r3, #27
 8018c98:	bf5e      	ittt	pl
 8018c9a:	682b      	ldrpl	r3, [r5, #0]
 8018c9c:	781b      	ldrbpl	r3, [r3, #0]
 8018c9e:	703b      	strbpl	r3, [r7, #0]
 8018ca0:	682a      	ldr	r2, [r5, #0]
 8018ca2:	686b      	ldr	r3, [r5, #4]
 8018ca4:	f102 0201 	add.w	r2, r2, #1
 8018ca8:	602a      	str	r2, [r5, #0]
 8018caa:	68a2      	ldr	r2, [r4, #8]
 8018cac:	f103 33ff 	add.w	r3, r3, #4294967295
 8018cb0:	f102 32ff 	add.w	r2, r2, #4294967295
 8018cb4:	606b      	str	r3, [r5, #4]
 8018cb6:	f106 0601 	add.w	r6, r6, #1
 8018cba:	bf58      	it	pl
 8018cbc:	3701      	addpl	r7, #1
 8018cbe:	60a2      	str	r2, [r4, #8]
 8018cc0:	b142      	cbz	r2, 8018cd4 <_scanf_chars+0xa8>
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	dcc8      	bgt.n	8018c58 <_scanf_chars+0x2c>
 8018cc6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018cca:	4629      	mov	r1, r5
 8018ccc:	4640      	mov	r0, r8
 8018cce:	4798      	blx	r3
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	d0c1      	beq.n	8018c58 <_scanf_chars+0x2c>
 8018cd4:	6823      	ldr	r3, [r4, #0]
 8018cd6:	f013 0310 	ands.w	r3, r3, #16
 8018cda:	d105      	bne.n	8018ce8 <_scanf_chars+0xbc>
 8018cdc:	68e2      	ldr	r2, [r4, #12]
 8018cde:	3201      	adds	r2, #1
 8018ce0:	60e2      	str	r2, [r4, #12]
 8018ce2:	69a2      	ldr	r2, [r4, #24]
 8018ce4:	b102      	cbz	r2, 8018ce8 <_scanf_chars+0xbc>
 8018ce6:	703b      	strb	r3, [r7, #0]
 8018ce8:	6923      	ldr	r3, [r4, #16]
 8018cea:	441e      	add	r6, r3
 8018cec:	6126      	str	r6, [r4, #16]
 8018cee:	2000      	movs	r0, #0
 8018cf0:	e7c6      	b.n	8018c80 <_scanf_chars+0x54>
	...

08018cf4 <_scanf_i>:
 8018cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf8:	469a      	mov	sl, r3
 8018cfa:	4b74      	ldr	r3, [pc, #464]	; (8018ecc <_scanf_i+0x1d8>)
 8018cfc:	460c      	mov	r4, r1
 8018cfe:	4683      	mov	fp, r0
 8018d00:	4616      	mov	r6, r2
 8018d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018d06:	b087      	sub	sp, #28
 8018d08:	ab03      	add	r3, sp, #12
 8018d0a:	68a7      	ldr	r7, [r4, #8]
 8018d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018d10:	4b6f      	ldr	r3, [pc, #444]	; (8018ed0 <_scanf_i+0x1dc>)
 8018d12:	69a1      	ldr	r1, [r4, #24]
 8018d14:	4a6f      	ldr	r2, [pc, #444]	; (8018ed4 <_scanf_i+0x1e0>)
 8018d16:	2903      	cmp	r1, #3
 8018d18:	bf08      	it	eq
 8018d1a:	461a      	moveq	r2, r3
 8018d1c:	1e7b      	subs	r3, r7, #1
 8018d1e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018d22:	bf84      	itt	hi
 8018d24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018d28:	60a3      	strhi	r3, [r4, #8]
 8018d2a:	6823      	ldr	r3, [r4, #0]
 8018d2c:	9200      	str	r2, [sp, #0]
 8018d2e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018d32:	bf88      	it	hi
 8018d34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018d38:	f104 091c 	add.w	r9, r4, #28
 8018d3c:	6023      	str	r3, [r4, #0]
 8018d3e:	bf8c      	ite	hi
 8018d40:	197f      	addhi	r7, r7, r5
 8018d42:	2700      	movls	r7, #0
 8018d44:	464b      	mov	r3, r9
 8018d46:	f04f 0800 	mov.w	r8, #0
 8018d4a:	9301      	str	r3, [sp, #4]
 8018d4c:	6831      	ldr	r1, [r6, #0]
 8018d4e:	ab03      	add	r3, sp, #12
 8018d50:	2202      	movs	r2, #2
 8018d52:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018d56:	7809      	ldrb	r1, [r1, #0]
 8018d58:	f7ef f97a 	bl	8008050 <memchr>
 8018d5c:	9b01      	ldr	r3, [sp, #4]
 8018d5e:	b330      	cbz	r0, 8018dae <_scanf_i+0xba>
 8018d60:	f1b8 0f01 	cmp.w	r8, #1
 8018d64:	d15a      	bne.n	8018e1c <_scanf_i+0x128>
 8018d66:	6862      	ldr	r2, [r4, #4]
 8018d68:	b92a      	cbnz	r2, 8018d76 <_scanf_i+0x82>
 8018d6a:	6822      	ldr	r2, [r4, #0]
 8018d6c:	2108      	movs	r1, #8
 8018d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d72:	6061      	str	r1, [r4, #4]
 8018d74:	6022      	str	r2, [r4, #0]
 8018d76:	6822      	ldr	r2, [r4, #0]
 8018d78:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018d7c:	6022      	str	r2, [r4, #0]
 8018d7e:	68a2      	ldr	r2, [r4, #8]
 8018d80:	1e51      	subs	r1, r2, #1
 8018d82:	60a1      	str	r1, [r4, #8]
 8018d84:	b19a      	cbz	r2, 8018dae <_scanf_i+0xba>
 8018d86:	6832      	ldr	r2, [r6, #0]
 8018d88:	1c51      	adds	r1, r2, #1
 8018d8a:	6031      	str	r1, [r6, #0]
 8018d8c:	7812      	ldrb	r2, [r2, #0]
 8018d8e:	701a      	strb	r2, [r3, #0]
 8018d90:	1c5d      	adds	r5, r3, #1
 8018d92:	6873      	ldr	r3, [r6, #4]
 8018d94:	3b01      	subs	r3, #1
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	6073      	str	r3, [r6, #4]
 8018d9a:	dc07      	bgt.n	8018dac <_scanf_i+0xb8>
 8018d9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018da0:	4631      	mov	r1, r6
 8018da2:	4658      	mov	r0, fp
 8018da4:	4798      	blx	r3
 8018da6:	2800      	cmp	r0, #0
 8018da8:	f040 8086 	bne.w	8018eb8 <_scanf_i+0x1c4>
 8018dac:	462b      	mov	r3, r5
 8018dae:	f108 0801 	add.w	r8, r8, #1
 8018db2:	f1b8 0f03 	cmp.w	r8, #3
 8018db6:	d1c8      	bne.n	8018d4a <_scanf_i+0x56>
 8018db8:	6862      	ldr	r2, [r4, #4]
 8018dba:	b90a      	cbnz	r2, 8018dc0 <_scanf_i+0xcc>
 8018dbc:	220a      	movs	r2, #10
 8018dbe:	6062      	str	r2, [r4, #4]
 8018dc0:	6862      	ldr	r2, [r4, #4]
 8018dc2:	4945      	ldr	r1, [pc, #276]	; (8018ed8 <_scanf_i+0x1e4>)
 8018dc4:	6960      	ldr	r0, [r4, #20]
 8018dc6:	9301      	str	r3, [sp, #4]
 8018dc8:	1a89      	subs	r1, r1, r2
 8018dca:	f000 f963 	bl	8019094 <__sccl>
 8018dce:	9b01      	ldr	r3, [sp, #4]
 8018dd0:	f04f 0800 	mov.w	r8, #0
 8018dd4:	461d      	mov	r5, r3
 8018dd6:	68a3      	ldr	r3, [r4, #8]
 8018dd8:	6822      	ldr	r2, [r4, #0]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d03a      	beq.n	8018e54 <_scanf_i+0x160>
 8018dde:	6831      	ldr	r1, [r6, #0]
 8018de0:	6960      	ldr	r0, [r4, #20]
 8018de2:	f891 c000 	ldrb.w	ip, [r1]
 8018de6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018dea:	2800      	cmp	r0, #0
 8018dec:	d032      	beq.n	8018e54 <_scanf_i+0x160>
 8018dee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018df2:	d121      	bne.n	8018e38 <_scanf_i+0x144>
 8018df4:	0510      	lsls	r0, r2, #20
 8018df6:	d51f      	bpl.n	8018e38 <_scanf_i+0x144>
 8018df8:	f108 0801 	add.w	r8, r8, #1
 8018dfc:	b117      	cbz	r7, 8018e04 <_scanf_i+0x110>
 8018dfe:	3301      	adds	r3, #1
 8018e00:	3f01      	subs	r7, #1
 8018e02:	60a3      	str	r3, [r4, #8]
 8018e04:	6873      	ldr	r3, [r6, #4]
 8018e06:	3b01      	subs	r3, #1
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	6073      	str	r3, [r6, #4]
 8018e0c:	dd1b      	ble.n	8018e46 <_scanf_i+0x152>
 8018e0e:	6833      	ldr	r3, [r6, #0]
 8018e10:	3301      	adds	r3, #1
 8018e12:	6033      	str	r3, [r6, #0]
 8018e14:	68a3      	ldr	r3, [r4, #8]
 8018e16:	3b01      	subs	r3, #1
 8018e18:	60a3      	str	r3, [r4, #8]
 8018e1a:	e7dc      	b.n	8018dd6 <_scanf_i+0xe2>
 8018e1c:	f1b8 0f02 	cmp.w	r8, #2
 8018e20:	d1ad      	bne.n	8018d7e <_scanf_i+0x8a>
 8018e22:	6822      	ldr	r2, [r4, #0]
 8018e24:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018e28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018e2c:	d1bf      	bne.n	8018dae <_scanf_i+0xba>
 8018e2e:	2110      	movs	r1, #16
 8018e30:	6061      	str	r1, [r4, #4]
 8018e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018e36:	e7a1      	b.n	8018d7c <_scanf_i+0x88>
 8018e38:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018e3c:	6022      	str	r2, [r4, #0]
 8018e3e:	780b      	ldrb	r3, [r1, #0]
 8018e40:	702b      	strb	r3, [r5, #0]
 8018e42:	3501      	adds	r5, #1
 8018e44:	e7de      	b.n	8018e04 <_scanf_i+0x110>
 8018e46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018e4a:	4631      	mov	r1, r6
 8018e4c:	4658      	mov	r0, fp
 8018e4e:	4798      	blx	r3
 8018e50:	2800      	cmp	r0, #0
 8018e52:	d0df      	beq.n	8018e14 <_scanf_i+0x120>
 8018e54:	6823      	ldr	r3, [r4, #0]
 8018e56:	05d9      	lsls	r1, r3, #23
 8018e58:	d50c      	bpl.n	8018e74 <_scanf_i+0x180>
 8018e5a:	454d      	cmp	r5, r9
 8018e5c:	d908      	bls.n	8018e70 <_scanf_i+0x17c>
 8018e5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e66:	4632      	mov	r2, r6
 8018e68:	4658      	mov	r0, fp
 8018e6a:	4798      	blx	r3
 8018e6c:	1e6f      	subs	r7, r5, #1
 8018e6e:	463d      	mov	r5, r7
 8018e70:	454d      	cmp	r5, r9
 8018e72:	d029      	beq.n	8018ec8 <_scanf_i+0x1d4>
 8018e74:	6822      	ldr	r2, [r4, #0]
 8018e76:	f012 0210 	ands.w	r2, r2, #16
 8018e7a:	d113      	bne.n	8018ea4 <_scanf_i+0x1b0>
 8018e7c:	702a      	strb	r2, [r5, #0]
 8018e7e:	6863      	ldr	r3, [r4, #4]
 8018e80:	9e00      	ldr	r6, [sp, #0]
 8018e82:	4649      	mov	r1, r9
 8018e84:	4658      	mov	r0, fp
 8018e86:	47b0      	blx	r6
 8018e88:	f8da 3000 	ldr.w	r3, [sl]
 8018e8c:	6821      	ldr	r1, [r4, #0]
 8018e8e:	1d1a      	adds	r2, r3, #4
 8018e90:	f8ca 2000 	str.w	r2, [sl]
 8018e94:	f011 0f20 	tst.w	r1, #32
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	d010      	beq.n	8018ebe <_scanf_i+0x1ca>
 8018e9c:	6018      	str	r0, [r3, #0]
 8018e9e:	68e3      	ldr	r3, [r4, #12]
 8018ea0:	3301      	adds	r3, #1
 8018ea2:	60e3      	str	r3, [r4, #12]
 8018ea4:	eba5 0509 	sub.w	r5, r5, r9
 8018ea8:	44a8      	add	r8, r5
 8018eaa:	6925      	ldr	r5, [r4, #16]
 8018eac:	4445      	add	r5, r8
 8018eae:	6125      	str	r5, [r4, #16]
 8018eb0:	2000      	movs	r0, #0
 8018eb2:	b007      	add	sp, #28
 8018eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eb8:	f04f 0800 	mov.w	r8, #0
 8018ebc:	e7ca      	b.n	8018e54 <_scanf_i+0x160>
 8018ebe:	07ca      	lsls	r2, r1, #31
 8018ec0:	bf4c      	ite	mi
 8018ec2:	8018      	strhmi	r0, [r3, #0]
 8018ec4:	6018      	strpl	r0, [r3, #0]
 8018ec6:	e7ea      	b.n	8018e9e <_scanf_i+0x1aa>
 8018ec8:	2001      	movs	r0, #1
 8018eca:	e7f2      	b.n	8018eb2 <_scanf_i+0x1be>
 8018ecc:	080198b0 	.word	0x080198b0
 8018ed0:	080161a1 	.word	0x080161a1
 8018ed4:	08019299 	.word	0x08019299
 8018ed8:	08019b0d 	.word	0x08019b0d

08018edc <_putc_r>:
 8018edc:	b570      	push	{r4, r5, r6, lr}
 8018ede:	460d      	mov	r5, r1
 8018ee0:	4614      	mov	r4, r2
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	b118      	cbz	r0, 8018eee <_putc_r+0x12>
 8018ee6:	6983      	ldr	r3, [r0, #24]
 8018ee8:	b90b      	cbnz	r3, 8018eee <_putc_r+0x12>
 8018eea:	f7fe f973 	bl	80171d4 <__sinit>
 8018eee:	4b13      	ldr	r3, [pc, #76]	; (8018f3c <_putc_r+0x60>)
 8018ef0:	429c      	cmp	r4, r3
 8018ef2:	d112      	bne.n	8018f1a <_putc_r+0x3e>
 8018ef4:	6874      	ldr	r4, [r6, #4]
 8018ef6:	68a3      	ldr	r3, [r4, #8]
 8018ef8:	3b01      	subs	r3, #1
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	60a3      	str	r3, [r4, #8]
 8018efe:	da16      	bge.n	8018f2e <_putc_r+0x52>
 8018f00:	69a2      	ldr	r2, [r4, #24]
 8018f02:	4293      	cmp	r3, r2
 8018f04:	db02      	blt.n	8018f0c <_putc_r+0x30>
 8018f06:	b2eb      	uxtb	r3, r5
 8018f08:	2b0a      	cmp	r3, #10
 8018f0a:	d110      	bne.n	8018f2e <_putc_r+0x52>
 8018f0c:	4622      	mov	r2, r4
 8018f0e:	4629      	mov	r1, r5
 8018f10:	4630      	mov	r0, r6
 8018f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f16:	f7fd b955 	b.w	80161c4 <__swbuf_r>
 8018f1a:	4b09      	ldr	r3, [pc, #36]	; (8018f40 <_putc_r+0x64>)
 8018f1c:	429c      	cmp	r4, r3
 8018f1e:	d101      	bne.n	8018f24 <_putc_r+0x48>
 8018f20:	68b4      	ldr	r4, [r6, #8]
 8018f22:	e7e8      	b.n	8018ef6 <_putc_r+0x1a>
 8018f24:	4b07      	ldr	r3, [pc, #28]	; (8018f44 <_putc_r+0x68>)
 8018f26:	429c      	cmp	r4, r3
 8018f28:	bf08      	it	eq
 8018f2a:	68f4      	ldreq	r4, [r6, #12]
 8018f2c:	e7e3      	b.n	8018ef6 <_putc_r+0x1a>
 8018f2e:	6823      	ldr	r3, [r4, #0]
 8018f30:	1c5a      	adds	r2, r3, #1
 8018f32:	6022      	str	r2, [r4, #0]
 8018f34:	701d      	strb	r5, [r3, #0]
 8018f36:	b2e8      	uxtb	r0, r5
 8018f38:	bd70      	pop	{r4, r5, r6, pc}
 8018f3a:	bf00      	nop
 8018f3c:	080199a0 	.word	0x080199a0
 8018f40:	080199c0 	.word	0x080199c0
 8018f44:	08019980 	.word	0x08019980

08018f48 <lflush>:
 8018f48:	8983      	ldrh	r3, [r0, #12]
 8018f4a:	f003 0309 	and.w	r3, r3, #9
 8018f4e:	2b09      	cmp	r3, #9
 8018f50:	d101      	bne.n	8018f56 <lflush+0xe>
 8018f52:	f7fe b8ed 	b.w	8017130 <fflush>
 8018f56:	2000      	movs	r0, #0
 8018f58:	4770      	bx	lr
	...

08018f5c <__srefill_r>:
 8018f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f5e:	460c      	mov	r4, r1
 8018f60:	4605      	mov	r5, r0
 8018f62:	b118      	cbz	r0, 8018f6c <__srefill_r+0x10>
 8018f64:	6983      	ldr	r3, [r0, #24]
 8018f66:	b90b      	cbnz	r3, 8018f6c <__srefill_r+0x10>
 8018f68:	f7fe f934 	bl	80171d4 <__sinit>
 8018f6c:	4b3c      	ldr	r3, [pc, #240]	; (8019060 <__srefill_r+0x104>)
 8018f6e:	429c      	cmp	r4, r3
 8018f70:	d10a      	bne.n	8018f88 <__srefill_r+0x2c>
 8018f72:	686c      	ldr	r4, [r5, #4]
 8018f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f78:	2300      	movs	r3, #0
 8018f7a:	6063      	str	r3, [r4, #4]
 8018f7c:	b293      	uxth	r3, r2
 8018f7e:	069e      	lsls	r6, r3, #26
 8018f80:	d50c      	bpl.n	8018f9c <__srefill_r+0x40>
 8018f82:	f04f 30ff 	mov.w	r0, #4294967295
 8018f86:	e067      	b.n	8019058 <__srefill_r+0xfc>
 8018f88:	4b36      	ldr	r3, [pc, #216]	; (8019064 <__srefill_r+0x108>)
 8018f8a:	429c      	cmp	r4, r3
 8018f8c:	d101      	bne.n	8018f92 <__srefill_r+0x36>
 8018f8e:	68ac      	ldr	r4, [r5, #8]
 8018f90:	e7f0      	b.n	8018f74 <__srefill_r+0x18>
 8018f92:	4b35      	ldr	r3, [pc, #212]	; (8019068 <__srefill_r+0x10c>)
 8018f94:	429c      	cmp	r4, r3
 8018f96:	bf08      	it	eq
 8018f98:	68ec      	ldreq	r4, [r5, #12]
 8018f9a:	e7eb      	b.n	8018f74 <__srefill_r+0x18>
 8018f9c:	0758      	lsls	r0, r3, #29
 8018f9e:	d449      	bmi.n	8019034 <__srefill_r+0xd8>
 8018fa0:	06d9      	lsls	r1, r3, #27
 8018fa2:	d405      	bmi.n	8018fb0 <__srefill_r+0x54>
 8018fa4:	2309      	movs	r3, #9
 8018fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018faa:	602b      	str	r3, [r5, #0]
 8018fac:	81a2      	strh	r2, [r4, #12]
 8018fae:	e7e8      	b.n	8018f82 <__srefill_r+0x26>
 8018fb0:	071a      	lsls	r2, r3, #28
 8018fb2:	d50b      	bpl.n	8018fcc <__srefill_r+0x70>
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	f7fe f890 	bl	80170dc <_fflush_r>
 8018fbc:	2800      	cmp	r0, #0
 8018fbe:	d1e0      	bne.n	8018f82 <__srefill_r+0x26>
 8018fc0:	89a3      	ldrh	r3, [r4, #12]
 8018fc2:	60a0      	str	r0, [r4, #8]
 8018fc4:	f023 0308 	bic.w	r3, r3, #8
 8018fc8:	81a3      	strh	r3, [r4, #12]
 8018fca:	61a0      	str	r0, [r4, #24]
 8018fcc:	89a3      	ldrh	r3, [r4, #12]
 8018fce:	f043 0304 	orr.w	r3, r3, #4
 8018fd2:	81a3      	strh	r3, [r4, #12]
 8018fd4:	6923      	ldr	r3, [r4, #16]
 8018fd6:	b91b      	cbnz	r3, 8018fe0 <__srefill_r+0x84>
 8018fd8:	4621      	mov	r1, r4
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f7fe fd0c 	bl	80179f8 <__smakebuf_r>
 8018fe0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018fe4:	b2be      	uxth	r6, r7
 8018fe6:	07b3      	lsls	r3, r6, #30
 8018fe8:	d00f      	beq.n	801900a <__srefill_r+0xae>
 8018fea:	2301      	movs	r3, #1
 8018fec:	81a3      	strh	r3, [r4, #12]
 8018fee:	4b1f      	ldr	r3, [pc, #124]	; (801906c <__srefill_r+0x110>)
 8018ff0:	491f      	ldr	r1, [pc, #124]	; (8019070 <__srefill_r+0x114>)
 8018ff2:	6818      	ldr	r0, [r3, #0]
 8018ff4:	f006 0609 	and.w	r6, r6, #9
 8018ff8:	f7fe f958 	bl	80172ac <_fwalk>
 8018ffc:	2e09      	cmp	r6, #9
 8018ffe:	81a7      	strh	r7, [r4, #12]
 8019000:	d103      	bne.n	801900a <__srefill_r+0xae>
 8019002:	4621      	mov	r1, r4
 8019004:	4628      	mov	r0, r5
 8019006:	f7fd ffe3 	bl	8016fd0 <__sflush_r>
 801900a:	6922      	ldr	r2, [r4, #16]
 801900c:	6022      	str	r2, [r4, #0]
 801900e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019010:	6963      	ldr	r3, [r4, #20]
 8019012:	6a21      	ldr	r1, [r4, #32]
 8019014:	4628      	mov	r0, r5
 8019016:	47b0      	blx	r6
 8019018:	2800      	cmp	r0, #0
 801901a:	6060      	str	r0, [r4, #4]
 801901c:	dc1d      	bgt.n	801905a <__srefill_r+0xfe>
 801901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019022:	bf17      	itett	ne
 8019024:	2200      	movne	r2, #0
 8019026:	f043 0320 	orreq.w	r3, r3, #32
 801902a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801902e:	6062      	strne	r2, [r4, #4]
 8019030:	81a3      	strh	r3, [r4, #12]
 8019032:	e7a6      	b.n	8018f82 <__srefill_r+0x26>
 8019034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019036:	2900      	cmp	r1, #0
 8019038:	d0cc      	beq.n	8018fd4 <__srefill_r+0x78>
 801903a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801903e:	4299      	cmp	r1, r3
 8019040:	d002      	beq.n	8019048 <__srefill_r+0xec>
 8019042:	4628      	mov	r0, r5
 8019044:	f7ff f940 	bl	80182c8 <_free_r>
 8019048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801904a:	6063      	str	r3, [r4, #4]
 801904c:	2000      	movs	r0, #0
 801904e:	6360      	str	r0, [r4, #52]	; 0x34
 8019050:	2b00      	cmp	r3, #0
 8019052:	d0bf      	beq.n	8018fd4 <__srefill_r+0x78>
 8019054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019056:	6023      	str	r3, [r4, #0]
 8019058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801905a:	2000      	movs	r0, #0
 801905c:	e7fc      	b.n	8019058 <__srefill_r+0xfc>
 801905e:	bf00      	nop
 8019060:	080199a0 	.word	0x080199a0
 8019064:	080199c0 	.word	0x080199c0
 8019068:	08019980 	.word	0x08019980
 801906c:	080198e4 	.word	0x080198e4
 8019070:	08018f49 	.word	0x08018f49

08019074 <_sbrk_r>:
 8019074:	b538      	push	{r3, r4, r5, lr}
 8019076:	4c06      	ldr	r4, [pc, #24]	; (8019090 <_sbrk_r+0x1c>)
 8019078:	2300      	movs	r3, #0
 801907a:	4605      	mov	r5, r0
 801907c:	4608      	mov	r0, r1
 801907e:	6023      	str	r3, [r4, #0]
 8019080:	f7f5 fd3a 	bl	800eaf8 <_sbrk>
 8019084:	1c43      	adds	r3, r0, #1
 8019086:	d102      	bne.n	801908e <_sbrk_r+0x1a>
 8019088:	6823      	ldr	r3, [r4, #0]
 801908a:	b103      	cbz	r3, 801908e <_sbrk_r+0x1a>
 801908c:	602b      	str	r3, [r5, #0]
 801908e:	bd38      	pop	{r3, r4, r5, pc}
 8019090:	20000e30 	.word	0x20000e30

08019094 <__sccl>:
 8019094:	b570      	push	{r4, r5, r6, lr}
 8019096:	780b      	ldrb	r3, [r1, #0]
 8019098:	2b5e      	cmp	r3, #94	; 0x5e
 801909a:	bf13      	iteet	ne
 801909c:	1c4a      	addne	r2, r1, #1
 801909e:	1c8a      	addeq	r2, r1, #2
 80190a0:	784b      	ldrbeq	r3, [r1, #1]
 80190a2:	2100      	movne	r1, #0
 80190a4:	bf08      	it	eq
 80190a6:	2101      	moveq	r1, #1
 80190a8:	1e44      	subs	r4, r0, #1
 80190aa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80190ae:	f804 1f01 	strb.w	r1, [r4, #1]!
 80190b2:	42ac      	cmp	r4, r5
 80190b4:	d1fb      	bne.n	80190ae <__sccl+0x1a>
 80190b6:	b913      	cbnz	r3, 80190be <__sccl+0x2a>
 80190b8:	3a01      	subs	r2, #1
 80190ba:	4610      	mov	r0, r2
 80190bc:	bd70      	pop	{r4, r5, r6, pc}
 80190be:	f081 0401 	eor.w	r4, r1, #1
 80190c2:	54c4      	strb	r4, [r0, r3]
 80190c4:	1c51      	adds	r1, r2, #1
 80190c6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80190ca:	2d2d      	cmp	r5, #45	; 0x2d
 80190cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80190d0:	460a      	mov	r2, r1
 80190d2:	d006      	beq.n	80190e2 <__sccl+0x4e>
 80190d4:	2d5d      	cmp	r5, #93	; 0x5d
 80190d6:	d0f0      	beq.n	80190ba <__sccl+0x26>
 80190d8:	b90d      	cbnz	r5, 80190de <__sccl+0x4a>
 80190da:	4632      	mov	r2, r6
 80190dc:	e7ed      	b.n	80190ba <__sccl+0x26>
 80190de:	462b      	mov	r3, r5
 80190e0:	e7ef      	b.n	80190c2 <__sccl+0x2e>
 80190e2:	780e      	ldrb	r6, [r1, #0]
 80190e4:	2e5d      	cmp	r6, #93	; 0x5d
 80190e6:	d0fa      	beq.n	80190de <__sccl+0x4a>
 80190e8:	42b3      	cmp	r3, r6
 80190ea:	dcf8      	bgt.n	80190de <__sccl+0x4a>
 80190ec:	3301      	adds	r3, #1
 80190ee:	429e      	cmp	r6, r3
 80190f0:	54c4      	strb	r4, [r0, r3]
 80190f2:	dcfb      	bgt.n	80190ec <__sccl+0x58>
 80190f4:	3102      	adds	r1, #2
 80190f6:	e7e6      	b.n	80190c6 <__sccl+0x32>

080190f8 <__sread>:
 80190f8:	b510      	push	{r4, lr}
 80190fa:	460c      	mov	r4, r1
 80190fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019100:	f000 fa2e 	bl	8019560 <_read_r>
 8019104:	2800      	cmp	r0, #0
 8019106:	bfab      	itete	ge
 8019108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801910a:	89a3      	ldrhlt	r3, [r4, #12]
 801910c:	181b      	addge	r3, r3, r0
 801910e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019112:	bfac      	ite	ge
 8019114:	6563      	strge	r3, [r4, #84]	; 0x54
 8019116:	81a3      	strhlt	r3, [r4, #12]
 8019118:	bd10      	pop	{r4, pc}

0801911a <__swrite>:
 801911a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801911e:	461f      	mov	r7, r3
 8019120:	898b      	ldrh	r3, [r1, #12]
 8019122:	05db      	lsls	r3, r3, #23
 8019124:	4605      	mov	r5, r0
 8019126:	460c      	mov	r4, r1
 8019128:	4616      	mov	r6, r2
 801912a:	d505      	bpl.n	8019138 <__swrite+0x1e>
 801912c:	2302      	movs	r3, #2
 801912e:	2200      	movs	r2, #0
 8019130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019134:	f000 f9c0 	bl	80194b8 <_lseek_r>
 8019138:	89a3      	ldrh	r3, [r4, #12]
 801913a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801913e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019142:	81a3      	strh	r3, [r4, #12]
 8019144:	4632      	mov	r2, r6
 8019146:	463b      	mov	r3, r7
 8019148:	4628      	mov	r0, r5
 801914a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801914e:	f000 b96f 	b.w	8019430 <_write_r>

08019152 <__sseek>:
 8019152:	b510      	push	{r4, lr}
 8019154:	460c      	mov	r4, r1
 8019156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801915a:	f000 f9ad 	bl	80194b8 <_lseek_r>
 801915e:	1c43      	adds	r3, r0, #1
 8019160:	89a3      	ldrh	r3, [r4, #12]
 8019162:	bf15      	itete	ne
 8019164:	6560      	strne	r0, [r4, #84]	; 0x54
 8019166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801916a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801916e:	81a3      	strheq	r3, [r4, #12]
 8019170:	bf18      	it	ne
 8019172:	81a3      	strhne	r3, [r4, #12]
 8019174:	bd10      	pop	{r4, pc}

08019176 <__sclose>:
 8019176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801917a:	f000 b96b 	b.w	8019454 <_close_r>

0801917e <strncmp>:
 801917e:	b510      	push	{r4, lr}
 8019180:	b16a      	cbz	r2, 801919e <strncmp+0x20>
 8019182:	3901      	subs	r1, #1
 8019184:	1884      	adds	r4, r0, r2
 8019186:	f810 3b01 	ldrb.w	r3, [r0], #1
 801918a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801918e:	4293      	cmp	r3, r2
 8019190:	d103      	bne.n	801919a <strncmp+0x1c>
 8019192:	42a0      	cmp	r0, r4
 8019194:	d001      	beq.n	801919a <strncmp+0x1c>
 8019196:	2b00      	cmp	r3, #0
 8019198:	d1f5      	bne.n	8019186 <strncmp+0x8>
 801919a:	1a98      	subs	r0, r3, r2
 801919c:	bd10      	pop	{r4, pc}
 801919e:	4610      	mov	r0, r2
 80191a0:	e7fc      	b.n	801919c <strncmp+0x1e>

080191a2 <_strtoul_l.isra.0>:
 80191a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191a6:	4680      	mov	r8, r0
 80191a8:	4689      	mov	r9, r1
 80191aa:	4692      	mov	sl, r2
 80191ac:	461e      	mov	r6, r3
 80191ae:	460f      	mov	r7, r1
 80191b0:	463d      	mov	r5, r7
 80191b2:	9808      	ldr	r0, [sp, #32]
 80191b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191b8:	f7fe fbd8 	bl	801796c <__locale_ctype_ptr_l>
 80191bc:	4420      	add	r0, r4
 80191be:	7843      	ldrb	r3, [r0, #1]
 80191c0:	f013 0308 	ands.w	r3, r3, #8
 80191c4:	d130      	bne.n	8019228 <_strtoul_l.isra.0+0x86>
 80191c6:	2c2d      	cmp	r4, #45	; 0x2d
 80191c8:	d130      	bne.n	801922c <_strtoul_l.isra.0+0x8a>
 80191ca:	787c      	ldrb	r4, [r7, #1]
 80191cc:	1cbd      	adds	r5, r7, #2
 80191ce:	2101      	movs	r1, #1
 80191d0:	2e00      	cmp	r6, #0
 80191d2:	d05c      	beq.n	801928e <_strtoul_l.isra.0+0xec>
 80191d4:	2e10      	cmp	r6, #16
 80191d6:	d109      	bne.n	80191ec <_strtoul_l.isra.0+0x4a>
 80191d8:	2c30      	cmp	r4, #48	; 0x30
 80191da:	d107      	bne.n	80191ec <_strtoul_l.isra.0+0x4a>
 80191dc:	782b      	ldrb	r3, [r5, #0]
 80191de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80191e2:	2b58      	cmp	r3, #88	; 0x58
 80191e4:	d14e      	bne.n	8019284 <_strtoul_l.isra.0+0xe2>
 80191e6:	786c      	ldrb	r4, [r5, #1]
 80191e8:	2610      	movs	r6, #16
 80191ea:	3502      	adds	r5, #2
 80191ec:	f04f 32ff 	mov.w	r2, #4294967295
 80191f0:	2300      	movs	r3, #0
 80191f2:	fbb2 f2f6 	udiv	r2, r2, r6
 80191f6:	fb06 fc02 	mul.w	ip, r6, r2
 80191fa:	ea6f 0c0c 	mvn.w	ip, ip
 80191fe:	4618      	mov	r0, r3
 8019200:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019204:	2f09      	cmp	r7, #9
 8019206:	d817      	bhi.n	8019238 <_strtoul_l.isra.0+0x96>
 8019208:	463c      	mov	r4, r7
 801920a:	42a6      	cmp	r6, r4
 801920c:	dd23      	ble.n	8019256 <_strtoul_l.isra.0+0xb4>
 801920e:	2b00      	cmp	r3, #0
 8019210:	db1e      	blt.n	8019250 <_strtoul_l.isra.0+0xae>
 8019212:	4282      	cmp	r2, r0
 8019214:	d31c      	bcc.n	8019250 <_strtoul_l.isra.0+0xae>
 8019216:	d101      	bne.n	801921c <_strtoul_l.isra.0+0x7a>
 8019218:	45a4      	cmp	ip, r4
 801921a:	db19      	blt.n	8019250 <_strtoul_l.isra.0+0xae>
 801921c:	fb00 4006 	mla	r0, r0, r6, r4
 8019220:	2301      	movs	r3, #1
 8019222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019226:	e7eb      	b.n	8019200 <_strtoul_l.isra.0+0x5e>
 8019228:	462f      	mov	r7, r5
 801922a:	e7c1      	b.n	80191b0 <_strtoul_l.isra.0+0xe>
 801922c:	2c2b      	cmp	r4, #43	; 0x2b
 801922e:	bf04      	itt	eq
 8019230:	1cbd      	addeq	r5, r7, #2
 8019232:	787c      	ldrbeq	r4, [r7, #1]
 8019234:	4619      	mov	r1, r3
 8019236:	e7cb      	b.n	80191d0 <_strtoul_l.isra.0+0x2e>
 8019238:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801923c:	2f19      	cmp	r7, #25
 801923e:	d801      	bhi.n	8019244 <_strtoul_l.isra.0+0xa2>
 8019240:	3c37      	subs	r4, #55	; 0x37
 8019242:	e7e2      	b.n	801920a <_strtoul_l.isra.0+0x68>
 8019244:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019248:	2f19      	cmp	r7, #25
 801924a:	d804      	bhi.n	8019256 <_strtoul_l.isra.0+0xb4>
 801924c:	3c57      	subs	r4, #87	; 0x57
 801924e:	e7dc      	b.n	801920a <_strtoul_l.isra.0+0x68>
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
 8019254:	e7e5      	b.n	8019222 <_strtoul_l.isra.0+0x80>
 8019256:	2b00      	cmp	r3, #0
 8019258:	da09      	bge.n	801926e <_strtoul_l.isra.0+0xcc>
 801925a:	2322      	movs	r3, #34	; 0x22
 801925c:	f8c8 3000 	str.w	r3, [r8]
 8019260:	f04f 30ff 	mov.w	r0, #4294967295
 8019264:	f1ba 0f00 	cmp.w	sl, #0
 8019268:	d107      	bne.n	801927a <_strtoul_l.isra.0+0xd8>
 801926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801926e:	b101      	cbz	r1, 8019272 <_strtoul_l.isra.0+0xd0>
 8019270:	4240      	negs	r0, r0
 8019272:	f1ba 0f00 	cmp.w	sl, #0
 8019276:	d0f8      	beq.n	801926a <_strtoul_l.isra.0+0xc8>
 8019278:	b10b      	cbz	r3, 801927e <_strtoul_l.isra.0+0xdc>
 801927a:	f105 39ff 	add.w	r9, r5, #4294967295
 801927e:	f8ca 9000 	str.w	r9, [sl]
 8019282:	e7f2      	b.n	801926a <_strtoul_l.isra.0+0xc8>
 8019284:	2430      	movs	r4, #48	; 0x30
 8019286:	2e00      	cmp	r6, #0
 8019288:	d1b0      	bne.n	80191ec <_strtoul_l.isra.0+0x4a>
 801928a:	2608      	movs	r6, #8
 801928c:	e7ae      	b.n	80191ec <_strtoul_l.isra.0+0x4a>
 801928e:	2c30      	cmp	r4, #48	; 0x30
 8019290:	d0a4      	beq.n	80191dc <_strtoul_l.isra.0+0x3a>
 8019292:	260a      	movs	r6, #10
 8019294:	e7aa      	b.n	80191ec <_strtoul_l.isra.0+0x4a>
	...

08019298 <_strtoul_r>:
 8019298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801929a:	4c06      	ldr	r4, [pc, #24]	; (80192b4 <_strtoul_r+0x1c>)
 801929c:	4d06      	ldr	r5, [pc, #24]	; (80192b8 <_strtoul_r+0x20>)
 801929e:	6824      	ldr	r4, [r4, #0]
 80192a0:	6a24      	ldr	r4, [r4, #32]
 80192a2:	2c00      	cmp	r4, #0
 80192a4:	bf08      	it	eq
 80192a6:	462c      	moveq	r4, r5
 80192a8:	9400      	str	r4, [sp, #0]
 80192aa:	f7ff ff7a 	bl	80191a2 <_strtoul_l.isra.0>
 80192ae:	b003      	add	sp, #12
 80192b0:	bd30      	pop	{r4, r5, pc}
 80192b2:	bf00      	nop
 80192b4:	20000028 	.word	0x20000028
 80192b8:	2000008c 	.word	0x2000008c

080192bc <__submore>:
 80192bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192c0:	460c      	mov	r4, r1
 80192c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80192c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192c8:	4299      	cmp	r1, r3
 80192ca:	d11d      	bne.n	8019308 <__submore+0x4c>
 80192cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80192d0:	f7ff f848 	bl	8018364 <_malloc_r>
 80192d4:	b918      	cbnz	r0, 80192de <__submore+0x22>
 80192d6:	f04f 30ff 	mov.w	r0, #4294967295
 80192da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80192e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80192e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80192e8:	6360      	str	r0, [r4, #52]	; 0x34
 80192ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80192ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80192f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80192f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80192fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80192fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019302:	6020      	str	r0, [r4, #0]
 8019304:	2000      	movs	r0, #0
 8019306:	e7e8      	b.n	80192da <__submore+0x1e>
 8019308:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801930a:	0077      	lsls	r7, r6, #1
 801930c:	463a      	mov	r2, r7
 801930e:	f000 f900 	bl	8019512 <_realloc_r>
 8019312:	4605      	mov	r5, r0
 8019314:	2800      	cmp	r0, #0
 8019316:	d0de      	beq.n	80192d6 <__submore+0x1a>
 8019318:	eb00 0806 	add.w	r8, r0, r6
 801931c:	4601      	mov	r1, r0
 801931e:	4632      	mov	r2, r6
 8019320:	4640      	mov	r0, r8
 8019322:	f7fb f8cb 	bl	80144bc <memcpy>
 8019326:	f8c4 8000 	str.w	r8, [r4]
 801932a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801932e:	e7e9      	b.n	8019304 <__submore+0x48>

08019330 <_ungetc_r>:
 8019330:	1c4b      	adds	r3, r1, #1
 8019332:	b570      	push	{r4, r5, r6, lr}
 8019334:	4606      	mov	r6, r0
 8019336:	460d      	mov	r5, r1
 8019338:	4614      	mov	r4, r2
 801933a:	d103      	bne.n	8019344 <_ungetc_r+0x14>
 801933c:	f04f 35ff 	mov.w	r5, #4294967295
 8019340:	4628      	mov	r0, r5
 8019342:	bd70      	pop	{r4, r5, r6, pc}
 8019344:	b118      	cbz	r0, 801934e <_ungetc_r+0x1e>
 8019346:	6983      	ldr	r3, [r0, #24]
 8019348:	b90b      	cbnz	r3, 801934e <_ungetc_r+0x1e>
 801934a:	f7fd ff43 	bl	80171d4 <__sinit>
 801934e:	4b2e      	ldr	r3, [pc, #184]	; (8019408 <_ungetc_r+0xd8>)
 8019350:	429c      	cmp	r4, r3
 8019352:	d12c      	bne.n	80193ae <_ungetc_r+0x7e>
 8019354:	6874      	ldr	r4, [r6, #4]
 8019356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801935a:	f023 0320 	bic.w	r3, r3, #32
 801935e:	81a3      	strh	r3, [r4, #12]
 8019360:	b29b      	uxth	r3, r3
 8019362:	0759      	lsls	r1, r3, #29
 8019364:	d413      	bmi.n	801938e <_ungetc_r+0x5e>
 8019366:	06da      	lsls	r2, r3, #27
 8019368:	d5e8      	bpl.n	801933c <_ungetc_r+0xc>
 801936a:	071b      	lsls	r3, r3, #28
 801936c:	d50b      	bpl.n	8019386 <_ungetc_r+0x56>
 801936e:	4621      	mov	r1, r4
 8019370:	4630      	mov	r0, r6
 8019372:	f7fd feb3 	bl	80170dc <_fflush_r>
 8019376:	2800      	cmp	r0, #0
 8019378:	d1e0      	bne.n	801933c <_ungetc_r+0xc>
 801937a:	89a3      	ldrh	r3, [r4, #12]
 801937c:	60a0      	str	r0, [r4, #8]
 801937e:	f023 0308 	bic.w	r3, r3, #8
 8019382:	81a3      	strh	r3, [r4, #12]
 8019384:	61a0      	str	r0, [r4, #24]
 8019386:	89a3      	ldrh	r3, [r4, #12]
 8019388:	f043 0304 	orr.w	r3, r3, #4
 801938c:	81a3      	strh	r3, [r4, #12]
 801938e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019390:	6862      	ldr	r2, [r4, #4]
 8019392:	b2ed      	uxtb	r5, r5
 8019394:	b1e3      	cbz	r3, 80193d0 <_ungetc_r+0xa0>
 8019396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019398:	4293      	cmp	r3, r2
 801939a:	dd12      	ble.n	80193c2 <_ungetc_r+0x92>
 801939c:	6823      	ldr	r3, [r4, #0]
 801939e:	1e5a      	subs	r2, r3, #1
 80193a0:	6022      	str	r2, [r4, #0]
 80193a2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80193a6:	6863      	ldr	r3, [r4, #4]
 80193a8:	3301      	adds	r3, #1
 80193aa:	6063      	str	r3, [r4, #4]
 80193ac:	e7c8      	b.n	8019340 <_ungetc_r+0x10>
 80193ae:	4b17      	ldr	r3, [pc, #92]	; (801940c <_ungetc_r+0xdc>)
 80193b0:	429c      	cmp	r4, r3
 80193b2:	d101      	bne.n	80193b8 <_ungetc_r+0x88>
 80193b4:	68b4      	ldr	r4, [r6, #8]
 80193b6:	e7ce      	b.n	8019356 <_ungetc_r+0x26>
 80193b8:	4b15      	ldr	r3, [pc, #84]	; (8019410 <_ungetc_r+0xe0>)
 80193ba:	429c      	cmp	r4, r3
 80193bc:	bf08      	it	eq
 80193be:	68f4      	ldreq	r4, [r6, #12]
 80193c0:	e7c9      	b.n	8019356 <_ungetc_r+0x26>
 80193c2:	4621      	mov	r1, r4
 80193c4:	4630      	mov	r0, r6
 80193c6:	f7ff ff79 	bl	80192bc <__submore>
 80193ca:	2800      	cmp	r0, #0
 80193cc:	d0e6      	beq.n	801939c <_ungetc_r+0x6c>
 80193ce:	e7b5      	b.n	801933c <_ungetc_r+0xc>
 80193d0:	6921      	ldr	r1, [r4, #16]
 80193d2:	6823      	ldr	r3, [r4, #0]
 80193d4:	b151      	cbz	r1, 80193ec <_ungetc_r+0xbc>
 80193d6:	4299      	cmp	r1, r3
 80193d8:	d208      	bcs.n	80193ec <_ungetc_r+0xbc>
 80193da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80193de:	42a9      	cmp	r1, r5
 80193e0:	d104      	bne.n	80193ec <_ungetc_r+0xbc>
 80193e2:	3b01      	subs	r3, #1
 80193e4:	3201      	adds	r2, #1
 80193e6:	6023      	str	r3, [r4, #0]
 80193e8:	6062      	str	r2, [r4, #4]
 80193ea:	e7a9      	b.n	8019340 <_ungetc_r+0x10>
 80193ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80193f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193f4:	6363      	str	r3, [r4, #52]	; 0x34
 80193f6:	2303      	movs	r3, #3
 80193f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80193fa:	4623      	mov	r3, r4
 80193fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019400:	6023      	str	r3, [r4, #0]
 8019402:	2301      	movs	r3, #1
 8019404:	e7d1      	b.n	80193aa <_ungetc_r+0x7a>
 8019406:	bf00      	nop
 8019408:	080199a0 	.word	0x080199a0
 801940c:	080199c0 	.word	0x080199c0
 8019410:	08019980 	.word	0x08019980

08019414 <__ascii_wctomb>:
 8019414:	b149      	cbz	r1, 801942a <__ascii_wctomb+0x16>
 8019416:	2aff      	cmp	r2, #255	; 0xff
 8019418:	bf85      	ittet	hi
 801941a:	238a      	movhi	r3, #138	; 0x8a
 801941c:	6003      	strhi	r3, [r0, #0]
 801941e:	700a      	strbls	r2, [r1, #0]
 8019420:	f04f 30ff 	movhi.w	r0, #4294967295
 8019424:	bf98      	it	ls
 8019426:	2001      	movls	r0, #1
 8019428:	4770      	bx	lr
 801942a:	4608      	mov	r0, r1
 801942c:	4770      	bx	lr
	...

08019430 <_write_r>:
 8019430:	b538      	push	{r3, r4, r5, lr}
 8019432:	4c07      	ldr	r4, [pc, #28]	; (8019450 <_write_r+0x20>)
 8019434:	4605      	mov	r5, r0
 8019436:	4608      	mov	r0, r1
 8019438:	4611      	mov	r1, r2
 801943a:	2200      	movs	r2, #0
 801943c:	6022      	str	r2, [r4, #0]
 801943e:	461a      	mov	r2, r3
 8019440:	f7f5 fb09 	bl	800ea56 <_write>
 8019444:	1c43      	adds	r3, r0, #1
 8019446:	d102      	bne.n	801944e <_write_r+0x1e>
 8019448:	6823      	ldr	r3, [r4, #0]
 801944a:	b103      	cbz	r3, 801944e <_write_r+0x1e>
 801944c:	602b      	str	r3, [r5, #0]
 801944e:	bd38      	pop	{r3, r4, r5, pc}
 8019450:	20000e30 	.word	0x20000e30

08019454 <_close_r>:
 8019454:	b538      	push	{r3, r4, r5, lr}
 8019456:	4c06      	ldr	r4, [pc, #24]	; (8019470 <_close_r+0x1c>)
 8019458:	2300      	movs	r3, #0
 801945a:	4605      	mov	r5, r0
 801945c:	4608      	mov	r0, r1
 801945e:	6023      	str	r3, [r4, #0]
 8019460:	f7f5 fb15 	bl	800ea8e <_close>
 8019464:	1c43      	adds	r3, r0, #1
 8019466:	d102      	bne.n	801946e <_close_r+0x1a>
 8019468:	6823      	ldr	r3, [r4, #0]
 801946a:	b103      	cbz	r3, 801946e <_close_r+0x1a>
 801946c:	602b      	str	r3, [r5, #0]
 801946e:	bd38      	pop	{r3, r4, r5, pc}
 8019470:	20000e30 	.word	0x20000e30

08019474 <_fstat_r>:
 8019474:	b538      	push	{r3, r4, r5, lr}
 8019476:	4c07      	ldr	r4, [pc, #28]	; (8019494 <_fstat_r+0x20>)
 8019478:	2300      	movs	r3, #0
 801947a:	4605      	mov	r5, r0
 801947c:	4608      	mov	r0, r1
 801947e:	4611      	mov	r1, r2
 8019480:	6023      	str	r3, [r4, #0]
 8019482:	f7f5 fb10 	bl	800eaa6 <_fstat>
 8019486:	1c43      	adds	r3, r0, #1
 8019488:	d102      	bne.n	8019490 <_fstat_r+0x1c>
 801948a:	6823      	ldr	r3, [r4, #0]
 801948c:	b103      	cbz	r3, 8019490 <_fstat_r+0x1c>
 801948e:	602b      	str	r3, [r5, #0]
 8019490:	bd38      	pop	{r3, r4, r5, pc}
 8019492:	bf00      	nop
 8019494:	20000e30 	.word	0x20000e30

08019498 <_isatty_r>:
 8019498:	b538      	push	{r3, r4, r5, lr}
 801949a:	4c06      	ldr	r4, [pc, #24]	; (80194b4 <_isatty_r+0x1c>)
 801949c:	2300      	movs	r3, #0
 801949e:	4605      	mov	r5, r0
 80194a0:	4608      	mov	r0, r1
 80194a2:	6023      	str	r3, [r4, #0]
 80194a4:	f7f5 fb0f 	bl	800eac6 <_isatty>
 80194a8:	1c43      	adds	r3, r0, #1
 80194aa:	d102      	bne.n	80194b2 <_isatty_r+0x1a>
 80194ac:	6823      	ldr	r3, [r4, #0]
 80194ae:	b103      	cbz	r3, 80194b2 <_isatty_r+0x1a>
 80194b0:	602b      	str	r3, [r5, #0]
 80194b2:	bd38      	pop	{r3, r4, r5, pc}
 80194b4:	20000e30 	.word	0x20000e30

080194b8 <_lseek_r>:
 80194b8:	b538      	push	{r3, r4, r5, lr}
 80194ba:	4c07      	ldr	r4, [pc, #28]	; (80194d8 <_lseek_r+0x20>)
 80194bc:	4605      	mov	r5, r0
 80194be:	4608      	mov	r0, r1
 80194c0:	4611      	mov	r1, r2
 80194c2:	2200      	movs	r2, #0
 80194c4:	6022      	str	r2, [r4, #0]
 80194c6:	461a      	mov	r2, r3
 80194c8:	f7f5 fb08 	bl	800eadc <_lseek>
 80194cc:	1c43      	adds	r3, r0, #1
 80194ce:	d102      	bne.n	80194d6 <_lseek_r+0x1e>
 80194d0:	6823      	ldr	r3, [r4, #0]
 80194d2:	b103      	cbz	r3, 80194d6 <_lseek_r+0x1e>
 80194d4:	602b      	str	r3, [r5, #0]
 80194d6:	bd38      	pop	{r3, r4, r5, pc}
 80194d8:	20000e30 	.word	0x20000e30

080194dc <memmove>:
 80194dc:	4288      	cmp	r0, r1
 80194de:	b510      	push	{r4, lr}
 80194e0:	eb01 0302 	add.w	r3, r1, r2
 80194e4:	d807      	bhi.n	80194f6 <memmove+0x1a>
 80194e6:	1e42      	subs	r2, r0, #1
 80194e8:	4299      	cmp	r1, r3
 80194ea:	d00a      	beq.n	8019502 <memmove+0x26>
 80194ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80194f4:	e7f8      	b.n	80194e8 <memmove+0xc>
 80194f6:	4283      	cmp	r3, r0
 80194f8:	d9f5      	bls.n	80194e6 <memmove+0xa>
 80194fa:	1881      	adds	r1, r0, r2
 80194fc:	1ad2      	subs	r2, r2, r3
 80194fe:	42d3      	cmn	r3, r2
 8019500:	d100      	bne.n	8019504 <memmove+0x28>
 8019502:	bd10      	pop	{r4, pc}
 8019504:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019508:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801950c:	e7f7      	b.n	80194fe <memmove+0x22>

0801950e <__malloc_lock>:
 801950e:	4770      	bx	lr

08019510 <__malloc_unlock>:
 8019510:	4770      	bx	lr

08019512 <_realloc_r>:
 8019512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019514:	4607      	mov	r7, r0
 8019516:	4614      	mov	r4, r2
 8019518:	460e      	mov	r6, r1
 801951a:	b921      	cbnz	r1, 8019526 <_realloc_r+0x14>
 801951c:	4611      	mov	r1, r2
 801951e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019522:	f7fe bf1f 	b.w	8018364 <_malloc_r>
 8019526:	b922      	cbnz	r2, 8019532 <_realloc_r+0x20>
 8019528:	f7fe fece 	bl	80182c8 <_free_r>
 801952c:	4625      	mov	r5, r4
 801952e:	4628      	mov	r0, r5
 8019530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019532:	f000 f827 	bl	8019584 <_malloc_usable_size_r>
 8019536:	42a0      	cmp	r0, r4
 8019538:	d20f      	bcs.n	801955a <_realloc_r+0x48>
 801953a:	4621      	mov	r1, r4
 801953c:	4638      	mov	r0, r7
 801953e:	f7fe ff11 	bl	8018364 <_malloc_r>
 8019542:	4605      	mov	r5, r0
 8019544:	2800      	cmp	r0, #0
 8019546:	d0f2      	beq.n	801952e <_realloc_r+0x1c>
 8019548:	4631      	mov	r1, r6
 801954a:	4622      	mov	r2, r4
 801954c:	f7fa ffb6 	bl	80144bc <memcpy>
 8019550:	4631      	mov	r1, r6
 8019552:	4638      	mov	r0, r7
 8019554:	f7fe feb8 	bl	80182c8 <_free_r>
 8019558:	e7e9      	b.n	801952e <_realloc_r+0x1c>
 801955a:	4635      	mov	r5, r6
 801955c:	e7e7      	b.n	801952e <_realloc_r+0x1c>
	...

08019560 <_read_r>:
 8019560:	b538      	push	{r3, r4, r5, lr}
 8019562:	4c07      	ldr	r4, [pc, #28]	; (8019580 <_read_r+0x20>)
 8019564:	4605      	mov	r5, r0
 8019566:	4608      	mov	r0, r1
 8019568:	4611      	mov	r1, r2
 801956a:	2200      	movs	r2, #0
 801956c:	6022      	str	r2, [r4, #0]
 801956e:	461a      	mov	r2, r3
 8019570:	f7f5 fa54 	bl	800ea1c <_read>
 8019574:	1c43      	adds	r3, r0, #1
 8019576:	d102      	bne.n	801957e <_read_r+0x1e>
 8019578:	6823      	ldr	r3, [r4, #0]
 801957a:	b103      	cbz	r3, 801957e <_read_r+0x1e>
 801957c:	602b      	str	r3, [r5, #0]
 801957e:	bd38      	pop	{r3, r4, r5, pc}
 8019580:	20000e30 	.word	0x20000e30

08019584 <_malloc_usable_size_r>:
 8019584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019588:	1f18      	subs	r0, r3, #4
 801958a:	2b00      	cmp	r3, #0
 801958c:	bfbc      	itt	lt
 801958e:	580b      	ldrlt	r3, [r1, r0]
 8019590:	18c0      	addlt	r0, r0, r3
 8019592:	4770      	bx	lr

08019594 <_init>:
 8019594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019596:	bf00      	nop
 8019598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801959a:	bc08      	pop	{r3}
 801959c:	469e      	mov	lr, r3
 801959e:	4770      	bx	lr

080195a0 <_fini>:
 80195a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a2:	bf00      	nop
 80195a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195a6:	bc08      	pop	{r3}
 80195a8:	469e      	mov	lr, r3
 80195aa:	4770      	bx	lr
