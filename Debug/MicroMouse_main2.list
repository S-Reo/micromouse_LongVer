
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000bf000  08040000  08040000  00030000  2**0
                  ALLOC
  3 .text         0000732c  08008000  08008000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000248  0800f330  0800f330  0001f330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800f578  0800f578  000201dc  2**0
                  CONTENTS
  6 .ARM          00000008  0800f578  0800f578  0001f578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800f580  0800f580  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800f580  0800f580  0001f580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800f584  0800f584  0001f584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001dc  20000000  0800f588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b8c  200001dc  0800f764  000201dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d68  0800f764  00020d68  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000107a5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000255f  00000000  00000000  000309b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001100  00000000  00000000  00032f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000fd8  00000000  00000000  00034010  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00003513  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000c7f5  00000000  00000000  000384fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c7051  00000000  00000000  00044cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0010bd41  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004f90  00000000  00000000  0010bdbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001dc 	.word	0x200001dc
 800801c:	00000000 	.word	0x00000000
 8008020:	0800f314 	.word	0x0800f314

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e0 	.word	0x200001e0
 800803c:	0800f314 	.word	0x0800f314

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <__aeabi_drsub>:
 8008050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008054:	e002      	b.n	800805c <__adddf3>
 8008056:	bf00      	nop

08008058 <__aeabi_dsub>:
 8008058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800805c <__adddf3>:
 800805c:	b530      	push	{r4, r5, lr}
 800805e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008066:	ea94 0f05 	teq	r4, r5
 800806a:	bf08      	it	eq
 800806c:	ea90 0f02 	teqeq	r0, r2
 8008070:	bf1f      	itttt	ne
 8008072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008076:	ea55 0c02 	orrsne.w	ip, r5, r2
 800807a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800807e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008082:	f000 80e2 	beq.w	800824a <__adddf3+0x1ee>
 8008086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800808a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800808e:	bfb8      	it	lt
 8008090:	426d      	neglt	r5, r5
 8008092:	dd0c      	ble.n	80080ae <__adddf3+0x52>
 8008094:	442c      	add	r4, r5
 8008096:	ea80 0202 	eor.w	r2, r0, r2
 800809a:	ea81 0303 	eor.w	r3, r1, r3
 800809e:	ea82 0000 	eor.w	r0, r2, r0
 80080a2:	ea83 0101 	eor.w	r1, r3, r1
 80080a6:	ea80 0202 	eor.w	r2, r0, r2
 80080aa:	ea81 0303 	eor.w	r3, r1, r3
 80080ae:	2d36      	cmp	r5, #54	; 0x36
 80080b0:	bf88      	it	hi
 80080b2:	bd30      	pophi	{r4, r5, pc}
 80080b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80080b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80080bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80080c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80080c4:	d002      	beq.n	80080cc <__adddf3+0x70>
 80080c6:	4240      	negs	r0, r0
 80080c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80080cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80080d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80080d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80080d8:	d002      	beq.n	80080e0 <__adddf3+0x84>
 80080da:	4252      	negs	r2, r2
 80080dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80080e0:	ea94 0f05 	teq	r4, r5
 80080e4:	f000 80a7 	beq.w	8008236 <__adddf3+0x1da>
 80080e8:	f1a4 0401 	sub.w	r4, r4, #1
 80080ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80080f0:	db0d      	blt.n	800810e <__adddf3+0xb2>
 80080f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80080f6:	fa22 f205 	lsr.w	r2, r2, r5
 80080fa:	1880      	adds	r0, r0, r2
 80080fc:	f141 0100 	adc.w	r1, r1, #0
 8008100:	fa03 f20e 	lsl.w	r2, r3, lr
 8008104:	1880      	adds	r0, r0, r2
 8008106:	fa43 f305 	asr.w	r3, r3, r5
 800810a:	4159      	adcs	r1, r3
 800810c:	e00e      	b.n	800812c <__adddf3+0xd0>
 800810e:	f1a5 0520 	sub.w	r5, r5, #32
 8008112:	f10e 0e20 	add.w	lr, lr, #32
 8008116:	2a01      	cmp	r2, #1
 8008118:	fa03 fc0e 	lsl.w	ip, r3, lr
 800811c:	bf28      	it	cs
 800811e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008122:	fa43 f305 	asr.w	r3, r3, r5
 8008126:	18c0      	adds	r0, r0, r3
 8008128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800812c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008130:	d507      	bpl.n	8008142 <__adddf3+0xe6>
 8008132:	f04f 0e00 	mov.w	lr, #0
 8008136:	f1dc 0c00 	rsbs	ip, ip, #0
 800813a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800813e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008146:	d31b      	bcc.n	8008180 <__adddf3+0x124>
 8008148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800814c:	d30c      	bcc.n	8008168 <__adddf3+0x10c>
 800814e:	0849      	lsrs	r1, r1, #1
 8008150:	ea5f 0030 	movs.w	r0, r0, rrx
 8008154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008158:	f104 0401 	add.w	r4, r4, #1
 800815c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008164:	f080 809a 	bcs.w	800829c <__adddf3+0x240>
 8008168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800816c:	bf08      	it	eq
 800816e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008172:	f150 0000 	adcs.w	r0, r0, #0
 8008176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800817a:	ea41 0105 	orr.w	r1, r1, r5
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008184:	4140      	adcs	r0, r0
 8008186:	eb41 0101 	adc.w	r1, r1, r1
 800818a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800818e:	f1a4 0401 	sub.w	r4, r4, #1
 8008192:	d1e9      	bne.n	8008168 <__adddf3+0x10c>
 8008194:	f091 0f00 	teq	r1, #0
 8008198:	bf04      	itt	eq
 800819a:	4601      	moveq	r1, r0
 800819c:	2000      	moveq	r0, #0
 800819e:	fab1 f381 	clz	r3, r1
 80081a2:	bf08      	it	eq
 80081a4:	3320      	addeq	r3, #32
 80081a6:	f1a3 030b 	sub.w	r3, r3, #11
 80081aa:	f1b3 0220 	subs.w	r2, r3, #32
 80081ae:	da0c      	bge.n	80081ca <__adddf3+0x16e>
 80081b0:	320c      	adds	r2, #12
 80081b2:	dd08      	ble.n	80081c6 <__adddf3+0x16a>
 80081b4:	f102 0c14 	add.w	ip, r2, #20
 80081b8:	f1c2 020c 	rsb	r2, r2, #12
 80081bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80081c0:	fa21 f102 	lsr.w	r1, r1, r2
 80081c4:	e00c      	b.n	80081e0 <__adddf3+0x184>
 80081c6:	f102 0214 	add.w	r2, r2, #20
 80081ca:	bfd8      	it	le
 80081cc:	f1c2 0c20 	rsble	ip, r2, #32
 80081d0:	fa01 f102 	lsl.w	r1, r1, r2
 80081d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80081d8:	bfdc      	itt	le
 80081da:	ea41 010c 	orrle.w	r1, r1, ip
 80081de:	4090      	lslle	r0, r2
 80081e0:	1ae4      	subs	r4, r4, r3
 80081e2:	bfa2      	ittt	ge
 80081e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80081e8:	4329      	orrge	r1, r5
 80081ea:	bd30      	popge	{r4, r5, pc}
 80081ec:	ea6f 0404 	mvn.w	r4, r4
 80081f0:	3c1f      	subs	r4, #31
 80081f2:	da1c      	bge.n	800822e <__adddf3+0x1d2>
 80081f4:	340c      	adds	r4, #12
 80081f6:	dc0e      	bgt.n	8008216 <__adddf3+0x1ba>
 80081f8:	f104 0414 	add.w	r4, r4, #20
 80081fc:	f1c4 0220 	rsb	r2, r4, #32
 8008200:	fa20 f004 	lsr.w	r0, r0, r4
 8008204:	fa01 f302 	lsl.w	r3, r1, r2
 8008208:	ea40 0003 	orr.w	r0, r0, r3
 800820c:	fa21 f304 	lsr.w	r3, r1, r4
 8008210:	ea45 0103 	orr.w	r1, r5, r3
 8008214:	bd30      	pop	{r4, r5, pc}
 8008216:	f1c4 040c 	rsb	r4, r4, #12
 800821a:	f1c4 0220 	rsb	r2, r4, #32
 800821e:	fa20 f002 	lsr.w	r0, r0, r2
 8008222:	fa01 f304 	lsl.w	r3, r1, r4
 8008226:	ea40 0003 	orr.w	r0, r0, r3
 800822a:	4629      	mov	r1, r5
 800822c:	bd30      	pop	{r4, r5, pc}
 800822e:	fa21 f004 	lsr.w	r0, r1, r4
 8008232:	4629      	mov	r1, r5
 8008234:	bd30      	pop	{r4, r5, pc}
 8008236:	f094 0f00 	teq	r4, #0
 800823a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800823e:	bf06      	itte	eq
 8008240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008244:	3401      	addeq	r4, #1
 8008246:	3d01      	subne	r5, #1
 8008248:	e74e      	b.n	80080e8 <__adddf3+0x8c>
 800824a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800824e:	bf18      	it	ne
 8008250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008254:	d029      	beq.n	80082aa <__adddf3+0x24e>
 8008256:	ea94 0f05 	teq	r4, r5
 800825a:	bf08      	it	eq
 800825c:	ea90 0f02 	teqeq	r0, r2
 8008260:	d005      	beq.n	800826e <__adddf3+0x212>
 8008262:	ea54 0c00 	orrs.w	ip, r4, r0
 8008266:	bf04      	itt	eq
 8008268:	4619      	moveq	r1, r3
 800826a:	4610      	moveq	r0, r2
 800826c:	bd30      	pop	{r4, r5, pc}
 800826e:	ea91 0f03 	teq	r1, r3
 8008272:	bf1e      	ittt	ne
 8008274:	2100      	movne	r1, #0
 8008276:	2000      	movne	r0, #0
 8008278:	bd30      	popne	{r4, r5, pc}
 800827a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800827e:	d105      	bne.n	800828c <__adddf3+0x230>
 8008280:	0040      	lsls	r0, r0, #1
 8008282:	4149      	adcs	r1, r1
 8008284:	bf28      	it	cs
 8008286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800828a:	bd30      	pop	{r4, r5, pc}
 800828c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008290:	bf3c      	itt	cc
 8008292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008296:	bd30      	popcc	{r4, r5, pc}
 8008298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800829c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80082a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082a4:	f04f 0000 	mov.w	r0, #0
 80082a8:	bd30      	pop	{r4, r5, pc}
 80082aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ae:	bf1a      	itte	ne
 80082b0:	4619      	movne	r1, r3
 80082b2:	4610      	movne	r0, r2
 80082b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80082b8:	bf1c      	itt	ne
 80082ba:	460b      	movne	r3, r1
 80082bc:	4602      	movne	r2, r0
 80082be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80082c2:	bf06      	itte	eq
 80082c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80082c8:	ea91 0f03 	teqeq	r1, r3
 80082cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80082d0:	bd30      	pop	{r4, r5, pc}
 80082d2:	bf00      	nop

080082d4 <__aeabi_ui2d>:
 80082d4:	f090 0f00 	teq	r0, #0
 80082d8:	bf04      	itt	eq
 80082da:	2100      	moveq	r1, #0
 80082dc:	4770      	bxeq	lr
 80082de:	b530      	push	{r4, r5, lr}
 80082e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082e8:	f04f 0500 	mov.w	r5, #0
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	e750      	b.n	8008194 <__adddf3+0x138>
 80082f2:	bf00      	nop

080082f4 <__aeabi_i2d>:
 80082f4:	f090 0f00 	teq	r0, #0
 80082f8:	bf04      	itt	eq
 80082fa:	2100      	moveq	r1, #0
 80082fc:	4770      	bxeq	lr
 80082fe:	b530      	push	{r4, r5, lr}
 8008300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800830c:	bf48      	it	mi
 800830e:	4240      	negmi	r0, r0
 8008310:	f04f 0100 	mov.w	r1, #0
 8008314:	e73e      	b.n	8008194 <__adddf3+0x138>
 8008316:	bf00      	nop

08008318 <__aeabi_f2d>:
 8008318:	0042      	lsls	r2, r0, #1
 800831a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800831e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008326:	bf1f      	itttt	ne
 8008328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800832c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008334:	4770      	bxne	lr
 8008336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800833a:	bf08      	it	eq
 800833c:	4770      	bxeq	lr
 800833e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008342:	bf04      	itt	eq
 8008344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008348:	4770      	bxeq	lr
 800834a:	b530      	push	{r4, r5, lr}
 800834c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008358:	e71c      	b.n	8008194 <__adddf3+0x138>
 800835a:	bf00      	nop

0800835c <__aeabi_ul2d>:
 800835c:	ea50 0201 	orrs.w	r2, r0, r1
 8008360:	bf08      	it	eq
 8008362:	4770      	bxeq	lr
 8008364:	b530      	push	{r4, r5, lr}
 8008366:	f04f 0500 	mov.w	r5, #0
 800836a:	e00a      	b.n	8008382 <__aeabi_l2d+0x16>

0800836c <__aeabi_l2d>:
 800836c:	ea50 0201 	orrs.w	r2, r0, r1
 8008370:	bf08      	it	eq
 8008372:	4770      	bxeq	lr
 8008374:	b530      	push	{r4, r5, lr}
 8008376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800837a:	d502      	bpl.n	8008382 <__aeabi_l2d+0x16>
 800837c:	4240      	negs	r0, r0
 800837e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800838a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800838e:	f43f aed8 	beq.w	8008142 <__adddf3+0xe6>
 8008392:	f04f 0203 	mov.w	r2, #3
 8008396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800839a:	bf18      	it	ne
 800839c:	3203      	addne	r2, #3
 800839e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083a2:	bf18      	it	ne
 80083a4:	3203      	addne	r2, #3
 80083a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80083aa:	f1c2 0320 	rsb	r3, r2, #32
 80083ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80083b2:	fa20 f002 	lsr.w	r0, r0, r2
 80083b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80083ba:	ea40 000e 	orr.w	r0, r0, lr
 80083be:	fa21 f102 	lsr.w	r1, r1, r2
 80083c2:	4414      	add	r4, r2
 80083c4:	e6bd      	b.n	8008142 <__adddf3+0xe6>
 80083c6:	bf00      	nop

080083c8 <__aeabi_dmul>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80083d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80083d6:	bf1d      	ittte	ne
 80083d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80083dc:	ea94 0f0c 	teqne	r4, ip
 80083e0:	ea95 0f0c 	teqne	r5, ip
 80083e4:	f000 f8de 	bleq	80085a4 <__aeabi_dmul+0x1dc>
 80083e8:	442c      	add	r4, r5
 80083ea:	ea81 0603 	eor.w	r6, r1, r3
 80083ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80083f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80083f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80083fa:	bf18      	it	ne
 80083fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008408:	d038      	beq.n	800847c <__aeabi_dmul+0xb4>
 800840a:	fba0 ce02 	umull	ip, lr, r0, r2
 800840e:	f04f 0500 	mov.w	r5, #0
 8008412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800841a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800841e:	f04f 0600 	mov.w	r6, #0
 8008422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008426:	f09c 0f00 	teq	ip, #0
 800842a:	bf18      	it	ne
 800842c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800843c:	d204      	bcs.n	8008448 <__aeabi_dmul+0x80>
 800843e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008442:	416d      	adcs	r5, r5
 8008444:	eb46 0606 	adc.w	r6, r6, r6
 8008448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800844c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800845c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008460:	bf88      	it	hi
 8008462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008466:	d81e      	bhi.n	80084a6 <__aeabi_dmul+0xde>
 8008468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800846c:	bf08      	it	eq
 800846e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008472:	f150 0000 	adcs.w	r0, r0, #0
 8008476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008480:	ea46 0101 	orr.w	r1, r6, r1
 8008484:	ea40 0002 	orr.w	r0, r0, r2
 8008488:	ea81 0103 	eor.w	r1, r1, r3
 800848c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008490:	bfc2      	ittt	gt
 8008492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800849a:	bd70      	popgt	{r4, r5, r6, pc}
 800849c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a0:	f04f 0e00 	mov.w	lr, #0
 80084a4:	3c01      	subs	r4, #1
 80084a6:	f300 80ab 	bgt.w	8008600 <__aeabi_dmul+0x238>
 80084aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80084ae:	bfde      	ittt	le
 80084b0:	2000      	movle	r0, #0
 80084b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80084b6:	bd70      	pople	{r4, r5, r6, pc}
 80084b8:	f1c4 0400 	rsb	r4, r4, #0
 80084bc:	3c20      	subs	r4, #32
 80084be:	da35      	bge.n	800852c <__aeabi_dmul+0x164>
 80084c0:	340c      	adds	r4, #12
 80084c2:	dc1b      	bgt.n	80084fc <__aeabi_dmul+0x134>
 80084c4:	f104 0414 	add.w	r4, r4, #20
 80084c8:	f1c4 0520 	rsb	r5, r4, #32
 80084cc:	fa00 f305 	lsl.w	r3, r0, r5
 80084d0:	fa20 f004 	lsr.w	r0, r0, r4
 80084d4:	fa01 f205 	lsl.w	r2, r1, r5
 80084d8:	ea40 0002 	orr.w	r0, r0, r2
 80084dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80084e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80084e8:	fa21 f604 	lsr.w	r6, r1, r4
 80084ec:	eb42 0106 	adc.w	r1, r2, r6
 80084f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80084f4:	bf08      	it	eq
 80084f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	f1c4 040c 	rsb	r4, r4, #12
 8008500:	f1c4 0520 	rsb	r5, r4, #32
 8008504:	fa00 f304 	lsl.w	r3, r0, r4
 8008508:	fa20 f005 	lsr.w	r0, r0, r5
 800850c:	fa01 f204 	lsl.w	r2, r1, r4
 8008510:	ea40 0002 	orr.w	r0, r0, r2
 8008514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800851c:	f141 0100 	adc.w	r1, r1, #0
 8008520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008524:	bf08      	it	eq
 8008526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	f1c4 0520 	rsb	r5, r4, #32
 8008530:	fa00 f205 	lsl.w	r2, r0, r5
 8008534:	ea4e 0e02 	orr.w	lr, lr, r2
 8008538:	fa20 f304 	lsr.w	r3, r0, r4
 800853c:	fa01 f205 	lsl.w	r2, r1, r5
 8008540:	ea43 0302 	orr.w	r3, r3, r2
 8008544:	fa21 f004 	lsr.w	r0, r1, r4
 8008548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800854c:	fa21 f204 	lsr.w	r2, r1, r4
 8008550:	ea20 0002 	bic.w	r0, r0, r2
 8008554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800855c:	bf08      	it	eq
 800855e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f094 0f00 	teq	r4, #0
 8008568:	d10f      	bne.n	800858a <__aeabi_dmul+0x1c2>
 800856a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800856e:	0040      	lsls	r0, r0, #1
 8008570:	eb41 0101 	adc.w	r1, r1, r1
 8008574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008578:	bf08      	it	eq
 800857a:	3c01      	subeq	r4, #1
 800857c:	d0f7      	beq.n	800856e <__aeabi_dmul+0x1a6>
 800857e:	ea41 0106 	orr.w	r1, r1, r6
 8008582:	f095 0f00 	teq	r5, #0
 8008586:	bf18      	it	ne
 8008588:	4770      	bxne	lr
 800858a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800858e:	0052      	lsls	r2, r2, #1
 8008590:	eb43 0303 	adc.w	r3, r3, r3
 8008594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008598:	bf08      	it	eq
 800859a:	3d01      	subeq	r5, #1
 800859c:	d0f7      	beq.n	800858e <__aeabi_dmul+0x1c6>
 800859e:	ea43 0306 	orr.w	r3, r3, r6
 80085a2:	4770      	bx	lr
 80085a4:	ea94 0f0c 	teq	r4, ip
 80085a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085ac:	bf18      	it	ne
 80085ae:	ea95 0f0c 	teqne	r5, ip
 80085b2:	d00c      	beq.n	80085ce <__aeabi_dmul+0x206>
 80085b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085b8:	bf18      	it	ne
 80085ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085be:	d1d1      	bne.n	8008564 <__aeabi_dmul+0x19c>
 80085c0:	ea81 0103 	eor.w	r1, r1, r3
 80085c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085c8:	f04f 0000 	mov.w	r0, #0
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085d2:	bf06      	itte	eq
 80085d4:	4610      	moveq	r0, r2
 80085d6:	4619      	moveq	r1, r3
 80085d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085dc:	d019      	beq.n	8008612 <__aeabi_dmul+0x24a>
 80085de:	ea94 0f0c 	teq	r4, ip
 80085e2:	d102      	bne.n	80085ea <__aeabi_dmul+0x222>
 80085e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80085e8:	d113      	bne.n	8008612 <__aeabi_dmul+0x24a>
 80085ea:	ea95 0f0c 	teq	r5, ip
 80085ee:	d105      	bne.n	80085fc <__aeabi_dmul+0x234>
 80085f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80085f4:	bf1c      	itt	ne
 80085f6:	4610      	movne	r0, r2
 80085f8:	4619      	movne	r1, r3
 80085fa:	d10a      	bne.n	8008612 <__aeabi_dmul+0x24a>
 80085fc:	ea81 0103 	eor.w	r1, r1, r3
 8008600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800861a:	bd70      	pop	{r4, r5, r6, pc}

0800861c <__aeabi_ddiv>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800862a:	bf1d      	ittte	ne
 800862c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008630:	ea94 0f0c 	teqne	r4, ip
 8008634:	ea95 0f0c 	teqne	r5, ip
 8008638:	f000 f8a7 	bleq	800878a <__aeabi_ddiv+0x16e>
 800863c:	eba4 0405 	sub.w	r4, r4, r5
 8008640:	ea81 0e03 	eor.w	lr, r1, r3
 8008644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800864c:	f000 8088 	beq.w	8008760 <__aeabi_ddiv+0x144>
 8008650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800865c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800866c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008674:	429d      	cmp	r5, r3
 8008676:	bf08      	it	eq
 8008678:	4296      	cmpeq	r6, r2
 800867a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800867e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008682:	d202      	bcs.n	800868a <__aeabi_ddiv+0x6e>
 8008684:	085b      	lsrs	r3, r3, #1
 8008686:	ea4f 0232 	mov.w	r2, r2, rrx
 800868a:	1ab6      	subs	r6, r6, r2
 800868c:	eb65 0503 	sbc.w	r5, r5, r3
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	ea4f 0232 	mov.w	r2, r2, rrx
 8008696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800869a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800869e:	ebb6 0e02 	subs.w	lr, r6, r2
 80086a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086a6:	bf22      	ittt	cs
 80086a8:	1ab6      	subcs	r6, r6, r2
 80086aa:	4675      	movcs	r5, lr
 80086ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80086b0:	085b      	lsrs	r3, r3, #1
 80086b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086be:	bf22      	ittt	cs
 80086c0:	1ab6      	subcs	r6, r6, r2
 80086c2:	4675      	movcs	r5, lr
 80086c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80086ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80086d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086d6:	bf22      	ittt	cs
 80086d8:	1ab6      	subcs	r6, r6, r2
 80086da:	4675      	movcs	r5, lr
 80086dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086ee:	bf22      	ittt	cs
 80086f0:	1ab6      	subcs	r6, r6, r2
 80086f2:	4675      	movcs	r5, lr
 80086f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80086f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80086fc:	d018      	beq.n	8008730 <__aeabi_ddiv+0x114>
 80086fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800870a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800870e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800871a:	d1c0      	bne.n	800869e <__aeabi_ddiv+0x82>
 800871c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008720:	d10b      	bne.n	800873a <__aeabi_ddiv+0x11e>
 8008722:	ea41 0100 	orr.w	r1, r1, r0
 8008726:	f04f 0000 	mov.w	r0, #0
 800872a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800872e:	e7b6      	b.n	800869e <__aeabi_ddiv+0x82>
 8008730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008734:	bf04      	itt	eq
 8008736:	4301      	orreq	r1, r0
 8008738:	2000      	moveq	r0, #0
 800873a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800873e:	bf88      	it	hi
 8008740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008744:	f63f aeaf 	bhi.w	80084a6 <__aeabi_dmul+0xde>
 8008748:	ebb5 0c03 	subs.w	ip, r5, r3
 800874c:	bf04      	itt	eq
 800874e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008756:	f150 0000 	adcs.w	r0, r0, #0
 800875a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800876c:	bfc2      	ittt	gt
 800876e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008776:	bd70      	popgt	{r4, r5, r6, pc}
 8008778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800877c:	f04f 0e00 	mov.w	lr, #0
 8008780:	3c01      	subs	r4, #1
 8008782:	e690      	b.n	80084a6 <__aeabi_dmul+0xde>
 8008784:	ea45 0e06 	orr.w	lr, r5, r6
 8008788:	e68d      	b.n	80084a6 <__aeabi_dmul+0xde>
 800878a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800878e:	ea94 0f0c 	teq	r4, ip
 8008792:	bf08      	it	eq
 8008794:	ea95 0f0c 	teqeq	r5, ip
 8008798:	f43f af3b 	beq.w	8008612 <__aeabi_dmul+0x24a>
 800879c:	ea94 0f0c 	teq	r4, ip
 80087a0:	d10a      	bne.n	80087b8 <__aeabi_ddiv+0x19c>
 80087a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80087a6:	f47f af34 	bne.w	8008612 <__aeabi_dmul+0x24a>
 80087aa:	ea95 0f0c 	teq	r5, ip
 80087ae:	f47f af25 	bne.w	80085fc <__aeabi_dmul+0x234>
 80087b2:	4610      	mov	r0, r2
 80087b4:	4619      	mov	r1, r3
 80087b6:	e72c      	b.n	8008612 <__aeabi_dmul+0x24a>
 80087b8:	ea95 0f0c 	teq	r5, ip
 80087bc:	d106      	bne.n	80087cc <__aeabi_ddiv+0x1b0>
 80087be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80087c2:	f43f aefd 	beq.w	80085c0 <__aeabi_dmul+0x1f8>
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	e722      	b.n	8008612 <__aeabi_dmul+0x24a>
 80087cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087d0:	bf18      	it	ne
 80087d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087d6:	f47f aec5 	bne.w	8008564 <__aeabi_dmul+0x19c>
 80087da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80087de:	f47f af0d 	bne.w	80085fc <__aeabi_dmul+0x234>
 80087e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80087e6:	f47f aeeb 	bne.w	80085c0 <__aeabi_dmul+0x1f8>
 80087ea:	e712      	b.n	8008612 <__aeabi_dmul+0x24a>

080087ec <__gedf2>:
 80087ec:	f04f 3cff 	mov.w	ip, #4294967295
 80087f0:	e006      	b.n	8008800 <__cmpdf2+0x4>
 80087f2:	bf00      	nop

080087f4 <__ledf2>:
 80087f4:	f04f 0c01 	mov.w	ip, #1
 80087f8:	e002      	b.n	8008800 <__cmpdf2+0x4>
 80087fa:	bf00      	nop

080087fc <__cmpdf2>:
 80087fc:	f04f 0c01 	mov.w	ip, #1
 8008800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800880c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008810:	bf18      	it	ne
 8008812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008816:	d01b      	beq.n	8008850 <__cmpdf2+0x54>
 8008818:	b001      	add	sp, #4
 800881a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800881e:	bf0c      	ite	eq
 8008820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008824:	ea91 0f03 	teqne	r1, r3
 8008828:	bf02      	ittt	eq
 800882a:	ea90 0f02 	teqeq	r0, r2
 800882e:	2000      	moveq	r0, #0
 8008830:	4770      	bxeq	lr
 8008832:	f110 0f00 	cmn.w	r0, #0
 8008836:	ea91 0f03 	teq	r1, r3
 800883a:	bf58      	it	pl
 800883c:	4299      	cmppl	r1, r3
 800883e:	bf08      	it	eq
 8008840:	4290      	cmpeq	r0, r2
 8008842:	bf2c      	ite	cs
 8008844:	17d8      	asrcs	r0, r3, #31
 8008846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800884a:	f040 0001 	orr.w	r0, r0, #1
 800884e:	4770      	bx	lr
 8008850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008858:	d102      	bne.n	8008860 <__cmpdf2+0x64>
 800885a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800885e:	d107      	bne.n	8008870 <__cmpdf2+0x74>
 8008860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008868:	d1d6      	bne.n	8008818 <__cmpdf2+0x1c>
 800886a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800886e:	d0d3      	beq.n	8008818 <__cmpdf2+0x1c>
 8008870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop

08008878 <__aeabi_cdrcmple>:
 8008878:	4684      	mov	ip, r0
 800887a:	4610      	mov	r0, r2
 800887c:	4662      	mov	r2, ip
 800887e:	468c      	mov	ip, r1
 8008880:	4619      	mov	r1, r3
 8008882:	4663      	mov	r3, ip
 8008884:	e000      	b.n	8008888 <__aeabi_cdcmpeq>
 8008886:	bf00      	nop

08008888 <__aeabi_cdcmpeq>:
 8008888:	b501      	push	{r0, lr}
 800888a:	f7ff ffb7 	bl	80087fc <__cmpdf2>
 800888e:	2800      	cmp	r0, #0
 8008890:	bf48      	it	mi
 8008892:	f110 0f00 	cmnmi.w	r0, #0
 8008896:	bd01      	pop	{r0, pc}

08008898 <__aeabi_dcmpeq>:
 8008898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800889c:	f7ff fff4 	bl	8008888 <__aeabi_cdcmpeq>
 80088a0:	bf0c      	ite	eq
 80088a2:	2001      	moveq	r0, #1
 80088a4:	2000      	movne	r0, #0
 80088a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088aa:	bf00      	nop

080088ac <__aeabi_dcmplt>:
 80088ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088b0:	f7ff ffea 	bl	8008888 <__aeabi_cdcmpeq>
 80088b4:	bf34      	ite	cc
 80088b6:	2001      	movcc	r0, #1
 80088b8:	2000      	movcs	r0, #0
 80088ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80088be:	bf00      	nop

080088c0 <__aeabi_dcmple>:
 80088c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088c4:	f7ff ffe0 	bl	8008888 <__aeabi_cdcmpeq>
 80088c8:	bf94      	ite	ls
 80088ca:	2001      	movls	r0, #1
 80088cc:	2000      	movhi	r0, #0
 80088ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80088d2:	bf00      	nop

080088d4 <__aeabi_dcmpge>:
 80088d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088d8:	f7ff ffce 	bl	8008878 <__aeabi_cdrcmple>
 80088dc:	bf94      	ite	ls
 80088de:	2001      	movls	r0, #1
 80088e0:	2000      	movhi	r0, #0
 80088e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80088e6:	bf00      	nop

080088e8 <__aeabi_dcmpgt>:
 80088e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088ec:	f7ff ffc4 	bl	8008878 <__aeabi_cdrcmple>
 80088f0:	bf34      	ite	cc
 80088f2:	2001      	movcc	r0, #1
 80088f4:	2000      	movcs	r0, #0
 80088f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088fa:	bf00      	nop

080088fc <__aeabi_dcmpun>:
 80088fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008904:	d102      	bne.n	800890c <__aeabi_dcmpun+0x10>
 8008906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800890a:	d10a      	bne.n	8008922 <__aeabi_dcmpun+0x26>
 800890c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008914:	d102      	bne.n	800891c <__aeabi_dcmpun+0x20>
 8008916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800891a:	d102      	bne.n	8008922 <__aeabi_dcmpun+0x26>
 800891c:	f04f 0000 	mov.w	r0, #0
 8008920:	4770      	bx	lr
 8008922:	f04f 0001 	mov.w	r0, #1
 8008926:	4770      	bx	lr

08008928 <__aeabi_d2iz>:
 8008928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800892c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008930:	d215      	bcs.n	800895e <__aeabi_d2iz+0x36>
 8008932:	d511      	bpl.n	8008958 <__aeabi_d2iz+0x30>
 8008934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800893c:	d912      	bls.n	8008964 <__aeabi_d2iz+0x3c>
 800893e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800894a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800894e:	fa23 f002 	lsr.w	r0, r3, r2
 8008952:	bf18      	it	ne
 8008954:	4240      	negne	r0, r0
 8008956:	4770      	bx	lr
 8008958:	f04f 0000 	mov.w	r0, #0
 800895c:	4770      	bx	lr
 800895e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008962:	d105      	bne.n	8008970 <__aeabi_d2iz+0x48>
 8008964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008968:	bf08      	it	eq
 800896a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800896e:	4770      	bx	lr
 8008970:	f04f 0000 	mov.w	r0, #0
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <__aeabi_uldivmod>:
 8008978:	b953      	cbnz	r3, 8008990 <__aeabi_uldivmod+0x18>
 800897a:	b94a      	cbnz	r2, 8008990 <__aeabi_uldivmod+0x18>
 800897c:	2900      	cmp	r1, #0
 800897e:	bf08      	it	eq
 8008980:	2800      	cmpeq	r0, #0
 8008982:	bf1c      	itt	ne
 8008984:	f04f 31ff 	movne.w	r1, #4294967295
 8008988:	f04f 30ff 	movne.w	r0, #4294967295
 800898c:	f000 b972 	b.w	8008c74 <__aeabi_idiv0>
 8008990:	f1ad 0c08 	sub.w	ip, sp, #8
 8008994:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008998:	f000 f806 	bl	80089a8 <__udivmoddi4>
 800899c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80089a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a4:	b004      	add	sp, #16
 80089a6:	4770      	bx	lr

080089a8 <__udivmoddi4>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	9e08      	ldr	r6, [sp, #32]
 80089ae:	4604      	mov	r4, r0
 80089b0:	4688      	mov	r8, r1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d14b      	bne.n	8008a4e <__udivmoddi4+0xa6>
 80089b6:	428a      	cmp	r2, r1
 80089b8:	4615      	mov	r5, r2
 80089ba:	d967      	bls.n	8008a8c <__udivmoddi4+0xe4>
 80089bc:	fab2 f282 	clz	r2, r2
 80089c0:	b14a      	cbz	r2, 80089d6 <__udivmoddi4+0x2e>
 80089c2:	f1c2 0720 	rsb	r7, r2, #32
 80089c6:	fa01 f302 	lsl.w	r3, r1, r2
 80089ca:	fa20 f707 	lsr.w	r7, r0, r7
 80089ce:	4095      	lsls	r5, r2
 80089d0:	ea47 0803 	orr.w	r8, r7, r3
 80089d4:	4094      	lsls	r4, r2
 80089d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80089da:	0c23      	lsrs	r3, r4, #16
 80089dc:	fbb8 f7fe 	udiv	r7, r8, lr
 80089e0:	fa1f fc85 	uxth.w	ip, r5
 80089e4:	fb0e 8817 	mls	r8, lr, r7, r8
 80089e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80089ec:	fb07 f10c 	mul.w	r1, r7, ip
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d909      	bls.n	8008a08 <__udivmoddi4+0x60>
 80089f4:	18eb      	adds	r3, r5, r3
 80089f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80089fa:	f080 811b 	bcs.w	8008c34 <__udivmoddi4+0x28c>
 80089fe:	4299      	cmp	r1, r3
 8008a00:	f240 8118 	bls.w	8008c34 <__udivmoddi4+0x28c>
 8008a04:	3f02      	subs	r7, #2
 8008a06:	442b      	add	r3, r5
 8008a08:	1a5b      	subs	r3, r3, r1
 8008a0a:	b2a4      	uxth	r4, r4
 8008a0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008a10:	fb0e 3310 	mls	r3, lr, r0, r3
 8008a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008a18:	fb00 fc0c 	mul.w	ip, r0, ip
 8008a1c:	45a4      	cmp	ip, r4
 8008a1e:	d909      	bls.n	8008a34 <__udivmoddi4+0x8c>
 8008a20:	192c      	adds	r4, r5, r4
 8008a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a26:	f080 8107 	bcs.w	8008c38 <__udivmoddi4+0x290>
 8008a2a:	45a4      	cmp	ip, r4
 8008a2c:	f240 8104 	bls.w	8008c38 <__udivmoddi4+0x290>
 8008a30:	3802      	subs	r0, #2
 8008a32:	442c      	add	r4, r5
 8008a34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008a38:	eba4 040c 	sub.w	r4, r4, ip
 8008a3c:	2700      	movs	r7, #0
 8008a3e:	b11e      	cbz	r6, 8008a48 <__udivmoddi4+0xa0>
 8008a40:	40d4      	lsrs	r4, r2
 8008a42:	2300      	movs	r3, #0
 8008a44:	e9c6 4300 	strd	r4, r3, [r6]
 8008a48:	4639      	mov	r1, r7
 8008a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4e:	428b      	cmp	r3, r1
 8008a50:	d909      	bls.n	8008a66 <__udivmoddi4+0xbe>
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	f000 80eb 	beq.w	8008c2e <__udivmoddi4+0x286>
 8008a58:	2700      	movs	r7, #0
 8008a5a:	e9c6 0100 	strd	r0, r1, [r6]
 8008a5e:	4638      	mov	r0, r7
 8008a60:	4639      	mov	r1, r7
 8008a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a66:	fab3 f783 	clz	r7, r3
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	d147      	bne.n	8008afe <__udivmoddi4+0x156>
 8008a6e:	428b      	cmp	r3, r1
 8008a70:	d302      	bcc.n	8008a78 <__udivmoddi4+0xd0>
 8008a72:	4282      	cmp	r2, r0
 8008a74:	f200 80fa 	bhi.w	8008c6c <__udivmoddi4+0x2c4>
 8008a78:	1a84      	subs	r4, r0, r2
 8008a7a:	eb61 0303 	sbc.w	r3, r1, r3
 8008a7e:	2001      	movs	r0, #1
 8008a80:	4698      	mov	r8, r3
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	d0e0      	beq.n	8008a48 <__udivmoddi4+0xa0>
 8008a86:	e9c6 4800 	strd	r4, r8, [r6]
 8008a8a:	e7dd      	b.n	8008a48 <__udivmoddi4+0xa0>
 8008a8c:	b902      	cbnz	r2, 8008a90 <__udivmoddi4+0xe8>
 8008a8e:	deff      	udf	#255	; 0xff
 8008a90:	fab2 f282 	clz	r2, r2
 8008a94:	2a00      	cmp	r2, #0
 8008a96:	f040 808f 	bne.w	8008bb8 <__udivmoddi4+0x210>
 8008a9a:	1b49      	subs	r1, r1, r5
 8008a9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008aa0:	fa1f f885 	uxth.w	r8, r5
 8008aa4:	2701      	movs	r7, #1
 8008aa6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008aaa:	0c23      	lsrs	r3, r4, #16
 8008aac:	fb0e 111c 	mls	r1, lr, ip, r1
 8008ab0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008ab4:	fb08 f10c 	mul.w	r1, r8, ip
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	d907      	bls.n	8008acc <__udivmoddi4+0x124>
 8008abc:	18eb      	adds	r3, r5, r3
 8008abe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008ac2:	d202      	bcs.n	8008aca <__udivmoddi4+0x122>
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	f200 80cd 	bhi.w	8008c64 <__udivmoddi4+0x2bc>
 8008aca:	4684      	mov	ip, r0
 8008acc:	1a59      	subs	r1, r3, r1
 8008ace:	b2a3      	uxth	r3, r4
 8008ad0:	fbb1 f0fe 	udiv	r0, r1, lr
 8008ad4:	fb0e 1410 	mls	r4, lr, r0, r1
 8008ad8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008adc:	fb08 f800 	mul.w	r8, r8, r0
 8008ae0:	45a0      	cmp	r8, r4
 8008ae2:	d907      	bls.n	8008af4 <__udivmoddi4+0x14c>
 8008ae4:	192c      	adds	r4, r5, r4
 8008ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aea:	d202      	bcs.n	8008af2 <__udivmoddi4+0x14a>
 8008aec:	45a0      	cmp	r8, r4
 8008aee:	f200 80b6 	bhi.w	8008c5e <__udivmoddi4+0x2b6>
 8008af2:	4618      	mov	r0, r3
 8008af4:	eba4 0408 	sub.w	r4, r4, r8
 8008af8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008afc:	e79f      	b.n	8008a3e <__udivmoddi4+0x96>
 8008afe:	f1c7 0c20 	rsb	ip, r7, #32
 8008b02:	40bb      	lsls	r3, r7
 8008b04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008b08:	ea4e 0e03 	orr.w	lr, lr, r3
 8008b0c:	fa01 f407 	lsl.w	r4, r1, r7
 8008b10:	fa20 f50c 	lsr.w	r5, r0, ip
 8008b14:	fa21 f30c 	lsr.w	r3, r1, ip
 8008b18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008b1c:	4325      	orrs	r5, r4
 8008b1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008b22:	0c2c      	lsrs	r4, r5, #16
 8008b24:	fb08 3319 	mls	r3, r8, r9, r3
 8008b28:	fa1f fa8e 	uxth.w	sl, lr
 8008b2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008b30:	fb09 f40a 	mul.w	r4, r9, sl
 8008b34:	429c      	cmp	r4, r3
 8008b36:	fa02 f207 	lsl.w	r2, r2, r7
 8008b3a:	fa00 f107 	lsl.w	r1, r0, r7
 8008b3e:	d90b      	bls.n	8008b58 <__udivmoddi4+0x1b0>
 8008b40:	eb1e 0303 	adds.w	r3, lr, r3
 8008b44:	f109 30ff 	add.w	r0, r9, #4294967295
 8008b48:	f080 8087 	bcs.w	8008c5a <__udivmoddi4+0x2b2>
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	f240 8084 	bls.w	8008c5a <__udivmoddi4+0x2b2>
 8008b52:	f1a9 0902 	sub.w	r9, r9, #2
 8008b56:	4473      	add	r3, lr
 8008b58:	1b1b      	subs	r3, r3, r4
 8008b5a:	b2ad      	uxth	r5, r5
 8008b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008b60:	fb08 3310 	mls	r3, r8, r0, r3
 8008b64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008b68:	fb00 fa0a 	mul.w	sl, r0, sl
 8008b6c:	45a2      	cmp	sl, r4
 8008b6e:	d908      	bls.n	8008b82 <__udivmoddi4+0x1da>
 8008b70:	eb1e 0404 	adds.w	r4, lr, r4
 8008b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b78:	d26b      	bcs.n	8008c52 <__udivmoddi4+0x2aa>
 8008b7a:	45a2      	cmp	sl, r4
 8008b7c:	d969      	bls.n	8008c52 <__udivmoddi4+0x2aa>
 8008b7e:	3802      	subs	r0, #2
 8008b80:	4474      	add	r4, lr
 8008b82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008b86:	fba0 8902 	umull	r8, r9, r0, r2
 8008b8a:	eba4 040a 	sub.w	r4, r4, sl
 8008b8e:	454c      	cmp	r4, r9
 8008b90:	46c2      	mov	sl, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	d354      	bcc.n	8008c40 <__udivmoddi4+0x298>
 8008b96:	d051      	beq.n	8008c3c <__udivmoddi4+0x294>
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d069      	beq.n	8008c70 <__udivmoddi4+0x2c8>
 8008b9c:	ebb1 050a 	subs.w	r5, r1, sl
 8008ba0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ba4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ba8:	40fd      	lsrs	r5, r7
 8008baa:	40fc      	lsrs	r4, r7
 8008bac:	ea4c 0505 	orr.w	r5, ip, r5
 8008bb0:	e9c6 5400 	strd	r5, r4, [r6]
 8008bb4:	2700      	movs	r7, #0
 8008bb6:	e747      	b.n	8008a48 <__udivmoddi4+0xa0>
 8008bb8:	f1c2 0320 	rsb	r3, r2, #32
 8008bbc:	fa20 f703 	lsr.w	r7, r0, r3
 8008bc0:	4095      	lsls	r5, r2
 8008bc2:	fa01 f002 	lsl.w	r0, r1, r2
 8008bc6:	fa21 f303 	lsr.w	r3, r1, r3
 8008bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008bce:	4338      	orrs	r0, r7
 8008bd0:	0c01      	lsrs	r1, r0, #16
 8008bd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8008bd6:	fa1f f885 	uxth.w	r8, r5
 8008bda:	fb0e 3317 	mls	r3, lr, r7, r3
 8008bde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008be2:	fb07 f308 	mul.w	r3, r7, r8
 8008be6:	428b      	cmp	r3, r1
 8008be8:	fa04 f402 	lsl.w	r4, r4, r2
 8008bec:	d907      	bls.n	8008bfe <__udivmoddi4+0x256>
 8008bee:	1869      	adds	r1, r5, r1
 8008bf0:	f107 3cff 	add.w	ip, r7, #4294967295
 8008bf4:	d22f      	bcs.n	8008c56 <__udivmoddi4+0x2ae>
 8008bf6:	428b      	cmp	r3, r1
 8008bf8:	d92d      	bls.n	8008c56 <__udivmoddi4+0x2ae>
 8008bfa:	3f02      	subs	r7, #2
 8008bfc:	4429      	add	r1, r5
 8008bfe:	1acb      	subs	r3, r1, r3
 8008c00:	b281      	uxth	r1, r0
 8008c02:	fbb3 f0fe 	udiv	r0, r3, lr
 8008c06:	fb0e 3310 	mls	r3, lr, r0, r3
 8008c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c0e:	fb00 f308 	mul.w	r3, r0, r8
 8008c12:	428b      	cmp	r3, r1
 8008c14:	d907      	bls.n	8008c26 <__udivmoddi4+0x27e>
 8008c16:	1869      	adds	r1, r5, r1
 8008c18:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c1c:	d217      	bcs.n	8008c4e <__udivmoddi4+0x2a6>
 8008c1e:	428b      	cmp	r3, r1
 8008c20:	d915      	bls.n	8008c4e <__udivmoddi4+0x2a6>
 8008c22:	3802      	subs	r0, #2
 8008c24:	4429      	add	r1, r5
 8008c26:	1ac9      	subs	r1, r1, r3
 8008c28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008c2c:	e73b      	b.n	8008aa6 <__udivmoddi4+0xfe>
 8008c2e:	4637      	mov	r7, r6
 8008c30:	4630      	mov	r0, r6
 8008c32:	e709      	b.n	8008a48 <__udivmoddi4+0xa0>
 8008c34:	4607      	mov	r7, r0
 8008c36:	e6e7      	b.n	8008a08 <__udivmoddi4+0x60>
 8008c38:	4618      	mov	r0, r3
 8008c3a:	e6fb      	b.n	8008a34 <__udivmoddi4+0x8c>
 8008c3c:	4541      	cmp	r1, r8
 8008c3e:	d2ab      	bcs.n	8008b98 <__udivmoddi4+0x1f0>
 8008c40:	ebb8 0a02 	subs.w	sl, r8, r2
 8008c44:	eb69 020e 	sbc.w	r2, r9, lr
 8008c48:	3801      	subs	r0, #1
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	e7a4      	b.n	8008b98 <__udivmoddi4+0x1f0>
 8008c4e:	4660      	mov	r0, ip
 8008c50:	e7e9      	b.n	8008c26 <__udivmoddi4+0x27e>
 8008c52:	4618      	mov	r0, r3
 8008c54:	e795      	b.n	8008b82 <__udivmoddi4+0x1da>
 8008c56:	4667      	mov	r7, ip
 8008c58:	e7d1      	b.n	8008bfe <__udivmoddi4+0x256>
 8008c5a:	4681      	mov	r9, r0
 8008c5c:	e77c      	b.n	8008b58 <__udivmoddi4+0x1b0>
 8008c5e:	3802      	subs	r0, #2
 8008c60:	442c      	add	r4, r5
 8008c62:	e747      	b.n	8008af4 <__udivmoddi4+0x14c>
 8008c64:	f1ac 0c02 	sub.w	ip, ip, #2
 8008c68:	442b      	add	r3, r5
 8008c6a:	e72f      	b.n	8008acc <__udivmoddi4+0x124>
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	e708      	b.n	8008a82 <__udivmoddi4+0xda>
 8008c70:	4637      	mov	r7, r6
 8008c72:	e6e9      	b.n	8008a48 <__udivmoddi4+0xa0>

08008c74 <__aeabi_idiv0>:
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c7c:	f001 f9d6 	bl	800a02c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c80:	f000 f81a 	bl	8008cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c84:	f000 fc64 	bl	8009550 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c88:	f000 fc3a 	bl	8009500 <MX_DMA_Init>
  MX_ADC1_Init();
 8008c8c:	f000 f87e 	bl	8008d8c <MX_ADC1_Init>
  MX_ADC2_Init();
 8008c90:	f000 f8ea 	bl	8008e68 <MX_ADC2_Init>
  MX_TIM3_Init();
 8008c94:	f000 fa44 	bl	8009120 <MX_TIM3_Init>
  MX_TIM2_Init();
 8008c98:	f000 f9cc 	bl	8009034 <MX_TIM2_Init>
  MX_SPI3_Init();
 8008c9c:	f000 f944 	bl	8008f28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8008ca0:	f000 fc04 	bl	80094ac <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8008ca4:	f000 fae4 	bl	8009270 <MX_TIM5_Init>
  MX_TIM4_Init();
 8008ca8:	f000 fa8e 	bl	80091c8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8008cac:	f000 fb56 	bl	800935c <MX_TIM8_Init>
  MX_TIM1_Init();
 8008cb0:	f000 f970 	bl	8008f94 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8008cb4:	e7fe      	b.n	8008cb4 <main+0x3c>
	...

08008cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b094      	sub	sp, #80	; 0x50
 8008cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cbe:	f107 0320 	add.w	r3, r7, #32
 8008cc2:	2230      	movs	r2, #48	; 0x30
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f004 fdf8 	bl	800d8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60bb      	str	r3, [r7, #8]
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <SystemClock_Config+0xcc>)
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <SystemClock_Config+0xcc>)
 8008ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cea:	6413      	str	r3, [r2, #64]	; 0x40
 8008cec:	4b25      	ldr	r3, [pc, #148]	; (8008d84 <SystemClock_Config+0xcc>)
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	607b      	str	r3, [r7, #4]
 8008cfc:	4b22      	ldr	r3, [pc, #136]	; (8008d88 <SystemClock_Config+0xd0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a21      	ldr	r2, [pc, #132]	; (8008d88 <SystemClock_Config+0xd0>)
 8008d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <SystemClock_Config+0xd0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008d28:	2304      	movs	r3, #4
 8008d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008d2c:	23a8      	movs	r3, #168	; 0xa8
 8008d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d30:	2302      	movs	r3, #2
 8008d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008d34:	2304      	movs	r3, #4
 8008d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d38:	f107 0320 	add.w	r3, r7, #32
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f002 fcf7 	bl	800b730 <HAL_RCC_OscConfig>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008d48:	f000 fccc 	bl	80096e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d4c:	230f      	movs	r3, #15
 8008d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d50:	2302      	movs	r3, #2
 8008d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008d64:	f107 030c 	add.w	r3, r7, #12
 8008d68:	2105      	movs	r1, #5
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 ff50 	bl	800bc10 <HAL_RCC_ClockConfig>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008d76:	f000 fcb5 	bl	80096e4 <Error_Handler>
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	3750      	adds	r7, #80	; 0x50
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40023800 	.word	0x40023800
 8008d88:	40007000 	.word	0x40007000

08008d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008d92:	463b      	mov	r3, r7
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	609a      	str	r2, [r3, #8]
 8008d9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008d9e:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008da0:	4a2f      	ldr	r2, [pc, #188]	; (8008e60 <MX_ADC1_Init+0xd4>)
 8008da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8008da4:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008dac:	4b2b      	ldr	r3, [pc, #172]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8008db2:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008db4:	2201      	movs	r2, #1
 8008db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008db8:	4b28      	ldr	r3, [pc, #160]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008dbe:	4b27      	ldr	r3, [pc, #156]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008dc6:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008dcc:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dce:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <MX_ADC1_Init+0xd8>)
 8008dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008dd2:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8008dd8:	4b20      	ldr	r3, [pc, #128]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dda:	2203      	movs	r2, #3
 8008ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008dde:	4b1f      	ldr	r3, [pc, #124]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008de6:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008dec:	481b      	ldr	r0, [pc, #108]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008dee:	f001 f98f 	bl	800a110 <HAL_ADC_Init>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008df8:	f000 fc74 	bl	80096e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008dfc:	230a      	movs	r3, #10
 8008dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008e00:	2301      	movs	r3, #1
 8008e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8008e04:	2303      	movs	r3, #3
 8008e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e08:	463b      	mov	r3, r7
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4813      	ldr	r0, [pc, #76]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008e0e:	f001 fb21 	bl	800a454 <HAL_ADC_ConfigChannel>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008e18:	f000 fc64 	bl	80096e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008e1c:	230e      	movs	r3, #14
 8008e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008e20:	2302      	movs	r3, #2
 8008e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e24:	463b      	mov	r3, r7
 8008e26:	4619      	mov	r1, r3
 8008e28:	480c      	ldr	r0, [pc, #48]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008e2a:	f001 fb13 	bl	800a454 <HAL_ADC_ConfigChannel>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008e34:	f000 fc56 	bl	80096e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008e38:	2309      	movs	r3, #9
 8008e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e40:	463b      	mov	r3, r7
 8008e42:	4619      	mov	r1, r3
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <MX_ADC1_Init+0xd0>)
 8008e46:	f001 fb05 	bl	800a454 <HAL_ADC_ConfigChannel>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8008e50:	f000 fc48 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200003a4 	.word	0x200003a4
 8008e60:	40012000 	.word	0x40012000
 8008e64:	0f000001 	.word	0x0f000001

08008e68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008e6e:	463b      	mov	r3, r7
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	605a      	str	r2, [r3, #4]
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008e7a:	4b28      	ldr	r3, [pc, #160]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e7c:	4a28      	ldr	r2, [pc, #160]	; (8008f20 <MX_ADC2_Init+0xb8>)
 8008e7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8008e80:	4b26      	ldr	r3, [pc, #152]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008e88:	4b24      	ldr	r3, [pc, #144]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8008e94:	4b21      	ldr	r3, [pc, #132]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008e9a:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008ea2:	4b1e      	ldr	r3, [pc, #120]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008ea8:	4b1c      	ldr	r3, [pc, #112]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008eaa:	4a1e      	ldr	r2, [pc, #120]	; (8008f24 <MX_ADC2_Init+0xbc>)
 8008eac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008eae:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8008eb4:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008ec2:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008ec8:	4814      	ldr	r0, [pc, #80]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008eca:	f001 f921 	bl	800a110 <HAL_ADC_Init>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8008ed4:	f000 fc06 	bl	80096e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008ed8:	230b      	movs	r3, #11
 8008eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008edc:	2301      	movs	r3, #1
 8008ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	480c      	ldr	r0, [pc, #48]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008eea:	f001 fab3 	bl	800a454 <HAL_ADC_ConfigChannel>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8008ef4:	f000 fbf6 	bl	80096e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008ef8:	230f      	movs	r3, #15
 8008efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008efc:	2302      	movs	r3, #2
 8008efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008f00:	463b      	mov	r3, r7
 8008f02:	4619      	mov	r1, r3
 8008f04:	4805      	ldr	r0, [pc, #20]	; (8008f1c <MX_ADC2_Init+0xb4>)
 8008f06:	f001 faa5 	bl	800a454 <HAL_ADC_ConfigChannel>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8008f10:	f000 fbe8 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000284 	.word	0x20000284
 8008f20:	40012100 	.word	0x40012100
 8008f24:	0f000001 	.word	0x0f000001

08008f28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8008f2c:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f2e:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <MX_SPI3_Init+0x68>)
 8008f30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008f32:	4b16      	ldr	r3, [pc, #88]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008f3a:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f40:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008f46:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f48:	2202      	movs	r2, #2
 8008f4a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008f52:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f58:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f5c:	2228      	movs	r2, #40	; 0x28
 8008f5e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f6c:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008f72:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f74:	220a      	movs	r2, #10
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008f78:	4804      	ldr	r0, [pc, #16]	; (8008f8c <MX_SPI3_Init+0x64>)
 8008f7a:	f003 f83b 	bl	800bff4 <HAL_SPI_Init>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008f84:	f000 fbae 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008f88:	bf00      	nop
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	2000034c 	.word	0x2000034c
 8008f90:	40003c00 	.word	0x40003c00

08008f94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
 8008fa4:	609a      	str	r2, [r3, #8]
 8008fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fa8:	463b      	mov	r3, r7
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008fb0:	4b1e      	ldr	r3, [pc, #120]	; (800902c <MX_TIM1_Init+0x98>)
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <MX_TIM1_Init+0x9c>)
 8008fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8008fb6:	4b1d      	ldr	r3, [pc, #116]	; (800902c <MX_TIM1_Init+0x98>)
 8008fb8:	22a7      	movs	r2, #167	; 0xa7
 8008fba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <MX_TIM1_Init+0x98>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8008fc2:	4b1a      	ldr	r3, [pc, #104]	; (800902c <MX_TIM1_Init+0x98>)
 8008fc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <MX_TIM1_Init+0x98>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008fd0:	4b16      	ldr	r3, [pc, #88]	; (800902c <MX_TIM1_Init+0x98>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fd6:	4b15      	ldr	r3, [pc, #84]	; (800902c <MX_TIM1_Init+0x98>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008fdc:	4813      	ldr	r0, [pc, #76]	; (800902c <MX_TIM1_Init+0x98>)
 8008fde:	f003 f86d 	bl	800c0bc <HAL_TIM_Base_Init>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8008fe8:	f000 fb7c 	bl	80096e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008ff2:	f107 0308 	add.w	r3, r7, #8
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	480c      	ldr	r0, [pc, #48]	; (800902c <MX_TIM1_Init+0x98>)
 8008ffa:	f003 fbb5 	bl	800c768 <HAL_TIM_ConfigClockSource>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8009004:	f000 fb6e 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009008:	2300      	movs	r3, #0
 800900a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800900c:	2300      	movs	r3, #0
 800900e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009010:	463b      	mov	r3, r7
 8009012:	4619      	mov	r1, r3
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <MX_TIM1_Init+0x98>)
 8009016:	f003 ff7b 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009020:	f000 fb60 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009024:	bf00      	nop
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20000874 	.word	0x20000874
 8009030:	40010000 	.word	0x40010000

08009034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	; 0x38
 8009038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800903a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	605a      	str	r2, [r3, #4]
 8009044:	609a      	str	r2, [r3, #8]
 8009046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009048:	f107 0320 	add.w	r3, r7, #32
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009052:	1d3b      	adds	r3, r7, #4
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	60da      	str	r2, [r3, #12]
 800905e:	611a      	str	r2, [r3, #16]
 8009060:	615a      	str	r2, [r3, #20]
 8009062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009064:	4b2d      	ldr	r3, [pc, #180]	; (800911c <MX_TIM2_Init+0xe8>)
 8009066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800906a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800906c:	4b2b      	ldr	r3, [pc, #172]	; (800911c <MX_TIM2_Init+0xe8>)
 800906e:	2200      	movs	r2, #0
 8009070:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009072:	4b2a      	ldr	r3, [pc, #168]	; (800911c <MX_TIM2_Init+0xe8>)
 8009074:	2200      	movs	r2, #0
 8009076:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 8009078:	4b28      	ldr	r3, [pc, #160]	; (800911c <MX_TIM2_Init+0xe8>)
 800907a:	f241 0267 	movw	r2, #4199	; 0x1067
 800907e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009080:	4b26      	ldr	r3, [pc, #152]	; (800911c <MX_TIM2_Init+0xe8>)
 8009082:	2200      	movs	r2, #0
 8009084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009086:	4b25      	ldr	r3, [pc, #148]	; (800911c <MX_TIM2_Init+0xe8>)
 8009088:	2200      	movs	r2, #0
 800908a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800908c:	4823      	ldr	r0, [pc, #140]	; (800911c <MX_TIM2_Init+0xe8>)
 800908e:	f003 f815 	bl	800c0bc <HAL_TIM_Base_Init>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009098:	f000 fb24 	bl	80096e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800909c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80090a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090a6:	4619      	mov	r1, r3
 80090a8:	481c      	ldr	r0, [pc, #112]	; (800911c <MX_TIM2_Init+0xe8>)
 80090aa:	f003 fb5d 	bl	800c768 <HAL_TIM_ConfigClockSource>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80090b4:	f000 fb16 	bl	80096e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80090b8:	4818      	ldr	r0, [pc, #96]	; (800911c <MX_TIM2_Init+0xe8>)
 80090ba:	f003 f85f 	bl	800c17c <HAL_TIM_PWM_Init>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80090c4:	f000 fb0e 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090c8:	2300      	movs	r3, #0
 80090ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80090d0:	f107 0320 	add.w	r3, r7, #32
 80090d4:	4619      	mov	r1, r3
 80090d6:	4811      	ldr	r0, [pc, #68]	; (800911c <MX_TIM2_Init+0xe8>)
 80090d8:	f003 ff1a 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80090e2:	f000 faff 	bl	80096e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80090e6:	2360      	movs	r3, #96	; 0x60
 80090e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	220c      	movs	r2, #12
 80090fa:	4619      	mov	r1, r3
 80090fc:	4807      	ldr	r0, [pc, #28]	; (800911c <MX_TIM2_Init+0xe8>)
 80090fe:	f003 fa6d 	bl	800c5dc <HAL_TIM_PWM_ConfigChannel>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009108:	f000 faec 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800910c:	4803      	ldr	r0, [pc, #12]	; (800911c <MX_TIM2_Init+0xe8>)
 800910e:	f000 fd89 	bl	8009c24 <HAL_TIM_MspPostInit>

}
 8009112:	bf00      	nop
 8009114:	3738      	adds	r7, #56	; 0x38
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000c9c 	.word	0x20000c9c

08009120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08c      	sub	sp, #48	; 0x30
 8009124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	2224      	movs	r2, #36	; 0x24
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f004 fbc4 	bl	800d8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009134:	1d3b      	adds	r3, r7, #4
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800913c:	4b20      	ldr	r3, [pc, #128]	; (80091c0 <MX_TIM3_Init+0xa0>)
 800913e:	4a21      	ldr	r2, [pc, #132]	; (80091c4 <MX_TIM3_Init+0xa4>)
 8009140:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <MX_TIM3_Init+0xa0>)
 8009144:	2200      	movs	r2, #0
 8009146:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009148:	4b1d      	ldr	r3, [pc, #116]	; (80091c0 <MX_TIM3_Init+0xa0>)
 800914a:	2200      	movs	r2, #0
 800914c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800914e:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <MX_TIM3_Init+0xa0>)
 8009150:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8009154:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009156:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <MX_TIM3_Init+0xa0>)
 8009158:	2200      	movs	r2, #0
 800915a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800915c:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <MX_TIM3_Init+0xa0>)
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009162:	2303      	movs	r3, #3
 8009164:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800916a:	2301      	movs	r3, #1
 800916c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800916e:	2300      	movs	r3, #0
 8009170:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009176:	2300      	movs	r3, #0
 8009178:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800917a:	2301      	movs	r3, #1
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800917e:	2300      	movs	r3, #0
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009186:	f107 030c 	add.w	r3, r7, #12
 800918a:	4619      	mov	r1, r3
 800918c:	480c      	ldr	r0, [pc, #48]	; (80091c0 <MX_TIM3_Init+0xa0>)
 800918e:	f003 f82a 	bl	800c1e6 <HAL_TIM_Encoder_Init>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009198:	f000 faa4 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800919c:	2300      	movs	r3, #0
 800919e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80091a4:	1d3b      	adds	r3, r7, #4
 80091a6:	4619      	mov	r1, r3
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <MX_TIM3_Init+0xa0>)
 80091aa:	f003 feb1 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80091b4:	f000 fa96 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80091b8:	bf00      	nop
 80091ba:	3730      	adds	r7, #48	; 0x30
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	2000030c 	.word	0x2000030c
 80091c4:	40000400 	.word	0x40000400

080091c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	; 0x30
 80091cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	2224      	movs	r2, #36	; 0x24
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f004 fb70 	bl	800d8bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80091e4:	4b20      	ldr	r3, [pc, #128]	; (8009268 <MX_TIM4_Init+0xa0>)
 80091e6:	4a21      	ldr	r2, [pc, #132]	; (800926c <MX_TIM4_Init+0xa4>)
 80091e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80091ea:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <MX_TIM4_Init+0xa0>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <MX_TIM4_Init+0xa0>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <MX_TIM4_Init+0xa0>)
 80091f8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80091fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091fe:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <MX_TIM4_Init+0xa0>)
 8009200:	2200      	movs	r2, #0
 8009202:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009204:	4b18      	ldr	r3, [pc, #96]	; (8009268 <MX_TIM4_Init+0xa0>)
 8009206:	2200      	movs	r2, #0
 8009208:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800920a:	2303      	movs	r3, #3
 800920c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800920e:	2300      	movs	r3, #0
 8009210:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009212:	2301      	movs	r3, #1
 8009214:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800921e:	2300      	movs	r3, #0
 8009220:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009222:	2301      	movs	r3, #1
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009226:	2300      	movs	r3, #0
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	4619      	mov	r1, r3
 8009234:	480c      	ldr	r0, [pc, #48]	; (8009268 <MX_TIM4_Init+0xa0>)
 8009236:	f002 ffd6 	bl	800c1e6 <HAL_TIM_Encoder_Init>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009240:	f000 fa50 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009244:	2300      	movs	r3, #0
 8009246:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009248:	2300      	movs	r3, #0
 800924a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	4619      	mov	r1, r3
 8009250:	4805      	ldr	r0, [pc, #20]	; (8009268 <MX_TIM4_Init+0xa0>)
 8009252:	f003 fe5d 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800925c:	f000 fa42 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009260:	bf00      	nop
 8009262:	3730      	adds	r7, #48	; 0x30
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20000244 	.word	0x20000244
 800926c:	40000800 	.word	0x40000800

08009270 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	; 0x38
 8009274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	605a      	str	r2, [r3, #4]
 8009280:	609a      	str	r2, [r3, #8]
 8009282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009284:	f107 0320 	add.w	r3, r7, #32
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800928e:	1d3b      	adds	r3, r7, #4
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	609a      	str	r2, [r3, #8]
 8009298:	60da      	str	r2, [r3, #12]
 800929a:	611a      	str	r2, [r3, #16]
 800929c:	615a      	str	r2, [r3, #20]
 800929e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80092a0:	4b2c      	ldr	r3, [pc, #176]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092a2:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <MX_TIM5_Init+0xe8>)
 80092a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80092a6:	4b2b      	ldr	r3, [pc, #172]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092ac:	4b29      	ldr	r3, [pc, #164]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 80092b2:	4b28      	ldr	r3, [pc, #160]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092b4:	f241 0267 	movw	r2, #4199	; 0x1067
 80092b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092ba:	4b26      	ldr	r3, [pc, #152]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092bc:	2200      	movs	r2, #0
 80092be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092c0:	4b24      	ldr	r3, [pc, #144]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80092c6:	4823      	ldr	r0, [pc, #140]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092c8:	f002 fef8 	bl	800c0bc <HAL_TIM_Base_Init>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80092d2:	f000 fa07 	bl	80096e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80092d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80092dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092e0:	4619      	mov	r1, r3
 80092e2:	481c      	ldr	r0, [pc, #112]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092e4:	f003 fa40 	bl	800c768 <HAL_TIM_ConfigClockSource>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80092ee:	f000 f9f9 	bl	80096e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80092f2:	4818      	ldr	r0, [pc, #96]	; (8009354 <MX_TIM5_Init+0xe4>)
 80092f4:	f002 ff42 	bl	800c17c <HAL_TIM_PWM_Init>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80092fe:	f000 f9f1 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009302:	2300      	movs	r3, #0
 8009304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009306:	2300      	movs	r3, #0
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800930a:	f107 0320 	add.w	r3, r7, #32
 800930e:	4619      	mov	r1, r3
 8009310:	4810      	ldr	r0, [pc, #64]	; (8009354 <MX_TIM5_Init+0xe4>)
 8009312:	f003 fdfd 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800931c:	f000 f9e2 	bl	80096e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009320:	2360      	movs	r3, #96	; 0x60
 8009322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	2204      	movs	r2, #4
 8009334:	4619      	mov	r1, r3
 8009336:	4807      	ldr	r0, [pc, #28]	; (8009354 <MX_TIM5_Init+0xe4>)
 8009338:	f003 f950 	bl	800c5dc <HAL_TIM_PWM_ConfigChannel>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8009342:	f000 f9cf 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8009346:	4803      	ldr	r0, [pc, #12]	; (8009354 <MX_TIM5_Init+0xe4>)
 8009348:	f000 fc6c 	bl	8009c24 <HAL_TIM_MspPostInit>

}
 800934c:	bf00      	nop
 800934e:	3738      	adds	r7, #56	; 0x38
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	200002cc 	.word	0x200002cc
 8009358:	40000c00 	.word	0x40000c00

0800935c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b096      	sub	sp, #88	; 0x58
 8009360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009362:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	609a      	str	r2, [r3, #8]
 800936e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800937a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	605a      	str	r2, [r3, #4]
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	60da      	str	r2, [r3, #12]
 8009388:	611a      	str	r2, [r3, #16]
 800938a:	615a      	str	r2, [r3, #20]
 800938c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	2220      	movs	r2, #32
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f004 fa91 	bl	800d8bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800939a:	4b42      	ldr	r3, [pc, #264]	; (80094a4 <MX_TIM8_Init+0x148>)
 800939c:	4a42      	ldr	r2, [pc, #264]	; (80094a8 <MX_TIM8_Init+0x14c>)
 800939e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80093a0:	4b40      	ldr	r3, [pc, #256]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093a2:	22a7      	movs	r2, #167	; 0xa7
 80093a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093a6:	4b3f      	ldr	r3, [pc, #252]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 80093ac:	4b3d      	ldr	r3, [pc, #244]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093ae:	2231      	movs	r2, #49	; 0x31
 80093b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093b2:	4b3c      	ldr	r3, [pc, #240]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80093b8:	4b3a      	ldr	r3, [pc, #232]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80093be:	4b39      	ldr	r3, [pc, #228]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093c0:	2280      	movs	r2, #128	; 0x80
 80093c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80093c4:	4837      	ldr	r0, [pc, #220]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093c6:	f002 fe79 	bl	800c0bc <HAL_TIM_Base_Init>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80093d0:	f000 f988 	bl	80096e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80093da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093de:	4619      	mov	r1, r3
 80093e0:	4830      	ldr	r0, [pc, #192]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093e2:	f003 f9c1 	bl	800c768 <HAL_TIM_ConfigClockSource>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80093ec:	f000 f97a 	bl	80096e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80093f0:	482c      	ldr	r0, [pc, #176]	; (80094a4 <MX_TIM8_Init+0x148>)
 80093f2:	f002 fe8e 	bl	800c112 <HAL_TIM_OC_Init>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80093fc:	f000 f972 	bl	80096e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009400:	2300      	movs	r3, #0
 8009402:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009404:	2300      	movs	r3, #0
 8009406:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800940c:	4619      	mov	r1, r3
 800940e:	4825      	ldr	r0, [pc, #148]	; (80094a4 <MX_TIM8_Init+0x148>)
 8009410:	f003 fd7e 	bl	800cf10 <HAL_TIMEx_MasterConfigSynchronization>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800941a:	f000 f963 	bl	80096e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800941e:	2330      	movs	r3, #48	; 0x30
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 8009422:	2318      	movs	r3, #24
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009426:	2300      	movs	r3, #0
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800942a:	2300      	movs	r3, #0
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800942e:	2300      	movs	r3, #0
 8009430:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009432:	2300      	movs	r3, #0
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800943a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800943e:	2200      	movs	r2, #0
 8009440:	4619      	mov	r1, r3
 8009442:	4818      	ldr	r0, [pc, #96]	; (80094a4 <MX_TIM8_Init+0x148>)
 8009444:	f003 f86a 	bl	800c51c <HAL_TIM_OC_ConfigChannel>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800944e:	f000 f949 	bl	80096e4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8009452:	4b14      	ldr	r3, [pc, #80]	; (80094a4 <MX_TIM8_Init+0x148>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <MX_TIM8_Init+0x148>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0208 	orr.w	r2, r2, #8
 8009460:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009466:	2300      	movs	r3, #0
 8009468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800946a:	2300      	movs	r3, #0
 800946c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800947a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800947c:	2300      	movs	r3, #0
 800947e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009480:	1d3b      	adds	r3, r7, #4
 8009482:	4619      	mov	r1, r3
 8009484:	4807      	ldr	r0, [pc, #28]	; (80094a4 <MX_TIM8_Init+0x148>)
 8009486:	f003 fdbf 	bl	800d008 <HAL_TIMEx_ConfigBreakDeadTime>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8009490:	f000 f928 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009494:	4803      	ldr	r0, [pc, #12]	; (80094a4 <MX_TIM8_Init+0x148>)
 8009496:	f000 fbc5 	bl	8009c24 <HAL_TIM_MspPostInit>

}
 800949a:	bf00      	nop
 800949c:	3758      	adds	r7, #88	; 0x58
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000204 	.word	0x20000204
 80094a8:	40010400 	.word	0x40010400

080094ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80094b0:	4b11      	ldr	r3, [pc, #68]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094b2:	4a12      	ldr	r2, [pc, #72]	; (80094fc <MX_USART1_UART_Init+0x50>)
 80094b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80094bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094d2:	220c      	movs	r2, #12
 80094d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80094d6:	4b08      	ldr	r3, [pc, #32]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094de:	2200      	movs	r2, #0
 80094e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80094e2:	4805      	ldr	r0, [pc, #20]	; (80094f8 <MX_USART1_UART_Init+0x4c>)
 80094e4:	f003 fdf6 	bl	800d0d4 <HAL_UART_Init>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80094ee:	f000 f8f9 	bl	80096e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80094f2:	bf00      	nop
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	200003ec 	.word	0x200003ec
 80094fc:	40011000 	.word	0x40011000

08009500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	4b10      	ldr	r3, [pc, #64]	; (800954c <MX_DMA_Init+0x4c>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4a0f      	ldr	r2, [pc, #60]	; (800954c <MX_DMA_Init+0x4c>)
 8009510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009514:	6313      	str	r3, [r2, #48]	; 0x30
 8009516:	4b0d      	ldr	r3, [pc, #52]	; (800954c <MX_DMA_Init+0x4c>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800951e:	607b      	str	r3, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009522:	2200      	movs	r2, #0
 8009524:	2100      	movs	r1, #0
 8009526:	2038      	movs	r0, #56	; 0x38
 8009528:	f001 fa97 	bl	800aa5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800952c:	2038      	movs	r0, #56	; 0x38
 800952e:	f001 fab0 	bl	800aa92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8009532:	2200      	movs	r2, #0
 8009534:	2100      	movs	r1, #0
 8009536:	203a      	movs	r0, #58	; 0x3a
 8009538:	f001 fa8f 	bl	800aa5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800953c:	203a      	movs	r0, #58	; 0x3a
 800953e:	f001 faa8 	bl	800aa92 <HAL_NVIC_EnableIRQ>

}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	40023800 	.word	0x40023800

08009550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	605a      	str	r2, [r3, #4]
 8009560:	609a      	str	r2, [r3, #8]
 8009562:	60da      	str	r2, [r3, #12]
 8009564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009566:	2300      	movs	r3, #0
 8009568:	613b      	str	r3, [r7, #16]
 800956a:	4b59      	ldr	r3, [pc, #356]	; (80096d0 <MX_GPIO_Init+0x180>)
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	4a58      	ldr	r2, [pc, #352]	; (80096d0 <MX_GPIO_Init+0x180>)
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	6313      	str	r3, [r2, #48]	; 0x30
 8009576:	4b56      	ldr	r3, [pc, #344]	; (80096d0 <MX_GPIO_Init+0x180>)
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	4b52      	ldr	r3, [pc, #328]	; (80096d0 <MX_GPIO_Init+0x180>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	4a51      	ldr	r2, [pc, #324]	; (80096d0 <MX_GPIO_Init+0x180>)
 800958c:	f043 0304 	orr.w	r3, r3, #4
 8009590:	6313      	str	r3, [r2, #48]	; 0x30
 8009592:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <MX_GPIO_Init+0x180>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f003 0304 	and.w	r3, r3, #4
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800959e:	2300      	movs	r3, #0
 80095a0:	60bb      	str	r3, [r7, #8]
 80095a2:	4b4b      	ldr	r3, [pc, #300]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	4a4a      	ldr	r2, [pc, #296]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095a8:	f043 0301 	orr.w	r3, r3, #1
 80095ac:	6313      	str	r3, [r2, #48]	; 0x30
 80095ae:	4b48      	ldr	r3, [pc, #288]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]
 80095be:	4b44      	ldr	r3, [pc, #272]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	4a43      	ldr	r2, [pc, #268]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095c4:	f043 0302 	orr.w	r3, r3, #2
 80095c8:	6313      	str	r3, [r2, #48]	; 0x30
 80095ca:	4b41      	ldr	r3, [pc, #260]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	607b      	str	r3, [r7, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095d6:	2300      	movs	r3, #0
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	4b3d      	ldr	r3, [pc, #244]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	4a3c      	ldr	r2, [pc, #240]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095e0:	f043 0308 	orr.w	r3, r3, #8
 80095e4:	6313      	str	r3, [r2, #48]	; 0x30
 80095e6:	4b3a      	ldr	r3, [pc, #232]	; (80096d0 <MX_GPIO_Init+0x180>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80095f2:	2200      	movs	r2, #0
 80095f4:	f44f 7141 	mov.w	r1, #772	; 0x304
 80095f8:	4836      	ldr	r0, [pc, #216]	; (80096d4 <MX_GPIO_Init+0x184>)
 80095fa:	f002 f87f 	bl	800b6fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80095fe:	2200      	movs	r2, #0
 8009600:	2105      	movs	r1, #5
 8009602:	4835      	ldr	r0, [pc, #212]	; (80096d8 <MX_GPIO_Init+0x188>)
 8009604:	f002 f87a 	bl	800b6fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8009608:	2200      	movs	r2, #0
 800960a:	2104      	movs	r1, #4
 800960c:	4833      	ldr	r0, [pc, #204]	; (80096dc <MX_GPIO_Init+0x18c>)
 800960e:	f002 f875 	bl	800b6fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009612:	2200      	movs	r2, #0
 8009614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009618:	4831      	ldr	r0, [pc, #196]	; (80096e0 <MX_GPIO_Init+0x190>)
 800961a:	f002 f86f 	bl	800b6fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800961e:	f44f 7341 	mov.w	r3, #772	; 0x304
 8009622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009624:	2301      	movs	r3, #1
 8009626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800962c:	2300      	movs	r3, #0
 800962e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	4619      	mov	r1, r3
 8009636:	4827      	ldr	r0, [pc, #156]	; (80096d4 <MX_GPIO_Init+0x184>)
 8009638:	f001 fec6 	bl	800b3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800963c:	2305      	movs	r3, #5
 800963e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009640:	2301      	movs	r3, #1
 8009642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009644:	2300      	movs	r3, #0
 8009646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009648:	2300      	movs	r3, #0
 800964a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800964c:	f107 0314 	add.w	r3, r7, #20
 8009650:	4619      	mov	r1, r3
 8009652:	4821      	ldr	r0, [pc, #132]	; (80096d8 <MX_GPIO_Init+0x188>)
 8009654:	f001 feb8 	bl	800b3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8009658:	f241 0304 	movw	r3, #4100	; 0x1004
 800965c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800965e:	2300      	movs	r3, #0
 8009660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009662:	2300      	movs	r3, #0
 8009664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	4619      	mov	r1, r3
 800966c:	481c      	ldr	r0, [pc, #112]	; (80096e0 <MX_GPIO_Init+0x190>)
 800966e:	f001 feab 	bl	800b3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009678:	2300      	movs	r3, #0
 800967a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009680:	f107 0314 	add.w	r3, r7, #20
 8009684:	4619      	mov	r1, r3
 8009686:	4814      	ldr	r0, [pc, #80]	; (80096d8 <MX_GPIO_Init+0x188>)
 8009688:	f001 fe9e 	bl	800b3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800968c:	2304      	movs	r3, #4
 800968e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009690:	2301      	movs	r3, #1
 8009692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009694:	2300      	movs	r3, #0
 8009696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009698:	2300      	movs	r3, #0
 800969a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800969c:	f107 0314 	add.w	r3, r7, #20
 80096a0:	4619      	mov	r1, r3
 80096a2:	480e      	ldr	r0, [pc, #56]	; (80096dc <MX_GPIO_Init+0x18c>)
 80096a4:	f001 fe90 	bl	800b3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80096a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096ae:	2301      	movs	r3, #1
 80096b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096b6:	2300      	movs	r3, #0
 80096b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096ba:	f107 0314 	add.w	r3, r7, #20
 80096be:	4619      	mov	r1, r3
 80096c0:	4807      	ldr	r0, [pc, #28]	; (80096e0 <MX_GPIO_Init+0x190>)
 80096c2:	f001 fe81 	bl	800b3c8 <HAL_GPIO_Init>

}
 80096c6:	bf00      	nop
 80096c8:	3728      	adds	r7, #40	; 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	40023800 	.word	0x40023800
 80096d4:	40020800 	.word	0x40020800
 80096d8:	40020000 	.word	0x40020000
 80096dc:	40020c00 	.word	0x40020c00
 80096e0:	40020400 	.word	0x40020400

080096e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80096e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80096ea:	e7fe      	b.n	80096ea <Error_Handler+0x6>

080096ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <HAL_MspInit+0x58>)
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	4a12      	ldr	r2, [pc, #72]	; (8009744 <HAL_MspInit+0x58>)
 80096fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009700:	6453      	str	r3, [r2, #68]	; 0x44
 8009702:	4b10      	ldr	r3, [pc, #64]	; (8009744 <HAL_MspInit+0x58>)
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	603b      	str	r3, [r7, #0]
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <HAL_MspInit+0x58>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	4a0b      	ldr	r2, [pc, #44]	; (8009744 <HAL_MspInit+0x58>)
 8009718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800971c:	6413      	str	r3, [r2, #64]	; 0x40
 800971e:	4b09      	ldr	r3, [pc, #36]	; (8009744 <HAL_MspInit+0x58>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800972a:	2200      	movs	r2, #0
 800972c:	2100      	movs	r1, #0
 800972e:	2004      	movs	r0, #4
 8009730:	f001 f993 	bl	800aa5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8009734:	2004      	movs	r0, #4
 8009736:	f001 f9ac 	bl	800aa92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	40023800 	.word	0x40023800

08009748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009750:	f107 031c 	add.w	r3, r7, #28
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a73      	ldr	r2, [pc, #460]	; (8009934 <HAL_ADC_MspInit+0x1ec>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d17a      	bne.n	8009860 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800976a:	2300      	movs	r3, #0
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	4b72      	ldr	r3, [pc, #456]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009772:	4a71      	ldr	r2, [pc, #452]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009778:	6453      	str	r3, [r2, #68]	; 0x44
 800977a:	4b6f      	ldr	r3, [pc, #444]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 800977c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	4b6b      	ldr	r3, [pc, #428]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	4a6a      	ldr	r2, [pc, #424]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009790:	f043 0304 	orr.w	r3, r3, #4
 8009794:	6313      	str	r3, [r2, #48]	; 0x30
 8009796:	4b68      	ldr	r3, [pc, #416]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	4b64      	ldr	r3, [pc, #400]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	4a63      	ldr	r2, [pc, #396]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 80097ac:	f043 0302 	orr.w	r3, r3, #2
 80097b0:	6313      	str	r3, [r2, #48]	; 0x30
 80097b2:	4b61      	ldr	r3, [pc, #388]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80097be:	2311      	movs	r3, #17
 80097c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097c2:	2303      	movs	r3, #3
 80097c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ca:	f107 031c 	add.w	r3, r7, #28
 80097ce:	4619      	mov	r1, r3
 80097d0:	485a      	ldr	r0, [pc, #360]	; (800993c <HAL_ADC_MspInit+0x1f4>)
 80097d2:	f001 fdf9 	bl	800b3c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80097d6:	2302      	movs	r3, #2
 80097d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097da:	2303      	movs	r3, #3
 80097dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097e2:	f107 031c 	add.w	r3, r7, #28
 80097e6:	4619      	mov	r1, r3
 80097e8:	4855      	ldr	r0, [pc, #340]	; (8009940 <HAL_ADC_MspInit+0x1f8>)
 80097ea:	f001 fded 	bl	800b3c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80097ee:	4b55      	ldr	r3, [pc, #340]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 80097f0:	4a55      	ldr	r2, [pc, #340]	; (8009948 <HAL_ADC_MspInit+0x200>)
 80097f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80097f4:	4b53      	ldr	r3, [pc, #332]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097fa:	4b52      	ldr	r3, [pc, #328]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009800:	4b50      	ldr	r3, [pc, #320]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009802:	2200      	movs	r2, #0
 8009804:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009806:	4b4f      	ldr	r3, [pc, #316]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800980c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800980e:	4b4d      	ldr	r3, [pc, #308]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009814:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009816:	4b4b      	ldr	r3, [pc, #300]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800981c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800981e:	4b49      	ldr	r3, [pc, #292]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009824:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009826:	4b47      	ldr	r3, [pc, #284]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009828:	2200      	movs	r2, #0
 800982a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800982c:	4b45      	ldr	r3, [pc, #276]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 800982e:	2200      	movs	r2, #0
 8009830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009832:	4844      	ldr	r0, [pc, #272]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009834:	f001 f948 	bl	800aac8 <HAL_DMA_Init>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800983e:	f7ff ff51 	bl	80096e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a3f      	ldr	r2, [pc, #252]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 8009846:	639a      	str	r2, [r3, #56]	; 0x38
 8009848:	4a3e      	ldr	r2, [pc, #248]	; (8009944 <HAL_ADC_MspInit+0x1fc>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800984e:	2200      	movs	r2, #0
 8009850:	2100      	movs	r1, #0
 8009852:	2012      	movs	r0, #18
 8009854:	f001 f901 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009858:	2012      	movs	r0, #18
 800985a:	f001 f91a 	bl	800aa92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800985e:	e065      	b.n	800992c <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a39      	ldr	r2, [pc, #228]	; (800994c <HAL_ADC_MspInit+0x204>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d160      	bne.n	800992c <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	4b32      	ldr	r3, [pc, #200]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009872:	4a31      	ldr	r2, [pc, #196]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009878:	6453      	str	r3, [r2, #68]	; 0x44
 800987a:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 800987c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009886:	2300      	movs	r3, #0
 8009888:	60bb      	str	r3, [r7, #8]
 800988a:	4b2b      	ldr	r3, [pc, #172]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009890:	f043 0304 	orr.w	r3, r3, #4
 8009894:	6313      	str	r3, [r2, #48]	; 0x30
 8009896:	4b28      	ldr	r3, [pc, #160]	; (8009938 <HAL_ADC_MspInit+0x1f0>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f003 0304 	and.w	r3, r3, #4
 800989e:	60bb      	str	r3, [r7, #8]
 80098a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80098a2:	2322      	movs	r3, #34	; 0x22
 80098a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098a6:	2303      	movs	r3, #3
 80098a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ae:	f107 031c 	add.w	r3, r7, #28
 80098b2:	4619      	mov	r1, r3
 80098b4:	4821      	ldr	r0, [pc, #132]	; (800993c <HAL_ADC_MspInit+0x1f4>)
 80098b6:	f001 fd87 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80098ba:	4b25      	ldr	r3, [pc, #148]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098bc:	4a25      	ldr	r2, [pc, #148]	; (8009954 <HAL_ADC_MspInit+0x20c>)
 80098be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80098c0:	4b23      	ldr	r3, [pc, #140]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098c6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098c8:	4b21      	ldr	r3, [pc, #132]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80098ce:	4b20      	ldr	r3, [pc, #128]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80098d4:	4b1e      	ldr	r3, [pc, #120]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098da:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80098dc:	4b1c      	ldr	r3, [pc, #112]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098e2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80098e4:	4b1a      	ldr	r3, [pc, #104]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80098ea:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80098ec:	4b18      	ldr	r3, [pc, #96]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098f2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80098f4:	4b16      	ldr	r3, [pc, #88]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <HAL_ADC_MspInit+0x208>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009900:	4813      	ldr	r0, [pc, #76]	; (8009950 <HAL_ADC_MspInit+0x208>)
 8009902:	f001 f8e1 	bl	800aac8 <HAL_DMA_Init>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800990c:	f7ff feea 	bl	80096e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a0f      	ldr	r2, [pc, #60]	; (8009950 <HAL_ADC_MspInit+0x208>)
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
 8009916:	4a0e      	ldr	r2, [pc, #56]	; (8009950 <HAL_ADC_MspInit+0x208>)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800991c:	2200      	movs	r2, #0
 800991e:	2100      	movs	r1, #0
 8009920:	2012      	movs	r0, #18
 8009922:	f001 f89a 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009926:	2012      	movs	r0, #18
 8009928:	f001 f8b3 	bl	800aa92 <HAL_NVIC_EnableIRQ>
}
 800992c:	bf00      	nop
 800992e:	3730      	adds	r7, #48	; 0x30
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40012000 	.word	0x40012000
 8009938:	40023800 	.word	0x40023800
 800993c:	40020800 	.word	0x40020800
 8009940:	40020400 	.word	0x40020400
 8009944:	20000814 	.word	0x20000814
 8009948:	40026410 	.word	0x40026410
 800994c:	40012100 	.word	0x40012100
 8009950:	20000cdc 	.word	0x20000cdc
 8009954:	40026440 	.word	0x40026440

08009958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009960:	f107 0314 	add.w	r3, r7, #20
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	605a      	str	r2, [r3, #4]
 800996a:	609a      	str	r2, [r3, #8]
 800996c:	60da      	str	r2, [r3, #12]
 800996e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a19      	ldr	r2, [pc, #100]	; (80099dc <HAL_SPI_MspInit+0x84>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d12c      	bne.n	80099d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800997a:	2300      	movs	r3, #0
 800997c:	613b      	str	r3, [r7, #16]
 800997e:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	4a17      	ldr	r2, [pc, #92]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 8009984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009988:	6413      	str	r3, [r2, #64]	; 0x40
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	4a10      	ldr	r2, [pc, #64]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 80099a0:	f043 0304 	orr.w	r3, r3, #4
 80099a4:	6313      	str	r3, [r2, #48]	; 0x30
 80099a6:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <HAL_SPI_MspInit+0x88>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80099b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80099b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b8:	2302      	movs	r3, #2
 80099ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c0:	2303      	movs	r3, #3
 80099c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80099c4:	2306      	movs	r3, #6
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099c8:	f107 0314 	add.w	r3, r7, #20
 80099cc:	4619      	mov	r1, r3
 80099ce:	4805      	ldr	r0, [pc, #20]	; (80099e4 <HAL_SPI_MspInit+0x8c>)
 80099d0:	f001 fcfa 	bl	800b3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80099d4:	bf00      	nop
 80099d6:	3728      	adds	r7, #40	; 0x28
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40003c00 	.word	0x40003c00
 80099e0:	40023800 	.word	0x40023800
 80099e4:	40020800 	.word	0x40020800

080099e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <HAL_TIM_Base_MspInit+0x110>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d116      	bne.n	8009a28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	4a3e      	ldr	r2, [pc, #248]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a04:	f043 0301 	orr.w	r3, r3, #1
 8009a08:	6453      	str	r3, [r2, #68]	; 0x44
 8009a0a:	4b3c      	ldr	r3, [pc, #240]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8009a16:	2200      	movs	r2, #0
 8009a18:	2101      	movs	r1, #1
 8009a1a:	2019      	movs	r0, #25
 8009a1c:	f001 f81d 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009a20:	2019      	movs	r0, #25
 8009a22:	f001 f836 	bl	800aa92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009a26:	e062      	b.n	8009aee <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d116      	bne.n	8009a60 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009a32:	2300      	movs	r3, #0
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	4b31      	ldr	r3, [pc, #196]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	4a30      	ldr	r2, [pc, #192]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a3c:	f043 0301 	orr.w	r3, r3, #1
 8009a40:	6413      	str	r3, [r2, #64]	; 0x40
 8009a42:	4b2e      	ldr	r3, [pc, #184]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	201c      	movs	r0, #28
 8009a54:	f001 f801 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009a58:	201c      	movs	r0, #28
 8009a5a:	f001 f81a 	bl	800aa92 <HAL_NVIC_EnableIRQ>
}
 8009a5e:	e046      	b.n	8009aee <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a26      	ldr	r2, [pc, #152]	; (8009b00 <HAL_TIM_Base_MspInit+0x118>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d116      	bne.n	8009a98 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	4b23      	ldr	r3, [pc, #140]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	4a22      	ldr	r2, [pc, #136]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	6413      	str	r3, [r2, #64]	; 0x40
 8009a7a:	4b20      	ldr	r3, [pc, #128]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8009a86:	2200      	movs	r2, #0
 8009a88:	2100      	movs	r1, #0
 8009a8a:	2032      	movs	r0, #50	; 0x32
 8009a8c:	f000 ffe5 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009a90:	2032      	movs	r0, #50	; 0x32
 8009a92:	f000 fffe 	bl	800aa92 <HAL_NVIC_EnableIRQ>
}
 8009a96:	e02a      	b.n	8009aee <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a19      	ldr	r2, [pc, #100]	; (8009b04 <HAL_TIM_Base_MspInit+0x11c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d125      	bne.n	8009aee <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	4a14      	ldr	r2, [pc, #80]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009aac:	f043 0302 	orr.w	r3, r3, #2
 8009ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ab2:	4b12      	ldr	r3, [pc, #72]	; (8009afc <HAL_TIM_Base_MspInit+0x114>)
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	60bb      	str	r3, [r7, #8]
 8009abc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2102      	movs	r1, #2
 8009ac2:	202c      	movs	r0, #44	; 0x2c
 8009ac4:	f000 ffc9 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009ac8:	202c      	movs	r0, #44	; 0x2c
 8009aca:	f000 ffe2 	bl	800aa92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	202d      	movs	r0, #45	; 0x2d
 8009ad4:	f000 ffc1 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8009ad8:	202d      	movs	r0, #45	; 0x2d
 8009ada:	f000 ffda 	bl	800aa92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	202e      	movs	r0, #46	; 0x2e
 8009ae4:	f000 ffb9 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8009ae8:	202e      	movs	r0, #46	; 0x2e
 8009aea:	f000 ffd2 	bl	800aa92 <HAL_NVIC_EnableIRQ>
}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40023800 	.word	0x40023800
 8009b00:	40000c00 	.word	0x40000c00
 8009b04:	40010400 	.word	0x40010400

08009b08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b10:	f107 031c 	add.w	r3, r7, #28
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	605a      	str	r2, [r3, #4]
 8009b1a:	609a      	str	r2, [r3, #8]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a3a      	ldr	r2, [pc, #232]	; (8009c10 <HAL_TIM_Encoder_MspInit+0x108>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d134      	bne.n	8009b94 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61bb      	str	r3, [r7, #24]
 8009b2e:	4b39      	ldr	r3, [pc, #228]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	4a38      	ldr	r2, [pc, #224]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	6413      	str	r3, [r2, #64]	; 0x40
 8009b3a:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	4b32      	ldr	r3, [pc, #200]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	4a31      	ldr	r2, [pc, #196]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6313      	str	r3, [r2, #48]	; 0x30
 8009b56:	4b2f      	ldr	r3, [pc, #188]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009b62:	23c0      	movs	r3, #192	; 0xc0
 8009b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b66:	2302      	movs	r3, #2
 8009b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009b72:	2302      	movs	r3, #2
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b76:	f107 031c 	add.w	r3, r7, #28
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4826      	ldr	r0, [pc, #152]	; (8009c18 <HAL_TIM_Encoder_MspInit+0x110>)
 8009b7e:	f001 fc23 	bl	800b3c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	201d      	movs	r0, #29
 8009b88:	f000 ff67 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009b8c:	201d      	movs	r0, #29
 8009b8e:	f000 ff80 	bl	800aa92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8009b92:	e038      	b.n	8009c06 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a20      	ldr	r2, [pc, #128]	; (8009c1c <HAL_TIM_Encoder_MspInit+0x114>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d133      	bne.n	8009c06 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	613b      	str	r3, [r7, #16]
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009ba8:	f043 0304 	orr.w	r3, r3, #4
 8009bac:	6413      	str	r3, [r2, #64]	; 0x40
 8009bae:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	4b15      	ldr	r3, [pc, #84]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	4a14      	ldr	r2, [pc, #80]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009bc4:	f043 0302 	orr.w	r3, r3, #2
 8009bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8009bca:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009bd6:	23c0      	movs	r3, #192	; 0xc0
 8009bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009be2:	2300      	movs	r3, #0
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009be6:	2302      	movs	r3, #2
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bea:	f107 031c 	add.w	r3, r7, #28
 8009bee:	4619      	mov	r1, r3
 8009bf0:	480b      	ldr	r0, [pc, #44]	; (8009c20 <HAL_TIM_Encoder_MspInit+0x118>)
 8009bf2:	f001 fbe9 	bl	800b3c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	201e      	movs	r0, #30
 8009bfc:	f000 ff2d 	bl	800aa5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009c00:	201e      	movs	r0, #30
 8009c02:	f000 ff46 	bl	800aa92 <HAL_NVIC_EnableIRQ>
}
 8009c06:	bf00      	nop
 8009c08:	3730      	adds	r7, #48	; 0x30
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40000400 	.word	0x40000400
 8009c14:	40023800 	.word	0x40023800
 8009c18:	40020000 	.word	0x40020000
 8009c1c:	40000800 	.word	0x40000800
 8009c20:	40020400 	.word	0x40020400

08009c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08c      	sub	sp, #48	; 0x30
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c2c:	f107 031c 	add.w	r3, r7, #28
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	605a      	str	r2, [r3, #4]
 8009c36:	609a      	str	r2, [r3, #8]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c44:	d11e      	bne.n	8009c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	4b43      	ldr	r3, [pc, #268]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	4a42      	ldr	r2, [pc, #264]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009c50:	f043 0301 	orr.w	r3, r3, #1
 8009c54:	6313      	str	r3, [r2, #48]	; 0x30
 8009c56:	4b40      	ldr	r3, [pc, #256]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	61bb      	str	r3, [r7, #24]
 8009c60:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c62:	2308      	movs	r3, #8
 8009c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c66:	2302      	movs	r3, #2
 8009c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009c72:	2301      	movs	r3, #1
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c76:	f107 031c 	add.w	r3, r7, #28
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4837      	ldr	r0, [pc, #220]	; (8009d5c <HAL_TIM_MspPostInit+0x138>)
 8009c7e:	f001 fba3 	bl	800b3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009c82:	e064      	b.n	8009d4e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a35      	ldr	r2, [pc, #212]	; (8009d60 <HAL_TIM_MspPostInit+0x13c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d11e      	bne.n	8009ccc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	4b31      	ldr	r3, [pc, #196]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c96:	4a30      	ldr	r2, [pc, #192]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c9e:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009caa:	2302      	movs	r3, #2
 8009cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cae:	2302      	movs	r3, #2
 8009cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cbe:	f107 031c 	add.w	r3, r7, #28
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4825      	ldr	r0, [pc, #148]	; (8009d5c <HAL_TIM_MspPostInit+0x138>)
 8009cc6:	f001 fb7f 	bl	800b3c8 <HAL_GPIO_Init>
}
 8009cca:	e040      	b.n	8009d4e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a24      	ldr	r2, [pc, #144]	; (8009d64 <HAL_TIM_MspPostInit+0x140>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d13b      	bne.n	8009d4e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	4b1f      	ldr	r3, [pc, #124]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cde:	4a1e      	ldr	r2, [pc, #120]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ce6:	4b1c      	ldr	r3, [pc, #112]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	4b18      	ldr	r3, [pc, #96]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	4a17      	ldr	r2, [pc, #92]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009cfc:	f043 0304 	orr.w	r3, r3, #4
 8009d00:	6313      	str	r3, [r2, #48]	; 0x30
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <HAL_TIM_MspPostInit+0x134>)
 8009d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009d0e:	2320      	movs	r3, #32
 8009d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d12:	2302      	movs	r3, #2
 8009d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d22:	f107 031c 	add.w	r3, r7, #28
 8009d26:	4619      	mov	r1, r3
 8009d28:	480c      	ldr	r0, [pc, #48]	; (8009d5c <HAL_TIM_MspPostInit+0x138>)
 8009d2a:	f001 fb4d 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009d2e:	2340      	movs	r3, #64	; 0x40
 8009d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d32:	2302      	movs	r3, #2
 8009d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d42:	f107 031c 	add.w	r3, r7, #28
 8009d46:	4619      	mov	r1, r3
 8009d48:	4807      	ldr	r0, [pc, #28]	; (8009d68 <HAL_TIM_MspPostInit+0x144>)
 8009d4a:	f001 fb3d 	bl	800b3c8 <HAL_GPIO_Init>
}
 8009d4e:	bf00      	nop
 8009d50:	3730      	adds	r7, #48	; 0x30
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	40023800 	.word	0x40023800
 8009d5c:	40020000 	.word	0x40020000
 8009d60:	40000c00 	.word	0x40000c00
 8009d64:	40010400 	.word	0x40010400
 8009d68:	40020800 	.word	0x40020800

08009d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	; 0x28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d74:	f107 0314 	add.w	r3, r7, #20
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	605a      	str	r2, [r3, #4]
 8009d7e:	609a      	str	r2, [r3, #8]
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a19      	ldr	r2, [pc, #100]	; (8009df0 <HAL_UART_MspInit+0x84>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d12c      	bne.n	8009de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009d8e:	2300      	movs	r3, #0
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009d98:	f043 0310 	orr.w	r3, r3, #16
 8009d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d9e:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	4a10      	ldr	r2, [pc, #64]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009db4:	f043 0301 	orr.w	r3, r3, #1
 8009db8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dba:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <HAL_UART_MspInit+0x88>)
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009dc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009dd8:	2307      	movs	r3, #7
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ddc:	f107 0314 	add.w	r3, r7, #20
 8009de0:	4619      	mov	r1, r3
 8009de2:	4805      	ldr	r0, [pc, #20]	; (8009df8 <HAL_UART_MspInit+0x8c>)
 8009de4:	f001 faf0 	bl	800b3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009de8:	bf00      	nop
 8009dea:	3728      	adds	r7, #40	; 0x28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40011000 	.word	0x40011000
 8009df4:	40023800 	.word	0x40023800
 8009df8:	40020000 	.word	0x40020000

08009dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e00:	e7fe      	b.n	8009e00 <NMI_Handler+0x4>

08009e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e02:	b480      	push	{r7}
 8009e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e06:	e7fe      	b.n	8009e06 <HardFault_Handler+0x4>

08009e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e0c:	e7fe      	b.n	8009e0c <MemManage_Handler+0x4>

08009e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e12:	e7fe      	b.n	8009e12 <BusFault_Handler+0x4>

08009e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e14:	b480      	push	{r7}
 8009e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e18:	e7fe      	b.n	8009e18 <UsageFault_Handler+0x4>

08009e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009e1e:	bf00      	nop
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e2c:	bf00      	nop
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009e36:	b480      	push	{r7}
 8009e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009e3a:	bf00      	nop
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e48:	f000 f942 	bl	800a0d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e4c:	bf00      	nop
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8009e54:	f001 f920 	bl	800b098 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8009e58:	bf00      	nop
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009e60:	4803      	ldr	r0, [pc, #12]	; (8009e70 <ADC_IRQHandler+0x14>)
 8009e62:	f000 f998 	bl	800a196 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8009e66:	4803      	ldr	r0, [pc, #12]	; (8009e74 <ADC_IRQHandler+0x18>)
 8009e68:	f000 f995 	bl	800a196 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009e6c:	bf00      	nop
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	200003a4 	.word	0x200003a4
 8009e74:	20000284 	.word	0x20000284

08009e78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009e7c:	4802      	ldr	r0, [pc, #8]	; (8009e88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009e7e:	f002 fa44 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009e82:	bf00      	nop
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000874 	.word	0x20000874

08009e8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009e90:	4802      	ldr	r0, [pc, #8]	; (8009e9c <TIM2_IRQHandler+0x10>)
 8009e92:	f002 fa3a 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009e96:	bf00      	nop
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000c9c 	.word	0x20000c9c

08009ea0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009ea4:	4802      	ldr	r0, [pc, #8]	; (8009eb0 <TIM3_IRQHandler+0x10>)
 8009ea6:	f002 fa30 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009eaa:	bf00      	nop
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	2000030c 	.word	0x2000030c

08009eb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009eb8:	4802      	ldr	r0, [pc, #8]	; (8009ec4 <TIM4_IRQHandler+0x10>)
 8009eba:	f002 fa26 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009ebe:	bf00      	nop
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000244 	.word	0x20000244

08009ec8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009ecc:	4802      	ldr	r0, [pc, #8]	; (8009ed8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8009ece:	f002 fa1c 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8009ed2:	bf00      	nop
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000204 	.word	0x20000204

08009edc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009ee0:	4802      	ldr	r0, [pc, #8]	; (8009eec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8009ee2:	f002 fa12 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8009ee6:	bf00      	nop
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20000204 	.word	0x20000204

08009ef0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009ef4:	4802      	ldr	r0, [pc, #8]	; (8009f00 <TIM8_CC_IRQHandler+0x10>)
 8009ef6:	f002 fa08 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8009efa:	bf00      	nop
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000204 	.word	0x20000204

08009f04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009f08:	4802      	ldr	r0, [pc, #8]	; (8009f14 <TIM5_IRQHandler+0x10>)
 8009f0a:	f002 f9fe 	bl	800c30a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009f0e:	bf00      	nop
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200002cc 	.word	0x200002cc

08009f18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009f1c:	4802      	ldr	r0, [pc, #8]	; (8009f28 <DMA2_Stream0_IRQHandler+0x10>)
 8009f1e:	f000 fe81 	bl	800ac24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009f22:	bf00      	nop
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000814 	.word	0x20000814

08009f2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009f30:	4802      	ldr	r0, [pc, #8]	; (8009f3c <DMA2_Stream2_IRQHandler+0x10>)
 8009f32:	f000 fe77 	bl	800ac24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009f36:	bf00      	nop
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000cdc 	.word	0x20000cdc

08009f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009f48:	4a14      	ldr	r2, [pc, #80]	; (8009f9c <_sbrk+0x5c>)
 8009f4a:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <_sbrk+0x60>)
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009f54:	4b13      	ldr	r3, [pc, #76]	; (8009fa4 <_sbrk+0x64>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009f5c:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <_sbrk+0x64>)
 8009f5e:	4a12      	ldr	r2, [pc, #72]	; (8009fa8 <_sbrk+0x68>)
 8009f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009f62:	4b10      	ldr	r3, [pc, #64]	; (8009fa4 <_sbrk+0x64>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4413      	add	r3, r2
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d207      	bcs.n	8009f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009f70:	f003 fc7a 	bl	800d868 <__errno>
 8009f74:	4602      	mov	r2, r0
 8009f76:	230c      	movs	r3, #12
 8009f78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8009f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7e:	e009      	b.n	8009f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <_sbrk+0x64>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009f86:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <_sbrk+0x64>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	4a05      	ldr	r2, [pc, #20]	; (8009fa4 <_sbrk+0x64>)
 8009f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009f92:	68fb      	ldr	r3, [r7, #12]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20020000 	.word	0x20020000
 8009fa0:	00000400 	.word	0x00000400
 8009fa4:	200001f8 	.word	0x200001f8
 8009fa8:	20000d68 	.word	0x20000d68

08009fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009fb0:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <SystemInit+0x28>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	4a07      	ldr	r2, [pc, #28]	; (8009fd4 <SystemInit+0x28>)
 8009fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <SystemInit+0x28>)
 8009fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8009fc8:	bf00      	nop
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	e000ed00 	.word	0xe000ed00

08009fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009fde:	e003      	b.n	8009fe8 <LoopCopyDataInit>

08009fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009fe6:	3104      	adds	r1, #4

08009fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009fe8:	480b      	ldr	r0, [pc, #44]	; (800a018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ff0:	d3f6      	bcc.n	8009fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8009ff2:	4a0b      	ldr	r2, [pc, #44]	; (800a020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009ff4:	e002      	b.n	8009ffc <LoopFillZerobss>

08009ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ff8:	f842 3b04 	str.w	r3, [r2], #4

08009ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ffc:	4b09      	ldr	r3, [pc, #36]	; (800a024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a000:	d3f9      	bcc.n	8009ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a002:	f7ff ffd3 	bl	8009fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a006:	f003 fc35 	bl	800d874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a00a:	f7fe fe35 	bl	8008c78 <main>
  bx  lr    
 800a00e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a014:	0800f588 	.word	0x0800f588
  ldr  r0, =_sdata
 800a018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a01c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800a020:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800a024:	20000d68 	.word	0x20000d68

0800a028 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a028:	e7fe      	b.n	800a028 <CAN1_RX0_IRQHandler>
	...

0800a02c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a030:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <HAL_Init+0x40>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <HAL_Init+0x40>)
 800a036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a03a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <HAL_Init+0x40>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <HAL_Init+0x40>)
 800a042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a048:	4b08      	ldr	r3, [pc, #32]	; (800a06c <HAL_Init+0x40>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a07      	ldr	r2, [pc, #28]	; (800a06c <HAL_Init+0x40>)
 800a04e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a054:	2003      	movs	r0, #3
 800a056:	f000 fcf5 	bl	800aa44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a05a:	2000      	movs	r0, #0
 800a05c:	f000 f808 	bl	800a070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a060:	f7ff fb44 	bl	80096ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40023c00 	.word	0x40023c00

0800a070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a078:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <HAL_InitTick+0x54>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <HAL_InitTick+0x58>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	4619      	mov	r1, r3
 800a082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a086:	fbb3 f3f1 	udiv	r3, r3, r1
 800a08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fd0d 	bl	800aaae <HAL_SYSTICK_Config>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e00e      	b.n	800a0bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b0f      	cmp	r3, #15
 800a0a2:	d80a      	bhi.n	800a0ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ac:	f000 fcd5 	bl	800aa5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a0b0:	4a06      	ldr	r2, [pc, #24]	; (800a0cc <HAL_InitTick+0x5c>)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e000      	b.n	800a0bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000000 	.word	0x20000000
 800a0c8:	20000008 	.word	0x20000008
 800a0cc:	20000004 	.word	0x20000004

0800a0d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <HAL_IncTick+0x20>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <HAL_IncTick+0x24>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4413      	add	r3, r2
 800a0e0:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <HAL_IncTick+0x24>)
 800a0e2:	6013      	str	r3, [r2, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000008 	.word	0x20000008
 800a0f4:	20000d40 	.word	0x20000d40

0800a0f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0
  return uwTick;
 800a0fc:	4b03      	ldr	r3, [pc, #12]	; (800a10c <HAL_GetTick+0x14>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
}
 800a100:	4618      	mov	r0, r3
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000d40 	.word	0x20000d40

0800a110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e033      	b.n	800a18e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d109      	bne.n	800a142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fb0a 	bl	8009748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d118      	bne.n	800a180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a156:	f023 0302 	bic.w	r3, r3, #2
 800a15a:	f043 0202 	orr.w	r2, r3, #2
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa98 	bl	800a698 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	f043 0201 	orr.w	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	641a      	str	r2, [r3, #64]	; 0x40
 800a17e:	e001      	b.n	800a184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2301      	moveq	r3, #1
 800a1b6:	2300      	movne	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f003 0320 	and.w	r3, r3, #32
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d049      	beq.n	800a26c <HAL_ADC_IRQHandler+0xd6>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d046      	beq.n	800a26c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	f003 0310 	and.w	r3, r3, #16
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d12b      	bne.n	800a25c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d127      	bne.n	800a25c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a216:	2b00      	cmp	r3, #0
 800a218:	d006      	beq.n	800a228 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a224:	2b00      	cmp	r3, #0
 800a226:	d119      	bne.n	800a25c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0220 	bic.w	r2, r2, #32
 800a236:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	f043 0201 	orr.w	r2, r3, #1
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f8db 	bl	800a418 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f06f 0212 	mvn.w	r2, #18
 800a26a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b04      	cmp	r3, #4
 800a278:	bf0c      	ite	eq
 800a27a:	2301      	moveq	r3, #1
 800a27c:	2300      	movne	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28c:	2b80      	cmp	r3, #128	; 0x80
 800a28e:	bf0c      	ite	eq
 800a290:	2301      	moveq	r3, #1
 800a292:	2300      	movne	r3, #0
 800a294:	b2db      	uxtb	r3, r3
 800a296:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d057      	beq.n	800a34e <HAL_ADC_IRQHandler+0x1b8>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d054      	beq.n	800a34e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d105      	bne.n	800a2bc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d139      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d006      	beq.n	800a2e6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d12b      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d124      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d11d      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a306:	2b00      	cmp	r3, #0
 800a308:	d119      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a318:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d105      	bne.n	800a33e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f043 0201 	orr.w	r2, r3, #1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 faa6 	bl	800a890 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f06f 020c 	mvn.w	r2, #12
 800a34c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b01      	cmp	r3, #1
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2300      	movne	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b40      	cmp	r3, #64	; 0x40
 800a370:	bf0c      	ite	eq
 800a372:	2301      	moveq	r3, #1
 800a374:	2300      	movne	r3, #0
 800a376:	b2db      	uxtb	r3, r3
 800a378:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <HAL_ADC_IRQHandler+0x21a>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d014      	beq.n	800a3b0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b01      	cmp	r3, #1
 800a392:	d10d      	bne.n	800a3b0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f843 	bl	800a42c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f06f 0201 	mvn.w	r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	bf0c      	ite	eq
 800a3be:	2301      	moveq	r3, #1
 800a3c0:	2300      	movne	r3, #0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3d4:	bf0c      	ite	eq
 800a3d6:	2301      	moveq	r3, #1
 800a3d8:	2300      	movne	r3, #0
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d015      	beq.n	800a410 <HAL_ADC_IRQHandler+0x27a>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ee:	f043 0202 	orr.w	r2, r3, #2
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f06f 0220 	mvn.w	r2, #32
 800a3fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f81d 	bl	800a440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f06f 0220 	mvn.w	r2, #32
 800a40e:	601a      	str	r2, [r3, #0]
  }
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_ADC_ConfigChannel+0x1c>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e105      	b.n	800a67c <HAL_ADC_ConfigChannel+0x228>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b09      	cmp	r3, #9
 800a47e:	d925      	bls.n	800a4cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68d9      	ldr	r1, [r3, #12]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	4613      	mov	r3, r2
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	4413      	add	r3, r2
 800a494:	3b1e      	subs	r3, #30
 800a496:	2207      	movs	r2, #7
 800a498:	fa02 f303 	lsl.w	r3, r2, r3
 800a49c:	43da      	mvns	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	400a      	ands	r2, r1
 800a4a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68d9      	ldr	r1, [r3, #12]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4403      	add	r3, r0
 800a4be:	3b1e      	subs	r3, #30
 800a4c0:	409a      	lsls	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e022      	b.n	800a512 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6919      	ldr	r1, [r3, #16]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4613      	mov	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4413      	add	r3, r2
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43da      	mvns	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	400a      	ands	r2, r1
 800a4ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6919      	ldr	r1, [r3, #16]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4618      	mov	r0, r3
 800a502:	4603      	mov	r3, r0
 800a504:	005b      	lsls	r3, r3, #1
 800a506:	4403      	add	r3, r0
 800a508:	409a      	lsls	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2b06      	cmp	r3, #6
 800a518:	d824      	bhi.n	800a564 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	3b05      	subs	r3, #5
 800a52c:	221f      	movs	r2, #31
 800a52e:	fa02 f303 	lsl.w	r3, r2, r3
 800a532:	43da      	mvns	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	400a      	ands	r2, r1
 800a53a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	4618      	mov	r0, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	3b05      	subs	r3, #5
 800a556:	fa00 f203 	lsl.w	r2, r0, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	635a      	str	r2, [r3, #52]	; 0x34
 800a562:	e04c      	b.n	800a5fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	2b0c      	cmp	r3, #12
 800a56a:	d824      	bhi.n	800a5b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	3b23      	subs	r3, #35	; 0x23
 800a57e:	221f      	movs	r2, #31
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	43da      	mvns	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	400a      	ands	r2, r1
 800a58c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4618      	mov	r0, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	3b23      	subs	r3, #35	; 0x23
 800a5a8:	fa00 f203 	lsl.w	r2, r0, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	631a      	str	r2, [r3, #48]	; 0x30
 800a5b4:	e023      	b.n	800a5fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3b41      	subs	r3, #65	; 0x41
 800a5c8:	221f      	movs	r2, #31
 800a5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ce:	43da      	mvns	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	400a      	ands	r2, r1
 800a5d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3b41      	subs	r3, #65	; 0x41
 800a5f2:	fa00 f203 	lsl.w	r2, r0, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a5fe:	4b22      	ldr	r3, [pc, #136]	; (800a688 <HAL_ADC_ConfigChannel+0x234>)
 800a600:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a21      	ldr	r2, [pc, #132]	; (800a68c <HAL_ADC_ConfigChannel+0x238>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d109      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x1cc>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b12      	cmp	r3, #18
 800a612:	d105      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a19      	ldr	r2, [pc, #100]	; (800a68c <HAL_ADC_ConfigChannel+0x238>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d123      	bne.n	800a672 <HAL_ADC_ConfigChannel+0x21e>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b10      	cmp	r3, #16
 800a630:	d003      	beq.n	800a63a <HAL_ADC_ConfigChannel+0x1e6>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b11      	cmp	r3, #17
 800a638:	d11b      	bne.n	800a672 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b10      	cmp	r3, #16
 800a64c:	d111      	bne.n	800a672 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a64e:	4b10      	ldr	r3, [pc, #64]	; (800a690 <HAL_ADC_ConfigChannel+0x23c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a10      	ldr	r2, [pc, #64]	; (800a694 <HAL_ADC_ConfigChannel+0x240>)
 800a654:	fba2 2303 	umull	r2, r3, r2, r3
 800a658:	0c9a      	lsrs	r2, r3, #18
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a664:	e002      	b.n	800a66c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	3b01      	subs	r3, #1
 800a66a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f9      	bne.n	800a666 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	40012300 	.word	0x40012300
 800a68c:	40012000 	.word	0x40012000
 800a690:	20000000 	.word	0x20000000
 800a694:	431bde83 	.word	0x431bde83

0800a698 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a6a0:	4b79      	ldr	r3, [pc, #484]	; (800a888 <ADC_Init+0x1f0>)
 800a6a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6859      	ldr	r1, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	021a      	lsls	r2, r3, #8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a6f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6859      	ldr	r1, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6899      	ldr	r1, [r3, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	4a58      	ldr	r2, [pc, #352]	; (800a88c <ADC_Init+0x1f4>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d022      	beq.n	800a776 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689a      	ldr	r2, [r3, #8]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a73e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6899      	ldr	r1, [r3, #8]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6899      	ldr	r1, [r3, #8]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	609a      	str	r2, [r3, #8]
 800a774:	e00f      	b.n	800a796 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	689a      	ldr	r2, [r3, #8]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a794:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0202 	bic.w	r2, r2, #2
 800a7a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6899      	ldr	r1, [r3, #8]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7e1b      	ldrb	r3, [r3, #24]
 800a7b0:	005a      	lsls	r2, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01b      	beq.n	800a7fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a7e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6859      	ldr	r1, [r3, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	035a      	lsls	r2, r3, #13
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	605a      	str	r2, [r3, #4]
 800a7fa:	e007      	b.n	800a80c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a80a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a81a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	3b01      	subs	r3, #1
 800a828:	051a      	lsls	r2, r3, #20
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6899      	ldr	r1, [r3, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a84e:	025a      	lsls	r2, r3, #9
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6899      	ldr	r1, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	029a      	lsls	r2, r3, #10
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	609a      	str	r2, [r3, #8]
}
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	40012300 	.word	0x40012300
 800a88c:	0f000001 	.word	0x0f000001

0800a890 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <__NVIC_SetPriorityGrouping+0x44>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a8cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a8d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a8d6:	4a04      	ldr	r2, [pc, #16]	; (800a8e8 <__NVIC_SetPriorityGrouping+0x44>)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	60d3      	str	r3, [r2, #12]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	e000ed00 	.word	0xe000ed00

0800a8ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a8f0:	4b04      	ldr	r3, [pc, #16]	; (800a904 <__NVIC_GetPriorityGrouping+0x18>)
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	0a1b      	lsrs	r3, r3, #8
 800a8f6:	f003 0307 	and.w	r3, r3, #7
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	e000ed00 	.word	0xe000ed00

0800a908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a916:	2b00      	cmp	r3, #0
 800a918:	db0b      	blt.n	800a932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	f003 021f 	and.w	r2, r3, #31
 800a920:	4907      	ldr	r1, [pc, #28]	; (800a940 <__NVIC_EnableIRQ+0x38>)
 800a922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	2001      	movs	r0, #1
 800a92a:	fa00 f202 	lsl.w	r2, r0, r2
 800a92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	e000e100 	.word	0xe000e100

0800a944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a954:	2b00      	cmp	r3, #0
 800a956:	db0a      	blt.n	800a96e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	490c      	ldr	r1, [pc, #48]	; (800a990 <__NVIC_SetPriority+0x4c>)
 800a95e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a962:	0112      	lsls	r2, r2, #4
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	440b      	add	r3, r1
 800a968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a96c:	e00a      	b.n	800a984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	b2da      	uxtb	r2, r3
 800a972:	4908      	ldr	r1, [pc, #32]	; (800a994 <__NVIC_SetPriority+0x50>)
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	f003 030f 	and.w	r3, r3, #15
 800a97a:	3b04      	subs	r3, #4
 800a97c:	0112      	lsls	r2, r2, #4
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	440b      	add	r3, r1
 800a982:	761a      	strb	r2, [r3, #24]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	e000e100 	.word	0xe000e100
 800a994:	e000ed00 	.word	0xe000ed00

0800a998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a998:	b480      	push	{r7}
 800a99a:	b089      	sub	sp, #36	; 0x24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f1c3 0307 	rsb	r3, r3, #7
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	bf28      	it	cs
 800a9b6:	2304      	movcs	r3, #4
 800a9b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	2b06      	cmp	r3, #6
 800a9c0:	d902      	bls.n	800a9c8 <NVIC_EncodePriority+0x30>
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	3b03      	subs	r3, #3
 800a9c6:	e000      	b.n	800a9ca <NVIC_EncodePriority+0x32>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d6:	43da      	mvns	r2, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	401a      	ands	r2, r3
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ea:	43d9      	mvns	r1, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9f0:	4313      	orrs	r3, r2
         );
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3724      	adds	r7, #36	; 0x24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
	...

0800aa00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa10:	d301      	bcc.n	800aa16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aa12:	2301      	movs	r3, #1
 800aa14:	e00f      	b.n	800aa36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aa16:	4a0a      	ldr	r2, [pc, #40]	; (800aa40 <SysTick_Config+0x40>)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aa1e:	210f      	movs	r1, #15
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295
 800aa24:	f7ff ff8e 	bl	800a944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <SysTick_Config+0x40>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa2e:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <SysTick_Config+0x40>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000e010 	.word	0xe000e010

0800aa44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff ff29 	bl	800a8a4 <__NVIC_SetPriorityGrouping>
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	4603      	mov	r3, r0
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aa6c:	f7ff ff3e 	bl	800a8ec <__NVIC_GetPriorityGrouping>
 800aa70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	6978      	ldr	r0, [r7, #20]
 800aa78:	f7ff ff8e 	bl	800a998 <NVIC_EncodePriority>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa82:	4611      	mov	r1, r2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff ff5d 	bl	800a944 <__NVIC_SetPriority>
}
 800aa8a:	bf00      	nop
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	4603      	mov	r3, r0
 800aa9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff ff31 	bl	800a908 <__NVIC_EnableIRQ>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff ffa2 	bl	800aa00 <SysTick_Config>
 800aabc:	4603      	mov	r3, r0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aad4:	f7ff fb10 	bl	800a0f8 <HAL_GetTick>
 800aad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e099      	b.n	800ac18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0201 	bic.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab04:	e00f      	b.n	800ab26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ab06:	f7ff faf7 	bl	800a0f8 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b05      	cmp	r3, #5
 800ab12:	d908      	bls.n	800ab26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2203      	movs	r2, #3
 800ab1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e078      	b.n	800ac18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e8      	bne.n	800ab06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4b38      	ldr	r3, [pc, #224]	; (800ac20 <HAL_DMA_Init+0x158>)
 800ab40:	4013      	ands	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ab52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d107      	bne.n	800ab90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f023 0307 	bic.w	r3, r3, #7
 800aba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d117      	bne.n	800abea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00e      	beq.n	800abea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f9e9 	bl	800afa4 <DMA_CheckFifoParam>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d008      	beq.n	800abea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2240      	movs	r2, #64	; 0x40
 800abdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800abe6:	2301      	movs	r3, #1
 800abe8:	e016      	b.n	800ac18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f9a0 	bl	800af38 <DMA_CalcBaseAndBitshift>
 800abf8:	4603      	mov	r3, r0
 800abfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac00:	223f      	movs	r2, #63	; 0x3f
 800ac02:	409a      	lsls	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	f010803f 	.word	0xf010803f

0800ac24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac30:	4b92      	ldr	r3, [pc, #584]	; (800ae7c <HAL_DMA_IRQHandler+0x258>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a92      	ldr	r2, [pc, #584]	; (800ae80 <HAL_DMA_IRQHandler+0x25c>)
 800ac36:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3a:	0a9b      	lsrs	r3, r3, #10
 800ac3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	2208      	movs	r2, #8
 800ac50:	409a      	lsls	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4013      	ands	r3, r2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d01a      	beq.n	800ac90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d013      	beq.n	800ac90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0204 	bic.w	r2, r2, #4
 800ac76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7c:	2208      	movs	r2, #8
 800ac7e:	409a      	lsls	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac88:	f043 0201 	orr.w	r2, r3, #1
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac94:	2201      	movs	r2, #1
 800ac96:	409a      	lsls	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d012      	beq.n	800acc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00b      	beq.n	800acc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	2201      	movs	r2, #1
 800acb4:	409a      	lsls	r2, r3
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	f043 0202 	orr.w	r2, r3, #2
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acca:	2204      	movs	r2, #4
 800accc:	409a      	lsls	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4013      	ands	r3, r2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d012      	beq.n	800acfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0302 	and.w	r3, r3, #2
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace8:	2204      	movs	r2, #4
 800acea:	409a      	lsls	r2, r3
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf4:	f043 0204 	orr.w	r2, r3, #4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad00:	2210      	movs	r2, #16
 800ad02:	409a      	lsls	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4013      	ands	r3, r2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d043      	beq.n	800ad94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d03c      	beq.n	800ad94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad1e:	2210      	movs	r2, #16
 800ad20:	409a      	lsls	r2, r3
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d018      	beq.n	800ad66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d108      	bne.n	800ad54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d024      	beq.n	800ad94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
 800ad52:	e01f      	b.n	800ad94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01b      	beq.n	800ad94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	4798      	blx	r3
 800ad64:	e016      	b.n	800ad94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d107      	bne.n	800ad84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0208 	bic.w	r2, r2, #8
 800ad82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad98:	2220      	movs	r2, #32
 800ad9a:	409a      	lsls	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4013      	ands	r3, r2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 808e 	beq.w	800aec2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8086 	beq.w	800aec2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adba:	2220      	movs	r2, #32
 800adbc:	409a      	lsls	r2, r3
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b05      	cmp	r3, #5
 800adcc:	d136      	bne.n	800ae3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0216 	bic.w	r2, r2, #22
 800addc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695a      	ldr	r2, [r3, #20]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d103      	bne.n	800adfe <HAL_DMA_IRQHandler+0x1da>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 0208 	bic.w	r2, r2, #8
 800ae0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae12:	223f      	movs	r2, #63	; 0x3f
 800ae14:	409a      	lsls	r2, r3
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d07d      	beq.n	800af2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	4798      	blx	r3
        }
        return;
 800ae3a:	e078      	b.n	800af2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01c      	beq.n	800ae84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d108      	bne.n	800ae6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d030      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
 800ae68:	e02b      	b.n	800aec2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d027      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
 800ae7a:	e022      	b.n	800aec2 <HAL_DMA_IRQHandler+0x29e>
 800ae7c:	20000000 	.word	0x20000000
 800ae80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10f      	bne.n	800aeb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0210 	bic.w	r2, r2, #16
 800aea0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d032      	beq.n	800af30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d022      	beq.n	800af1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2205      	movs	r2, #5
 800aeda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0201 	bic.w	r2, r2, #1
 800aeec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3301      	adds	r3, #1
 800aef2:	60bb      	str	r3, [r7, #8]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d307      	bcc.n	800af0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1f2      	bne.n	800aeee <HAL_DMA_IRQHandler+0x2ca>
 800af08:	e000      	b.n	800af0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800af0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	4798      	blx	r3
 800af2c:	e000      	b.n	800af30 <HAL_DMA_IRQHandler+0x30c>
        return;
 800af2e:	bf00      	nop
    }
  }
}
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop

0800af38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	b2db      	uxtb	r3, r3
 800af46:	3b10      	subs	r3, #16
 800af48:	4a14      	ldr	r2, [pc, #80]	; (800af9c <DMA_CalcBaseAndBitshift+0x64>)
 800af4a:	fba2 2303 	umull	r2, r3, r2, r3
 800af4e:	091b      	lsrs	r3, r3, #4
 800af50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af52:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <DMA_CalcBaseAndBitshift+0x68>)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b03      	cmp	r3, #3
 800af64:	d909      	bls.n	800af7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	1d1a      	adds	r2, r3, #4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	659a      	str	r2, [r3, #88]	; 0x58
 800af78:	e007      	b.n	800af8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	aaaaaaab 	.word	0xaaaaaaab
 800afa0:	0800f348 	.word	0x0800f348

0800afa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d11f      	bne.n	800affe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d855      	bhi.n	800b070 <DMA_CheckFifoParam+0xcc>
 800afc4:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <DMA_CheckFifoParam+0x28>)
 800afc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afca:	bf00      	nop
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afef 	.word	0x0800afef
 800afd4:	0800afdd 	.word	0x0800afdd
 800afd8:	0800b071 	.word	0x0800b071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d045      	beq.n	800b074 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afec:	e042      	b.n	800b074 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aff6:	d13f      	bne.n	800b078 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800affc:	e03c      	b.n	800b078 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b006:	d121      	bne.n	800b04c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d836      	bhi.n	800b07c <DMA_CheckFifoParam+0xd8>
 800b00e:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <DMA_CheckFifoParam+0x70>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b025 	.word	0x0800b025
 800b018:	0800b02b 	.word	0x0800b02b
 800b01c:	0800b025 	.word	0x0800b025
 800b020:	0800b03d 	.word	0x0800b03d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	73fb      	strb	r3, [r7, #15]
      break;
 800b028:	e02f      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d024      	beq.n	800b080 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b03a:	e021      	b.n	800b080 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b044:	d11e      	bne.n	800b084 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b04a:	e01b      	b.n	800b084 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d902      	bls.n	800b058 <DMA_CheckFifoParam+0xb4>
 800b052:	2b03      	cmp	r3, #3
 800b054:	d003      	beq.n	800b05e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b056:	e018      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
      break;
 800b05c:	e015      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00e      	beq.n	800b088 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]
      break;
 800b06e:	e00b      	b.n	800b088 <DMA_CheckFifoParam+0xe4>
      break;
 800b070:	bf00      	nop
 800b072:	e00a      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;
 800b074:	bf00      	nop
 800b076:	e008      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;
 800b078:	bf00      	nop
 800b07a:	e006      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;
 800b07c:	bf00      	nop
 800b07e:	e004      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;
 800b080:	bf00      	nop
 800b082:	e002      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;   
 800b084:	bf00      	nop
 800b086:	e000      	b.n	800b08a <DMA_CheckFifoParam+0xe6>
      break;
 800b088:	bf00      	nop
    }
  } 
  
  return status; 
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800b0a2:	4b4b      	ldr	r3, [pc, #300]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d020      	beq.n	800b0f0 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800b0ae:	4b49      	ldr	r3, [pc, #292]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d107      	bne.n	800b0c8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800b0b8:	4b46      	ldr	r3, [pc, #280]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800b0be:	4b45      	ldr	r3, [pc, #276]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	60da      	str	r2, [r3, #12]
 800b0c6:	e00b      	b.n	800b0e0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800b0c8:	4b42      	ldr	r3, [pc, #264]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d103      	bne.n	800b0da <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800b0d2:	4b40      	ldr	r3, [pc, #256]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	e002      	b.n	800b0e0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800b0da:	4b3e      	ldr	r3, [pc, #248]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800b0e0:	f000 f88e 	bl	800b200 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f881 	bl	800b1ec <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800b0ea:	4b3a      	ldr	r3, [pc, #232]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b0f0:	4b37      	ldr	r3, [pc, #220]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d04a      	beq.n	800b192 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b0fc:	4b34      	ldr	r3, [pc, #208]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800b102:	4b34      	ldr	r3, [pc, #208]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d12d      	bne.n	800b168 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800b10c:	4b31      	ldr	r3, [pc, #196]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	3b01      	subs	r3, #1
 800b112:	4a30      	ldr	r2, [pc, #192]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b114:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800b116:	4b2f      	ldr	r3, [pc, #188]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d015      	beq.n	800b14a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800b11e:	4b2d      	ldr	r3, [pc, #180]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f857 	bl	800b1d8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800b12a:	4b2a      	ldr	r3, [pc, #168]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	3301      	adds	r3, #1
 800b130:	4a28      	ldr	r2, [pc, #160]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b132:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800b134:	4b27      	ldr	r3, [pc, #156]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800b13a:	4b26      	ldr	r3, [pc, #152]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b13c:	7a1b      	ldrb	r3, [r3, #8]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f8b2 	bl	800b2ac <FLASH_Erase_Sector>
 800b148:	e023      	b.n	800b192 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800b156:	4b1f      	ldr	r3, [pc, #124]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800b15c:	f000 f8ee 	bl	800b33c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f839 	bl	800b1d8 <HAL_FLASH_EndOfOperationCallback>
 800b166:	e014      	b.n	800b192 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d107      	bne.n	800b182 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800b172:	f000 f8e3 	bl	800b33c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800b176:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 f82c 	bl	800b1d8 <HAL_FLASH_EndOfOperationCallback>
 800b180:	e004      	b.n	800b18c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800b182:	4b14      	ldr	r3, [pc, #80]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f826 	bl	800b1d8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800b18c:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800b192:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d114      	bne.n	800b1c6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	4a0b      	ldr	r2, [pc, #44]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b1a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b1a6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800b1a8:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	4a08      	ldr	r2, [pc, #32]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b1ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1b2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	4a05      	ldr	r2, [pc, #20]	; (800b1d0 <HAL_FLASH_IRQHandler+0x138>)
 800b1ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b1be:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <HAL_FLASH_IRQHandler+0x13c>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	761a      	strb	r2, [r3, #24]
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	40023c00 	.word	0x40023c00
 800b1d4:	20000d44 	.word	0x20000d44

0800b1d8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800b200:	b480      	push	{r7}
 800b202:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800b204:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 0310 	and.w	r3, r3, #16
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d008      	beq.n	800b222 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b210:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	f043 0310 	orr.w	r3, r3, #16
 800b218:	4a23      	ldr	r2, [pc, #140]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b21a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800b21c:	4b21      	ldr	r3, [pc, #132]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b21e:	2210      	movs	r2, #16
 800b220:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b222:	4b20      	ldr	r3, [pc, #128]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d008      	beq.n	800b240 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b22e:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f043 0308 	orr.w	r3, r3, #8
 800b236:	4a1c      	ldr	r2, [pc, #112]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b238:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800b23a:	4b1a      	ldr	r3, [pc, #104]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b23c:	2220      	movs	r2, #32
 800b23e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b240:	4b18      	ldr	r3, [pc, #96]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d008      	beq.n	800b25e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b24c:	4b16      	ldr	r3, [pc, #88]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f043 0304 	orr.w	r3, r3, #4
 800b254:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b256:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800b258:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b25a:	2240      	movs	r2, #64	; 0x40
 800b25c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b266:	2b00      	cmp	r3, #0
 800b268:	d008      	beq.n	800b27c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800b26a:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f043 0302 	orr.w	r3, r3, #2
 800b272:	4a0d      	ldr	r2, [pc, #52]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b274:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b278:	2280      	movs	r2, #128	; 0x80
 800b27a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	f043 0320 	orr.w	r3, r3, #32
 800b290:	4a05      	ldr	r2, [pc, #20]	; (800b2a8 <FLASH_SetErrorCode+0xa8>)
 800b292:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800b294:	4b03      	ldr	r3, [pc, #12]	; (800b2a4 <FLASH_SetErrorCode+0xa4>)
 800b296:	2202      	movs	r2, #2
 800b298:	60da      	str	r2, [r3, #12]
  }
}
 800b29a:	bf00      	nop
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	40023c00 	.word	0x40023c00
 800b2a8:	20000d44 	.word	0x20000d44

0800b2ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d102      	bne.n	800b2c8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	e010      	b.n	800b2ea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d103      	bne.n	800b2d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b2ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e009      	b.n	800b2ea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d103      	bne.n	800b2e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	e002      	b.n	800b2ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b2e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b2e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b2ea:	4b13      	ldr	r3, [pc, #76]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	4a12      	ldr	r2, [pc, #72]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800b2f6:	4b10      	ldr	r3, [pc, #64]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b2f8:	691a      	ldr	r2, [r3, #16]
 800b2fa:	490f      	ldr	r1, [pc, #60]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b302:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	4a0c      	ldr	r2, [pc, #48]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b308:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b30c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b30e:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	4313      	orrs	r3, r2
 800b318:	4a07      	ldr	r2, [pc, #28]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b31a:	f043 0302 	orr.w	r3, r3, #2
 800b31e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b320:	4b05      	ldr	r3, [pc, #20]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	4a04      	ldr	r2, [pc, #16]	; (800b338 <FLASH_Erase_Sector+0x8c>)
 800b326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b32a:	6113      	str	r3, [r2, #16]
}
 800b32c:	bf00      	nop
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	40023c00 	.word	0x40023c00

0800b33c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800b340:	4b20      	ldr	r3, [pc, #128]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d017      	beq.n	800b37c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b34c:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b352:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b356:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b358:	4b1a      	ldr	r3, [pc, #104]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a19      	ldr	r2, [pc, #100]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b35e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	4b17      	ldr	r3, [pc, #92]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b36a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b36e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b370:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b37a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b37c:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b384:	2b00      	cmp	r3, #0
 800b386:	d017      	beq.n	800b3b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a0d      	ldr	r2, [pc, #52]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b38e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b392:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b394:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a0a      	ldr	r2, [pc, #40]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b39a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a07      	ldr	r2, [pc, #28]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b3a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a04      	ldr	r2, [pc, #16]	; (800b3c4 <FLASH_FlushCaches+0x88>)
 800b3b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3b6:	6013      	str	r3, [r2, #0]
  }
}
 800b3b8:	bf00      	nop
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	40023c00 	.word	0x40023c00

0800b3c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b089      	sub	sp, #36	; 0x24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3de:	2300      	movs	r3, #0
 800b3e0:	61fb      	str	r3, [r7, #28]
 800b3e2:	e16b      	b.n	800b6bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	f040 815a 	bne.w	800b6b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d00b      	beq.n	800b422 <HAL_GPIO_Init+0x5a>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d007      	beq.n	800b422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b416:	2b11      	cmp	r3, #17
 800b418:	d003      	beq.n	800b422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2b12      	cmp	r3, #18
 800b420:	d130      	bne.n	800b484 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	2203      	movs	r2, #3
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	43db      	mvns	r3, r3
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	4013      	ands	r3, r2
 800b438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68da      	ldr	r2, [r3, #12]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	fa02 f303 	lsl.w	r3, r2, r3
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	4313      	orrs	r3, r2
 800b44a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	69ba      	ldr	r2, [r7, #24]
 800b450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b458:	2201      	movs	r2, #1
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	43db      	mvns	r3, r3
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	4013      	ands	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	091b      	lsrs	r3, r3, #4
 800b46e:	f003 0201 	and.w	r2, r3, #1
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	fa02 f303 	lsl.w	r3, r2, r3
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	2203      	movs	r2, #3
 800b490:	fa02 f303 	lsl.w	r3, r2, r3
 800b494:	43db      	mvns	r3, r3
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	4013      	ands	r3, r2
 800b49a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	69ba      	ldr	r2, [r7, #24]
 800b4b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d003      	beq.n	800b4c4 <HAL_GPIO_Init+0xfc>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2b12      	cmp	r3, #18
 800b4c2:	d123      	bne.n	800b50c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	08da      	lsrs	r2, r3, #3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3208      	adds	r2, #8
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	220f      	movs	r2, #15
 800b4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e0:	43db      	mvns	r3, r3
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	691a      	ldr	r2, [r3, #16]
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	08da      	lsrs	r2, r3, #3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3208      	adds	r2, #8
 800b506:	69b9      	ldr	r1, [r7, #24]
 800b508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	2203      	movs	r2, #3
 800b518:	fa02 f303 	lsl.w	r3, r2, r3
 800b51c:	43db      	mvns	r3, r3
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	4013      	ands	r3, r2
 800b522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	f003 0203 	and.w	r2, r3, #3
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	fa02 f303 	lsl.w	r3, r2, r3
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	4313      	orrs	r3, r2
 800b538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80b4 	beq.w	800b6b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	4b5f      	ldr	r3, [pc, #380]	; (800b6d0 <HAL_GPIO_Init+0x308>)
 800b554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b556:	4a5e      	ldr	r2, [pc, #376]	; (800b6d0 <HAL_GPIO_Init+0x308>)
 800b558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b55c:	6453      	str	r3, [r2, #68]	; 0x44
 800b55e:	4b5c      	ldr	r3, [pc, #368]	; (800b6d0 <HAL_GPIO_Init+0x308>)
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b56a:	4a5a      	ldr	r2, [pc, #360]	; (800b6d4 <HAL_GPIO_Init+0x30c>)
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	089b      	lsrs	r3, r3, #2
 800b570:	3302      	adds	r3, #2
 800b572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	220f      	movs	r2, #15
 800b582:	fa02 f303 	lsl.w	r3, r2, r3
 800b586:	43db      	mvns	r3, r3
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	4013      	ands	r3, r2
 800b58c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a51      	ldr	r2, [pc, #324]	; (800b6d8 <HAL_GPIO_Init+0x310>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d02b      	beq.n	800b5ee <HAL_GPIO_Init+0x226>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a50      	ldr	r2, [pc, #320]	; (800b6dc <HAL_GPIO_Init+0x314>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d025      	beq.n	800b5ea <HAL_GPIO_Init+0x222>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a4f      	ldr	r2, [pc, #316]	; (800b6e0 <HAL_GPIO_Init+0x318>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d01f      	beq.n	800b5e6 <HAL_GPIO_Init+0x21e>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a4e      	ldr	r2, [pc, #312]	; (800b6e4 <HAL_GPIO_Init+0x31c>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d019      	beq.n	800b5e2 <HAL_GPIO_Init+0x21a>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a4d      	ldr	r2, [pc, #308]	; (800b6e8 <HAL_GPIO_Init+0x320>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d013      	beq.n	800b5de <HAL_GPIO_Init+0x216>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a4c      	ldr	r2, [pc, #304]	; (800b6ec <HAL_GPIO_Init+0x324>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d00d      	beq.n	800b5da <HAL_GPIO_Init+0x212>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a4b      	ldr	r2, [pc, #300]	; (800b6f0 <HAL_GPIO_Init+0x328>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d007      	beq.n	800b5d6 <HAL_GPIO_Init+0x20e>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a4a      	ldr	r2, [pc, #296]	; (800b6f4 <HAL_GPIO_Init+0x32c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d101      	bne.n	800b5d2 <HAL_GPIO_Init+0x20a>
 800b5ce:	2307      	movs	r3, #7
 800b5d0:	e00e      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	e00c      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5d6:	2306      	movs	r3, #6
 800b5d8:	e00a      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5da:	2305      	movs	r3, #5
 800b5dc:	e008      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5de:	2304      	movs	r3, #4
 800b5e0:	e006      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e004      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e002      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <HAL_GPIO_Init+0x228>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	69fa      	ldr	r2, [r7, #28]
 800b5f2:	f002 0203 	and.w	r2, r2, #3
 800b5f6:	0092      	lsls	r2, r2, #2
 800b5f8:	4093      	lsls	r3, r2
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b600:	4934      	ldr	r1, [pc, #208]	; (800b6d4 <HAL_GPIO_Init+0x30c>)
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	089b      	lsrs	r3, r3, #2
 800b606:	3302      	adds	r3, #2
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b60e:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	43db      	mvns	r3, r3
 800b618:	69ba      	ldr	r2, [r7, #24]
 800b61a:	4013      	ands	r3, r2
 800b61c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	4313      	orrs	r3, r2
 800b630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b632:	4a31      	ldr	r2, [pc, #196]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b638:	4b2f      	ldr	r3, [pc, #188]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	43db      	mvns	r3, r3
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	4013      	ands	r3, r2
 800b646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	4313      	orrs	r3, r2
 800b65a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b65c:	4a26      	ldr	r2, [pc, #152]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b662:	4b25      	ldr	r3, [pc, #148]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	43db      	mvns	r3, r3
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	4013      	ands	r3, r2
 800b670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	4313      	orrs	r3, r2
 800b684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b686:	4a1c      	ldr	r2, [pc, #112]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	43db      	mvns	r3, r3
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	4013      	ands	r3, r2
 800b69a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b6b0:	4a11      	ldr	r2, [pc, #68]	; (800b6f8 <HAL_GPIO_Init+0x330>)
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	61fb      	str	r3, [r7, #28]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b0f      	cmp	r3, #15
 800b6c0:	f67f ae90 	bls.w	800b3e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b6c4:	bf00      	nop
 800b6c6:	3724      	adds	r7, #36	; 0x24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	40023800 	.word	0x40023800
 800b6d4:	40013800 	.word	0x40013800
 800b6d8:	40020000 	.word	0x40020000
 800b6dc:	40020400 	.word	0x40020400
 800b6e0:	40020800 	.word	0x40020800
 800b6e4:	40020c00 	.word	0x40020c00
 800b6e8:	40021000 	.word	0x40021000
 800b6ec:	40021400 	.word	0x40021400
 800b6f0:	40021800 	.word	0x40021800
 800b6f4:	40021c00 	.word	0x40021c00
 800b6f8:	40013c00 	.word	0x40013c00

0800b6fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	807b      	strh	r3, [r7, #2]
 800b708:	4613      	mov	r3, r2
 800b70a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b70c:	787b      	ldrb	r3, [r7, #1]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b712:	887a      	ldrh	r2, [r7, #2]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b718:	e003      	b.n	800b722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b71a:	887b      	ldrh	r3, [r7, #2]
 800b71c:	041a      	lsls	r2, r3, #16
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	619a      	str	r2, [r3, #24]
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
	...

0800b730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e25b      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d075      	beq.n	800b83a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b74e:	4ba3      	ldr	r3, [pc, #652]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f003 030c 	and.w	r3, r3, #12
 800b756:	2b04      	cmp	r3, #4
 800b758:	d00c      	beq.n	800b774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b75a:	4ba0      	ldr	r3, [pc, #640]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b762:	2b08      	cmp	r3, #8
 800b764:	d112      	bne.n	800b78c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b766:	4b9d      	ldr	r3, [pc, #628]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b76e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b772:	d10b      	bne.n	800b78c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b774:	4b99      	ldr	r3, [pc, #612]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d05b      	beq.n	800b838 <HAL_RCC_OscConfig+0x108>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d157      	bne.n	800b838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e236      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b794:	d106      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x74>
 800b796:	4b91      	ldr	r3, [pc, #580]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a90      	ldr	r2, [pc, #576]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b79c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	e01d      	b.n	800b7e0 <HAL_RCC_OscConfig+0xb0>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7ac:	d10c      	bne.n	800b7c8 <HAL_RCC_OscConfig+0x98>
 800b7ae:	4b8b      	ldr	r3, [pc, #556]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a8a      	ldr	r2, [pc, #552]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	4b88      	ldr	r3, [pc, #544]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a87      	ldr	r2, [pc, #540]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	e00b      	b.n	800b7e0 <HAL_RCC_OscConfig+0xb0>
 800b7c8:	4b84      	ldr	r3, [pc, #528]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a83      	ldr	r2, [pc, #524]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	4b81      	ldr	r3, [pc, #516]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a80      	ldr	r2, [pc, #512]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b7da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d013      	beq.n	800b810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7e8:	f7fe fc86 	bl	800a0f8 <HAL_GetTick>
 800b7ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7ee:	e008      	b.n	800b802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7f0:	f7fe fc82 	bl	800a0f8 <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	2b64      	cmp	r3, #100	; 0x64
 800b7fc:	d901      	bls.n	800b802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e1fb      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b802:	4b76      	ldr	r3, [pc, #472]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0f0      	beq.n	800b7f0 <HAL_RCC_OscConfig+0xc0>
 800b80e:	e014      	b.n	800b83a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b810:	f7fe fc72 	bl	800a0f8 <HAL_GetTick>
 800b814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b816:	e008      	b.n	800b82a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b818:	f7fe fc6e 	bl	800a0f8 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	2b64      	cmp	r3, #100	; 0x64
 800b824:	d901      	bls.n	800b82a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b826:	2303      	movs	r3, #3
 800b828:	e1e7      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b82a:	4b6c      	ldr	r3, [pc, #432]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1f0      	bne.n	800b818 <HAL_RCC_OscConfig+0xe8>
 800b836:	e000      	b.n	800b83a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d063      	beq.n	800b90e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b846:	4b65      	ldr	r3, [pc, #404]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f003 030c 	and.w	r3, r3, #12
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00b      	beq.n	800b86a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b852:	4b62      	ldr	r3, [pc, #392]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	d11c      	bne.n	800b898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b85e:	4b5f      	ldr	r3, [pc, #380]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d116      	bne.n	800b898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b86a:	4b5c      	ldr	r3, [pc, #368]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <HAL_RCC_OscConfig+0x152>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d001      	beq.n	800b882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e1bb      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b882:	4b56      	ldr	r3, [pc, #344]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	4952      	ldr	r1, [pc, #328]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b892:	4313      	orrs	r3, r2
 800b894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b896:	e03a      	b.n	800b90e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d020      	beq.n	800b8e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8a0:	4b4f      	ldr	r3, [pc, #316]	; (800b9e0 <HAL_RCC_OscConfig+0x2b0>)
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a6:	f7fe fc27 	bl	800a0f8 <HAL_GetTick>
 800b8aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8ac:	e008      	b.n	800b8c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8ae:	f7fe fc23 	bl	800a0f8 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d901      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e19c      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8c0:	4b46      	ldr	r3, [pc, #280]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0f0      	beq.n	800b8ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8cc:	4b43      	ldr	r3, [pc, #268]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	4940      	ldr	r1, [pc, #256]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	600b      	str	r3, [r1, #0]
 800b8e0:	e015      	b.n	800b90e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8e2:	4b3f      	ldr	r3, [pc, #252]	; (800b9e0 <HAL_RCC_OscConfig+0x2b0>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e8:	f7fe fc06 	bl	800a0f8 <HAL_GetTick>
 800b8ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8f0:	f7fe fc02 	bl	800a0f8 <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e17b      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1f0      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0308 	and.w	r3, r3, #8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d030      	beq.n	800b97c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d016      	beq.n	800b950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b922:	4b30      	ldr	r3, [pc, #192]	; (800b9e4 <HAL_RCC_OscConfig+0x2b4>)
 800b924:	2201      	movs	r2, #1
 800b926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b928:	f7fe fbe6 	bl	800a0f8 <HAL_GetTick>
 800b92c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b92e:	e008      	b.n	800b942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b930:	f7fe fbe2 	bl	800a0f8 <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d901      	bls.n	800b942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e15b      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b942:	4b26      	ldr	r3, [pc, #152]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0f0      	beq.n	800b930 <HAL_RCC_OscConfig+0x200>
 800b94e:	e015      	b.n	800b97c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b950:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <HAL_RCC_OscConfig+0x2b4>)
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b956:	f7fe fbcf 	bl	800a0f8 <HAL_GetTick>
 800b95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b95c:	e008      	b.n	800b970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b95e:	f7fe fbcb 	bl	800a0f8 <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e144      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b970:	4b1a      	ldr	r3, [pc, #104]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1f0      	bne.n	800b95e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0304 	and.w	r3, r3, #4
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 80a0 	beq.w	800baca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b98a:	2300      	movs	r3, #0
 800b98c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10f      	bne.n	800b9ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b99a:	2300      	movs	r3, #0
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	4a0e      	ldr	r2, [pc, #56]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b9a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b9aa:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <HAL_RCC_OscConfig+0x2ac>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9b2:	60bb      	str	r3, [r7, #8]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9ba:	4b0b      	ldr	r3, [pc, #44]	; (800b9e8 <HAL_RCC_OscConfig+0x2b8>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d121      	bne.n	800ba0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b9c6:	4b08      	ldr	r3, [pc, #32]	; (800b9e8 <HAL_RCC_OscConfig+0x2b8>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a07      	ldr	r2, [pc, #28]	; (800b9e8 <HAL_RCC_OscConfig+0x2b8>)
 800b9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9d2:	f7fe fb91 	bl	800a0f8 <HAL_GetTick>
 800b9d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9d8:	e011      	b.n	800b9fe <HAL_RCC_OscConfig+0x2ce>
 800b9da:	bf00      	nop
 800b9dc:	40023800 	.word	0x40023800
 800b9e0:	42470000 	.word	0x42470000
 800b9e4:	42470e80 	.word	0x42470e80
 800b9e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9ec:	f7fe fb84 	bl	800a0f8 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d901      	bls.n	800b9fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	e0fd      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9fe:	4b81      	ldr	r3, [pc, #516]	; (800bc04 <HAL_RCC_OscConfig+0x4d4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f0      	beq.n	800b9ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d106      	bne.n	800ba20 <HAL_RCC_OscConfig+0x2f0>
 800ba12:	4b7d      	ldr	r3, [pc, #500]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	4a7c      	ldr	r2, [pc, #496]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba18:	f043 0301 	orr.w	r3, r3, #1
 800ba1c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba1e:	e01c      	b.n	800ba5a <HAL_RCC_OscConfig+0x32a>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	2b05      	cmp	r3, #5
 800ba26:	d10c      	bne.n	800ba42 <HAL_RCC_OscConfig+0x312>
 800ba28:	4b77      	ldr	r3, [pc, #476]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2c:	4a76      	ldr	r2, [pc, #472]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba2e:	f043 0304 	orr.w	r3, r3, #4
 800ba32:	6713      	str	r3, [r2, #112]	; 0x70
 800ba34:	4b74      	ldr	r3, [pc, #464]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba38:	4a73      	ldr	r2, [pc, #460]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba3a:	f043 0301 	orr.w	r3, r3, #1
 800ba3e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba40:	e00b      	b.n	800ba5a <HAL_RCC_OscConfig+0x32a>
 800ba42:	4b71      	ldr	r3, [pc, #452]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba46:	4a70      	ldr	r2, [pc, #448]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba48:	f023 0301 	bic.w	r3, r3, #1
 800ba4c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba4e:	4b6e      	ldr	r3, [pc, #440]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba52:	4a6d      	ldr	r2, [pc, #436]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba54:	f023 0304 	bic.w	r3, r3, #4
 800ba58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d015      	beq.n	800ba8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba62:	f7fe fb49 	bl	800a0f8 <HAL_GetTick>
 800ba66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba68:	e00a      	b.n	800ba80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba6a:	f7fe fb45 	bl	800a0f8 <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d901      	bls.n	800ba80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e0bc      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba80:	4b61      	ldr	r3, [pc, #388]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800ba82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0ee      	beq.n	800ba6a <HAL_RCC_OscConfig+0x33a>
 800ba8c:	e014      	b.n	800bab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba8e:	f7fe fb33 	bl	800a0f8 <HAL_GetTick>
 800ba92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba94:	e00a      	b.n	800baac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba96:	f7fe fb2f 	bl	800a0f8 <HAL_GetTick>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d901      	bls.n	800baac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e0a6      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800baac:	4b56      	ldr	r3, [pc, #344]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800baae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1ee      	bne.n	800ba96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d105      	bne.n	800baca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800babe:	4b52      	ldr	r3, [pc, #328]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac2:	4a51      	ldr	r2, [pc, #324]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 8092 	beq.w	800bbf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bad4:	4b4c      	ldr	r3, [pc, #304]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 030c 	and.w	r3, r3, #12
 800badc:	2b08      	cmp	r3, #8
 800bade:	d05c      	beq.n	800bb9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d141      	bne.n	800bb6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bae8:	4b48      	ldr	r3, [pc, #288]	; (800bc0c <HAL_RCC_OscConfig+0x4dc>)
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baee:	f7fe fb03 	bl	800a0f8 <HAL_GetTick>
 800baf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baf4:	e008      	b.n	800bb08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800baf6:	f7fe faff 	bl	800a0f8 <HAL_GetTick>
 800bafa:	4602      	mov	r2, r0
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d901      	bls.n	800bb08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e078      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb08:	4b3f      	ldr	r3, [pc, #252]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1f0      	bne.n	800baf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	69da      	ldr	r2, [r3, #28]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	019b      	lsls	r3, r3, #6
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2a:	085b      	lsrs	r3, r3, #1
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	041b      	lsls	r3, r3, #16
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb36:	061b      	lsls	r3, r3, #24
 800bb38:	4933      	ldr	r1, [pc, #204]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb3e:	4b33      	ldr	r3, [pc, #204]	; (800bc0c <HAL_RCC_OscConfig+0x4dc>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb44:	f7fe fad8 	bl	800a0f8 <HAL_GetTick>
 800bb48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb4a:	e008      	b.n	800bb5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb4c:	f7fe fad4 	bl	800a0f8 <HAL_GetTick>
 800bb50:	4602      	mov	r2, r0
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d901      	bls.n	800bb5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e04d      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb5e:	4b2a      	ldr	r3, [pc, #168]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0f0      	beq.n	800bb4c <HAL_RCC_OscConfig+0x41c>
 800bb6a:	e045      	b.n	800bbf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb6c:	4b27      	ldr	r3, [pc, #156]	; (800bc0c <HAL_RCC_OscConfig+0x4dc>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb72:	f7fe fac1 	bl	800a0f8 <HAL_GetTick>
 800bb76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb78:	e008      	b.n	800bb8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb7a:	f7fe fabd 	bl	800a0f8 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e036      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <HAL_RCC_OscConfig+0x44a>
 800bb98:	e02e      	b.n	800bbf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d101      	bne.n	800bba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e029      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bba6:	4b18      	ldr	r3, [pc, #96]	; (800bc08 <HAL_RCC_OscConfig+0x4d8>)
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d11c      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d115      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bbce:	4013      	ands	r3, r2
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d10d      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d106      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d001      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e000      	b.n	800bbfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	40007000 	.word	0x40007000
 800bc08:	40023800 	.word	0x40023800
 800bc0c:	42470060 	.word	0x42470060

0800bc10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e0cc      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc24:	4b68      	ldr	r3, [pc, #416]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 030f 	and.w	r3, r3, #15
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d90c      	bls.n	800bc4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc32:	4b65      	ldr	r3, [pc, #404]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc3a:	4b63      	ldr	r3, [pc, #396]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 030f 	and.w	r3, r3, #15
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d001      	beq.n	800bc4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e0b8      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d020      	beq.n	800bc9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc64:	4b59      	ldr	r3, [pc, #356]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	4a58      	ldr	r2, [pc, #352]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bc6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc7c:	4b53      	ldr	r3, [pc, #332]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	4a52      	ldr	r2, [pc, #328]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc88:	4b50      	ldr	r3, [pc, #320]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	494d      	ldr	r1, [pc, #308]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc96:	4313      	orrs	r3, r2
 800bc98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d044      	beq.n	800bd30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d107      	bne.n	800bcbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcae:	4b47      	ldr	r3, [pc, #284]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d119      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e07f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d003      	beq.n	800bcce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d107      	bne.n	800bcde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bcce:	4b3f      	ldr	r3, [pc, #252]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d109      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e06f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcde:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e067      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bcee:	4b37      	ldr	r3, [pc, #220]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	f023 0203 	bic.w	r2, r3, #3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	4934      	ldr	r1, [pc, #208]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd00:	f7fe f9fa 	bl	800a0f8 <HAL_GetTick>
 800bd04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd06:	e00a      	b.n	800bd1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd08:	f7fe f9f6 	bl	800a0f8 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e04f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd1e:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 020c 	and.w	r2, r3, #12
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d1eb      	bne.n	800bd08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 030f 	and.w	r3, r3, #15
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d20c      	bcs.n	800bd58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd3e:	4b22      	ldr	r3, [pc, #136]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	b2d2      	uxtb	r2, r2
 800bd44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd46:	4b20      	ldr	r3, [pc, #128]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d001      	beq.n	800bd58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e032      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d008      	beq.n	800bd76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bd64:	4b19      	ldr	r3, [pc, #100]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	4916      	ldr	r1, [pc, #88]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0308 	and.w	r3, r3, #8
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d009      	beq.n	800bd96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	490e      	ldr	r1, [pc, #56]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bd96:	f000 f821 	bl	800bddc <HAL_RCC_GetSysClockFreq>
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	091b      	lsrs	r3, r3, #4
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	4a0a      	ldr	r2, [pc, #40]	; (800bdd0 <HAL_RCC_ClockConfig+0x1c0>)
 800bda8:	5cd3      	ldrb	r3, [r2, r3]
 800bdaa:	fa21 f303 	lsr.w	r3, r1, r3
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bdb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bdb2:	4b09      	ldr	r3, [pc, #36]	; (800bdd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe f95a 	bl	800a070 <HAL_InitTick>

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40023c00 	.word	0x40023c00
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	0800f330 	.word	0x0800f330
 800bdd4:	20000000 	.word	0x20000000
 800bdd8:	20000004 	.word	0x20000004

0800bddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bde2:	2300      	movs	r3, #0
 800bde4:	607b      	str	r3, [r7, #4]
 800bde6:	2300      	movs	r3, #0
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	2300      	movs	r3, #0
 800bdec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdf2:	4b63      	ldr	r3, [pc, #396]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 030c 	and.w	r3, r3, #12
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d007      	beq.n	800be0e <HAL_RCC_GetSysClockFreq+0x32>
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d008      	beq.n	800be14 <HAL_RCC_GetSysClockFreq+0x38>
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 80b4 	bne.w	800bf70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be08:	4b5e      	ldr	r3, [pc, #376]	; (800bf84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be0a:	60bb      	str	r3, [r7, #8]
       break;
 800be0c:	e0b3      	b.n	800bf76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be0e:	4b5e      	ldr	r3, [pc, #376]	; (800bf88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800be10:	60bb      	str	r3, [r7, #8]
      break;
 800be12:	e0b0      	b.n	800bf76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be14:	4b5a      	ldr	r3, [pc, #360]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be1e:	4b58      	ldr	r3, [pc, #352]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d04a      	beq.n	800bec0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be2a:	4b55      	ldr	r3, [pc, #340]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	099b      	lsrs	r3, r3, #6
 800be30:	f04f 0400 	mov.w	r4, #0
 800be34:	f240 11ff 	movw	r1, #511	; 0x1ff
 800be38:	f04f 0200 	mov.w	r2, #0
 800be3c:	ea03 0501 	and.w	r5, r3, r1
 800be40:	ea04 0602 	and.w	r6, r4, r2
 800be44:	4629      	mov	r1, r5
 800be46:	4632      	mov	r2, r6
 800be48:	f04f 0300 	mov.w	r3, #0
 800be4c:	f04f 0400 	mov.w	r4, #0
 800be50:	0154      	lsls	r4, r2, #5
 800be52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be56:	014b      	lsls	r3, r1, #5
 800be58:	4619      	mov	r1, r3
 800be5a:	4622      	mov	r2, r4
 800be5c:	1b49      	subs	r1, r1, r5
 800be5e:	eb62 0206 	sbc.w	r2, r2, r6
 800be62:	f04f 0300 	mov.w	r3, #0
 800be66:	f04f 0400 	mov.w	r4, #0
 800be6a:	0194      	lsls	r4, r2, #6
 800be6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800be70:	018b      	lsls	r3, r1, #6
 800be72:	1a5b      	subs	r3, r3, r1
 800be74:	eb64 0402 	sbc.w	r4, r4, r2
 800be78:	f04f 0100 	mov.w	r1, #0
 800be7c:	f04f 0200 	mov.w	r2, #0
 800be80:	00e2      	lsls	r2, r4, #3
 800be82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800be86:	00d9      	lsls	r1, r3, #3
 800be88:	460b      	mov	r3, r1
 800be8a:	4614      	mov	r4, r2
 800be8c:	195b      	adds	r3, r3, r5
 800be8e:	eb44 0406 	adc.w	r4, r4, r6
 800be92:	f04f 0100 	mov.w	r1, #0
 800be96:	f04f 0200 	mov.w	r2, #0
 800be9a:	0262      	lsls	r2, r4, #9
 800be9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800bea0:	0259      	lsls	r1, r3, #9
 800bea2:	460b      	mov	r3, r1
 800bea4:	4614      	mov	r4, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	4621      	mov	r1, r4
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f04f 0400 	mov.w	r4, #0
 800beb0:	461a      	mov	r2, r3
 800beb2:	4623      	mov	r3, r4
 800beb4:	f7fc fd60 	bl	8008978 <__aeabi_uldivmod>
 800beb8:	4603      	mov	r3, r0
 800beba:	460c      	mov	r4, r1
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e049      	b.n	800bf54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bec0:	4b2f      	ldr	r3, [pc, #188]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	099b      	lsrs	r3, r3, #6
 800bec6:	f04f 0400 	mov.w	r4, #0
 800beca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bece:	f04f 0200 	mov.w	r2, #0
 800bed2:	ea03 0501 	and.w	r5, r3, r1
 800bed6:	ea04 0602 	and.w	r6, r4, r2
 800beda:	4629      	mov	r1, r5
 800bedc:	4632      	mov	r2, r6
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	f04f 0400 	mov.w	r4, #0
 800bee6:	0154      	lsls	r4, r2, #5
 800bee8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800beec:	014b      	lsls	r3, r1, #5
 800beee:	4619      	mov	r1, r3
 800bef0:	4622      	mov	r2, r4
 800bef2:	1b49      	subs	r1, r1, r5
 800bef4:	eb62 0206 	sbc.w	r2, r2, r6
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	f04f 0400 	mov.w	r4, #0
 800bf00:	0194      	lsls	r4, r2, #6
 800bf02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bf06:	018b      	lsls	r3, r1, #6
 800bf08:	1a5b      	subs	r3, r3, r1
 800bf0a:	eb64 0402 	sbc.w	r4, r4, r2
 800bf0e:	f04f 0100 	mov.w	r1, #0
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	00e2      	lsls	r2, r4, #3
 800bf18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf1c:	00d9      	lsls	r1, r3, #3
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4614      	mov	r4, r2
 800bf22:	195b      	adds	r3, r3, r5
 800bf24:	eb44 0406 	adc.w	r4, r4, r6
 800bf28:	f04f 0100 	mov.w	r1, #0
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	02a2      	lsls	r2, r4, #10
 800bf32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf36:	0299      	lsls	r1, r3, #10
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4614      	mov	r4, r2
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	4621      	mov	r1, r4
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f04f 0400 	mov.w	r4, #0
 800bf46:	461a      	mov	r2, r3
 800bf48:	4623      	mov	r3, r4
 800bf4a:	f7fc fd15 	bl	8008978 <__aeabi_uldivmod>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	460c      	mov	r4, r1
 800bf52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	0c1b      	lsrs	r3, r3, #16
 800bf5a:	f003 0303 	and.w	r3, r3, #3
 800bf5e:	3301      	adds	r3, #1
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6c:	60bb      	str	r3, [r7, #8]
      break;
 800bf6e:	e002      	b.n	800bf76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bf72:	60bb      	str	r3, [r7, #8]
      break;
 800bf74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf76:	68bb      	ldr	r3, [r7, #8]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf80:	40023800 	.word	0x40023800
 800bf84:	00f42400 	.word	0x00f42400
 800bf88:	007a1200 	.word	0x007a1200

0800bf8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf90:	4b03      	ldr	r3, [pc, #12]	; (800bfa0 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf92:	681b      	ldr	r3, [r3, #0]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20000000 	.word	0x20000000

0800bfa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bfa8:	f7ff fff0 	bl	800bf8c <HAL_RCC_GetHCLKFreq>
 800bfac:	4601      	mov	r1, r0
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	0a9b      	lsrs	r3, r3, #10
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfba:	5cd3      	ldrb	r3, [r2, r3]
 800bfbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	40023800 	.word	0x40023800
 800bfc8:	0800f340 	.word	0x0800f340

0800bfcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bfd0:	f7ff ffdc 	bl	800bf8c <HAL_RCC_GetHCLKFreq>
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	4b05      	ldr	r3, [pc, #20]	; (800bfec <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	0b5b      	lsrs	r3, r3, #13
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	4a03      	ldr	r2, [pc, #12]	; (800bff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfe2:	5cd3      	ldrb	r3, [r2, r3]
 800bfe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	40023800 	.word	0x40023800
 800bff0:	0800f340 	.word	0x0800f340

0800bff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e056      	b.n	800c0b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7fd fc99 	bl	8009958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2202      	movs	r2, #2
 800c02a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c03c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	431a      	orrs	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	431a      	orrs	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	431a      	orrs	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	431a      	orrs	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	431a      	orrs	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	ea42 0103 	orr.w	r1, r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	0c1b      	lsrs	r3, r3, #16
 800c084:	f003 0104 	and.w	r1, r3, #4
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	69da      	ldr	r2, [r3, #28]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e01d      	b.n	800c10a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fd fc80 	bl	80099e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f000 fc1e 	bl	800c93c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e01d      	b.n	800c160 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f815 	bl	800c168 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2202      	movs	r2, #2
 800c142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3304      	adds	r3, #4
 800c14e:	4619      	mov	r1, r3
 800c150:	4610      	mov	r0, r2
 800c152:	f000 fbf3 	bl	800c93c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e01d      	b.n	800c1ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f815 	bl	800c1d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f000 fbbe 	bl	800c93c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e083      	b.n	800c302 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7fd fc7a 	bl	8009b08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c22a:	f023 0307 	bic.w	r3, r3, #7
 800c22e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3304      	adds	r3, #4
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f000 fb7e 	bl	800c93c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	4313      	orrs	r3, r2
 800c260:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c268:	f023 0303 	bic.w	r3, r3, #3
 800c26c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	021b      	lsls	r3, r3, #8
 800c278:	4313      	orrs	r3, r2
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c286:	f023 030c 	bic.w	r3, r3, #12
 800c28a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	011a      	lsls	r2, r3, #4
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	6a1b      	ldr	r3, [r3, #32]
 800c2b4:	031b      	lsls	r3, r3, #12
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c2c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c2cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	f003 0302 	and.w	r3, r3, #2
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d122      	bne.n	800c366 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	f003 0302 	and.w	r3, r3, #2
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d11b      	bne.n	800c366 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f06f 0202 	mvn.w	r2, #2
 800c336:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fad6 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c352:	e005      	b.n	800c360 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fac8 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fad9 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b04      	cmp	r3, #4
 800c372:	d122      	bne.n	800c3ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	f003 0304 	and.w	r3, r3, #4
 800c37e:	2b04      	cmp	r3, #4
 800c380:	d11b      	bne.n	800c3ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f06f 0204 	mvn.w	r2, #4
 800c38a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 faac 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c3a6:	e005      	b.n	800c3b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fa9e 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 faaf 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	f003 0308 	and.w	r3, r3, #8
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d122      	bne.n	800c40e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f003 0308 	and.w	r3, r3, #8
 800c3d2:	2b08      	cmp	r3, #8
 800c3d4:	d11b      	bne.n	800c40e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f06f 0208 	mvn.w	r2, #8
 800c3de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2204      	movs	r2, #4
 800c3e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	69db      	ldr	r3, [r3, #28]
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fa82 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c3fa:	e005      	b.n	800c408 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fa74 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa85 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 0310 	and.w	r3, r3, #16
 800c418:	2b10      	cmp	r3, #16
 800c41a:	d122      	bne.n	800c462 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f003 0310 	and.w	r3, r3, #16
 800c426:	2b10      	cmp	r3, #16
 800c428:	d11b      	bne.n	800c462 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f06f 0210 	mvn.w	r2, #16
 800c432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2208      	movs	r2, #8
 800c438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fa58 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c44e:	e005      	b.n	800c45c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fa4a 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa5b 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	f003 0301 	and.w	r3, r3, #1
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d10e      	bne.n	800c48e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d107      	bne.n	800c48e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f06f 0201 	mvn.w	r2, #1
 800c486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fa24 	bl	800c8d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c498:	2b80      	cmp	r3, #128	; 0x80
 800c49a:	d10e      	bne.n	800c4ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a6:	2b80      	cmp	r3, #128	; 0x80
 800c4a8:	d107      	bne.n	800c4ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fe03 	bl	800d0c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c4:	2b40      	cmp	r3, #64	; 0x40
 800c4c6:	d10e      	bne.n	800c4e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d2:	2b40      	cmp	r3, #64	; 0x40
 800c4d4:	d107      	bne.n	800c4e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fa20 	bl	800c926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	f003 0320 	and.w	r3, r3, #32
 800c4f0:	2b20      	cmp	r3, #32
 800c4f2:	d10e      	bne.n	800c512 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	d107      	bne.n	800c512 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f06f 0220 	mvn.w	r2, #32
 800c50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fdcd 	bl	800d0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d101      	bne.n	800c536 <HAL_TIM_OC_ConfigChannel+0x1a>
 800c532:	2302      	movs	r3, #2
 800c534:	e04e      	b.n	800c5d4 <HAL_TIM_OC_ConfigChannel+0xb8>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2202      	movs	r2, #2
 800c542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b0c      	cmp	r3, #12
 800c54a:	d839      	bhi.n	800c5c0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800c54c:	a201      	add	r2, pc, #4	; (adr r2, 800c554 <HAL_TIM_OC_ConfigChannel+0x38>)
 800c54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c552:	bf00      	nop
 800c554:	0800c589 	.word	0x0800c589
 800c558:	0800c5c1 	.word	0x0800c5c1
 800c55c:	0800c5c1 	.word	0x0800c5c1
 800c560:	0800c5c1 	.word	0x0800c5c1
 800c564:	0800c597 	.word	0x0800c597
 800c568:	0800c5c1 	.word	0x0800c5c1
 800c56c:	0800c5c1 	.word	0x0800c5c1
 800c570:	0800c5c1 	.word	0x0800c5c1
 800c574:	0800c5a5 	.word	0x0800c5a5
 800c578:	0800c5c1 	.word	0x0800c5c1
 800c57c:	0800c5c1 	.word	0x0800c5c1
 800c580:	0800c5c1 	.word	0x0800c5c1
 800c584:	0800c5b3 	.word	0x0800c5b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 fa74 	bl	800ca7c <TIM_OC1_SetConfig>
      break;
 800c594:	e015      	b.n	800c5c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fadd 	bl	800cb5c <TIM_OC2_SetConfig>
      break;
 800c5a2:	e00e      	b.n	800c5c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68b9      	ldr	r1, [r7, #8]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fb4c 	bl	800cc48 <TIM_OC3_SetConfig>
      break;
 800c5b0:	e007      	b.n	800c5c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 fbb9 	bl	800cd30 <TIM_OC4_SetConfig>
      break;
 800c5be:	e000      	b.n	800c5c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800c5c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d101      	bne.n	800c5f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c5f2:	2302      	movs	r3, #2
 800c5f4:	e0b4      	b.n	800c760 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2202      	movs	r2, #2
 800c602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b0c      	cmp	r3, #12
 800c60a:	f200 809f 	bhi.w	800c74c <HAL_TIM_PWM_ConfigChannel+0x170>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c649 	.word	0x0800c649
 800c618:	0800c74d 	.word	0x0800c74d
 800c61c:	0800c74d 	.word	0x0800c74d
 800c620:	0800c74d 	.word	0x0800c74d
 800c624:	0800c689 	.word	0x0800c689
 800c628:	0800c74d 	.word	0x0800c74d
 800c62c:	0800c74d 	.word	0x0800c74d
 800c630:	0800c74d 	.word	0x0800c74d
 800c634:	0800c6cb 	.word	0x0800c6cb
 800c638:	0800c74d 	.word	0x0800c74d
 800c63c:	0800c74d 	.word	0x0800c74d
 800c640:	0800c74d 	.word	0x0800c74d
 800c644:	0800c70b 	.word	0x0800c70b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fa14 	bl	800ca7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f042 0208 	orr.w	r2, r2, #8
 800c662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	699a      	ldr	r2, [r3, #24]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0204 	bic.w	r2, r2, #4
 800c672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6999      	ldr	r1, [r3, #24]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	691a      	ldr	r2, [r3, #16]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	430a      	orrs	r2, r1
 800c684:	619a      	str	r2, [r3, #24]
      break;
 800c686:	e062      	b.n	800c74e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fa64 	bl	800cb5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	699a      	ldr	r2, [r3, #24]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	699a      	ldr	r2, [r3, #24]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6999      	ldr	r1, [r3, #24]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	021a      	lsls	r2, r3, #8
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	430a      	orrs	r2, r1
 800c6c6:	619a      	str	r2, [r3, #24]
      break;
 800c6c8:	e041      	b.n	800c74e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68b9      	ldr	r1, [r7, #8]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fab9 	bl	800cc48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	69da      	ldr	r2, [r3, #28]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f042 0208 	orr.w	r2, r2, #8
 800c6e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	69da      	ldr	r2, [r3, #28]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0204 	bic.w	r2, r2, #4
 800c6f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	69d9      	ldr	r1, [r3, #28]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	691a      	ldr	r2, [r3, #16]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	430a      	orrs	r2, r1
 800c706:	61da      	str	r2, [r3, #28]
      break;
 800c708:	e021      	b.n	800c74e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68b9      	ldr	r1, [r7, #8]
 800c710:	4618      	mov	r0, r3
 800c712:	f000 fb0d 	bl	800cd30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	69da      	ldr	r2, [r3, #28]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	69da      	ldr	r2, [r3, #28]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	69d9      	ldr	r1, [r3, #28]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	021a      	lsls	r2, r3, #8
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	61da      	str	r2, [r3, #28]
      break;
 800c74a:	e000      	b.n	800c74e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c74c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d101      	bne.n	800c780 <HAL_TIM_ConfigClockSource+0x18>
 800c77c:	2302      	movs	r3, #2
 800c77e:	e0a6      	b.n	800c8ce <HAL_TIM_ConfigClockSource+0x166>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c79e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b40      	cmp	r3, #64	; 0x40
 800c7b6:	d067      	beq.n	800c888 <HAL_TIM_ConfigClockSource+0x120>
 800c7b8:	2b40      	cmp	r3, #64	; 0x40
 800c7ba:	d80b      	bhi.n	800c7d4 <HAL_TIM_ConfigClockSource+0x6c>
 800c7bc:	2b10      	cmp	r3, #16
 800c7be:	d073      	beq.n	800c8a8 <HAL_TIM_ConfigClockSource+0x140>
 800c7c0:	2b10      	cmp	r3, #16
 800c7c2:	d802      	bhi.n	800c7ca <HAL_TIM_ConfigClockSource+0x62>
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d06f      	beq.n	800c8a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c7c8:	e078      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d06c      	beq.n	800c8a8 <HAL_TIM_ConfigClockSource+0x140>
 800c7ce:	2b30      	cmp	r3, #48	; 0x30
 800c7d0:	d06a      	beq.n	800c8a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c7d2:	e073      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7d4:	2b70      	cmp	r3, #112	; 0x70
 800c7d6:	d00d      	beq.n	800c7f4 <HAL_TIM_ConfigClockSource+0x8c>
 800c7d8:	2b70      	cmp	r3, #112	; 0x70
 800c7da:	d804      	bhi.n	800c7e6 <HAL_TIM_ConfigClockSource+0x7e>
 800c7dc:	2b50      	cmp	r3, #80	; 0x50
 800c7de:	d033      	beq.n	800c848 <HAL_TIM_ConfigClockSource+0xe0>
 800c7e0:	2b60      	cmp	r3, #96	; 0x60
 800c7e2:	d041      	beq.n	800c868 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c7e4:	e06a      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7ea:	d066      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x152>
 800c7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7f0:	d017      	beq.n	800c822 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c7f2:	e063      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6818      	ldr	r0, [r3, #0]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	6899      	ldr	r1, [r3, #8]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f000 fb64 	bl	800ced0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c816:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	609a      	str	r2, [r3, #8]
      break;
 800c820:	e04c      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	6899      	ldr	r1, [r3, #8]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f000 fb4d 	bl	800ced0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c844:	609a      	str	r2, [r3, #8]
      break;
 800c846:	e039      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	6859      	ldr	r1, [r3, #4]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	461a      	mov	r2, r3
 800c856:	f000 fac1 	bl	800cddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2150      	movs	r1, #80	; 0x50
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fb1a 	bl	800ce9a <TIM_ITRx_SetConfig>
      break;
 800c866:	e029      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6818      	ldr	r0, [r3, #0]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	6859      	ldr	r1, [r3, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	461a      	mov	r2, r3
 800c876:	f000 fae0 	bl	800ce3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2160      	movs	r1, #96	; 0x60
 800c880:	4618      	mov	r0, r3
 800c882:	f000 fb0a 	bl	800ce9a <TIM_ITRx_SetConfig>
      break;
 800c886:	e019      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6818      	ldr	r0, [r3, #0]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	6859      	ldr	r1, [r3, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	461a      	mov	r2, r3
 800c896:	f000 faa1 	bl	800cddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2140      	movs	r1, #64	; 0x40
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fafa 	bl	800ce9a <TIM_ITRx_SetConfig>
      break;
 800c8a6:	e009      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f000 faf1 	bl	800ce9a <TIM_ITRx_SetConfig>
      break;
 800c8b8:	e000      	b.n	800c8bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c8ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c8de:	bf00      	nop
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8f2:	bf00      	nop
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a40      	ldr	r2, [pc, #256]	; (800ca50 <TIM_Base_SetConfig+0x114>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d013      	beq.n	800c97c <TIM_Base_SetConfig+0x40>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c95a:	d00f      	beq.n	800c97c <TIM_Base_SetConfig+0x40>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a3d      	ldr	r2, [pc, #244]	; (800ca54 <TIM_Base_SetConfig+0x118>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d00b      	beq.n	800c97c <TIM_Base_SetConfig+0x40>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a3c      	ldr	r2, [pc, #240]	; (800ca58 <TIM_Base_SetConfig+0x11c>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d007      	beq.n	800c97c <TIM_Base_SetConfig+0x40>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a3b      	ldr	r2, [pc, #236]	; (800ca5c <TIM_Base_SetConfig+0x120>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d003      	beq.n	800c97c <TIM_Base_SetConfig+0x40>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a3a      	ldr	r2, [pc, #232]	; (800ca60 <TIM_Base_SetConfig+0x124>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d108      	bne.n	800c98e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a2f      	ldr	r2, [pc, #188]	; (800ca50 <TIM_Base_SetConfig+0x114>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d02b      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c99c:	d027      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a2c      	ldr	r2, [pc, #176]	; (800ca54 <TIM_Base_SetConfig+0x118>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d023      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a2b      	ldr	r2, [pc, #172]	; (800ca58 <TIM_Base_SetConfig+0x11c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d01f      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a2a      	ldr	r2, [pc, #168]	; (800ca5c <TIM_Base_SetConfig+0x120>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d01b      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a29      	ldr	r2, [pc, #164]	; (800ca60 <TIM_Base_SetConfig+0x124>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d017      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a28      	ldr	r2, [pc, #160]	; (800ca64 <TIM_Base_SetConfig+0x128>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d013      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a27      	ldr	r2, [pc, #156]	; (800ca68 <TIM_Base_SetConfig+0x12c>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d00f      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a26      	ldr	r2, [pc, #152]	; (800ca6c <TIM_Base_SetConfig+0x130>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d00b      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a25      	ldr	r2, [pc, #148]	; (800ca70 <TIM_Base_SetConfig+0x134>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d007      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a24      	ldr	r2, [pc, #144]	; (800ca74 <TIM_Base_SetConfig+0x138>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d003      	beq.n	800c9ee <TIM_Base_SetConfig+0xb2>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a23      	ldr	r2, [pc, #140]	; (800ca78 <TIM_Base_SetConfig+0x13c>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d108      	bne.n	800ca00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689a      	ldr	r2, [r3, #8]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a0a      	ldr	r2, [pc, #40]	; (800ca50 <TIM_Base_SetConfig+0x114>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d003      	beq.n	800ca34 <TIM_Base_SetConfig+0xf8>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a0c      	ldr	r2, [pc, #48]	; (800ca60 <TIM_Base_SetConfig+0x124>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d103      	bne.n	800ca3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	691a      	ldr	r2, [r3, #16]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	615a      	str	r2, [r3, #20]
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	40010000 	.word	0x40010000
 800ca54:	40000400 	.word	0x40000400
 800ca58:	40000800 	.word	0x40000800
 800ca5c:	40000c00 	.word	0x40000c00
 800ca60:	40010400 	.word	0x40010400
 800ca64:	40014000 	.word	0x40014000
 800ca68:	40014400 	.word	0x40014400
 800ca6c:	40014800 	.word	0x40014800
 800ca70:	40001800 	.word	0x40001800
 800ca74:	40001c00 	.word	0x40001c00
 800ca78:	40002000 	.word	0x40002000

0800ca7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	f023 0201 	bic.w	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0303 	bic.w	r3, r3, #3
 800cab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f023 0302 	bic.w	r3, r3, #2
 800cac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a20      	ldr	r2, [pc, #128]	; (800cb54 <TIM_OC1_SetConfig+0xd8>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d003      	beq.n	800cae0 <TIM_OC1_SetConfig+0x64>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a1f      	ldr	r2, [pc, #124]	; (800cb58 <TIM_OC1_SetConfig+0xdc>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d10c      	bne.n	800cafa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f023 0308 	bic.w	r3, r3, #8
 800cae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	4313      	orrs	r3, r2
 800caf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f023 0304 	bic.w	r3, r3, #4
 800caf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a15      	ldr	r2, [pc, #84]	; (800cb54 <TIM_OC1_SetConfig+0xd8>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d003      	beq.n	800cb0a <TIM_OC1_SetConfig+0x8e>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a14      	ldr	r2, [pc, #80]	; (800cb58 <TIM_OC1_SetConfig+0xdc>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d111      	bne.n	800cb2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	621a      	str	r2, [r3, #32]
}
 800cb48:	bf00      	nop
 800cb4a:	371c      	adds	r7, #28
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	40010000 	.word	0x40010000
 800cb58:	40010400 	.word	0x40010400

0800cb5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	f023 0210 	bic.w	r2, r3, #16
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	021b      	lsls	r3, r3, #8
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f023 0320 	bic.w	r3, r3, #32
 800cba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	011b      	lsls	r3, r3, #4
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a22      	ldr	r2, [pc, #136]	; (800cc40 <TIM_OC2_SetConfig+0xe4>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d003      	beq.n	800cbc4 <TIM_OC2_SetConfig+0x68>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a21      	ldr	r2, [pc, #132]	; (800cc44 <TIM_OC2_SetConfig+0xe8>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d10d      	bne.n	800cbe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a17      	ldr	r2, [pc, #92]	; (800cc40 <TIM_OC2_SetConfig+0xe4>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d003      	beq.n	800cbf0 <TIM_OC2_SetConfig+0x94>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a16      	ldr	r2, [pc, #88]	; (800cc44 <TIM_OC2_SetConfig+0xe8>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d113      	bne.n	800cc18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685a      	ldr	r2, [r3, #4]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	621a      	str	r2, [r3, #32]
}
 800cc32:	bf00      	nop
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	40010000 	.word	0x40010000
 800cc44:	40010400 	.word	0x40010400

0800cc48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0303 	bic.w	r3, r3, #3
 800cc7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	021b      	lsls	r3, r3, #8
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a21      	ldr	r2, [pc, #132]	; (800cd28 <TIM_OC3_SetConfig+0xe0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d003      	beq.n	800ccae <TIM_OC3_SetConfig+0x66>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <TIM_OC3_SetConfig+0xe4>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d10d      	bne.n	800ccca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a16      	ldr	r2, [pc, #88]	; (800cd28 <TIM_OC3_SetConfig+0xe0>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d003      	beq.n	800ccda <TIM_OC3_SetConfig+0x92>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a15      	ldr	r2, [pc, #84]	; (800cd2c <TIM_OC3_SetConfig+0xe4>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d113      	bne.n	800cd02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	621a      	str	r2, [r3, #32]
}
 800cd1c:	bf00      	nop
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	40010000 	.word	0x40010000
 800cd2c:	40010400 	.word	0x40010400

0800cd30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	021b      	lsls	r3, r3, #8
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	031b      	lsls	r3, r3, #12
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a12      	ldr	r2, [pc, #72]	; (800cdd4 <TIM_OC4_SetConfig+0xa4>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d003      	beq.n	800cd98 <TIM_OC4_SetConfig+0x68>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a11      	ldr	r2, [pc, #68]	; (800cdd8 <TIM_OC4_SetConfig+0xa8>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d109      	bne.n	800cdac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	019b      	lsls	r3, r3, #6
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	621a      	str	r2, [r3, #32]
}
 800cdc6:	bf00      	nop
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40010400 	.word	0x40010400

0800cddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f023 0201 	bic.w	r2, r3, #1
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	011b      	lsls	r3, r3, #4
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f023 030a 	bic.w	r3, r3, #10
 800ce18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	621a      	str	r2, [r3, #32]
}
 800ce2e:	bf00      	nop
 800ce30:	371c      	adds	r7, #28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b087      	sub	sp, #28
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	f023 0210 	bic.w	r2, r3, #16
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	031b      	lsls	r3, r3, #12
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	011b      	lsls	r3, r3, #4
 800ce7c:	693a      	ldr	r2, [r7, #16]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	621a      	str	r2, [r3, #32]
}
 800ce8e:	bf00      	nop
 800ce90:	371c      	adds	r7, #28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b085      	sub	sp, #20
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f043 0307 	orr.w	r3, r3, #7
 800cebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	609a      	str	r2, [r3, #8]
}
 800cec4:	bf00      	nop
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ceea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	021a      	lsls	r2, r3, #8
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	431a      	orrs	r2, r3
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	609a      	str	r2, [r3, #8]
}
 800cf04:	bf00      	nop
 800cf06:	371c      	adds	r7, #28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d101      	bne.n	800cf28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf24:	2302      	movs	r3, #2
 800cf26:	e05a      	b.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2202      	movs	r2, #2
 800cf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a21      	ldr	r2, [pc, #132]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d022      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf74:	d01d      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a1d      	ldr	r2, [pc, #116]	; (800cff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d018      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a1b      	ldr	r2, [pc, #108]	; (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d013      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a1a      	ldr	r2, [pc, #104]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d00e      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a18      	ldr	r2, [pc, #96]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d009      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a17      	ldr	r2, [pc, #92]	; (800d000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d004      	beq.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a15      	ldr	r2, [pc, #84]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d10c      	bne.n	800cfcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	40010000 	.word	0x40010000
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40000800 	.word	0x40000800
 800cff8:	40000c00 	.word	0x40000c00
 800cffc:	40010400 	.word	0x40010400
 800d000:	40014000 	.word	0x40014000
 800d004:	40001800 	.word	0x40001800

0800d008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d101      	bne.n	800d024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d020:	2302      	movs	r3, #2
 800d022:	e03d      	b.n	800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	4313      	orrs	r3, r2
 800d038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	4313      	orrs	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4313      	orrs	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	4313      	orrs	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e03f      	b.n	800d166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fc fe36 	bl	8009d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2224      	movs	r2, #36	; 0x24
 800d104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f829 	bl	800d170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	691a      	ldr	r2, [r3, #16]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d12c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	695a      	ldr	r2, [r3, #20]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d13c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d14c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2220      	movs	r2, #32
 800d158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2220      	movs	r2, #32
 800d160:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	b085      	sub	sp, #20
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	430a      	orrs	r2, r1
 800d18e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	431a      	orrs	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d1b2:	f023 030c 	bic.w	r3, r3, #12
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699a      	ldr	r2, [r3, #24]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	69db      	ldr	r3, [r3, #28]
 800d1da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1de:	f040 818b 	bne.w	800d4f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4ac1      	ldr	r2, [pc, #772]	; (800d4ec <UART_SetConfig+0x37c>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d005      	beq.n	800d1f8 <UART_SetConfig+0x88>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4abf      	ldr	r2, [pc, #764]	; (800d4f0 <UART_SetConfig+0x380>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	f040 80bd 	bne.w	800d372 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d1f8:	f7fe fee8 	bl	800bfcc <HAL_RCC_GetPCLK2Freq>
 800d1fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	461d      	mov	r5, r3
 800d202:	f04f 0600 	mov.w	r6, #0
 800d206:	46a8      	mov	r8, r5
 800d208:	46b1      	mov	r9, r6
 800d20a:	eb18 0308 	adds.w	r3, r8, r8
 800d20e:	eb49 0409 	adc.w	r4, r9, r9
 800d212:	4698      	mov	r8, r3
 800d214:	46a1      	mov	r9, r4
 800d216:	eb18 0805 	adds.w	r8, r8, r5
 800d21a:	eb49 0906 	adc.w	r9, r9, r6
 800d21e:	f04f 0100 	mov.w	r1, #0
 800d222:	f04f 0200 	mov.w	r2, #0
 800d226:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d22a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d22e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d232:	4688      	mov	r8, r1
 800d234:	4691      	mov	r9, r2
 800d236:	eb18 0005 	adds.w	r0, r8, r5
 800d23a:	eb49 0106 	adc.w	r1, r9, r6
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	461d      	mov	r5, r3
 800d244:	f04f 0600 	mov.w	r6, #0
 800d248:	196b      	adds	r3, r5, r5
 800d24a:	eb46 0406 	adc.w	r4, r6, r6
 800d24e:	461a      	mov	r2, r3
 800d250:	4623      	mov	r3, r4
 800d252:	f7fb fb91 	bl	8008978 <__aeabi_uldivmod>
 800d256:	4603      	mov	r3, r0
 800d258:	460c      	mov	r4, r1
 800d25a:	461a      	mov	r2, r3
 800d25c:	4ba5      	ldr	r3, [pc, #660]	; (800d4f4 <UART_SetConfig+0x384>)
 800d25e:	fba3 2302 	umull	r2, r3, r3, r2
 800d262:	095b      	lsrs	r3, r3, #5
 800d264:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	461d      	mov	r5, r3
 800d26c:	f04f 0600 	mov.w	r6, #0
 800d270:	46a9      	mov	r9, r5
 800d272:	46b2      	mov	sl, r6
 800d274:	eb19 0309 	adds.w	r3, r9, r9
 800d278:	eb4a 040a 	adc.w	r4, sl, sl
 800d27c:	4699      	mov	r9, r3
 800d27e:	46a2      	mov	sl, r4
 800d280:	eb19 0905 	adds.w	r9, r9, r5
 800d284:	eb4a 0a06 	adc.w	sl, sl, r6
 800d288:	f04f 0100 	mov.w	r1, #0
 800d28c:	f04f 0200 	mov.w	r2, #0
 800d290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d29c:	4689      	mov	r9, r1
 800d29e:	4692      	mov	sl, r2
 800d2a0:	eb19 0005 	adds.w	r0, r9, r5
 800d2a4:	eb4a 0106 	adc.w	r1, sl, r6
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	461d      	mov	r5, r3
 800d2ae:	f04f 0600 	mov.w	r6, #0
 800d2b2:	196b      	adds	r3, r5, r5
 800d2b4:	eb46 0406 	adc.w	r4, r6, r6
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4623      	mov	r3, r4
 800d2bc:	f7fb fb5c 	bl	8008978 <__aeabi_uldivmod>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4b8b      	ldr	r3, [pc, #556]	; (800d4f4 <UART_SetConfig+0x384>)
 800d2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d2cc:	095b      	lsrs	r3, r3, #5
 800d2ce:	2164      	movs	r1, #100	; 0x64
 800d2d0:	fb01 f303 	mul.w	r3, r1, r3
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	3332      	adds	r3, #50	; 0x32
 800d2da:	4a86      	ldr	r2, [pc, #536]	; (800d4f4 <UART_SetConfig+0x384>)
 800d2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e0:	095b      	lsrs	r3, r3, #5
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2e8:	4498      	add	r8, r3
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	f04f 0600 	mov.w	r6, #0
 800d2f2:	46a9      	mov	r9, r5
 800d2f4:	46b2      	mov	sl, r6
 800d2f6:	eb19 0309 	adds.w	r3, r9, r9
 800d2fa:	eb4a 040a 	adc.w	r4, sl, sl
 800d2fe:	4699      	mov	r9, r3
 800d300:	46a2      	mov	sl, r4
 800d302:	eb19 0905 	adds.w	r9, r9, r5
 800d306:	eb4a 0a06 	adc.w	sl, sl, r6
 800d30a:	f04f 0100 	mov.w	r1, #0
 800d30e:	f04f 0200 	mov.w	r2, #0
 800d312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d31a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d31e:	4689      	mov	r9, r1
 800d320:	4692      	mov	sl, r2
 800d322:	eb19 0005 	adds.w	r0, r9, r5
 800d326:	eb4a 0106 	adc.w	r1, sl, r6
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	461d      	mov	r5, r3
 800d330:	f04f 0600 	mov.w	r6, #0
 800d334:	196b      	adds	r3, r5, r5
 800d336:	eb46 0406 	adc.w	r4, r6, r6
 800d33a:	461a      	mov	r2, r3
 800d33c:	4623      	mov	r3, r4
 800d33e:	f7fb fb1b 	bl	8008978 <__aeabi_uldivmod>
 800d342:	4603      	mov	r3, r0
 800d344:	460c      	mov	r4, r1
 800d346:	461a      	mov	r2, r3
 800d348:	4b6a      	ldr	r3, [pc, #424]	; (800d4f4 <UART_SetConfig+0x384>)
 800d34a:	fba3 1302 	umull	r1, r3, r3, r2
 800d34e:	095b      	lsrs	r3, r3, #5
 800d350:	2164      	movs	r1, #100	; 0x64
 800d352:	fb01 f303 	mul.w	r3, r1, r3
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	3332      	adds	r3, #50	; 0x32
 800d35c:	4a65      	ldr	r2, [pc, #404]	; (800d4f4 <UART_SetConfig+0x384>)
 800d35e:	fba2 2303 	umull	r2, r3, r2, r3
 800d362:	095b      	lsrs	r3, r3, #5
 800d364:	f003 0207 	and.w	r2, r3, #7
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4442      	add	r2, r8
 800d36e:	609a      	str	r2, [r3, #8]
 800d370:	e26f      	b.n	800d852 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d372:	f7fe fe17 	bl	800bfa4 <HAL_RCC_GetPCLK1Freq>
 800d376:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	461d      	mov	r5, r3
 800d37c:	f04f 0600 	mov.w	r6, #0
 800d380:	46a8      	mov	r8, r5
 800d382:	46b1      	mov	r9, r6
 800d384:	eb18 0308 	adds.w	r3, r8, r8
 800d388:	eb49 0409 	adc.w	r4, r9, r9
 800d38c:	4698      	mov	r8, r3
 800d38e:	46a1      	mov	r9, r4
 800d390:	eb18 0805 	adds.w	r8, r8, r5
 800d394:	eb49 0906 	adc.w	r9, r9, r6
 800d398:	f04f 0100 	mov.w	r1, #0
 800d39c:	f04f 0200 	mov.w	r2, #0
 800d3a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d3a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d3a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d3ac:	4688      	mov	r8, r1
 800d3ae:	4691      	mov	r9, r2
 800d3b0:	eb18 0005 	adds.w	r0, r8, r5
 800d3b4:	eb49 0106 	adc.w	r1, r9, r6
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	461d      	mov	r5, r3
 800d3be:	f04f 0600 	mov.w	r6, #0
 800d3c2:	196b      	adds	r3, r5, r5
 800d3c4:	eb46 0406 	adc.w	r4, r6, r6
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	4623      	mov	r3, r4
 800d3cc:	f7fb fad4 	bl	8008978 <__aeabi_uldivmod>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4b47      	ldr	r3, [pc, #284]	; (800d4f4 <UART_SetConfig+0x384>)
 800d3d8:	fba3 2302 	umull	r2, r3, r3, r2
 800d3dc:	095b      	lsrs	r3, r3, #5
 800d3de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	461d      	mov	r5, r3
 800d3e6:	f04f 0600 	mov.w	r6, #0
 800d3ea:	46a9      	mov	r9, r5
 800d3ec:	46b2      	mov	sl, r6
 800d3ee:	eb19 0309 	adds.w	r3, r9, r9
 800d3f2:	eb4a 040a 	adc.w	r4, sl, sl
 800d3f6:	4699      	mov	r9, r3
 800d3f8:	46a2      	mov	sl, r4
 800d3fa:	eb19 0905 	adds.w	r9, r9, r5
 800d3fe:	eb4a 0a06 	adc.w	sl, sl, r6
 800d402:	f04f 0100 	mov.w	r1, #0
 800d406:	f04f 0200 	mov.w	r2, #0
 800d40a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d40e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d416:	4689      	mov	r9, r1
 800d418:	4692      	mov	sl, r2
 800d41a:	eb19 0005 	adds.w	r0, r9, r5
 800d41e:	eb4a 0106 	adc.w	r1, sl, r6
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	461d      	mov	r5, r3
 800d428:	f04f 0600 	mov.w	r6, #0
 800d42c:	196b      	adds	r3, r5, r5
 800d42e:	eb46 0406 	adc.w	r4, r6, r6
 800d432:	461a      	mov	r2, r3
 800d434:	4623      	mov	r3, r4
 800d436:	f7fb fa9f 	bl	8008978 <__aeabi_uldivmod>
 800d43a:	4603      	mov	r3, r0
 800d43c:	460c      	mov	r4, r1
 800d43e:	461a      	mov	r2, r3
 800d440:	4b2c      	ldr	r3, [pc, #176]	; (800d4f4 <UART_SetConfig+0x384>)
 800d442:	fba3 1302 	umull	r1, r3, r3, r2
 800d446:	095b      	lsrs	r3, r3, #5
 800d448:	2164      	movs	r1, #100	; 0x64
 800d44a:	fb01 f303 	mul.w	r3, r1, r3
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	3332      	adds	r3, #50	; 0x32
 800d454:	4a27      	ldr	r2, [pc, #156]	; (800d4f4 <UART_SetConfig+0x384>)
 800d456:	fba2 2303 	umull	r2, r3, r2, r3
 800d45a:	095b      	lsrs	r3, r3, #5
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d462:	4498      	add	r8, r3
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	461d      	mov	r5, r3
 800d468:	f04f 0600 	mov.w	r6, #0
 800d46c:	46a9      	mov	r9, r5
 800d46e:	46b2      	mov	sl, r6
 800d470:	eb19 0309 	adds.w	r3, r9, r9
 800d474:	eb4a 040a 	adc.w	r4, sl, sl
 800d478:	4699      	mov	r9, r3
 800d47a:	46a2      	mov	sl, r4
 800d47c:	eb19 0905 	adds.w	r9, r9, r5
 800d480:	eb4a 0a06 	adc.w	sl, sl, r6
 800d484:	f04f 0100 	mov.w	r1, #0
 800d488:	f04f 0200 	mov.w	r2, #0
 800d48c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d498:	4689      	mov	r9, r1
 800d49a:	4692      	mov	sl, r2
 800d49c:	eb19 0005 	adds.w	r0, r9, r5
 800d4a0:	eb4a 0106 	adc.w	r1, sl, r6
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	461d      	mov	r5, r3
 800d4aa:	f04f 0600 	mov.w	r6, #0
 800d4ae:	196b      	adds	r3, r5, r5
 800d4b0:	eb46 0406 	adc.w	r4, r6, r6
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4623      	mov	r3, r4
 800d4b8:	f7fb fa5e 	bl	8008978 <__aeabi_uldivmod>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4b0c      	ldr	r3, [pc, #48]	; (800d4f4 <UART_SetConfig+0x384>)
 800d4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	2164      	movs	r1, #100	; 0x64
 800d4cc:	fb01 f303 	mul.w	r3, r1, r3
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	3332      	adds	r3, #50	; 0x32
 800d4d6:	4a07      	ldr	r2, [pc, #28]	; (800d4f4 <UART_SetConfig+0x384>)
 800d4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4dc:	095b      	lsrs	r3, r3, #5
 800d4de:	f003 0207 	and.w	r2, r3, #7
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4442      	add	r2, r8
 800d4e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d4ea:	e1b2      	b.n	800d852 <UART_SetConfig+0x6e2>
 800d4ec:	40011000 	.word	0x40011000
 800d4f0:	40011400 	.word	0x40011400
 800d4f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4ad7      	ldr	r2, [pc, #860]	; (800d85c <UART_SetConfig+0x6ec>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d005      	beq.n	800d50e <UART_SetConfig+0x39e>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4ad6      	ldr	r2, [pc, #856]	; (800d860 <UART_SetConfig+0x6f0>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	f040 80d1 	bne.w	800d6b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d50e:	f7fe fd5d 	bl	800bfcc <HAL_RCC_GetPCLK2Freq>
 800d512:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	469a      	mov	sl, r3
 800d518:	f04f 0b00 	mov.w	fp, #0
 800d51c:	46d0      	mov	r8, sl
 800d51e:	46d9      	mov	r9, fp
 800d520:	eb18 0308 	adds.w	r3, r8, r8
 800d524:	eb49 0409 	adc.w	r4, r9, r9
 800d528:	4698      	mov	r8, r3
 800d52a:	46a1      	mov	r9, r4
 800d52c:	eb18 080a 	adds.w	r8, r8, sl
 800d530:	eb49 090b 	adc.w	r9, r9, fp
 800d534:	f04f 0100 	mov.w	r1, #0
 800d538:	f04f 0200 	mov.w	r2, #0
 800d53c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d540:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d544:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d548:	4688      	mov	r8, r1
 800d54a:	4691      	mov	r9, r2
 800d54c:	eb1a 0508 	adds.w	r5, sl, r8
 800d550:	eb4b 0609 	adc.w	r6, fp, r9
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	4619      	mov	r1, r3
 800d55a:	f04f 0200 	mov.w	r2, #0
 800d55e:	f04f 0300 	mov.w	r3, #0
 800d562:	f04f 0400 	mov.w	r4, #0
 800d566:	0094      	lsls	r4, r2, #2
 800d568:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d56c:	008b      	lsls	r3, r1, #2
 800d56e:	461a      	mov	r2, r3
 800d570:	4623      	mov	r3, r4
 800d572:	4628      	mov	r0, r5
 800d574:	4631      	mov	r1, r6
 800d576:	f7fb f9ff 	bl	8008978 <__aeabi_uldivmod>
 800d57a:	4603      	mov	r3, r0
 800d57c:	460c      	mov	r4, r1
 800d57e:	461a      	mov	r2, r3
 800d580:	4bb8      	ldr	r3, [pc, #736]	; (800d864 <UART_SetConfig+0x6f4>)
 800d582:	fba3 2302 	umull	r2, r3, r3, r2
 800d586:	095b      	lsrs	r3, r3, #5
 800d588:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	469b      	mov	fp, r3
 800d590:	f04f 0c00 	mov.w	ip, #0
 800d594:	46d9      	mov	r9, fp
 800d596:	46e2      	mov	sl, ip
 800d598:	eb19 0309 	adds.w	r3, r9, r9
 800d59c:	eb4a 040a 	adc.w	r4, sl, sl
 800d5a0:	4699      	mov	r9, r3
 800d5a2:	46a2      	mov	sl, r4
 800d5a4:	eb19 090b 	adds.w	r9, r9, fp
 800d5a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d5ac:	f04f 0100 	mov.w	r1, #0
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d5bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d5c0:	4689      	mov	r9, r1
 800d5c2:	4692      	mov	sl, r2
 800d5c4:	eb1b 0509 	adds.w	r5, fp, r9
 800d5c8:	eb4c 060a 	adc.w	r6, ip, sl
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	f04f 0300 	mov.w	r3, #0
 800d5da:	f04f 0400 	mov.w	r4, #0
 800d5de:	0094      	lsls	r4, r2, #2
 800d5e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5e4:	008b      	lsls	r3, r1, #2
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4623      	mov	r3, r4
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	f7fb f9c3 	bl	8008978 <__aeabi_uldivmod>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	4b9a      	ldr	r3, [pc, #616]	; (800d864 <UART_SetConfig+0x6f4>)
 800d5fa:	fba3 1302 	umull	r1, r3, r3, r2
 800d5fe:	095b      	lsrs	r3, r3, #5
 800d600:	2164      	movs	r1, #100	; 0x64
 800d602:	fb01 f303 	mul.w	r3, r1, r3
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	011b      	lsls	r3, r3, #4
 800d60a:	3332      	adds	r3, #50	; 0x32
 800d60c:	4a95      	ldr	r2, [pc, #596]	; (800d864 <UART_SetConfig+0x6f4>)
 800d60e:	fba2 2303 	umull	r2, r3, r2, r3
 800d612:	095b      	lsrs	r3, r3, #5
 800d614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d618:	4498      	add	r8, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	469b      	mov	fp, r3
 800d61e:	f04f 0c00 	mov.w	ip, #0
 800d622:	46d9      	mov	r9, fp
 800d624:	46e2      	mov	sl, ip
 800d626:	eb19 0309 	adds.w	r3, r9, r9
 800d62a:	eb4a 040a 	adc.w	r4, sl, sl
 800d62e:	4699      	mov	r9, r3
 800d630:	46a2      	mov	sl, r4
 800d632:	eb19 090b 	adds.w	r9, r9, fp
 800d636:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d63a:	f04f 0100 	mov.w	r1, #0
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d64a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d64e:	4689      	mov	r9, r1
 800d650:	4692      	mov	sl, r2
 800d652:	eb1b 0509 	adds.w	r5, fp, r9
 800d656:	eb4c 060a 	adc.w	r6, ip, sl
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	4619      	mov	r1, r3
 800d660:	f04f 0200 	mov.w	r2, #0
 800d664:	f04f 0300 	mov.w	r3, #0
 800d668:	f04f 0400 	mov.w	r4, #0
 800d66c:	0094      	lsls	r4, r2, #2
 800d66e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d672:	008b      	lsls	r3, r1, #2
 800d674:	461a      	mov	r2, r3
 800d676:	4623      	mov	r3, r4
 800d678:	4628      	mov	r0, r5
 800d67a:	4631      	mov	r1, r6
 800d67c:	f7fb f97c 	bl	8008978 <__aeabi_uldivmod>
 800d680:	4603      	mov	r3, r0
 800d682:	460c      	mov	r4, r1
 800d684:	461a      	mov	r2, r3
 800d686:	4b77      	ldr	r3, [pc, #476]	; (800d864 <UART_SetConfig+0x6f4>)
 800d688:	fba3 1302 	umull	r1, r3, r3, r2
 800d68c:	095b      	lsrs	r3, r3, #5
 800d68e:	2164      	movs	r1, #100	; 0x64
 800d690:	fb01 f303 	mul.w	r3, r1, r3
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	011b      	lsls	r3, r3, #4
 800d698:	3332      	adds	r3, #50	; 0x32
 800d69a:	4a72      	ldr	r2, [pc, #456]	; (800d864 <UART_SetConfig+0x6f4>)
 800d69c:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a0:	095b      	lsrs	r3, r3, #5
 800d6a2:	f003 020f 	and.w	r2, r3, #15
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4442      	add	r2, r8
 800d6ac:	609a      	str	r2, [r3, #8]
 800d6ae:	e0d0      	b.n	800d852 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d6b0:	f7fe fc78 	bl	800bfa4 <HAL_RCC_GetPCLK1Freq>
 800d6b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	469a      	mov	sl, r3
 800d6ba:	f04f 0b00 	mov.w	fp, #0
 800d6be:	46d0      	mov	r8, sl
 800d6c0:	46d9      	mov	r9, fp
 800d6c2:	eb18 0308 	adds.w	r3, r8, r8
 800d6c6:	eb49 0409 	adc.w	r4, r9, r9
 800d6ca:	4698      	mov	r8, r3
 800d6cc:	46a1      	mov	r9, r4
 800d6ce:	eb18 080a 	adds.w	r8, r8, sl
 800d6d2:	eb49 090b 	adc.w	r9, r9, fp
 800d6d6:	f04f 0100 	mov.w	r1, #0
 800d6da:	f04f 0200 	mov.w	r2, #0
 800d6de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d6e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d6e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d6ea:	4688      	mov	r8, r1
 800d6ec:	4691      	mov	r9, r2
 800d6ee:	eb1a 0508 	adds.w	r5, sl, r8
 800d6f2:	eb4b 0609 	adc.w	r6, fp, r9
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f04f 0200 	mov.w	r2, #0
 800d700:	f04f 0300 	mov.w	r3, #0
 800d704:	f04f 0400 	mov.w	r4, #0
 800d708:	0094      	lsls	r4, r2, #2
 800d70a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d70e:	008b      	lsls	r3, r1, #2
 800d710:	461a      	mov	r2, r3
 800d712:	4623      	mov	r3, r4
 800d714:	4628      	mov	r0, r5
 800d716:	4631      	mov	r1, r6
 800d718:	f7fb f92e 	bl	8008978 <__aeabi_uldivmod>
 800d71c:	4603      	mov	r3, r0
 800d71e:	460c      	mov	r4, r1
 800d720:	461a      	mov	r2, r3
 800d722:	4b50      	ldr	r3, [pc, #320]	; (800d864 <UART_SetConfig+0x6f4>)
 800d724:	fba3 2302 	umull	r2, r3, r3, r2
 800d728:	095b      	lsrs	r3, r3, #5
 800d72a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	469b      	mov	fp, r3
 800d732:	f04f 0c00 	mov.w	ip, #0
 800d736:	46d9      	mov	r9, fp
 800d738:	46e2      	mov	sl, ip
 800d73a:	eb19 0309 	adds.w	r3, r9, r9
 800d73e:	eb4a 040a 	adc.w	r4, sl, sl
 800d742:	4699      	mov	r9, r3
 800d744:	46a2      	mov	sl, r4
 800d746:	eb19 090b 	adds.w	r9, r9, fp
 800d74a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d74e:	f04f 0100 	mov.w	r1, #0
 800d752:	f04f 0200 	mov.w	r2, #0
 800d756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d75a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d75e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d762:	4689      	mov	r9, r1
 800d764:	4692      	mov	sl, r2
 800d766:	eb1b 0509 	adds.w	r5, fp, r9
 800d76a:	eb4c 060a 	adc.w	r6, ip, sl
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	4619      	mov	r1, r3
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	f04f 0300 	mov.w	r3, #0
 800d77c:	f04f 0400 	mov.w	r4, #0
 800d780:	0094      	lsls	r4, r2, #2
 800d782:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d786:	008b      	lsls	r3, r1, #2
 800d788:	461a      	mov	r2, r3
 800d78a:	4623      	mov	r3, r4
 800d78c:	4628      	mov	r0, r5
 800d78e:	4631      	mov	r1, r6
 800d790:	f7fb f8f2 	bl	8008978 <__aeabi_uldivmod>
 800d794:	4603      	mov	r3, r0
 800d796:	460c      	mov	r4, r1
 800d798:	461a      	mov	r2, r3
 800d79a:	4b32      	ldr	r3, [pc, #200]	; (800d864 <UART_SetConfig+0x6f4>)
 800d79c:	fba3 1302 	umull	r1, r3, r3, r2
 800d7a0:	095b      	lsrs	r3, r3, #5
 800d7a2:	2164      	movs	r1, #100	; 0x64
 800d7a4:	fb01 f303 	mul.w	r3, r1, r3
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	3332      	adds	r3, #50	; 0x32
 800d7ae:	4a2d      	ldr	r2, [pc, #180]	; (800d864 <UART_SetConfig+0x6f4>)
 800d7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b4:	095b      	lsrs	r3, r3, #5
 800d7b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7ba:	4498      	add	r8, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	469b      	mov	fp, r3
 800d7c0:	f04f 0c00 	mov.w	ip, #0
 800d7c4:	46d9      	mov	r9, fp
 800d7c6:	46e2      	mov	sl, ip
 800d7c8:	eb19 0309 	adds.w	r3, r9, r9
 800d7cc:	eb4a 040a 	adc.w	r4, sl, sl
 800d7d0:	4699      	mov	r9, r3
 800d7d2:	46a2      	mov	sl, r4
 800d7d4:	eb19 090b 	adds.w	r9, r9, fp
 800d7d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d7dc:	f04f 0100 	mov.w	r1, #0
 800d7e0:	f04f 0200 	mov.w	r2, #0
 800d7e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7f0:	4689      	mov	r9, r1
 800d7f2:	4692      	mov	sl, r2
 800d7f4:	eb1b 0509 	adds.w	r5, fp, r9
 800d7f8:	eb4c 060a 	adc.w	r6, ip, sl
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	4619      	mov	r1, r3
 800d802:	f04f 0200 	mov.w	r2, #0
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	f04f 0400 	mov.w	r4, #0
 800d80e:	0094      	lsls	r4, r2, #2
 800d810:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d814:	008b      	lsls	r3, r1, #2
 800d816:	461a      	mov	r2, r3
 800d818:	4623      	mov	r3, r4
 800d81a:	4628      	mov	r0, r5
 800d81c:	4631      	mov	r1, r6
 800d81e:	f7fb f8ab 	bl	8008978 <__aeabi_uldivmod>
 800d822:	4603      	mov	r3, r0
 800d824:	460c      	mov	r4, r1
 800d826:	461a      	mov	r2, r3
 800d828:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <UART_SetConfig+0x6f4>)
 800d82a:	fba3 1302 	umull	r1, r3, r3, r2
 800d82e:	095b      	lsrs	r3, r3, #5
 800d830:	2164      	movs	r1, #100	; 0x64
 800d832:	fb01 f303 	mul.w	r3, r1, r3
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	011b      	lsls	r3, r3, #4
 800d83a:	3332      	adds	r3, #50	; 0x32
 800d83c:	4a09      	ldr	r2, [pc, #36]	; (800d864 <UART_SetConfig+0x6f4>)
 800d83e:	fba2 2303 	umull	r2, r3, r2, r3
 800d842:	095b      	lsrs	r3, r3, #5
 800d844:	f003 020f 	and.w	r2, r3, #15
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4442      	add	r2, r8
 800d84e:	609a      	str	r2, [r3, #8]
}
 800d850:	e7ff      	b.n	800d852 <UART_SetConfig+0x6e2>
 800d852:	bf00      	nop
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	40011000 	.word	0x40011000
 800d860:	40011400 	.word	0x40011400
 800d864:	51eb851f 	.word	0x51eb851f

0800d868 <__errno>:
 800d868:	4b01      	ldr	r3, [pc, #4]	; (800d870 <__errno+0x8>)
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	2000000c 	.word	0x2000000c

0800d874 <__libc_init_array>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	4e0d      	ldr	r6, [pc, #52]	; (800d8ac <__libc_init_array+0x38>)
 800d878:	4c0d      	ldr	r4, [pc, #52]	; (800d8b0 <__libc_init_array+0x3c>)
 800d87a:	1ba4      	subs	r4, r4, r6
 800d87c:	10a4      	asrs	r4, r4, #2
 800d87e:	2500      	movs	r5, #0
 800d880:	42a5      	cmp	r5, r4
 800d882:	d109      	bne.n	800d898 <__libc_init_array+0x24>
 800d884:	4e0b      	ldr	r6, [pc, #44]	; (800d8b4 <__libc_init_array+0x40>)
 800d886:	4c0c      	ldr	r4, [pc, #48]	; (800d8b8 <__libc_init_array+0x44>)
 800d888:	f001 fd44 	bl	800f314 <_init>
 800d88c:	1ba4      	subs	r4, r4, r6
 800d88e:	10a4      	asrs	r4, r4, #2
 800d890:	2500      	movs	r5, #0
 800d892:	42a5      	cmp	r5, r4
 800d894:	d105      	bne.n	800d8a2 <__libc_init_array+0x2e>
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d89c:	4798      	blx	r3
 800d89e:	3501      	adds	r5, #1
 800d8a0:	e7ee      	b.n	800d880 <__libc_init_array+0xc>
 800d8a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8a6:	4798      	blx	r3
 800d8a8:	3501      	adds	r5, #1
 800d8aa:	e7f2      	b.n	800d892 <__libc_init_array+0x1e>
 800d8ac:	0800f580 	.word	0x0800f580
 800d8b0:	0800f580 	.word	0x0800f580
 800d8b4:	0800f580 	.word	0x0800f580
 800d8b8:	0800f584 	.word	0x0800f584

0800d8bc <memset>:
 800d8bc:	4402      	add	r2, r0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d100      	bne.n	800d8c6 <memset+0xa>
 800d8c4:	4770      	bx	lr
 800d8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8ca:	e7f9      	b.n	800d8c0 <memset+0x4>

0800d8cc <__cvt>:
 800d8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d0:	ec55 4b10 	vmov	r4, r5, d0
 800d8d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d8d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d8da:	2d00      	cmp	r5, #0
 800d8dc:	460e      	mov	r6, r1
 800d8de:	4691      	mov	r9, r2
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	bfb8      	it	lt
 800d8e4:	4622      	movlt	r2, r4
 800d8e6:	462b      	mov	r3, r5
 800d8e8:	f027 0720 	bic.w	r7, r7, #32
 800d8ec:	bfbb      	ittet	lt
 800d8ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d8f2:	461d      	movlt	r5, r3
 800d8f4:	2300      	movge	r3, #0
 800d8f6:	232d      	movlt	r3, #45	; 0x2d
 800d8f8:	bfb8      	it	lt
 800d8fa:	4614      	movlt	r4, r2
 800d8fc:	2f46      	cmp	r7, #70	; 0x46
 800d8fe:	700b      	strb	r3, [r1, #0]
 800d900:	d004      	beq.n	800d90c <__cvt+0x40>
 800d902:	2f45      	cmp	r7, #69	; 0x45
 800d904:	d100      	bne.n	800d908 <__cvt+0x3c>
 800d906:	3601      	adds	r6, #1
 800d908:	2102      	movs	r1, #2
 800d90a:	e000      	b.n	800d90e <__cvt+0x42>
 800d90c:	2103      	movs	r1, #3
 800d90e:	ab03      	add	r3, sp, #12
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	ab02      	add	r3, sp, #8
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	4632      	mov	r2, r6
 800d918:	4653      	mov	r3, sl
 800d91a:	ec45 4b10 	vmov	d0, r4, r5
 800d91e:	f000 fbab 	bl	800e078 <_dtoa_r>
 800d922:	2f47      	cmp	r7, #71	; 0x47
 800d924:	4680      	mov	r8, r0
 800d926:	d102      	bne.n	800d92e <__cvt+0x62>
 800d928:	f019 0f01 	tst.w	r9, #1
 800d92c:	d026      	beq.n	800d97c <__cvt+0xb0>
 800d92e:	2f46      	cmp	r7, #70	; 0x46
 800d930:	eb08 0906 	add.w	r9, r8, r6
 800d934:	d111      	bne.n	800d95a <__cvt+0x8e>
 800d936:	f898 3000 	ldrb.w	r3, [r8]
 800d93a:	2b30      	cmp	r3, #48	; 0x30
 800d93c:	d10a      	bne.n	800d954 <__cvt+0x88>
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7fa ffa7 	bl	8008898 <__aeabi_dcmpeq>
 800d94a:	b918      	cbnz	r0, 800d954 <__cvt+0x88>
 800d94c:	f1c6 0601 	rsb	r6, r6, #1
 800d950:	f8ca 6000 	str.w	r6, [sl]
 800d954:	f8da 3000 	ldr.w	r3, [sl]
 800d958:	4499      	add	r9, r3
 800d95a:	2200      	movs	r2, #0
 800d95c:	2300      	movs	r3, #0
 800d95e:	4620      	mov	r0, r4
 800d960:	4629      	mov	r1, r5
 800d962:	f7fa ff99 	bl	8008898 <__aeabi_dcmpeq>
 800d966:	b938      	cbnz	r0, 800d978 <__cvt+0xac>
 800d968:	2230      	movs	r2, #48	; 0x30
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	454b      	cmp	r3, r9
 800d96e:	d205      	bcs.n	800d97c <__cvt+0xb0>
 800d970:	1c59      	adds	r1, r3, #1
 800d972:	9103      	str	r1, [sp, #12]
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	e7f8      	b.n	800d96a <__cvt+0x9e>
 800d978:	f8cd 900c 	str.w	r9, [sp, #12]
 800d97c:	9b03      	ldr	r3, [sp, #12]
 800d97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d980:	eba3 0308 	sub.w	r3, r3, r8
 800d984:	4640      	mov	r0, r8
 800d986:	6013      	str	r3, [r2, #0]
 800d988:	b004      	add	sp, #16
 800d98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d98e <__exponent>:
 800d98e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d990:	2900      	cmp	r1, #0
 800d992:	4604      	mov	r4, r0
 800d994:	bfba      	itte	lt
 800d996:	4249      	neglt	r1, r1
 800d998:	232d      	movlt	r3, #45	; 0x2d
 800d99a:	232b      	movge	r3, #43	; 0x2b
 800d99c:	2909      	cmp	r1, #9
 800d99e:	f804 2b02 	strb.w	r2, [r4], #2
 800d9a2:	7043      	strb	r3, [r0, #1]
 800d9a4:	dd20      	ble.n	800d9e8 <__exponent+0x5a>
 800d9a6:	f10d 0307 	add.w	r3, sp, #7
 800d9aa:	461f      	mov	r7, r3
 800d9ac:	260a      	movs	r6, #10
 800d9ae:	fb91 f5f6 	sdiv	r5, r1, r6
 800d9b2:	fb06 1115 	mls	r1, r6, r5, r1
 800d9b6:	3130      	adds	r1, #48	; 0x30
 800d9b8:	2d09      	cmp	r5, #9
 800d9ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9be:	f103 32ff 	add.w	r2, r3, #4294967295
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	dc09      	bgt.n	800d9da <__exponent+0x4c>
 800d9c6:	3130      	adds	r1, #48	; 0x30
 800d9c8:	3b02      	subs	r3, #2
 800d9ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d9ce:	42bb      	cmp	r3, r7
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	d304      	bcc.n	800d9de <__exponent+0x50>
 800d9d4:	1a10      	subs	r0, r2, r0
 800d9d6:	b003      	add	sp, #12
 800d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9da:	4613      	mov	r3, r2
 800d9dc:	e7e7      	b.n	800d9ae <__exponent+0x20>
 800d9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9e2:	f804 2b01 	strb.w	r2, [r4], #1
 800d9e6:	e7f2      	b.n	800d9ce <__exponent+0x40>
 800d9e8:	2330      	movs	r3, #48	; 0x30
 800d9ea:	4419      	add	r1, r3
 800d9ec:	7083      	strb	r3, [r0, #2]
 800d9ee:	1d02      	adds	r2, r0, #4
 800d9f0:	70c1      	strb	r1, [r0, #3]
 800d9f2:	e7ef      	b.n	800d9d4 <__exponent+0x46>

0800d9f4 <_printf_float>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	b08d      	sub	sp, #52	; 0x34
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800da00:	4616      	mov	r6, r2
 800da02:	461f      	mov	r7, r3
 800da04:	4605      	mov	r5, r0
 800da06:	f001 f8ef 	bl	800ebe8 <_localeconv_r>
 800da0a:	6803      	ldr	r3, [r0, #0]
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fa fb16 	bl	8008040 <strlen>
 800da14:	2300      	movs	r3, #0
 800da16:	930a      	str	r3, [sp, #40]	; 0x28
 800da18:	f8d8 3000 	ldr.w	r3, [r8]
 800da1c:	9005      	str	r0, [sp, #20]
 800da1e:	3307      	adds	r3, #7
 800da20:	f023 0307 	bic.w	r3, r3, #7
 800da24:	f103 0208 	add.w	r2, r3, #8
 800da28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da2c:	f8d4 b000 	ldr.w	fp, [r4]
 800da30:	f8c8 2000 	str.w	r2, [r8]
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da3c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da44:	9307      	str	r3, [sp, #28]
 800da46:	f8cd 8018 	str.w	r8, [sp, #24]
 800da4a:	f04f 32ff 	mov.w	r2, #4294967295
 800da4e:	4ba7      	ldr	r3, [pc, #668]	; (800dcec <_printf_float+0x2f8>)
 800da50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da54:	f7fa ff52 	bl	80088fc <__aeabi_dcmpun>
 800da58:	bb70      	cbnz	r0, 800dab8 <_printf_float+0xc4>
 800da5a:	f04f 32ff 	mov.w	r2, #4294967295
 800da5e:	4ba3      	ldr	r3, [pc, #652]	; (800dcec <_printf_float+0x2f8>)
 800da60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da64:	f7fa ff2c 	bl	80088c0 <__aeabi_dcmple>
 800da68:	bb30      	cbnz	r0, 800dab8 <_printf_float+0xc4>
 800da6a:	2200      	movs	r2, #0
 800da6c:	2300      	movs	r3, #0
 800da6e:	4640      	mov	r0, r8
 800da70:	4649      	mov	r1, r9
 800da72:	f7fa ff1b 	bl	80088ac <__aeabi_dcmplt>
 800da76:	b110      	cbz	r0, 800da7e <_printf_float+0x8a>
 800da78:	232d      	movs	r3, #45	; 0x2d
 800da7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da7e:	4a9c      	ldr	r2, [pc, #624]	; (800dcf0 <_printf_float+0x2fc>)
 800da80:	4b9c      	ldr	r3, [pc, #624]	; (800dcf4 <_printf_float+0x300>)
 800da82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800da86:	bf8c      	ite	hi
 800da88:	4690      	movhi	r8, r2
 800da8a:	4698      	movls	r8, r3
 800da8c:	2303      	movs	r3, #3
 800da8e:	f02b 0204 	bic.w	r2, fp, #4
 800da92:	6123      	str	r3, [r4, #16]
 800da94:	6022      	str	r2, [r4, #0]
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	9700      	str	r7, [sp, #0]
 800da9c:	4633      	mov	r3, r6
 800da9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800daa0:	4621      	mov	r1, r4
 800daa2:	4628      	mov	r0, r5
 800daa4:	f000 f9e6 	bl	800de74 <_printf_common>
 800daa8:	3001      	adds	r0, #1
 800daaa:	f040 808d 	bne.w	800dbc8 <_printf_float+0x1d4>
 800daae:	f04f 30ff 	mov.w	r0, #4294967295
 800dab2:	b00d      	add	sp, #52	; 0x34
 800dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab8:	4642      	mov	r2, r8
 800daba:	464b      	mov	r3, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	4649      	mov	r1, r9
 800dac0:	f7fa ff1c 	bl	80088fc <__aeabi_dcmpun>
 800dac4:	b110      	cbz	r0, 800dacc <_printf_float+0xd8>
 800dac6:	4a8c      	ldr	r2, [pc, #560]	; (800dcf8 <_printf_float+0x304>)
 800dac8:	4b8c      	ldr	r3, [pc, #560]	; (800dcfc <_printf_float+0x308>)
 800daca:	e7da      	b.n	800da82 <_printf_float+0x8e>
 800dacc:	6861      	ldr	r1, [r4, #4]
 800dace:	1c4b      	adds	r3, r1, #1
 800dad0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dad4:	a80a      	add	r0, sp, #40	; 0x28
 800dad6:	d13e      	bne.n	800db56 <_printf_float+0x162>
 800dad8:	2306      	movs	r3, #6
 800dada:	6063      	str	r3, [r4, #4]
 800dadc:	2300      	movs	r3, #0
 800dade:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dae2:	ab09      	add	r3, sp, #36	; 0x24
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	ec49 8b10 	vmov	d0, r8, r9
 800daea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	f8cd a004 	str.w	sl, [sp, #4]
 800daf4:	6861      	ldr	r1, [r4, #4]
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7ff fee8 	bl	800d8cc <__cvt>
 800dafc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800db00:	2b47      	cmp	r3, #71	; 0x47
 800db02:	4680      	mov	r8, r0
 800db04:	d109      	bne.n	800db1a <_printf_float+0x126>
 800db06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db08:	1cd8      	adds	r0, r3, #3
 800db0a:	db02      	blt.n	800db12 <_printf_float+0x11e>
 800db0c:	6862      	ldr	r2, [r4, #4]
 800db0e:	4293      	cmp	r3, r2
 800db10:	dd47      	ble.n	800dba2 <_printf_float+0x1ae>
 800db12:	f1aa 0a02 	sub.w	sl, sl, #2
 800db16:	fa5f fa8a 	uxtb.w	sl, sl
 800db1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800db1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db20:	d824      	bhi.n	800db6c <_printf_float+0x178>
 800db22:	3901      	subs	r1, #1
 800db24:	4652      	mov	r2, sl
 800db26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db2a:	9109      	str	r1, [sp, #36]	; 0x24
 800db2c:	f7ff ff2f 	bl	800d98e <__exponent>
 800db30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db32:	1813      	adds	r3, r2, r0
 800db34:	2a01      	cmp	r2, #1
 800db36:	4681      	mov	r9, r0
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	dc02      	bgt.n	800db42 <_printf_float+0x14e>
 800db3c:	6822      	ldr	r2, [r4, #0]
 800db3e:	07d1      	lsls	r1, r2, #31
 800db40:	d501      	bpl.n	800db46 <_printf_float+0x152>
 800db42:	3301      	adds	r3, #1
 800db44:	6123      	str	r3, [r4, #16]
 800db46:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d0a5      	beq.n	800da9a <_printf_float+0xa6>
 800db4e:	232d      	movs	r3, #45	; 0x2d
 800db50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db54:	e7a1      	b.n	800da9a <_printf_float+0xa6>
 800db56:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800db5a:	f000 8177 	beq.w	800de4c <_printf_float+0x458>
 800db5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800db62:	d1bb      	bne.n	800dadc <_printf_float+0xe8>
 800db64:	2900      	cmp	r1, #0
 800db66:	d1b9      	bne.n	800dadc <_printf_float+0xe8>
 800db68:	2301      	movs	r3, #1
 800db6a:	e7b6      	b.n	800dada <_printf_float+0xe6>
 800db6c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800db70:	d119      	bne.n	800dba6 <_printf_float+0x1b2>
 800db72:	2900      	cmp	r1, #0
 800db74:	6863      	ldr	r3, [r4, #4]
 800db76:	dd0c      	ble.n	800db92 <_printf_float+0x19e>
 800db78:	6121      	str	r1, [r4, #16]
 800db7a:	b913      	cbnz	r3, 800db82 <_printf_float+0x18e>
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	07d2      	lsls	r2, r2, #31
 800db80:	d502      	bpl.n	800db88 <_printf_float+0x194>
 800db82:	3301      	adds	r3, #1
 800db84:	440b      	add	r3, r1
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8a:	65a3      	str	r3, [r4, #88]	; 0x58
 800db8c:	f04f 0900 	mov.w	r9, #0
 800db90:	e7d9      	b.n	800db46 <_printf_float+0x152>
 800db92:	b913      	cbnz	r3, 800db9a <_printf_float+0x1a6>
 800db94:	6822      	ldr	r2, [r4, #0]
 800db96:	07d0      	lsls	r0, r2, #31
 800db98:	d501      	bpl.n	800db9e <_printf_float+0x1aa>
 800db9a:	3302      	adds	r3, #2
 800db9c:	e7f3      	b.n	800db86 <_printf_float+0x192>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e7f1      	b.n	800db86 <_printf_float+0x192>
 800dba2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dba6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	db05      	blt.n	800dbba <_printf_float+0x1c6>
 800dbae:	6822      	ldr	r2, [r4, #0]
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	07d1      	lsls	r1, r2, #31
 800dbb4:	d5e8      	bpl.n	800db88 <_printf_float+0x194>
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	e7e5      	b.n	800db86 <_printf_float+0x192>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfd4      	ite	le
 800dbbe:	f1c3 0302 	rsble	r3, r3, #2
 800dbc2:	2301      	movgt	r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	e7de      	b.n	800db86 <_printf_float+0x192>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	055a      	lsls	r2, r3, #21
 800dbcc:	d407      	bmi.n	800dbde <_printf_float+0x1ea>
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d12b      	bne.n	800dc34 <_printf_float+0x240>
 800dbdc:	e767      	b.n	800daae <_printf_float+0xba>
 800dbde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dbe2:	f240 80dc 	bls.w	800dd9e <_printf_float+0x3aa>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbee:	f7fa fe53 	bl	8008898 <__aeabi_dcmpeq>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d033      	beq.n	800dc5e <_printf_float+0x26a>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	4a41      	ldr	r2, [pc, #260]	; (800dd00 <_printf_float+0x30c>)
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b8      	blx	r7
 800dc00:	3001      	adds	r0, #1
 800dc02:	f43f af54 	beq.w	800daae <_printf_float+0xba>
 800dc06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	db02      	blt.n	800dc14 <_printf_float+0x220>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	07d8      	lsls	r0, r3, #31
 800dc12:	d50f      	bpl.n	800dc34 <_printf_float+0x240>
 800dc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc18:	4631      	mov	r1, r6
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	47b8      	blx	r7
 800dc1e:	3001      	adds	r0, #1
 800dc20:	f43f af45 	beq.w	800daae <_printf_float+0xba>
 800dc24:	f04f 0800 	mov.w	r8, #0
 800dc28:	f104 091a 	add.w	r9, r4, #26
 800dc2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	4543      	cmp	r3, r8
 800dc32:	dc09      	bgt.n	800dc48 <_printf_float+0x254>
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	079b      	lsls	r3, r3, #30
 800dc38:	f100 8103 	bmi.w	800de42 <_printf_float+0x44e>
 800dc3c:	68e0      	ldr	r0, [r4, #12]
 800dc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc40:	4298      	cmp	r0, r3
 800dc42:	bfb8      	it	lt
 800dc44:	4618      	movlt	r0, r3
 800dc46:	e734      	b.n	800dab2 <_printf_float+0xbe>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	464a      	mov	r2, r9
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4628      	mov	r0, r5
 800dc50:	47b8      	blx	r7
 800dc52:	3001      	adds	r0, #1
 800dc54:	f43f af2b 	beq.w	800daae <_printf_float+0xba>
 800dc58:	f108 0801 	add.w	r8, r8, #1
 800dc5c:	e7e6      	b.n	800dc2c <_printf_float+0x238>
 800dc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dc2b      	bgt.n	800dcbc <_printf_float+0x2c8>
 800dc64:	2301      	movs	r3, #1
 800dc66:	4a26      	ldr	r2, [pc, #152]	; (800dd00 <_printf_float+0x30c>)
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	47b8      	blx	r7
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f43f af1d 	beq.w	800daae <_printf_float+0xba>
 800dc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc76:	b923      	cbnz	r3, 800dc82 <_printf_float+0x28e>
 800dc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7a:	b913      	cbnz	r3, 800dc82 <_printf_float+0x28e>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	07d9      	lsls	r1, r3, #31
 800dc80:	d5d8      	bpl.n	800dc34 <_printf_float+0x240>
 800dc82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc86:	4631      	mov	r1, r6
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b8      	blx	r7
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	f43f af0e 	beq.w	800daae <_printf_float+0xba>
 800dc92:	f04f 0900 	mov.w	r9, #0
 800dc96:	f104 0a1a 	add.w	sl, r4, #26
 800dc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9c:	425b      	negs	r3, r3
 800dc9e:	454b      	cmp	r3, r9
 800dca0:	dc01      	bgt.n	800dca6 <_printf_float+0x2b2>
 800dca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca4:	e794      	b.n	800dbd0 <_printf_float+0x1dc>
 800dca6:	2301      	movs	r3, #1
 800dca8:	4652      	mov	r2, sl
 800dcaa:	4631      	mov	r1, r6
 800dcac:	4628      	mov	r0, r5
 800dcae:	47b8      	blx	r7
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	f43f aefc 	beq.w	800daae <_printf_float+0xba>
 800dcb6:	f109 0901 	add.w	r9, r9, #1
 800dcba:	e7ee      	b.n	800dc9a <_printf_float+0x2a6>
 800dcbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	bfa8      	it	ge
 800dcc4:	461a      	movge	r2, r3
 800dcc6:	2a00      	cmp	r2, #0
 800dcc8:	4691      	mov	r9, r2
 800dcca:	dd07      	ble.n	800dcdc <_printf_float+0x2e8>
 800dccc:	4613      	mov	r3, r2
 800dcce:	4631      	mov	r1, r6
 800dcd0:	4642      	mov	r2, r8
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	47b8      	blx	r7
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	f43f aee9 	beq.w	800daae <_printf_float+0xba>
 800dcdc:	f104 031a 	add.w	r3, r4, #26
 800dce0:	f04f 0b00 	mov.w	fp, #0
 800dce4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dce8:	9306      	str	r3, [sp, #24]
 800dcea:	e015      	b.n	800dd18 <_printf_float+0x324>
 800dcec:	7fefffff 	.word	0x7fefffff
 800dcf0:	0800f354 	.word	0x0800f354
 800dcf4:	0800f350 	.word	0x0800f350
 800dcf8:	0800f35c 	.word	0x0800f35c
 800dcfc:	0800f358 	.word	0x0800f358
 800dd00:	0800f360 	.word	0x0800f360
 800dd04:	2301      	movs	r3, #1
 800dd06:	9a06      	ldr	r2, [sp, #24]
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	47b8      	blx	r7
 800dd0e:	3001      	adds	r0, #1
 800dd10:	f43f aecd 	beq.w	800daae <_printf_float+0xba>
 800dd14:	f10b 0b01 	add.w	fp, fp, #1
 800dd18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dd1c:	ebaa 0309 	sub.w	r3, sl, r9
 800dd20:	455b      	cmp	r3, fp
 800dd22:	dcef      	bgt.n	800dd04 <_printf_float+0x310>
 800dd24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	44d0      	add	r8, sl
 800dd2c:	db15      	blt.n	800dd5a <_printf_float+0x366>
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	07da      	lsls	r2, r3, #31
 800dd32:	d412      	bmi.n	800dd5a <_printf_float+0x366>
 800dd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd38:	eba3 020a 	sub.w	r2, r3, sl
 800dd3c:	eba3 0a01 	sub.w	sl, r3, r1
 800dd40:	4592      	cmp	sl, r2
 800dd42:	bfa8      	it	ge
 800dd44:	4692      	movge	sl, r2
 800dd46:	f1ba 0f00 	cmp.w	sl, #0
 800dd4a:	dc0e      	bgt.n	800dd6a <_printf_float+0x376>
 800dd4c:	f04f 0800 	mov.w	r8, #0
 800dd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd54:	f104 091a 	add.w	r9, r4, #26
 800dd58:	e019      	b.n	800dd8e <_printf_float+0x39a>
 800dd5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd5e:	4631      	mov	r1, r6
 800dd60:	4628      	mov	r0, r5
 800dd62:	47b8      	blx	r7
 800dd64:	3001      	adds	r0, #1
 800dd66:	d1e5      	bne.n	800dd34 <_printf_float+0x340>
 800dd68:	e6a1      	b.n	800daae <_printf_float+0xba>
 800dd6a:	4653      	mov	r3, sl
 800dd6c:	4642      	mov	r2, r8
 800dd6e:	4631      	mov	r1, r6
 800dd70:	4628      	mov	r0, r5
 800dd72:	47b8      	blx	r7
 800dd74:	3001      	adds	r0, #1
 800dd76:	d1e9      	bne.n	800dd4c <_printf_float+0x358>
 800dd78:	e699      	b.n	800daae <_printf_float+0xba>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	464a      	mov	r2, r9
 800dd7e:	4631      	mov	r1, r6
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b8      	blx	r7
 800dd84:	3001      	adds	r0, #1
 800dd86:	f43f ae92 	beq.w	800daae <_printf_float+0xba>
 800dd8a:	f108 0801 	add.w	r8, r8, #1
 800dd8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd92:	1a9b      	subs	r3, r3, r2
 800dd94:	eba3 030a 	sub.w	r3, r3, sl
 800dd98:	4543      	cmp	r3, r8
 800dd9a:	dcee      	bgt.n	800dd7a <_printf_float+0x386>
 800dd9c:	e74a      	b.n	800dc34 <_printf_float+0x240>
 800dd9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dda0:	2a01      	cmp	r2, #1
 800dda2:	dc01      	bgt.n	800dda8 <_printf_float+0x3b4>
 800dda4:	07db      	lsls	r3, r3, #31
 800dda6:	d53a      	bpl.n	800de1e <_printf_float+0x42a>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4642      	mov	r2, r8
 800ddac:	4631      	mov	r1, r6
 800ddae:	4628      	mov	r0, r5
 800ddb0:	47b8      	blx	r7
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	f43f ae7b 	beq.w	800daae <_printf_float+0xba>
 800ddb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	47b8      	blx	r7
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	f108 0801 	add.w	r8, r8, #1
 800ddc8:	f43f ae71 	beq.w	800daae <_printf_float+0xba>
 800ddcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f103 3aff 	add.w	sl, r3, #4294967295
 800ddd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f7fa fd5d 	bl	8008898 <__aeabi_dcmpeq>
 800ddde:	b9c8      	cbnz	r0, 800de14 <_printf_float+0x420>
 800dde0:	4653      	mov	r3, sl
 800dde2:	4642      	mov	r2, r8
 800dde4:	4631      	mov	r1, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b8      	blx	r7
 800ddea:	3001      	adds	r0, #1
 800ddec:	d10e      	bne.n	800de0c <_printf_float+0x418>
 800ddee:	e65e      	b.n	800daae <_printf_float+0xba>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4652      	mov	r2, sl
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	47b8      	blx	r7
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	f43f ae57 	beq.w	800daae <_printf_float+0xba>
 800de00:	f108 0801 	add.w	r8, r8, #1
 800de04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de06:	3b01      	subs	r3, #1
 800de08:	4543      	cmp	r3, r8
 800de0a:	dcf1      	bgt.n	800ddf0 <_printf_float+0x3fc>
 800de0c:	464b      	mov	r3, r9
 800de0e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de12:	e6de      	b.n	800dbd2 <_printf_float+0x1de>
 800de14:	f04f 0800 	mov.w	r8, #0
 800de18:	f104 0a1a 	add.w	sl, r4, #26
 800de1c:	e7f2      	b.n	800de04 <_printf_float+0x410>
 800de1e:	2301      	movs	r3, #1
 800de20:	e7df      	b.n	800dde2 <_printf_float+0x3ee>
 800de22:	2301      	movs	r3, #1
 800de24:	464a      	mov	r2, r9
 800de26:	4631      	mov	r1, r6
 800de28:	4628      	mov	r0, r5
 800de2a:	47b8      	blx	r7
 800de2c:	3001      	adds	r0, #1
 800de2e:	f43f ae3e 	beq.w	800daae <_printf_float+0xba>
 800de32:	f108 0801 	add.w	r8, r8, #1
 800de36:	68e3      	ldr	r3, [r4, #12]
 800de38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de3a:	1a9b      	subs	r3, r3, r2
 800de3c:	4543      	cmp	r3, r8
 800de3e:	dcf0      	bgt.n	800de22 <_printf_float+0x42e>
 800de40:	e6fc      	b.n	800dc3c <_printf_float+0x248>
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	f104 0919 	add.w	r9, r4, #25
 800de4a:	e7f4      	b.n	800de36 <_printf_float+0x442>
 800de4c:	2900      	cmp	r1, #0
 800de4e:	f43f ae8b 	beq.w	800db68 <_printf_float+0x174>
 800de52:	2300      	movs	r3, #0
 800de54:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800de58:	ab09      	add	r3, sp, #36	; 0x24
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	ec49 8b10 	vmov	d0, r8, r9
 800de60:	6022      	str	r2, [r4, #0]
 800de62:	f8cd a004 	str.w	sl, [sp, #4]
 800de66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7ff fd2e 	bl	800d8cc <__cvt>
 800de70:	4680      	mov	r8, r0
 800de72:	e648      	b.n	800db06 <_printf_float+0x112>

0800de74 <_printf_common>:
 800de74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de78:	4691      	mov	r9, r2
 800de7a:	461f      	mov	r7, r3
 800de7c:	688a      	ldr	r2, [r1, #8]
 800de7e:	690b      	ldr	r3, [r1, #16]
 800de80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de84:	4293      	cmp	r3, r2
 800de86:	bfb8      	it	lt
 800de88:	4613      	movlt	r3, r2
 800de8a:	f8c9 3000 	str.w	r3, [r9]
 800de8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	b112      	cbz	r2, 800de9e <_printf_common+0x2a>
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c9 3000 	str.w	r3, [r9]
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	0699      	lsls	r1, r3, #26
 800dea2:	bf42      	ittt	mi
 800dea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dea8:	3302      	addmi	r3, #2
 800deaa:	f8c9 3000 	strmi.w	r3, [r9]
 800deae:	6825      	ldr	r5, [r4, #0]
 800deb0:	f015 0506 	ands.w	r5, r5, #6
 800deb4:	d107      	bne.n	800dec6 <_printf_common+0x52>
 800deb6:	f104 0a19 	add.w	sl, r4, #25
 800deba:	68e3      	ldr	r3, [r4, #12]
 800debc:	f8d9 2000 	ldr.w	r2, [r9]
 800dec0:	1a9b      	subs	r3, r3, r2
 800dec2:	42ab      	cmp	r3, r5
 800dec4:	dc28      	bgt.n	800df18 <_printf_common+0xa4>
 800dec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	3300      	adds	r3, #0
 800dece:	bf18      	it	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	0692      	lsls	r2, r2, #26
 800ded4:	d42d      	bmi.n	800df32 <_printf_common+0xbe>
 800ded6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800deda:	4639      	mov	r1, r7
 800dedc:	4630      	mov	r0, r6
 800dede:	47c0      	blx	r8
 800dee0:	3001      	adds	r0, #1
 800dee2:	d020      	beq.n	800df26 <_printf_common+0xb2>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	68e5      	ldr	r5, [r4, #12]
 800dee8:	f8d9 2000 	ldr.w	r2, [r9]
 800deec:	f003 0306 	and.w	r3, r3, #6
 800def0:	2b04      	cmp	r3, #4
 800def2:	bf08      	it	eq
 800def4:	1aad      	subeq	r5, r5, r2
 800def6:	68a3      	ldr	r3, [r4, #8]
 800def8:	6922      	ldr	r2, [r4, #16]
 800defa:	bf0c      	ite	eq
 800defc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df00:	2500      	movne	r5, #0
 800df02:	4293      	cmp	r3, r2
 800df04:	bfc4      	itt	gt
 800df06:	1a9b      	subgt	r3, r3, r2
 800df08:	18ed      	addgt	r5, r5, r3
 800df0a:	f04f 0900 	mov.w	r9, #0
 800df0e:	341a      	adds	r4, #26
 800df10:	454d      	cmp	r5, r9
 800df12:	d11a      	bne.n	800df4a <_printf_common+0xd6>
 800df14:	2000      	movs	r0, #0
 800df16:	e008      	b.n	800df2a <_printf_common+0xb6>
 800df18:	2301      	movs	r3, #1
 800df1a:	4652      	mov	r2, sl
 800df1c:	4639      	mov	r1, r7
 800df1e:	4630      	mov	r0, r6
 800df20:	47c0      	blx	r8
 800df22:	3001      	adds	r0, #1
 800df24:	d103      	bne.n	800df2e <_printf_common+0xba>
 800df26:	f04f 30ff 	mov.w	r0, #4294967295
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	3501      	adds	r5, #1
 800df30:	e7c3      	b.n	800deba <_printf_common+0x46>
 800df32:	18e1      	adds	r1, r4, r3
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	2030      	movs	r0, #48	; 0x30
 800df38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df3c:	4422      	add	r2, r4
 800df3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df46:	3302      	adds	r3, #2
 800df48:	e7c5      	b.n	800ded6 <_printf_common+0x62>
 800df4a:	2301      	movs	r3, #1
 800df4c:	4622      	mov	r2, r4
 800df4e:	4639      	mov	r1, r7
 800df50:	4630      	mov	r0, r6
 800df52:	47c0      	blx	r8
 800df54:	3001      	adds	r0, #1
 800df56:	d0e6      	beq.n	800df26 <_printf_common+0xb2>
 800df58:	f109 0901 	add.w	r9, r9, #1
 800df5c:	e7d8      	b.n	800df10 <_printf_common+0x9c>

0800df5e <quorem>:
 800df5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df62:	6903      	ldr	r3, [r0, #16]
 800df64:	690c      	ldr	r4, [r1, #16]
 800df66:	42a3      	cmp	r3, r4
 800df68:	4680      	mov	r8, r0
 800df6a:	f2c0 8082 	blt.w	800e072 <quorem+0x114>
 800df6e:	3c01      	subs	r4, #1
 800df70:	f101 0714 	add.w	r7, r1, #20
 800df74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800df78:	f100 0614 	add.w	r6, r0, #20
 800df7c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800df80:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800df84:	eb06 030c 	add.w	r3, r6, ip
 800df88:	3501      	adds	r5, #1
 800df8a:	eb07 090c 	add.w	r9, r7, ip
 800df8e:	9301      	str	r3, [sp, #4]
 800df90:	fbb0 f5f5 	udiv	r5, r0, r5
 800df94:	b395      	cbz	r5, 800dffc <quorem+0x9e>
 800df96:	f04f 0a00 	mov.w	sl, #0
 800df9a:	4638      	mov	r0, r7
 800df9c:	46b6      	mov	lr, r6
 800df9e:	46d3      	mov	fp, sl
 800dfa0:	f850 2b04 	ldr.w	r2, [r0], #4
 800dfa4:	b293      	uxth	r3, r2
 800dfa6:	fb05 a303 	mla	r3, r5, r3, sl
 800dfaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	ebab 0303 	sub.w	r3, fp, r3
 800dfb4:	0c12      	lsrs	r2, r2, #16
 800dfb6:	f8de b000 	ldr.w	fp, [lr]
 800dfba:	fb05 a202 	mla	r2, r5, r2, sl
 800dfbe:	fa13 f38b 	uxtah	r3, r3, fp
 800dfc2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dfc6:	fa1f fb82 	uxth.w	fp, r2
 800dfca:	f8de 2000 	ldr.w	r2, [lr]
 800dfce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dfd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfdc:	4581      	cmp	r9, r0
 800dfde:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dfe2:	f84e 3b04 	str.w	r3, [lr], #4
 800dfe6:	d2db      	bcs.n	800dfa0 <quorem+0x42>
 800dfe8:	f856 300c 	ldr.w	r3, [r6, ip]
 800dfec:	b933      	cbnz	r3, 800dffc <quorem+0x9e>
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	3b04      	subs	r3, #4
 800dff2:	429e      	cmp	r6, r3
 800dff4:	461a      	mov	r2, r3
 800dff6:	d330      	bcc.n	800e05a <quorem+0xfc>
 800dff8:	f8c8 4010 	str.w	r4, [r8, #16]
 800dffc:	4640      	mov	r0, r8
 800dffe:	f001 f829 	bl	800f054 <__mcmp>
 800e002:	2800      	cmp	r0, #0
 800e004:	db25      	blt.n	800e052 <quorem+0xf4>
 800e006:	3501      	adds	r5, #1
 800e008:	4630      	mov	r0, r6
 800e00a:	f04f 0c00 	mov.w	ip, #0
 800e00e:	f857 2b04 	ldr.w	r2, [r7], #4
 800e012:	f8d0 e000 	ldr.w	lr, [r0]
 800e016:	b293      	uxth	r3, r2
 800e018:	ebac 0303 	sub.w	r3, ip, r3
 800e01c:	0c12      	lsrs	r2, r2, #16
 800e01e:	fa13 f38e 	uxtah	r3, r3, lr
 800e022:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e030:	45b9      	cmp	r9, r7
 800e032:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e036:	f840 3b04 	str.w	r3, [r0], #4
 800e03a:	d2e8      	bcs.n	800e00e <quorem+0xb0>
 800e03c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e040:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e044:	b92a      	cbnz	r2, 800e052 <quorem+0xf4>
 800e046:	3b04      	subs	r3, #4
 800e048:	429e      	cmp	r6, r3
 800e04a:	461a      	mov	r2, r3
 800e04c:	d30b      	bcc.n	800e066 <quorem+0x108>
 800e04e:	f8c8 4010 	str.w	r4, [r8, #16]
 800e052:	4628      	mov	r0, r5
 800e054:	b003      	add	sp, #12
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05a:	6812      	ldr	r2, [r2, #0]
 800e05c:	3b04      	subs	r3, #4
 800e05e:	2a00      	cmp	r2, #0
 800e060:	d1ca      	bne.n	800dff8 <quorem+0x9a>
 800e062:	3c01      	subs	r4, #1
 800e064:	e7c5      	b.n	800dff2 <quorem+0x94>
 800e066:	6812      	ldr	r2, [r2, #0]
 800e068:	3b04      	subs	r3, #4
 800e06a:	2a00      	cmp	r2, #0
 800e06c:	d1ef      	bne.n	800e04e <quorem+0xf0>
 800e06e:	3c01      	subs	r4, #1
 800e070:	e7ea      	b.n	800e048 <quorem+0xea>
 800e072:	2000      	movs	r0, #0
 800e074:	e7ee      	b.n	800e054 <quorem+0xf6>
	...

0800e078 <_dtoa_r>:
 800e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	ec57 6b10 	vmov	r6, r7, d0
 800e080:	b097      	sub	sp, #92	; 0x5c
 800e082:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e084:	9106      	str	r1, [sp, #24]
 800e086:	4604      	mov	r4, r0
 800e088:	920b      	str	r2, [sp, #44]	; 0x2c
 800e08a:	9312      	str	r3, [sp, #72]	; 0x48
 800e08c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e090:	e9cd 6700 	strd	r6, r7, [sp]
 800e094:	b93d      	cbnz	r5, 800e0a6 <_dtoa_r+0x2e>
 800e096:	2010      	movs	r0, #16
 800e098:	f000 fdb4 	bl	800ec04 <malloc>
 800e09c:	6260      	str	r0, [r4, #36]	; 0x24
 800e09e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e0a2:	6005      	str	r5, [r0, #0]
 800e0a4:	60c5      	str	r5, [r0, #12]
 800e0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0a8:	6819      	ldr	r1, [r3, #0]
 800e0aa:	b151      	cbz	r1, 800e0c2 <_dtoa_r+0x4a>
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	604a      	str	r2, [r1, #4]
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	4093      	lsls	r3, r2
 800e0b4:	608b      	str	r3, [r1, #8]
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 fdeb 	bl	800ec92 <_Bfree>
 800e0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	1e3b      	subs	r3, r7, #0
 800e0c4:	bfbb      	ittet	lt
 800e0c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e0ca:	9301      	strlt	r3, [sp, #4]
 800e0cc:	2300      	movge	r3, #0
 800e0ce:	2201      	movlt	r2, #1
 800e0d0:	bfac      	ite	ge
 800e0d2:	f8c8 3000 	strge.w	r3, [r8]
 800e0d6:	f8c8 2000 	strlt.w	r2, [r8]
 800e0da:	4baf      	ldr	r3, [pc, #700]	; (800e398 <_dtoa_r+0x320>)
 800e0dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e0e0:	ea33 0308 	bics.w	r3, r3, r8
 800e0e4:	d114      	bne.n	800e110 <_dtoa_r+0x98>
 800e0e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	9b00      	ldr	r3, [sp, #0]
 800e0f0:	b923      	cbnz	r3, 800e0fc <_dtoa_r+0x84>
 800e0f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f000 8542 	beq.w	800eb80 <_dtoa_r+0xb08>
 800e0fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e3ac <_dtoa_r+0x334>
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 8544 	beq.w	800eb90 <_dtoa_r+0xb18>
 800e108:	f10b 0303 	add.w	r3, fp, #3
 800e10c:	f000 bd3e 	b.w	800eb8c <_dtoa_r+0xb14>
 800e110:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e114:	2200      	movs	r2, #0
 800e116:	2300      	movs	r3, #0
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7fa fbbc 	bl	8008898 <__aeabi_dcmpeq>
 800e120:	4681      	mov	r9, r0
 800e122:	b168      	cbz	r0, 800e140 <_dtoa_r+0xc8>
 800e124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e126:	2301      	movs	r3, #1
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 8524 	beq.w	800eb7a <_dtoa_r+0xb02>
 800e132:	4b9a      	ldr	r3, [pc, #616]	; (800e39c <_dtoa_r+0x324>)
 800e134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e136:	f103 3bff 	add.w	fp, r3, #4294967295
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	f000 bd28 	b.w	800eb90 <_dtoa_r+0xb18>
 800e140:	aa14      	add	r2, sp, #80	; 0x50
 800e142:	a915      	add	r1, sp, #84	; 0x54
 800e144:	ec47 6b10 	vmov	d0, r6, r7
 800e148:	4620      	mov	r0, r4
 800e14a:	f000 fffa 	bl	800f142 <__d2b>
 800e14e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e152:	9004      	str	r0, [sp, #16]
 800e154:	2d00      	cmp	r5, #0
 800e156:	d07c      	beq.n	800e252 <_dtoa_r+0x1da>
 800e158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e15c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e160:	46b2      	mov	sl, r6
 800e162:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e16a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e16e:	2200      	movs	r2, #0
 800e170:	4b8b      	ldr	r3, [pc, #556]	; (800e3a0 <_dtoa_r+0x328>)
 800e172:	4650      	mov	r0, sl
 800e174:	4659      	mov	r1, fp
 800e176:	f7f9 ff6f 	bl	8008058 <__aeabi_dsub>
 800e17a:	a381      	add	r3, pc, #516	; (adr r3, 800e380 <_dtoa_r+0x308>)
 800e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e180:	f7fa f922 	bl	80083c8 <__aeabi_dmul>
 800e184:	a380      	add	r3, pc, #512	; (adr r3, 800e388 <_dtoa_r+0x310>)
 800e186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18a:	f7f9 ff67 	bl	800805c <__adddf3>
 800e18e:	4606      	mov	r6, r0
 800e190:	4628      	mov	r0, r5
 800e192:	460f      	mov	r7, r1
 800e194:	f7fa f8ae 	bl	80082f4 <__aeabi_i2d>
 800e198:	a37d      	add	r3, pc, #500	; (adr r3, 800e390 <_dtoa_r+0x318>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7fa f913 	bl	80083c8 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	4639      	mov	r1, r7
 800e1aa:	f7f9 ff57 	bl	800805c <__adddf3>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	460f      	mov	r7, r1
 800e1b2:	f7fa fbb9 	bl	8008928 <__aeabi_d2iz>
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	4682      	mov	sl, r0
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	4630      	mov	r0, r6
 800e1be:	4639      	mov	r1, r7
 800e1c0:	f7fa fb74 	bl	80088ac <__aeabi_dcmplt>
 800e1c4:	b148      	cbz	r0, 800e1da <_dtoa_r+0x162>
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	f7fa f894 	bl	80082f4 <__aeabi_i2d>
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	f7fa fb62 	bl	8008898 <__aeabi_dcmpeq>
 800e1d4:	b908      	cbnz	r0, 800e1da <_dtoa_r+0x162>
 800e1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1da:	f1ba 0f16 	cmp.w	sl, #22
 800e1de:	d859      	bhi.n	800e294 <_dtoa_r+0x21c>
 800e1e0:	4970      	ldr	r1, [pc, #448]	; (800e3a4 <_dtoa_r+0x32c>)
 800e1e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e1e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ee:	f7fa fb7b 	bl	80088e8 <__aeabi_dcmpgt>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d050      	beq.n	800e298 <_dtoa_r+0x220>
 800e1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e200:	1b5d      	subs	r5, r3, r5
 800e202:	f1b5 0801 	subs.w	r8, r5, #1
 800e206:	bf49      	itett	mi
 800e208:	f1c5 0301 	rsbmi	r3, r5, #1
 800e20c:	2300      	movpl	r3, #0
 800e20e:	9305      	strmi	r3, [sp, #20]
 800e210:	f04f 0800 	movmi.w	r8, #0
 800e214:	bf58      	it	pl
 800e216:	9305      	strpl	r3, [sp, #20]
 800e218:	f1ba 0f00 	cmp.w	sl, #0
 800e21c:	db3e      	blt.n	800e29c <_dtoa_r+0x224>
 800e21e:	2300      	movs	r3, #0
 800e220:	44d0      	add	r8, sl
 800e222:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e226:	9307      	str	r3, [sp, #28]
 800e228:	9b06      	ldr	r3, [sp, #24]
 800e22a:	2b09      	cmp	r3, #9
 800e22c:	f200 8090 	bhi.w	800e350 <_dtoa_r+0x2d8>
 800e230:	2b05      	cmp	r3, #5
 800e232:	bfc4      	itt	gt
 800e234:	3b04      	subgt	r3, #4
 800e236:	9306      	strgt	r3, [sp, #24]
 800e238:	9b06      	ldr	r3, [sp, #24]
 800e23a:	f1a3 0302 	sub.w	r3, r3, #2
 800e23e:	bfcc      	ite	gt
 800e240:	2500      	movgt	r5, #0
 800e242:	2501      	movle	r5, #1
 800e244:	2b03      	cmp	r3, #3
 800e246:	f200 808f 	bhi.w	800e368 <_dtoa_r+0x2f0>
 800e24a:	e8df f003 	tbb	[pc, r3]
 800e24e:	7f7d      	.short	0x7f7d
 800e250:	7131      	.short	0x7131
 800e252:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e256:	441d      	add	r5, r3
 800e258:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e25c:	2820      	cmp	r0, #32
 800e25e:	dd13      	ble.n	800e288 <_dtoa_r+0x210>
 800e260:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e264:	9b00      	ldr	r3, [sp, #0]
 800e266:	fa08 f800 	lsl.w	r8, r8, r0
 800e26a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e26e:	fa23 f000 	lsr.w	r0, r3, r0
 800e272:	ea48 0000 	orr.w	r0, r8, r0
 800e276:	f7fa f82d 	bl	80082d4 <__aeabi_ui2d>
 800e27a:	2301      	movs	r3, #1
 800e27c:	4682      	mov	sl, r0
 800e27e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e282:	3d01      	subs	r5, #1
 800e284:	9313      	str	r3, [sp, #76]	; 0x4c
 800e286:	e772      	b.n	800e16e <_dtoa_r+0xf6>
 800e288:	9b00      	ldr	r3, [sp, #0]
 800e28a:	f1c0 0020 	rsb	r0, r0, #32
 800e28e:	fa03 f000 	lsl.w	r0, r3, r0
 800e292:	e7f0      	b.n	800e276 <_dtoa_r+0x1fe>
 800e294:	2301      	movs	r3, #1
 800e296:	e7b1      	b.n	800e1fc <_dtoa_r+0x184>
 800e298:	900f      	str	r0, [sp, #60]	; 0x3c
 800e29a:	e7b0      	b.n	800e1fe <_dtoa_r+0x186>
 800e29c:	9b05      	ldr	r3, [sp, #20]
 800e29e:	eba3 030a 	sub.w	r3, r3, sl
 800e2a2:	9305      	str	r3, [sp, #20]
 800e2a4:	f1ca 0300 	rsb	r3, sl, #0
 800e2a8:	9307      	str	r3, [sp, #28]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800e2ae:	e7bb      	b.n	800e228 <_dtoa_r+0x1b0>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	dd59      	ble.n	800e36e <_dtoa_r+0x2f6>
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	4699      	mov	r9, r3
 800e2be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	6072      	str	r2, [r6, #4]
 800e2c4:	2204      	movs	r2, #4
 800e2c6:	f102 0014 	add.w	r0, r2, #20
 800e2ca:	4298      	cmp	r0, r3
 800e2cc:	6871      	ldr	r1, [r6, #4]
 800e2ce:	d953      	bls.n	800e378 <_dtoa_r+0x300>
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f000 fcaa 	bl	800ec2a <_Balloc>
 800e2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d8:	6030      	str	r0, [r6, #0]
 800e2da:	f1b9 0f0e 	cmp.w	r9, #14
 800e2de:	f8d3 b000 	ldr.w	fp, [r3]
 800e2e2:	f200 80e6 	bhi.w	800e4b2 <_dtoa_r+0x43a>
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	f000 80e3 	beq.w	800e4b2 <_dtoa_r+0x43a>
 800e2ec:	ed9d 7b00 	vldr	d7, [sp]
 800e2f0:	f1ba 0f00 	cmp.w	sl, #0
 800e2f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e2f8:	dd74      	ble.n	800e3e4 <_dtoa_r+0x36c>
 800e2fa:	4a2a      	ldr	r2, [pc, #168]	; (800e3a4 <_dtoa_r+0x32c>)
 800e2fc:	f00a 030f 	and.w	r3, sl, #15
 800e300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e304:	ed93 7b00 	vldr	d7, [r3]
 800e308:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e30c:	06f0      	lsls	r0, r6, #27
 800e30e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e312:	d565      	bpl.n	800e3e0 <_dtoa_r+0x368>
 800e314:	4b24      	ldr	r3, [pc, #144]	; (800e3a8 <_dtoa_r+0x330>)
 800e316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e31a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e31e:	f7fa f97d 	bl	800861c <__aeabi_ddiv>
 800e322:	e9cd 0100 	strd	r0, r1, [sp]
 800e326:	f006 060f 	and.w	r6, r6, #15
 800e32a:	2503      	movs	r5, #3
 800e32c:	4f1e      	ldr	r7, [pc, #120]	; (800e3a8 <_dtoa_r+0x330>)
 800e32e:	e04c      	b.n	800e3ca <_dtoa_r+0x352>
 800e330:	2301      	movs	r3, #1
 800e332:	930a      	str	r3, [sp, #40]	; 0x28
 800e334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e336:	4453      	add	r3, sl
 800e338:	f103 0901 	add.w	r9, r3, #1
 800e33c:	9302      	str	r3, [sp, #8]
 800e33e:	464b      	mov	r3, r9
 800e340:	2b01      	cmp	r3, #1
 800e342:	bfb8      	it	lt
 800e344:	2301      	movlt	r3, #1
 800e346:	e7ba      	b.n	800e2be <_dtoa_r+0x246>
 800e348:	2300      	movs	r3, #0
 800e34a:	e7b2      	b.n	800e2b2 <_dtoa_r+0x23a>
 800e34c:	2300      	movs	r3, #0
 800e34e:	e7f0      	b.n	800e332 <_dtoa_r+0x2ba>
 800e350:	2501      	movs	r5, #1
 800e352:	2300      	movs	r3, #0
 800e354:	9306      	str	r3, [sp, #24]
 800e356:	950a      	str	r5, [sp, #40]	; 0x28
 800e358:	f04f 33ff 	mov.w	r3, #4294967295
 800e35c:	9302      	str	r3, [sp, #8]
 800e35e:	4699      	mov	r9, r3
 800e360:	2200      	movs	r2, #0
 800e362:	2312      	movs	r3, #18
 800e364:	920b      	str	r2, [sp, #44]	; 0x2c
 800e366:	e7aa      	b.n	800e2be <_dtoa_r+0x246>
 800e368:	2301      	movs	r3, #1
 800e36a:	930a      	str	r3, [sp, #40]	; 0x28
 800e36c:	e7f4      	b.n	800e358 <_dtoa_r+0x2e0>
 800e36e:	2301      	movs	r3, #1
 800e370:	9302      	str	r3, [sp, #8]
 800e372:	4699      	mov	r9, r3
 800e374:	461a      	mov	r2, r3
 800e376:	e7f5      	b.n	800e364 <_dtoa_r+0x2ec>
 800e378:	3101      	adds	r1, #1
 800e37a:	6071      	str	r1, [r6, #4]
 800e37c:	0052      	lsls	r2, r2, #1
 800e37e:	e7a2      	b.n	800e2c6 <_dtoa_r+0x24e>
 800e380:	636f4361 	.word	0x636f4361
 800e384:	3fd287a7 	.word	0x3fd287a7
 800e388:	8b60c8b3 	.word	0x8b60c8b3
 800e38c:	3fc68a28 	.word	0x3fc68a28
 800e390:	509f79fb 	.word	0x509f79fb
 800e394:	3fd34413 	.word	0x3fd34413
 800e398:	7ff00000 	.word	0x7ff00000
 800e39c:	0800f361 	.word	0x0800f361
 800e3a0:	3ff80000 	.word	0x3ff80000
 800e3a4:	0800f398 	.word	0x0800f398
 800e3a8:	0800f370 	.word	0x0800f370
 800e3ac:	0800f36b 	.word	0x0800f36b
 800e3b0:	07f1      	lsls	r1, r6, #31
 800e3b2:	d508      	bpl.n	800e3c6 <_dtoa_r+0x34e>
 800e3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3bc:	f7fa f804 	bl	80083c8 <__aeabi_dmul>
 800e3c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3c4:	3501      	adds	r5, #1
 800e3c6:	1076      	asrs	r6, r6, #1
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	2e00      	cmp	r6, #0
 800e3cc:	d1f0      	bne.n	800e3b0 <_dtoa_r+0x338>
 800e3ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3d6:	f7fa f921 	bl	800861c <__aeabi_ddiv>
 800e3da:	e9cd 0100 	strd	r0, r1, [sp]
 800e3de:	e01a      	b.n	800e416 <_dtoa_r+0x39e>
 800e3e0:	2502      	movs	r5, #2
 800e3e2:	e7a3      	b.n	800e32c <_dtoa_r+0x2b4>
 800e3e4:	f000 80a0 	beq.w	800e528 <_dtoa_r+0x4b0>
 800e3e8:	f1ca 0600 	rsb	r6, sl, #0
 800e3ec:	4b9f      	ldr	r3, [pc, #636]	; (800e66c <_dtoa_r+0x5f4>)
 800e3ee:	4fa0      	ldr	r7, [pc, #640]	; (800e670 <_dtoa_r+0x5f8>)
 800e3f0:	f006 020f 	and.w	r2, r6, #15
 800e3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e400:	f7f9 ffe2 	bl	80083c8 <__aeabi_dmul>
 800e404:	e9cd 0100 	strd	r0, r1, [sp]
 800e408:	1136      	asrs	r6, r6, #4
 800e40a:	2300      	movs	r3, #0
 800e40c:	2502      	movs	r5, #2
 800e40e:	2e00      	cmp	r6, #0
 800e410:	d17f      	bne.n	800e512 <_dtoa_r+0x49a>
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1e1      	bne.n	800e3da <_dtoa_r+0x362>
 800e416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 8087 	beq.w	800e52c <_dtoa_r+0x4b4>
 800e41e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e422:	2200      	movs	r2, #0
 800e424:	4b93      	ldr	r3, [pc, #588]	; (800e674 <_dtoa_r+0x5fc>)
 800e426:	4630      	mov	r0, r6
 800e428:	4639      	mov	r1, r7
 800e42a:	f7fa fa3f 	bl	80088ac <__aeabi_dcmplt>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d07c      	beq.n	800e52c <_dtoa_r+0x4b4>
 800e432:	f1b9 0f00 	cmp.w	r9, #0
 800e436:	d079      	beq.n	800e52c <_dtoa_r+0x4b4>
 800e438:	9b02      	ldr	r3, [sp, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dd35      	ble.n	800e4aa <_dtoa_r+0x432>
 800e43e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e442:	9308      	str	r3, [sp, #32]
 800e444:	4639      	mov	r1, r7
 800e446:	2200      	movs	r2, #0
 800e448:	4b8b      	ldr	r3, [pc, #556]	; (800e678 <_dtoa_r+0x600>)
 800e44a:	4630      	mov	r0, r6
 800e44c:	f7f9 ffbc 	bl	80083c8 <__aeabi_dmul>
 800e450:	e9cd 0100 	strd	r0, r1, [sp]
 800e454:	9f02      	ldr	r7, [sp, #8]
 800e456:	3501      	adds	r5, #1
 800e458:	4628      	mov	r0, r5
 800e45a:	f7f9 ff4b 	bl	80082f4 <__aeabi_i2d>
 800e45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e462:	f7f9 ffb1 	bl	80083c8 <__aeabi_dmul>
 800e466:	2200      	movs	r2, #0
 800e468:	4b84      	ldr	r3, [pc, #528]	; (800e67c <_dtoa_r+0x604>)
 800e46a:	f7f9 fdf7 	bl	800805c <__adddf3>
 800e46e:	4605      	mov	r5, r0
 800e470:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e474:	2f00      	cmp	r7, #0
 800e476:	d15d      	bne.n	800e534 <_dtoa_r+0x4bc>
 800e478:	2200      	movs	r2, #0
 800e47a:	4b81      	ldr	r3, [pc, #516]	; (800e680 <_dtoa_r+0x608>)
 800e47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e480:	f7f9 fdea 	bl	8008058 <__aeabi_dsub>
 800e484:	462a      	mov	r2, r5
 800e486:	4633      	mov	r3, r6
 800e488:	e9cd 0100 	strd	r0, r1, [sp]
 800e48c:	f7fa fa2c 	bl	80088e8 <__aeabi_dcmpgt>
 800e490:	2800      	cmp	r0, #0
 800e492:	f040 8288 	bne.w	800e9a6 <_dtoa_r+0x92e>
 800e496:	462a      	mov	r2, r5
 800e498:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4a0:	f7fa fa04 	bl	80088ac <__aeabi_dcmplt>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	f040 827c 	bne.w	800e9a2 <_dtoa_r+0x92a>
 800e4aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4ae:	e9cd 2300 	strd	r2, r3, [sp]
 800e4b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f2c0 8150 	blt.w	800e75a <_dtoa_r+0x6e2>
 800e4ba:	f1ba 0f0e 	cmp.w	sl, #14
 800e4be:	f300 814c 	bgt.w	800e75a <_dtoa_r+0x6e2>
 800e4c2:	4b6a      	ldr	r3, [pc, #424]	; (800e66c <_dtoa_r+0x5f4>)
 800e4c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e4c8:	ed93 7b00 	vldr	d7, [r3]
 800e4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4d4:	f280 80d8 	bge.w	800e688 <_dtoa_r+0x610>
 800e4d8:	f1b9 0f00 	cmp.w	r9, #0
 800e4dc:	f300 80d4 	bgt.w	800e688 <_dtoa_r+0x610>
 800e4e0:	f040 825e 	bne.w	800e9a0 <_dtoa_r+0x928>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	4b66      	ldr	r3, [pc, #408]	; (800e680 <_dtoa_r+0x608>)
 800e4e8:	ec51 0b17 	vmov	r0, r1, d7
 800e4ec:	f7f9 ff6c 	bl	80083c8 <__aeabi_dmul>
 800e4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4f4:	f7fa f9ee 	bl	80088d4 <__aeabi_dcmpge>
 800e4f8:	464f      	mov	r7, r9
 800e4fa:	464e      	mov	r6, r9
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	f040 8234 	bne.w	800e96a <_dtoa_r+0x8f2>
 800e502:	2331      	movs	r3, #49	; 0x31
 800e504:	f10b 0501 	add.w	r5, fp, #1
 800e508:	f88b 3000 	strb.w	r3, [fp]
 800e50c:	f10a 0a01 	add.w	sl, sl, #1
 800e510:	e22f      	b.n	800e972 <_dtoa_r+0x8fa>
 800e512:	07f2      	lsls	r2, r6, #31
 800e514:	d505      	bpl.n	800e522 <_dtoa_r+0x4aa>
 800e516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e51a:	f7f9 ff55 	bl	80083c8 <__aeabi_dmul>
 800e51e:	3501      	adds	r5, #1
 800e520:	2301      	movs	r3, #1
 800e522:	1076      	asrs	r6, r6, #1
 800e524:	3708      	adds	r7, #8
 800e526:	e772      	b.n	800e40e <_dtoa_r+0x396>
 800e528:	2502      	movs	r5, #2
 800e52a:	e774      	b.n	800e416 <_dtoa_r+0x39e>
 800e52c:	f8cd a020 	str.w	sl, [sp, #32]
 800e530:	464f      	mov	r7, r9
 800e532:	e791      	b.n	800e458 <_dtoa_r+0x3e0>
 800e534:	4b4d      	ldr	r3, [pc, #308]	; (800e66c <_dtoa_r+0x5f4>)
 800e536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e53a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e540:	2b00      	cmp	r3, #0
 800e542:	d047      	beq.n	800e5d4 <_dtoa_r+0x55c>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	2000      	movs	r0, #0
 800e54a:	494e      	ldr	r1, [pc, #312]	; (800e684 <_dtoa_r+0x60c>)
 800e54c:	f7fa f866 	bl	800861c <__aeabi_ddiv>
 800e550:	462a      	mov	r2, r5
 800e552:	4633      	mov	r3, r6
 800e554:	f7f9 fd80 	bl	8008058 <__aeabi_dsub>
 800e558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e55c:	465d      	mov	r5, fp
 800e55e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e562:	f7fa f9e1 	bl	8008928 <__aeabi_d2iz>
 800e566:	4606      	mov	r6, r0
 800e568:	f7f9 fec4 	bl	80082f4 <__aeabi_i2d>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e574:	f7f9 fd70 	bl	8008058 <__aeabi_dsub>
 800e578:	3630      	adds	r6, #48	; 0x30
 800e57a:	f805 6b01 	strb.w	r6, [r5], #1
 800e57e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e582:	e9cd 0100 	strd	r0, r1, [sp]
 800e586:	f7fa f991 	bl	80088ac <__aeabi_dcmplt>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d163      	bne.n	800e656 <_dtoa_r+0x5de>
 800e58e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e592:	2000      	movs	r0, #0
 800e594:	4937      	ldr	r1, [pc, #220]	; (800e674 <_dtoa_r+0x5fc>)
 800e596:	f7f9 fd5f 	bl	8008058 <__aeabi_dsub>
 800e59a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e59e:	f7fa f985 	bl	80088ac <__aeabi_dcmplt>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	f040 80b7 	bne.w	800e716 <_dtoa_r+0x69e>
 800e5a8:	eba5 030b 	sub.w	r3, r5, fp
 800e5ac:	429f      	cmp	r7, r3
 800e5ae:	f77f af7c 	ble.w	800e4aa <_dtoa_r+0x432>
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4b30      	ldr	r3, [pc, #192]	; (800e678 <_dtoa_r+0x600>)
 800e5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5ba:	f7f9 ff05 	bl	80083c8 <__aeabi_dmul>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e5c4:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <_dtoa_r+0x600>)
 800e5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5ca:	f7f9 fefd 	bl	80083c8 <__aeabi_dmul>
 800e5ce:	e9cd 0100 	strd	r0, r1, [sp]
 800e5d2:	e7c4      	b.n	800e55e <_dtoa_r+0x4e6>
 800e5d4:	462a      	mov	r2, r5
 800e5d6:	4633      	mov	r3, r6
 800e5d8:	f7f9 fef6 	bl	80083c8 <__aeabi_dmul>
 800e5dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e5e0:	eb0b 0507 	add.w	r5, fp, r7
 800e5e4:	465e      	mov	r6, fp
 800e5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5ea:	f7fa f99d 	bl	8008928 <__aeabi_d2iz>
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	f7f9 fe80 	bl	80082f4 <__aeabi_i2d>
 800e5f4:	3730      	adds	r7, #48	; 0x30
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5fe:	f7f9 fd2b 	bl	8008058 <__aeabi_dsub>
 800e602:	f806 7b01 	strb.w	r7, [r6], #1
 800e606:	42ae      	cmp	r6, r5
 800e608:	e9cd 0100 	strd	r0, r1, [sp]
 800e60c:	f04f 0200 	mov.w	r2, #0
 800e610:	d126      	bne.n	800e660 <_dtoa_r+0x5e8>
 800e612:	4b1c      	ldr	r3, [pc, #112]	; (800e684 <_dtoa_r+0x60c>)
 800e614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e618:	f7f9 fd20 	bl	800805c <__adddf3>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e624:	f7fa f960 	bl	80088e8 <__aeabi_dcmpgt>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d174      	bne.n	800e716 <_dtoa_r+0x69e>
 800e62c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e630:	2000      	movs	r0, #0
 800e632:	4914      	ldr	r1, [pc, #80]	; (800e684 <_dtoa_r+0x60c>)
 800e634:	f7f9 fd10 	bl	8008058 <__aeabi_dsub>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e640:	f7fa f934 	bl	80088ac <__aeabi_dcmplt>
 800e644:	2800      	cmp	r0, #0
 800e646:	f43f af30 	beq.w	800e4aa <_dtoa_r+0x432>
 800e64a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e64e:	2b30      	cmp	r3, #48	; 0x30
 800e650:	f105 32ff 	add.w	r2, r5, #4294967295
 800e654:	d002      	beq.n	800e65c <_dtoa_r+0x5e4>
 800e656:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e65a:	e04a      	b.n	800e6f2 <_dtoa_r+0x67a>
 800e65c:	4615      	mov	r5, r2
 800e65e:	e7f4      	b.n	800e64a <_dtoa_r+0x5d2>
 800e660:	4b05      	ldr	r3, [pc, #20]	; (800e678 <_dtoa_r+0x600>)
 800e662:	f7f9 feb1 	bl	80083c8 <__aeabi_dmul>
 800e666:	e9cd 0100 	strd	r0, r1, [sp]
 800e66a:	e7bc      	b.n	800e5e6 <_dtoa_r+0x56e>
 800e66c:	0800f398 	.word	0x0800f398
 800e670:	0800f370 	.word	0x0800f370
 800e674:	3ff00000 	.word	0x3ff00000
 800e678:	40240000 	.word	0x40240000
 800e67c:	401c0000 	.word	0x401c0000
 800e680:	40140000 	.word	0x40140000
 800e684:	3fe00000 	.word	0x3fe00000
 800e688:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e68c:	465d      	mov	r5, fp
 800e68e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e692:	4630      	mov	r0, r6
 800e694:	4639      	mov	r1, r7
 800e696:	f7f9 ffc1 	bl	800861c <__aeabi_ddiv>
 800e69a:	f7fa f945 	bl	8008928 <__aeabi_d2iz>
 800e69e:	4680      	mov	r8, r0
 800e6a0:	f7f9 fe28 	bl	80082f4 <__aeabi_i2d>
 800e6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6a8:	f7f9 fe8e 	bl	80083c8 <__aeabi_dmul>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	4639      	mov	r1, r7
 800e6b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e6b8:	f7f9 fcce 	bl	8008058 <__aeabi_dsub>
 800e6bc:	f805 6b01 	strb.w	r6, [r5], #1
 800e6c0:	eba5 060b 	sub.w	r6, r5, fp
 800e6c4:	45b1      	cmp	r9, r6
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	d139      	bne.n	800e740 <_dtoa_r+0x6c8>
 800e6cc:	f7f9 fcc6 	bl	800805c <__adddf3>
 800e6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	460f      	mov	r7, r1
 800e6d8:	f7fa f906 	bl	80088e8 <__aeabi_dcmpgt>
 800e6dc:	b9c8      	cbnz	r0, 800e712 <_dtoa_r+0x69a>
 800e6de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	4639      	mov	r1, r7
 800e6e6:	f7fa f8d7 	bl	8008898 <__aeabi_dcmpeq>
 800e6ea:	b110      	cbz	r0, 800e6f2 <_dtoa_r+0x67a>
 800e6ec:	f018 0f01 	tst.w	r8, #1
 800e6f0:	d10f      	bne.n	800e712 <_dtoa_r+0x69a>
 800e6f2:	9904      	ldr	r1, [sp, #16]
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f000 facc 	bl	800ec92 <_Bfree>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6fe:	702b      	strb	r3, [r5, #0]
 800e700:	f10a 0301 	add.w	r3, sl, #1
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 8241 	beq.w	800eb90 <_dtoa_r+0xb18>
 800e70e:	601d      	str	r5, [r3, #0]
 800e710:	e23e      	b.n	800eb90 <_dtoa_r+0xb18>
 800e712:	f8cd a020 	str.w	sl, [sp, #32]
 800e716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e71a:	2a39      	cmp	r2, #57	; 0x39
 800e71c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e720:	d108      	bne.n	800e734 <_dtoa_r+0x6bc>
 800e722:	459b      	cmp	fp, r3
 800e724:	d10a      	bne.n	800e73c <_dtoa_r+0x6c4>
 800e726:	9b08      	ldr	r3, [sp, #32]
 800e728:	3301      	adds	r3, #1
 800e72a:	9308      	str	r3, [sp, #32]
 800e72c:	2330      	movs	r3, #48	; 0x30
 800e72e:	f88b 3000 	strb.w	r3, [fp]
 800e732:	465b      	mov	r3, fp
 800e734:	781a      	ldrb	r2, [r3, #0]
 800e736:	3201      	adds	r2, #1
 800e738:	701a      	strb	r2, [r3, #0]
 800e73a:	e78c      	b.n	800e656 <_dtoa_r+0x5de>
 800e73c:	461d      	mov	r5, r3
 800e73e:	e7ea      	b.n	800e716 <_dtoa_r+0x69e>
 800e740:	2200      	movs	r2, #0
 800e742:	4b9b      	ldr	r3, [pc, #620]	; (800e9b0 <_dtoa_r+0x938>)
 800e744:	f7f9 fe40 	bl	80083c8 <__aeabi_dmul>
 800e748:	2200      	movs	r2, #0
 800e74a:	2300      	movs	r3, #0
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	f7fa f8a2 	bl	8008898 <__aeabi_dcmpeq>
 800e754:	2800      	cmp	r0, #0
 800e756:	d09a      	beq.n	800e68e <_dtoa_r+0x616>
 800e758:	e7cb      	b.n	800e6f2 <_dtoa_r+0x67a>
 800e75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	f000 808b 	beq.w	800e878 <_dtoa_r+0x800>
 800e762:	9a06      	ldr	r2, [sp, #24]
 800e764:	2a01      	cmp	r2, #1
 800e766:	dc6e      	bgt.n	800e846 <_dtoa_r+0x7ce>
 800e768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e76a:	2a00      	cmp	r2, #0
 800e76c:	d067      	beq.n	800e83e <_dtoa_r+0x7c6>
 800e76e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e772:	9f07      	ldr	r7, [sp, #28]
 800e774:	9d05      	ldr	r5, [sp, #20]
 800e776:	9a05      	ldr	r2, [sp, #20]
 800e778:	2101      	movs	r1, #1
 800e77a:	441a      	add	r2, r3
 800e77c:	4620      	mov	r0, r4
 800e77e:	9205      	str	r2, [sp, #20]
 800e780:	4498      	add	r8, r3
 800e782:	f000 fb26 	bl	800edd2 <__i2b>
 800e786:	4606      	mov	r6, r0
 800e788:	2d00      	cmp	r5, #0
 800e78a:	dd0c      	ble.n	800e7a6 <_dtoa_r+0x72e>
 800e78c:	f1b8 0f00 	cmp.w	r8, #0
 800e790:	dd09      	ble.n	800e7a6 <_dtoa_r+0x72e>
 800e792:	4545      	cmp	r5, r8
 800e794:	9a05      	ldr	r2, [sp, #20]
 800e796:	462b      	mov	r3, r5
 800e798:	bfa8      	it	ge
 800e79a:	4643      	movge	r3, r8
 800e79c:	1ad2      	subs	r2, r2, r3
 800e79e:	9205      	str	r2, [sp, #20]
 800e7a0:	1aed      	subs	r5, r5, r3
 800e7a2:	eba8 0803 	sub.w	r8, r8, r3
 800e7a6:	9b07      	ldr	r3, [sp, #28]
 800e7a8:	b1eb      	cbz	r3, 800e7e6 <_dtoa_r+0x76e>
 800e7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d067      	beq.n	800e880 <_dtoa_r+0x808>
 800e7b0:	b18f      	cbz	r7, 800e7d6 <_dtoa_r+0x75e>
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	463a      	mov	r2, r7
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f000 fbaa 	bl	800ef10 <__pow5mult>
 800e7bc:	9a04      	ldr	r2, [sp, #16]
 800e7be:	4601      	mov	r1, r0
 800e7c0:	4606      	mov	r6, r0
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f000 fb0e 	bl	800ede4 <__multiply>
 800e7c8:	9904      	ldr	r1, [sp, #16]
 800e7ca:	9008      	str	r0, [sp, #32]
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f000 fa60 	bl	800ec92 <_Bfree>
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	9b07      	ldr	r3, [sp, #28]
 800e7d8:	1bda      	subs	r2, r3, r7
 800e7da:	d004      	beq.n	800e7e6 <_dtoa_r+0x76e>
 800e7dc:	9904      	ldr	r1, [sp, #16]
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fb96 	bl	800ef10 <__pow5mult>
 800e7e4:	9004      	str	r0, [sp, #16]
 800e7e6:	2101      	movs	r1, #1
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f000 faf2 	bl	800edd2 <__i2b>
 800e7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 81d0 	beq.w	800eb98 <_dtoa_r+0xb20>
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4601      	mov	r1, r0
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 fb87 	bl	800ef10 <__pow5mult>
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	2b01      	cmp	r3, #1
 800e806:	4607      	mov	r7, r0
 800e808:	dc40      	bgt.n	800e88c <_dtoa_r+0x814>
 800e80a:	9b00      	ldr	r3, [sp, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d139      	bne.n	800e884 <_dtoa_r+0x80c>
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e816:	2b00      	cmp	r3, #0
 800e818:	d136      	bne.n	800e888 <_dtoa_r+0x810>
 800e81a:	9b01      	ldr	r3, [sp, #4]
 800e81c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e820:	0d1b      	lsrs	r3, r3, #20
 800e822:	051b      	lsls	r3, r3, #20
 800e824:	b12b      	cbz	r3, 800e832 <_dtoa_r+0x7ba>
 800e826:	9b05      	ldr	r3, [sp, #20]
 800e828:	3301      	adds	r3, #1
 800e82a:	9305      	str	r3, [sp, #20]
 800e82c:	f108 0801 	add.w	r8, r8, #1
 800e830:	2301      	movs	r3, #1
 800e832:	9307      	str	r3, [sp, #28]
 800e834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e836:	2b00      	cmp	r3, #0
 800e838:	d12a      	bne.n	800e890 <_dtoa_r+0x818>
 800e83a:	2001      	movs	r0, #1
 800e83c:	e030      	b.n	800e8a0 <_dtoa_r+0x828>
 800e83e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e840:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e844:	e795      	b.n	800e772 <_dtoa_r+0x6fa>
 800e846:	9b07      	ldr	r3, [sp, #28]
 800e848:	f109 37ff 	add.w	r7, r9, #4294967295
 800e84c:	42bb      	cmp	r3, r7
 800e84e:	bfbf      	itttt	lt
 800e850:	9b07      	ldrlt	r3, [sp, #28]
 800e852:	9707      	strlt	r7, [sp, #28]
 800e854:	1afa      	sublt	r2, r7, r3
 800e856:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e858:	bfbb      	ittet	lt
 800e85a:	189b      	addlt	r3, r3, r2
 800e85c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e85e:	1bdf      	subge	r7, r3, r7
 800e860:	2700      	movlt	r7, #0
 800e862:	f1b9 0f00 	cmp.w	r9, #0
 800e866:	bfb5      	itete	lt
 800e868:	9b05      	ldrlt	r3, [sp, #20]
 800e86a:	9d05      	ldrge	r5, [sp, #20]
 800e86c:	eba3 0509 	sublt.w	r5, r3, r9
 800e870:	464b      	movge	r3, r9
 800e872:	bfb8      	it	lt
 800e874:	2300      	movlt	r3, #0
 800e876:	e77e      	b.n	800e776 <_dtoa_r+0x6fe>
 800e878:	9f07      	ldr	r7, [sp, #28]
 800e87a:	9d05      	ldr	r5, [sp, #20]
 800e87c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e87e:	e783      	b.n	800e788 <_dtoa_r+0x710>
 800e880:	9a07      	ldr	r2, [sp, #28]
 800e882:	e7ab      	b.n	800e7dc <_dtoa_r+0x764>
 800e884:	2300      	movs	r3, #0
 800e886:	e7d4      	b.n	800e832 <_dtoa_r+0x7ba>
 800e888:	9b00      	ldr	r3, [sp, #0]
 800e88a:	e7d2      	b.n	800e832 <_dtoa_r+0x7ba>
 800e88c:	2300      	movs	r3, #0
 800e88e:	9307      	str	r3, [sp, #28]
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e896:	6918      	ldr	r0, [r3, #16]
 800e898:	f000 fa4d 	bl	800ed36 <__hi0bits>
 800e89c:	f1c0 0020 	rsb	r0, r0, #32
 800e8a0:	4440      	add	r0, r8
 800e8a2:	f010 001f 	ands.w	r0, r0, #31
 800e8a6:	d047      	beq.n	800e938 <_dtoa_r+0x8c0>
 800e8a8:	f1c0 0320 	rsb	r3, r0, #32
 800e8ac:	2b04      	cmp	r3, #4
 800e8ae:	dd3b      	ble.n	800e928 <_dtoa_r+0x8b0>
 800e8b0:	9b05      	ldr	r3, [sp, #20]
 800e8b2:	f1c0 001c 	rsb	r0, r0, #28
 800e8b6:	4403      	add	r3, r0
 800e8b8:	9305      	str	r3, [sp, #20]
 800e8ba:	4405      	add	r5, r0
 800e8bc:	4480      	add	r8, r0
 800e8be:	9b05      	ldr	r3, [sp, #20]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dd05      	ble.n	800e8d0 <_dtoa_r+0x858>
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	9904      	ldr	r1, [sp, #16]
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 fb6f 	bl	800efac <__lshift>
 800e8ce:	9004      	str	r0, [sp, #16]
 800e8d0:	f1b8 0f00 	cmp.w	r8, #0
 800e8d4:	dd05      	ble.n	800e8e2 <_dtoa_r+0x86a>
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	4642      	mov	r2, r8
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f000 fb66 	bl	800efac <__lshift>
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8e4:	b353      	cbz	r3, 800e93c <_dtoa_r+0x8c4>
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	9804      	ldr	r0, [sp, #16]
 800e8ea:	f000 fbb3 	bl	800f054 <__mcmp>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	da24      	bge.n	800e93c <_dtoa_r+0x8c4>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	220a      	movs	r2, #10
 800e8f6:	9904      	ldr	r1, [sp, #16]
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 f9e1 	bl	800ecc0 <__multadd>
 800e8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e900:	9004      	str	r0, [sp, #16]
 800e902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 814d 	beq.w	800eba6 <_dtoa_r+0xb2e>
 800e90c:	2300      	movs	r3, #0
 800e90e:	4631      	mov	r1, r6
 800e910:	220a      	movs	r2, #10
 800e912:	4620      	mov	r0, r4
 800e914:	f000 f9d4 	bl	800ecc0 <__multadd>
 800e918:	9b02      	ldr	r3, [sp, #8]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	4606      	mov	r6, r0
 800e91e:	dc4f      	bgt.n	800e9c0 <_dtoa_r+0x948>
 800e920:	9b06      	ldr	r3, [sp, #24]
 800e922:	2b02      	cmp	r3, #2
 800e924:	dd4c      	ble.n	800e9c0 <_dtoa_r+0x948>
 800e926:	e011      	b.n	800e94c <_dtoa_r+0x8d4>
 800e928:	d0c9      	beq.n	800e8be <_dtoa_r+0x846>
 800e92a:	9a05      	ldr	r2, [sp, #20]
 800e92c:	331c      	adds	r3, #28
 800e92e:	441a      	add	r2, r3
 800e930:	9205      	str	r2, [sp, #20]
 800e932:	441d      	add	r5, r3
 800e934:	4498      	add	r8, r3
 800e936:	e7c2      	b.n	800e8be <_dtoa_r+0x846>
 800e938:	4603      	mov	r3, r0
 800e93a:	e7f6      	b.n	800e92a <_dtoa_r+0x8b2>
 800e93c:	f1b9 0f00 	cmp.w	r9, #0
 800e940:	dc38      	bgt.n	800e9b4 <_dtoa_r+0x93c>
 800e942:	9b06      	ldr	r3, [sp, #24]
 800e944:	2b02      	cmp	r3, #2
 800e946:	dd35      	ble.n	800e9b4 <_dtoa_r+0x93c>
 800e948:	f8cd 9008 	str.w	r9, [sp, #8]
 800e94c:	9b02      	ldr	r3, [sp, #8]
 800e94e:	b963      	cbnz	r3, 800e96a <_dtoa_r+0x8f2>
 800e950:	4639      	mov	r1, r7
 800e952:	2205      	movs	r2, #5
 800e954:	4620      	mov	r0, r4
 800e956:	f000 f9b3 	bl	800ecc0 <__multadd>
 800e95a:	4601      	mov	r1, r0
 800e95c:	4607      	mov	r7, r0
 800e95e:	9804      	ldr	r0, [sp, #16]
 800e960:	f000 fb78 	bl	800f054 <__mcmp>
 800e964:	2800      	cmp	r0, #0
 800e966:	f73f adcc 	bgt.w	800e502 <_dtoa_r+0x48a>
 800e96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e96c:	465d      	mov	r5, fp
 800e96e:	ea6f 0a03 	mvn.w	sl, r3
 800e972:	f04f 0900 	mov.w	r9, #0
 800e976:	4639      	mov	r1, r7
 800e978:	4620      	mov	r0, r4
 800e97a:	f000 f98a 	bl	800ec92 <_Bfree>
 800e97e:	2e00      	cmp	r6, #0
 800e980:	f43f aeb7 	beq.w	800e6f2 <_dtoa_r+0x67a>
 800e984:	f1b9 0f00 	cmp.w	r9, #0
 800e988:	d005      	beq.n	800e996 <_dtoa_r+0x91e>
 800e98a:	45b1      	cmp	r9, r6
 800e98c:	d003      	beq.n	800e996 <_dtoa_r+0x91e>
 800e98e:	4649      	mov	r1, r9
 800e990:	4620      	mov	r0, r4
 800e992:	f000 f97e 	bl	800ec92 <_Bfree>
 800e996:	4631      	mov	r1, r6
 800e998:	4620      	mov	r0, r4
 800e99a:	f000 f97a 	bl	800ec92 <_Bfree>
 800e99e:	e6a8      	b.n	800e6f2 <_dtoa_r+0x67a>
 800e9a0:	2700      	movs	r7, #0
 800e9a2:	463e      	mov	r6, r7
 800e9a4:	e7e1      	b.n	800e96a <_dtoa_r+0x8f2>
 800e9a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e9aa:	463e      	mov	r6, r7
 800e9ac:	e5a9      	b.n	800e502 <_dtoa_r+0x48a>
 800e9ae:	bf00      	nop
 800e9b0:	40240000 	.word	0x40240000
 800e9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 80fa 	beq.w	800ebb4 <_dtoa_r+0xb3c>
 800e9c0:	2d00      	cmp	r5, #0
 800e9c2:	dd05      	ble.n	800e9d0 <_dtoa_r+0x958>
 800e9c4:	4631      	mov	r1, r6
 800e9c6:	462a      	mov	r2, r5
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f000 faef 	bl	800efac <__lshift>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	9b07      	ldr	r3, [sp, #28]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d04c      	beq.n	800ea70 <_dtoa_r+0x9f8>
 800e9d6:	6871      	ldr	r1, [r6, #4]
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f000 f926 	bl	800ec2a <_Balloc>
 800e9de:	6932      	ldr	r2, [r6, #16]
 800e9e0:	3202      	adds	r2, #2
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	0092      	lsls	r2, r2, #2
 800e9e6:	f106 010c 	add.w	r1, r6, #12
 800e9ea:	300c      	adds	r0, #12
 800e9ec:	f000 f912 	bl	800ec14 <memcpy>
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 fad9 	bl	800efac <__lshift>
 800e9fa:	9b00      	ldr	r3, [sp, #0]
 800e9fc:	f8cd b014 	str.w	fp, [sp, #20]
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	46b1      	mov	r9, r6
 800ea06:	9307      	str	r3, [sp, #28]
 800ea08:	4606      	mov	r6, r0
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	9804      	ldr	r0, [sp, #16]
 800ea0e:	f7ff faa6 	bl	800df5e <quorem>
 800ea12:	4649      	mov	r1, r9
 800ea14:	4605      	mov	r5, r0
 800ea16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ea1a:	9804      	ldr	r0, [sp, #16]
 800ea1c:	f000 fb1a 	bl	800f054 <__mcmp>
 800ea20:	4632      	mov	r2, r6
 800ea22:	9000      	str	r0, [sp, #0]
 800ea24:	4639      	mov	r1, r7
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 fb2e 	bl	800f088 <__mdiff>
 800ea2c:	68c3      	ldr	r3, [r0, #12]
 800ea2e:	4602      	mov	r2, r0
 800ea30:	bb03      	cbnz	r3, 800ea74 <_dtoa_r+0x9fc>
 800ea32:	4601      	mov	r1, r0
 800ea34:	9008      	str	r0, [sp, #32]
 800ea36:	9804      	ldr	r0, [sp, #16]
 800ea38:	f000 fb0c 	bl	800f054 <__mcmp>
 800ea3c:	9a08      	ldr	r2, [sp, #32]
 800ea3e:	4603      	mov	r3, r0
 800ea40:	4611      	mov	r1, r2
 800ea42:	4620      	mov	r0, r4
 800ea44:	9308      	str	r3, [sp, #32]
 800ea46:	f000 f924 	bl	800ec92 <_Bfree>
 800ea4a:	9b08      	ldr	r3, [sp, #32]
 800ea4c:	b9a3      	cbnz	r3, 800ea78 <_dtoa_r+0xa00>
 800ea4e:	9a06      	ldr	r2, [sp, #24]
 800ea50:	b992      	cbnz	r2, 800ea78 <_dtoa_r+0xa00>
 800ea52:	9a07      	ldr	r2, [sp, #28]
 800ea54:	b982      	cbnz	r2, 800ea78 <_dtoa_r+0xa00>
 800ea56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea5a:	d029      	beq.n	800eab0 <_dtoa_r+0xa38>
 800ea5c:	9b00      	ldr	r3, [sp, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	dd01      	ble.n	800ea66 <_dtoa_r+0x9ee>
 800ea62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ea66:	9b05      	ldr	r3, [sp, #20]
 800ea68:	1c5d      	adds	r5, r3, #1
 800ea6a:	f883 8000 	strb.w	r8, [r3]
 800ea6e:	e782      	b.n	800e976 <_dtoa_r+0x8fe>
 800ea70:	4630      	mov	r0, r6
 800ea72:	e7c2      	b.n	800e9fa <_dtoa_r+0x982>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e7e3      	b.n	800ea40 <_dtoa_r+0x9c8>
 800ea78:	9a00      	ldr	r2, [sp, #0]
 800ea7a:	2a00      	cmp	r2, #0
 800ea7c:	db04      	blt.n	800ea88 <_dtoa_r+0xa10>
 800ea7e:	d125      	bne.n	800eacc <_dtoa_r+0xa54>
 800ea80:	9a06      	ldr	r2, [sp, #24]
 800ea82:	bb1a      	cbnz	r2, 800eacc <_dtoa_r+0xa54>
 800ea84:	9a07      	ldr	r2, [sp, #28]
 800ea86:	bb0a      	cbnz	r2, 800eacc <_dtoa_r+0xa54>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	ddec      	ble.n	800ea66 <_dtoa_r+0x9ee>
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	9904      	ldr	r1, [sp, #16]
 800ea90:	4620      	mov	r0, r4
 800ea92:	f000 fa8b 	bl	800efac <__lshift>
 800ea96:	4639      	mov	r1, r7
 800ea98:	9004      	str	r0, [sp, #16]
 800ea9a:	f000 fadb 	bl	800f054 <__mcmp>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	dc03      	bgt.n	800eaaa <_dtoa_r+0xa32>
 800eaa2:	d1e0      	bne.n	800ea66 <_dtoa_r+0x9ee>
 800eaa4:	f018 0f01 	tst.w	r8, #1
 800eaa8:	d0dd      	beq.n	800ea66 <_dtoa_r+0x9ee>
 800eaaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eaae:	d1d8      	bne.n	800ea62 <_dtoa_r+0x9ea>
 800eab0:	9b05      	ldr	r3, [sp, #20]
 800eab2:	9a05      	ldr	r2, [sp, #20]
 800eab4:	1c5d      	adds	r5, r3, #1
 800eab6:	2339      	movs	r3, #57	; 0x39
 800eab8:	7013      	strb	r3, [r2, #0]
 800eaba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eabe:	2b39      	cmp	r3, #57	; 0x39
 800eac0:	f105 32ff 	add.w	r2, r5, #4294967295
 800eac4:	d04f      	beq.n	800eb66 <_dtoa_r+0xaee>
 800eac6:	3301      	adds	r3, #1
 800eac8:	7013      	strb	r3, [r2, #0]
 800eaca:	e754      	b.n	800e976 <_dtoa_r+0x8fe>
 800eacc:	9a05      	ldr	r2, [sp, #20]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f102 0501 	add.w	r5, r2, #1
 800ead4:	dd06      	ble.n	800eae4 <_dtoa_r+0xa6c>
 800ead6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eada:	d0e9      	beq.n	800eab0 <_dtoa_r+0xa38>
 800eadc:	f108 0801 	add.w	r8, r8, #1
 800eae0:	9b05      	ldr	r3, [sp, #20]
 800eae2:	e7c2      	b.n	800ea6a <_dtoa_r+0x9f2>
 800eae4:	9a02      	ldr	r2, [sp, #8]
 800eae6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800eaea:	eba5 030b 	sub.w	r3, r5, fp
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d021      	beq.n	800eb36 <_dtoa_r+0xabe>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	220a      	movs	r2, #10
 800eaf6:	9904      	ldr	r1, [sp, #16]
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f000 f8e1 	bl	800ecc0 <__multadd>
 800eafe:	45b1      	cmp	r9, r6
 800eb00:	9004      	str	r0, [sp, #16]
 800eb02:	f04f 0300 	mov.w	r3, #0
 800eb06:	f04f 020a 	mov.w	r2, #10
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	d105      	bne.n	800eb1c <_dtoa_r+0xaa4>
 800eb10:	f000 f8d6 	bl	800ecc0 <__multadd>
 800eb14:	4681      	mov	r9, r0
 800eb16:	4606      	mov	r6, r0
 800eb18:	9505      	str	r5, [sp, #20]
 800eb1a:	e776      	b.n	800ea0a <_dtoa_r+0x992>
 800eb1c:	f000 f8d0 	bl	800ecc0 <__multadd>
 800eb20:	4631      	mov	r1, r6
 800eb22:	4681      	mov	r9, r0
 800eb24:	2300      	movs	r3, #0
 800eb26:	220a      	movs	r2, #10
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f000 f8c9 	bl	800ecc0 <__multadd>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	e7f2      	b.n	800eb18 <_dtoa_r+0xaa0>
 800eb32:	f04f 0900 	mov.w	r9, #0
 800eb36:	2201      	movs	r2, #1
 800eb38:	9904      	ldr	r1, [sp, #16]
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 fa36 	bl	800efac <__lshift>
 800eb40:	4639      	mov	r1, r7
 800eb42:	9004      	str	r0, [sp, #16]
 800eb44:	f000 fa86 	bl	800f054 <__mcmp>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	dcb6      	bgt.n	800eaba <_dtoa_r+0xa42>
 800eb4c:	d102      	bne.n	800eb54 <_dtoa_r+0xadc>
 800eb4e:	f018 0f01 	tst.w	r8, #1
 800eb52:	d1b2      	bne.n	800eaba <_dtoa_r+0xa42>
 800eb54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb58:	2b30      	cmp	r3, #48	; 0x30
 800eb5a:	f105 32ff 	add.w	r2, r5, #4294967295
 800eb5e:	f47f af0a 	bne.w	800e976 <_dtoa_r+0x8fe>
 800eb62:	4615      	mov	r5, r2
 800eb64:	e7f6      	b.n	800eb54 <_dtoa_r+0xadc>
 800eb66:	4593      	cmp	fp, r2
 800eb68:	d105      	bne.n	800eb76 <_dtoa_r+0xafe>
 800eb6a:	2331      	movs	r3, #49	; 0x31
 800eb6c:	f10a 0a01 	add.w	sl, sl, #1
 800eb70:	f88b 3000 	strb.w	r3, [fp]
 800eb74:	e6ff      	b.n	800e976 <_dtoa_r+0x8fe>
 800eb76:	4615      	mov	r5, r2
 800eb78:	e79f      	b.n	800eaba <_dtoa_r+0xa42>
 800eb7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ebe0 <_dtoa_r+0xb68>
 800eb7e:	e007      	b.n	800eb90 <_dtoa_r+0xb18>
 800eb80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb82:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ebe4 <_dtoa_r+0xb6c>
 800eb86:	b11b      	cbz	r3, 800eb90 <_dtoa_r+0xb18>
 800eb88:	f10b 0308 	add.w	r3, fp, #8
 800eb8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	4658      	mov	r0, fp
 800eb92:	b017      	add	sp, #92	; 0x5c
 800eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb98:	9b06      	ldr	r3, [sp, #24]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	f77f ae35 	ble.w	800e80a <_dtoa_r+0x792>
 800eba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eba2:	9307      	str	r3, [sp, #28]
 800eba4:	e649      	b.n	800e83a <_dtoa_r+0x7c2>
 800eba6:	9b02      	ldr	r3, [sp, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dc03      	bgt.n	800ebb4 <_dtoa_r+0xb3c>
 800ebac:	9b06      	ldr	r3, [sp, #24]
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	f73f aecc 	bgt.w	800e94c <_dtoa_r+0x8d4>
 800ebb4:	465d      	mov	r5, fp
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	9804      	ldr	r0, [sp, #16]
 800ebba:	f7ff f9d0 	bl	800df5e <quorem>
 800ebbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ebc2:	f805 8b01 	strb.w	r8, [r5], #1
 800ebc6:	9a02      	ldr	r2, [sp, #8]
 800ebc8:	eba5 030b 	sub.w	r3, r5, fp
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	ddb0      	ble.n	800eb32 <_dtoa_r+0xaba>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	220a      	movs	r2, #10
 800ebd4:	9904      	ldr	r1, [sp, #16]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 f872 	bl	800ecc0 <__multadd>
 800ebdc:	9004      	str	r0, [sp, #16]
 800ebde:	e7ea      	b.n	800ebb6 <_dtoa_r+0xb3e>
 800ebe0:	0800f360 	.word	0x0800f360
 800ebe4:	0800f362 	.word	0x0800f362

0800ebe8 <_localeconv_r>:
 800ebe8:	4b04      	ldr	r3, [pc, #16]	; (800ebfc <_localeconv_r+0x14>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6a18      	ldr	r0, [r3, #32]
 800ebee:	4b04      	ldr	r3, [pc, #16]	; (800ec00 <_localeconv_r+0x18>)
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	bf08      	it	eq
 800ebf4:	4618      	moveq	r0, r3
 800ebf6:	30f0      	adds	r0, #240	; 0xf0
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	2000000c 	.word	0x2000000c
 800ec00:	20000070 	.word	0x20000070

0800ec04 <malloc>:
 800ec04:	4b02      	ldr	r3, [pc, #8]	; (800ec10 <malloc+0xc>)
 800ec06:	4601      	mov	r1, r0
 800ec08:	6818      	ldr	r0, [r3, #0]
 800ec0a:	f000 baf7 	b.w	800f1fc <_malloc_r>
 800ec0e:	bf00      	nop
 800ec10:	2000000c 	.word	0x2000000c

0800ec14 <memcpy>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	1e43      	subs	r3, r0, #1
 800ec18:	440a      	add	r2, r1
 800ec1a:	4291      	cmp	r1, r2
 800ec1c:	d100      	bne.n	800ec20 <memcpy+0xc>
 800ec1e:	bd10      	pop	{r4, pc}
 800ec20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec28:	e7f7      	b.n	800ec1a <memcpy+0x6>

0800ec2a <_Balloc>:
 800ec2a:	b570      	push	{r4, r5, r6, lr}
 800ec2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460e      	mov	r6, r1
 800ec32:	b93d      	cbnz	r5, 800ec44 <_Balloc+0x1a>
 800ec34:	2010      	movs	r0, #16
 800ec36:	f7ff ffe5 	bl	800ec04 <malloc>
 800ec3a:	6260      	str	r0, [r4, #36]	; 0x24
 800ec3c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec40:	6005      	str	r5, [r0, #0]
 800ec42:	60c5      	str	r5, [r0, #12]
 800ec44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ec46:	68eb      	ldr	r3, [r5, #12]
 800ec48:	b183      	cbz	r3, 800ec6c <_Balloc+0x42>
 800ec4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ec52:	b9b8      	cbnz	r0, 800ec84 <_Balloc+0x5a>
 800ec54:	2101      	movs	r1, #1
 800ec56:	fa01 f506 	lsl.w	r5, r1, r6
 800ec5a:	1d6a      	adds	r2, r5, #5
 800ec5c:	0092      	lsls	r2, r2, #2
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 fabe 	bl	800f1e0 <_calloc_r>
 800ec64:	b160      	cbz	r0, 800ec80 <_Balloc+0x56>
 800ec66:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ec6a:	e00e      	b.n	800ec8a <_Balloc+0x60>
 800ec6c:	2221      	movs	r2, #33	; 0x21
 800ec6e:	2104      	movs	r1, #4
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fab5 	bl	800f1e0 <_calloc_r>
 800ec76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec78:	60e8      	str	r0, [r5, #12]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1e4      	bne.n	800ec4a <_Balloc+0x20>
 800ec80:	2000      	movs	r0, #0
 800ec82:	bd70      	pop	{r4, r5, r6, pc}
 800ec84:	6802      	ldr	r2, [r0, #0]
 800ec86:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec90:	e7f7      	b.n	800ec82 <_Balloc+0x58>

0800ec92 <_Bfree>:
 800ec92:	b570      	push	{r4, r5, r6, lr}
 800ec94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ec96:	4606      	mov	r6, r0
 800ec98:	460d      	mov	r5, r1
 800ec9a:	b93c      	cbnz	r4, 800ecac <_Bfree+0x1a>
 800ec9c:	2010      	movs	r0, #16
 800ec9e:	f7ff ffb1 	bl	800ec04 <malloc>
 800eca2:	6270      	str	r0, [r6, #36]	; 0x24
 800eca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eca8:	6004      	str	r4, [r0, #0]
 800ecaa:	60c4      	str	r4, [r0, #12]
 800ecac:	b13d      	cbz	r5, 800ecbe <_Bfree+0x2c>
 800ecae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ecb0:	686a      	ldr	r2, [r5, #4]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecb8:	6029      	str	r1, [r5, #0]
 800ecba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}

0800ecc0 <__multadd>:
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	690d      	ldr	r5, [r1, #16]
 800ecc6:	461f      	mov	r7, r3
 800ecc8:	4606      	mov	r6, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	f101 0c14 	add.w	ip, r1, #20
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	f8dc 0000 	ldr.w	r0, [ip]
 800ecd6:	b281      	uxth	r1, r0
 800ecd8:	fb02 7101 	mla	r1, r2, r1, r7
 800ecdc:	0c0f      	lsrs	r7, r1, #16
 800ecde:	0c00      	lsrs	r0, r0, #16
 800ece0:	fb02 7000 	mla	r0, r2, r0, r7
 800ece4:	b289      	uxth	r1, r1
 800ece6:	3301      	adds	r3, #1
 800ece8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ecec:	429d      	cmp	r5, r3
 800ecee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ecf2:	f84c 1b04 	str.w	r1, [ip], #4
 800ecf6:	dcec      	bgt.n	800ecd2 <__multadd+0x12>
 800ecf8:	b1d7      	cbz	r7, 800ed30 <__multadd+0x70>
 800ecfa:	68a3      	ldr	r3, [r4, #8]
 800ecfc:	42ab      	cmp	r3, r5
 800ecfe:	dc12      	bgt.n	800ed26 <__multadd+0x66>
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	4630      	mov	r0, r6
 800ed04:	3101      	adds	r1, #1
 800ed06:	f7ff ff90 	bl	800ec2a <_Balloc>
 800ed0a:	6922      	ldr	r2, [r4, #16]
 800ed0c:	3202      	adds	r2, #2
 800ed0e:	f104 010c 	add.w	r1, r4, #12
 800ed12:	4680      	mov	r8, r0
 800ed14:	0092      	lsls	r2, r2, #2
 800ed16:	300c      	adds	r0, #12
 800ed18:	f7ff ff7c 	bl	800ec14 <memcpy>
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff ffb7 	bl	800ec92 <_Bfree>
 800ed24:	4644      	mov	r4, r8
 800ed26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed2a:	3501      	adds	r5, #1
 800ed2c:	615f      	str	r7, [r3, #20]
 800ed2e:	6125      	str	r5, [r4, #16]
 800ed30:	4620      	mov	r0, r4
 800ed32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed36 <__hi0bits>:
 800ed36:	0c02      	lsrs	r2, r0, #16
 800ed38:	0412      	lsls	r2, r2, #16
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	b9b2      	cbnz	r2, 800ed6c <__hi0bits+0x36>
 800ed3e:	0403      	lsls	r3, r0, #16
 800ed40:	2010      	movs	r0, #16
 800ed42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ed46:	bf04      	itt	eq
 800ed48:	021b      	lsleq	r3, r3, #8
 800ed4a:	3008      	addeq	r0, #8
 800ed4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ed50:	bf04      	itt	eq
 800ed52:	011b      	lsleq	r3, r3, #4
 800ed54:	3004      	addeq	r0, #4
 800ed56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ed5a:	bf04      	itt	eq
 800ed5c:	009b      	lsleq	r3, r3, #2
 800ed5e:	3002      	addeq	r0, #2
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	db06      	blt.n	800ed72 <__hi0bits+0x3c>
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	d503      	bpl.n	800ed70 <__hi0bits+0x3a>
 800ed68:	3001      	adds	r0, #1
 800ed6a:	4770      	bx	lr
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e7e8      	b.n	800ed42 <__hi0bits+0xc>
 800ed70:	2020      	movs	r0, #32
 800ed72:	4770      	bx	lr

0800ed74 <__lo0bits>:
 800ed74:	6803      	ldr	r3, [r0, #0]
 800ed76:	f013 0207 	ands.w	r2, r3, #7
 800ed7a:	4601      	mov	r1, r0
 800ed7c:	d00b      	beq.n	800ed96 <__lo0bits+0x22>
 800ed7e:	07da      	lsls	r2, r3, #31
 800ed80:	d423      	bmi.n	800edca <__lo0bits+0x56>
 800ed82:	0798      	lsls	r0, r3, #30
 800ed84:	bf49      	itett	mi
 800ed86:	085b      	lsrmi	r3, r3, #1
 800ed88:	089b      	lsrpl	r3, r3, #2
 800ed8a:	2001      	movmi	r0, #1
 800ed8c:	600b      	strmi	r3, [r1, #0]
 800ed8e:	bf5c      	itt	pl
 800ed90:	600b      	strpl	r3, [r1, #0]
 800ed92:	2002      	movpl	r0, #2
 800ed94:	4770      	bx	lr
 800ed96:	b298      	uxth	r0, r3
 800ed98:	b9a8      	cbnz	r0, 800edc6 <__lo0bits+0x52>
 800ed9a:	0c1b      	lsrs	r3, r3, #16
 800ed9c:	2010      	movs	r0, #16
 800ed9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eda2:	bf04      	itt	eq
 800eda4:	0a1b      	lsreq	r3, r3, #8
 800eda6:	3008      	addeq	r0, #8
 800eda8:	071a      	lsls	r2, r3, #28
 800edaa:	bf04      	itt	eq
 800edac:	091b      	lsreq	r3, r3, #4
 800edae:	3004      	addeq	r0, #4
 800edb0:	079a      	lsls	r2, r3, #30
 800edb2:	bf04      	itt	eq
 800edb4:	089b      	lsreq	r3, r3, #2
 800edb6:	3002      	addeq	r0, #2
 800edb8:	07da      	lsls	r2, r3, #31
 800edba:	d402      	bmi.n	800edc2 <__lo0bits+0x4e>
 800edbc:	085b      	lsrs	r3, r3, #1
 800edbe:	d006      	beq.n	800edce <__lo0bits+0x5a>
 800edc0:	3001      	adds	r0, #1
 800edc2:	600b      	str	r3, [r1, #0]
 800edc4:	4770      	bx	lr
 800edc6:	4610      	mov	r0, r2
 800edc8:	e7e9      	b.n	800ed9e <__lo0bits+0x2a>
 800edca:	2000      	movs	r0, #0
 800edcc:	4770      	bx	lr
 800edce:	2020      	movs	r0, #32
 800edd0:	4770      	bx	lr

0800edd2 <__i2b>:
 800edd2:	b510      	push	{r4, lr}
 800edd4:	460c      	mov	r4, r1
 800edd6:	2101      	movs	r1, #1
 800edd8:	f7ff ff27 	bl	800ec2a <_Balloc>
 800eddc:	2201      	movs	r2, #1
 800edde:	6144      	str	r4, [r0, #20]
 800ede0:	6102      	str	r2, [r0, #16]
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <__multiply>:
 800ede4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	4614      	mov	r4, r2
 800edea:	690a      	ldr	r2, [r1, #16]
 800edec:	6923      	ldr	r3, [r4, #16]
 800edee:	429a      	cmp	r2, r3
 800edf0:	bfb8      	it	lt
 800edf2:	460b      	movlt	r3, r1
 800edf4:	4688      	mov	r8, r1
 800edf6:	bfbc      	itt	lt
 800edf8:	46a0      	movlt	r8, r4
 800edfa:	461c      	movlt	r4, r3
 800edfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ee04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee0c:	eb07 0609 	add.w	r6, r7, r9
 800ee10:	42b3      	cmp	r3, r6
 800ee12:	bfb8      	it	lt
 800ee14:	3101      	addlt	r1, #1
 800ee16:	f7ff ff08 	bl	800ec2a <_Balloc>
 800ee1a:	f100 0514 	add.w	r5, r0, #20
 800ee1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ee22:	462b      	mov	r3, r5
 800ee24:	2200      	movs	r2, #0
 800ee26:	4573      	cmp	r3, lr
 800ee28:	d316      	bcc.n	800ee58 <__multiply+0x74>
 800ee2a:	f104 0214 	add.w	r2, r4, #20
 800ee2e:	f108 0114 	add.w	r1, r8, #20
 800ee32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ee36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	9b00      	ldr	r3, [sp, #0]
 800ee3e:	9201      	str	r2, [sp, #4]
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d80c      	bhi.n	800ee5e <__multiply+0x7a>
 800ee44:	2e00      	cmp	r6, #0
 800ee46:	dd03      	ble.n	800ee50 <__multiply+0x6c>
 800ee48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d05d      	beq.n	800ef0c <__multiply+0x128>
 800ee50:	6106      	str	r6, [r0, #16]
 800ee52:	b003      	add	sp, #12
 800ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee58:	f843 2b04 	str.w	r2, [r3], #4
 800ee5c:	e7e3      	b.n	800ee26 <__multiply+0x42>
 800ee5e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ee62:	f1bb 0f00 	cmp.w	fp, #0
 800ee66:	d023      	beq.n	800eeb0 <__multiply+0xcc>
 800ee68:	4689      	mov	r9, r1
 800ee6a:	46ac      	mov	ip, r5
 800ee6c:	f04f 0800 	mov.w	r8, #0
 800ee70:	f859 4b04 	ldr.w	r4, [r9], #4
 800ee74:	f8dc a000 	ldr.w	sl, [ip]
 800ee78:	b2a3      	uxth	r3, r4
 800ee7a:	fa1f fa8a 	uxth.w	sl, sl
 800ee7e:	fb0b a303 	mla	r3, fp, r3, sl
 800ee82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ee86:	f8dc 4000 	ldr.w	r4, [ip]
 800ee8a:	4443      	add	r3, r8
 800ee8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ee90:	fb0b 840a 	mla	r4, fp, sl, r8
 800ee94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ee98:	46e2      	mov	sl, ip
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eea0:	454f      	cmp	r7, r9
 800eea2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eea6:	f84a 3b04 	str.w	r3, [sl], #4
 800eeaa:	d82b      	bhi.n	800ef04 <__multiply+0x120>
 800eeac:	f8cc 8004 	str.w	r8, [ip, #4]
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800eeb6:	3204      	adds	r2, #4
 800eeb8:	f1ba 0f00 	cmp.w	sl, #0
 800eebc:	d020      	beq.n	800ef00 <__multiply+0x11c>
 800eebe:	682b      	ldr	r3, [r5, #0]
 800eec0:	4689      	mov	r9, r1
 800eec2:	46a8      	mov	r8, r5
 800eec4:	f04f 0b00 	mov.w	fp, #0
 800eec8:	f8b9 c000 	ldrh.w	ip, [r9]
 800eecc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800eed0:	fb0a 440c 	mla	r4, sl, ip, r4
 800eed4:	445c      	add	r4, fp
 800eed6:	46c4      	mov	ip, r8
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eede:	f84c 3b04 	str.w	r3, [ip], #4
 800eee2:	f859 3b04 	ldr.w	r3, [r9], #4
 800eee6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800eeea:	0c1b      	lsrs	r3, r3, #16
 800eeec:	fb0a b303 	mla	r3, sl, r3, fp
 800eef0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800eef4:	454f      	cmp	r7, r9
 800eef6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800eefa:	d805      	bhi.n	800ef08 <__multiply+0x124>
 800eefc:	f8c8 3004 	str.w	r3, [r8, #4]
 800ef00:	3504      	adds	r5, #4
 800ef02:	e79b      	b.n	800ee3c <__multiply+0x58>
 800ef04:	46d4      	mov	ip, sl
 800ef06:	e7b3      	b.n	800ee70 <__multiply+0x8c>
 800ef08:	46e0      	mov	r8, ip
 800ef0a:	e7dd      	b.n	800eec8 <__multiply+0xe4>
 800ef0c:	3e01      	subs	r6, #1
 800ef0e:	e799      	b.n	800ee44 <__multiply+0x60>

0800ef10 <__pow5mult>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4615      	mov	r5, r2
 800ef16:	f012 0203 	ands.w	r2, r2, #3
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	d007      	beq.n	800ef30 <__pow5mult+0x20>
 800ef20:	3a01      	subs	r2, #1
 800ef22:	4c21      	ldr	r4, [pc, #132]	; (800efa8 <__pow5mult+0x98>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef2a:	f7ff fec9 	bl	800ecc0 <__multadd>
 800ef2e:	4607      	mov	r7, r0
 800ef30:	10ad      	asrs	r5, r5, #2
 800ef32:	d035      	beq.n	800efa0 <__pow5mult+0x90>
 800ef34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ef36:	b93c      	cbnz	r4, 800ef48 <__pow5mult+0x38>
 800ef38:	2010      	movs	r0, #16
 800ef3a:	f7ff fe63 	bl	800ec04 <malloc>
 800ef3e:	6270      	str	r0, [r6, #36]	; 0x24
 800ef40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef44:	6004      	str	r4, [r0, #0]
 800ef46:	60c4      	str	r4, [r0, #12]
 800ef48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef50:	b94c      	cbnz	r4, 800ef66 <__pow5mult+0x56>
 800ef52:	f240 2171 	movw	r1, #625	; 0x271
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7ff ff3b 	bl	800edd2 <__i2b>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef62:	4604      	mov	r4, r0
 800ef64:	6003      	str	r3, [r0, #0]
 800ef66:	f04f 0800 	mov.w	r8, #0
 800ef6a:	07eb      	lsls	r3, r5, #31
 800ef6c:	d50a      	bpl.n	800ef84 <__pow5mult+0x74>
 800ef6e:	4639      	mov	r1, r7
 800ef70:	4622      	mov	r2, r4
 800ef72:	4630      	mov	r0, r6
 800ef74:	f7ff ff36 	bl	800ede4 <__multiply>
 800ef78:	4639      	mov	r1, r7
 800ef7a:	4681      	mov	r9, r0
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7ff fe88 	bl	800ec92 <_Bfree>
 800ef82:	464f      	mov	r7, r9
 800ef84:	106d      	asrs	r5, r5, #1
 800ef86:	d00b      	beq.n	800efa0 <__pow5mult+0x90>
 800ef88:	6820      	ldr	r0, [r4, #0]
 800ef8a:	b938      	cbnz	r0, 800ef9c <__pow5mult+0x8c>
 800ef8c:	4622      	mov	r2, r4
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4630      	mov	r0, r6
 800ef92:	f7ff ff27 	bl	800ede4 <__multiply>
 800ef96:	6020      	str	r0, [r4, #0]
 800ef98:	f8c0 8000 	str.w	r8, [r0]
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	e7e4      	b.n	800ef6a <__pow5mult+0x5a>
 800efa0:	4638      	mov	r0, r7
 800efa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efa6:	bf00      	nop
 800efa8:	0800f460 	.word	0x0800f460

0800efac <__lshift>:
 800efac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb0:	460c      	mov	r4, r1
 800efb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efb6:	6923      	ldr	r3, [r4, #16]
 800efb8:	6849      	ldr	r1, [r1, #4]
 800efba:	eb0a 0903 	add.w	r9, sl, r3
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	4607      	mov	r7, r0
 800efc2:	4616      	mov	r6, r2
 800efc4:	f109 0501 	add.w	r5, r9, #1
 800efc8:	42ab      	cmp	r3, r5
 800efca:	db32      	blt.n	800f032 <__lshift+0x86>
 800efcc:	4638      	mov	r0, r7
 800efce:	f7ff fe2c 	bl	800ec2a <_Balloc>
 800efd2:	2300      	movs	r3, #0
 800efd4:	4680      	mov	r8, r0
 800efd6:	f100 0114 	add.w	r1, r0, #20
 800efda:	461a      	mov	r2, r3
 800efdc:	4553      	cmp	r3, sl
 800efde:	db2b      	blt.n	800f038 <__lshift+0x8c>
 800efe0:	6920      	ldr	r0, [r4, #16]
 800efe2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efe6:	f104 0314 	add.w	r3, r4, #20
 800efea:	f016 021f 	ands.w	r2, r6, #31
 800efee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eff2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eff6:	d025      	beq.n	800f044 <__lshift+0x98>
 800eff8:	f1c2 0e20 	rsb	lr, r2, #32
 800effc:	2000      	movs	r0, #0
 800effe:	681e      	ldr	r6, [r3, #0]
 800f000:	468a      	mov	sl, r1
 800f002:	4096      	lsls	r6, r2
 800f004:	4330      	orrs	r0, r6
 800f006:	f84a 0b04 	str.w	r0, [sl], #4
 800f00a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f00e:	459c      	cmp	ip, r3
 800f010:	fa20 f00e 	lsr.w	r0, r0, lr
 800f014:	d814      	bhi.n	800f040 <__lshift+0x94>
 800f016:	6048      	str	r0, [r1, #4]
 800f018:	b108      	cbz	r0, 800f01e <__lshift+0x72>
 800f01a:	f109 0502 	add.w	r5, r9, #2
 800f01e:	3d01      	subs	r5, #1
 800f020:	4638      	mov	r0, r7
 800f022:	f8c8 5010 	str.w	r5, [r8, #16]
 800f026:	4621      	mov	r1, r4
 800f028:	f7ff fe33 	bl	800ec92 <_Bfree>
 800f02c:	4640      	mov	r0, r8
 800f02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f032:	3101      	adds	r1, #1
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	e7c7      	b.n	800efc8 <__lshift+0x1c>
 800f038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f03c:	3301      	adds	r3, #1
 800f03e:	e7cd      	b.n	800efdc <__lshift+0x30>
 800f040:	4651      	mov	r1, sl
 800f042:	e7dc      	b.n	800effe <__lshift+0x52>
 800f044:	3904      	subs	r1, #4
 800f046:	f853 2b04 	ldr.w	r2, [r3], #4
 800f04a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f04e:	459c      	cmp	ip, r3
 800f050:	d8f9      	bhi.n	800f046 <__lshift+0x9a>
 800f052:	e7e4      	b.n	800f01e <__lshift+0x72>

0800f054 <__mcmp>:
 800f054:	6903      	ldr	r3, [r0, #16]
 800f056:	690a      	ldr	r2, [r1, #16]
 800f058:	1a9b      	subs	r3, r3, r2
 800f05a:	b530      	push	{r4, r5, lr}
 800f05c:	d10c      	bne.n	800f078 <__mcmp+0x24>
 800f05e:	0092      	lsls	r2, r2, #2
 800f060:	3014      	adds	r0, #20
 800f062:	3114      	adds	r1, #20
 800f064:	1884      	adds	r4, r0, r2
 800f066:	4411      	add	r1, r2
 800f068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f06c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f070:	4295      	cmp	r5, r2
 800f072:	d003      	beq.n	800f07c <__mcmp+0x28>
 800f074:	d305      	bcc.n	800f082 <__mcmp+0x2e>
 800f076:	2301      	movs	r3, #1
 800f078:	4618      	mov	r0, r3
 800f07a:	bd30      	pop	{r4, r5, pc}
 800f07c:	42a0      	cmp	r0, r4
 800f07e:	d3f3      	bcc.n	800f068 <__mcmp+0x14>
 800f080:	e7fa      	b.n	800f078 <__mcmp+0x24>
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	e7f7      	b.n	800f078 <__mcmp+0x24>

0800f088 <__mdiff>:
 800f088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f08c:	460d      	mov	r5, r1
 800f08e:	4607      	mov	r7, r0
 800f090:	4611      	mov	r1, r2
 800f092:	4628      	mov	r0, r5
 800f094:	4614      	mov	r4, r2
 800f096:	f7ff ffdd 	bl	800f054 <__mcmp>
 800f09a:	1e06      	subs	r6, r0, #0
 800f09c:	d108      	bne.n	800f0b0 <__mdiff+0x28>
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7ff fdc2 	bl	800ec2a <_Balloc>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b0:	bfa4      	itt	ge
 800f0b2:	4623      	movge	r3, r4
 800f0b4:	462c      	movge	r4, r5
 800f0b6:	4638      	mov	r0, r7
 800f0b8:	6861      	ldr	r1, [r4, #4]
 800f0ba:	bfa6      	itte	ge
 800f0bc:	461d      	movge	r5, r3
 800f0be:	2600      	movge	r6, #0
 800f0c0:	2601      	movlt	r6, #1
 800f0c2:	f7ff fdb2 	bl	800ec2a <_Balloc>
 800f0c6:	692b      	ldr	r3, [r5, #16]
 800f0c8:	60c6      	str	r6, [r0, #12]
 800f0ca:	6926      	ldr	r6, [r4, #16]
 800f0cc:	f105 0914 	add.w	r9, r5, #20
 800f0d0:	f104 0214 	add.w	r2, r4, #20
 800f0d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f0d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f0dc:	f100 0514 	add.w	r5, r0, #20
 800f0e0:	f04f 0e00 	mov.w	lr, #0
 800f0e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800f0e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800f0ec:	fa1e f18a 	uxtah	r1, lr, sl
 800f0f0:	b2a3      	uxth	r3, r4
 800f0f2:	1ac9      	subs	r1, r1, r3
 800f0f4:	0c23      	lsrs	r3, r4, #16
 800f0f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f0fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f0fe:	b289      	uxth	r1, r1
 800f100:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f104:	45c8      	cmp	r8, r9
 800f106:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f10a:	4694      	mov	ip, r2
 800f10c:	f845 3b04 	str.w	r3, [r5], #4
 800f110:	d8e8      	bhi.n	800f0e4 <__mdiff+0x5c>
 800f112:	45bc      	cmp	ip, r7
 800f114:	d304      	bcc.n	800f120 <__mdiff+0x98>
 800f116:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f11a:	b183      	cbz	r3, 800f13e <__mdiff+0xb6>
 800f11c:	6106      	str	r6, [r0, #16]
 800f11e:	e7c5      	b.n	800f0ac <__mdiff+0x24>
 800f120:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f124:	fa1e f381 	uxtah	r3, lr, r1
 800f128:	141a      	asrs	r2, r3, #16
 800f12a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f12e:	b29b      	uxth	r3, r3
 800f130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f134:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f138:	f845 3b04 	str.w	r3, [r5], #4
 800f13c:	e7e9      	b.n	800f112 <__mdiff+0x8a>
 800f13e:	3e01      	subs	r6, #1
 800f140:	e7e9      	b.n	800f116 <__mdiff+0x8e>

0800f142 <__d2b>:
 800f142:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f146:	460e      	mov	r6, r1
 800f148:	2101      	movs	r1, #1
 800f14a:	ec59 8b10 	vmov	r8, r9, d0
 800f14e:	4615      	mov	r5, r2
 800f150:	f7ff fd6b 	bl	800ec2a <_Balloc>
 800f154:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f158:	4607      	mov	r7, r0
 800f15a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f15e:	bb34      	cbnz	r4, 800f1ae <__d2b+0x6c>
 800f160:	9301      	str	r3, [sp, #4]
 800f162:	f1b8 0300 	subs.w	r3, r8, #0
 800f166:	d027      	beq.n	800f1b8 <__d2b+0x76>
 800f168:	a802      	add	r0, sp, #8
 800f16a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f16e:	f7ff fe01 	bl	800ed74 <__lo0bits>
 800f172:	9900      	ldr	r1, [sp, #0]
 800f174:	b1f0      	cbz	r0, 800f1b4 <__d2b+0x72>
 800f176:	9a01      	ldr	r2, [sp, #4]
 800f178:	f1c0 0320 	rsb	r3, r0, #32
 800f17c:	fa02 f303 	lsl.w	r3, r2, r3
 800f180:	430b      	orrs	r3, r1
 800f182:	40c2      	lsrs	r2, r0
 800f184:	617b      	str	r3, [r7, #20]
 800f186:	9201      	str	r2, [sp, #4]
 800f188:	9b01      	ldr	r3, [sp, #4]
 800f18a:	61bb      	str	r3, [r7, #24]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	bf14      	ite	ne
 800f190:	2102      	movne	r1, #2
 800f192:	2101      	moveq	r1, #1
 800f194:	6139      	str	r1, [r7, #16]
 800f196:	b1c4      	cbz	r4, 800f1ca <__d2b+0x88>
 800f198:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f19c:	4404      	add	r4, r0
 800f19e:	6034      	str	r4, [r6, #0]
 800f1a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f1a4:	6028      	str	r0, [r5, #0]
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	b003      	add	sp, #12
 800f1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1b2:	e7d5      	b.n	800f160 <__d2b+0x1e>
 800f1b4:	6179      	str	r1, [r7, #20]
 800f1b6:	e7e7      	b.n	800f188 <__d2b+0x46>
 800f1b8:	a801      	add	r0, sp, #4
 800f1ba:	f7ff fddb 	bl	800ed74 <__lo0bits>
 800f1be:	9b01      	ldr	r3, [sp, #4]
 800f1c0:	617b      	str	r3, [r7, #20]
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	6139      	str	r1, [r7, #16]
 800f1c6:	3020      	adds	r0, #32
 800f1c8:	e7e5      	b.n	800f196 <__d2b+0x54>
 800f1ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f1ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1d2:	6030      	str	r0, [r6, #0]
 800f1d4:	6918      	ldr	r0, [r3, #16]
 800f1d6:	f7ff fdae 	bl	800ed36 <__hi0bits>
 800f1da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f1de:	e7e1      	b.n	800f1a4 <__d2b+0x62>

0800f1e0 <_calloc_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	fb02 f401 	mul.w	r4, r2, r1
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	f000 f808 	bl	800f1fc <_malloc_r>
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	b118      	cbz	r0, 800f1f8 <_calloc_r+0x18>
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	f7fe fb62 	bl	800d8bc <memset>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}

0800f1fc <_malloc_r>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	1ccd      	adds	r5, r1, #3
 800f200:	f025 0503 	bic.w	r5, r5, #3
 800f204:	3508      	adds	r5, #8
 800f206:	2d0c      	cmp	r5, #12
 800f208:	bf38      	it	cc
 800f20a:	250c      	movcc	r5, #12
 800f20c:	2d00      	cmp	r5, #0
 800f20e:	4606      	mov	r6, r0
 800f210:	db01      	blt.n	800f216 <_malloc_r+0x1a>
 800f212:	42a9      	cmp	r1, r5
 800f214:	d903      	bls.n	800f21e <_malloc_r+0x22>
 800f216:	230c      	movs	r3, #12
 800f218:	6033      	str	r3, [r6, #0]
 800f21a:	2000      	movs	r0, #0
 800f21c:	bd70      	pop	{r4, r5, r6, pc}
 800f21e:	f000 f869 	bl	800f2f4 <__malloc_lock>
 800f222:	4a21      	ldr	r2, [pc, #132]	; (800f2a8 <_malloc_r+0xac>)
 800f224:	6814      	ldr	r4, [r2, #0]
 800f226:	4621      	mov	r1, r4
 800f228:	b991      	cbnz	r1, 800f250 <_malloc_r+0x54>
 800f22a:	4c20      	ldr	r4, [pc, #128]	; (800f2ac <_malloc_r+0xb0>)
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	b91b      	cbnz	r3, 800f238 <_malloc_r+0x3c>
 800f230:	4630      	mov	r0, r6
 800f232:	f000 f83d 	bl	800f2b0 <_sbrk_r>
 800f236:	6020      	str	r0, [r4, #0]
 800f238:	4629      	mov	r1, r5
 800f23a:	4630      	mov	r0, r6
 800f23c:	f000 f838 	bl	800f2b0 <_sbrk_r>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d124      	bne.n	800f28e <_malloc_r+0x92>
 800f244:	230c      	movs	r3, #12
 800f246:	6033      	str	r3, [r6, #0]
 800f248:	4630      	mov	r0, r6
 800f24a:	f000 f854 	bl	800f2f6 <__malloc_unlock>
 800f24e:	e7e4      	b.n	800f21a <_malloc_r+0x1e>
 800f250:	680b      	ldr	r3, [r1, #0]
 800f252:	1b5b      	subs	r3, r3, r5
 800f254:	d418      	bmi.n	800f288 <_malloc_r+0x8c>
 800f256:	2b0b      	cmp	r3, #11
 800f258:	d90f      	bls.n	800f27a <_malloc_r+0x7e>
 800f25a:	600b      	str	r3, [r1, #0]
 800f25c:	50cd      	str	r5, [r1, r3]
 800f25e:	18cc      	adds	r4, r1, r3
 800f260:	4630      	mov	r0, r6
 800f262:	f000 f848 	bl	800f2f6 <__malloc_unlock>
 800f266:	f104 000b 	add.w	r0, r4, #11
 800f26a:	1d23      	adds	r3, r4, #4
 800f26c:	f020 0007 	bic.w	r0, r0, #7
 800f270:	1ac3      	subs	r3, r0, r3
 800f272:	d0d3      	beq.n	800f21c <_malloc_r+0x20>
 800f274:	425a      	negs	r2, r3
 800f276:	50e2      	str	r2, [r4, r3]
 800f278:	e7d0      	b.n	800f21c <_malloc_r+0x20>
 800f27a:	428c      	cmp	r4, r1
 800f27c:	684b      	ldr	r3, [r1, #4]
 800f27e:	bf16      	itet	ne
 800f280:	6063      	strne	r3, [r4, #4]
 800f282:	6013      	streq	r3, [r2, #0]
 800f284:	460c      	movne	r4, r1
 800f286:	e7eb      	b.n	800f260 <_malloc_r+0x64>
 800f288:	460c      	mov	r4, r1
 800f28a:	6849      	ldr	r1, [r1, #4]
 800f28c:	e7cc      	b.n	800f228 <_malloc_r+0x2c>
 800f28e:	1cc4      	adds	r4, r0, #3
 800f290:	f024 0403 	bic.w	r4, r4, #3
 800f294:	42a0      	cmp	r0, r4
 800f296:	d005      	beq.n	800f2a4 <_malloc_r+0xa8>
 800f298:	1a21      	subs	r1, r4, r0
 800f29a:	4630      	mov	r0, r6
 800f29c:	f000 f808 	bl	800f2b0 <_sbrk_r>
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d0cf      	beq.n	800f244 <_malloc_r+0x48>
 800f2a4:	6025      	str	r5, [r4, #0]
 800f2a6:	e7db      	b.n	800f260 <_malloc_r+0x64>
 800f2a8:	200001fc 	.word	0x200001fc
 800f2ac:	20000200 	.word	0x20000200

0800f2b0 <_sbrk_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4c06      	ldr	r4, [pc, #24]	; (800f2cc <_sbrk_r+0x1c>)
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	4608      	mov	r0, r1
 800f2ba:	6023      	str	r3, [r4, #0]
 800f2bc:	f7fa fe40 	bl	8009f40 <_sbrk>
 800f2c0:	1c43      	adds	r3, r0, #1
 800f2c2:	d102      	bne.n	800f2ca <_sbrk_r+0x1a>
 800f2c4:	6823      	ldr	r3, [r4, #0]
 800f2c6:	b103      	cbz	r3, 800f2ca <_sbrk_r+0x1a>
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	bd38      	pop	{r3, r4, r5, pc}
 800f2cc:	20000d64 	.word	0x20000d64

0800f2d0 <__ascii_mbtowc>:
 800f2d0:	b082      	sub	sp, #8
 800f2d2:	b901      	cbnz	r1, 800f2d6 <__ascii_mbtowc+0x6>
 800f2d4:	a901      	add	r1, sp, #4
 800f2d6:	b142      	cbz	r2, 800f2ea <__ascii_mbtowc+0x1a>
 800f2d8:	b14b      	cbz	r3, 800f2ee <__ascii_mbtowc+0x1e>
 800f2da:	7813      	ldrb	r3, [r2, #0]
 800f2dc:	600b      	str	r3, [r1, #0]
 800f2de:	7812      	ldrb	r2, [r2, #0]
 800f2e0:	1c10      	adds	r0, r2, #0
 800f2e2:	bf18      	it	ne
 800f2e4:	2001      	movne	r0, #1
 800f2e6:	b002      	add	sp, #8
 800f2e8:	4770      	bx	lr
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	e7fb      	b.n	800f2e6 <__ascii_mbtowc+0x16>
 800f2ee:	f06f 0001 	mvn.w	r0, #1
 800f2f2:	e7f8      	b.n	800f2e6 <__ascii_mbtowc+0x16>

0800f2f4 <__malloc_lock>:
 800f2f4:	4770      	bx	lr

0800f2f6 <__malloc_unlock>:
 800f2f6:	4770      	bx	lr

0800f2f8 <__ascii_wctomb>:
 800f2f8:	b149      	cbz	r1, 800f30e <__ascii_wctomb+0x16>
 800f2fa:	2aff      	cmp	r2, #255	; 0xff
 800f2fc:	bf85      	ittet	hi
 800f2fe:	238a      	movhi	r3, #138	; 0x8a
 800f300:	6003      	strhi	r3, [r0, #0]
 800f302:	700a      	strbls	r2, [r1, #0]
 800f304:	f04f 30ff 	movhi.w	r0, #4294967295
 800f308:	bf98      	it	ls
 800f30a:	2001      	movls	r0, #1
 800f30c:	4770      	bx	lr
 800f30e:	4608      	mov	r0, r1
 800f310:	4770      	bx	lr
	...

0800f314 <_init>:
 800f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f316:	bf00      	nop
 800f318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f31a:	bc08      	pop	{r3}
 800f31c:	469e      	mov	lr, r3
 800f31e:	4770      	bx	lr

0800f320 <_fini>:
 800f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f322:	bf00      	nop
 800f324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f326:	bc08      	pop	{r3}
 800f328:	469e      	mov	lr, r3
 800f32a:	4770      	bx	lr
