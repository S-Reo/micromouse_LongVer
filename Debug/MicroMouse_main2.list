
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000a9f0  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000350  080129f0  080129f0  000229f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08012d40  08012d40  000301dc  2**0
                  CONTENTS
  6 .ARM          00000008  08012d40  08012d40  00022d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08012d48  08012d48  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08012d48  08012d48  00022d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08012d4c  08012d4c  00022d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001dc  20000000  08012d50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005e0  200001dc  08012f2c  000301dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007bc  08012f2c  000307bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b0ea  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003dc3  00000000  00000000  0004b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001458  00000000  00000000  0004f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001258  00000000  00000000  00050518  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000237f2  00000000  00000000  00051770  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000131b9  00000000  00000000  00074f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8662  00000000  00000000  0008811b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0015077d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005fe8  00000000  00000000  001507f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001dc 	.word	0x200001dc
 800801c:	00000000 	.word	0x00000000
 8008020:	080129d8 	.word	0x080129d8

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e0 	.word	0x200001e0
 800803c:	080129d8 	.word	0x080129d8

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <RotateAccel>:
	keep_counter[LEFT] = INITIAL_PULSE;
	keep_counter[RIGHT] = INITIAL_PULSE;
}

void RotateAccel(float deg, float rotate_ang_v)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - angular_v;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	617b      	str	r3, [r7, #20]
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)

		//周期、角速度、距離


	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008dd4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008f50 <RotateAccel+0x198>
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a354      	add	r3, pc, #336	; (adr r3, 8008f38 <RotateAccel+0x180>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff fde7 	bl	80089c8 <__aeabi_d2iz>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008dfe:	4b55      	ldr	r3, [pc, #340]	; (8008f54 <RotateAccel+0x19c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008e02:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <RotateAccel+0x19c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008e08:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8008e0a:	edd7 7a00 	vldr	s15, [r7]
 8008e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	dd3f      	ble.n	8008e98 <RotateAccel+0xe0>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 8008e18:	e02f      	b.n	8008e7a <RotateAccel+0xc2>
		{
			angular_acceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	a347      	add	r3, pc, #284	; (adr r3, 8008f40 <RotateAccel+0x188>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7ff fb1f 	bl	8008468 <__aeabi_dmul>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	4625      	mov	r5, r4
 8008e30:	461c      	mov	r4, r3
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f7ff fac0 	bl	80083b8 <__aeabi_f2d>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7ff fb12 	bl	8008468 <__aeabi_dmul>
 8008e44:	4603      	mov	r3, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4625      	mov	r5, r4
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e54:	ee17 0a90 	vmov	r0, s15
 8008e58:	f7ff faae 	bl	80083b8 <__aeabi_f2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7ff fc2a 	bl	80086bc <__aeabi_ddiv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	4621      	mov	r1, r4
 8008e70:	f7ff fdd2 	bl	8008a18 <__aeabi_d2f>
 8008e74:	4602      	mov	r2, r0
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <RotateAccel+0x1a0>)
 8008e78:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	441a      	add	r2, r3
 8008e80:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <RotateAccel+0x19c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	db4d      	blt.n	8008f24 <RotateAccel+0x16c>
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad2      	subs	r2, r2, r3
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <RotateAccel+0x19c>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	ddc1      	ble.n	8008e1a <RotateAccel+0x62>
 8008e96:	e045      	b.n	8008f24 <RotateAccel+0x16c>
		}

	}
	else if( rotate_ang_v < 0)
 8008e98:	edd7 7a00 	vldr	s15, [r7]
 8008e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	d53e      	bpl.n	8008f24 <RotateAccel+0x16c>
	{
		//printf("加速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 8008ea6:	e02f      	b.n	8008f08 <RotateAccel+0x150>
		{
			angular_acceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f7ff fa85 	bl	80083b8 <__aeabi_f2d>
 8008eae:	a326      	add	r3, pc, #152	; (adr r3, 8008f48 <RotateAccel+0x190>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7ff fad8 	bl	8008468 <__aeabi_dmul>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	461c      	mov	r4, r3
 8008ec0:	6978      	ldr	r0, [r7, #20]
 8008ec2:	f7ff fa79 	bl	80083b8 <__aeabi_f2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7ff facb 	bl	8008468 <__aeabi_dmul>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4625      	mov	r5, r4
 8008ed8:	461c      	mov	r4, r3
 8008eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ee2:	ee17 0a90 	vmov	r0, s15
 8008ee6:	f7ff fa67 	bl	80083b8 <__aeabi_f2d>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7ff fbe3 	bl	80086bc <__aeabi_ddiv>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	4618      	mov	r0, r3
 8008efc:	4621      	mov	r1, r4
 8008efe:	f7ff fd8b 	bl	8008a18 <__aeabi_d2f>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <RotateAccel+0x1a0>)
 8008f06:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <RotateAccel+0x19c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	dc06      	bgt.n	8008f24 <RotateAccel+0x16c>
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <RotateAccel+0x19c>)
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	dac1      	bge.n	8008ea8 <RotateAccel+0xf0>
		}

	}
	angular_acceleration = 0;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <RotateAccel+0x1a0>)
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	f3af 8000 	nop.w
 8008f38:	9c95204e 	.word	0x9c95204e
 8008f3c:	40fc4597 	.word	0x40fc4597
 8008f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f44:	3fb0624d 	.word	0x3fb0624d
 8008f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f4c:	bfb0624d 	.word	0xbfb0624d
 8008f50:	43b40000 	.word	0x43b40000
 8008f54:	20000264 	.word	0x20000264
 8008f58:	2000028c 	.word	0x2000028c
 8008f5c:	00000000 	.word	0x00000000

08008f60 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f6a:	edc7 0a00 	vstr	s1, [r7]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f72:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009030 <RotateConst+0xd0>
 8008f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f7a:	ee16 0a90 	vmov	r0, s13
 8008f7e:	f7ff fa1b 	bl	80083b8 <__aeabi_f2d>
 8008f82:	a329      	add	r3, pc, #164	; (adr r3, 8009028 <RotateConst+0xc8>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f7ff fa6e 	bl	8008468 <__aeabi_dmul>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4618      	mov	r0, r3
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd18 	bl	80089c8 <__aeabi_d2iz>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	617b      	str	r3, [r7, #20]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <RotateConst+0xd4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008fa0:	60fb      	str	r3, [r7, #12]
			total_pulse[RIGHT]
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <RotateConst+0xd4>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008fa6:	613b      	str	r3, [r7, #16]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8008fa8:	edd7 7a00 	vldr	s15, [r7]
 8008fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb4:	dd13      	ble.n	8008fde <RotateConst+0x7e>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 8008fb6:	e003      	b.n	8008fc0 <RotateConst+0x60>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fb8:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <RotateConst+0xd8>)
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <RotateConst+0xd4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	db21      	blt.n	8009012 <RotateConst+0xb2>
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <RotateConst+0xd4>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	dded      	ble.n	8008fb8 <RotateConst+0x58>
 8008fdc:	e019      	b.n	8009012 <RotateConst+0xb2>
		}

	}
	else if (rotate_ang_v < 0)
 8008fde:	edd7 7a00 	vldr	s15, [r7]
 8008fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d512      	bpl.n	8009012 <RotateConst+0xb2>
	{
		//printf("定速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 8008fec:	e003      	b.n	8008ff6 <RotateConst+0x96>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <RotateConst+0xd8>)
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <RotateConst+0xd4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	dc06      	bgt.n	8009012 <RotateConst+0xb2>
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	441a      	add	r2, r3
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <RotateConst+0xd4>)
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	daed      	bge.n	8008fee <RotateConst+0x8e>
		}

	}
	angular_acceleration = 0;
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <RotateConst+0xd8>)
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	9c95204e 	.word	0x9c95204e
 800902c:	40fc4597 	.word	0x40fc4597
 8009030:	43b40000 	.word	0x43b40000
 8009034:	20000264 	.word	0x20000264
 8009038:	2000028c 	.word	0x2000028c
 800903c:	00000000 	.word	0x00000000

08009040 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	ed87 0a01 	vstr	s0, [r7, #4]
 800904a:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;// - angular_v;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	617b      	str	r3, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;
		//周期、角速度、距離

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009058:	edd7 7a01 	vldr	s15, [r7, #4]
 800905c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009220 <RotateDecel+0x1e0>
 8009060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009064:	ee16 0a90 	vmov	r0, s13
 8009068:	f7ff f9a6 	bl	80083b8 <__aeabi_f2d>
 800906c:	a368      	add	r3, pc, #416	; (adr r3, 8009210 <RotateDecel+0x1d0>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f7ff f9f9 	bl	8008468 <__aeabi_dmul>
 8009076:	4603      	mov	r3, r0
 8009078:	460c      	mov	r4, r1
 800907a:	4618      	mov	r0, r3
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff fca3 	bl	80089c8 <__aeabi_d2iz>
 8009082:	4603      	mov	r3, r0
 8009084:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8009086:	4b67      	ldr	r3, [pc, #412]	; (8009224 <RotateDecel+0x1e4>)
 8009088:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 800908a:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 800908c:	4b65      	ldr	r3, [pc, #404]	; (8009224 <RotateDecel+0x1e4>)
 800908e:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8009090:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8009092:	edd7 7a00 	vldr	s15, [r7]
 8009096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	dd50      	ble.n	8009142 <RotateDecel+0x102>
	{

		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 80090a0:	e040      	b.n	8009124 <RotateDecel+0xe4>
		{
			angular_acceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f7ff f988 	bl	80083b8 <__aeabi_f2d>
 80090a8:	a35b      	add	r3, pc, #364	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7ff f9db 	bl	8008468 <__aeabi_dmul>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	4625      	mov	r5, r4
 80090b8:	461c      	mov	r4, r3
 80090ba:	6978      	ldr	r0, [r7, #20]
 80090bc:	f7ff f97c 	bl	80083b8 <__aeabi_f2d>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7ff f9ce 	bl	8008468 <__aeabi_dmul>
 80090cc:	4603      	mov	r3, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4625      	mov	r5, r4
 80090d2:	461c      	mov	r4, r3
 80090d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80090d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090dc:	ee17 0a90 	vmov	r0, s15
 80090e0:	f7ff f96a 	bl	80083b8 <__aeabi_f2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7ff fae6 	bl	80086bc <__aeabi_ddiv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	4618      	mov	r0, r3
 80090f6:	4621      	mov	r1, r4
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <RotateDecel+0x1e8>)
 80090fe:	f7ff f9b3 	bl	8008468 <__aeabi_dmul>
 8009102:	4603      	mov	r3, r0
 8009104:	460c      	mov	r4, r1
 8009106:	4618      	mov	r0, r3
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff fc85 	bl	8008a18 <__aeabi_d2f>
 800910e:	4602      	mov	r2, r0
 8009110:	4b46      	ldr	r3, [pc, #280]	; (800922c <RotateDecel+0x1ec>)
 8009112:	601a      	str	r2, [r3, #0]
			if( angular_v <= 0)
 8009114:	4b46      	ldr	r3, [pc, #280]	; (8009230 <RotateDecel+0x1f0>)
 8009116:	edd3 7a00 	vldr	s15, [r3]
 800911a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d966      	bls.n	80091f2 <RotateDecel+0x1b2>
		while( ( ( keep_pulse[LEFT]+move_pulse ) >= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) <= ( total_pulse[RIGHT] ) ) )
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	441a      	add	r2, r3
 800912a:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <RotateDecel+0x1e4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	db62      	blt.n	80091f8 <RotateDecel+0x1b8>
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	4b3a      	ldr	r3, [pc, #232]	; (8009224 <RotateDecel+0x1e4>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	ddb0      	ble.n	80090a2 <RotateDecel+0x62>
 8009140:	e05a      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 8009142:	edd7 7a00 	vldr	s15, [r7]
 8009146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	d553      	bpl.n	80091f8 <RotateDecel+0x1b8>
	{
		//printf("減速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 8009150:	e040      	b.n	80091d4 <RotateDecel+0x194>
		{
			angular_acceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 8009152:	6978      	ldr	r0, [r7, #20]
 8009154:	f7ff f930 	bl	80083b8 <__aeabi_f2d>
 8009158:	a32f      	add	r3, pc, #188	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7ff f983 	bl	8008468 <__aeabi_dmul>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	4625      	mov	r5, r4
 8009168:	461c      	mov	r4, r3
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff f924 	bl	80083b8 <__aeabi_f2d>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7ff f976 	bl	8008468 <__aeabi_dmul>
 800917c:	4603      	mov	r3, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4625      	mov	r5, r4
 8009182:	461c      	mov	r4, r3
 8009184:	edd7 7a01 	vldr	s15, [r7, #4]
 8009188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800918c:	ee17 0a90 	vmov	r0, s15
 8009190:	f7ff f912 	bl	80083b8 <__aeabi_f2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7ff fa8e 	bl	80086bc <__aeabi_ddiv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4618      	mov	r0, r3
 80091a6:	4621      	mov	r1, r4
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <RotateDecel+0x1f4>)
 80091ae:	f7ff f95b 	bl	8008468 <__aeabi_dmul>
 80091b2:	4603      	mov	r3, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	4618      	mov	r0, r3
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff fc2d 	bl	8008a18 <__aeabi_d2f>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b1a      	ldr	r3, [pc, #104]	; (800922c <RotateDecel+0x1ec>)
 80091c2:	601a      	str	r2, [r3, #0]
			if( angular_v >= 0)
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <RotateDecel+0x1f0>)
 80091c6:	edd3 7a00 	vldr	s15, [r3]
 80091ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d2:	da10      	bge.n	80091f6 <RotateDecel+0x1b6>
		while( ( ( keep_pulse[LEFT]-move_pulse ) <= ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) >= ( total_pulse[RIGHT] ) ) )
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <RotateDecel+0x1e4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	dc0a      	bgt.n	80091f8 <RotateDecel+0x1b8>
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	441a      	add	r2, r3
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <RotateDecel+0x1e4>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	dab0      	bge.n	8009152 <RotateDecel+0x112>
 80091f0:	e002      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f6:	bf00      	nop
		}

	}
	angular_acceleration = 0;
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <RotateDecel+0x1ec>)
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <RotateDecel+0x1f8>)
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bdb0      	pop	{r4, r5, r7, pc}
 8009210:	9c95204e 	.word	0x9c95204e
 8009214:	40fc4597 	.word	0x40fc4597
 8009218:	d2f1a9fc 	.word	0xd2f1a9fc
 800921c:	3f50624d 	.word	0x3f50624d
 8009220:	43b40000 	.word	0x43b40000
 8009224:	20000264 	.word	0x20000264
 8009228:	c0500000 	.word	0xc0500000
 800922c:	2000028c 	.word	0x2000028c
 8009230:	20000270 	.word	0x20000270
 8009234:	40500000 	.word	0x40500000
 8009238:	20000288 	.word	0x20000288

0800923c <Rotate>:
void Rotate(float deg, float ang_accel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	ed87 0a01 	vstr	s0, [r7, #4]
 8009246:	edc7 0a00 	vstr	s1, [r7]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	RotateAccel(deg*15/90, ang_accel);
 800924a:	edd7 7a01 	vldr	s15, [r7, #4]
 800924e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009256:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80092c0 <Rotate+0x84>
 800925a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800925e:	edd7 0a00 	vldr	s1, [r7]
 8009262:	eeb0 0a66 	vmov.f32	s0, s13
 8009266:	f7ff fda7 	bl	8008db8 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",angular_v);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",angular_acceleration);
	RotateConst(deg*25/90, ang_accel);
 800926a:	edd7 7a01 	vldr	s15, [r7, #4]
 800926e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009276:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80092c0 <Rotate+0x84>
 800927a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800927e:	edd7 0a00 	vldr	s1, [r7]
 8009282:	eeb0 0a66 	vmov.f32	s0, s13
 8009286:	f7ff fe6b 	bl	8008f60 <RotateConst>
	RotateDecel(deg*50/90, ang_accel);
 800928a:	edd7 7a01 	vldr	s15, [r7, #4]
 800928e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80092c4 <Rotate+0x88>
 8009292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009296:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80092c0 <Rotate+0x84>
 800929a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800929e:	edd7 0a00 	vldr	s1, [r7]
 80092a2:	eeb0 0a66 	vmov.f32	s0, s13
 80092a6:	f7ff fecb 	bl	8009040 <RotateDecel>
//			target_angular_v = ang_accel;
//			printf("deg:負, angle, angular_v : %f, %f\r\n",angle, angular_v );
//		}
//
//	}
	target_angular_v = 0;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <Rotate+0x8c>)
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	printf("回転終了\r\n");
 80092b2:	4806      	ldr	r0, [pc, #24]	; (80092cc <Rotate+0x90>)
 80092b4:	f007 fcde 	bl	8010c74 <puts>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	42b40000 	.word	0x42b40000
 80092c4:	42480000 	.word	0x42480000
 80092c8:	20000288 	.word	0x20000288
 80092cc:	080129f0 	.word	0x080129f0

080092d0 <Accel>:
////	距離folを速度v_turnで進む;
//}

//
void Accel(float add_distance, float explore_speed)
{
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80092da:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 80092e4:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <Accel+0xe8>)
 80092e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80092ea:	ed97 7a00 	vldr	s14, [r7]
 80092ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092f2:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f7ff f85e 	bl	80083b8 <__aeabi_f2d>
 80092fc:	a32a      	add	r3, pc, #168	; (adr r3, 80093a8 <Accel+0xd8>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7ff f8b1 	bl	8008468 <__aeabi_dmul>
 8009306:	4603      	mov	r3, r0
 8009308:	460c      	mov	r4, r1
 800930a:	4625      	mov	r5, r4
 800930c:	461c      	mov	r4, r3
 800930e:	6978      	ldr	r0, [r7, #20]
 8009310:	f7ff f852 	bl	80083b8 <__aeabi_f2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4620      	mov	r0, r4
 800931a:	4629      	mov	r1, r5
 800931c:	f7ff f8a4 	bl	8008468 <__aeabi_dmul>
 8009320:	4603      	mov	r3, r0
 8009322:	460c      	mov	r4, r1
 8009324:	4625      	mov	r5, r4
 8009326:	461c      	mov	r4, r3
 8009328:	edd7 7a01 	vldr	s15, [r7, #4]
 800932c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009330:	ee17 0a90 	vmov	r0, s15
 8009334:	f7ff f840 	bl	80083b8 <__aeabi_f2d>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7ff f9bc 	bl	80086bc <__aeabi_ddiv>
 8009344:	4603      	mov	r3, r0
 8009346:	460c      	mov	r4, r1
 8009348:	4618      	mov	r0, r3
 800934a:	4621      	mov	r1, r4
 800934c:	f7ff fb64 	bl	8008a18 <__aeabi_d2f>
 8009350:	4602      	mov	r2, r0
 8009352:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <Accel+0xec>)
 8009354:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009356:	edd7 7a01 	vldr	s15, [r7, #4]
 800935a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800935e:	ee17 0a90 	vmov	r0, s15
 8009362:	f7ff f829 	bl	80083b8 <__aeabi_f2d>
 8009366:	a312      	add	r3, pc, #72	; (adr r3, 80093b0 <Accel+0xe0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7ff f9a6 	bl	80086bc <__aeabi_ddiv>
 8009370:	4603      	mov	r3, r0
 8009372:	460c      	mov	r4, r1
 8009374:	4618      	mov	r0, r3
 8009376:	4621      	mov	r1, r4
 8009378:	f7ff fb26 	bl	80089c8 <__aeabi_d2iz>
 800937c:	4603      	mov	r3, r0
 800937e:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8009380:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <Accel+0xf0>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	while( ( keep_pulse ) >= ( total_pulse[BODY] ) )
 800938a:	bf00      	nop
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <Accel+0xf0>)
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	429a      	cmp	r2, r3
 8009394:	dafa      	bge.n	800938c <Accel+0xbc>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			keep_counter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	acceleration = 0;
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <Accel+0xec>)
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800939e:	bf00      	nop
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bdb0      	pop	{r4, r5, r7, pc}
 80093a6:	bf00      	nop
 80093a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80093ac:	3f50624d 	.word	0x3f50624d
 80093b0:	317249d5 	.word	0x317249d5
 80093b4:	3f502de0 	.word	0x3f502de0
 80093b8:	20000278 	.word	0x20000278
 80093bc:	20000284 	.word	0x20000284
 80093c0:	20000264 	.word	0x20000264
 80093c4:	00000000 	.word	0x00000000

080093c8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80093c8:	b5b0      	push	{r4, r5, r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80093d2:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 80093dc:	4b3e      	ldr	r3, [pc, #248]	; (80094d8 <Decel+0x110>)
 80093de:	ed93 7a02 	vldr	s14, [r3, #8]
 80093e2:	edd7 7a00 	vldr	s15, [r7]
 80093e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093ea:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80093ee:	6978      	ldr	r0, [r7, #20]
 80093f0:	f7fe ffe2 	bl	80083b8 <__aeabi_f2d>
 80093f4:	a334      	add	r3, pc, #208	; (adr r3, 80094c8 <Decel+0x100>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7ff f835 	bl	8008468 <__aeabi_dmul>
 80093fe:	4603      	mov	r3, r0
 8009400:	460c      	mov	r4, r1
 8009402:	4625      	mov	r5, r4
 8009404:	461c      	mov	r4, r3
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f7fe ffd6 	bl	80083b8 <__aeabi_f2d>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7ff f828 	bl	8008468 <__aeabi_dmul>
 8009418:	4603      	mov	r3, r0
 800941a:	460c      	mov	r4, r1
 800941c:	4625      	mov	r5, r4
 800941e:	461c      	mov	r4, r3
 8009420:	edd7 7a01 	vldr	s15, [r7, #4]
 8009424:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009428:	ee17 0a90 	vmov	r0, s15
 800942c:	f7fe ffc4 	bl	80083b8 <__aeabi_f2d>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4620      	mov	r0, r4
 8009436:	4629      	mov	r1, r5
 8009438:	f7ff f940 	bl	80086bc <__aeabi_ddiv>
 800943c:	4603      	mov	r3, r0
 800943e:	460c      	mov	r4, r1
 8009440:	4618      	mov	r0, r3
 8009442:	4621      	mov	r1, r4
 8009444:	f7ff fae8 	bl	8008a18 <__aeabi_d2f>
 8009448:	4603      	mov	r3, r0
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef1 7a67 	vneg.f32	s15, s15
 8009452:	4b22      	ldr	r3, [pc, #136]	; (80094dc <Decel+0x114>)
 8009454:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009458:	edd7 7a01 	vldr	s15, [r7, #4]
 800945c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009460:	ee17 0a90 	vmov	r0, s15
 8009464:	f7fe ffa8 	bl	80083b8 <__aeabi_f2d>
 8009468:	a319      	add	r3, pc, #100	; (adr r3, 80094d0 <Decel+0x108>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f7ff f925 	bl	80086bc <__aeabi_ddiv>
 8009472:	4603      	mov	r3, r0
 8009474:	460c      	mov	r4, r1
 8009476:	4618      	mov	r0, r3
 8009478:	4621      	mov	r1, r4
 800947a:	f7ff faa5 	bl	80089c8 <__aeabi_d2iz>
 800947e:	4603      	mov	r3, r0
 8009480:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <Decel+0x118>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 800948c:	e007      	b.n	800949e <Decel+0xd6>
//		if( (abs(TIM4->CNT - INITIAL_PULSE) >= 29000) )
//		{
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			keep_counter[RIGHT] = INITIAL_PULSE;
//		}
		if(target_velocity[BODY] <= 0)
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <Decel+0x110>)
 8009490:	edd3 7a02 	vldr	s15, [r3, #8]
 8009494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949c:	d905      	bls.n	80094aa <Decel+0xe2>
	while( ( keep_pulse ) >= ( total_pulse[BODY]) )
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <Decel+0x118>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	daf2      	bge.n	800948e <Decel+0xc6>
 80094a8:	e000      	b.n	80094ac <Decel+0xe4>
			break;
 80094aa:	bf00      	nop
	}
	target_velocity[BODY] = 0;
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <Decel+0x110>)
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	609a      	str	r2, [r3, #8]
	acceleration = 0;
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <Decel+0x114>)
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bdb0      	pop	{r4, r5, r7, pc}
 80094c4:	f3af 8000 	nop.w
 80094c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80094cc:	3f50624d 	.word	0x3f50624d
 80094d0:	317249d5 	.word	0x317249d5
 80094d4:	3f502de0 	.word	0x3f502de0
 80094d8:	20000278 	.word	0x20000278
 80094dc:	20000284 	.word	0x20000284
 80094e0:	20000264 	.word	0x20000264
 80094e4:	00000000 	.word	0x00000000

080094e8 <GoStraight>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80094f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80094f6:	ed87 1a01 	vstr	s2, [r7, #4]
	//エンコーダの移動量チェックって、もっと細かい間隔でやったほうがいいのでは。

		//target_velocity[BODY] = explore_speed;
	//加速なら
//	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
		explore_speed += accel;
 80094fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80094fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009506:	edc7 7a02 	vstr	s15, [r7, #8]

	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800950a:	edd7 0a02 	vldr	s1, [r7, #8]
 800950e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8009588 <GoStraight+0xa0>
 8009512:	f7ff fedd 	bl	80092d0 <Accel>
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	int target_pulse = (int)(2*(move_distance-45)/MM_PER_PULSE);
 8009516:	edd7 7a03 	vldr	s15, [r7, #12]
 800951a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009588 <GoStraight+0xa0>
 800951e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009522:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009526:	ee17 0a90 	vmov	r0, s15
 800952a:	f7fe ff45 	bl	80083b8 <__aeabi_f2d>
 800952e:	a314      	add	r3, pc, #80	; (adr r3, 8009580 <GoStraight+0x98>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7ff f8c2 	bl	80086bc <__aeabi_ddiv>
 8009538:	4603      	mov	r3, r0
 800953a:	460c      	mov	r4, r1
 800953c:	4618      	mov	r0, r3
 800953e:	4621      	mov	r1, r4
 8009540:	f7ff fa42 	bl	80089c8 <__aeabi_d2iz>
 8009544:	4603      	mov	r3, r0
 8009546:	617b      	str	r3, [r7, #20]
	int keep_pulse = total_pulse[BODY];
 8009548:	4b10      	ldr	r3, [pc, #64]	; (800958c <GoStraight+0xa4>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	613b      	str	r3, [r7, #16]

	while( ( keep_pulse +target_pulse) >= ( total_pulse[BODY]) )
 800954e:	e00b      	b.n	8009568 <GoStraight+0x80>
	{
		//最初の45mmで加速をストップ

		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if( ( keep_pulse + (int)(2*45/MM_PER_PULSE) )  <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8009556:	3303      	adds	r3, #3
 8009558:	4a0c      	ldr	r2, [pc, #48]	; (800958c <GoStraight+0xa4>)
 800955a:	6892      	ldr	r2, [r2, #8]
 800955c:	4293      	cmp	r3, r2
 800955e:	dc03      	bgt.n	8009568 <GoStraight+0x80>
		{
			acceleration = 0;
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <GoStraight+0xa8>)
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse +target_pulse) >= ( total_pulse[BODY]) )
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	441a      	add	r2, r3
 800956e:	4b07      	ldr	r3, [pc, #28]	; (800958c <GoStraight+0xa4>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	daec      	bge.n	8009550 <GoStraight+0x68>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd90      	pop	{r4, r7, pc}
 800957e:	bf00      	nop
 8009580:	317249d5 	.word	0x317249d5
 8009584:	3f502de0 	.word	0x3f502de0
 8009588:	42340000 	.word	0x42340000
 800958c:	20000264 	.word	0x20000264
 8009590:	20000284 	.word	0x20000284

08009594 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定
	//カウンタをリセットするのは別のところ
	int current_pulse = *timer_counter;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
	int pulse_displacement = -1* (current_pulse - initial_pulse);
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	60bb      	str	r3, [r7, #8]
	//前回値として保存

//	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff ffe2 	bl	8009594 <InitPulse>

	return pulse_displacement;
 80095d0:	68bb      	ldr	r3, [r7, #8]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 80095ec:	4a2c      	ldr	r2, [pc, #176]	; (80096a0 <GetWallDataAverage+0xc4>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfb8      	it	lt
 80095fc:	425b      	neglt	r3, r3
 80095fe:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8009600:	4927      	ldr	r1, [pc, #156]	; (80096a0 <GetWallDataAverage+0xc4>)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800960a:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <GetWallDataAverage+0xc8>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	441a      	add	r2, r3
 8009616:	4923      	ldr	r1, [pc, #140]	; (80096a4 <GetWallDataAverage+0xc8>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800961e:	4a22      	ldr	r2, [pc, #136]	; (80096a8 <GetWallDataAverage+0xcc>)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	491f      	ldr	r1, [pc, #124]	; (80096a8 <GetWallDataAverage+0xcc>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8009630:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <GetWallDataAverage+0xcc>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	429a      	cmp	r2, r3
 800963c:	d121      	bne.n	8009682 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800963e:	4a19      	ldr	r2, [pc, #100]	; (80096a4 <GetWallDataAverage+0xc8>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800964e:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <GetWallDataAverage+0xcc>)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800965e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009662:	4a12      	ldr	r2, [pc, #72]	; (80096ac <GetWallDataAverage+0xd0>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800966e:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <GetWallDataAverage+0xc8>)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2100      	movs	r1, #0
 8009674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8009678:	4a0b      	ldr	r2, [pc, #44]	; (80096a8 <GetWallDataAverage+0xcc>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2100      	movs	r1, #0
 800967e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 8009682:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <GetWallDataAverage+0xd0>)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	ee07 3a90 	vmov	s15, r3
}
 8009690:	eeb0 0a67 	vmov.f32	s0, s15
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	200001f8 	.word	0x200001f8
 80096a4:	20000208 	.word	0x20000208
 80096a8:	20000218 	.word	0x20000218
 80096ac:	20000228 	.word	0x20000228

080096b0 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80096bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80096c0:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 80096c4:	f04f 0300 	mov.w	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80096d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80096e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80096e4:	ed97 7a00 	vldr	s14, [r7]
 80096e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ec:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	ee07 3a90 	vmov	s15, r3
}
 80096f6:	eeb0 0a67 	vmov.f32	s0, s15
 80096fa:	371c      	adds	r7, #28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800970e:	2301      	movs	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
 8009716:	e007      	b.n	8009728 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	fb02 f303 	mul.w	r3, r2, r3
 8009720:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3301      	adds	r3, #1
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	dbf3      	blt.n	8009718 <IntegerPower+0x14>
	}
	return pattern_num;
 8009730:	68fb      	ldr	r3, [r7, #12]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800973e:	b480      	push	{r7}
 8009740:	b08b      	sub	sp, #44	; 0x2c
 8009742:	af00      	add	r7, sp, #0
 8009744:	ed87 0a03 	vstr	s0, [r7, #12]
 8009748:	edc7 0a02 	vstr	s1, [r7, #8]
 800974c:	ed87 1a01 	vstr	s2, [r7, #4]
 8009750:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 8009752:	edd7 6a03 	vldr	s13, [r7, #12]
 8009756:	ed97 7a01 	vldr	s14, [r7, #4]
 800975a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 8009762:	edd7 6a02 	vldr	s13, [r7, #8]
 8009766:	ed97 7a01 	vldr	s14, [r7, #4]
 800976a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976e:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 8009772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009776:	edd7 7a06 	vldr	s15, [r7, #24]
 800977a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	ee07 3a90 	vmov	s15, r3
 8009784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978c:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009794:	2300      	movs	r3, #0
 8009796:	623b      	str	r3, [r7, #32]
 8009798:	e018      	b.n	80097cc <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	ee07 3a90 	vmov	s15, r3
 80097a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80097a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80097b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80097b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c0:	db01      	blt.n	80097c6 <GetBatteryLevel+0x88>
		{
			pattern = i;
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	3301      	adds	r3, #1
 80097ca:	623b      	str	r3, [r7, #32]
 80097cc:	6a3a      	ldr	r2, [r7, #32]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	dbe2      	blt.n	800979a <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	372c      	adds	r7, #44	; 0x2c
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <TimeMonitor>:

int timer=0, t=0;
//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 80097e2:	b480      	push	{r7}
 80097e4:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 80097e6:	bf00      	nop
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <UpdatePhisicalDataFromEnc>:


void UpdatePhisicalDataFromEnc()
{
 80097f0:	b5b0      	push	{r4, r5, r7, lr}
 80097f2:	af00      	add	r7, sp, #0

	//エンコーダパルスをどう扱うか。今のままだと1msでの変位が大きいと目標パルス量を大きく通り越してしまう。→速度の取得時にはリセットをしないで、前回のパルスからの差を取ればいいかも。
	//TIM3->CNT - INITIAL_PULSE <= target_pulse の間は直進。みたいなプログラムにして、breakした瞬間にパルスリセット。
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&keep_counter[LEFT]*/);
 80097f4:	f247 512f 	movw	r1, #29999	; 0x752f
 80097f8:	4857      	ldr	r0, [pc, #348]	; (8009958 <UpdatePhisicalDataFromEnc+0x168>)
 80097fa:	f7ff fed9 	bl	80095b0 <GetPulseDisplacement>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b56      	ldr	r3, [pc, #344]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 8009802:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&keep_counter[RIGHT]*/);
 8009804:	f247 512f 	movw	r1, #29999	; 0x752f
 8009808:	4855      	ldr	r0, [pc, #340]	; (8009960 <UpdatePhisicalDataFromEnc+0x170>)
 800980a:	f7ff fed1 	bl	80095b0 <GetPulseDisplacement>
 800980e:	4602      	mov	r2, r0
 8009810:	4b52      	ldr	r3, [pc, #328]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 8009812:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 8009814:	4b51      	ldr	r3, [pc, #324]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009820:	ee17 0a90 	vmov	r0, s15
 8009824:	f7fe fdc8 	bl	80083b8 <__aeabi_f2d>
 8009828:	a345      	add	r3, pc, #276	; (adr r3, 8009940 <UpdatePhisicalDataFromEnc+0x150>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7fe fe1b 	bl	8008468 <__aeabi_dmul>
 8009832:	4603      	mov	r3, r0
 8009834:	460c      	mov	r4, r1
 8009836:	4618      	mov	r0, r3
 8009838:	4621      	mov	r1, r4
 800983a:	a343      	add	r3, pc, #268	; (adr r3, 8009948 <UpdatePhisicalDataFromEnc+0x158>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7fe ff3c 	bl	80086bc <__aeabi_ddiv>
 8009844:	4603      	mov	r3, r0
 8009846:	460c      	mov	r4, r1
 8009848:	4618      	mov	r0, r3
 800984a:	4621      	mov	r1, r4
 800984c:	f7ff f8e4 	bl	8008a18 <__aeabi_d2f>
 8009850:	4602      	mov	r2, r0
 8009852:	4b44      	ldr	r3, [pc, #272]	; (8009964 <UpdatePhisicalDataFromEnc+0x174>)
 8009854:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 8009856:	4b41      	ldr	r3, [pc, #260]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009862:	ee17 0a90 	vmov	r0, s15
 8009866:	f7fe fda7 	bl	80083b8 <__aeabi_f2d>
 800986a:	a335      	add	r3, pc, #212	; (adr r3, 8009940 <UpdatePhisicalDataFromEnc+0x150>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7fe fdfa 	bl	8008468 <__aeabi_dmul>
 8009874:	4603      	mov	r3, r0
 8009876:	460c      	mov	r4, r1
 8009878:	4618      	mov	r0, r3
 800987a:	4621      	mov	r1, r4
 800987c:	a332      	add	r3, pc, #200	; (adr r3, 8009948 <UpdatePhisicalDataFromEnc+0x158>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7fe ff1b 	bl	80086bc <__aeabi_ddiv>
 8009886:	4603      	mov	r3, r0
 8009888:	460c      	mov	r4, r1
 800988a:	4618      	mov	r0, r3
 800988c:	4621      	mov	r1, r4
 800988e:	f7ff f8c3 	bl	8008a18 <__aeabi_d2f>
 8009892:	4602      	mov	r2, r0
 8009894:	4b33      	ldr	r3, [pc, #204]	; (8009964 <UpdatePhisicalDataFromEnc+0x174>)
 8009896:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 8009898:	4b33      	ldr	r3, [pc, #204]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	4b2f      	ldr	r3, [pc, #188]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4413      	add	r3, r2
 80098a2:	4a31      	ldr	r2, [pc, #196]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098a4:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 80098a6:	4b30      	ldr	r3, [pc, #192]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	4b2c      	ldr	r3, [pc, #176]	; (800995c <UpdatePhisicalDataFromEnc+0x16c>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	4a2d      	ldr	r2, [pc, #180]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098b2:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 80098b4:	4b2c      	ldr	r3, [pc, #176]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4b2b      	ldr	r3, [pc, #172]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	4a2a      	ldr	r2, [pc, #168]	; (8009968 <UpdatePhisicalDataFromEnc+0x178>)
 80098c0:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 80098c2:	4b28      	ldr	r3, [pc, #160]	; (8009964 <UpdatePhisicalDataFromEnc+0x174>)
 80098c4:	ed93 7a00 	vldr	s14, [r3]
 80098c8:	4b26      	ldr	r3, [pc, #152]	; (8009964 <UpdatePhisicalDataFromEnc+0x174>)
 80098ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80098ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d2:	ee17 0a90 	vmov	r0, s15
 80098d6:	f7fe fd6f 	bl	80083b8 <__aeabi_f2d>
 80098da:	a31d      	add	r3, pc, #116	; (adr r3, 8009950 <UpdatePhisicalDataFromEnc+0x160>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f7fe feec 	bl	80086bc <__aeabi_ddiv>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4618      	mov	r0, r3
 80098ea:	4621      	mov	r1, r4
 80098ec:	f7ff f894 	bl	8008a18 <__aeabi_d2f>
 80098f0:	4602      	mov	r2, r0
 80098f2:	4b1e      	ldr	r3, [pc, #120]	; (800996c <UpdatePhisicalDataFromEnc+0x17c>)
 80098f4:	601a      	str	r2, [r3, #0]

	//角度 rad/msを積算
	angle += angular_v * T1;
 80098f6:	4b1e      	ldr	r3, [pc, #120]	; (8009970 <UpdatePhisicalDataFromEnc+0x180>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fd5c 	bl	80083b8 <__aeabi_f2d>
 8009900:	4604      	mov	r4, r0
 8009902:	460d      	mov	r5, r1
 8009904:	4b19      	ldr	r3, [pc, #100]	; (800996c <UpdatePhisicalDataFromEnc+0x17c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe fd55 	bl	80083b8 <__aeabi_f2d>
 800990e:	a30e      	add	r3, pc, #56	; (adr r3, 8009948 <UpdatePhisicalDataFromEnc+0x158>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7fe fda8 	bl	8008468 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7fe fbec 	bl	80080fc <__adddf3>
 8009924:	4603      	mov	r3, r0
 8009926:	460c      	mov	r4, r1
 8009928:	4618      	mov	r0, r3
 800992a:	4621      	mov	r1, r4
 800992c:	f7ff f874 	bl	8008a18 <__aeabi_d2f>
 8009930:	4602      	mov	r2, r0
 8009932:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <UpdatePhisicalDataFromEnc+0x180>)
 8009934:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 8009936:	bf00      	nop
 8009938:	bdb0      	pop	{r4, r5, r7, pc}
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	317249d5 	.word	0x317249d5
 8009944:	3f502de0 	.word	0x3f502de0
 8009948:	d2f1a9fc 	.word	0xd2f1a9fc
 800994c:	3f50624d 	.word	0x3f50624d
 8009950:	33333333 	.word	0x33333333
 8009954:	40423333 	.word	0x40423333
 8009958:	40000424 	.word	0x40000424
 800995c:	20000250 	.word	0x20000250
 8009960:	40000824 	.word	0x40000824
 8009964:	20000258 	.word	0x20000258
 8009968:	20000264 	.word	0x20000264
 800996c:	20000270 	.word	0x20000270
 8009970:	20000274 	.word	0x20000274
 8009974:	00000000 	.word	0x00000000

08009978 <ControlMotor>:
void ControlMotor()
{
 8009978:	b5b0      	push	{r4, r5, r7, lr}
 800997a:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 800997c:	f7ff ff38 	bl	80097f0 <UpdatePhisicalDataFromEnc>
	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	//減速させすぎると、目標パルスに達する前にマイナスに振れてしまう

	target_velocity[BODY] += acceleration;
 8009980:	4b55      	ldr	r3, [pc, #340]	; (8009ad8 <ControlMotor+0x160>)
 8009982:	ed93 7a02 	vldr	s14, [r3, #8]
 8009986:	4b55      	ldr	r3, [pc, #340]	; (8009adc <ControlMotor+0x164>)
 8009988:	edd3 7a00 	vldr	s15, [r3]
 800998c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009990:	4b51      	ldr	r3, [pc, #324]	; (8009ad8 <ControlMotor+0x160>)
 8009992:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 8009996:	4b52      	ldr	r3, [pc, #328]	; (8009ae0 <ControlMotor+0x168>)
 8009998:	ed93 7a00 	vldr	s14, [r3]
 800999c:	4b51      	ldr	r3, [pc, #324]	; (8009ae4 <ControlMotor+0x16c>)
 800999e:	edd3 7a00 	vldr	s15, [r3]
 80099a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099a6:	4b4e      	ldr	r3, [pc, #312]	; (8009ae0 <ControlMotor+0x168>)
 80099a8:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 80099ac:	4b4a      	ldr	r3, [pc, #296]	; (8009ad8 <ControlMotor+0x160>)
 80099ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80099b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099b6:	ee17 0a90 	vmov	r0, s15
 80099ba:	f7fe fcfd 	bl	80083b8 <__aeabi_f2d>
 80099be:	4604      	mov	r4, r0
 80099c0:	460d      	mov	r5, r1
 80099c2:	4b47      	ldr	r3, [pc, #284]	; (8009ae0 <ControlMotor+0x168>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fcf6 	bl	80083b8 <__aeabi_f2d>
 80099cc:	a340      	add	r3, pc, #256	; (adr r3, 8009ad0 <ControlMotor+0x158>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7fe fd49 	bl	8008468 <__aeabi_dmul>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7fe fb8b 	bl	80080f8 <__aeabi_dsub>
 80099e2:	4603      	mov	r3, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	4618      	mov	r0, r3
 80099e8:	4621      	mov	r1, r4
 80099ea:	f04f 0200 	mov.w	r2, #0
 80099ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099f2:	f7fe fe63 	bl	80086bc <__aeabi_ddiv>
 80099f6:	4603      	mov	r3, r0
 80099f8:	460c      	mov	r4, r1
 80099fa:	4618      	mov	r0, r3
 80099fc:	4621      	mov	r1, r4
 80099fe:	f7ff f80b 	bl	8008a18 <__aeabi_d2f>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b34      	ldr	r3, [pc, #208]	; (8009ad8 <ControlMotor+0x160>)
 8009a06:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 8009a08:	4b35      	ldr	r3, [pc, #212]	; (8009ae0 <ControlMotor+0x168>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fcd3 	bl	80083b8 <__aeabi_f2d>
 8009a12:	a32f      	add	r3, pc, #188	; (adr r3, 8009ad0 <ControlMotor+0x158>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7fe fd26 	bl	8008468 <__aeabi_dmul>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4625      	mov	r5, r4
 8009a22:	461c      	mov	r4, r3
 8009a24:	4b2c      	ldr	r3, [pc, #176]	; (8009ad8 <ControlMotor+0x160>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fcc5 	bl	80083b8 <__aeabi_f2d>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7fe fb61 	bl	80080fc <__adddf3>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4621      	mov	r1, r4
 8009a42:	f7fe ffe9 	bl	8008a18 <__aeabi_d2f>
 8009a46:	4602      	mov	r2, r0
 8009a48:	4b23      	ldr	r3, [pc, #140]	; (8009ad8 <ControlMotor+0x160>)
 8009a4a:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 8009a4c:	4b22      	ldr	r3, [pc, #136]	; (8009ad8 <ControlMotor+0x160>)
 8009a4e:	edd3 7a00 	vldr	s15, [r3]
 8009a52:	4b25      	ldr	r3, [pc, #148]	; (8009ae8 <ControlMotor+0x170>)
 8009a54:	ed93 7a00 	vldr	s14, [r3]
 8009a58:	eeb0 1a47 	vmov.f32	s2, s14
 8009a5c:	eef0 0a67 	vmov.f32	s1, s15
 8009a60:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8009aec <ControlMotor+0x174>
 8009a64:	2000      	movs	r0, #0
 8009a66:	f000 fb2b 	bl	800a0c0 <PIDControl>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b20      	ldr	r3, [pc, #128]	; (8009af0 <ControlMotor+0x178>)
 8009a6e:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 8009a70:	4b19      	ldr	r3, [pc, #100]	; (8009ad8 <ControlMotor+0x160>)
 8009a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a76:	4b1c      	ldr	r3, [pc, #112]	; (8009ae8 <ControlMotor+0x170>)
 8009a78:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a7c:	eeb0 1a47 	vmov.f32	s2, s14
 8009a80:	eef0 0a67 	vmov.f32	s1, s15
 8009a84:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009aec <ControlMotor+0x174>
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f000 fb19 	bl	800a0c0 <PIDControl>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b18      	ldr	r3, [pc, #96]	; (8009af4 <ControlMotor+0x17c>)
 8009a92:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	//PIDControl( D_WALL, T1, photo[SL], photo[SR], &wall_right_out);

	wall_left_out = -wall_right_out;
 8009a94:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <ControlMotor+0x180>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	425b      	negs	r3, r3
 8009a9a:	4a18      	ldr	r2, [pc, #96]	; (8009afc <ControlMotor+0x184>)
 8009a9c:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 8009a9e:	4b17      	ldr	r3, [pc, #92]	; (8009afc <ControlMotor+0x184>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <ControlMotor+0x178>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	4a15      	ldr	r2, [pc, #84]	; (8009b00 <ControlMotor+0x188>)
 8009aaa:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <ControlMotor+0x180>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	4b10      	ldr	r3, [pc, #64]	; (8009af4 <ControlMotor+0x17c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4a13      	ldr	r2, [pc, #76]	; (8009b04 <ControlMotor+0x18c>)
 8009ab8:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 8009aba:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <ControlMotor+0x188>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <ControlMotor+0x18c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f001 ffdb 	bl	800ba80 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 8009aca:	bf00      	nop
 8009acc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	33333333 	.word	0x33333333
 8009ad4:	40423333 	.word	0x40423333
 8009ad8:	20000278 	.word	0x20000278
 8009adc:	20000284 	.word	0x20000284
 8009ae0:	20000288 	.word	0x20000288
 8009ae4:	2000028c 	.word	0x2000028c
 8009ae8:	20000258 	.word	0x20000258
 8009aec:	3a83126f 	.word	0x3a83126f
 8009af0:	20000290 	.word	0x20000290
 8009af4:	20000294 	.word	0x20000294
 8009af8:	20000298 	.word	0x20000298
 8009afc:	2000029c 	.word	0x2000029c
 8009b00:	200002a0 	.word	0x200002a0
 8009b04:	200002a4 	.word	0x200002a4

08009b08 <UpdatePhotoData>:

void UpdatePhotoData()
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);
 8009b0c:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <UpdatePhotoData+0x68>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2200      	movs	r2, #0
 8009b12:	4619      	mov	r1, r3
 8009b14:	200a      	movs	r0, #10
 8009b16:	f7ff fd61 	bl	80095dc <GetWallDataAverage>
 8009b1a:	eef0 7a40 	vmov.f32	s15, s0
 8009b1e:	4b15      	ldr	r3, [pc, #84]	; (8009b74 <UpdatePhotoData+0x6c>)
 8009b20:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);
 8009b24:	4b12      	ldr	r3, [pc, #72]	; (8009b70 <UpdatePhotoData+0x68>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	200a      	movs	r0, #10
 8009b2e:	f7ff fd55 	bl	80095dc <GetWallDataAverage>
 8009b32:	eef0 7a40 	vmov.f32	s15, s0
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <UpdatePhotoData+0x6c>)
 8009b38:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <UpdatePhotoData+0x70>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2202      	movs	r2, #2
 8009b42:	4619      	mov	r1, r3
 8009b44:	200a      	movs	r0, #10
 8009b46:	f7ff fd49 	bl	80095dc <GetWallDataAverage>
 8009b4a:	eef0 7a40 	vmov.f32	s15, s0
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <UpdatePhotoData+0x6c>)
 8009b50:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);
 8009b54:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <UpdatePhotoData+0x70>)
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	200a      	movs	r0, #10
 8009b5e:	f7ff fd3d 	bl	80095dc <GetWallDataAverage>
 8009b62:	eef0 7a40 	vmov.f32	s15, s0
 8009b66:	4b03      	ldr	r3, [pc, #12]	; (8009b74 <UpdatePhotoData+0x6c>)
 8009b68:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8009b6c:	bf00      	nop
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	2000040c 	.word	0x2000040c
 8009b74:	20000240 	.word	0x20000240
 8009b78:	20000418 	.word	0x20000418

08009b7c <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a0c      	ldr	r2, [pc, #48]	; (8009bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d103      	bne.n	8009b94 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 8009b8c:	f7ff fe29 	bl	80097e2 <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 8009b90:	f7ff fef2 	bl	8009978 <ControlMotor>
	}

	if( htim == &htim8)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a09      	ldr	r2, [pc, #36]	; (8009bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d108      	bne.n	8009bae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer += t;
 8009b9c:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	4a06      	ldr	r2, [pc, #24]	; (8009bc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8009ba8:	6013      	str	r3, [r2, #0]
		//壁センサデータの更新だけ
		UpdatePhotoData();
 8009baa:	f7ff ffad 	bl	8009b08 <UpdatePhotoData>

	}
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200006b0 	.word	0x200006b0
 8009bbc:	20000428 	.word	0x20000428
 8009bc0:	20000238 	.word	0x20000238
 8009bc4:	2000023c 	.word	0x2000023c

08009bc8 <WritingFree>:
#include "UI.h"
#include "Action.h"


void WritingFree()
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 8009bce:	f001 ff3d 	bl	800ba4c <Motor_PWM_Start>
	EncoderStart();
 8009bd2:	f001 fe41 	bl	800b858 <EncoderStart>
	EmitterON();
 8009bd6:	f001 fe5f 	bl	800b898 <EmitterON>
	ADCStart();
 8009bda:	f001 fe05 	bl	800b7e8 <ADCStart>

	PIDReset(L_VELO);
 8009bde:	2000      	movs	r0, #0
 8009be0:	f000 f93c 	bl	8009e5c <PIDReset>
	PIDReset(R_VELO);
 8009be4:	2001      	movs	r0, #1
 8009be6:	f000 f939 	bl	8009e5c <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 8009bea:	2101      	movs	r1, #1
 8009bec:	2000      	movs	r0, #0
 8009bee:	f000 f91f 	bl	8009e30 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	f000 f91b 	bl	8009e30 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 8009bfa:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8009d1c <WritingFree+0x154>
 8009bfe:	eddf 0a48 	vldr	s1, [pc, #288]	; 8009d20 <WritingFree+0x158>
 8009c02:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8009d24 <WritingFree+0x15c>
 8009c06:	2000      	movs	r0, #0
 8009c08:	f000 f8e6 	bl	8009dd8 <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 8009c0c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8009d1c <WritingFree+0x154>
 8009c10:	eddf 0a43 	vldr	s1, [pc, #268]	; 8009d20 <WritingFree+0x158>
 8009c14:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8009d24 <WritingFree+0x15c>
 8009c18:	2001      	movs	r0, #1
 8009c1a:	f000 f8dd 	bl	8009dd8 <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 8009c1e:	f247 512f 	movw	r1, #29999	; 0x752f
 8009c22:	4841      	ldr	r0, [pc, #260]	; (8009d28 <WritingFree+0x160>)
 8009c24:	f7ff fcb6 	bl	8009594 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 8009c28:	f247 512f 	movw	r1, #29999	; 0x752f
 8009c2c:	483f      	ldr	r0, [pc, #252]	; (8009d2c <WritingFree+0x164>)
 8009c2e:	f7ff fcb1 	bl	8009594 <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 8009c32:	483f      	ldr	r0, [pc, #252]	; (8009d30 <WritingFree+0x168>)
 8009c34:	f004 fb03 	bl	800e23e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8009c38:	483e      	ldr	r0, [pc, #248]	; (8009d34 <WritingFree+0x16c>)
 8009c3a:	f004 fb00 	bl	800e23e <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 8009c3e:	4b3e      	ldr	r3, [pc, #248]	; (8009d38 <WritingFree+0x170>)
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 8009c46:	4b3d      	ldr	r3, [pc, #244]	; (8009d3c <WritingFree+0x174>)
 8009c48:	f04f 0200 	mov.w	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 8009c4e:	4b3c      	ldr	r3, [pc, #240]	; (8009d40 <WritingFree+0x178>)
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 8009c56:	4b3b      	ldr	r3, [pc, #236]	; (8009d44 <WritingFree+0x17c>)
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 8009c5e:	4b3a      	ldr	r3, [pc, #232]	; (8009d48 <WritingFree+0x180>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 8009c64:	4b38      	ldr	r3, [pc, #224]	; (8009d48 <WritingFree+0x180>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 8009c6a:	4b37      	ldr	r3, [pc, #220]	; (8009d48 <WritingFree+0x180>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	609a      	str	r2, [r3, #8]


	PIDReset(L_VELO);
 8009c70:	2000      	movs	r0, #0
 8009c72:	f000 f8f3 	bl	8009e5c <PIDReset>
	PIDReset(R_VELO);
 8009c76:	2001      	movs	r0, #1
 8009c78:	f000 f8f0 	bl	8009e5c <PIDReset>


	//printf("velocity_left_out, velocity_right_out : %d,%d\r\n", velocity_left_out, velocity_right_out);	//ここで変な値が入っている→原因はモード選択用にエンコーダを回したパルスの初期化をしていなかったこと
	//GoStraight( TRUE, 300);
#if 1
	float velocity= 300;
 8009c7c:	4b33      	ldr	r3, [pc, #204]	; (8009d4c <WritingFree+0x184>)
 8009c7e:	607b      	str	r3, [r7, #4]
	Accel(45, velocity);
 8009c80:	edd7 0a01 	vldr	s1, [r7, #4]
 8009c84:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8009d50 <WritingFree+0x188>
 8009c88:	f7ff fb22 	bl	80092d0 <Accel>
	//printf("velocity_left_out, velocity_right_out : %d,%d\r\n", velocity_left_out, velocity_right_out);
	GoStraight( 90,velocity, 0);
 8009c8c:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8009d54 <WritingFree+0x18c>
 8009c90:	edd7 0a01 	vldr	s1, [r7, #4]
 8009c94:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009d58 <WritingFree+0x190>
 8009c98:	f7ff fc26 	bl	80094e8 <GoStraight>

	Decel(45, 0);
 8009c9c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8009d54 <WritingFree+0x18c>
 8009ca0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8009d50 <WritingFree+0x188>
 8009ca4:	f7ff fb90 	bl	80093c8 <Decel>
//	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
//	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
	HAL_Delay(500);
 8009ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cac:	f001 ffe6 	bl	800bc7c <HAL_Delay>
	Rotate( 90 , -M_PI);
 8009cb0:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8009d5c <WritingFree+0x194>
 8009cb4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8009d58 <WritingFree+0x190>
 8009cb8:	f7ff fac0 	bl	800923c <Rotate>
	HAL_Delay(500);
 8009cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cc0:	f001 ffdc 	bl	800bc7c <HAL_Delay>
	Accel(45, velocity);
 8009cc4:	edd7 0a01 	vldr	s1, [r7, #4]
 8009cc8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009d50 <WritingFree+0x188>
 8009ccc:	f7ff fb00 	bl	80092d0 <Accel>
	//printf("velocity_left_out, velocity_right_out : %d,%d\r\n", velocity_left_out, velocity_right_out);
	GoStraight( 90,velocity, 0);
 8009cd0:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8009d54 <WritingFree+0x18c>
 8009cd4:	edd7 0a01 	vldr	s1, [r7, #4]
 8009cd8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8009d58 <WritingFree+0x190>
 8009cdc:	f7ff fc04 	bl	80094e8 <GoStraight>
	Decel(45, 0);
 8009ce0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009d54 <WritingFree+0x18c>
 8009ce4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8009d50 <WritingFree+0x188>
 8009ce8:	f7ff fb6e 	bl	80093c8 <Decel>

	HAL_Delay(1000);
 8009cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cf0:	f001 ffc4 	bl	800bc7c <HAL_Delay>

	Rotate( 90 , M_PI);
 8009cf4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009d60 <WritingFree+0x198>
 8009cf8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009d58 <WritingFree+0x190>
 8009cfc:	f7ff fa9e 	bl	800923c <Rotate>
//	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
//	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);

	printf("velocity_left_out, velocity_right_out : %d,%d\r\n", velocity_left_out, velocity_right_out);	//微妙に出力値が残る。
 8009d00:	4b18      	ldr	r3, [pc, #96]	; (8009d64 <WritingFree+0x19c>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <WritingFree+0x1a0>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4818      	ldr	r0, [pc, #96]	; (8009d6c <WritingFree+0x1a4>)
 8009d0c:	f006 ff3e 	bl	8010b8c <iprintf>
//	RotateAccel(15, 2);
//
//	RotateDecel(15, 2);
	while(1)
	{
		target_angular_v = 0;
 8009d10:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <WritingFree+0x174>)
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	e7fa      	b.n	8009d10 <WritingFree+0x148>
 8009d1a:	bf00      	nop
 8009d1c:	3bc45a38 	.word	0x3bc45a38
 8009d20:	420617c2 	.word	0x420617c2
 8009d24:	3f98d845 	.word	0x3f98d845
 8009d28:	40000424 	.word	0x40000424
 8009d2c:	40000824 	.word	0x40000824
 8009d30:	200006b0 	.word	0x200006b0
 8009d34:	20000428 	.word	0x20000428
 8009d38:	20000278 	.word	0x20000278
 8009d3c:	20000288 	.word	0x20000288
 8009d40:	20000284 	.word	0x20000284
 8009d44:	2000028c 	.word	0x2000028c
 8009d48:	20000264 	.word	0x20000264
 8009d4c:	43960000 	.word	0x43960000
 8009d50:	42340000 	.word	0x42340000
 8009d54:	00000000 	.word	0x00000000
 8009d58:	42b40000 	.word	0x42b40000
 8009d5c:	c0490fdb 	.word	0xc0490fdb
 8009d60:	40490fdb 	.word	0x40490fdb
 8009d64:	20000290 	.word	0x20000290
 8009d68:	20000294 	.word	0x20000294
 8009d6c:	08012a00 	.word	0x08012a00

08009d70 <Explore>:


}

void Explore()
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 8009d76:	f001 fe69 	bl	800ba4c <Motor_PWM_Start>
	EncoderStart();
 8009d7a:	f001 fd6d 	bl	800b858 <EncoderStart>
	EmitterON();
 8009d7e:	f001 fd8b 	bl	800b898 <EmitterON>
	ADCStart();
 8009d82:	f001 fd31 	bl	800b7e8 <ADCStart>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 8009d86:	4811      	ldr	r0, [pc, #68]	; (8009dcc <Explore+0x5c>)
 8009d88:	f004 fa59 	bl	800e23e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8009d8c:	4810      	ldr	r0, [pc, #64]	; (8009dd0 <Explore+0x60>)
 8009d8e:	f004 fa56 	bl	800e23e <HAL_TIM_Base_Start_IT>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 8009d92:	2101      	movs	r1, #1
 8009d94:	2000      	movs	r0, #0
 8009d96:	f000 f84b 	bl	8009e30 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	f000 f847 	bl	8009e30 <PIDChangeFlag>
	//ここからはソフト的な準備


	//迷路とステータスの準備
	//方角と座標の初期化。
	direction my_direction = north;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
	uint8_t x=0,y=0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73bb      	strb	r3, [r7, #14]
 8009daa:	2300      	movs	r3, #0
 8009dac:	737b      	strb	r3, [r7, #13]
	//時間用の処理の初期化。
	int timer = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <Explore+0x64>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <Explore+0x64>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <Explore+0x64>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 8009dc4:	2353      	movs	r3, #83	; 0x53
 8009dc6:	71fb      	strb	r3, [r7, #7]
	//見えておくべき処理、データと、見えなくていいものとを分ける。何が見えるべきか。
	//while ゴール座標にいないまたはゴール座標の未探索壁がある。
	while(1)
 8009dc8:	e7fe      	b.n	8009dc8 <Explore+0x58>
 8009dca:	bf00      	nop
 8009dcc:	200006b0 	.word	0x200006b0
 8009dd0:	20000428 	.word	0x20000428
 8009dd4:	20000264 	.word	0x20000264

08009dd8 <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8009de4:	edc7 0a01 	vstr	s1, [r7, #4]
 8009de8:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 8009dec:	4a0f      	ldr	r2, [pc, #60]	; (8009e2c <PIDSetGain+0x54>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	212c      	movs	r1, #44	; 0x2c
 8009df2:	fb01 f303 	mul.w	r3, r1, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 8009dfc:	4a0b      	ldr	r2, [pc, #44]	; (8009e2c <PIDSetGain+0x54>)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	212c      	movs	r1, #44	; 0x2c
 8009e02:	fb01 f303 	mul.w	r3, r1, r3
 8009e06:	4413      	add	r3, r2
 8009e08:	3304      	adds	r3, #4
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 8009e0e:	4a07      	ldr	r2, [pc, #28]	; (8009e2c <PIDSetGain+0x54>)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	212c      	movs	r1, #44	; 0x2c
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	4413      	add	r3, r2
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	200002a8 	.word	0x200002a8

08009e30 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 8009e3a:	4a07      	ldr	r2, [pc, #28]	; (8009e58 <PIDChangeFlag+0x28>)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	212c      	movs	r1, #44	; 0x2c
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	4413      	add	r3, r2
 8009e46:	3328      	adds	r3, #40	; 0x28
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	601a      	str	r2, [r3, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	200002a8 	.word	0x200002a8

08009e5c <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 8009e64:	4a1b      	ldr	r2, [pc, #108]	; (8009ed4 <PIDReset+0x78>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	212c      	movs	r1, #44	; 0x2c
 8009e6a:	fb01 f303 	mul.w	r3, r1, r3
 8009e6e:	4413      	add	r3, r2
 8009e70:	330c      	adds	r3, #12
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 8009e78:	4a16      	ldr	r2, [pc, #88]	; (8009ed4 <PIDReset+0x78>)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	212c      	movs	r1, #44	; 0x2c
 8009e7e:	fb01 f303 	mul.w	r3, r1, r3
 8009e82:	4413      	add	r3, r2
 8009e84:	3310      	adds	r3, #16
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 8009e8c:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <PIDReset+0x78>)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	212c      	movs	r1, #44	; 0x2c
 8009e92:	fb01 f303 	mul.w	r3, r1, r3
 8009e96:	4413      	add	r3, r2
 8009e98:	3314      	adds	r3, #20
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 8009ea0:	4a0c      	ldr	r2, [pc, #48]	; (8009ed4 <PIDReset+0x78>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	212c      	movs	r1, #44	; 0x2c
 8009ea6:	fb01 f303 	mul.w	r3, r1, r3
 8009eaa:	4413      	add	r3, r2
 8009eac:	3318      	adds	r3, #24
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 8009eb4:	4a07      	ldr	r2, [pc, #28]	; (8009ed4 <PIDReset+0x78>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	212c      	movs	r1, #44	; 0x2c
 8009eba:	fb01 f303 	mul.w	r3, r1, r3
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3324      	adds	r3, #36	; 0x24
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	200002a8 	.word	0x200002a8

08009ed8 <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 8009ee4:	4a64      	ldr	r2, [pc, #400]	; (800a078 <PIDCalculate+0x1a0>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	212c      	movs	r1, #44	; 0x2c
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	3320      	adds	r3, #32
 8009ef2:	ed93 7a00 	vldr	s14, [r3]
 8009ef6:	4a60      	ldr	r2, [pc, #384]	; (800a078 <PIDCalculate+0x1a0>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	212c      	movs	r1, #44	; 0x2c
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	331c      	adds	r3, #28
 8009f04:	edd3 7a00 	vldr	s15, [r3]
 8009f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0c:	4a5a      	ldr	r2, [pc, #360]	; (800a078 <PIDCalculate+0x1a0>)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	212c      	movs	r1, #44	; 0x2c
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	330c      	adds	r3, #12
 8009f1a:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 8009f1e:	4a56      	ldr	r2, [pc, #344]	; (800a078 <PIDCalculate+0x1a0>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	212c      	movs	r1, #44	; 0x2c
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	4413      	add	r3, r2
 8009f2a:	3310      	adds	r3, #16
 8009f2c:	ed93 7a00 	vldr	s14, [r3]
 8009f30:	4a51      	ldr	r2, [pc, #324]	; (800a078 <PIDCalculate+0x1a0>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	212c      	movs	r1, #44	; 0x2c
 8009f36:	fb01 f303 	mul.w	r3, r1, r3
 8009f3a:	4413      	add	r3, r2
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	edd3 6a00 	vldr	s13, [r3]
 8009f42:	edd7 7a00 	vldr	s15, [r7]
 8009f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f4e:	4a4a      	ldr	r2, [pc, #296]	; (800a078 <PIDCalculate+0x1a0>)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	212c      	movs	r1, #44	; 0x2c
 8009f54:	fb01 f303 	mul.w	r3, r1, r3
 8009f58:	4413      	add	r3, r2
 8009f5a:	3310      	adds	r3, #16
 8009f5c:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 8009f60:	4a45      	ldr	r2, [pc, #276]	; (800a078 <PIDCalculate+0x1a0>)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	212c      	movs	r1, #44	; 0x2c
 8009f66:	fb01 f303 	mul.w	r3, r1, r3
 8009f6a:	4413      	add	r3, r2
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	ed93 7a00 	vldr	s14, [r3]
 8009f72:	4a41      	ldr	r2, [pc, #260]	; (800a078 <PIDCalculate+0x1a0>)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	212c      	movs	r1, #44	; 0x2c
 8009f78:	fb01 f303 	mul.w	r3, r1, r3
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3318      	adds	r3, #24
 8009f80:	edd3 7a00 	vldr	s15, [r3]
 8009f84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009f88:	ed97 7a00 	vldr	s14, [r7]
 8009f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f90:	4a39      	ldr	r2, [pc, #228]	; (800a078 <PIDCalculate+0x1a0>)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	212c      	movs	r1, #44	; 0x2c
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 8009fa2:	4a35      	ldr	r2, [pc, #212]	; (800a078 <PIDCalculate+0x1a0>)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	212c      	movs	r1, #44	; 0x2c
 8009fa8:	fb01 f303 	mul.w	r3, r1, r3
 8009fac:	4413      	add	r3, r2
 8009fae:	330c      	adds	r3, #12
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4931      	ldr	r1, [pc, #196]	; (800a078 <PIDCalculate+0x1a0>)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	202c      	movs	r0, #44	; 0x2c
 8009fb8:	fb00 f303 	mul.w	r3, r0, r3
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3318      	adds	r3, #24
 8009fc0:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 8009fc2:	4a2d      	ldr	r2, [pc, #180]	; (800a078 <PIDCalculate+0x1a0>)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	212c      	movs	r1, #44	; 0x2c
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	ed93 7a00 	vldr	s14, [r3]
 8009fd2:	4a29      	ldr	r2, [pc, #164]	; (800a078 <PIDCalculate+0x1a0>)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	212c      	movs	r1, #44	; 0x2c
 8009fd8:	fb01 f303 	mul.w	r3, r1, r3
 8009fdc:	4413      	add	r3, r2
 8009fde:	330c      	adds	r3, #12
 8009fe0:	edd3 7a00 	vldr	s15, [r3]
 8009fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fe8:	4a23      	ldr	r2, [pc, #140]	; (800a078 <PIDCalculate+0x1a0>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	212c      	movs	r1, #44	; 0x2c
 8009fee:	fb01 f303 	mul.w	r3, r1, r3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	edd3 6a00 	vldr	s13, [r3]
 8009ffa:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <PIDCalculate+0x1a0>)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	212c      	movs	r1, #44	; 0x2c
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	4413      	add	r3, r2
 800a006:	3310      	adds	r3, #16
 800a008:	edd3 7a00 	vldr	s15, [r3]
 800a00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a010:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <PIDCalculate+0x1a0>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	212c      	movs	r1, #44	; 0x2c
 800a01a:	fb01 f303 	mul.w	r3, r1, r3
 800a01e:	4413      	add	r3, r2
 800a020:	3308      	adds	r3, #8
 800a022:	edd3 6a00 	vldr	s13, [r3]
 800a026:	4a14      	ldr	r2, [pc, #80]	; (800a078 <PIDCalculate+0x1a0>)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	212c      	movs	r1, #44	; 0x2c
 800a02c:	fb01 f303 	mul.w	r3, r1, r3
 800a030:	4413      	add	r3, r2
 800a032:	3314      	adds	r3, #20
 800a034:	edd3 7a00 	vldr	s15, [r3]
 800a038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a040:	ee17 0a90 	vmov	r0, s15
 800a044:	f7fe f9b8 	bl	80083b8 <__aeabi_f2d>
 800a048:	4603      	mov	r3, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	ec44 3b10 	vmov	d0, r3, r4
 800a050:	f006 f8b8 	bl	80101c4 <round>
 800a054:	ec54 3b10 	vmov	r3, r4, d0
 800a058:	4618      	mov	r0, r3
 800a05a:	4621      	mov	r1, r4
 800a05c:	f7fe fcb4 	bl	80089c8 <__aeabi_d2iz>
 800a060:	4a05      	ldr	r2, [pc, #20]	; (800a078 <PIDCalculate+0x1a0>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	212c      	movs	r1, #44	; 0x2c
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	4413      	add	r3, r2
 800a06c:	3324      	adds	r3, #36	; 0x24
 800a06e:	6018      	str	r0, [r3, #0]
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	bd90      	pop	{r4, r7, pc}
 800a078:	200002a8 	.word	0x200002a8

0800a07c <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	ed87 0a02 	vstr	s0, [r7, #8]
 800a088:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 800a08c:	4a0b      	ldr	r2, [pc, #44]	; (800a0bc <PIDInput+0x40>)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	212c      	movs	r1, #44	; 0x2c
 800a092:	fb01 f303 	mul.w	r3, r1, r3
 800a096:	4413      	add	r3, r2
 800a098:	3320      	adds	r3, #32
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 800a09e:	4a07      	ldr	r2, [pc, #28]	; (800a0bc <PIDInput+0x40>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	212c      	movs	r1, #44	; 0x2c
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	4413      	add	r3, r2
 800a0aa:	331c      	adds	r3, #28
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	601a      	str	r2, [r3, #0]
}
 800a0b0:	bf00      	nop
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	200002a8 	.word	0x200002a8

0800a0c0 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	ed87 0a02 	vstr	s0, [r7, #8]
 800a0cc:	edc7 0a01 	vstr	s1, [r7, #4]
 800a0d0:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 800a0d4:	edd7 0a00 	vldr	s1, [r7]
 800a0d8:	ed97 0a01 	vldr	s0, [r7, #4]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff ffcd 	bl	800a07c <PIDInput>
	PIDCalculate( n, T );
 800a0e2:	ed97 0a02 	vldr	s0, [r7, #8]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fef6 	bl	8009ed8 <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 800a0ec:	4a0c      	ldr	r2, [pc, #48]	; (800a120 <PIDControl+0x60>)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	212c      	movs	r1, #44	; 0x2c
 800a0f2:	fb01 f303 	mul.w	r3, r1, r3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3328      	adds	r3, #40	; 0x28
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <PIDControl+0x46>
	{
		PIDReset(n);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff feab 	bl	8009e5c <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 800a106:	4a06      	ldr	r2, [pc, #24]	; (800a120 <PIDControl+0x60>)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	212c      	movs	r1, #44	; 0x2c
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	4413      	add	r3, r2
 800a112:	3324      	adds	r3, #36	; 0x24
 800a114:	681b      	ldr	r3, [r3, #0]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200002a8 	.word	0x200002a8

0800a124 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	e00e      	b.n	800a150 <Signal+0x2c>
	{
		ChangeLED(mode);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fbcc 	bl	800b8d0 <ChangeLED>
		HAL_Delay(100);
 800a138:	2064      	movs	r0, #100	; 0x64
 800a13a:	f001 fd9f 	bl	800bc7c <HAL_Delay>
		ChangeLED(0);
 800a13e:	2000      	movs	r0, #0
 800a140:	f001 fbc6 	bl	800b8d0 <ChangeLED>
		HAL_Delay(100);
 800a144:	2064      	movs	r0, #100	; 0x64
 800a146:	f001 fd99 	bl	800bc7c <HAL_Delay>
	for(int i=0; i < 5; i++)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b04      	cmp	r3, #4
 800a154:	dded      	ble.n	800a132 <Signal+0xe>
	}
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800a168:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800a1b4 <BatteryCheck+0x54>
 800a16c:	eddf 0a12 	vldr	s1, [pc, #72]	; 800a1b8 <BatteryCheck+0x58>
 800a170:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fa9b 	bl	80096b0 <ADCToBatteryVoltage>
 800a17a:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800a17e:	2103      	movs	r1, #3
 800a180:	2002      	movs	r0, #2
 800a182:	f7ff fabf 	bl	8009704 <IntegerPower>
 800a186:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800a188:	6938      	ldr	r0, [r7, #16]
 800a18a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800a1bc <BatteryCheck+0x5c>
 800a18e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800a1c0 <BatteryCheck+0x60>
 800a192:	ed97 0a05 	vldr	s0, [r7, #20]
 800a196:	f7ff fad2 	bl	800973e <GetBatteryLevel>
 800a19a:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800a19c:	68f9      	ldr	r1, [r7, #12]
 800a19e:	4809      	ldr	r0, [pc, #36]	; (800a1c4 <BatteryCheck+0x64>)
 800a1a0:	f006 fcf4 	bl	8010b8c <iprintf>
	Signal( battery_level );
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff ffbd 	bl	800a124 <Signal>
}
 800a1aa:	bf00      	nop
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	45800000 	.word	0x45800000
 800a1b8:	40533333 	.word	0x40533333
 800a1bc:	41066666 	.word	0x41066666
 800a1c0:	40e66666 	.word	0x40e66666
 800a1c4:	08012a30 	.word	0x08012a30

0800a1c8 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	603a      	str	r2, [r7, #0]
 800a1d2:	71fb      	strb	r3, [r7, #7]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800a1d8:	f001 fb5e 	bl	800b898 <EmitterON>
	ADCStart();
 800a1dc:	f001 fb04 	bl	800b7e8 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800a1e0:	4840      	ldr	r0, [pc, #256]	; (800a2e4 <ModeSelect+0x11c>)
 800a1e2:	f004 f82c 	bl	800e23e <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800a1e6:	f001 fb37 	bl	800b858 <EncoderStart>

	//while中で選択
	*pMode=min;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	79fa      	ldrb	r2, [r7, #7]
 800a1ee:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800a1f0:	f247 512f 	movw	r1, #29999	; 0x752f
 800a1f4:	483c      	ldr	r0, [pc, #240]	; (800a2e8 <ModeSelect+0x120>)
 800a1f6:	f7ff f9cd 	bl	8009594 <InitPulse>

	int ENC3_LEFT;
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800a1fa:	e05c      	b.n	800a2b6 <ModeSelect+0xee>
	{
		printf("photo[FR] : %f\r\n", photo[FR]);
 800a1fc:	4b3b      	ldr	r3, [pc, #236]	; (800a2ec <ModeSelect+0x124>)
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe f8d9 	bl	80083b8 <__aeabi_f2d>
 800a206:	4603      	mov	r3, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	461a      	mov	r2, r3
 800a20c:	4623      	mov	r3, r4
 800a20e:	4838      	ldr	r0, [pc, #224]	; (800a2f0 <ModeSelect+0x128>)
 800a210:	f006 fcbc 	bl	8010b8c <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800a214:	4b37      	ldr	r3, [pc, #220]	; (800a2f4 <ModeSelect+0x12c>)
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800a220:	4293      	cmp	r3, r2
 800a222:	dd21      	ble.n	800a268 <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	f993 3000 	ldrsb.w	r3, [r3]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	b25a      	sxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	f993 3000 	ldrsb.w	r3, [r3]
 800a23c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800a240:	429a      	cmp	r2, r3
 800a242:	da02      	bge.n	800a24a <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	79fa      	ldrb	r2, [r7, #7]
 800a248:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f993 3000 	ldrsb.w	r3, [r3]
 800a250:	4618      	mov	r0, r3
 800a252:	f001 fb3d 	bl	800b8d0 <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800a256:	f247 512f 	movw	r1, #29999	; 0x752f
 800a25a:	4823      	ldr	r0, [pc, #140]	; (800a2e8 <ModeSelect+0x120>)
 800a25c:	f7ff f99a 	bl	8009594 <InitPulse>
		  	  HAL_Delay(500);
 800a260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a264:	f001 fd0a 	bl	800bc7c <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f243 522f 	movw	r2, #13615	; 0x352f
 800a26e:	4293      	cmp	r3, r2
 800a270:	dc21      	bgt.n	800a2b6 <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	f993 3000 	ldrsb.w	r3, [r3]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	b25a      	sxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f993 3000 	ldrsb.w	r3, [r3]
 800a28a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a28e:	429a      	cmp	r2, r3
 800a290:	dd02      	ble.n	800a298 <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	79ba      	ldrb	r2, [r7, #6]
 800a296:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f993 3000 	ldrsb.w	r3, [r3]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 fb16 	bl	800b8d0 <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 800a2a4:	f247 512f 	movw	r1, #29999	; 0x752f
 800a2a8:	480f      	ldr	r0, [pc, #60]	; (800a2e8 <ModeSelect+0x120>)
 800a2aa:	f7ff f973 	bl	8009594 <InitPulse>
		  	  HAL_Delay(500);
 800a2ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2b2:	f001 fce3 	bl	800bc7c <HAL_Delay>
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <ModeSelect+0x124>)
 800a2b8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2bc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a2f8 <ModeSelect+0x130>
 800a2c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c8:	d498      	bmi.n	800a1fc <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 800a2ca:	f001 faf3 	bl	800b8b4 <EmitterOFF>
	ADCStop();
 800a2ce:	f001 faab 	bl	800b828 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800a2d2:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <ModeSelect+0x11c>)
 800a2d4:	f003 ffd7 	bl	800e286 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800a2d8:	f001 face 	bl	800b878 <EncoderStop>

	//モード選択後どうするか
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd90      	pop	{r4, r7, pc}
 800a2e4:	20000428 	.word	0x20000428
 800a2e8:	40000424 	.word	0x40000424
 800a2ec:	20000240 	.word	0x20000240
 800a2f0:	08012a38 	.word	0x08012a38
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	437a0000 	.word	0x437a0000

0800a2fc <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800a304:	1d39      	adds	r1, r7, #4
 800a306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a30a:	2201      	movs	r2, #1
 800a30c:	4803      	ldr	r0, [pc, #12]	; (800a31c <__io_putchar+0x20>)
 800a30e:	f005 faf9 	bl	800f904 <HAL_UART_Transmit>
	return ch;
 800a312:	687b      	ldr	r3, [r7, #4]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000610 	.word	0x20000610

0800a320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a326:	f001 fc37 	bl	800bb98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a32a:	f000 f85f 	bl	800a3ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a32e:	f000 fca9 	bl	800ac84 <MX_GPIO_Init>
  MX_DMA_Init();
 800a332:	f000 fc7f 	bl	800ac34 <MX_DMA_Init>
  MX_ADC1_Init();
 800a336:	f000 f8c3 	bl	800a4c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800a33a:	f000 f92f 	bl	800a59c <MX_ADC2_Init>
  MX_TIM3_Init();
 800a33e:	f000 fa89 	bl	800a854 <MX_TIM3_Init>
  MX_TIM2_Init();
 800a342:	f000 fa11 	bl	800a768 <MX_TIM2_Init>
  MX_SPI3_Init();
 800a346:	f000 f989 	bl	800a65c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800a34a:	f000 fc49 	bl	800abe0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800a34e:	f000 fb29 	bl	800a9a4 <MX_TIM5_Init>
  MX_TIM4_Init();
 800a352:	f000 fad3 	bl	800a8fc <MX_TIM4_Init>
  MX_TIM8_Init();
 800a356:	f000 fb9b 	bl	800aa90 <MX_TIM8_Init>
  MX_TIM1_Init();
 800a35a:	f000 f9b5 	bl	800a6c8 <MX_TIM1_Init>
//
//  while(1)
//  {
//
//  }
  ADCStart();
 800a35e:	f001 fa43 	bl	800b7e8 <ADCStart>
  HAL_Delay(500);
 800a362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a366:	f001 fc89 	bl	800bc7c <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800a36a:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <main+0xc0>)
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fef6 	bl	800a160 <BatteryCheck>

  int8_t mode=0;
 800a374:	2300      	movs	r3, #0
 800a376:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 800a378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37c:	4619      	mov	r1, r3
 800a37e:	4819      	ldr	r0, [pc, #100]	; (800a3e4 <main+0xc4>)
 800a380:	f006 fc04 	bl	8010b8c <iprintf>
  ModeSelect( 0, 7, &mode);
 800a384:	1dfb      	adds	r3, r7, #7
 800a386:	461a      	mov	r2, r3
 800a388:	2107      	movs	r1, #7
 800a38a:	2000      	movs	r0, #0
 800a38c:	f7ff ff1c 	bl	800a1c8 <ModeSelect>
  Signal( mode );
 800a390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff fec5 	bl	800a124 <Signal>
  	  printf("ドン\r\n");
 800a39a:	4813      	ldr	r0, [pc, #76]	; (800a3e8 <main+0xc8>)
 800a39c:	f006 fc6a 	bl	8010c74 <puts>

  while (1)
  {

	  switch( mode )
 800a3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	d819      	bhi.n	800a3dc <main+0xbc>
 800a3a8:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <main+0x90>)
 800a3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ae:	bf00      	nop
 800a3b0:	0800a3dd 	.word	0x0800a3dd
 800a3b4:	0800a3dd 	.word	0x0800a3dd
 800a3b8:	0800a3dd 	.word	0x0800a3dd
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3dd 	.word	0x0800a3dd
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3d1 	.word	0x0800a3d1
 800a3cc:	0800a3d7 	.word	0x0800a3d7
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 800a3d0:	f7ff fcce 	bl	8009d70 <Explore>
		  break;
 800a3d4:	e003      	b.n	800a3de <main+0xbe>
	  case 7:
		  WritingFree();
 800a3d6:	f7ff fbf7 	bl	8009bc8 <WritingFree>
		  break;
 800a3da:	e000      	b.n	800a3de <main+0xbe>
	  default :
		  break;
 800a3dc:	bf00      	nop
	  switch( mode )
 800a3de:	e7df      	b.n	800a3a0 <main+0x80>
 800a3e0:	2000040c 	.word	0x2000040c
 800a3e4:	08012a4c 	.word	0x08012a4c
 800a3e8:	08012a58 	.word	0x08012a58

0800a3ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b094      	sub	sp, #80	; 0x50
 800a3f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a3f2:	f107 0320 	add.w	r3, r7, #32
 800a3f6:	2230      	movs	r2, #48	; 0x30
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f005 ff61 	bl	80102c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a400:	f107 030c 	add.w	r3, r7, #12
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	60da      	str	r2, [r3, #12]
 800a40e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a410:	2300      	movs	r3, #0
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	4b28      	ldr	r3, [pc, #160]	; (800a4b8 <SystemClock_Config+0xcc>)
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <SystemClock_Config+0xcc>)
 800a41a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41e:	6413      	str	r3, [r2, #64]	; 0x40
 800a420:	4b25      	ldr	r3, [pc, #148]	; (800a4b8 <SystemClock_Config+0xcc>)
 800a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a428:	60bb      	str	r3, [r7, #8]
 800a42a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a42c:	2300      	movs	r3, #0
 800a42e:	607b      	str	r3, [r7, #4]
 800a430:	4b22      	ldr	r3, [pc, #136]	; (800a4bc <SystemClock_Config+0xd0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a21      	ldr	r2, [pc, #132]	; (800a4bc <SystemClock_Config+0xd0>)
 800a436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	4b1f      	ldr	r3, [pc, #124]	; (800a4bc <SystemClock_Config+0xd0>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a448:	2301      	movs	r3, #1
 800a44a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a44c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a452:	2302      	movs	r3, #2
 800a454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a45c:	2304      	movs	r3, #4
 800a45e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a460:	23a8      	movs	r3, #168	; 0xa8
 800a462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a464:	2302      	movs	r3, #2
 800a466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a468:	2304      	movs	r3, #4
 800a46a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a46c:	f107 0320 	add.w	r3, r7, #32
 800a470:	4618      	mov	r0, r3
 800a472:	f003 f9f3 	bl	800d85c <HAL_RCC_OscConfig>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a47c:	f000 fccc 	bl	800ae18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a480:	230f      	movs	r3, #15
 800a482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a484:	2302      	movs	r3, #2
 800a486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a48c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	2105      	movs	r1, #5
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f003 fc4c 	bl	800dd3c <HAL_RCC_ClockConfig>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a4aa:	f000 fcb5 	bl	800ae18 <Error_Handler>
  }
}
 800a4ae:	bf00      	nop
 800a4b0:	3750      	adds	r7, #80	; 0x50
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	40023800 	.word	0x40023800
 800a4bc:	40007000 	.word	0x40007000

0800a4c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	605a      	str	r2, [r3, #4]
 800a4ce:	609a      	str	r2, [r3, #8]
 800a4d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a4d2:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4d4:	4a2f      	ldr	r2, [pc, #188]	; (800a594 <MX_ADC1_Init+0xd4>)
 800a4d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a4d8:	4b2d      	ldr	r3, [pc, #180]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a4de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a4e0:	4b2b      	ldr	r3, [pc, #172]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a4e6:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a4ec:	4b28      	ldr	r3, [pc, #160]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a4f2:	4b27      	ldr	r3, [pc, #156]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a4fa:	4b25      	ldr	r3, [pc, #148]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a500:	4b23      	ldr	r3, [pc, #140]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a502:	4a25      	ldr	r2, [pc, #148]	; (800a598 <MX_ADC1_Init+0xd8>)
 800a504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a506:	4b22      	ldr	r3, [pc, #136]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a508:	2200      	movs	r2, #0
 800a50a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800a50c:	4b20      	ldr	r3, [pc, #128]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a50e:	2203      	movs	r2, #3
 800a510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a512:	4b1f      	ldr	r3, [pc, #124]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a51a:	4b1d      	ldr	r3, [pc, #116]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a520:	481b      	ldr	r0, [pc, #108]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a522:	f001 fbcd 	bl	800bcc0 <HAL_ADC_Init>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800a52c:	f000 fc74 	bl	800ae18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800a530:	230a      	movs	r3, #10
 800a532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a534:	2301      	movs	r3, #1
 800a536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800a538:	2303      	movs	r3, #3
 800a53a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a53c:	463b      	mov	r3, r7
 800a53e:	4619      	mov	r1, r3
 800a540:	4813      	ldr	r0, [pc, #76]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a542:	f001 fea5 	bl	800c290 <HAL_ADC_ConfigChannel>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a54c:	f000 fc64 	bl	800ae18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a550:	230e      	movs	r3, #14
 800a552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800a554:	2302      	movs	r3, #2
 800a556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a558:	463b      	mov	r3, r7
 800a55a:	4619      	mov	r1, r3
 800a55c:	480c      	ldr	r0, [pc, #48]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a55e:	f001 fe97 	bl	800c290 <HAL_ADC_ConfigChannel>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800a568:	f000 fc56 	bl	800ae18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800a56c:	2309      	movs	r3, #9
 800a56e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800a570:	2303      	movs	r3, #3
 800a572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a574:	463b      	mov	r3, r7
 800a576:	4619      	mov	r1, r3
 800a578:	4805      	ldr	r0, [pc, #20]	; (800a590 <MX_ADC1_Init+0xd0>)
 800a57a:	f001 fe89 	bl	800c290 <HAL_ADC_ConfigChannel>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800a584:	f000 fc48 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200005c8 	.word	0x200005c8
 800a594:	40012000 	.word	0x40012000
 800a598:	0f000001 	.word	0x0f000001

0800a59c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800a5ae:	4b28      	ldr	r3, [pc, #160]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5b0:	4a28      	ldr	r2, [pc, #160]	; (800a654 <MX_ADC2_Init+0xb8>)
 800a5b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a5b4:	4b26      	ldr	r3, [pc, #152]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a5ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a5bc:	4b24      	ldr	r3, [pc, #144]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a5c2:	4b23      	ldr	r3, [pc, #140]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800a5c8:	4b21      	ldr	r3, [pc, #132]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a5ce:	4b20      	ldr	r3, [pc, #128]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5de:	4a1e      	ldr	r2, [pc, #120]	; (800a658 <MX_ADC2_Init+0xbc>)
 800a5e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a5e2:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800a5e8:	4b19      	ldr	r3, [pc, #100]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a5fc:	4814      	ldr	r0, [pc, #80]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a5fe:	f001 fb5f 	bl	800bcc0 <HAL_ADC_Init>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800a608:	f000 fc06 	bl	800ae18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800a60c:	230b      	movs	r3, #11
 800a60e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a610:	2301      	movs	r3, #1
 800a612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800a614:	2303      	movs	r3, #3
 800a616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a618:	463b      	mov	r3, r7
 800a61a:	4619      	mov	r1, r3
 800a61c:	480c      	ldr	r0, [pc, #48]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a61e:	f001 fe37 	bl	800c290 <HAL_ADC_ConfigChannel>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800a628:	f000 fbf6 	bl	800ae18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a62c:	230f      	movs	r3, #15
 800a62e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800a630:	2302      	movs	r3, #2
 800a632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a634:	463b      	mov	r3, r7
 800a636:	4619      	mov	r1, r3
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <MX_ADC2_Init+0xb4>)
 800a63a:	f001 fe29 	bl	800c290 <HAL_ADC_ConfigChannel>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800a644:	f000 fbe8 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a648:	bf00      	nop
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200004a8 	.word	0x200004a8
 800a654:	40012100 	.word	0x40012100
 800a658:	0f000001 	.word	0x0f000001

0800a65c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800a660:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a662:	4a18      	ldr	r2, [pc, #96]	; (800a6c4 <MX_SPI3_Init+0x68>)
 800a664:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a666:	4b16      	ldr	r3, [pc, #88]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a66c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a670:	2200      	movs	r2, #0
 800a672:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a674:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a676:	2200      	movs	r2, #0
 800a678:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a67c:	2202      	movs	r2, #2
 800a67e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a680:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a682:	2201      	movs	r2, #1
 800a684:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a686:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a68c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a690:	2228      	movs	r2, #40	; 0x28
 800a692:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a696:	2200      	movs	r2, #0
 800a698:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a6a6:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a6a8:	220a      	movs	r2, #10
 800a6aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a6ac:	4804      	ldr	r0, [pc, #16]	; (800a6c0 <MX_SPI3_Init+0x64>)
 800a6ae:	f003 fd37 	bl	800e120 <HAL_SPI_Init>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a6b8:	f000 fbae 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a6bc:	bf00      	nop
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000570 	.word	0x20000570
 800a6c4:	40003c00 	.word	0x40003c00

0800a6c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	609a      	str	r2, [r3, #8]
 800a6da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6dc:	463b      	mov	r3, r7
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a6e4:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <MX_TIM1_Init+0x98>)
 800a6e6:	4a1f      	ldr	r2, [pc, #124]	; (800a764 <MX_TIM1_Init+0x9c>)
 800a6e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800a6ea:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <MX_TIM1_Init+0x98>)
 800a6ec:	22a7      	movs	r2, #167	; 0xa7
 800a6ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6f0:	4b1b      	ldr	r3, [pc, #108]	; (800a760 <MX_TIM1_Init+0x98>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <MX_TIM1_Init+0x98>)
 800a6f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <MX_TIM1_Init+0x98>)
 800a700:	2200      	movs	r2, #0
 800a702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a704:	4b16      	ldr	r3, [pc, #88]	; (800a760 <MX_TIM1_Init+0x98>)
 800a706:	2200      	movs	r2, #0
 800a708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a70a:	4b15      	ldr	r3, [pc, #84]	; (800a760 <MX_TIM1_Init+0x98>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a710:	4813      	ldr	r0, [pc, #76]	; (800a760 <MX_TIM1_Init+0x98>)
 800a712:	f003 fd69 	bl	800e1e8 <HAL_TIM_Base_Init>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800a71c:	f000 fb7c 	bl	800ae18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4619      	mov	r1, r3
 800a72c:	480c      	ldr	r0, [pc, #48]	; (800a760 <MX_TIM1_Init+0x98>)
 800a72e:	f004 fadb 	bl	800ece8 <HAL_TIM_ConfigClockSource>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800a738:	f000 fb6e 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a73c:	2300      	movs	r3, #0
 800a73e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a740:	2300      	movs	r3, #0
 800a742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a744:	463b      	mov	r3, r7
 800a746:	4619      	mov	r1, r3
 800a748:	4805      	ldr	r0, [pc, #20]	; (800a760 <MX_TIM1_Init+0x98>)
 800a74a:	f004 ff87 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a754:	f000 fb60 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a758:	bf00      	nop
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	200006b0 	.word	0x200006b0
 800a764:	40010000 	.word	0x40010000

0800a768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	; 0x38
 800a76c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a76e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	605a      	str	r2, [r3, #4]
 800a778:	609a      	str	r2, [r3, #8]
 800a77a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a77c:	f107 0320 	add.w	r3, r7, #32
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a786:	1d3b      	adds	r3, r7, #4
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	605a      	str	r2, [r3, #4]
 800a78e:	609a      	str	r2, [r3, #8]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	611a      	str	r2, [r3, #16]
 800a794:	615a      	str	r2, [r3, #20]
 800a796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a798:	4b2d      	ldr	r3, [pc, #180]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a79a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a79e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a7a0:	4b2b      	ldr	r3, [pc, #172]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7a6:	4b2a      	ldr	r3, [pc, #168]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800a7ac:	4b28      	ldr	r3, [pc, #160]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7ae:	f241 0267 	movw	r2, #4199	; 0x1067
 800a7b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7ba:	4b25      	ldr	r3, [pc, #148]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a7c0:	4823      	ldr	r0, [pc, #140]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7c2:	f003 fd11 	bl	800e1e8 <HAL_TIM_Base_Init>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a7cc:	f000 fb24 	bl	800ae18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a7d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7da:	4619      	mov	r1, r3
 800a7dc:	481c      	ldr	r0, [pc, #112]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7de:	f004 fa83 	bl	800ece8 <HAL_TIM_ConfigClockSource>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a7e8:	f000 fb16 	bl	800ae18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a7ec:	4818      	ldr	r0, [pc, #96]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a7ee:	f003 fec9 	bl	800e584 <HAL_TIM_PWM_Init>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a7f8:	f000 fb0e 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a800:	2300      	movs	r3, #0
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a804:	f107 0320 	add.w	r3, r7, #32
 800a808:	4619      	mov	r1, r3
 800a80a:	4811      	ldr	r0, [pc, #68]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a80c:	f004 ff26 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a816:	f000 faff 	bl	800ae18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a81a:	2360      	movs	r3, #96	; 0x60
 800a81c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	220c      	movs	r2, #12
 800a82e:	4619      	mov	r1, r3
 800a830:	4807      	ldr	r0, [pc, #28]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a832:	f004 f993 	bl	800eb5c <HAL_TIM_PWM_ConfigChannel>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a83c:	f000 faec 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a840:	4803      	ldr	r0, [pc, #12]	; (800a850 <MX_TIM2_Init+0xe8>)
 800a842:	f000 fd89 	bl	800b358 <HAL_TIM_MspPostInit>

}
 800a846:	bf00      	nop
 800a848:	3738      	adds	r7, #56	; 0x38
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	200006f0 	.word	0x200006f0

0800a854 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08c      	sub	sp, #48	; 0x30
 800a858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	2224      	movs	r2, #36	; 0x24
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f005 fd2d 	bl	80102c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a868:	1d3b      	adds	r3, r7, #4
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a870:	4b20      	ldr	r3, [pc, #128]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a872:	4a21      	ldr	r2, [pc, #132]	; (800a8f8 <MX_TIM3_Init+0xa4>)
 800a874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a876:	4b1f      	ldr	r3, [pc, #124]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a878:	2200      	movs	r2, #0
 800a87a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a87c:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800a882:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a884:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a88a:	4b1a      	ldr	r3, [pc, #104]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a890:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a892:	2200      	movs	r2, #0
 800a894:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a896:	2303      	movs	r3, #3
 800a898:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a89a:	2300      	movs	r3, #0
 800a89c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a8ba:	f107 030c 	add.w	r3, r7, #12
 800a8be:	4619      	mov	r1, r3
 800a8c0:	480c      	ldr	r0, [pc, #48]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a8c2:	f003 fed3 	bl	800e66c <HAL_TIM_Encoder_Init>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800a8cc:	f000 faa4 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a8d8:	1d3b      	adds	r3, r7, #4
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <MX_TIM3_Init+0xa0>)
 800a8de:	f004 febd 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a8e8:	f000 fa96 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a8ec:	bf00      	nop
 800a8ee:	3730      	adds	r7, #48	; 0x30
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20000530 	.word	0x20000530
 800a8f8:	40000400 	.word	0x40000400

0800a8fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08c      	sub	sp, #48	; 0x30
 800a900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	2224      	movs	r2, #36	; 0x24
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f005 fcd9 	bl	80102c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a918:	4b20      	ldr	r3, [pc, #128]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a91a:	4a21      	ldr	r2, [pc, #132]	; (800a9a0 <MX_TIM4_Init+0xa4>)
 800a91c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a91e:	4b1f      	ldr	r3, [pc, #124]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a920:	2200      	movs	r2, #0
 800a922:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a924:	4b1d      	ldr	r3, [pc, #116]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a926:	2200      	movs	r2, #0
 800a928:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800a92a:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a92c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800a930:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a932:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a934:	2200      	movs	r2, #0
 800a936:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a938:	4b18      	ldr	r3, [pc, #96]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a93e:	2303      	movs	r3, #3
 800a940:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a942:	2300      	movs	r3, #0
 800a944:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a946:	2301      	movs	r3, #1
 800a948:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a94a:	2300      	movs	r3, #0
 800a94c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a952:	2300      	movs	r3, #0
 800a954:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a956:	2301      	movs	r3, #1
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a95a:	2300      	movs	r3, #0
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a962:	f107 030c 	add.w	r3, r7, #12
 800a966:	4619      	mov	r1, r3
 800a968:	480c      	ldr	r0, [pc, #48]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a96a:	f003 fe7f 	bl	800e66c <HAL_TIM_Encoder_Init>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a974:	f000 fa50 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a978:	2300      	movs	r3, #0
 800a97a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a980:	1d3b      	adds	r3, r7, #4
 800a982:	4619      	mov	r1, r3
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <MX_TIM4_Init+0xa0>)
 800a986:	f004 fe69 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a990:	f000 fa42 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a994:	bf00      	nop
 800a996:	3730      	adds	r7, #48	; 0x30
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20000468 	.word	0x20000468
 800a9a0:	40000800 	.word	0x40000800

0800a9a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08e      	sub	sp, #56	; 0x38
 800a9a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a9aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
 800a9b4:	609a      	str	r2, [r3, #8]
 800a9b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9b8:	f107 0320 	add.w	r3, r7, #32
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a9c2:	1d3b      	adds	r3, r7, #4
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	605a      	str	r2, [r3, #4]
 800a9ca:	609a      	str	r2, [r3, #8]
 800a9cc:	60da      	str	r2, [r3, #12]
 800a9ce:	611a      	str	r2, [r3, #16]
 800a9d0:	615a      	str	r2, [r3, #20]
 800a9d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a9d4:	4b2c      	ldr	r3, [pc, #176]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9d6:	4a2d      	ldr	r2, [pc, #180]	; (800aa8c <MX_TIM5_Init+0xe8>)
 800a9d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a9da:	4b2b      	ldr	r3, [pc, #172]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9e0:	4b29      	ldr	r3, [pc, #164]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800a9e6:	4b28      	ldr	r3, [pc, #160]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9e8:	f241 0267 	movw	r2, #4199	; 0x1067
 800a9ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9ee:	4b26      	ldr	r3, [pc, #152]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9f4:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a9fa:	4823      	ldr	r0, [pc, #140]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800a9fc:	f003 fbf4 	bl	800e1e8 <HAL_TIM_Base_Init>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800aa06:	f000 fa07 	bl	800ae18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800aa10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa14:	4619      	mov	r1, r3
 800aa16:	481c      	ldr	r0, [pc, #112]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800aa18:	f004 f966 	bl	800ece8 <HAL_TIM_ConfigClockSource>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800aa22:	f000 f9f9 	bl	800ae18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800aa26:	4818      	ldr	r0, [pc, #96]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800aa28:	f003 fdac 	bl	800e584 <HAL_TIM_PWM_Init>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800aa32:	f000 f9f1 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa36:	2300      	movs	r3, #0
 800aa38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800aa3e:	f107 0320 	add.w	r3, r7, #32
 800aa42:	4619      	mov	r1, r3
 800aa44:	4810      	ldr	r0, [pc, #64]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800aa46:	f004 fe09 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800aa50:	f000 f9e2 	bl	800ae18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aa54:	2360      	movs	r3, #96	; 0x60
 800aa56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa60:	2300      	movs	r3, #0
 800aa62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800aa64:	1d3b      	adds	r3, r7, #4
 800aa66:	2204      	movs	r2, #4
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4807      	ldr	r0, [pc, #28]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800aa6c:	f004 f876 	bl	800eb5c <HAL_TIM_PWM_ConfigChannel>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800aa76:	f000 f9cf 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800aa7a:	4803      	ldr	r0, [pc, #12]	; (800aa88 <MX_TIM5_Init+0xe4>)
 800aa7c:	f000 fc6c 	bl	800b358 <HAL_TIM_MspPostInit>

}
 800aa80:	bf00      	nop
 800aa82:	3738      	adds	r7, #56	; 0x38
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200004f0 	.word	0x200004f0
 800aa8c:	40000c00 	.word	0x40000c00

0800aa90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b096      	sub	sp, #88	; 0x58
 800aa94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aaa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aaae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	605a      	str	r2, [r3, #4]
 800aab8:	609a      	str	r2, [r3, #8]
 800aaba:	60da      	str	r2, [r3, #12]
 800aabc:	611a      	str	r2, [r3, #16]
 800aabe:	615a      	str	r2, [r3, #20]
 800aac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800aac2:	1d3b      	adds	r3, r7, #4
 800aac4:	2220      	movs	r2, #32
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f005 fbfa 	bl	80102c2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800aace:	4b42      	ldr	r3, [pc, #264]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aad0:	4a42      	ldr	r2, [pc, #264]	; (800abdc <MX_TIM8_Init+0x14c>)
 800aad2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800aad4:	4b40      	ldr	r3, [pc, #256]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aad6:	22a7      	movs	r2, #167	; 0xa7
 800aad8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aada:	4b3f      	ldr	r3, [pc, #252]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aadc:	2200      	movs	r2, #0
 800aade:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800aae0:	4b3d      	ldr	r3, [pc, #244]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aae2:	2231      	movs	r2, #49	; 0x31
 800aae4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aae6:	4b3c      	ldr	r3, [pc, #240]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800aaec:	4b3a      	ldr	r3, [pc, #232]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aaf2:	4b39      	ldr	r3, [pc, #228]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aaf4:	2280      	movs	r2, #128	; 0x80
 800aaf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800aaf8:	4837      	ldr	r0, [pc, #220]	; (800abd8 <MX_TIM8_Init+0x148>)
 800aafa:	f003 fb75 	bl	800e1e8 <HAL_TIM_Base_Init>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800ab04:	f000 f988 	bl	800ae18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ab0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ab12:	4619      	mov	r1, r3
 800ab14:	4830      	ldr	r0, [pc, #192]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab16:	f004 f8e7 	bl	800ece8 <HAL_TIM_ConfigClockSource>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800ab20:	f000 f97a 	bl	800ae18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800ab24:	482c      	ldr	r0, [pc, #176]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab26:	f003 fbd9 	bl	800e2dc <HAL_TIM_OC_Init>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ab30:	f000 f972 	bl	800ae18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab34:	2300      	movs	r3, #0
 800ab36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ab3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab40:	4619      	mov	r1, r3
 800ab42:	4825      	ldr	r0, [pc, #148]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab44:	f004 fd8a 	bl	800f65c <HAL_TIMEx_MasterConfigSynchronization>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800ab4e:	f000 f963 	bl	800ae18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ab52:	2330      	movs	r3, #48	; 0x30
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800ab56:	2318      	movs	r3, #24
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ab6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab72:	2200      	movs	r2, #0
 800ab74:	4619      	mov	r1, r3
 800ab76:	4818      	ldr	r0, [pc, #96]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab78:	f003 ff90 	bl	800ea9c <HAL_TIM_OC_ConfigChannel>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800ab82:	f000 f949 	bl	800ae18 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ab86:	4b14      	ldr	r3, [pc, #80]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <MX_TIM8_Init+0x148>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0208 	orr.w	r2, r2, #8
 800ab94:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800abaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800abb4:	1d3b      	adds	r3, r7, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4807      	ldr	r0, [pc, #28]	; (800abd8 <MX_TIM8_Init+0x148>)
 800abba:	f004 fdcb 	bl	800f754 <HAL_TIMEx_ConfigBreakDeadTime>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800abc4:	f000 f928 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800abc8:	4803      	ldr	r0, [pc, #12]	; (800abd8 <MX_TIM8_Init+0x148>)
 800abca:	f000 fbc5 	bl	800b358 <HAL_TIM_MspPostInit>

}
 800abce:	bf00      	nop
 800abd0:	3758      	adds	r7, #88	; 0x58
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000428 	.word	0x20000428
 800abdc:	40010400 	.word	0x40010400

0800abe0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800abe4:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800abe6:	4a12      	ldr	r2, [pc, #72]	; (800ac30 <MX_USART1_UART_Init+0x50>)
 800abe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800abea:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800abec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800abf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800abf2:	4b0e      	ldr	r3, [pc, #56]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ac04:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800ac06:	220c      	movs	r2, #12
 800ac08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac10:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ac16:	4805      	ldr	r0, [pc, #20]	; (800ac2c <MX_USART1_UART_Init+0x4c>)
 800ac18:	f004 fe27 	bl	800f86a <HAL_UART_Init>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ac22:	f000 f8f9 	bl	800ae18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ac26:	bf00      	nop
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000610 	.word	0x20000610
 800ac30:	40011000 	.word	0x40011000

0800ac34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <MX_DMA_Init+0x4c>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	4a0f      	ldr	r2, [pc, #60]	; (800ac80 <MX_DMA_Init+0x4c>)
 800ac44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac48:	6313      	str	r3, [r2, #48]	; 0x30
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <MX_DMA_Init+0x4c>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	2100      	movs	r1, #0
 800ac5a:	2038      	movs	r0, #56	; 0x38
 800ac5c:	f001 fe9d 	bl	800c99a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ac60:	2038      	movs	r0, #56	; 0x38
 800ac62:	f001 feb6 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800ac66:	2200      	movs	r2, #0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	203a      	movs	r0, #58	; 0x3a
 800ac6c:	f001 fe95 	bl	800c99a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ac70:	203a      	movs	r0, #58	; 0x3a
 800ac72:	f001 feae 	bl	800c9d2 <HAL_NVIC_EnableIRQ>

}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	40023800 	.word	0x40023800

0800ac84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08a      	sub	sp, #40	; 0x28
 800ac88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac8a:	f107 0314 	add.w	r3, r7, #20
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	605a      	str	r2, [r3, #4]
 800ac94:	609a      	str	r2, [r3, #8]
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	4b59      	ldr	r3, [pc, #356]	; (800ae04 <MX_GPIO_Init+0x180>)
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	4a58      	ldr	r2, [pc, #352]	; (800ae04 <MX_GPIO_Init+0x180>)
 800aca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca8:	6313      	str	r3, [r2, #48]	; 0x30
 800acaa:	4b56      	ldr	r3, [pc, #344]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	4b52      	ldr	r3, [pc, #328]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbe:	4a51      	ldr	r2, [pc, #324]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acc0:	f043 0304 	orr.w	r3, r3, #4
 800acc4:	6313      	str	r3, [r2, #48]	; 0x30
 800acc6:	4b4f      	ldr	r3, [pc, #316]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]
 800acd6:	4b4b      	ldr	r3, [pc, #300]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acda:	4a4a      	ldr	r2, [pc, #296]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acdc:	f043 0301 	orr.w	r3, r3, #1
 800ace0:	6313      	str	r3, [r2, #48]	; 0x30
 800ace2:	4b48      	ldr	r3, [pc, #288]	; (800ae04 <MX_GPIO_Init+0x180>)
 800ace4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	60bb      	str	r3, [r7, #8]
 800acec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800acee:	2300      	movs	r3, #0
 800acf0:	607b      	str	r3, [r7, #4]
 800acf2:	4b44      	ldr	r3, [pc, #272]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	4a43      	ldr	r2, [pc, #268]	; (800ae04 <MX_GPIO_Init+0x180>)
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	6313      	str	r3, [r2, #48]	; 0x30
 800acfe:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <MX_GPIO_Init+0x180>)
 800ad00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4b3d      	ldr	r3, [pc, #244]	; (800ae04 <MX_GPIO_Init+0x180>)
 800ad10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad12:	4a3c      	ldr	r2, [pc, #240]	; (800ae04 <MX_GPIO_Init+0x180>)
 800ad14:	f043 0308 	orr.w	r3, r3, #8
 800ad18:	6313      	str	r3, [r2, #48]	; 0x30
 800ad1a:	4b3a      	ldr	r3, [pc, #232]	; (800ae04 <MX_GPIO_Init+0x180>)
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	f003 0308 	and.w	r3, r3, #8
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800ad26:	2200      	movs	r2, #0
 800ad28:	f44f 7141 	mov.w	r1, #772	; 0x304
 800ad2c:	4836      	ldr	r0, [pc, #216]	; (800ae08 <MX_GPIO_Init+0x184>)
 800ad2e:	f002 fd7b 	bl	800d828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800ad32:	2200      	movs	r2, #0
 800ad34:	2105      	movs	r1, #5
 800ad36:	4835      	ldr	r0, [pc, #212]	; (800ae0c <MX_GPIO_Init+0x188>)
 800ad38:	f002 fd76 	bl	800d828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2104      	movs	r1, #4
 800ad40:	4833      	ldr	r0, [pc, #204]	; (800ae10 <MX_GPIO_Init+0x18c>)
 800ad42:	f002 fd71 	bl	800d828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ad46:	2200      	movs	r2, #0
 800ad48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad4c:	4831      	ldr	r0, [pc, #196]	; (800ae14 <MX_GPIO_Init+0x190>)
 800ad4e:	f002 fd6b 	bl	800d828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800ad52:	f44f 7341 	mov.w	r3, #772	; 0x304
 800ad56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad60:	2300      	movs	r3, #0
 800ad62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad64:	f107 0314 	add.w	r3, r7, #20
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4827      	ldr	r0, [pc, #156]	; (800ae08 <MX_GPIO_Init+0x184>)
 800ad6c:	f002 fbc2 	bl	800d4f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800ad70:	2305      	movs	r3, #5
 800ad72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad74:	2301      	movs	r3, #1
 800ad76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	4619      	mov	r1, r3
 800ad86:	4821      	ldr	r0, [pc, #132]	; (800ae0c <MX_GPIO_Init+0x188>)
 800ad88:	f002 fbb4 	bl	800d4f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800ad8c:	f241 0304 	movw	r3, #4100	; 0x1004
 800ad90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad92:	2300      	movs	r3, #0
 800ad94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad9a:	f107 0314 	add.w	r3, r7, #20
 800ad9e:	4619      	mov	r1, r3
 800ada0:	481c      	ldr	r0, [pc, #112]	; (800ae14 <MX_GPIO_Init+0x190>)
 800ada2:	f002 fba7 	bl	800d4f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ada6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800adaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adac:	2300      	movs	r3, #0
 800adae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adb4:	f107 0314 	add.w	r3, r7, #20
 800adb8:	4619      	mov	r1, r3
 800adba:	4814      	ldr	r0, [pc, #80]	; (800ae0c <MX_GPIO_Init+0x188>)
 800adbc:	f002 fb9a 	bl	800d4f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800adc0:	2304      	movs	r3, #4
 800adc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adc4:	2301      	movs	r3, #1
 800adc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc8:	2300      	movs	r3, #0
 800adca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adcc:	2300      	movs	r3, #0
 800adce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800add0:	f107 0314 	add.w	r3, r7, #20
 800add4:	4619      	mov	r1, r3
 800add6:	480e      	ldr	r0, [pc, #56]	; (800ae10 <MX_GPIO_Init+0x18c>)
 800add8:	f002 fb8c 	bl	800d4f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800addc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ade2:	2301      	movs	r3, #1
 800ade4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adea:	2300      	movs	r3, #0
 800adec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	4619      	mov	r1, r3
 800adf4:	4807      	ldr	r0, [pc, #28]	; (800ae14 <MX_GPIO_Init+0x190>)
 800adf6:	f002 fb7d 	bl	800d4f4 <HAL_GPIO_Init>

}
 800adfa:	bf00      	nop
 800adfc:	3728      	adds	r7, #40	; 0x28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40023800 	.word	0x40023800
 800ae08:	40020800 	.word	0x40020800
 800ae0c:	40020000 	.word	0x40020000
 800ae10:	40020c00 	.word	0x40020c00
 800ae14:	40020400 	.word	0x40020400

0800ae18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ae1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ae1e:	e7fe      	b.n	800ae1e <Error_Handler+0x6>

0800ae20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <HAL_MspInit+0x58>)
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	4a12      	ldr	r2, [pc, #72]	; (800ae78 <HAL_MspInit+0x58>)
 800ae30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae34:	6453      	str	r3, [r2, #68]	; 0x44
 800ae36:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <HAL_MspInit+0x58>)
 800ae38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae3e:	607b      	str	r3, [r7, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae42:	2300      	movs	r3, #0
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <HAL_MspInit+0x58>)
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	4a0b      	ldr	r2, [pc, #44]	; (800ae78 <HAL_MspInit+0x58>)
 800ae4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae50:	6413      	str	r3, [r2, #64]	; 0x40
 800ae52:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <HAL_MspInit+0x58>)
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2100      	movs	r1, #0
 800ae62:	2004      	movs	r0, #4
 800ae64:	f001 fd99 	bl	800c99a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800ae68:	2004      	movs	r0, #4
 800ae6a:	f001 fdb2 	bl	800c9d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40023800 	.word	0x40023800

0800ae7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08c      	sub	sp, #48	; 0x30
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae84:	f107 031c 	add.w	r3, r7, #28
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	609a      	str	r2, [r3, #8]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a73      	ldr	r2, [pc, #460]	; (800b068 <HAL_ADC_MspInit+0x1ec>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d17a      	bne.n	800af94 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	4b72      	ldr	r3, [pc, #456]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea6:	4a71      	ldr	r2, [pc, #452]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeac:	6453      	str	r3, [r2, #68]	; 0x44
 800aeae:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb6:	61bb      	str	r3, [r7, #24]
 800aeb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	4b6b      	ldr	r3, [pc, #428]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	4a6a      	ldr	r2, [pc, #424]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aec4:	f043 0304 	orr.w	r3, r3, #4
 800aec8:	6313      	str	r3, [r2, #48]	; 0x30
 800aeca:	4b68      	ldr	r3, [pc, #416]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	4b64      	ldr	r3, [pc, #400]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aede:	4a63      	ldr	r2, [pc, #396]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	6313      	str	r3, [r2, #48]	; 0x30
 800aee6:	4b61      	ldr	r3, [pc, #388]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800aef2:	2311      	movs	r3, #17
 800aef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aef6:	2303      	movs	r3, #3
 800aef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aefe:	f107 031c 	add.w	r3, r7, #28
 800af02:	4619      	mov	r1, r3
 800af04:	485a      	ldr	r0, [pc, #360]	; (800b070 <HAL_ADC_MspInit+0x1f4>)
 800af06:	f002 faf5 	bl	800d4f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800af0a:	2302      	movs	r3, #2
 800af0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800af0e:	2303      	movs	r3, #3
 800af10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af12:	2300      	movs	r3, #0
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af16:	f107 031c 	add.w	r3, r7, #28
 800af1a:	4619      	mov	r1, r3
 800af1c:	4855      	ldr	r0, [pc, #340]	; (800b074 <HAL_ADC_MspInit+0x1f8>)
 800af1e:	f002 fae9 	bl	800d4f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800af22:	4b55      	ldr	r3, [pc, #340]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af24:	4a55      	ldr	r2, [pc, #340]	; (800b07c <HAL_ADC_MspInit+0x200>)
 800af26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800af28:	4b53      	ldr	r3, [pc, #332]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af2e:	4b52      	ldr	r3, [pc, #328]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af30:	2200      	movs	r2, #0
 800af32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800af34:	4b50      	ldr	r3, [pc, #320]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af36:	2200      	movs	r2, #0
 800af38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800af3a:	4b4f      	ldr	r3, [pc, #316]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800af42:	4b4d      	ldr	r3, [pc, #308]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800af4a:	4b4b      	ldr	r3, [pc, #300]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800af52:	4b49      	ldr	r3, [pc, #292]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800af5a:	4b47      	ldr	r3, [pc, #284]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af60:	4b45      	ldr	r3, [pc, #276]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af62:	2200      	movs	r2, #0
 800af64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800af66:	4844      	ldr	r0, [pc, #272]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af68:	f001 fd4e 	bl	800ca08 <HAL_DMA_Init>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800af72:	f7ff ff51 	bl	800ae18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a3f      	ldr	r2, [pc, #252]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af7a:	639a      	str	r2, [r3, #56]	; 0x38
 800af7c:	4a3e      	ldr	r2, [pc, #248]	; (800b078 <HAL_ADC_MspInit+0x1fc>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	2012      	movs	r0, #18
 800af88:	f001 fd07 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800af8c:	2012      	movs	r0, #18
 800af8e:	f001 fd20 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800af92:	e065      	b.n	800b060 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a39      	ldr	r2, [pc, #228]	; (800b080 <HAL_ADC_MspInit+0x204>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d160      	bne.n	800b060 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	4b32      	ldr	r3, [pc, #200]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	4a31      	ldr	r2, [pc, #196]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afac:	6453      	str	r3, [r2, #68]	; 0x44
 800afae:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800afba:	2300      	movs	r3, #0
 800afbc:	60bb      	str	r3, [r7, #8]
 800afbe:	4b2b      	ldr	r3, [pc, #172]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	4a2a      	ldr	r2, [pc, #168]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afc4:	f043 0304 	orr.w	r3, r3, #4
 800afc8:	6313      	str	r3, [r2, #48]	; 0x30
 800afca:	4b28      	ldr	r3, [pc, #160]	; (800b06c <HAL_ADC_MspInit+0x1f0>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	60bb      	str	r3, [r7, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800afd6:	2322      	movs	r3, #34	; 0x22
 800afd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800afda:	2303      	movs	r3, #3
 800afdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afe2:	f107 031c 	add.w	r3, r7, #28
 800afe6:	4619      	mov	r1, r3
 800afe8:	4821      	ldr	r0, [pc, #132]	; (800b070 <HAL_ADC_MspInit+0x1f4>)
 800afea:	f002 fa83 	bl	800d4f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800afee:	4b25      	ldr	r3, [pc, #148]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800aff0:	4a25      	ldr	r2, [pc, #148]	; (800b088 <HAL_ADC_MspInit+0x20c>)
 800aff2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800aff4:	4b23      	ldr	r3, [pc, #140]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800aff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800affa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800affc:	4b21      	ldr	r3, [pc, #132]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800affe:	2200      	movs	r2, #0
 800b000:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b002:	4b20      	ldr	r3, [pc, #128]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b004:	2200      	movs	r2, #0
 800b006:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b00a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b00e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b010:	4b1c      	ldr	r3, [pc, #112]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b016:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b018:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b01a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b01e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800b020:	4b18      	ldr	r3, [pc, #96]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b022:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b026:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b02e:	4b15      	ldr	r3, [pc, #84]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b030:	2200      	movs	r2, #0
 800b032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800b034:	4813      	ldr	r0, [pc, #76]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b036:	f001 fce7 	bl	800ca08 <HAL_DMA_Init>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800b040:	f7ff feea 	bl	800ae18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a0f      	ldr	r2, [pc, #60]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b048:	639a      	str	r2, [r3, #56]	; 0x38
 800b04a:	4a0e      	ldr	r2, [pc, #56]	; (800b084 <HAL_ADC_MspInit+0x208>)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	2012      	movs	r0, #18
 800b056:	f001 fca0 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b05a:	2012      	movs	r0, #18
 800b05c:	f001 fcb9 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
}
 800b060:	bf00      	nop
 800b062:	3730      	adds	r7, #48	; 0x30
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	40012000 	.word	0x40012000
 800b06c:	40023800 	.word	0x40023800
 800b070:	40020800 	.word	0x40020800
 800b074:	40020400 	.word	0x40020400
 800b078:	20000650 	.word	0x20000650
 800b07c:	40026410 	.word	0x40026410
 800b080:	40012100 	.word	0x40012100
 800b084:	20000730 	.word	0x20000730
 800b088:	40026440 	.word	0x40026440

0800b08c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	; 0x28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b094:	f107 0314 	add.w	r3, r7, #20
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	605a      	str	r2, [r3, #4]
 800b09e:	609a      	str	r2, [r3, #8]
 800b0a0:	60da      	str	r2, [r3, #12]
 800b0a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a19      	ldr	r2, [pc, #100]	; (800b110 <HAL_SPI_MspInit+0x84>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d12c      	bne.n	800b108 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	4b18      	ldr	r3, [pc, #96]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	4a17      	ldr	r2, [pc, #92]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0be:	4b15      	ldr	r3, [pc, #84]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	4b11      	ldr	r3, [pc, #68]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	4a10      	ldr	r2, [pc, #64]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0d4:	f043 0304 	orr.w	r3, r3, #4
 800b0d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0da:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <HAL_SPI_MspInit+0x88>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b0e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b0ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b0f8:	2306      	movs	r3, #6
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	4619      	mov	r1, r3
 800b102:	4805      	ldr	r0, [pc, #20]	; (800b118 <HAL_SPI_MspInit+0x8c>)
 800b104:	f002 f9f6 	bl	800d4f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b108:	bf00      	nop
 800b10a:	3728      	adds	r7, #40	; 0x28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	40003c00 	.word	0x40003c00
 800b114:	40023800 	.word	0x40023800
 800b118:	40020800 	.word	0x40020800

0800b11c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a40      	ldr	r2, [pc, #256]	; (800b22c <HAL_TIM_Base_MspInit+0x110>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d116      	bne.n	800b15c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	4b3f      	ldr	r3, [pc, #252]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b136:	4a3e      	ldr	r2, [pc, #248]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	6453      	str	r3, [r2, #68]	; 0x44
 800b13e:	4b3c      	ldr	r3, [pc, #240]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800b14a:	2200      	movs	r2, #0
 800b14c:	2101      	movs	r1, #1
 800b14e:	2019      	movs	r0, #25
 800b150:	f001 fc23 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b154:	2019      	movs	r0, #25
 800b156:	f001 fc3c 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b15a:	e062      	b.n	800b222 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b164:	d116      	bne.n	800b194 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b166:	2300      	movs	r3, #0
 800b168:	613b      	str	r3, [r7, #16]
 800b16a:	4b31      	ldr	r3, [pc, #196]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	4a30      	ldr	r2, [pc, #192]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	6413      	str	r3, [r2, #64]	; 0x40
 800b176:	4b2e      	ldr	r3, [pc, #184]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	613b      	str	r3, [r7, #16]
 800b180:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	201c      	movs	r0, #28
 800b188:	f001 fc07 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b18c:	201c      	movs	r0, #28
 800b18e:	f001 fc20 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
}
 800b192:	e046      	b.n	800b222 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a26      	ldr	r2, [pc, #152]	; (800b234 <HAL_TIM_Base_MspInit+0x118>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d116      	bne.n	800b1cc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	4a22      	ldr	r2, [pc, #136]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1a8:	f043 0308 	orr.w	r3, r3, #8
 800b1ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b1ae:	4b20      	ldr	r3, [pc, #128]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	2032      	movs	r0, #50	; 0x32
 800b1c0:	f001 fbeb 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800b1c4:	2032      	movs	r0, #50	; 0x32
 800b1c6:	f001 fc04 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
}
 800b1ca:	e02a      	b.n	800b222 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a19      	ldr	r2, [pc, #100]	; (800b238 <HAL_TIM_Base_MspInit+0x11c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d125      	bne.n	800b222 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1de:	4a14      	ldr	r2, [pc, #80]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1e0:	f043 0302 	orr.w	r3, r3, #2
 800b1e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1e6:	4b12      	ldr	r3, [pc, #72]	; (800b230 <HAL_TIM_Base_MspInit+0x114>)
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	60bb      	str	r3, [r7, #8]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	2102      	movs	r1, #2
 800b1f6:	202c      	movs	r0, #44	; 0x2c
 800b1f8:	f001 fbcf 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800b1fc:	202c      	movs	r0, #44	; 0x2c
 800b1fe:	f001 fbe8 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	202d      	movs	r0, #45	; 0x2d
 800b208:	f001 fbc7 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800b20c:	202d      	movs	r0, #45	; 0x2d
 800b20e:	f001 fbe0 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800b212:	2200      	movs	r2, #0
 800b214:	2100      	movs	r1, #0
 800b216:	202e      	movs	r0, #46	; 0x2e
 800b218:	f001 fbbf 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800b21c:	202e      	movs	r0, #46	; 0x2e
 800b21e:	f001 fbd8 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
}
 800b222:	bf00      	nop
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	40010000 	.word	0x40010000
 800b230:	40023800 	.word	0x40023800
 800b234:	40000c00 	.word	0x40000c00
 800b238:	40010400 	.word	0x40010400

0800b23c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08c      	sub	sp, #48	; 0x30
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b244:	f107 031c 	add.w	r3, r7, #28
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	605a      	str	r2, [r3, #4]
 800b24e:	609a      	str	r2, [r3, #8]
 800b250:	60da      	str	r2, [r3, #12]
 800b252:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a3a      	ldr	r2, [pc, #232]	; (800b344 <HAL_TIM_Encoder_MspInit+0x108>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d134      	bne.n	800b2c8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b25e:	2300      	movs	r3, #0
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	4b39      	ldr	r3, [pc, #228]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	4a38      	ldr	r2, [pc, #224]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b268:	f043 0302 	orr.w	r3, r3, #2
 800b26c:	6413      	str	r3, [r2, #64]	; 0x40
 800b26e:	4b36      	ldr	r3, [pc, #216]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	61bb      	str	r3, [r7, #24]
 800b278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b27a:	2300      	movs	r3, #0
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	4b32      	ldr	r3, [pc, #200]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	4a31      	ldr	r2, [pc, #196]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	6313      	str	r3, [r2, #48]	; 0x30
 800b28a:	4b2f      	ldr	r3, [pc, #188]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	617b      	str	r3, [r7, #20]
 800b294:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b296:	23c0      	movs	r3, #192	; 0xc0
 800b298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b29a:	2302      	movs	r3, #2
 800b29c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2aa:	f107 031c 	add.w	r3, r7, #28
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4826      	ldr	r0, [pc, #152]	; (800b34c <HAL_TIM_Encoder_MspInit+0x110>)
 800b2b2:	f002 f91f 	bl	800d4f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	201d      	movs	r0, #29
 800b2bc:	f001 fb6d 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b2c0:	201d      	movs	r0, #29
 800b2c2:	f001 fb86 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800b2c6:	e038      	b.n	800b33a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a20      	ldr	r2, [pc, #128]	; (800b350 <HAL_TIM_Encoder_MspInit+0x114>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d133      	bne.n	800b33a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	4b1c      	ldr	r3, [pc, #112]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	4a1b      	ldr	r2, [pc, #108]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b2dc:	f043 0304 	orr.w	r3, r3, #4
 800b2e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e2:	4b19      	ldr	r3, [pc, #100]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	4b15      	ldr	r3, [pc, #84]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	4a14      	ldr	r2, [pc, #80]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b2f8:	f043 0302 	orr.w	r3, r3, #2
 800b2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fe:	4b12      	ldr	r3, [pc, #72]	; (800b348 <HAL_TIM_Encoder_MspInit+0x10c>)
 800b300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b30a:	23c0      	movs	r3, #192	; 0xc0
 800b30c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b30e:	2302      	movs	r3, #2
 800b310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b312:	2300      	movs	r3, #0
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b316:	2300      	movs	r3, #0
 800b318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b31a:	2302      	movs	r3, #2
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b31e:	f107 031c 	add.w	r3, r7, #28
 800b322:	4619      	mov	r1, r3
 800b324:	480b      	ldr	r0, [pc, #44]	; (800b354 <HAL_TIM_Encoder_MspInit+0x118>)
 800b326:	f002 f8e5 	bl	800d4f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b32a:	2200      	movs	r2, #0
 800b32c:	2100      	movs	r1, #0
 800b32e:	201e      	movs	r0, #30
 800b330:	f001 fb33 	bl	800c99a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b334:	201e      	movs	r0, #30
 800b336:	f001 fb4c 	bl	800c9d2 <HAL_NVIC_EnableIRQ>
}
 800b33a:	bf00      	nop
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	40000400 	.word	0x40000400
 800b348:	40023800 	.word	0x40023800
 800b34c:	40020000 	.word	0x40020000
 800b350:	40000800 	.word	0x40000800
 800b354:	40020400 	.word	0x40020400

0800b358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08c      	sub	sp, #48	; 0x30
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b360:	f107 031c 	add.w	r3, r7, #28
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	605a      	str	r2, [r3, #4]
 800b36a:	609a      	str	r2, [r3, #8]
 800b36c:	60da      	str	r2, [r3, #12]
 800b36e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b378:	d11e      	bne.n	800b3b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b37a:	2300      	movs	r3, #0
 800b37c:	61bb      	str	r3, [r7, #24]
 800b37e:	4b43      	ldr	r3, [pc, #268]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b382:	4a42      	ldr	r2, [pc, #264]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b384:	f043 0301 	orr.w	r3, r3, #1
 800b388:	6313      	str	r3, [r2, #48]	; 0x30
 800b38a:	4b40      	ldr	r3, [pc, #256]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b396:	2308      	movs	r3, #8
 800b398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b39a:	2302      	movs	r3, #2
 800b39c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3aa:	f107 031c 	add.w	r3, r7, #28
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4837      	ldr	r0, [pc, #220]	; (800b490 <HAL_TIM_MspPostInit+0x138>)
 800b3b2:	f002 f89f 	bl	800d4f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800b3b6:	e064      	b.n	800b482 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a35      	ldr	r2, [pc, #212]	; (800b494 <HAL_TIM_MspPostInit+0x13c>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d11e      	bne.n	800b400 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	4b31      	ldr	r3, [pc, #196]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ca:	4a30      	ldr	r2, [pc, #192]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b3cc:	f043 0301 	orr.w	r3, r3, #1
 800b3d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b3d2:	4b2e      	ldr	r3, [pc, #184]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b3de:	2302      	movs	r3, #2
 800b3e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3f2:	f107 031c 	add.w	r3, r7, #28
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4825      	ldr	r0, [pc, #148]	; (800b490 <HAL_TIM_MspPostInit+0x138>)
 800b3fa:	f002 f87b 	bl	800d4f4 <HAL_GPIO_Init>
}
 800b3fe:	e040      	b.n	800b482 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a24      	ldr	r2, [pc, #144]	; (800b498 <HAL_TIM_MspPostInit+0x140>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d13b      	bne.n	800b482 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]
 800b40e:	4b1f      	ldr	r3, [pc, #124]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b412:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b414:	f043 0301 	orr.w	r3, r3, #1
 800b418:	6313      	str	r3, [r2, #48]	; 0x30
 800b41a:	4b1c      	ldr	r3, [pc, #112]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	4b18      	ldr	r3, [pc, #96]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	4a17      	ldr	r2, [pc, #92]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b430:	f043 0304 	orr.w	r3, r3, #4
 800b434:	6313      	str	r3, [r2, #48]	; 0x30
 800b436:	4b15      	ldr	r3, [pc, #84]	; (800b48c <HAL_TIM_MspPostInit+0x134>)
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b442:	2320      	movs	r3, #32
 800b444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b446:	2302      	movs	r3, #2
 800b448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b44e:	2300      	movs	r3, #0
 800b450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b452:	2303      	movs	r3, #3
 800b454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b456:	f107 031c 	add.w	r3, r7, #28
 800b45a:	4619      	mov	r1, r3
 800b45c:	480c      	ldr	r0, [pc, #48]	; (800b490 <HAL_TIM_MspPostInit+0x138>)
 800b45e:	f002 f849 	bl	800d4f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b466:	2302      	movs	r3, #2
 800b468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b46e:	2300      	movs	r3, #0
 800b470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b472:	2303      	movs	r3, #3
 800b474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b476:	f107 031c 	add.w	r3, r7, #28
 800b47a:	4619      	mov	r1, r3
 800b47c:	4807      	ldr	r0, [pc, #28]	; (800b49c <HAL_TIM_MspPostInit+0x144>)
 800b47e:	f002 f839 	bl	800d4f4 <HAL_GPIO_Init>
}
 800b482:	bf00      	nop
 800b484:	3730      	adds	r7, #48	; 0x30
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	40023800 	.word	0x40023800
 800b490:	40020000 	.word	0x40020000
 800b494:	40000c00 	.word	0x40000c00
 800b498:	40010400 	.word	0x40010400
 800b49c:	40020800 	.word	0x40020800

0800b4a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4a8:	f107 0314 	add.w	r3, r7, #20
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	609a      	str	r2, [r3, #8]
 800b4b4:	60da      	str	r2, [r3, #12]
 800b4b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a19      	ldr	r2, [pc, #100]	; (800b524 <HAL_UART_MspInit+0x84>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d12c      	bne.n	800b51c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	613b      	str	r3, [r7, #16]
 800b4c6:	4b18      	ldr	r3, [pc, #96]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ca:	4a17      	ldr	r2, [pc, #92]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4cc:	f043 0310 	orr.w	r3, r3, #16
 800b4d0:	6453      	str	r3, [r2, #68]	; 0x44
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d6:	f003 0310 	and.w	r3, r3, #16
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	4b11      	ldr	r3, [pc, #68]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	4a10      	ldr	r2, [pc, #64]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4e8:	f043 0301 	orr.w	r3, r3, #1
 800b4ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <HAL_UART_MspInit+0x88>)
 800b4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b4fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b4fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b500:	2302      	movs	r3, #2
 800b502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b508:	2303      	movs	r3, #3
 800b50a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b50c:	2307      	movs	r3, #7
 800b50e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b510:	f107 0314 	add.w	r3, r7, #20
 800b514:	4619      	mov	r1, r3
 800b516:	4805      	ldr	r0, [pc, #20]	; (800b52c <HAL_UART_MspInit+0x8c>)
 800b518:	f001 ffec 	bl	800d4f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b51c:	bf00      	nop
 800b51e:	3728      	adds	r7, #40	; 0x28
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40011000 	.word	0x40011000
 800b528:	40023800 	.word	0x40023800
 800b52c:	40020000 	.word	0x40020000

0800b530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b534:	e7fe      	b.n	800b534 <NMI_Handler+0x4>

0800b536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b536:	b480      	push	{r7}
 800b538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b53a:	e7fe      	b.n	800b53a <HardFault_Handler+0x4>

0800b53c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b53c:	b480      	push	{r7}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b540:	e7fe      	b.n	800b540 <MemManage_Handler+0x4>

0800b542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b542:	b480      	push	{r7}
 800b544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b546:	e7fe      	b.n	800b546 <BusFault_Handler+0x4>

0800b548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b54c:	e7fe      	b.n	800b54c <UsageFault_Handler+0x4>

0800b54e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b54e:	b480      	push	{r7}
 800b550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b552:	bf00      	nop
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b560:	bf00      	nop
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b56a:	b480      	push	{r7}
 800b56c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b56e:	bf00      	nop
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b57c:	f000 fb5e 	bl	800bc3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b580:	bf00      	nop
 800b582:	bd80      	pop	{r7, pc}

0800b584 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800b588:	f001 fe1c 	bl	800d1c4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800b58c:	bf00      	nop
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b594:	4803      	ldr	r0, [pc, #12]	; (800b5a4 <ADC_IRQHandler+0x14>)
 800b596:	f000 fbd6 	bl	800bd46 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800b59a:	4803      	ldr	r0, [pc, #12]	; (800b5a8 <ADC_IRQHandler+0x18>)
 800b59c:	f000 fbd3 	bl	800bd46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b5a0:	bf00      	nop
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	200005c8 	.word	0x200005c8
 800b5a8:	200004a8 	.word	0x200004a8

0800b5ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b5b0:	4802      	ldr	r0, [pc, #8]	; (800b5bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b5b2:	f003 f96b 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b5b6:	bf00      	nop
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200006b0 	.word	0x200006b0

0800b5c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b5c4:	4802      	ldr	r0, [pc, #8]	; (800b5d0 <TIM2_IRQHandler+0x10>)
 800b5c6:	f003 f961 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b5ca:	bf00      	nop
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	200006f0 	.word	0x200006f0

0800b5d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b5d8:	4802      	ldr	r0, [pc, #8]	; (800b5e4 <TIM3_IRQHandler+0x10>)
 800b5da:	f003 f957 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b5de:	bf00      	nop
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20000530 	.word	0x20000530

0800b5e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b5ec:	4802      	ldr	r0, [pc, #8]	; (800b5f8 <TIM4_IRQHandler+0x10>)
 800b5ee:	f003 f94d 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b5f2:	bf00      	nop
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000468 	.word	0x20000468

0800b5fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b600:	4802      	ldr	r0, [pc, #8]	; (800b60c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800b602:	f003 f943 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800b606:	bf00      	nop
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20000428 	.word	0x20000428

0800b610 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b614:	4802      	ldr	r0, [pc, #8]	; (800b620 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800b616:	f003 f939 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800b61a:	bf00      	nop
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000428 	.word	0x20000428

0800b624 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b628:	4802      	ldr	r0, [pc, #8]	; (800b634 <TIM8_CC_IRQHandler+0x10>)
 800b62a:	f003 f92f 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800b62e:	bf00      	nop
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000428 	.word	0x20000428

0800b638 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b63c:	4802      	ldr	r0, [pc, #8]	; (800b648 <TIM5_IRQHandler+0x10>)
 800b63e:	f003 f925 	bl	800e88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b642:	bf00      	nop
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200004f0 	.word	0x200004f0

0800b64c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b650:	4802      	ldr	r0, [pc, #8]	; (800b65c <DMA2_Stream0_IRQHandler+0x10>)
 800b652:	f001 fb4f 	bl	800ccf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b656:	bf00      	nop
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000650 	.word	0x20000650

0800b660 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800b664:	4802      	ldr	r0, [pc, #8]	; (800b670 <DMA2_Stream2_IRQHandler+0x10>)
 800b666:	f001 fb45 	bl	800ccf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800b66a:	bf00      	nop
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000730 	.word	0x20000730

0800b674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b678:	4b08      	ldr	r3, [pc, #32]	; (800b69c <SystemInit+0x28>)
 800b67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67e:	4a07      	ldr	r2, [pc, #28]	; (800b69c <SystemInit+0x28>)
 800b680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b688:	4b04      	ldr	r3, [pc, #16]	; (800b69c <SystemInit+0x28>)
 800b68a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b68e:	609a      	str	r2, [r3, #8]
#endif
}
 800b690:	bf00      	nop
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	e000ed00 	.word	0xe000ed00

0800b6a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	e00a      	b.n	800b6c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b6b2:	f3af 8000 	nop.w
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	60ba      	str	r2, [r7, #8]
 800b6be:	b2ca      	uxtb	r2, r1
 800b6c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	dbf0      	blt.n	800b6b2 <_read+0x12>
	}

return len;
 800b6d0:	687b      	ldr	r3, [r7, #4]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b086      	sub	sp, #24
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	617b      	str	r3, [r7, #20]
 800b6ea:	e009      	b.n	800b700 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	60ba      	str	r2, [r7, #8]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe fe01 	bl	800a2fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	dbf1      	blt.n	800b6ec <_write+0x12>
	}
	return len;
 800b708:	687b      	ldr	r3, [r7, #4]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <_close>:

int _close(int file)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
	return -1;
 800b71a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b73a:	605a      	str	r2, [r3, #4]
	return 0;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <_isatty>:

int _isatty(int file)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
	return 1;
 800b752:	2301      	movs	r3, #1
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
	return 0;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
	...

0800b77c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b784:	4a14      	ldr	r2, [pc, #80]	; (800b7d8 <_sbrk+0x5c>)
 800b786:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <_sbrk+0x60>)
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b790:	4b13      	ldr	r3, [pc, #76]	; (800b7e0 <_sbrk+0x64>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b798:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <_sbrk+0x64>)
 800b79a:	4a12      	ldr	r2, [pc, #72]	; (800b7e4 <_sbrk+0x68>)
 800b79c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b79e:	4b10      	ldr	r3, [pc, #64]	; (800b7e0 <_sbrk+0x64>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d207      	bcs.n	800b7bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b7ac:	f004 fd54 	bl	8010258 <__errno>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ba:	e009      	b.n	800b7d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b7bc:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <_sbrk+0x64>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b7c2:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <_sbrk+0x64>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	4a05      	ldr	r2, [pc, #20]	; (800b7e0 <_sbrk+0x64>)
 800b7cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20020000 	.word	0x20020000
 800b7dc:	00000400 	.word	0x00000400
 800b7e0:	20000408 	.word	0x20000408
 800b7e4:	200007c0 	.word	0x200007c0

0800b7e8 <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800b7ec:	2203      	movs	r2, #3
 800b7ee:	490a      	ldr	r1, [pc, #40]	; (800b818 <ADCStart+0x30>)
 800b7f0:	480a      	ldr	r0, [pc, #40]	; (800b81c <ADCStart+0x34>)
 800b7f2:	f000 fbe9 	bl	800bfc8 <HAL_ADC_Start_DMA>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <ADCStart+0x18>
	{
		Error_Handler();
 800b7fc:	f7ff fb0c 	bl	800ae18 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800b800:	2202      	movs	r2, #2
 800b802:	4907      	ldr	r1, [pc, #28]	; (800b820 <ADCStart+0x38>)
 800b804:	4807      	ldr	r0, [pc, #28]	; (800b824 <ADCStart+0x3c>)
 800b806:	f000 fbdf 	bl	800bfc8 <HAL_ADC_Start_DMA>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <ADCStart+0x2c>
	{
		Error_Handler();
 800b810:	f7ff fb02 	bl	800ae18 <Error_Handler>
	}

}
 800b814:	bf00      	nop
 800b816:	bd80      	pop	{r7, pc}
 800b818:	2000040c 	.word	0x2000040c
 800b81c:	200005c8 	.word	0x200005c8
 800b820:	20000418 	.word	0x20000418
 800b824:	200004a8 	.word	0x200004a8

0800b828 <ADCStop>:
void ADCStop()
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800b82c:	4808      	ldr	r0, [pc, #32]	; (800b850 <ADCStop+0x28>)
 800b82e:	f000 fcbd 	bl	800c1ac <HAL_ADC_Stop_DMA>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <ADCStop+0x14>
	{
		Error_Handler();
 800b838:	f7ff faee 	bl	800ae18 <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800b83c:	4805      	ldr	r0, [pc, #20]	; (800b854 <ADCStop+0x2c>)
 800b83e:	f000 fcb5 	bl	800c1ac <HAL_ADC_Stop_DMA>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <ADCStop+0x24>
	{
		Error_Handler();
 800b848:	f7ff fae6 	bl	800ae18 <Error_Handler>
	}
}
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200005c8 	.word	0x200005c8
 800b854:	200004a8 	.word	0x200004a8

0800b858 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800b85c:	213c      	movs	r1, #60	; 0x3c
 800b85e:	4804      	ldr	r0, [pc, #16]	; (800b870 <EncoderStart+0x18>)
 800b860:	f002 ff96 	bl	800e790 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800b864:	213c      	movs	r1, #60	; 0x3c
 800b866:	4803      	ldr	r0, [pc, #12]	; (800b874 <EncoderStart+0x1c>)
 800b868:	f002 ff92 	bl	800e790 <HAL_TIM_Encoder_Start>
}
 800b86c:	bf00      	nop
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000530 	.word	0x20000530
 800b874:	20000468 	.word	0x20000468

0800b878 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800b87c:	213c      	movs	r1, #60	; 0x3c
 800b87e:	4804      	ldr	r0, [pc, #16]	; (800b890 <EncoderStop+0x18>)
 800b880:	f002 ffbd 	bl	800e7fe <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800b884:	213c      	movs	r1, #60	; 0x3c
 800b886:	4803      	ldr	r0, [pc, #12]	; (800b894 <EncoderStop+0x1c>)
 800b888:	f002 ffb9 	bl	800e7fe <HAL_TIM_Encoder_Stop>
}
 800b88c:	bf00      	nop
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20000530 	.word	0x20000530
 800b894:	20000468 	.word	0x20000468

0800b898 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800b89c:	2100      	movs	r1, #0
 800b89e:	4804      	ldr	r0, [pc, #16]	; (800b8b0 <EmitterON+0x18>)
 800b8a0:	f002 fd52 	bl	800e348 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4802      	ldr	r0, [pc, #8]	; (800b8b0 <EmitterON+0x18>)
 800b8a8:	f003 fe0d 	bl	800f4c6 <HAL_TIMEx_OCN_Start_IT>

}
 800b8ac:	bf00      	nop
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000428 	.word	0x20000428

0800b8b4 <EmitterOFF>:
void EmitterOFF()
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	4804      	ldr	r0, [pc, #16]	; (800b8cc <EmitterOFF+0x18>)
 800b8bc:	f002 fdc8 	bl	800e450 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4802      	ldr	r0, [pc, #8]	; (800b8cc <EmitterOFF+0x18>)
 800b8c4:	f003 fe54 	bl	800f570 <HAL_TIMEx_OCN_Stop_IT>

}
 800b8c8:	bf00      	nop
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20000428 	.word	0x20000428

0800b8d0 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b07      	cmp	r3, #7
 800b8dc:	f200 80ac 	bhi.w	800ba38 <ChangeLED+0x168>
 800b8e0:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <ChangeLED+0x18>)
 800b8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e6:	bf00      	nop
 800b8e8:	0800b909 	.word	0x0800b909
 800b8ec:	0800b92f 	.word	0x0800b92f
 800b8f0:	0800b955 	.word	0x0800b955
 800b8f4:	0800b97b 	.word	0x0800b97b
 800b8f8:	0800b9a1 	.word	0x0800b9a1
 800b8fc:	0800b9c7 	.word	0x0800b9c7
 800b900:	0800b9ed 	.word	0x0800b9ed
 800b904:	0800ba13 	.word	0x0800ba13
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b908:	2200      	movs	r2, #0
 800b90a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b90e:	484d      	ldr	r0, [pc, #308]	; (800ba44 <ChangeLED+0x174>)
 800b910:	f001 ff8a 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b914:	2200      	movs	r2, #0
 800b916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b91a:	484a      	ldr	r0, [pc, #296]	; (800ba44 <ChangeLED+0x174>)
 800b91c:	f001 ff84 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b920:	2200      	movs	r2, #0
 800b922:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b926:	4848      	ldr	r0, [pc, #288]	; (800ba48 <ChangeLED+0x178>)
 800b928:	f001 ff7e 	bl	800d828 <HAL_GPIO_WritePin>
		break;
 800b92c:	e085      	b.n	800ba3a <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b92e:	2201      	movs	r2, #1
 800b930:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b934:	4843      	ldr	r0, [pc, #268]	; (800ba44 <ChangeLED+0x174>)
 800b936:	f001 ff77 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b93a:	2200      	movs	r2, #0
 800b93c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b940:	4840      	ldr	r0, [pc, #256]	; (800ba44 <ChangeLED+0x174>)
 800b942:	f001 ff71 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b946:	2200      	movs	r2, #0
 800b948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b94c:	483e      	ldr	r0, [pc, #248]	; (800ba48 <ChangeLED+0x178>)
 800b94e:	f001 ff6b 	bl	800d828 <HAL_GPIO_WritePin>
		break;
 800b952:	e072      	b.n	800ba3a <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b954:	2200      	movs	r2, #0
 800b956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b95a:	483a      	ldr	r0, [pc, #232]	; (800ba44 <ChangeLED+0x174>)
 800b95c:	f001 ff64 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b960:	2201      	movs	r2, #1
 800b962:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b966:	4837      	ldr	r0, [pc, #220]	; (800ba44 <ChangeLED+0x174>)
 800b968:	f001 ff5e 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b96c:	2200      	movs	r2, #0
 800b96e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b972:	4835      	ldr	r0, [pc, #212]	; (800ba48 <ChangeLED+0x178>)
 800b974:	f001 ff58 	bl	800d828 <HAL_GPIO_WritePin>

		break;
 800b978:	e05f      	b.n	800ba3a <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b97a:	2201      	movs	r2, #1
 800b97c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b980:	4830      	ldr	r0, [pc, #192]	; (800ba44 <ChangeLED+0x174>)
 800b982:	f001 ff51 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b986:	2201      	movs	r2, #1
 800b988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b98c:	482d      	ldr	r0, [pc, #180]	; (800ba44 <ChangeLED+0x174>)
 800b98e:	f001 ff4b 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b992:	2200      	movs	r2, #0
 800b994:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b998:	482b      	ldr	r0, [pc, #172]	; (800ba48 <ChangeLED+0x178>)
 800b99a:	f001 ff45 	bl	800d828 <HAL_GPIO_WritePin>
		break;
 800b99e:	e04c      	b.n	800ba3a <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9a6:	4827      	ldr	r0, [pc, #156]	; (800ba44 <ChangeLED+0x174>)
 800b9a8:	f001 ff3e 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9b2:	4824      	ldr	r0, [pc, #144]	; (800ba44 <ChangeLED+0x174>)
 800b9b4:	f001 ff38 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9be:	4822      	ldr	r0, [pc, #136]	; (800ba48 <ChangeLED+0x178>)
 800b9c0:	f001 ff32 	bl	800d828 <HAL_GPIO_WritePin>
		break;
 800b9c4:	e039      	b.n	800ba3a <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9cc:	481d      	ldr	r0, [pc, #116]	; (800ba44 <ChangeLED+0x174>)
 800b9ce:	f001 ff2b 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9d8:	481a      	ldr	r0, [pc, #104]	; (800ba44 <ChangeLED+0x174>)
 800b9da:	f001 ff25 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9e4:	4818      	ldr	r0, [pc, #96]	; (800ba48 <ChangeLED+0x178>)
 800b9e6:	f001 ff1f 	bl	800d828 <HAL_GPIO_WritePin>
		break;
 800b9ea:	e026      	b.n	800ba3a <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9f2:	4814      	ldr	r0, [pc, #80]	; (800ba44 <ChangeLED+0x174>)
 800b9f4:	f001 ff18 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9fe:	4811      	ldr	r0, [pc, #68]	; (800ba44 <ChangeLED+0x174>)
 800ba00:	f001 ff12 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ba04:	2201      	movs	r2, #1
 800ba06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba0a:	480f      	ldr	r0, [pc, #60]	; (800ba48 <ChangeLED+0x178>)
 800ba0c:	f001 ff0c 	bl	800d828 <HAL_GPIO_WritePin>

		break;
 800ba10:	e013      	b.n	800ba3a <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ba12:	2201      	movs	r2, #1
 800ba14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba18:	480a      	ldr	r0, [pc, #40]	; (800ba44 <ChangeLED+0x174>)
 800ba1a:	f001 ff05 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba24:	4807      	ldr	r0, [pc, #28]	; (800ba44 <ChangeLED+0x174>)
 800ba26:	f001 feff 	bl	800d828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba30:	4805      	ldr	r0, [pc, #20]	; (800ba48 <ChangeLED+0x178>)
 800ba32:	f001 fef9 	bl	800d828 <HAL_GPIO_WritePin>

		break;
 800ba36:	e000      	b.n	800ba3a <ChangeLED+0x16a>
	default: break;
 800ba38:	bf00      	nop

	}
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	40020800 	.word	0x40020800
 800ba48:	40020400 	.word	0x40020400

0800ba4c <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800ba50:	210c      	movs	r1, #12
 800ba52:	4809      	ldr	r0, [pc, #36]	; (800ba78 <Motor_PWM_Start+0x2c>)
 800ba54:	f002 fdcc 	bl	800e5f0 <HAL_TIM_PWM_Start>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800ba5e:	f7ff f9db 	bl	800ae18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800ba62:	2104      	movs	r1, #4
 800ba64:	4805      	ldr	r0, [pc, #20]	; (800ba7c <Motor_PWM_Start+0x30>)
 800ba66:	f002 fdc3 	bl	800e5f0 <HAL_TIM_PWM_Start>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800ba70:	f7ff f9d2 	bl	800ae18 <Error_Handler>
  }
#endif
}
 800ba74:	bf00      	nop
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200006f0 	.word	0x200006f0
 800ba7c:	200004f0 	.word	0x200004f0

0800ba80 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dd05      	ble.n	800ba9c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800ba90:	2201      	movs	r2, #1
 800ba92:	2104      	movs	r1, #4
 800ba94:	4828      	ldr	r0, [pc, #160]	; (800bb38 <Motor_Switch+0xb8>)
 800ba96:	f001 fec7 	bl	800d828 <HAL_GPIO_WritePin>
 800ba9a:	e00a      	b.n	800bab2 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	da07      	bge.n	800bab2 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800baa2:	2200      	movs	r2, #0
 800baa4:	2104      	movs	r1, #4
 800baa6:	4824      	ldr	r0, [pc, #144]	; (800bb38 <Motor_Switch+0xb8>)
 800baa8:	f001 febe 	bl	800d828 <HAL_GPIO_WritePin>
		left = -left;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	425b      	negs	r3, r3
 800bab0:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dd05      	ble.n	800bac4 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800bab8:	2200      	movs	r2, #0
 800baba:	2101      	movs	r1, #1
 800babc:	481e      	ldr	r0, [pc, #120]	; (800bb38 <Motor_Switch+0xb8>)
 800babe:	f001 feb3 	bl	800d828 <HAL_GPIO_WritePin>
 800bac2:	e00a      	b.n	800bada <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da07      	bge.n	800bada <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800baca:	2201      	movs	r2, #1
 800bacc:	2101      	movs	r1, #1
 800bace:	481a      	ldr	r0, [pc, #104]	; (800bb38 <Motor_Switch+0xb8>)
 800bad0:	f001 feaa 	bl	800d828 <HAL_GPIO_WritePin>
	  	right = -right;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	425b      	negs	r3, r3
 800bad8:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7fc fc5a 	bl	8008394 <__aeabi_i2d>
 800bae0:	a313      	add	r3, pc, #76	; (adr r3, 800bb30 <Motor_Switch+0xb0>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	f7fc ff4f 	bl	8008988 <__aeabi_dcmpgt>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <Motor_Switch+0x76>
 800baf0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800baf4:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800baf6:	6838      	ldr	r0, [r7, #0]
 800baf8:	f7fc fc4c 	bl	8008394 <__aeabi_i2d>
 800bafc:	a30c      	add	r3, pc, #48	; (adr r3, 800bb30 <Motor_Switch+0xb0>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	f7fc ff41 	bl	8008988 <__aeabi_dcmpgt>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <Motor_Switch+0x92>
 800bb0c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800bb10:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <Motor_Switch+0xbc>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <Motor_Switch+0xc0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w
 800bb30:	00000000 	.word	0x00000000
 800bb34:	40a3b000 	.word	0x40a3b000
 800bb38:	40020000 	.word	0x40020000
 800bb3c:	200006f0 	.word	0x200006f0
 800bb40:	200004f0 	.word	0x200004f0

0800bb44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bb44:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb4a:	e003      	b.n	800bb54 <LoopCopyDataInit>

0800bb4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb4c:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb52:	3104      	adds	r1, #4

0800bb54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb54:	480b      	ldr	r0, [pc, #44]	; (800bb84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb56:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb5c:	d3f6      	bcc.n	800bb4c <CopyDataInit>
  ldr  r2, =_sbss
 800bb5e:	4a0b      	ldr	r2, [pc, #44]	; (800bb8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb60:	e002      	b.n	800bb68 <LoopFillZerobss>

0800bb62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb64:	f842 3b04 	str.w	r3, [r2], #4

0800bb68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb68:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb6c:	d3f9      	bcc.n	800bb62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bb6e:	f7ff fd81 	bl	800b674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb72:	f004 fb77 	bl	8010264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb76:	f7fe fbd3 	bl	800a320 <main>
  bx  lr    
 800bb7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bb7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bb80:	08012d50 	.word	0x08012d50
  ldr  r0, =_sdata
 800bb84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb88:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800bb8c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800bb90:	200007bc 	.word	0x200007bc

0800bb94 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb94:	e7fe      	b.n	800bb94 <CAN1_RX0_IRQHandler>
	...

0800bb98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <HAL_Init+0x40>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a0d      	ldr	r2, [pc, #52]	; (800bbd8 <HAL_Init+0x40>)
 800bba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bba8:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <HAL_Init+0x40>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a0a      	ldr	r2, [pc, #40]	; (800bbd8 <HAL_Init+0x40>)
 800bbae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bbb4:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <HAL_Init+0x40>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a07      	ldr	r2, [pc, #28]	; (800bbd8 <HAL_Init+0x40>)
 800bbba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bbc0:	2003      	movs	r0, #3
 800bbc2:	f000 fedf 	bl	800c984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f000 f808 	bl	800bbdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bbcc:	f7ff f928 	bl	800ae20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	40023c00 	.word	0x40023c00

0800bbdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bbe4:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <HAL_InitTick+0x54>)
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <HAL_InitTick+0x58>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	4619      	mov	r1, r3
 800bbee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 fef7 	bl	800c9ee <HAL_SYSTICK_Config>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e00e      	b.n	800bc28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b0f      	cmp	r3, #15
 800bc0e:	d80a      	bhi.n	800bc26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bc10:	2200      	movs	r2, #0
 800bc12:	6879      	ldr	r1, [r7, #4]
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295
 800bc18:	f000 febf 	bl	800c99a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bc1c:	4a06      	ldr	r2, [pc, #24]	; (800bc38 <HAL_InitTick+0x5c>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	e000      	b.n	800bc28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20000000 	.word	0x20000000
 800bc34:	20000008 	.word	0x20000008
 800bc38:	20000004 	.word	0x20000004

0800bc3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <HAL_IncTick+0x20>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <HAL_IncTick+0x24>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	4a04      	ldr	r2, [pc, #16]	; (800bc60 <HAL_IncTick+0x24>)
 800bc4e:	6013      	str	r3, [r2, #0]
}
 800bc50:	bf00      	nop
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	20000008 	.word	0x20000008
 800bc60:	20000794 	.word	0x20000794

0800bc64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
  return uwTick;
 800bc68:	4b03      	ldr	r3, [pc, #12]	; (800bc78 <HAL_GetTick+0x14>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	20000794 	.word	0x20000794

0800bc7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc84:	f7ff ffee 	bl	800bc64 <HAL_GetTick>
 800bc88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d005      	beq.n	800bca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <HAL_Delay+0x40>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bca2:	bf00      	nop
 800bca4:	f7ff ffde 	bl	800bc64 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d8f7      	bhi.n	800bca4 <HAL_Delay+0x28>
  {
  }
}
 800bcb4:	bf00      	nop
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000008 	.word	0x20000008

0800bcc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e033      	b.n	800bd3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d109      	bne.n	800bcf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7ff f8cc 	bl	800ae7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	f003 0310 	and.w	r3, r3, #16
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d118      	bne.n	800bd30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bd06:	f023 0302 	bic.w	r3, r3, #2
 800bd0a:	f043 0202 	orr.w	r2, r3, #2
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fbde 	bl	800c4d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd22:	f023 0303 	bic.w	r3, r3, #3
 800bd26:	f043 0201 	orr.w	r2, r3, #1
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	641a      	str	r2, [r3, #64]	; 0x40
 800bd2e:	e001      	b.n	800bd34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	2300      	movs	r3, #0
 800bd54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	bf0c      	ite	eq
 800bd64:	2301      	moveq	r3, #1
 800bd66:	2300      	movne	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f003 0320 	and.w	r3, r3, #32
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	bf0c      	ite	eq
 800bd7a:	2301      	moveq	r3, #1
 800bd7c:	2300      	movne	r3, #0
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d049      	beq.n	800be1c <HAL_ADC_IRQHandler+0xd6>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d046      	beq.n	800be1c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd92:	f003 0310 	and.w	r3, r3, #16
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d105      	bne.n	800bda6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d12b      	bne.n	800be0c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d127      	bne.n	800be0c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d119      	bne.n	800be0c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f022 0220 	bic.w	r2, r2, #32
 800bde6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be04:	f043 0201 	orr.w	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fa17 	bl	800c240 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f06f 0212 	mvn.w	r2, #18
 800be1a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0304 	and.w	r3, r3, #4
 800be26:	2b04      	cmp	r3, #4
 800be28:	bf0c      	ite	eq
 800be2a:	2301      	moveq	r3, #1
 800be2c:	2300      	movne	r3, #0
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be3c:	2b80      	cmp	r3, #128	; 0x80
 800be3e:	bf0c      	ite	eq
 800be40:	2301      	moveq	r3, #1
 800be42:	2300      	movne	r3, #0
 800be44:	b2db      	uxtb	r3, r3
 800be46:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d057      	beq.n	800befe <HAL_ADC_IRQHandler+0x1b8>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d054      	beq.n	800befe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be58:	f003 0310 	and.w	r3, r3, #16
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d105      	bne.n	800be6c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d139      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800be92:	2b00      	cmp	r3, #0
 800be94:	d12b      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d124      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11d      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d119      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bec8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee6:	f043 0201 	orr.w	r2, r3, #1
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fc6e 	bl	800c7d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f06f 020c 	mvn.w	r2, #12
 800befc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	bf0c      	ite	eq
 800bf0c:	2301      	moveq	r3, #1
 800bf0e:	2300      	movne	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1e:	2b40      	cmp	r3, #64	; 0x40
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d017      	beq.n	800bf60 <HAL_ADC_IRQHandler+0x21a>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d014      	beq.n	800bf60 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d10d      	bne.n	800bf60 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f989 	bl	800c268 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f06f 0201 	mvn.w	r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0320 	and.w	r3, r3, #32
 800bf6a:	2b20      	cmp	r3, #32
 800bf6c:	bf0c      	ite	eq
 800bf6e:	2301      	moveq	r3, #1
 800bf70:	2300      	movne	r3, #0
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf84:	bf0c      	ite	eq
 800bf86:	2301      	moveq	r3, #1
 800bf88:	2300      	movne	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d015      	beq.n	800bfc0 <HAL_ADC_IRQHandler+0x27a>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d012      	beq.n	800bfc0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9e:	f043 0202 	orr.w	r2, r3, #2
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f06f 0220 	mvn.w	r2, #32
 800bfae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f963 	bl	800c27c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f06f 0220 	mvn.w	r2, #32
 800bfbe:	601a      	str	r2, [r3, #0]
  }
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d101      	bne.n	800bfe6 <HAL_ADC_Start_DMA+0x1e>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	e0cc      	b.n	800c180 <HAL_ADC_Start_DMA+0x1b8>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d018      	beq.n	800c02e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c00c:	4b5e      	ldr	r3, [pc, #376]	; (800c188 <HAL_ADC_Start_DMA+0x1c0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a5e      	ldr	r2, [pc, #376]	; (800c18c <HAL_ADC_Start_DMA+0x1c4>)
 800c012:	fba2 2303 	umull	r2, r3, r2, r3
 800c016:	0c9a      	lsrs	r2, r3, #18
 800c018:	4613      	mov	r3, r2
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c020:	e002      	b.n	800c028 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	3b01      	subs	r3, #1
 800c026:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1f9      	bne.n	800c022 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b01      	cmp	r3, #1
 800c03a:	f040 80a0 	bne.w	800c17e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c046:	f023 0301 	bic.w	r3, r3, #1
 800c04a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c068:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c07c:	d106      	bne.n	800c08c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c082:	f023 0206 	bic.w	r2, r3, #6
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	645a      	str	r2, [r3, #68]	; 0x44
 800c08a:	e002      	b.n	800c092 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c09a:	4b3d      	ldr	r3, [pc, #244]	; (800c190 <HAL_ADC_Start_DMA+0x1c8>)
 800c09c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	4a3c      	ldr	r2, [pc, #240]	; (800c194 <HAL_ADC_Start_DMA+0x1cc>)
 800c0a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	4a3b      	ldr	r2, [pc, #236]	; (800c198 <HAL_ADC_Start_DMA+0x1d0>)
 800c0ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b2:	4a3a      	ldr	r2, [pc, #232]	; (800c19c <HAL_ADC_Start_DMA+0x1d4>)
 800c0b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c0be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c0ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689a      	ldr	r2, [r3, #8]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	334c      	adds	r3, #76	; 0x4c
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f000 fd38 	bl	800cb64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	f003 031f 	and.w	r3, r3, #31
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d12a      	bne.n	800c156 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a26      	ldr	r2, [pc, #152]	; (800c1a0 <HAL_ADC_Start_DMA+0x1d8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d015      	beq.n	800c136 <HAL_ADC_Start_DMA+0x16e>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a25      	ldr	r2, [pc, #148]	; (800c1a4 <HAL_ADC_Start_DMA+0x1dc>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d105      	bne.n	800c120 <HAL_ADC_Start_DMA+0x158>
 800c114:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <HAL_ADC_Start_DMA+0x1c8>)
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f003 031f 	and.w	r3, r3, #31
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00a      	beq.n	800c136 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a20      	ldr	r2, [pc, #128]	; (800c1a8 <HAL_ADC_Start_DMA+0x1e0>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d129      	bne.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
 800c12a:	4b19      	ldr	r3, [pc, #100]	; (800c190 <HAL_ADC_Start_DMA+0x1c8>)
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f003 031f 	and.w	r3, r3, #31
 800c132:	2b0f      	cmp	r3, #15
 800c134:	d823      	bhi.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d11c      	bne.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689a      	ldr	r2, [r3, #8]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c152:	609a      	str	r2, [r3, #8]
 800c154:	e013      	b.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a11      	ldr	r2, [pc, #68]	; (800c1a0 <HAL_ADC_Start_DMA+0x1d8>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d10e      	bne.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d107      	bne.n	800c17e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c17c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20000000 	.word	0x20000000
 800c18c:	431bde83 	.word	0x431bde83
 800c190:	40012300 	.word	0x40012300
 800c194:	0800c6cd 	.word	0x0800c6cd
 800c198:	0800c787 	.word	0x0800c787
 800c19c:	0800c7a3 	.word	0x0800c7a3
 800c1a0:	40012000 	.word	0x40012000
 800c1a4:	40012100 	.word	0x40012100
 800c1a8:	40012200 	.word	0x40012200

0800c1ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_ADC_Stop_DMA+0x1a>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e038      	b.n	800c238 <HAL_ADC_Stop_DMA+0x8c>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 0201 	bic.w	r2, r2, #1
 800c1dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d120      	bne.n	800c22e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689a      	ldr	r2, [r3, #8]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1fa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	4618      	mov	r0, r3
 800c202:	f000 fd07 	bl	800cc14 <HAL_DMA_Abort>
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800c218:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c222:	f023 0301 	bic.w	r3, r3, #1
 800c226:	f043 0201 	orr.w	r2, r3, #1
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_ADC_ConfigChannel+0x1c>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e105      	b.n	800c4b8 <HAL_ADC_ConfigChannel+0x228>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b09      	cmp	r3, #9
 800c2ba:	d925      	bls.n	800c308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68d9      	ldr	r1, [r3, #12]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	4413      	add	r3, r2
 800c2d0:	3b1e      	subs	r3, #30
 800c2d2:	2207      	movs	r2, #7
 800c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d8:	43da      	mvns	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	400a      	ands	r2, r1
 800c2e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68d9      	ldr	r1, [r3, #12]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	4403      	add	r3, r0
 800c2fa:	3b1e      	subs	r3, #30
 800c2fc:	409a      	lsls	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	e022      	b.n	800c34e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6919      	ldr	r1, [r3, #16]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	b29b      	uxth	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	4613      	mov	r3, r2
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	4413      	add	r3, r2
 800c31c:	2207      	movs	r2, #7
 800c31e:	fa02 f303 	lsl.w	r3, r2, r3
 800c322:	43da      	mvns	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	400a      	ands	r2, r1
 800c32a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6919      	ldr	r1, [r3, #16]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	689a      	ldr	r2, [r3, #8]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4618      	mov	r0, r3
 800c33e:	4603      	mov	r3, r0
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4403      	add	r3, r0
 800c344:	409a      	lsls	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	430a      	orrs	r2, r1
 800c34c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	2b06      	cmp	r3, #6
 800c354:	d824      	bhi.n	800c3a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	3b05      	subs	r3, #5
 800c368:	221f      	movs	r2, #31
 800c36a:	fa02 f303 	lsl.w	r3, r2, r3
 800c36e:	43da      	mvns	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	400a      	ands	r2, r1
 800c376:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	4618      	mov	r0, r3
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	3b05      	subs	r3, #5
 800c392:	fa00 f203 	lsl.w	r2, r0, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	635a      	str	r2, [r3, #52]	; 0x34
 800c39e:	e04c      	b.n	800c43a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2b0c      	cmp	r3, #12
 800c3a6:	d824      	bhi.n	800c3f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	3b23      	subs	r3, #35	; 0x23
 800c3ba:	221f      	movs	r2, #31
 800c3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c0:	43da      	mvns	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	400a      	ands	r2, r1
 800c3c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3b23      	subs	r3, #35	; 0x23
 800c3e4:	fa00 f203 	lsl.w	r2, r0, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c3f0:	e023      	b.n	800c43a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	3b41      	subs	r3, #65	; 0x41
 800c404:	221f      	movs	r2, #31
 800c406:	fa02 f303 	lsl.w	r3, r2, r3
 800c40a:	43da      	mvns	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	400a      	ands	r2, r1
 800c412:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	4618      	mov	r0, r3
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	3b41      	subs	r3, #65	; 0x41
 800c42e:	fa00 f203 	lsl.w	r2, r0, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c43a:	4b22      	ldr	r3, [pc, #136]	; (800c4c4 <HAL_ADC_ConfigChannel+0x234>)
 800c43c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a21      	ldr	r2, [pc, #132]	; (800c4c8 <HAL_ADC_ConfigChannel+0x238>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d109      	bne.n	800c45c <HAL_ADC_ConfigChannel+0x1cc>
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b12      	cmp	r3, #18
 800c44e:	d105      	bne.n	800c45c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a19      	ldr	r2, [pc, #100]	; (800c4c8 <HAL_ADC_ConfigChannel+0x238>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d123      	bne.n	800c4ae <HAL_ADC_ConfigChannel+0x21e>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d003      	beq.n	800c476 <HAL_ADC_ConfigChannel+0x1e6>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b11      	cmp	r3, #17
 800c474:	d11b      	bne.n	800c4ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b10      	cmp	r3, #16
 800c488:	d111      	bne.n	800c4ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c48a:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <HAL_ADC_ConfigChannel+0x23c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a10      	ldr	r2, [pc, #64]	; (800c4d0 <HAL_ADC_ConfigChannel+0x240>)
 800c490:	fba2 2303 	umull	r2, r3, r2, r3
 800c494:	0c9a      	lsrs	r2, r3, #18
 800c496:	4613      	mov	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c4a0:	e002      	b.n	800c4a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1f9      	bne.n	800c4a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	40012300 	.word	0x40012300
 800c4c8:	40012000 	.word	0x40012000
 800c4cc:	20000000 	.word	0x20000000
 800c4d0:	431bde83 	.word	0x431bde83

0800c4d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c4dc:	4b79      	ldr	r3, [pc, #484]	; (800c6c4 <ADC_Init+0x1f0>)
 800c4de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6859      	ldr	r1, [r3, #4]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	021a      	lsls	r2, r3, #8
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	430a      	orrs	r2, r1
 800c51c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c52c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6859      	ldr	r1, [r3, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	430a      	orrs	r2, r1
 800c53e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	689a      	ldr	r2, [r3, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c54e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6899      	ldr	r1, [r3, #8]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	430a      	orrs	r2, r1
 800c560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c566:	4a58      	ldr	r2, [pc, #352]	; (800c6c8 <ADC_Init+0x1f4>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d022      	beq.n	800c5b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689a      	ldr	r2, [r3, #8]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c57a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6899      	ldr	r1, [r3, #8]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c59c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6899      	ldr	r1, [r3, #8]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	609a      	str	r2, [r3, #8]
 800c5b0:	e00f      	b.n	800c5d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c5c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c5d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 0202 	bic.w	r2, r2, #2
 800c5e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6899      	ldr	r1, [r3, #8]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7e1b      	ldrb	r3, [r3, #24]
 800c5ec:	005a      	lsls	r2, r3, #1
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01b      	beq.n	800c638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c60e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c61e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6859      	ldr	r1, [r3, #4]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62a:	3b01      	subs	r3, #1
 800c62c:	035a      	lsls	r2, r3, #13
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	430a      	orrs	r2, r1
 800c634:	605a      	str	r2, [r3, #4]
 800c636:	e007      	b.n	800c648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	3b01      	subs	r3, #1
 800c664:	051a      	lsls	r2, r3, #20
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	430a      	orrs	r2, r1
 800c66c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c67c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6899      	ldr	r1, [r3, #8]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c68a:	025a      	lsls	r2, r3, #9
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	430a      	orrs	r2, r1
 800c692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6899      	ldr	r1, [r3, #8]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	695b      	ldr	r3, [r3, #20]
 800c6ae:	029a      	lsls	r2, r3, #10
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	609a      	str	r2, [r3, #8]
}
 800c6b8:	bf00      	nop
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	40012300 	.word	0x40012300
 800c6c8:	0f000001 	.word	0x0f000001

0800c6cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d13c      	bne.n	800c760 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d12b      	bne.n	800c758 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c704:	2b00      	cmp	r3, #0
 800c706:	d127      	bne.n	800c758 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c712:	2b00      	cmp	r3, #0
 800c714:	d006      	beq.n	800c724 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c720:	2b00      	cmp	r3, #0
 800c722:	d119      	bne.n	800c758 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0220 	bic.w	r2, r2, #32
 800c732:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d105      	bne.n	800c758 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c750:	f043 0201 	orr.w	r2, r3, #1
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7ff fd71 	bl	800c240 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c75e:	e00e      	b.n	800c77e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	f003 0310 	and.w	r3, r3, #16
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f7ff fd85 	bl	800c27c <HAL_ADC_ErrorCallback>
}
 800c772:	e004      	b.n	800c77e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
}
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c792:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f7ff fd5d 	bl	800c254 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c79a:	bf00      	nop
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2240      	movs	r2, #64	; 0x40
 800c7b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ba:	f043 0204 	orr.w	r2, r3, #4
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff fd5a 	bl	800c27c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <__NVIC_SetPriorityGrouping+0x44>)
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c800:	4013      	ands	r3, r2
 800c802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c80c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c816:	4a04      	ldr	r2, [pc, #16]	; (800c828 <__NVIC_SetPriorityGrouping+0x44>)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	60d3      	str	r3, [r2, #12]
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	e000ed00 	.word	0xe000ed00

0800c82c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <__NVIC_GetPriorityGrouping+0x18>)
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	0a1b      	lsrs	r3, r3, #8
 800c836:	f003 0307 	and.w	r3, r3, #7
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	e000ed00 	.word	0xe000ed00

0800c848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c856:	2b00      	cmp	r3, #0
 800c858:	db0b      	blt.n	800c872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c85a:	79fb      	ldrb	r3, [r7, #7]
 800c85c:	f003 021f 	and.w	r2, r3, #31
 800c860:	4907      	ldr	r1, [pc, #28]	; (800c880 <__NVIC_EnableIRQ+0x38>)
 800c862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c866:	095b      	lsrs	r3, r3, #5
 800c868:	2001      	movs	r0, #1
 800c86a:	fa00 f202 	lsl.w	r2, r0, r2
 800c86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	e000e100 	.word	0xe000e100

0800c884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	6039      	str	r1, [r7, #0]
 800c88e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c894:	2b00      	cmp	r3, #0
 800c896:	db0a      	blt.n	800c8ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	490c      	ldr	r1, [pc, #48]	; (800c8d0 <__NVIC_SetPriority+0x4c>)
 800c89e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8a2:	0112      	lsls	r2, r2, #4
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	440b      	add	r3, r1
 800c8a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c8ac:	e00a      	b.n	800c8c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	4908      	ldr	r1, [pc, #32]	; (800c8d4 <__NVIC_SetPriority+0x50>)
 800c8b4:	79fb      	ldrb	r3, [r7, #7]
 800c8b6:	f003 030f 	and.w	r3, r3, #15
 800c8ba:	3b04      	subs	r3, #4
 800c8bc:	0112      	lsls	r2, r2, #4
 800c8be:	b2d2      	uxtb	r2, r2
 800c8c0:	440b      	add	r3, r1
 800c8c2:	761a      	strb	r2, [r3, #24]
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	e000e100 	.word	0xe000e100
 800c8d4:	e000ed00 	.word	0xe000ed00

0800c8d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b089      	sub	sp, #36	; 0x24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	f1c3 0307 	rsb	r3, r3, #7
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	bf28      	it	cs
 800c8f6:	2304      	movcs	r3, #4
 800c8f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	2b06      	cmp	r3, #6
 800c900:	d902      	bls.n	800c908 <NVIC_EncodePriority+0x30>
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3b03      	subs	r3, #3
 800c906:	e000      	b.n	800c90a <NVIC_EncodePriority+0x32>
 800c908:	2300      	movs	r3, #0
 800c90a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c90c:	f04f 32ff 	mov.w	r2, #4294967295
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	fa02 f303 	lsl.w	r3, r2, r3
 800c916:	43da      	mvns	r2, r3
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	401a      	ands	r2, r3
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c920:	f04f 31ff 	mov.w	r1, #4294967295
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	fa01 f303 	lsl.w	r3, r1, r3
 800c92a:	43d9      	mvns	r1, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c930:	4313      	orrs	r3, r2
         );
}
 800c932:	4618      	mov	r0, r3
 800c934:	3724      	adds	r7, #36	; 0x24
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c950:	d301      	bcc.n	800c956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c952:	2301      	movs	r3, #1
 800c954:	e00f      	b.n	800c976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c956:	4a0a      	ldr	r2, [pc, #40]	; (800c980 <SysTick_Config+0x40>)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3b01      	subs	r3, #1
 800c95c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c95e:	210f      	movs	r1, #15
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	f7ff ff8e 	bl	800c884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c968:	4b05      	ldr	r3, [pc, #20]	; (800c980 <SysTick_Config+0x40>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c96e:	4b04      	ldr	r3, [pc, #16]	; (800c980 <SysTick_Config+0x40>)
 800c970:	2207      	movs	r2, #7
 800c972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000e010 	.word	0xe000e010

0800c984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff ff29 	bl	800c7e4 <__NVIC_SetPriorityGrouping>
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
 800c9a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c9ac:	f7ff ff3e 	bl	800c82c <__NVIC_GetPriorityGrouping>
 800c9b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	68b9      	ldr	r1, [r7, #8]
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff ff8e 	bl	800c8d8 <NVIC_EncodePriority>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff ff5d 	bl	800c884 <__NVIC_SetPriority>
}
 800c9ca:	bf00      	nop
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	4603      	mov	r3, r0
 800c9da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff ff31 	bl	800c848 <__NVIC_EnableIRQ>
}
 800c9e6:	bf00      	nop
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff ffa2 	bl	800c940 <SysTick_Config>
 800c9fc:	4603      	mov	r3, r0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ca14:	f7ff f926 	bl	800bc64 <HAL_GetTick>
 800ca18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e099      	b.n	800cb58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0201 	bic.w	r2, r2, #1
 800ca42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ca44:	e00f      	b.n	800ca66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ca46:	f7ff f90d 	bl	800bc64 <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	2b05      	cmp	r3, #5
 800ca52:	d908      	bls.n	800ca66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2220      	movs	r2, #32
 800ca58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e078      	b.n	800cb58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e8      	bne.n	800ca46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	4b38      	ldr	r3, [pc, #224]	; (800cb60 <HAL_DMA_Init+0x158>)
 800ca80:	4013      	ands	r3, r2
 800ca82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d107      	bne.n	800cad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac8:	4313      	orrs	r3, r2
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f023 0307 	bic.w	r3, r3, #7
 800cae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	4313      	orrs	r3, r2
 800caf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d117      	bne.n	800cb2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00e      	beq.n	800cb2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fadf 	bl	800d0d0 <DMA_CheckFifoParam>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d008      	beq.n	800cb2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2240      	movs	r2, #64	; 0x40
 800cb1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800cb26:	2301      	movs	r3, #1
 800cb28:	e016      	b.n	800cb58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fa96 	bl	800d064 <DMA_CalcBaseAndBitshift>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb40:	223f      	movs	r2, #63	; 0x3f
 800cb42:	409a      	lsls	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	f010803f 	.word	0xf010803f

0800cb64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
 800cb70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d101      	bne.n	800cb8a <HAL_DMA_Start_IT+0x26>
 800cb86:	2302      	movs	r3, #2
 800cb88:	e040      	b.n	800cc0c <HAL_DMA_Start_IT+0xa8>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d12f      	bne.n	800cbfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2202      	movs	r2, #2
 800cba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 fa28 	bl	800d008 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbbc:	223f      	movs	r2, #63	; 0x3f
 800cbbe:	409a      	lsls	r2, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f042 0216 	orr.w	r2, r2, #22
 800cbd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d007      	beq.n	800cbec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f042 0208 	orr.w	r2, r2, #8
 800cbea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0201 	orr.w	r2, r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	e005      	b.n	800cc0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800cc06:	2302      	movs	r3, #2
 800cc08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3718      	adds	r7, #24
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800cc22:	f7ff f81f 	bl	800bc64 <HAL_GetTick>
 800cc26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d008      	beq.n	800cc46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2280      	movs	r2, #128	; 0x80
 800cc38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e052      	b.n	800ccec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f022 0216 	bic.w	r2, r2, #22
 800cc54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	695a      	ldr	r2, [r3, #20]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d103      	bne.n	800cc76 <HAL_DMA_Abort+0x62>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f022 0208 	bic.w	r2, r2, #8
 800cc84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f022 0201 	bic.w	r2, r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cc96:	e013      	b.n	800ccc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cc98:	f7fe ffe4 	bl	800bc64 <HAL_GetTick>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2b05      	cmp	r3, #5
 800cca4:	d90c      	bls.n	800ccc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2220      	movs	r2, #32
 800ccaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2203      	movs	r2, #3
 800ccb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e015      	b.n	800ccec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e4      	bne.n	800cc98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd2:	223f      	movs	r2, #63	; 0x3f
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cd00:	4b92      	ldr	r3, [pc, #584]	; (800cf4c <HAL_DMA_IRQHandler+0x258>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a92      	ldr	r2, [pc, #584]	; (800cf50 <HAL_DMA_IRQHandler+0x25c>)
 800cd06:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0a:	0a9b      	lsrs	r3, r3, #10
 800cd0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd1e:	2208      	movs	r2, #8
 800cd20:	409a      	lsls	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4013      	ands	r3, r2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01a      	beq.n	800cd60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0304 	and.w	r3, r3, #4
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d013      	beq.n	800cd60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f022 0204 	bic.w	r2, r2, #4
 800cd46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	409a      	lsls	r2, r3
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd58:	f043 0201 	orr.w	r2, r3, #1
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd64:	2201      	movs	r2, #1
 800cd66:	409a      	lsls	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d012      	beq.n	800cd96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd82:	2201      	movs	r2, #1
 800cd84:	409a      	lsls	r2, r3
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8e:	f043 0202 	orr.w	r2, r3, #2
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	409a      	lsls	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4013      	ands	r3, r2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d012      	beq.n	800cdcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00b      	beq.n	800cdcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdb8:	2204      	movs	r2, #4
 800cdba:	409a      	lsls	r2, r3
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdc4:	f043 0204 	orr.w	r2, r3, #4
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdd0:	2210      	movs	r2, #16
 800cdd2:	409a      	lsls	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d043      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f003 0308 	and.w	r3, r3, #8
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d03c      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdee:	2210      	movs	r2, #16
 800cdf0:	409a      	lsls	r2, r3
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d018      	beq.n	800ce36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d108      	bne.n	800ce24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d024      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	4798      	blx	r3
 800ce22:	e01f      	b.n	800ce64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d01b      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	4798      	blx	r3
 800ce34:	e016      	b.n	800ce64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d107      	bne.n	800ce54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 0208 	bic.w	r2, r2, #8
 800ce52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce68:	2220      	movs	r2, #32
 800ce6a:	409a      	lsls	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4013      	ands	r3, r2
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 808e 	beq.w	800cf92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0310 	and.w	r3, r3, #16
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 8086 	beq.w	800cf92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	409a      	lsls	r2, r3
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b05      	cmp	r3, #5
 800ce9c:	d136      	bne.n	800cf0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f022 0216 	bic.w	r2, r2, #22
 800ceac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	695a      	ldr	r2, [r3, #20]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d103      	bne.n	800cece <HAL_DMA_IRQHandler+0x1da>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d007      	beq.n	800cede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f022 0208 	bic.w	r2, r2, #8
 800cedc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee2:	223f      	movs	r2, #63	; 0x3f
 800cee4:	409a      	lsls	r2, r3
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d07d      	beq.n	800cffe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	4798      	blx	r3
        }
        return;
 800cf0a:	e078      	b.n	800cffe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d01c      	beq.n	800cf54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d108      	bne.n	800cf3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d030      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	4798      	blx	r3
 800cf38:	e02b      	b.n	800cf92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d027      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
 800cf4a:	e022      	b.n	800cf92 <HAL_DMA_IRQHandler+0x29e>
 800cf4c:	20000000 	.word	0x20000000
 800cf50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10f      	bne.n	800cf82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f022 0210 	bic.w	r2, r2, #16
 800cf70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d032      	beq.n	800d000 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d022      	beq.n	800cfec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2205      	movs	r2, #5
 800cfaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0201 	bic.w	r2, r2, #1
 800cfbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	60bb      	str	r3, [r7, #8]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d307      	bcc.n	800cfda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1f2      	bne.n	800cfbe <HAL_DMA_IRQHandler+0x2ca>
 800cfd8:	e000      	b.n	800cfdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800cfda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d005      	beq.n	800d000 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
 800cffc:	e000      	b.n	800d000 <HAL_DMA_IRQHandler+0x30c>
        return;
 800cffe:	bf00      	nop
    }
  }
}
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop

0800d008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d024:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	2b40      	cmp	r3, #64	; 0x40
 800d034:	d108      	bne.n	800d048 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d046:	e007      	b.n	800d058 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	60da      	str	r2, [r3, #12]
}
 800d058:	bf00      	nop
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	3b10      	subs	r3, #16
 800d074:	4a14      	ldr	r2, [pc, #80]	; (800d0c8 <DMA_CalcBaseAndBitshift+0x64>)
 800d076:	fba2 2303 	umull	r2, r3, r2, r3
 800d07a:	091b      	lsrs	r3, r3, #4
 800d07c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d07e:	4a13      	ldr	r2, [pc, #76]	; (800d0cc <DMA_CalcBaseAndBitshift+0x68>)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4413      	add	r3, r2
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d909      	bls.n	800d0a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d09a:	f023 0303 	bic.w	r3, r3, #3
 800d09e:	1d1a      	adds	r2, r3, #4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	659a      	str	r2, [r3, #88]	; 0x58
 800d0a4:	e007      	b.n	800d0b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d0ae:	f023 0303 	bic.w	r3, r3, #3
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	aaaaaaab 	.word	0xaaaaaaab
 800d0cc:	08012a78 	.word	0x08012a78

0800d0d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d11f      	bne.n	800d12a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d855      	bhi.n	800d19c <DMA_CheckFifoParam+0xcc>
 800d0f0:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <DMA_CheckFifoParam+0x28>)
 800d0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f6:	bf00      	nop
 800d0f8:	0800d109 	.word	0x0800d109
 800d0fc:	0800d11b 	.word	0x0800d11b
 800d100:	0800d109 	.word	0x0800d109
 800d104:	0800d19d 	.word	0x0800d19d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d045      	beq.n	800d1a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d118:	e042      	b.n	800d1a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d122:	d13f      	bne.n	800d1a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d128:	e03c      	b.n	800d1a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d132:	d121      	bne.n	800d178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2b03      	cmp	r3, #3
 800d138:	d836      	bhi.n	800d1a8 <DMA_CheckFifoParam+0xd8>
 800d13a:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <DMA_CheckFifoParam+0x70>)
 800d13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d140:	0800d151 	.word	0x0800d151
 800d144:	0800d157 	.word	0x0800d157
 800d148:	0800d151 	.word	0x0800d151
 800d14c:	0800d169 	.word	0x0800d169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]
      break;
 800d154:	e02f      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d024      	beq.n	800d1ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d166:	e021      	b.n	800d1ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d170:	d11e      	bne.n	800d1b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d176:	e01b      	b.n	800d1b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d902      	bls.n	800d184 <DMA_CheckFifoParam+0xb4>
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d003      	beq.n	800d18a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d182:	e018      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	73fb      	strb	r3, [r7, #15]
      break;
 800d188:	e015      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00e      	beq.n	800d1b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	73fb      	strb	r3, [r7, #15]
      break;
 800d19a:	e00b      	b.n	800d1b4 <DMA_CheckFifoParam+0xe4>
      break;
 800d19c:	bf00      	nop
 800d19e:	e00a      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;
 800d1a0:	bf00      	nop
 800d1a2:	e008      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;
 800d1a4:	bf00      	nop
 800d1a6:	e006      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;
 800d1a8:	bf00      	nop
 800d1aa:	e004      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;
 800d1ac:	bf00      	nop
 800d1ae:	e002      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;   
 800d1b0:	bf00      	nop
 800d1b2:	e000      	b.n	800d1b6 <DMA_CheckFifoParam+0xe6>
      break;
 800d1b4:	bf00      	nop
    }
  } 
  
  return status; 
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800d1ce:	4b4b      	ldr	r3, [pc, #300]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d020      	beq.n	800d21c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800d1da:	4b49      	ldr	r3, [pc, #292]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d107      	bne.n	800d1f4 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800d1e4:	4b46      	ldr	r3, [pc, #280]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800d1ea:	4b45      	ldr	r3, [pc, #276]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f0:	60da      	str	r2, [r3, #12]
 800d1f2:	e00b      	b.n	800d20c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800d1f4:	4b42      	ldr	r3, [pc, #264]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d103      	bne.n	800d206 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800d1fe:	4b40      	ldr	r3, [pc, #256]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	607b      	str	r3, [r7, #4]
 800d204:	e002      	b.n	800d20c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800d206:	4b3e      	ldr	r3, [pc, #248]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800d20c:	f000 f88e 	bl	800d32c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f881 	bl	800d318 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800d216:	4b3a      	ldr	r3, [pc, #232]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d218:	2200      	movs	r2, #0
 800d21a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800d21c:	4b37      	ldr	r3, [pc, #220]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d04a      	beq.n	800d2be <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d228:	4b34      	ldr	r3, [pc, #208]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d22a:	2201      	movs	r2, #1
 800d22c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800d22e:	4b34      	ldr	r3, [pc, #208]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b01      	cmp	r3, #1
 800d236:	d12d      	bne.n	800d294 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	4a30      	ldr	r2, [pc, #192]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d240:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800d242:	4b2f      	ldr	r3, [pc, #188]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d015      	beq.n	800d276 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800d24a:	4b2d      	ldr	r3, [pc, #180]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 f857 	bl	800d304 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800d256:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	4a28      	ldr	r2, [pc, #160]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d25e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800d260:	4b27      	ldr	r3, [pc, #156]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800d266:	4b26      	ldr	r3, [pc, #152]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d268:	7a1b      	ldrb	r3, [r3, #8]
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f8b2 	bl	800d3d8 <FLASH_Erase_Sector>
 800d274:	e023      	b.n	800d2be <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800d276:	f04f 33ff 	mov.w	r3, #4294967295
 800d27a:	607b      	str	r3, [r7, #4]
 800d27c:	4a20      	ldr	r2, [pc, #128]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800d282:	4b1f      	ldr	r3, [pc, #124]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d284:	2200      	movs	r2, #0
 800d286:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800d288:	f000 f8ee 	bl	800d468 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f839 	bl	800d304 <HAL_FLASH_EndOfOperationCallback>
 800d292:	e014      	b.n	800d2be <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800d294:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d107      	bne.n	800d2ae <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800d29e:	f000 f8e3 	bl	800d468 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800d2a2:	4b17      	ldr	r3, [pc, #92]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f82c 	bl	800d304 <HAL_FLASH_EndOfOperationCallback>
 800d2ac:	e004      	b.n	800d2b8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800d2ae:	4b14      	ldr	r3, [pc, #80]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f826 	bl	800d304 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800d2b8:	4b11      	ldr	r3, [pc, #68]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800d2be:	4b10      	ldr	r3, [pc, #64]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d114      	bne.n	800d2f2 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	4a0b      	ldr	r2, [pc, #44]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2d2:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800d2d4:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	4a08      	ldr	r2, [pc, #32]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2de:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800d2e0:	4b06      	ldr	r3, [pc, #24]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	4a05      	ldr	r2, [pc, #20]	; (800d2fc <HAL_FLASH_IRQHandler+0x138>)
 800d2e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d2ea:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800d2ec:	4b04      	ldr	r3, [pc, #16]	; (800d300 <HAL_FLASH_IRQHandler+0x13c>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	761a      	strb	r2, [r3, #24]
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	40023c00 	.word	0x40023c00
 800d300:	20000798 	.word	0x20000798

0800d304 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d330:	4b27      	ldr	r3, [pc, #156]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d008      	beq.n	800d34e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d33c:	4b25      	ldr	r3, [pc, #148]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	f043 0310 	orr.w	r3, r3, #16
 800d344:	4a23      	ldr	r2, [pc, #140]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d346:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800d348:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d34a:	2210      	movs	r2, #16
 800d34c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800d34e:	4b20      	ldr	r3, [pc, #128]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d008      	beq.n	800d36c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d35a:	4b1e      	ldr	r3, [pc, #120]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	f043 0308 	orr.w	r3, r3, #8
 800d362:	4a1c      	ldr	r2, [pc, #112]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d364:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800d366:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d368:	2220      	movs	r2, #32
 800d36a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800d36c:	4b18      	ldr	r3, [pc, #96]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d374:	2b00      	cmp	r3, #0
 800d376:	d008      	beq.n	800d38a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800d378:	4b16      	ldr	r3, [pc, #88]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d37a:	69db      	ldr	r3, [r3, #28]
 800d37c:	f043 0304 	orr.w	r3, r3, #4
 800d380:	4a14      	ldr	r2, [pc, #80]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d382:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d386:	2240      	movs	r2, #64	; 0x40
 800d388:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800d38a:	4b11      	ldr	r3, [pc, #68]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d392:	2b00      	cmp	r3, #0
 800d394:	d008      	beq.n	800d3a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	f043 0302 	orr.w	r3, r3, #2
 800d39e:	4a0d      	ldr	r2, [pc, #52]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d3a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800d3a2:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d3a4:	2280      	movs	r2, #128	; 0x80
 800d3a6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f003 0302 	and.w	r3, r3, #2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d008      	beq.n	800d3c6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800d3b4:	4b07      	ldr	r3, [pc, #28]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	f043 0320 	orr.w	r3, r3, #32
 800d3bc:	4a05      	ldr	r2, [pc, #20]	; (800d3d4 <FLASH_SetErrorCode+0xa8>)
 800d3be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800d3c0:	4b03      	ldr	r3, [pc, #12]	; (800d3d0 <FLASH_SetErrorCode+0xa4>)
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	60da      	str	r2, [r3, #12]
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	40023c00 	.word	0x40023c00
 800d3d4:	20000798 	.word	0x20000798

0800d3d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800d3e8:	78fb      	ldrb	r3, [r7, #3]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d102      	bne.n	800d3f4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	60fb      	str	r3, [r7, #12]
 800d3f2:	e010      	b.n	800d416 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d103      	bne.n	800d402 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800d3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	e009      	b.n	800d416 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d103      	bne.n	800d410 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800d408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	e002      	b.n	800d416 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800d410:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d414:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	4a12      	ldr	r2, [pc, #72]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d420:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800d422:	4b10      	ldr	r3, [pc, #64]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d424:	691a      	ldr	r2, [r3, #16]
 800d426:	490f      	ldr	r1, [pc, #60]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	4a0c      	ldr	r2, [pc, #48]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d434:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800d43a:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d43c:	691a      	ldr	r2, [r3, #16]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	4313      	orrs	r3, r2
 800d444:	4a07      	ldr	r2, [pc, #28]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d446:	f043 0302 	orr.w	r3, r3, #2
 800d44a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	4a04      	ldr	r2, [pc, #16]	; (800d464 <FLASH_Erase_Sector+0x8c>)
 800d452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d456:	6113      	str	r3, [r2, #16]
}
 800d458:	bf00      	nop
 800d45a:	3714      	adds	r7, #20
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	40023c00 	.word	0x40023c00

0800d468 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d468:	b480      	push	{r7}
 800d46a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800d46c:	4b20      	ldr	r3, [pc, #128]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d474:	2b00      	cmp	r3, #0
 800d476:	d017      	beq.n	800d4a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d478:	4b1d      	ldr	r3, [pc, #116]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a1c      	ldr	r2, [pc, #112]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d47e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d482:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d484:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a19      	ldr	r2, [pc, #100]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d48a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	4b17      	ldr	r3, [pc, #92]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a16      	ldr	r2, [pc, #88]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d49a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d49c:	4b14      	ldr	r3, [pc, #80]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a13      	ldr	r2, [pc, #76]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4a6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800d4a8:	4b11      	ldr	r3, [pc, #68]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d017      	beq.n	800d4e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d4b4:	4b0e      	ldr	r3, [pc, #56]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a0d      	ldr	r2, [pc, #52]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a0a      	ldr	r2, [pc, #40]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	4b08      	ldr	r3, [pc, #32]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a07      	ldr	r2, [pc, #28]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d4d8:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a04      	ldr	r2, [pc, #16]	; (800d4f0 <FLASH_FlushCaches+0x88>)
 800d4de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d4e2:	6013      	str	r3, [r2, #0]
  }
}
 800d4e4:	bf00      	nop
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	40023c00 	.word	0x40023c00

0800d4f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b089      	sub	sp, #36	; 0x24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d502:	2300      	movs	r3, #0
 800d504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d506:	2300      	movs	r3, #0
 800d508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	61fb      	str	r3, [r7, #28]
 800d50e:	e16b      	b.n	800d7e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d510:	2201      	movs	r2, #1
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	fa02 f303 	lsl.w	r3, r2, r3
 800d518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	4013      	ands	r3, r2
 800d522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	429a      	cmp	r2, r3
 800d52a:	f040 815a 	bne.w	800d7e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d00b      	beq.n	800d54e <HAL_GPIO_Init+0x5a>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d007      	beq.n	800d54e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d542:	2b11      	cmp	r3, #17
 800d544:	d003      	beq.n	800d54e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b12      	cmp	r3, #18
 800d54c:	d130      	bne.n	800d5b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	2203      	movs	r2, #3
 800d55a:	fa02 f303 	lsl.w	r3, r2, r3
 800d55e:	43db      	mvns	r3, r3
 800d560:	69ba      	ldr	r2, [r7, #24]
 800d562:	4013      	ands	r3, r2
 800d564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	005b      	lsls	r3, r3, #1
 800d56e:	fa02 f303 	lsl.w	r3, r2, r3
 800d572:	69ba      	ldr	r2, [r7, #24]
 800d574:	4313      	orrs	r3, r2
 800d576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d584:	2201      	movs	r2, #1
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	43db      	mvns	r3, r3
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	4013      	ands	r3, r2
 800d592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	091b      	lsrs	r3, r3, #4
 800d59a:	f003 0201 	and.w	r2, r3, #1
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	2203      	movs	r2, #3
 800d5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c0:	43db      	mvns	r3, r3
 800d5c2:	69ba      	ldr	r2, [r7, #24]
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	689a      	ldr	r2, [r3, #8]
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69ba      	ldr	r2, [r7, #24]
 800d5de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d003      	beq.n	800d5f0 <HAL_GPIO_Init+0xfc>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	2b12      	cmp	r3, #18
 800d5ee:	d123      	bne.n	800d638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	08da      	lsrs	r2, r3, #3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	3208      	adds	r2, #8
 800d5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	f003 0307 	and.w	r3, r3, #7
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	220f      	movs	r2, #15
 800d608:	fa02 f303 	lsl.w	r3, r2, r3
 800d60c:	43db      	mvns	r3, r3
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	4013      	ands	r3, r2
 800d612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	691a      	ldr	r2, [r3, #16]
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	f003 0307 	and.w	r3, r3, #7
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	fa02 f303 	lsl.w	r3, r2, r3
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	4313      	orrs	r3, r2
 800d628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	08da      	lsrs	r2, r3, #3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	3208      	adds	r2, #8
 800d632:	69b9      	ldr	r1, [r7, #24]
 800d634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	2203      	movs	r2, #3
 800d644:	fa02 f303 	lsl.w	r3, r2, r3
 800d648:	43db      	mvns	r3, r3
 800d64a:	69ba      	ldr	r2, [r7, #24]
 800d64c:	4013      	ands	r3, r2
 800d64e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	f003 0203 	and.w	r2, r3, #3
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	fa02 f303 	lsl.w	r3, r2, r3
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	4313      	orrs	r3, r2
 800d664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	69ba      	ldr	r2, [r7, #24]
 800d66a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 80b4 	beq.w	800d7e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d67a:	2300      	movs	r3, #0
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	4b5f      	ldr	r3, [pc, #380]	; (800d7fc <HAL_GPIO_Init+0x308>)
 800d680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d682:	4a5e      	ldr	r2, [pc, #376]	; (800d7fc <HAL_GPIO_Init+0x308>)
 800d684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d688:	6453      	str	r3, [r2, #68]	; 0x44
 800d68a:	4b5c      	ldr	r3, [pc, #368]	; (800d7fc <HAL_GPIO_Init+0x308>)
 800d68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d68e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d696:	4a5a      	ldr	r2, [pc, #360]	; (800d800 <HAL_GPIO_Init+0x30c>)
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	089b      	lsrs	r3, r3, #2
 800d69c:	3302      	adds	r3, #2
 800d69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	220f      	movs	r2, #15
 800d6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b2:	43db      	mvns	r3, r3
 800d6b4:	69ba      	ldr	r2, [r7, #24]
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a51      	ldr	r2, [pc, #324]	; (800d804 <HAL_GPIO_Init+0x310>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d02b      	beq.n	800d71a <HAL_GPIO_Init+0x226>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a50      	ldr	r2, [pc, #320]	; (800d808 <HAL_GPIO_Init+0x314>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d025      	beq.n	800d716 <HAL_GPIO_Init+0x222>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a4f      	ldr	r2, [pc, #316]	; (800d80c <HAL_GPIO_Init+0x318>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d01f      	beq.n	800d712 <HAL_GPIO_Init+0x21e>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a4e      	ldr	r2, [pc, #312]	; (800d810 <HAL_GPIO_Init+0x31c>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d019      	beq.n	800d70e <HAL_GPIO_Init+0x21a>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a4d      	ldr	r2, [pc, #308]	; (800d814 <HAL_GPIO_Init+0x320>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d013      	beq.n	800d70a <HAL_GPIO_Init+0x216>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a4c      	ldr	r2, [pc, #304]	; (800d818 <HAL_GPIO_Init+0x324>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d00d      	beq.n	800d706 <HAL_GPIO_Init+0x212>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a4b      	ldr	r2, [pc, #300]	; (800d81c <HAL_GPIO_Init+0x328>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d007      	beq.n	800d702 <HAL_GPIO_Init+0x20e>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a4a      	ldr	r2, [pc, #296]	; (800d820 <HAL_GPIO_Init+0x32c>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d101      	bne.n	800d6fe <HAL_GPIO_Init+0x20a>
 800d6fa:	2307      	movs	r3, #7
 800d6fc:	e00e      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d6fe:	2308      	movs	r3, #8
 800d700:	e00c      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d702:	2306      	movs	r3, #6
 800d704:	e00a      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d706:	2305      	movs	r3, #5
 800d708:	e008      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d70a:	2304      	movs	r3, #4
 800d70c:	e006      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d70e:	2303      	movs	r3, #3
 800d710:	e004      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d712:	2302      	movs	r3, #2
 800d714:	e002      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <HAL_GPIO_Init+0x228>
 800d71a:	2300      	movs	r3, #0
 800d71c:	69fa      	ldr	r2, [r7, #28]
 800d71e:	f002 0203 	and.w	r2, r2, #3
 800d722:	0092      	lsls	r2, r2, #2
 800d724:	4093      	lsls	r3, r2
 800d726:	69ba      	ldr	r2, [r7, #24]
 800d728:	4313      	orrs	r3, r2
 800d72a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d72c:	4934      	ldr	r1, [pc, #208]	; (800d800 <HAL_GPIO_Init+0x30c>)
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	089b      	lsrs	r3, r3, #2
 800d732:	3302      	adds	r3, #2
 800d734:	69ba      	ldr	r2, [r7, #24]
 800d736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d73a:	4b3a      	ldr	r3, [pc, #232]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	43db      	mvns	r3, r3
 800d744:	69ba      	ldr	r2, [r7, #24]
 800d746:	4013      	ands	r3, r2
 800d748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d756:	69ba      	ldr	r2, [r7, #24]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	4313      	orrs	r3, r2
 800d75c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d75e:	4a31      	ldr	r2, [pc, #196]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d764:	4b2f      	ldr	r3, [pc, #188]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	43db      	mvns	r3, r3
 800d76e:	69ba      	ldr	r2, [r7, #24]
 800d770:	4013      	ands	r3, r2
 800d772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d780:	69ba      	ldr	r2, [r7, #24]
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	4313      	orrs	r3, r2
 800d786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d788:	4a26      	ldr	r2, [pc, #152]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d78e:	4b25      	ldr	r3, [pc, #148]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	43db      	mvns	r3, r3
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	4013      	ands	r3, r2
 800d79c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d7b2:	4a1c      	ldr	r2, [pc, #112]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d7b8:	4b1a      	ldr	r3, [pc, #104]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	69ba      	ldr	r2, [r7, #24]
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d003      	beq.n	800d7dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d7d4:	69ba      	ldr	r2, [r7, #24]
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d7dc:	4a11      	ldr	r2, [pc, #68]	; (800d824 <HAL_GPIO_Init+0x330>)
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	61fb      	str	r3, [r7, #28]
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b0f      	cmp	r3, #15
 800d7ec:	f67f ae90 	bls.w	800d510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d7f0:	bf00      	nop
 800d7f2:	3724      	adds	r7, #36	; 0x24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	40023800 	.word	0x40023800
 800d800:	40013800 	.word	0x40013800
 800d804:	40020000 	.word	0x40020000
 800d808:	40020400 	.word	0x40020400
 800d80c:	40020800 	.word	0x40020800
 800d810:	40020c00 	.word	0x40020c00
 800d814:	40021000 	.word	0x40021000
 800d818:	40021400 	.word	0x40021400
 800d81c:	40021800 	.word	0x40021800
 800d820:	40021c00 	.word	0x40021c00
 800d824:	40013c00 	.word	0x40013c00

0800d828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	807b      	strh	r3, [r7, #2]
 800d834:	4613      	mov	r3, r2
 800d836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d838:	787b      	ldrb	r3, [r7, #1]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d83e:	887a      	ldrh	r2, [r7, #2]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d844:	e003      	b.n	800d84e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	041a      	lsls	r2, r3, #16
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	619a      	str	r2, [r3, #24]
}
 800d84e:	bf00      	nop
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
	...

0800d85c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d101      	bne.n	800d86e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e25b      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b00      	cmp	r3, #0
 800d878:	d075      	beq.n	800d966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d87a:	4ba3      	ldr	r3, [pc, #652]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	f003 030c 	and.w	r3, r3, #12
 800d882:	2b04      	cmp	r3, #4
 800d884:	d00c      	beq.n	800d8a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d886:	4ba0      	ldr	r3, [pc, #640]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d88e:	2b08      	cmp	r3, #8
 800d890:	d112      	bne.n	800d8b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d892:	4b9d      	ldr	r3, [pc, #628]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d89a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d89e:	d10b      	bne.n	800d8b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8a0:	4b99      	ldr	r3, [pc, #612]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d05b      	beq.n	800d964 <HAL_RCC_OscConfig+0x108>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d157      	bne.n	800d964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e236      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c0:	d106      	bne.n	800d8d0 <HAL_RCC_OscConfig+0x74>
 800d8c2:	4b91      	ldr	r3, [pc, #580]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a90      	ldr	r2, [pc, #576]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	e01d      	b.n	800d90c <HAL_RCC_OscConfig+0xb0>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8d8:	d10c      	bne.n	800d8f4 <HAL_RCC_OscConfig+0x98>
 800d8da:	4b8b      	ldr	r3, [pc, #556]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a8a      	ldr	r2, [pc, #552]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	4b88      	ldr	r3, [pc, #544]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a87      	ldr	r2, [pc, #540]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	e00b      	b.n	800d90c <HAL_RCC_OscConfig+0xb0>
 800d8f4:	4b84      	ldr	r3, [pc, #528]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a83      	ldr	r2, [pc, #524]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d8fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	4b81      	ldr	r3, [pc, #516]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a80      	ldr	r2, [pc, #512]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d90a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d013      	beq.n	800d93c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d914:	f7fe f9a6 	bl	800bc64 <HAL_GetTick>
 800d918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d91a:	e008      	b.n	800d92e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d91c:	f7fe f9a2 	bl	800bc64 <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b64      	cmp	r3, #100	; 0x64
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e1fb      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d92e:	4b76      	ldr	r3, [pc, #472]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0f0      	beq.n	800d91c <HAL_RCC_OscConfig+0xc0>
 800d93a:	e014      	b.n	800d966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d93c:	f7fe f992 	bl	800bc64 <HAL_GetTick>
 800d940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d942:	e008      	b.n	800d956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d944:	f7fe f98e 	bl	800bc64 <HAL_GetTick>
 800d948:	4602      	mov	r2, r0
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	2b64      	cmp	r3, #100	; 0x64
 800d950:	d901      	bls.n	800d956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d952:	2303      	movs	r3, #3
 800d954:	e1e7      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d956:	4b6c      	ldr	r3, [pc, #432]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1f0      	bne.n	800d944 <HAL_RCC_OscConfig+0xe8>
 800d962:	e000      	b.n	800d966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d063      	beq.n	800da3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d972:	4b65      	ldr	r3, [pc, #404]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	f003 030c 	and.w	r3, r3, #12
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00b      	beq.n	800d996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d97e:	4b62      	ldr	r3, [pc, #392]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d986:	2b08      	cmp	r3, #8
 800d988:	d11c      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d98a:	4b5f      	ldr	r3, [pc, #380]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d992:	2b00      	cmp	r3, #0
 800d994:	d116      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d996:	4b5c      	ldr	r3, [pc, #368]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0302 	and.w	r3, r3, #2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d005      	beq.n	800d9ae <HAL_RCC_OscConfig+0x152>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d001      	beq.n	800d9ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e1bb      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9ae:	4b56      	ldr	r3, [pc, #344]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	4952      	ldr	r1, [pc, #328]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9c2:	e03a      	b.n	800da3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d020      	beq.n	800da0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d9cc:	4b4f      	ldr	r3, [pc, #316]	; (800db0c <HAL_RCC_OscConfig+0x2b0>)
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9d2:	f7fe f947 	bl	800bc64 <HAL_GetTick>
 800d9d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9d8:	e008      	b.n	800d9ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9da:	f7fe f943 	bl	800bc64 <HAL_GetTick>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d901      	bls.n	800d9ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e19c      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9ec:	4b46      	ldr	r3, [pc, #280]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d0f0      	beq.n	800d9da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9f8:	4b43      	ldr	r3, [pc, #268]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	4940      	ldr	r1, [pc, #256]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800da08:	4313      	orrs	r3, r2
 800da0a:	600b      	str	r3, [r1, #0]
 800da0c:	e015      	b.n	800da3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da0e:	4b3f      	ldr	r3, [pc, #252]	; (800db0c <HAL_RCC_OscConfig+0x2b0>)
 800da10:	2200      	movs	r2, #0
 800da12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da14:	f7fe f926 	bl	800bc64 <HAL_GetTick>
 800da18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da1a:	e008      	b.n	800da2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da1c:	f7fe f922 	bl	800bc64 <HAL_GetTick>
 800da20:	4602      	mov	r2, r0
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	2b02      	cmp	r3, #2
 800da28:	d901      	bls.n	800da2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e17b      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da2e:	4b36      	ldr	r3, [pc, #216]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1f0      	bne.n	800da1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 0308 	and.w	r3, r3, #8
 800da42:	2b00      	cmp	r3, #0
 800da44:	d030      	beq.n	800daa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da4e:	4b30      	ldr	r3, [pc, #192]	; (800db10 <HAL_RCC_OscConfig+0x2b4>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da54:	f7fe f906 	bl	800bc64 <HAL_GetTick>
 800da58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da5a:	e008      	b.n	800da6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da5c:	f7fe f902 	bl	800bc64 <HAL_GetTick>
 800da60:	4602      	mov	r2, r0
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	2b02      	cmp	r3, #2
 800da68:	d901      	bls.n	800da6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e15b      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da6e:	4b26      	ldr	r3, [pc, #152]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800da70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da72:	f003 0302 	and.w	r3, r3, #2
 800da76:	2b00      	cmp	r3, #0
 800da78:	d0f0      	beq.n	800da5c <HAL_RCC_OscConfig+0x200>
 800da7a:	e015      	b.n	800daa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <HAL_RCC_OscConfig+0x2b4>)
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da82:	f7fe f8ef 	bl	800bc64 <HAL_GetTick>
 800da86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da88:	e008      	b.n	800da9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da8a:	f7fe f8eb 	bl	800bc64 <HAL_GetTick>
 800da8e:	4602      	mov	r2, r0
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	2b02      	cmp	r3, #2
 800da96:	d901      	bls.n	800da9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	e144      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da9c:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800da9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1f0      	bne.n	800da8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 0304 	and.w	r3, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 80a0 	beq.w	800dbf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800daba:	4b13      	ldr	r3, [pc, #76]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800dabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dabe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10f      	bne.n	800dae6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dac6:	2300      	movs	r3, #0
 800dac8:	60bb      	str	r3, [r7, #8]
 800daca:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800dacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dace:	4a0e      	ldr	r2, [pc, #56]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800dad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dad4:	6413      	str	r3, [r2, #64]	; 0x40
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <HAL_RCC_OscConfig+0x2ac>)
 800dad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dade:	60bb      	str	r3, [r7, #8]
 800dae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dae2:	2301      	movs	r3, #1
 800dae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <HAL_RCC_OscConfig+0x2b8>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d121      	bne.n	800db36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800daf2:	4b08      	ldr	r3, [pc, #32]	; (800db14 <HAL_RCC_OscConfig+0x2b8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a07      	ldr	r2, [pc, #28]	; (800db14 <HAL_RCC_OscConfig+0x2b8>)
 800daf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dafc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dafe:	f7fe f8b1 	bl	800bc64 <HAL_GetTick>
 800db02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db04:	e011      	b.n	800db2a <HAL_RCC_OscConfig+0x2ce>
 800db06:	bf00      	nop
 800db08:	40023800 	.word	0x40023800
 800db0c:	42470000 	.word	0x42470000
 800db10:	42470e80 	.word	0x42470e80
 800db14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db18:	f7fe f8a4 	bl	800bc64 <HAL_GetTick>
 800db1c:	4602      	mov	r2, r0
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	2b02      	cmp	r3, #2
 800db24:	d901      	bls.n	800db2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e0fd      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db2a:	4b81      	ldr	r3, [pc, #516]	; (800dd30 <HAL_RCC_OscConfig+0x4d4>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0f0      	beq.n	800db18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d106      	bne.n	800db4c <HAL_RCC_OscConfig+0x2f0>
 800db3e:	4b7d      	ldr	r3, [pc, #500]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db42:	4a7c      	ldr	r2, [pc, #496]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db44:	f043 0301 	orr.w	r3, r3, #1
 800db48:	6713      	str	r3, [r2, #112]	; 0x70
 800db4a:	e01c      	b.n	800db86 <HAL_RCC_OscConfig+0x32a>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	2b05      	cmp	r3, #5
 800db52:	d10c      	bne.n	800db6e <HAL_RCC_OscConfig+0x312>
 800db54:	4b77      	ldr	r3, [pc, #476]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db58:	4a76      	ldr	r2, [pc, #472]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db5a:	f043 0304 	orr.w	r3, r3, #4
 800db5e:	6713      	str	r3, [r2, #112]	; 0x70
 800db60:	4b74      	ldr	r3, [pc, #464]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db64:	4a73      	ldr	r2, [pc, #460]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db66:	f043 0301 	orr.w	r3, r3, #1
 800db6a:	6713      	str	r3, [r2, #112]	; 0x70
 800db6c:	e00b      	b.n	800db86 <HAL_RCC_OscConfig+0x32a>
 800db6e:	4b71      	ldr	r3, [pc, #452]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db72:	4a70      	ldr	r2, [pc, #448]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db74:	f023 0301 	bic.w	r3, r3, #1
 800db78:	6713      	str	r3, [r2, #112]	; 0x70
 800db7a:	4b6e      	ldr	r3, [pc, #440]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7e:	4a6d      	ldr	r2, [pc, #436]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800db80:	f023 0304 	bic.w	r3, r3, #4
 800db84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d015      	beq.n	800dbba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db8e:	f7fe f869 	bl	800bc64 <HAL_GetTick>
 800db92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db94:	e00a      	b.n	800dbac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db96:	f7fe f865 	bl	800bc64 <HAL_GetTick>
 800db9a:	4602      	mov	r2, r0
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d901      	bls.n	800dbac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e0bc      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbac:	4b61      	ldr	r3, [pc, #388]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb0:	f003 0302 	and.w	r3, r3, #2
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d0ee      	beq.n	800db96 <HAL_RCC_OscConfig+0x33a>
 800dbb8:	e014      	b.n	800dbe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dbba:	f7fe f853 	bl	800bc64 <HAL_GetTick>
 800dbbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbc0:	e00a      	b.n	800dbd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dbc2:	f7fe f84f 	bl	800bc64 <HAL_GetTick>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d901      	bls.n	800dbd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	e0a6      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbd8:	4b56      	ldr	r3, [pc, #344]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1ee      	bne.n	800dbc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d105      	bne.n	800dbf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbea:	4b52      	ldr	r3, [pc, #328]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbee:	4a51      	ldr	r2, [pc, #324]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dbf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 8092 	beq.w	800dd24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dc00:	4b4c      	ldr	r3, [pc, #304]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f003 030c 	and.w	r3, r3, #12
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	d05c      	beq.n	800dcc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d141      	bne.n	800dc98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc14:	4b48      	ldr	r3, [pc, #288]	; (800dd38 <HAL_RCC_OscConfig+0x4dc>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc1a:	f7fe f823 	bl	800bc64 <HAL_GetTick>
 800dc1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc20:	e008      	b.n	800dc34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc22:	f7fe f81f 	bl	800bc64 <HAL_GetTick>
 800dc26:	4602      	mov	r2, r0
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d901      	bls.n	800dc34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	e078      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc34:	4b3f      	ldr	r3, [pc, #252]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1f0      	bne.n	800dc22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	69da      	ldr	r2, [r3, #28]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	431a      	orrs	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	019b      	lsls	r3, r3, #6
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc56:	085b      	lsrs	r3, r3, #1
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	041b      	lsls	r3, r3, #16
 800dc5c:	431a      	orrs	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc62:	061b      	lsls	r3, r3, #24
 800dc64:	4933      	ldr	r1, [pc, #204]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dc66:	4313      	orrs	r3, r2
 800dc68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc6a:	4b33      	ldr	r3, [pc, #204]	; (800dd38 <HAL_RCC_OscConfig+0x4dc>)
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc70:	f7fd fff8 	bl	800bc64 <HAL_GetTick>
 800dc74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc76:	e008      	b.n	800dc8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc78:	f7fd fff4 	bl	800bc64 <HAL_GetTick>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d901      	bls.n	800dc8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e04d      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc8a:	4b2a      	ldr	r3, [pc, #168]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d0f0      	beq.n	800dc78 <HAL_RCC_OscConfig+0x41c>
 800dc96:	e045      	b.n	800dd24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc98:	4b27      	ldr	r3, [pc, #156]	; (800dd38 <HAL_RCC_OscConfig+0x4dc>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc9e:	f7fd ffe1 	bl	800bc64 <HAL_GetTick>
 800dca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dca4:	e008      	b.n	800dcb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dca6:	f7fd ffdd 	bl	800bc64 <HAL_GetTick>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d901      	bls.n	800dcb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	e036      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcb8:	4b1e      	ldr	r3, [pc, #120]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1f0      	bne.n	800dca6 <HAL_RCC_OscConfig+0x44a>
 800dcc4:	e02e      	b.n	800dd24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d101      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e029      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dcd2:	4b18      	ldr	r3, [pc, #96]	; (800dd34 <HAL_RCC_OscConfig+0x4d8>)
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	69db      	ldr	r3, [r3, #28]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d11c      	bne.n	800dd20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d115      	bne.n	800dd20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d10d      	bne.n	800dd20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d106      	bne.n	800dd20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d001      	beq.n	800dd24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e000      	b.n	800dd26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	40007000 	.word	0x40007000
 800dd34:	40023800 	.word	0x40023800
 800dd38:	42470060 	.word	0x42470060

0800dd3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e0cc      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd50:	4b68      	ldr	r3, [pc, #416]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f003 030f 	and.w	r3, r3, #15
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d90c      	bls.n	800dd78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd5e:	4b65      	ldr	r3, [pc, #404]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	b2d2      	uxtb	r2, r2
 800dd64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd66:	4b63      	ldr	r3, [pc, #396]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 030f 	and.w	r3, r3, #15
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d001      	beq.n	800dd78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e0b8      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d020      	beq.n	800ddc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd90:	4b59      	ldr	r3, [pc, #356]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	4a58      	ldr	r2, [pc, #352]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800dd96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dd9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0308 	and.w	r3, r3, #8
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d005      	beq.n	800ddb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dda8:	4b53      	ldr	r3, [pc, #332]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	4a52      	ldr	r2, [pc, #328]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800ddae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ddb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddb4:	4b50      	ldr	r3, [pc, #320]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	494d      	ldr	r1, [pc, #308]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d044      	beq.n	800de5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d107      	bne.n	800ddea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddda:	4b47      	ldr	r3, [pc, #284]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d119      	bne.n	800de1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	e07f      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d003      	beq.n	800ddfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddf6:	2b03      	cmp	r3, #3
 800ddf8:	d107      	bne.n	800de0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddfa:	4b3f      	ldr	r3, [pc, #252]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d109      	bne.n	800de1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e06f      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de0a:	4b3b      	ldr	r3, [pc, #236]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	e067      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800de1a:	4b37      	ldr	r3, [pc, #220]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	f023 0203 	bic.w	r2, r3, #3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	4934      	ldr	r1, [pc, #208]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de28:	4313      	orrs	r3, r2
 800de2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800de2c:	f7fd ff1a 	bl	800bc64 <HAL_GetTick>
 800de30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de32:	e00a      	b.n	800de4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de34:	f7fd ff16 	bl	800bc64 <HAL_GetTick>
 800de38:	4602      	mov	r2, r0
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de42:	4293      	cmp	r3, r2
 800de44:	d901      	bls.n	800de4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800de46:	2303      	movs	r3, #3
 800de48:	e04f      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de4a:	4b2b      	ldr	r3, [pc, #172]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f003 020c 	and.w	r2, r3, #12
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	429a      	cmp	r2, r3
 800de5a:	d1eb      	bne.n	800de34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800de5c:	4b25      	ldr	r3, [pc, #148]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 030f 	and.w	r3, r3, #15
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d20c      	bcs.n	800de84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de6a:	4b22      	ldr	r3, [pc, #136]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de72:	4b20      	ldr	r3, [pc, #128]	; (800def4 <HAL_RCC_ClockConfig+0x1b8>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 030f 	and.w	r3, r3, #15
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d001      	beq.n	800de84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	e032      	b.n	800deea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d008      	beq.n	800dea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de90:	4b19      	ldr	r3, [pc, #100]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	4916      	ldr	r1, [pc, #88]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 0308 	and.w	r3, r3, #8
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800deae:	4b12      	ldr	r3, [pc, #72]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	490e      	ldr	r1, [pc, #56]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800debe:	4313      	orrs	r3, r2
 800dec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dec2:	f000 f821 	bl	800df08 <HAL_RCC_GetSysClockFreq>
 800dec6:	4601      	mov	r1, r0
 800dec8:	4b0b      	ldr	r3, [pc, #44]	; (800def8 <HAL_RCC_ClockConfig+0x1bc>)
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	091b      	lsrs	r3, r3, #4
 800dece:	f003 030f 	and.w	r3, r3, #15
 800ded2:	4a0a      	ldr	r2, [pc, #40]	; (800defc <HAL_RCC_ClockConfig+0x1c0>)
 800ded4:	5cd3      	ldrb	r3, [r2, r3]
 800ded6:	fa21 f303 	lsr.w	r3, r1, r3
 800deda:	4a09      	ldr	r2, [pc, #36]	; (800df00 <HAL_RCC_ClockConfig+0x1c4>)
 800dedc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <HAL_RCC_ClockConfig+0x1c8>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fe7a 	bl	800bbdc <HAL_InitTick>

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	40023c00 	.word	0x40023c00
 800def8:	40023800 	.word	0x40023800
 800defc:	08012a60 	.word	0x08012a60
 800df00:	20000000 	.word	0x20000000
 800df04:	20000004 	.word	0x20000004

0800df08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	607b      	str	r3, [r7, #4]
 800df12:	2300      	movs	r3, #0
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	2300      	movs	r3, #0
 800df18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df1e:	4b63      	ldr	r3, [pc, #396]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f003 030c 	and.w	r3, r3, #12
 800df26:	2b04      	cmp	r3, #4
 800df28:	d007      	beq.n	800df3a <HAL_RCC_GetSysClockFreq+0x32>
 800df2a:	2b08      	cmp	r3, #8
 800df2c:	d008      	beq.n	800df40 <HAL_RCC_GetSysClockFreq+0x38>
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f040 80b4 	bne.w	800e09c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df34:	4b5e      	ldr	r3, [pc, #376]	; (800e0b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800df36:	60bb      	str	r3, [r7, #8]
       break;
 800df38:	e0b3      	b.n	800e0a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df3a:	4b5e      	ldr	r3, [pc, #376]	; (800e0b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800df3c:	60bb      	str	r3, [r7, #8]
      break;
 800df3e:	e0b0      	b.n	800e0a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df40:	4b5a      	ldr	r3, [pc, #360]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df4a:	4b58      	ldr	r3, [pc, #352]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d04a      	beq.n	800dfec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df56:	4b55      	ldr	r3, [pc, #340]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	099b      	lsrs	r3, r3, #6
 800df5c:	f04f 0400 	mov.w	r4, #0
 800df60:	f240 11ff 	movw	r1, #511	; 0x1ff
 800df64:	f04f 0200 	mov.w	r2, #0
 800df68:	ea03 0501 	and.w	r5, r3, r1
 800df6c:	ea04 0602 	and.w	r6, r4, r2
 800df70:	4629      	mov	r1, r5
 800df72:	4632      	mov	r2, r6
 800df74:	f04f 0300 	mov.w	r3, #0
 800df78:	f04f 0400 	mov.w	r4, #0
 800df7c:	0154      	lsls	r4, r2, #5
 800df7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800df82:	014b      	lsls	r3, r1, #5
 800df84:	4619      	mov	r1, r3
 800df86:	4622      	mov	r2, r4
 800df88:	1b49      	subs	r1, r1, r5
 800df8a:	eb62 0206 	sbc.w	r2, r2, r6
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	f04f 0400 	mov.w	r4, #0
 800df96:	0194      	lsls	r4, r2, #6
 800df98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df9c:	018b      	lsls	r3, r1, #6
 800df9e:	1a5b      	subs	r3, r3, r1
 800dfa0:	eb64 0402 	sbc.w	r4, r4, r2
 800dfa4:	f04f 0100 	mov.w	r1, #0
 800dfa8:	f04f 0200 	mov.w	r2, #0
 800dfac:	00e2      	lsls	r2, r4, #3
 800dfae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dfb2:	00d9      	lsls	r1, r3, #3
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4614      	mov	r4, r2
 800dfb8:	195b      	adds	r3, r3, r5
 800dfba:	eb44 0406 	adc.w	r4, r4, r6
 800dfbe:	f04f 0100 	mov.w	r1, #0
 800dfc2:	f04f 0200 	mov.w	r2, #0
 800dfc6:	0262      	lsls	r2, r4, #9
 800dfc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dfcc:	0259      	lsls	r1, r3, #9
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f04f 0400 	mov.w	r4, #0
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4623      	mov	r3, r4
 800dfe0:	f7fa fd6a 	bl	8008ab8 <__aeabi_uldivmod>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	e049      	b.n	800e080 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dfec:	4b2f      	ldr	r3, [pc, #188]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	099b      	lsrs	r3, r3, #6
 800dff2:	f04f 0400 	mov.w	r4, #0
 800dff6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dffa:	f04f 0200 	mov.w	r2, #0
 800dffe:	ea03 0501 	and.w	r5, r3, r1
 800e002:	ea04 0602 	and.w	r6, r4, r2
 800e006:	4629      	mov	r1, r5
 800e008:	4632      	mov	r2, r6
 800e00a:	f04f 0300 	mov.w	r3, #0
 800e00e:	f04f 0400 	mov.w	r4, #0
 800e012:	0154      	lsls	r4, r2, #5
 800e014:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e018:	014b      	lsls	r3, r1, #5
 800e01a:	4619      	mov	r1, r3
 800e01c:	4622      	mov	r2, r4
 800e01e:	1b49      	subs	r1, r1, r5
 800e020:	eb62 0206 	sbc.w	r2, r2, r6
 800e024:	f04f 0300 	mov.w	r3, #0
 800e028:	f04f 0400 	mov.w	r4, #0
 800e02c:	0194      	lsls	r4, r2, #6
 800e02e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e032:	018b      	lsls	r3, r1, #6
 800e034:	1a5b      	subs	r3, r3, r1
 800e036:	eb64 0402 	sbc.w	r4, r4, r2
 800e03a:	f04f 0100 	mov.w	r1, #0
 800e03e:	f04f 0200 	mov.w	r2, #0
 800e042:	00e2      	lsls	r2, r4, #3
 800e044:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e048:	00d9      	lsls	r1, r3, #3
 800e04a:	460b      	mov	r3, r1
 800e04c:	4614      	mov	r4, r2
 800e04e:	195b      	adds	r3, r3, r5
 800e050:	eb44 0406 	adc.w	r4, r4, r6
 800e054:	f04f 0100 	mov.w	r1, #0
 800e058:	f04f 0200 	mov.w	r2, #0
 800e05c:	02a2      	lsls	r2, r4, #10
 800e05e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e062:	0299      	lsls	r1, r3, #10
 800e064:	460b      	mov	r3, r1
 800e066:	4614      	mov	r4, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	4621      	mov	r1, r4
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f04f 0400 	mov.w	r4, #0
 800e072:	461a      	mov	r2, r3
 800e074:	4623      	mov	r3, r4
 800e076:	f7fa fd1f 	bl	8008ab8 <__aeabi_uldivmod>
 800e07a:	4603      	mov	r3, r0
 800e07c:	460c      	mov	r4, r1
 800e07e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	0c1b      	lsrs	r3, r3, #16
 800e086:	f003 0303 	and.w	r3, r3, #3
 800e08a:	3301      	adds	r3, #1
 800e08c:	005b      	lsls	r3, r3, #1
 800e08e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	fbb2 f3f3 	udiv	r3, r2, r3
 800e098:	60bb      	str	r3, [r7, #8]
      break;
 800e09a:	e002      	b.n	800e0a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e09c:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e09e:	60bb      	str	r3, [r7, #8]
      break;
 800e0a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e0a2:	68bb      	ldr	r3, [r7, #8]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3714      	adds	r7, #20
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ac:	40023800 	.word	0x40023800
 800e0b0:	00f42400 	.word	0x00f42400
 800e0b4:	007a1200 	.word	0x007a1200

0800e0b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e0bc:	4b03      	ldr	r3, [pc, #12]	; (800e0cc <HAL_RCC_GetHCLKFreq+0x14>)
 800e0be:	681b      	ldr	r3, [r3, #0]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	20000000 	.word	0x20000000

0800e0d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e0d4:	f7ff fff0 	bl	800e0b8 <HAL_RCC_GetHCLKFreq>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	0a9b      	lsrs	r3, r3, #10
 800e0e0:	f003 0307 	and.w	r3, r3, #7
 800e0e4:	4a03      	ldr	r2, [pc, #12]	; (800e0f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0e6:	5cd3      	ldrb	r3, [r2, r3]
 800e0e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	40023800 	.word	0x40023800
 800e0f4:	08012a70 	.word	0x08012a70

0800e0f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e0fc:	f7ff ffdc 	bl	800e0b8 <HAL_RCC_GetHCLKFreq>
 800e100:	4601      	mov	r1, r0
 800e102:	4b05      	ldr	r3, [pc, #20]	; (800e118 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	0b5b      	lsrs	r3, r3, #13
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	4a03      	ldr	r2, [pc, #12]	; (800e11c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e10e:	5cd3      	ldrb	r3, [r2, r3]
 800e110:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e114:	4618      	mov	r0, r3
 800e116:	bd80      	pop	{r7, pc}
 800e118:	40023800 	.word	0x40023800
 800e11c:	08012a70 	.word	0x08012a70

0800e120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e056      	b.n	800e1e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d106      	bne.n	800e152 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7fc ff9d 	bl	800b08c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2202      	movs	r2, #2
 800e156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e168:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685a      	ldr	r2, [r3, #4]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	431a      	orrs	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	431a      	orrs	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	431a      	orrs	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	431a      	orrs	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e18e:	431a      	orrs	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	69db      	ldr	r3, [r3, #28]
 800e194:	431a      	orrs	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	ea42 0103 	orr.w	r1, r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	0c1b      	lsrs	r3, r3, #16
 800e1b0:	f003 0104 	and.w	r1, r3, #4
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	430a      	orrs	r2, r1
 800e1be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	69da      	ldr	r2, [r3, #28]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e01d      	b.n	800e236 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7fc ff84 	bl	800b11c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2202      	movs	r2, #2
 800e218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3304      	adds	r3, #4
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f000 fe3e 	bl	800eea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e23e:	b480      	push	{r7}
 800e240:	b085      	sub	sp, #20
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68da      	ldr	r2, [r3, #12]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f042 0201 	orr.w	r2, r2, #1
 800e254:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b06      	cmp	r3, #6
 800e266:	d007      	beq.n	800e278 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f042 0201 	orr.w	r2, r2, #1
 800e276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e286:	b480      	push	{r7}
 800e288:	b083      	sub	sp, #12
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68da      	ldr	r2, [r3, #12]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f022 0201 	bic.w	r2, r2, #1
 800e29c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6a1a      	ldr	r2, [r3, #32]
 800e2a4:	f241 1311 	movw	r3, #4369	; 0x1111
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10f      	bne.n	800e2ce <HAL_TIM_Base_Stop_IT+0x48>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	6a1a      	ldr	r2, [r3, #32]
 800e2b4:	f240 4344 	movw	r3, #1092	; 0x444
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d107      	bne.n	800e2ce <HAL_TIM_Base_Stop_IT+0x48>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 0201 	bic.w	r2, r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e01d      	b.n	800e32a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f815 	bl	800e332 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2202      	movs	r2, #2
 800e30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3304      	adds	r3, #4
 800e318:	4619      	mov	r1, r3
 800e31a:	4610      	mov	r0, r2
 800e31c:	f000 fdc4 	bl	800eea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e332:	b480      	push	{r7}
 800e334:	b083      	sub	sp, #12
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e33a:	bf00      	nop
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
	...

0800e348 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b0c      	cmp	r3, #12
 800e356:	d841      	bhi.n	800e3dc <HAL_TIM_OC_Start_IT+0x94>
 800e358:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <HAL_TIM_OC_Start_IT+0x18>)
 800e35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35e:	bf00      	nop
 800e360:	0800e395 	.word	0x0800e395
 800e364:	0800e3dd 	.word	0x0800e3dd
 800e368:	0800e3dd 	.word	0x0800e3dd
 800e36c:	0800e3dd 	.word	0x0800e3dd
 800e370:	0800e3a7 	.word	0x0800e3a7
 800e374:	0800e3dd 	.word	0x0800e3dd
 800e378:	0800e3dd 	.word	0x0800e3dd
 800e37c:	0800e3dd 	.word	0x0800e3dd
 800e380:	0800e3b9 	.word	0x0800e3b9
 800e384:	0800e3dd 	.word	0x0800e3dd
 800e388:	0800e3dd 	.word	0x0800e3dd
 800e38c:	0800e3dd 	.word	0x0800e3dd
 800e390:	0800e3cb 	.word	0x0800e3cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f042 0202 	orr.w	r2, r2, #2
 800e3a2:	60da      	str	r2, [r3, #12]
      break;
 800e3a4:	e01b      	b.n	800e3de <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68da      	ldr	r2, [r3, #12]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f042 0204 	orr.w	r2, r2, #4
 800e3b4:	60da      	str	r2, [r3, #12]
      break;
 800e3b6:	e012      	b.n	800e3de <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f042 0208 	orr.w	r2, r2, #8
 800e3c6:	60da      	str	r2, [r3, #12]
      break;
 800e3c8:	e009      	b.n	800e3de <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f042 0210 	orr.w	r2, r2, #16
 800e3d8:	60da      	str	r2, [r3, #12]
      break;
 800e3da:	e000      	b.n	800e3de <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800e3dc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f001 f848 	bl	800f47c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a15      	ldr	r2, [pc, #84]	; (800e448 <HAL_TIM_OC_Start_IT+0x100>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d004      	beq.n	800e400 <HAL_TIM_OC_Start_IT+0xb8>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a14      	ldr	r2, [pc, #80]	; (800e44c <HAL_TIM_OC_Start_IT+0x104>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d101      	bne.n	800e404 <HAL_TIM_OC_Start_IT+0xbc>
 800e400:	2301      	movs	r3, #1
 800e402:	e000      	b.n	800e406 <HAL_TIM_OC_Start_IT+0xbe>
 800e404:	2300      	movs	r3, #0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d007      	beq.n	800e41a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f003 0307 	and.w	r3, r3, #7
 800e424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b06      	cmp	r3, #6
 800e42a:	d007      	beq.n	800e43c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	40010000 	.word	0x40010000
 800e44c:	40010400 	.word	0x40010400

0800e450 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b0c      	cmp	r3, #12
 800e45e:	d841      	bhi.n	800e4e4 <HAL_TIM_OC_Stop_IT+0x94>
 800e460:	a201      	add	r2, pc, #4	; (adr r2, 800e468 <HAL_TIM_OC_Stop_IT+0x18>)
 800e462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e466:	bf00      	nop
 800e468:	0800e49d 	.word	0x0800e49d
 800e46c:	0800e4e5 	.word	0x0800e4e5
 800e470:	0800e4e5 	.word	0x0800e4e5
 800e474:	0800e4e5 	.word	0x0800e4e5
 800e478:	0800e4af 	.word	0x0800e4af
 800e47c:	0800e4e5 	.word	0x0800e4e5
 800e480:	0800e4e5 	.word	0x0800e4e5
 800e484:	0800e4e5 	.word	0x0800e4e5
 800e488:	0800e4c1 	.word	0x0800e4c1
 800e48c:	0800e4e5 	.word	0x0800e4e5
 800e490:	0800e4e5 	.word	0x0800e4e5
 800e494:	0800e4e5 	.word	0x0800e4e5
 800e498:	0800e4d3 	.word	0x0800e4d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f022 0202 	bic.w	r2, r2, #2
 800e4aa:	60da      	str	r2, [r3, #12]
      break;
 800e4ac:	e01b      	b.n	800e4e6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68da      	ldr	r2, [r3, #12]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f022 0204 	bic.w	r2, r2, #4
 800e4bc:	60da      	str	r2, [r3, #12]
      break;
 800e4be:	e012      	b.n	800e4e6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68da      	ldr	r2, [r3, #12]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f022 0208 	bic.w	r2, r2, #8
 800e4ce:	60da      	str	r2, [r3, #12]
      break;
 800e4d0:	e009      	b.n	800e4e6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68da      	ldr	r2, [r3, #12]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f022 0210 	bic.w	r2, r2, #16
 800e4e0:	60da      	str	r2, [r3, #12]
      break;
 800e4e2:	e000      	b.n	800e4e6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800e4e4:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 ffc4 	bl	800f47c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a20      	ldr	r2, [pc, #128]	; (800e57c <HAL_TIM_OC_Stop_IT+0x12c>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d004      	beq.n	800e508 <HAL_TIM_OC_Stop_IT+0xb8>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a1f      	ldr	r2, [pc, #124]	; (800e580 <HAL_TIM_OC_Stop_IT+0x130>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d101      	bne.n	800e50c <HAL_TIM_OC_Stop_IT+0xbc>
 800e508:	2301      	movs	r3, #1
 800e50a:	e000      	b.n	800e50e <HAL_TIM_OC_Stop_IT+0xbe>
 800e50c:	2300      	movs	r3, #0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d017      	beq.n	800e542 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6a1a      	ldr	r2, [r3, #32]
 800e518:	f241 1311 	movw	r3, #4369	; 0x1111
 800e51c:	4013      	ands	r3, r2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10f      	bne.n	800e542 <HAL_TIM_OC_Stop_IT+0xf2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	6a1a      	ldr	r2, [r3, #32]
 800e528:	f240 4344 	movw	r3, #1092	; 0x444
 800e52c:	4013      	ands	r3, r2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d107      	bne.n	800e542 <HAL_TIM_OC_Stop_IT+0xf2>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e540:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6a1a      	ldr	r2, [r3, #32]
 800e548:	f241 1311 	movw	r3, #4369	; 0x1111
 800e54c:	4013      	ands	r3, r2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10f      	bne.n	800e572 <HAL_TIM_OC_Stop_IT+0x122>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6a1a      	ldr	r2, [r3, #32]
 800e558:	f240 4344 	movw	r3, #1092	; 0x444
 800e55c:	4013      	ands	r3, r2
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d107      	bne.n	800e572 <HAL_TIM_OC_Stop_IT+0x122>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f022 0201 	bic.w	r2, r2, #1
 800e570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	40010000 	.word	0x40010000
 800e580:	40010400 	.word	0x40010400

0800e584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e01d      	b.n	800e5d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f815 	bl	800e5da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f000 fc70 	bl	800eea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e5e2:	bf00      	nop
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
	...

0800e5f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2201      	movs	r2, #1
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	f000 ff3a 	bl	800f47c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a15      	ldr	r2, [pc, #84]	; (800e664 <HAL_TIM_PWM_Start+0x74>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d004      	beq.n	800e61c <HAL_TIM_PWM_Start+0x2c>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a14      	ldr	r2, [pc, #80]	; (800e668 <HAL_TIM_PWM_Start+0x78>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d101      	bne.n	800e620 <HAL_TIM_PWM_Start+0x30>
 800e61c:	2301      	movs	r3, #1
 800e61e:	e000      	b.n	800e622 <HAL_TIM_PWM_Start+0x32>
 800e620:	2300      	movs	r3, #0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d007      	beq.n	800e636 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b06      	cmp	r3, #6
 800e646:	d007      	beq.n	800e658 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f042 0201 	orr.w	r2, r2, #1
 800e656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	40010000 	.word	0x40010000
 800e668:	40010400 	.word	0x40010400

0800e66c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	e083      	b.n	800e788 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d106      	bne.n	800e69a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fc fdd1 	bl	800b23c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2202      	movs	r2, #2
 800e69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	6812      	ldr	r2, [r2, #0]
 800e6ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f000 fbf1 	bl	800eea8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6ee:	f023 0303 	bic.w	r3, r3, #3
 800e6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	689a      	ldr	r2, [r3, #8]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	699b      	ldr	r3, [r3, #24]
 800e6fc:	021b      	lsls	r3, r3, #8
 800e6fe:	4313      	orrs	r3, r2
 800e700:	693a      	ldr	r2, [r7, #16]
 800e702:	4313      	orrs	r3, r2
 800e704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e70c:	f023 030c 	bic.w	r3, r3, #12
 800e710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e71c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	69db      	ldr	r3, [r3, #28]
 800e726:	021b      	lsls	r3, r3, #8
 800e728:	4313      	orrs	r3, r2
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	011a      	lsls	r2, r3, #4
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	031b      	lsls	r3, r3, #12
 800e73c:	4313      	orrs	r3, r2
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	4313      	orrs	r3, r2
 800e742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e74a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	011b      	lsls	r3, r3, #4
 800e75e:	4313      	orrs	r3, r2
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	4313      	orrs	r3, r2
 800e764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <HAL_TIM_Encoder_Start+0x16>
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d008      	beq.n	800e7b6 <HAL_TIM_Encoder_Start+0x26>
 800e7a4:	e00f      	b.n	800e7c6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fe64 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e7b4:	e016      	b.n	800e7e4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	2104      	movs	r1, #4
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f000 fe5c 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e7c4:	e00e      	b.n	800e7e4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 fe54 	bl	800f47c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	2104      	movs	r1, #4
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 fe4d 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e7e2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0201 	orr.w	r2, r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d002      	beq.n	800e814 <HAL_TIM_Encoder_Stop+0x16>
 800e80e:	2b04      	cmp	r3, #4
 800e810:	d008      	beq.n	800e824 <HAL_TIM_Encoder_Stop+0x26>
 800e812:	e00f      	b.n	800e834 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	4618      	mov	r0, r3
 800e81e:	f000 fe2d 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e822:	e016      	b.n	800e852 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2200      	movs	r2, #0
 800e82a:	2104      	movs	r1, #4
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 fe25 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e832:	e00e      	b.n	800e852 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2200      	movs	r2, #0
 800e83a:	2100      	movs	r1, #0
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 fe1d 	bl	800f47c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2200      	movs	r2, #0
 800e848:	2104      	movs	r1, #4
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 fe16 	bl	800f47c <TIM_CCxChannelCmd>
      break;
 800e850:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6a1a      	ldr	r2, [r3, #32]
 800e858:	f241 1311 	movw	r3, #4369	; 0x1111
 800e85c:	4013      	ands	r3, r2
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10f      	bne.n	800e882 <HAL_TIM_Encoder_Stop+0x84>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6a1a      	ldr	r2, [r3, #32]
 800e868:	f240 4344 	movw	r3, #1092	; 0x444
 800e86c:	4013      	ands	r3, r2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d107      	bne.n	800e882 <HAL_TIM_Encoder_Stop+0x84>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f022 0201 	bic.w	r2, r2, #1
 800e880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	f003 0302 	and.w	r3, r3, #2
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d122      	bne.n	800e8e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	2b02      	cmp	r3, #2
 800e8ae:	d11b      	bne.n	800e8e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f06f 0202 	mvn.w	r2, #2
 800e8b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	f003 0303 	and.w	r3, r3, #3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d003      	beq.n	800e8d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 facb 	bl	800ee6a <HAL_TIM_IC_CaptureCallback>
 800e8d4:	e005      	b.n	800e8e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fabd 	bl	800ee56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 face 	bl	800ee7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	f003 0304 	and.w	r3, r3, #4
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	d122      	bne.n	800e93c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	f003 0304 	and.w	r3, r3, #4
 800e900:	2b04      	cmp	r3, #4
 800e902:	d11b      	bne.n	800e93c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f06f 0204 	mvn.w	r2, #4
 800e90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2202      	movs	r2, #2
 800e912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d003      	beq.n	800e92a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 faa1 	bl	800ee6a <HAL_TIM_IC_CaptureCallback>
 800e928:	e005      	b.n	800e936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fa93 	bl	800ee56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 faa4 	bl	800ee7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	f003 0308 	and.w	r3, r3, #8
 800e946:	2b08      	cmp	r3, #8
 800e948:	d122      	bne.n	800e990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	f003 0308 	and.w	r3, r3, #8
 800e954:	2b08      	cmp	r3, #8
 800e956:	d11b      	bne.n	800e990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f06f 0208 	mvn.w	r2, #8
 800e960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2204      	movs	r2, #4
 800e966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	69db      	ldr	r3, [r3, #28]
 800e96e:	f003 0303 	and.w	r3, r3, #3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d003      	beq.n	800e97e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fa77 	bl	800ee6a <HAL_TIM_IC_CaptureCallback>
 800e97c:	e005      	b.n	800e98a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fa69 	bl	800ee56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 fa7a 	bl	800ee7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	f003 0310 	and.w	r3, r3, #16
 800e99a:	2b10      	cmp	r3, #16
 800e99c:	d122      	bne.n	800e9e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	f003 0310 	and.w	r3, r3, #16
 800e9a8:	2b10      	cmp	r3, #16
 800e9aa:	d11b      	bne.n	800e9e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f06f 0210 	mvn.w	r2, #16
 800e9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2208      	movs	r2, #8
 800e9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fa4d 	bl	800ee6a <HAL_TIM_IC_CaptureCallback>
 800e9d0:	e005      	b.n	800e9de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 fa3f 	bl	800ee56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 fa50 	bl	800ee7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d10e      	bne.n	800ea10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d107      	bne.n	800ea10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f06f 0201 	mvn.w	r2, #1
 800ea08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7fb f8b6 	bl	8009b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea1a:	2b80      	cmp	r3, #128	; 0x80
 800ea1c:	d10e      	bne.n	800ea3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea28:	2b80      	cmp	r3, #128	; 0x80
 800ea2a:	d107      	bne.n	800ea3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ea34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 fee8 	bl	800f80c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea46:	2b40      	cmp	r3, #64	; 0x40
 800ea48:	d10e      	bne.n	800ea68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea54:	2b40      	cmp	r3, #64	; 0x40
 800ea56:	d107      	bne.n	800ea68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fa15 	bl	800ee92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	f003 0320 	and.w	r3, r3, #32
 800ea72:	2b20      	cmp	r3, #32
 800ea74:	d10e      	bne.n	800ea94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	f003 0320 	and.w	r3, r3, #32
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	d107      	bne.n	800ea94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f06f 0220 	mvn.w	r2, #32
 800ea8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 feb2 	bl	800f7f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d101      	bne.n	800eab6 <HAL_TIM_OC_ConfigChannel+0x1a>
 800eab2:	2302      	movs	r3, #2
 800eab4:	e04e      	b.n	800eb54 <HAL_TIM_OC_ConfigChannel+0xb8>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2202      	movs	r2, #2
 800eac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b0c      	cmp	r3, #12
 800eaca:	d839      	bhi.n	800eb40 <HAL_TIM_OC_ConfigChannel+0xa4>
 800eacc:	a201      	add	r2, pc, #4	; (adr r2, 800ead4 <HAL_TIM_OC_ConfigChannel+0x38>)
 800eace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead2:	bf00      	nop
 800ead4:	0800eb09 	.word	0x0800eb09
 800ead8:	0800eb41 	.word	0x0800eb41
 800eadc:	0800eb41 	.word	0x0800eb41
 800eae0:	0800eb41 	.word	0x0800eb41
 800eae4:	0800eb17 	.word	0x0800eb17
 800eae8:	0800eb41 	.word	0x0800eb41
 800eaec:	0800eb41 	.word	0x0800eb41
 800eaf0:	0800eb41 	.word	0x0800eb41
 800eaf4:	0800eb25 	.word	0x0800eb25
 800eaf8:	0800eb41 	.word	0x0800eb41
 800eafc:	0800eb41 	.word	0x0800eb41
 800eb00:	0800eb41 	.word	0x0800eb41
 800eb04:	0800eb33 	.word	0x0800eb33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 fa6a 	bl	800efe8 <TIM_OC1_SetConfig>
      break;
 800eb14:	e015      	b.n	800eb42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68b9      	ldr	r1, [r7, #8]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 fad3 	bl	800f0c8 <TIM_OC2_SetConfig>
      break;
 800eb22:	e00e      	b.n	800eb42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68b9      	ldr	r1, [r7, #8]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 fb42 	bl	800f1b4 <TIM_OC3_SetConfig>
      break;
 800eb30:	e007      	b.n	800eb42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68b9      	ldr	r1, [r7, #8]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 fbaf 	bl	800f29c <TIM_OC4_SetConfig>
      break;
 800eb3e:	e000      	b.n	800eb42 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800eb40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d101      	bne.n	800eb76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800eb72:	2302      	movs	r3, #2
 800eb74:	e0b4      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2202      	movs	r2, #2
 800eb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b0c      	cmp	r3, #12
 800eb8a:	f200 809f 	bhi.w	800eccc <HAL_TIM_PWM_ConfigChannel+0x170>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ebc9 	.word	0x0800ebc9
 800eb98:	0800eccd 	.word	0x0800eccd
 800eb9c:	0800eccd 	.word	0x0800eccd
 800eba0:	0800eccd 	.word	0x0800eccd
 800eba4:	0800ec09 	.word	0x0800ec09
 800eba8:	0800eccd 	.word	0x0800eccd
 800ebac:	0800eccd 	.word	0x0800eccd
 800ebb0:	0800eccd 	.word	0x0800eccd
 800ebb4:	0800ec4b 	.word	0x0800ec4b
 800ebb8:	0800eccd 	.word	0x0800eccd
 800ebbc:	0800eccd 	.word	0x0800eccd
 800ebc0:	0800eccd 	.word	0x0800eccd
 800ebc4:	0800ec8b 	.word	0x0800ec8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68b9      	ldr	r1, [r7, #8]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 fa0a 	bl	800efe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	699a      	ldr	r2, [r3, #24]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0208 	orr.w	r2, r2, #8
 800ebe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	699a      	ldr	r2, [r3, #24]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0204 	bic.w	r2, r2, #4
 800ebf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6999      	ldr	r1, [r3, #24]
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	691a      	ldr	r2, [r3, #16]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	430a      	orrs	r2, r1
 800ec04:	619a      	str	r2, [r3, #24]
      break;
 800ec06:	e062      	b.n	800ecce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 fa5a 	bl	800f0c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	699a      	ldr	r2, [r3, #24]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	699a      	ldr	r2, [r3, #24]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6999      	ldr	r1, [r3, #24]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	021a      	lsls	r2, r3, #8
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	430a      	orrs	r2, r1
 800ec46:	619a      	str	r2, [r3, #24]
      break;
 800ec48:	e041      	b.n	800ecce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68b9      	ldr	r1, [r7, #8]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f000 faaf 	bl	800f1b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69da      	ldr	r2, [r3, #28]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f042 0208 	orr.w	r2, r2, #8
 800ec64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	69da      	ldr	r2, [r3, #28]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f022 0204 	bic.w	r2, r2, #4
 800ec74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	69d9      	ldr	r1, [r3, #28]
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	691a      	ldr	r2, [r3, #16]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	430a      	orrs	r2, r1
 800ec86:	61da      	str	r2, [r3, #28]
      break;
 800ec88:	e021      	b.n	800ecce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68b9      	ldr	r1, [r7, #8]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 fb03 	bl	800f29c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69da      	ldr	r2, [r3, #28]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	69da      	ldr	r2, [r3, #28]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69d9      	ldr	r1, [r3, #28]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	021a      	lsls	r2, r3, #8
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	430a      	orrs	r2, r1
 800ecc8:	61da      	str	r2, [r3, #28]
      break;
 800ecca:	e000      	b.n	800ecce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800eccc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_TIM_ConfigClockSource+0x18>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e0a6      	b.n	800ee4e <HAL_TIM_ConfigClockSource+0x166>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ed1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b40      	cmp	r3, #64	; 0x40
 800ed36:	d067      	beq.n	800ee08 <HAL_TIM_ConfigClockSource+0x120>
 800ed38:	2b40      	cmp	r3, #64	; 0x40
 800ed3a:	d80b      	bhi.n	800ed54 <HAL_TIM_ConfigClockSource+0x6c>
 800ed3c:	2b10      	cmp	r3, #16
 800ed3e:	d073      	beq.n	800ee28 <HAL_TIM_ConfigClockSource+0x140>
 800ed40:	2b10      	cmp	r3, #16
 800ed42:	d802      	bhi.n	800ed4a <HAL_TIM_ConfigClockSource+0x62>
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d06f      	beq.n	800ee28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ed48:	e078      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ed4a:	2b20      	cmp	r3, #32
 800ed4c:	d06c      	beq.n	800ee28 <HAL_TIM_ConfigClockSource+0x140>
 800ed4e:	2b30      	cmp	r3, #48	; 0x30
 800ed50:	d06a      	beq.n	800ee28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ed52:	e073      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ed54:	2b70      	cmp	r3, #112	; 0x70
 800ed56:	d00d      	beq.n	800ed74 <HAL_TIM_ConfigClockSource+0x8c>
 800ed58:	2b70      	cmp	r3, #112	; 0x70
 800ed5a:	d804      	bhi.n	800ed66 <HAL_TIM_ConfigClockSource+0x7e>
 800ed5c:	2b50      	cmp	r3, #80	; 0x50
 800ed5e:	d033      	beq.n	800edc8 <HAL_TIM_ConfigClockSource+0xe0>
 800ed60:	2b60      	cmp	r3, #96	; 0x60
 800ed62:	d041      	beq.n	800ede8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ed64:	e06a      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ed66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed6a:	d066      	beq.n	800ee3a <HAL_TIM_ConfigClockSource+0x152>
 800ed6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed70:	d017      	beq.n	800eda2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ed72:	e063      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6818      	ldr	r0, [r3, #0]
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	6899      	ldr	r1, [r3, #8]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	f000 fb5a 	bl	800f43c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ed96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	609a      	str	r2, [r3, #8]
      break;
 800eda0:	e04c      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6818      	ldr	r0, [r3, #0]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	6899      	ldr	r1, [r3, #8]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	685a      	ldr	r2, [r3, #4]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	f000 fb43 	bl	800f43c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edc4:	609a      	str	r2, [r3, #8]
      break;
 800edc6:	e039      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6818      	ldr	r0, [r3, #0]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	6859      	ldr	r1, [r3, #4]
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	461a      	mov	r2, r3
 800edd6:	f000 fab7 	bl	800f348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2150      	movs	r1, #80	; 0x50
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fb10 	bl	800f406 <TIM_ITRx_SetConfig>
      break;
 800ede6:	e029      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6818      	ldr	r0, [r3, #0]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	6859      	ldr	r1, [r3, #4]
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	461a      	mov	r2, r3
 800edf6:	f000 fad6 	bl	800f3a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2160      	movs	r1, #96	; 0x60
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 fb00 	bl	800f406 <TIM_ITRx_SetConfig>
      break;
 800ee06:	e019      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6818      	ldr	r0, [r3, #0]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	6859      	ldr	r1, [r3, #4]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	461a      	mov	r2, r3
 800ee16:	f000 fa97 	bl	800f348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2140      	movs	r1, #64	; 0x40
 800ee20:	4618      	mov	r0, r3
 800ee22:	f000 faf0 	bl	800f406 <TIM_ITRx_SetConfig>
      break;
 800ee26:	e009      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4619      	mov	r1, r3
 800ee32:	4610      	mov	r0, r2
 800ee34:	f000 fae7 	bl	800f406 <TIM_ITRx_SetConfig>
      break;
 800ee38:	e000      	b.n	800ee3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ee3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee5e:	bf00      	nop
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee72:	bf00      	nop
 800ee74:	370c      	adds	r7, #12
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b083      	sub	sp, #12
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee86:	bf00      	nop
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee9a:	bf00      	nop
 800ee9c:	370c      	adds	r7, #12
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
	...

0800eea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a40      	ldr	r2, [pc, #256]	; (800efbc <TIM_Base_SetConfig+0x114>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d013      	beq.n	800eee8 <TIM_Base_SetConfig+0x40>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eec6:	d00f      	beq.n	800eee8 <TIM_Base_SetConfig+0x40>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a3d      	ldr	r2, [pc, #244]	; (800efc0 <TIM_Base_SetConfig+0x118>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d00b      	beq.n	800eee8 <TIM_Base_SetConfig+0x40>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a3c      	ldr	r2, [pc, #240]	; (800efc4 <TIM_Base_SetConfig+0x11c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d007      	beq.n	800eee8 <TIM_Base_SetConfig+0x40>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a3b      	ldr	r2, [pc, #236]	; (800efc8 <TIM_Base_SetConfig+0x120>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d003      	beq.n	800eee8 <TIM_Base_SetConfig+0x40>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a3a      	ldr	r2, [pc, #232]	; (800efcc <TIM_Base_SetConfig+0x124>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d108      	bne.n	800eefa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a2f      	ldr	r2, [pc, #188]	; (800efbc <TIM_Base_SetConfig+0x114>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d02b      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef08:	d027      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a2c      	ldr	r2, [pc, #176]	; (800efc0 <TIM_Base_SetConfig+0x118>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d023      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a2b      	ldr	r2, [pc, #172]	; (800efc4 <TIM_Base_SetConfig+0x11c>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d01f      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a2a      	ldr	r2, [pc, #168]	; (800efc8 <TIM_Base_SetConfig+0x120>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d01b      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a29      	ldr	r2, [pc, #164]	; (800efcc <TIM_Base_SetConfig+0x124>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d017      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4a28      	ldr	r2, [pc, #160]	; (800efd0 <TIM_Base_SetConfig+0x128>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d013      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a27      	ldr	r2, [pc, #156]	; (800efd4 <TIM_Base_SetConfig+0x12c>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d00f      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a26      	ldr	r2, [pc, #152]	; (800efd8 <TIM_Base_SetConfig+0x130>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d00b      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a25      	ldr	r2, [pc, #148]	; (800efdc <TIM_Base_SetConfig+0x134>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d007      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a24      	ldr	r2, [pc, #144]	; (800efe0 <TIM_Base_SetConfig+0x138>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d003      	beq.n	800ef5a <TIM_Base_SetConfig+0xb2>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a23      	ldr	r2, [pc, #140]	; (800efe4 <TIM_Base_SetConfig+0x13c>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d108      	bne.n	800ef6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	695b      	ldr	r3, [r3, #20]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a0a      	ldr	r2, [pc, #40]	; (800efbc <TIM_Base_SetConfig+0x114>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d003      	beq.n	800efa0 <TIM_Base_SetConfig+0xf8>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a0c      	ldr	r2, [pc, #48]	; (800efcc <TIM_Base_SetConfig+0x124>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d103      	bne.n	800efa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	691a      	ldr	r2, [r3, #16]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2201      	movs	r2, #1
 800efac:	615a      	str	r2, [r3, #20]
}
 800efae:	bf00      	nop
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	40010000 	.word	0x40010000
 800efc0:	40000400 	.word	0x40000400
 800efc4:	40000800 	.word	0x40000800
 800efc8:	40000c00 	.word	0x40000c00
 800efcc:	40010400 	.word	0x40010400
 800efd0:	40014000 	.word	0x40014000
 800efd4:	40014400 	.word	0x40014400
 800efd8:	40014800 	.word	0x40014800
 800efdc:	40001800 	.word	0x40001800
 800efe0:	40001c00 	.word	0x40001c00
 800efe4:	40002000 	.word	0x40002000

0800efe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efe8:	b480      	push	{r7}
 800efea:	b087      	sub	sp, #28
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a1b      	ldr	r3, [r3, #32]
 800eff6:	f023 0201 	bic.w	r2, r3, #1
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	699b      	ldr	r3, [r3, #24]
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f023 0303 	bic.w	r3, r3, #3
 800f01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	4313      	orrs	r3, r2
 800f028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f023 0302 	bic.w	r3, r3, #2
 800f030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	4313      	orrs	r3, r2
 800f03a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a20      	ldr	r2, [pc, #128]	; (800f0c0 <TIM_OC1_SetConfig+0xd8>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d003      	beq.n	800f04c <TIM_OC1_SetConfig+0x64>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a1f      	ldr	r2, [pc, #124]	; (800f0c4 <TIM_OC1_SetConfig+0xdc>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d10c      	bne.n	800f066 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f023 0308 	bic.w	r3, r3, #8
 800f052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	4313      	orrs	r3, r2
 800f05c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f023 0304 	bic.w	r3, r3, #4
 800f064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a15      	ldr	r2, [pc, #84]	; (800f0c0 <TIM_OC1_SetConfig+0xd8>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d003      	beq.n	800f076 <TIM_OC1_SetConfig+0x8e>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4a14      	ldr	r2, [pc, #80]	; (800f0c4 <TIM_OC1_SetConfig+0xdc>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d111      	bne.n	800f09a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f07c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	695b      	ldr	r3, [r3, #20]
 800f08a:	693a      	ldr	r2, [r7, #16]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	693a      	ldr	r2, [r7, #16]
 800f096:	4313      	orrs	r3, r2
 800f098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	693a      	ldr	r2, [r7, #16]
 800f09e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	685a      	ldr	r2, [r3, #4]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	621a      	str	r2, [r3, #32]
}
 800f0b4:	bf00      	nop
 800f0b6:	371c      	adds	r7, #28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	40010000 	.word	0x40010000
 800f0c4:	40010400 	.word	0x40010400

0800f0c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b087      	sub	sp, #28
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a1b      	ldr	r3, [r3, #32]
 800f0d6:	f023 0210 	bic.w	r2, r3, #16
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	699b      	ldr	r3, [r3, #24]
 800f0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	021b      	lsls	r3, r3, #8
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	4313      	orrs	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	f023 0320 	bic.w	r3, r3, #32
 800f112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	011b      	lsls	r3, r3, #4
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4a22      	ldr	r2, [pc, #136]	; (800f1ac <TIM_OC2_SetConfig+0xe4>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d003      	beq.n	800f130 <TIM_OC2_SetConfig+0x68>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4a21      	ldr	r2, [pc, #132]	; (800f1b0 <TIM_OC2_SetConfig+0xe8>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d10d      	bne.n	800f14c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	011b      	lsls	r3, r3, #4
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	4313      	orrs	r3, r2
 800f142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f14a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a17      	ldr	r2, [pc, #92]	; (800f1ac <TIM_OC2_SetConfig+0xe4>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d003      	beq.n	800f15c <TIM_OC2_SetConfig+0x94>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a16      	ldr	r2, [pc, #88]	; (800f1b0 <TIM_OC2_SetConfig+0xe8>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d113      	bne.n	800f184 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f16a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	695b      	ldr	r3, [r3, #20]
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	693a      	ldr	r2, [r7, #16]
 800f174:	4313      	orrs	r3, r2
 800f176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	4313      	orrs	r3, r2
 800f182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	693a      	ldr	r2, [r7, #16]
 800f188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	621a      	str	r2, [r3, #32]
}
 800f19e:	bf00      	nop
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	40010000 	.word	0x40010000
 800f1b0:	40010400 	.word	0x40010400

0800f1b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b087      	sub	sp, #28
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a1b      	ldr	r3, [r3, #32]
 800f1c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	69db      	ldr	r3, [r3, #28]
 800f1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f023 0303 	bic.w	r3, r3, #3
 800f1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	021b      	lsls	r3, r3, #8
 800f204:	697a      	ldr	r2, [r7, #20]
 800f206:	4313      	orrs	r3, r2
 800f208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a21      	ldr	r2, [pc, #132]	; (800f294 <TIM_OC3_SetConfig+0xe0>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d003      	beq.n	800f21a <TIM_OC3_SetConfig+0x66>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a20      	ldr	r2, [pc, #128]	; (800f298 <TIM_OC3_SetConfig+0xe4>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d10d      	bne.n	800f236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	021b      	lsls	r3, r3, #8
 800f228:	697a      	ldr	r2, [r7, #20]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a16      	ldr	r2, [pc, #88]	; (800f294 <TIM_OC3_SetConfig+0xe0>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d003      	beq.n	800f246 <TIM_OC3_SetConfig+0x92>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a15      	ldr	r2, [pc, #84]	; (800f298 <TIM_OC3_SetConfig+0xe4>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d113      	bne.n	800f26e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f24c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	011b      	lsls	r3, r3, #4
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	4313      	orrs	r3, r2
 800f260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	699b      	ldr	r3, [r3, #24]
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	693a      	ldr	r2, [r7, #16]
 800f272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	685a      	ldr	r2, [r3, #4]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	697a      	ldr	r2, [r7, #20]
 800f286:	621a      	str	r2, [r3, #32]
}
 800f288:	bf00      	nop
 800f28a:	371c      	adds	r7, #28
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr
 800f294:	40010000 	.word	0x40010000
 800f298:	40010400 	.word	0x40010400

0800f29c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	69db      	ldr	r3, [r3, #28]
 800f2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	021b      	lsls	r3, r3, #8
 800f2da:	68fa      	ldr	r2, [r7, #12]
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	031b      	lsls	r3, r3, #12
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a12      	ldr	r2, [pc, #72]	; (800f340 <TIM_OC4_SetConfig+0xa4>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d003      	beq.n	800f304 <TIM_OC4_SetConfig+0x68>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a11      	ldr	r2, [pc, #68]	; (800f344 <TIM_OC4_SetConfig+0xa8>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d109      	bne.n	800f318 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f30a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	695b      	ldr	r3, [r3, #20]
 800f310:	019b      	lsls	r3, r3, #6
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	4313      	orrs	r3, r2
 800f316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	697a      	ldr	r2, [r7, #20]
 800f31c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685a      	ldr	r2, [r3, #4]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	693a      	ldr	r2, [r7, #16]
 800f330:	621a      	str	r2, [r3, #32]
}
 800f332:	bf00      	nop
 800f334:	371c      	adds	r7, #28
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	40010000 	.word	0x40010000
 800f344:	40010400 	.word	0x40010400

0800f348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	f023 0201 	bic.w	r2, r3, #1
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	011b      	lsls	r3, r3, #4
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f023 030a 	bic.w	r3, r3, #10
 800f384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	621a      	str	r2, [r3, #32]
}
 800f39a:	bf00      	nop
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b087      	sub	sp, #28
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	60f8      	str	r0, [r7, #12]
 800f3ae:	60b9      	str	r1, [r7, #8]
 800f3b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	f023 0210 	bic.w	r2, r3, #16
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	031b      	lsls	r3, r3, #12
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f3e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	621a      	str	r2, [r3, #32]
}
 800f3fa:	bf00      	nop
 800f3fc:	371c      	adds	r7, #28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f406:	b480      	push	{r7}
 800f408:	b085      	sub	sp, #20
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f41c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	4313      	orrs	r3, r2
 800f424:	f043 0307 	orr.w	r3, r3, #7
 800f428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	609a      	str	r2, [r3, #8]
}
 800f430:	bf00      	nop
 800f432:	3714      	adds	r7, #20
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	021a      	lsls	r2, r3, #8
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	431a      	orrs	r2, r3
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	4313      	orrs	r3, r2
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	4313      	orrs	r3, r2
 800f468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	697a      	ldr	r2, [r7, #20]
 800f46e:	609a      	str	r2, [r3, #8]
}
 800f470:	bf00      	nop
 800f472:	371c      	adds	r7, #28
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	f003 031f 	and.w	r3, r3, #31
 800f48e:	2201      	movs	r2, #1
 800f490:	fa02 f303 	lsl.w	r3, r2, r3
 800f494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6a1a      	ldr	r2, [r3, #32]
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	43db      	mvns	r3, r3
 800f49e:	401a      	ands	r2, r3
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6a1a      	ldr	r2, [r3, #32]
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	f003 031f 	and.w	r3, r3, #31
 800f4ae:	6879      	ldr	r1, [r7, #4]
 800f4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f4b4:	431a      	orrs	r2, r3
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	621a      	str	r2, [r3, #32]
}
 800f4ba:	bf00      	nop
 800f4bc:	371c      	adds	r7, #28
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr

0800f4c6 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b084      	sub	sp, #16
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
 800f4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b04      	cmp	r3, #4
 800f4d4:	d00d      	beq.n	800f4f2 <HAL_TIMEx_OCN_Start_IT+0x2c>
 800f4d6:	2b08      	cmp	r3, #8
 800f4d8:	d014      	beq.n	800f504 <HAL_TIMEx_OCN_Start_IT+0x3e>
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d000      	beq.n	800f4e0 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 800f4de:	e01a      	b.n	800f516 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68da      	ldr	r2, [r3, #12]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f042 0202 	orr.w	r2, r2, #2
 800f4ee:	60da      	str	r2, [r3, #12]
      break;
 800f4f0:	e011      	b.n	800f516 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68da      	ldr	r2, [r3, #12]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f042 0204 	orr.w	r2, r2, #4
 800f500:	60da      	str	r2, [r3, #12]
      break;
 800f502:	e008      	b.n	800f516 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	68da      	ldr	r2, [r3, #12]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f042 0208 	orr.w	r2, r2, #8
 800f512:	60da      	str	r2, [r3, #12]
      break;
 800f514:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68da      	ldr	r2, [r3, #12]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f524:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2204      	movs	r2, #4
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f976 	bl	800f820 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f542:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	f003 0307 	and.w	r3, r3, #7
 800f54e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b06      	cmp	r3, #6
 800f554:	d007      	beq.n	800f566 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f042 0201 	orr.w	r2, r2, #1
 800f564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f566:	2300      	movs	r3, #0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	2b04      	cmp	r3, #4
 800f57e:	d00d      	beq.n	800f59c <HAL_TIMEx_OCN_Stop_IT+0x2c>
 800f580:	2b08      	cmp	r3, #8
 800f582:	d014      	beq.n	800f5ae <HAL_TIMEx_OCN_Stop_IT+0x3e>
 800f584:	2b00      	cmp	r3, #0
 800f586:	d000      	beq.n	800f58a <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800f588:	e01a      	b.n	800f5c0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68da      	ldr	r2, [r3, #12]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f022 0202 	bic.w	r2, r2, #2
 800f598:	60da      	str	r2, [r3, #12]
      break;
 800f59a:	e011      	b.n	800f5c0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68da      	ldr	r2, [r3, #12]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f022 0204 	bic.w	r2, r2, #4
 800f5aa:	60da      	str	r2, [r3, #12]
      break;
 800f5ac:	e008      	b.n	800f5c0 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	68da      	ldr	r2, [r3, #12]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f022 0208 	bic.w	r2, r2, #8
 800f5bc:	60da      	str	r2, [r3, #12]
      break;
 800f5be:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f000 f929 	bl	800f820 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	6a1b      	ldr	r3, [r3, #32]
 800f5d4:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	f240 4344 	movw	r3, #1092	; 0x444
 800f5dc:	4013      	ands	r3, r2
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d107      	bne.n	800f5f2 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	68da      	ldr	r2, [r3, #12]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5f0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6a1a      	ldr	r2, [r3, #32]
 800f5f8:	f241 1311 	movw	r3, #4369	; 0x1111
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10f      	bne.n	800f622 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	6a1a      	ldr	r2, [r3, #32]
 800f608:	f240 4344 	movw	r3, #1092	; 0x444
 800f60c:	4013      	ands	r3, r2
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d107      	bne.n	800f622 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f620:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	6a1a      	ldr	r2, [r3, #32]
 800f628:	f241 1311 	movw	r3, #4369	; 0x1111
 800f62c:	4013      	ands	r3, r2
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10f      	bne.n	800f652 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6a1a      	ldr	r2, [r3, #32]
 800f638:	f240 4344 	movw	r3, #1092	; 0x444
 800f63c:	4013      	ands	r3, r2
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d107      	bne.n	800f652 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f022 0201 	bic.w	r2, r2, #1
 800f650:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d101      	bne.n	800f674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f670:	2302      	movs	r3, #2
 800f672:	e05a      	b.n	800f72a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2201      	movs	r2, #1
 800f678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2202      	movs	r2, #2
 800f680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f69a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a21      	ldr	r2, [pc, #132]	; (800f738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d022      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6c0:	d01d      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a1d      	ldr	r2, [pc, #116]	; (800f73c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d018      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a1b      	ldr	r2, [pc, #108]	; (800f740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d013      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a1a      	ldr	r2, [pc, #104]	; (800f744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d00e      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a18      	ldr	r2, [pc, #96]	; (800f748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d009      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a17      	ldr	r2, [pc, #92]	; (800f74c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d004      	beq.n	800f6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a15      	ldr	r2, [pc, #84]	; (800f750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d10c      	bne.n	800f718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	40010000 	.word	0x40010000
 800f73c:	40000400 	.word	0x40000400
 800f740:	40000800 	.word	0x40000800
 800f744:	40000c00 	.word	0x40000c00
 800f748:	40010400 	.word	0x40010400
 800f74c:	40014000 	.word	0x40014000
 800f750:	40001800 	.word	0x40001800

0800f754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d101      	bne.n	800f770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f76c:	2302      	movs	r3, #2
 800f76e:	e03d      	b.n	800f7ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	4313      	orrs	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	4313      	orrs	r3, r2
 800f792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f003 031f 	and.w	r3, r3, #31
 800f832:	2204      	movs	r2, #4
 800f834:	fa02 f303 	lsl.w	r3, r2, r3
 800f838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6a1a      	ldr	r2, [r3, #32]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	43db      	mvns	r3, r3
 800f842:	401a      	ands	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6a1a      	ldr	r2, [r3, #32]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f003 031f 	and.w	r3, r3, #31
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	fa01 f303 	lsl.w	r3, r1, r3
 800f858:	431a      	orrs	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	621a      	str	r2, [r3, #32]
}
 800f85e:	bf00      	nop
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d101      	bne.n	800f87c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f878:	2301      	movs	r3, #1
 800f87a:	e03f      	b.n	800f8fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b00      	cmp	r3, #0
 800f886:	d106      	bne.n	800f896 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7fb fe05 	bl	800b4a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2224      	movs	r2, #36	; 0x24
 800f89a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	68da      	ldr	r2, [r3, #12]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f90c 	bl	800facc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	691a      	ldr	r2, [r3, #16]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	695a      	ldr	r2, [r3, #20]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68da      	ldr	r2, [r3, #12]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2220      	movs	r2, #32
 800f8ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2220      	movs	r2, #32
 800f8f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b088      	sub	sp, #32
 800f908:	af02      	add	r7, sp, #8
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	603b      	str	r3, [r7, #0]
 800f910:	4613      	mov	r3, r2
 800f912:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f914:	2300      	movs	r3, #0
 800f916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	2b20      	cmp	r3, #32
 800f922:	f040 8083 	bne.w	800fa2c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <HAL_UART_Transmit+0x2e>
 800f92c:	88fb      	ldrh	r3, [r7, #6]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d101      	bne.n	800f936 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f932:	2301      	movs	r3, #1
 800f934:	e07b      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d101      	bne.n	800f944 <HAL_UART_Transmit+0x40>
 800f940:	2302      	movs	r3, #2
 800f942:	e074      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2221      	movs	r2, #33	; 0x21
 800f956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f95a:	f7fc f983 	bl	800bc64 <HAL_GetTick>
 800f95e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	88fa      	ldrh	r2, [r7, #6]
 800f964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	88fa      	ldrh	r2, [r7, #6]
 800f96a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f974:	e042      	b.n	800f9fc <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	3b01      	subs	r3, #1
 800f97e:	b29a      	uxth	r2, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f98c:	d122      	bne.n	800f9d4 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2200      	movs	r2, #0
 800f996:	2180      	movs	r1, #128	; 0x80
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 f84c 	bl	800fa36 <UART_WaitOnFlagUntilTimeout>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	e042      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	881b      	ldrh	r3, [r3, #0]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9ba:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	691b      	ldr	r3, [r3, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d103      	bne.n	800f9cc <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	60bb      	str	r3, [r7, #8]
 800f9ca:	e017      	b.n	800f9fc <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	60bb      	str	r3, [r7, #8]
 800f9d2:	e013      	b.n	800f9fc <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	2180      	movs	r1, #128	; 0x80
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 f829 	bl	800fa36 <UART_WaitOnFlagUntilTimeout>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e01f      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	60ba      	str	r2, [r7, #8]
 800f9f4:	781a      	ldrb	r2, [r3, #0]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1b7      	bne.n	800f976 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2140      	movs	r1, #64	; 0x40
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f000 f810 	bl	800fa36 <UART_WaitOnFlagUntilTimeout>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d001      	beq.n	800fa20 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	e006      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e000      	b.n	800fa2e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800fa2c:	2302      	movs	r3, #2
  }
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b084      	sub	sp, #16
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	60b9      	str	r1, [r7, #8]
 800fa40:	603b      	str	r3, [r7, #0]
 800fa42:	4613      	mov	r3, r2
 800fa44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa46:	e02c      	b.n	800faa2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d028      	beq.n	800faa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d007      	beq.n	800fa66 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa56:	f7fc f905 	bl	800bc64 <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d21d      	bcs.n	800faa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	68da      	ldr	r2, [r3, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fa74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	695a      	ldr	r2, [r3, #20]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f022 0201 	bic.w	r2, r2, #1
 800fa84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2220      	movs	r2, #32
 800fa8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2220      	movs	r2, #32
 800fa92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	e00f      	b.n	800fac2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	4013      	ands	r3, r2
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	429a      	cmp	r2, r3
 800fab0:	bf0c      	ite	eq
 800fab2:	2301      	moveq	r3, #1
 800fab4:	2300      	movne	r3, #0
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d0c3      	beq.n	800fa48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
	...

0800facc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	68da      	ldr	r2, [r3, #12]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	430a      	orrs	r2, r1
 800faea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	431a      	orrs	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	431a      	orrs	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	69db      	ldr	r3, [r3, #28]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fb0e:	f023 030c 	bic.w	r3, r3, #12
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	6812      	ldr	r2, [r2, #0]
 800fb16:	68f9      	ldr	r1, [r7, #12]
 800fb18:	430b      	orrs	r3, r1
 800fb1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	695b      	ldr	r3, [r3, #20]
 800fb22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	699a      	ldr	r2, [r3, #24]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	430a      	orrs	r2, r1
 800fb30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	69db      	ldr	r3, [r3, #28]
 800fb36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb3a:	f040 818b 	bne.w	800fe54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4ac1      	ldr	r2, [pc, #772]	; (800fe48 <UART_SetConfig+0x37c>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d005      	beq.n	800fb54 <UART_SetConfig+0x88>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4abf      	ldr	r2, [pc, #764]	; (800fe4c <UART_SetConfig+0x380>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	f040 80bd 	bne.w	800fcce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fb54:	f7fe fad0 	bl	800e0f8 <HAL_RCC_GetPCLK2Freq>
 800fb58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	461d      	mov	r5, r3
 800fb5e:	f04f 0600 	mov.w	r6, #0
 800fb62:	46a8      	mov	r8, r5
 800fb64:	46b1      	mov	r9, r6
 800fb66:	eb18 0308 	adds.w	r3, r8, r8
 800fb6a:	eb49 0409 	adc.w	r4, r9, r9
 800fb6e:	4698      	mov	r8, r3
 800fb70:	46a1      	mov	r9, r4
 800fb72:	eb18 0805 	adds.w	r8, r8, r5
 800fb76:	eb49 0906 	adc.w	r9, r9, r6
 800fb7a:	f04f 0100 	mov.w	r1, #0
 800fb7e:	f04f 0200 	mov.w	r2, #0
 800fb82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb8e:	4688      	mov	r8, r1
 800fb90:	4691      	mov	r9, r2
 800fb92:	eb18 0005 	adds.w	r0, r8, r5
 800fb96:	eb49 0106 	adc.w	r1, r9, r6
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	461d      	mov	r5, r3
 800fba0:	f04f 0600 	mov.w	r6, #0
 800fba4:	196b      	adds	r3, r5, r5
 800fba6:	eb46 0406 	adc.w	r4, r6, r6
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4623      	mov	r3, r4
 800fbae:	f7f8 ff83 	bl	8008ab8 <__aeabi_uldivmod>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	460c      	mov	r4, r1
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	4ba5      	ldr	r3, [pc, #660]	; (800fe50 <UART_SetConfig+0x384>)
 800fbba:	fba3 2302 	umull	r2, r3, r3, r2
 800fbbe:	095b      	lsrs	r3, r3, #5
 800fbc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	461d      	mov	r5, r3
 800fbc8:	f04f 0600 	mov.w	r6, #0
 800fbcc:	46a9      	mov	r9, r5
 800fbce:	46b2      	mov	sl, r6
 800fbd0:	eb19 0309 	adds.w	r3, r9, r9
 800fbd4:	eb4a 040a 	adc.w	r4, sl, sl
 800fbd8:	4699      	mov	r9, r3
 800fbda:	46a2      	mov	sl, r4
 800fbdc:	eb19 0905 	adds.w	r9, r9, r5
 800fbe0:	eb4a 0a06 	adc.w	sl, sl, r6
 800fbe4:	f04f 0100 	mov.w	r1, #0
 800fbe8:	f04f 0200 	mov.w	r2, #0
 800fbec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbf8:	4689      	mov	r9, r1
 800fbfa:	4692      	mov	sl, r2
 800fbfc:	eb19 0005 	adds.w	r0, r9, r5
 800fc00:	eb4a 0106 	adc.w	r1, sl, r6
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	461d      	mov	r5, r3
 800fc0a:	f04f 0600 	mov.w	r6, #0
 800fc0e:	196b      	adds	r3, r5, r5
 800fc10:	eb46 0406 	adc.w	r4, r6, r6
 800fc14:	461a      	mov	r2, r3
 800fc16:	4623      	mov	r3, r4
 800fc18:	f7f8 ff4e 	bl	8008ab8 <__aeabi_uldivmod>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	461a      	mov	r2, r3
 800fc22:	4b8b      	ldr	r3, [pc, #556]	; (800fe50 <UART_SetConfig+0x384>)
 800fc24:	fba3 1302 	umull	r1, r3, r3, r2
 800fc28:	095b      	lsrs	r3, r3, #5
 800fc2a:	2164      	movs	r1, #100	; 0x64
 800fc2c:	fb01 f303 	mul.w	r3, r1, r3
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	3332      	adds	r3, #50	; 0x32
 800fc36:	4a86      	ldr	r2, [pc, #536]	; (800fe50 <UART_SetConfig+0x384>)
 800fc38:	fba2 2303 	umull	r2, r3, r2, r3
 800fc3c:	095b      	lsrs	r3, r3, #5
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fc44:	4498      	add	r8, r3
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	461d      	mov	r5, r3
 800fc4a:	f04f 0600 	mov.w	r6, #0
 800fc4e:	46a9      	mov	r9, r5
 800fc50:	46b2      	mov	sl, r6
 800fc52:	eb19 0309 	adds.w	r3, r9, r9
 800fc56:	eb4a 040a 	adc.w	r4, sl, sl
 800fc5a:	4699      	mov	r9, r3
 800fc5c:	46a2      	mov	sl, r4
 800fc5e:	eb19 0905 	adds.w	r9, r9, r5
 800fc62:	eb4a 0a06 	adc.w	sl, sl, r6
 800fc66:	f04f 0100 	mov.w	r1, #0
 800fc6a:	f04f 0200 	mov.w	r2, #0
 800fc6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc7a:	4689      	mov	r9, r1
 800fc7c:	4692      	mov	sl, r2
 800fc7e:	eb19 0005 	adds.w	r0, r9, r5
 800fc82:	eb4a 0106 	adc.w	r1, sl, r6
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	461d      	mov	r5, r3
 800fc8c:	f04f 0600 	mov.w	r6, #0
 800fc90:	196b      	adds	r3, r5, r5
 800fc92:	eb46 0406 	adc.w	r4, r6, r6
 800fc96:	461a      	mov	r2, r3
 800fc98:	4623      	mov	r3, r4
 800fc9a:	f7f8 ff0d 	bl	8008ab8 <__aeabi_uldivmod>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	460c      	mov	r4, r1
 800fca2:	461a      	mov	r2, r3
 800fca4:	4b6a      	ldr	r3, [pc, #424]	; (800fe50 <UART_SetConfig+0x384>)
 800fca6:	fba3 1302 	umull	r1, r3, r3, r2
 800fcaa:	095b      	lsrs	r3, r3, #5
 800fcac:	2164      	movs	r1, #100	; 0x64
 800fcae:	fb01 f303 	mul.w	r3, r1, r3
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	3332      	adds	r3, #50	; 0x32
 800fcb8:	4a65      	ldr	r2, [pc, #404]	; (800fe50 <UART_SetConfig+0x384>)
 800fcba:	fba2 2303 	umull	r2, r3, r2, r3
 800fcbe:	095b      	lsrs	r3, r3, #5
 800fcc0:	f003 0207 	and.w	r2, r3, #7
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4442      	add	r2, r8
 800fcca:	609a      	str	r2, [r3, #8]
 800fccc:	e26f      	b.n	80101ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fcce:	f7fe f9ff 	bl	800e0d0 <HAL_RCC_GetPCLK1Freq>
 800fcd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	461d      	mov	r5, r3
 800fcd8:	f04f 0600 	mov.w	r6, #0
 800fcdc:	46a8      	mov	r8, r5
 800fcde:	46b1      	mov	r9, r6
 800fce0:	eb18 0308 	adds.w	r3, r8, r8
 800fce4:	eb49 0409 	adc.w	r4, r9, r9
 800fce8:	4698      	mov	r8, r3
 800fcea:	46a1      	mov	r9, r4
 800fcec:	eb18 0805 	adds.w	r8, r8, r5
 800fcf0:	eb49 0906 	adc.w	r9, r9, r6
 800fcf4:	f04f 0100 	mov.w	r1, #0
 800fcf8:	f04f 0200 	mov.w	r2, #0
 800fcfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd08:	4688      	mov	r8, r1
 800fd0a:	4691      	mov	r9, r2
 800fd0c:	eb18 0005 	adds.w	r0, r8, r5
 800fd10:	eb49 0106 	adc.w	r1, r9, r6
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	461d      	mov	r5, r3
 800fd1a:	f04f 0600 	mov.w	r6, #0
 800fd1e:	196b      	adds	r3, r5, r5
 800fd20:	eb46 0406 	adc.w	r4, r6, r6
 800fd24:	461a      	mov	r2, r3
 800fd26:	4623      	mov	r3, r4
 800fd28:	f7f8 fec6 	bl	8008ab8 <__aeabi_uldivmod>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	460c      	mov	r4, r1
 800fd30:	461a      	mov	r2, r3
 800fd32:	4b47      	ldr	r3, [pc, #284]	; (800fe50 <UART_SetConfig+0x384>)
 800fd34:	fba3 2302 	umull	r2, r3, r3, r2
 800fd38:	095b      	lsrs	r3, r3, #5
 800fd3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	461d      	mov	r5, r3
 800fd42:	f04f 0600 	mov.w	r6, #0
 800fd46:	46a9      	mov	r9, r5
 800fd48:	46b2      	mov	sl, r6
 800fd4a:	eb19 0309 	adds.w	r3, r9, r9
 800fd4e:	eb4a 040a 	adc.w	r4, sl, sl
 800fd52:	4699      	mov	r9, r3
 800fd54:	46a2      	mov	sl, r4
 800fd56:	eb19 0905 	adds.w	r9, r9, r5
 800fd5a:	eb4a 0a06 	adc.w	sl, sl, r6
 800fd5e:	f04f 0100 	mov.w	r1, #0
 800fd62:	f04f 0200 	mov.w	r2, #0
 800fd66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd72:	4689      	mov	r9, r1
 800fd74:	4692      	mov	sl, r2
 800fd76:	eb19 0005 	adds.w	r0, r9, r5
 800fd7a:	eb4a 0106 	adc.w	r1, sl, r6
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	461d      	mov	r5, r3
 800fd84:	f04f 0600 	mov.w	r6, #0
 800fd88:	196b      	adds	r3, r5, r5
 800fd8a:	eb46 0406 	adc.w	r4, r6, r6
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4623      	mov	r3, r4
 800fd92:	f7f8 fe91 	bl	8008ab8 <__aeabi_uldivmod>
 800fd96:	4603      	mov	r3, r0
 800fd98:	460c      	mov	r4, r1
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	4b2c      	ldr	r3, [pc, #176]	; (800fe50 <UART_SetConfig+0x384>)
 800fd9e:	fba3 1302 	umull	r1, r3, r3, r2
 800fda2:	095b      	lsrs	r3, r3, #5
 800fda4:	2164      	movs	r1, #100	; 0x64
 800fda6:	fb01 f303 	mul.w	r3, r1, r3
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	3332      	adds	r3, #50	; 0x32
 800fdb0:	4a27      	ldr	r2, [pc, #156]	; (800fe50 <UART_SetConfig+0x384>)
 800fdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdb6:	095b      	lsrs	r3, r3, #5
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fdbe:	4498      	add	r8, r3
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	461d      	mov	r5, r3
 800fdc4:	f04f 0600 	mov.w	r6, #0
 800fdc8:	46a9      	mov	r9, r5
 800fdca:	46b2      	mov	sl, r6
 800fdcc:	eb19 0309 	adds.w	r3, r9, r9
 800fdd0:	eb4a 040a 	adc.w	r4, sl, sl
 800fdd4:	4699      	mov	r9, r3
 800fdd6:	46a2      	mov	sl, r4
 800fdd8:	eb19 0905 	adds.w	r9, r9, r5
 800fddc:	eb4a 0a06 	adc.w	sl, sl, r6
 800fde0:	f04f 0100 	mov.w	r1, #0
 800fde4:	f04f 0200 	mov.w	r2, #0
 800fde8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdf4:	4689      	mov	r9, r1
 800fdf6:	4692      	mov	sl, r2
 800fdf8:	eb19 0005 	adds.w	r0, r9, r5
 800fdfc:	eb4a 0106 	adc.w	r1, sl, r6
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	461d      	mov	r5, r3
 800fe06:	f04f 0600 	mov.w	r6, #0
 800fe0a:	196b      	adds	r3, r5, r5
 800fe0c:	eb46 0406 	adc.w	r4, r6, r6
 800fe10:	461a      	mov	r2, r3
 800fe12:	4623      	mov	r3, r4
 800fe14:	f7f8 fe50 	bl	8008ab8 <__aeabi_uldivmod>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	4b0c      	ldr	r3, [pc, #48]	; (800fe50 <UART_SetConfig+0x384>)
 800fe20:	fba3 1302 	umull	r1, r3, r3, r2
 800fe24:	095b      	lsrs	r3, r3, #5
 800fe26:	2164      	movs	r1, #100	; 0x64
 800fe28:	fb01 f303 	mul.w	r3, r1, r3
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	00db      	lsls	r3, r3, #3
 800fe30:	3332      	adds	r3, #50	; 0x32
 800fe32:	4a07      	ldr	r2, [pc, #28]	; (800fe50 <UART_SetConfig+0x384>)
 800fe34:	fba2 2303 	umull	r2, r3, r2, r3
 800fe38:	095b      	lsrs	r3, r3, #5
 800fe3a:	f003 0207 	and.w	r2, r3, #7
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4442      	add	r2, r8
 800fe44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fe46:	e1b2      	b.n	80101ae <UART_SetConfig+0x6e2>
 800fe48:	40011000 	.word	0x40011000
 800fe4c:	40011400 	.word	0x40011400
 800fe50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4ad7      	ldr	r2, [pc, #860]	; (80101b8 <UART_SetConfig+0x6ec>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d005      	beq.n	800fe6a <UART_SetConfig+0x39e>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4ad6      	ldr	r2, [pc, #856]	; (80101bc <UART_SetConfig+0x6f0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	f040 80d1 	bne.w	801000c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe6a:	f7fe f945 	bl	800e0f8 <HAL_RCC_GetPCLK2Freq>
 800fe6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	469a      	mov	sl, r3
 800fe74:	f04f 0b00 	mov.w	fp, #0
 800fe78:	46d0      	mov	r8, sl
 800fe7a:	46d9      	mov	r9, fp
 800fe7c:	eb18 0308 	adds.w	r3, r8, r8
 800fe80:	eb49 0409 	adc.w	r4, r9, r9
 800fe84:	4698      	mov	r8, r3
 800fe86:	46a1      	mov	r9, r4
 800fe88:	eb18 080a 	adds.w	r8, r8, sl
 800fe8c:	eb49 090b 	adc.w	r9, r9, fp
 800fe90:	f04f 0100 	mov.w	r1, #0
 800fe94:	f04f 0200 	mov.w	r2, #0
 800fe98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fea0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fea4:	4688      	mov	r8, r1
 800fea6:	4691      	mov	r9, r2
 800fea8:	eb1a 0508 	adds.w	r5, sl, r8
 800feac:	eb4b 0609 	adc.w	r6, fp, r9
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	4619      	mov	r1, r3
 800feb6:	f04f 0200 	mov.w	r2, #0
 800feba:	f04f 0300 	mov.w	r3, #0
 800febe:	f04f 0400 	mov.w	r4, #0
 800fec2:	0094      	lsls	r4, r2, #2
 800fec4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fec8:	008b      	lsls	r3, r1, #2
 800feca:	461a      	mov	r2, r3
 800fecc:	4623      	mov	r3, r4
 800fece:	4628      	mov	r0, r5
 800fed0:	4631      	mov	r1, r6
 800fed2:	f7f8 fdf1 	bl	8008ab8 <__aeabi_uldivmod>
 800fed6:	4603      	mov	r3, r0
 800fed8:	460c      	mov	r4, r1
 800feda:	461a      	mov	r2, r3
 800fedc:	4bb8      	ldr	r3, [pc, #736]	; (80101c0 <UART_SetConfig+0x6f4>)
 800fede:	fba3 2302 	umull	r2, r3, r3, r2
 800fee2:	095b      	lsrs	r3, r3, #5
 800fee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	469b      	mov	fp, r3
 800feec:	f04f 0c00 	mov.w	ip, #0
 800fef0:	46d9      	mov	r9, fp
 800fef2:	46e2      	mov	sl, ip
 800fef4:	eb19 0309 	adds.w	r3, r9, r9
 800fef8:	eb4a 040a 	adc.w	r4, sl, sl
 800fefc:	4699      	mov	r9, r3
 800fefe:	46a2      	mov	sl, r4
 800ff00:	eb19 090b 	adds.w	r9, r9, fp
 800ff04:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff08:	f04f 0100 	mov.w	r1, #0
 800ff0c:	f04f 0200 	mov.w	r2, #0
 800ff10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff1c:	4689      	mov	r9, r1
 800ff1e:	4692      	mov	sl, r2
 800ff20:	eb1b 0509 	adds.w	r5, fp, r9
 800ff24:	eb4c 060a 	adc.w	r6, ip, sl
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	f04f 0200 	mov.w	r2, #0
 800ff32:	f04f 0300 	mov.w	r3, #0
 800ff36:	f04f 0400 	mov.w	r4, #0
 800ff3a:	0094      	lsls	r4, r2, #2
 800ff3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff40:	008b      	lsls	r3, r1, #2
 800ff42:	461a      	mov	r2, r3
 800ff44:	4623      	mov	r3, r4
 800ff46:	4628      	mov	r0, r5
 800ff48:	4631      	mov	r1, r6
 800ff4a:	f7f8 fdb5 	bl	8008ab8 <__aeabi_uldivmod>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	460c      	mov	r4, r1
 800ff52:	461a      	mov	r2, r3
 800ff54:	4b9a      	ldr	r3, [pc, #616]	; (80101c0 <UART_SetConfig+0x6f4>)
 800ff56:	fba3 1302 	umull	r1, r3, r3, r2
 800ff5a:	095b      	lsrs	r3, r3, #5
 800ff5c:	2164      	movs	r1, #100	; 0x64
 800ff5e:	fb01 f303 	mul.w	r3, r1, r3
 800ff62:	1ad3      	subs	r3, r2, r3
 800ff64:	011b      	lsls	r3, r3, #4
 800ff66:	3332      	adds	r3, #50	; 0x32
 800ff68:	4a95      	ldr	r2, [pc, #596]	; (80101c0 <UART_SetConfig+0x6f4>)
 800ff6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6e:	095b      	lsrs	r3, r3, #5
 800ff70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff74:	4498      	add	r8, r3
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	469b      	mov	fp, r3
 800ff7a:	f04f 0c00 	mov.w	ip, #0
 800ff7e:	46d9      	mov	r9, fp
 800ff80:	46e2      	mov	sl, ip
 800ff82:	eb19 0309 	adds.w	r3, r9, r9
 800ff86:	eb4a 040a 	adc.w	r4, sl, sl
 800ff8a:	4699      	mov	r9, r3
 800ff8c:	46a2      	mov	sl, r4
 800ff8e:	eb19 090b 	adds.w	r9, r9, fp
 800ff92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff96:	f04f 0100 	mov.w	r1, #0
 800ff9a:	f04f 0200 	mov.w	r2, #0
 800ff9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffaa:	4689      	mov	r9, r1
 800ffac:	4692      	mov	sl, r2
 800ffae:	eb1b 0509 	adds.w	r5, fp, r9
 800ffb2:	eb4c 060a 	adc.w	r6, ip, sl
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	4619      	mov	r1, r3
 800ffbc:	f04f 0200 	mov.w	r2, #0
 800ffc0:	f04f 0300 	mov.w	r3, #0
 800ffc4:	f04f 0400 	mov.w	r4, #0
 800ffc8:	0094      	lsls	r4, r2, #2
 800ffca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ffce:	008b      	lsls	r3, r1, #2
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	4623      	mov	r3, r4
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	f7f8 fd6e 	bl	8008ab8 <__aeabi_uldivmod>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	460c      	mov	r4, r1
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	4b77      	ldr	r3, [pc, #476]	; (80101c0 <UART_SetConfig+0x6f4>)
 800ffe4:	fba3 1302 	umull	r1, r3, r3, r2
 800ffe8:	095b      	lsrs	r3, r3, #5
 800ffea:	2164      	movs	r1, #100	; 0x64
 800ffec:	fb01 f303 	mul.w	r3, r1, r3
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	011b      	lsls	r3, r3, #4
 800fff4:	3332      	adds	r3, #50	; 0x32
 800fff6:	4a72      	ldr	r2, [pc, #456]	; (80101c0 <UART_SetConfig+0x6f4>)
 800fff8:	fba2 2303 	umull	r2, r3, r2, r3
 800fffc:	095b      	lsrs	r3, r3, #5
 800fffe:	f003 020f 	and.w	r2, r3, #15
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4442      	add	r2, r8
 8010008:	609a      	str	r2, [r3, #8]
 801000a:	e0d0      	b.n	80101ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801000c:	f7fe f860 	bl	800e0d0 <HAL_RCC_GetPCLK1Freq>
 8010010:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	469a      	mov	sl, r3
 8010016:	f04f 0b00 	mov.w	fp, #0
 801001a:	46d0      	mov	r8, sl
 801001c:	46d9      	mov	r9, fp
 801001e:	eb18 0308 	adds.w	r3, r8, r8
 8010022:	eb49 0409 	adc.w	r4, r9, r9
 8010026:	4698      	mov	r8, r3
 8010028:	46a1      	mov	r9, r4
 801002a:	eb18 080a 	adds.w	r8, r8, sl
 801002e:	eb49 090b 	adc.w	r9, r9, fp
 8010032:	f04f 0100 	mov.w	r1, #0
 8010036:	f04f 0200 	mov.w	r2, #0
 801003a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801003e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010042:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010046:	4688      	mov	r8, r1
 8010048:	4691      	mov	r9, r2
 801004a:	eb1a 0508 	adds.w	r5, sl, r8
 801004e:	eb4b 0609 	adc.w	r6, fp, r9
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	4619      	mov	r1, r3
 8010058:	f04f 0200 	mov.w	r2, #0
 801005c:	f04f 0300 	mov.w	r3, #0
 8010060:	f04f 0400 	mov.w	r4, #0
 8010064:	0094      	lsls	r4, r2, #2
 8010066:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801006a:	008b      	lsls	r3, r1, #2
 801006c:	461a      	mov	r2, r3
 801006e:	4623      	mov	r3, r4
 8010070:	4628      	mov	r0, r5
 8010072:	4631      	mov	r1, r6
 8010074:	f7f8 fd20 	bl	8008ab8 <__aeabi_uldivmod>
 8010078:	4603      	mov	r3, r0
 801007a:	460c      	mov	r4, r1
 801007c:	461a      	mov	r2, r3
 801007e:	4b50      	ldr	r3, [pc, #320]	; (80101c0 <UART_SetConfig+0x6f4>)
 8010080:	fba3 2302 	umull	r2, r3, r3, r2
 8010084:	095b      	lsrs	r3, r3, #5
 8010086:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	469b      	mov	fp, r3
 801008e:	f04f 0c00 	mov.w	ip, #0
 8010092:	46d9      	mov	r9, fp
 8010094:	46e2      	mov	sl, ip
 8010096:	eb19 0309 	adds.w	r3, r9, r9
 801009a:	eb4a 040a 	adc.w	r4, sl, sl
 801009e:	4699      	mov	r9, r3
 80100a0:	46a2      	mov	sl, r4
 80100a2:	eb19 090b 	adds.w	r9, r9, fp
 80100a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80100aa:	f04f 0100 	mov.w	r1, #0
 80100ae:	f04f 0200 	mov.w	r2, #0
 80100b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100be:	4689      	mov	r9, r1
 80100c0:	4692      	mov	sl, r2
 80100c2:	eb1b 0509 	adds.w	r5, fp, r9
 80100c6:	eb4c 060a 	adc.w	r6, ip, sl
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	4619      	mov	r1, r3
 80100d0:	f04f 0200 	mov.w	r2, #0
 80100d4:	f04f 0300 	mov.w	r3, #0
 80100d8:	f04f 0400 	mov.w	r4, #0
 80100dc:	0094      	lsls	r4, r2, #2
 80100de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100e2:	008b      	lsls	r3, r1, #2
 80100e4:	461a      	mov	r2, r3
 80100e6:	4623      	mov	r3, r4
 80100e8:	4628      	mov	r0, r5
 80100ea:	4631      	mov	r1, r6
 80100ec:	f7f8 fce4 	bl	8008ab8 <__aeabi_uldivmod>
 80100f0:	4603      	mov	r3, r0
 80100f2:	460c      	mov	r4, r1
 80100f4:	461a      	mov	r2, r3
 80100f6:	4b32      	ldr	r3, [pc, #200]	; (80101c0 <UART_SetConfig+0x6f4>)
 80100f8:	fba3 1302 	umull	r1, r3, r3, r2
 80100fc:	095b      	lsrs	r3, r3, #5
 80100fe:	2164      	movs	r1, #100	; 0x64
 8010100:	fb01 f303 	mul.w	r3, r1, r3
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	011b      	lsls	r3, r3, #4
 8010108:	3332      	adds	r3, #50	; 0x32
 801010a:	4a2d      	ldr	r2, [pc, #180]	; (80101c0 <UART_SetConfig+0x6f4>)
 801010c:	fba2 2303 	umull	r2, r3, r2, r3
 8010110:	095b      	lsrs	r3, r3, #5
 8010112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010116:	4498      	add	r8, r3
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	469b      	mov	fp, r3
 801011c:	f04f 0c00 	mov.w	ip, #0
 8010120:	46d9      	mov	r9, fp
 8010122:	46e2      	mov	sl, ip
 8010124:	eb19 0309 	adds.w	r3, r9, r9
 8010128:	eb4a 040a 	adc.w	r4, sl, sl
 801012c:	4699      	mov	r9, r3
 801012e:	46a2      	mov	sl, r4
 8010130:	eb19 090b 	adds.w	r9, r9, fp
 8010134:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010138:	f04f 0100 	mov.w	r1, #0
 801013c:	f04f 0200 	mov.w	r2, #0
 8010140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801014c:	4689      	mov	r9, r1
 801014e:	4692      	mov	sl, r2
 8010150:	eb1b 0509 	adds.w	r5, fp, r9
 8010154:	eb4c 060a 	adc.w	r6, ip, sl
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	4619      	mov	r1, r3
 801015e:	f04f 0200 	mov.w	r2, #0
 8010162:	f04f 0300 	mov.w	r3, #0
 8010166:	f04f 0400 	mov.w	r4, #0
 801016a:	0094      	lsls	r4, r2, #2
 801016c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010170:	008b      	lsls	r3, r1, #2
 8010172:	461a      	mov	r2, r3
 8010174:	4623      	mov	r3, r4
 8010176:	4628      	mov	r0, r5
 8010178:	4631      	mov	r1, r6
 801017a:	f7f8 fc9d 	bl	8008ab8 <__aeabi_uldivmod>
 801017e:	4603      	mov	r3, r0
 8010180:	460c      	mov	r4, r1
 8010182:	461a      	mov	r2, r3
 8010184:	4b0e      	ldr	r3, [pc, #56]	; (80101c0 <UART_SetConfig+0x6f4>)
 8010186:	fba3 1302 	umull	r1, r3, r3, r2
 801018a:	095b      	lsrs	r3, r3, #5
 801018c:	2164      	movs	r1, #100	; 0x64
 801018e:	fb01 f303 	mul.w	r3, r1, r3
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	011b      	lsls	r3, r3, #4
 8010196:	3332      	adds	r3, #50	; 0x32
 8010198:	4a09      	ldr	r2, [pc, #36]	; (80101c0 <UART_SetConfig+0x6f4>)
 801019a:	fba2 2303 	umull	r2, r3, r2, r3
 801019e:	095b      	lsrs	r3, r3, #5
 80101a0:	f003 020f 	and.w	r2, r3, #15
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4442      	add	r2, r8
 80101aa:	609a      	str	r2, [r3, #8]
}
 80101ac:	e7ff      	b.n	80101ae <UART_SetConfig+0x6e2>
 80101ae:	bf00      	nop
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b8:	40011000 	.word	0x40011000
 80101bc:	40011400 	.word	0x40011400
 80101c0:	51eb851f 	.word	0x51eb851f

080101c4 <round>:
 80101c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c6:	ec57 6b10 	vmov	r6, r7, d0
 80101ca:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80101ce:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80101d2:	2c13      	cmp	r4, #19
 80101d4:	463b      	mov	r3, r7
 80101d6:	463d      	mov	r5, r7
 80101d8:	dc17      	bgt.n	801020a <round+0x46>
 80101da:	2c00      	cmp	r4, #0
 80101dc:	da09      	bge.n	80101f2 <round+0x2e>
 80101de:	3401      	adds	r4, #1
 80101e0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80101e4:	d103      	bne.n	80101ee <round+0x2a>
 80101e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80101ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80101ee:	2100      	movs	r1, #0
 80101f0:	e02c      	b.n	801024c <round+0x88>
 80101f2:	4a18      	ldr	r2, [pc, #96]	; (8010254 <round+0x90>)
 80101f4:	4122      	asrs	r2, r4
 80101f6:	4217      	tst	r7, r2
 80101f8:	d100      	bne.n	80101fc <round+0x38>
 80101fa:	b19e      	cbz	r6, 8010224 <round+0x60>
 80101fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010200:	4123      	asrs	r3, r4
 8010202:	442b      	add	r3, r5
 8010204:	ea23 0302 	bic.w	r3, r3, r2
 8010208:	e7f1      	b.n	80101ee <round+0x2a>
 801020a:	2c33      	cmp	r4, #51	; 0x33
 801020c:	dd0d      	ble.n	801022a <round+0x66>
 801020e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010212:	d107      	bne.n	8010224 <round+0x60>
 8010214:	4630      	mov	r0, r6
 8010216:	4639      	mov	r1, r7
 8010218:	ee10 2a10 	vmov	r2, s0
 801021c:	f7f7 ff6e 	bl	80080fc <__adddf3>
 8010220:	4606      	mov	r6, r0
 8010222:	460f      	mov	r7, r1
 8010224:	ec47 6b10 	vmov	d0, r6, r7
 8010228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801022e:	f04f 30ff 	mov.w	r0, #4294967295
 8010232:	40d0      	lsrs	r0, r2
 8010234:	4206      	tst	r6, r0
 8010236:	d0f5      	beq.n	8010224 <round+0x60>
 8010238:	2201      	movs	r2, #1
 801023a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801023e:	fa02 f404 	lsl.w	r4, r2, r4
 8010242:	1931      	adds	r1, r6, r4
 8010244:	bf28      	it	cs
 8010246:	189b      	addcs	r3, r3, r2
 8010248:	ea21 0100 	bic.w	r1, r1, r0
 801024c:	461f      	mov	r7, r3
 801024e:	460e      	mov	r6, r1
 8010250:	e7e8      	b.n	8010224 <round+0x60>
 8010252:	bf00      	nop
 8010254:	000fffff 	.word	0x000fffff

08010258 <__errno>:
 8010258:	4b01      	ldr	r3, [pc, #4]	; (8010260 <__errno+0x8>)
 801025a:	6818      	ldr	r0, [r3, #0]
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	2000000c 	.word	0x2000000c

08010264 <__libc_init_array>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4e0d      	ldr	r6, [pc, #52]	; (801029c <__libc_init_array+0x38>)
 8010268:	4c0d      	ldr	r4, [pc, #52]	; (80102a0 <__libc_init_array+0x3c>)
 801026a:	1ba4      	subs	r4, r4, r6
 801026c:	10a4      	asrs	r4, r4, #2
 801026e:	2500      	movs	r5, #0
 8010270:	42a5      	cmp	r5, r4
 8010272:	d109      	bne.n	8010288 <__libc_init_array+0x24>
 8010274:	4e0b      	ldr	r6, [pc, #44]	; (80102a4 <__libc_init_array+0x40>)
 8010276:	4c0c      	ldr	r4, [pc, #48]	; (80102a8 <__libc_init_array+0x44>)
 8010278:	f002 fbae 	bl	80129d8 <_init>
 801027c:	1ba4      	subs	r4, r4, r6
 801027e:	10a4      	asrs	r4, r4, #2
 8010280:	2500      	movs	r5, #0
 8010282:	42a5      	cmp	r5, r4
 8010284:	d105      	bne.n	8010292 <__libc_init_array+0x2e>
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801028c:	4798      	blx	r3
 801028e:	3501      	adds	r5, #1
 8010290:	e7ee      	b.n	8010270 <__libc_init_array+0xc>
 8010292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010296:	4798      	blx	r3
 8010298:	3501      	adds	r5, #1
 801029a:	e7f2      	b.n	8010282 <__libc_init_array+0x1e>
 801029c:	08012d48 	.word	0x08012d48
 80102a0:	08012d48 	.word	0x08012d48
 80102a4:	08012d48 	.word	0x08012d48
 80102a8:	08012d4c 	.word	0x08012d4c

080102ac <memcpy>:
 80102ac:	b510      	push	{r4, lr}
 80102ae:	1e43      	subs	r3, r0, #1
 80102b0:	440a      	add	r2, r1
 80102b2:	4291      	cmp	r1, r2
 80102b4:	d100      	bne.n	80102b8 <memcpy+0xc>
 80102b6:	bd10      	pop	{r4, pc}
 80102b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102c0:	e7f7      	b.n	80102b2 <memcpy+0x6>

080102c2 <memset>:
 80102c2:	4402      	add	r2, r0
 80102c4:	4603      	mov	r3, r0
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d100      	bne.n	80102cc <memset+0xa>
 80102ca:	4770      	bx	lr
 80102cc:	f803 1b01 	strb.w	r1, [r3], #1
 80102d0:	e7f9      	b.n	80102c6 <memset+0x4>

080102d2 <__cvt>:
 80102d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102d6:	ec55 4b10 	vmov	r4, r5, d0
 80102da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80102dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80102e0:	2d00      	cmp	r5, #0
 80102e2:	460e      	mov	r6, r1
 80102e4:	4691      	mov	r9, r2
 80102e6:	4619      	mov	r1, r3
 80102e8:	bfb8      	it	lt
 80102ea:	4622      	movlt	r2, r4
 80102ec:	462b      	mov	r3, r5
 80102ee:	f027 0720 	bic.w	r7, r7, #32
 80102f2:	bfbb      	ittet	lt
 80102f4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80102f8:	461d      	movlt	r5, r3
 80102fa:	2300      	movge	r3, #0
 80102fc:	232d      	movlt	r3, #45	; 0x2d
 80102fe:	bfb8      	it	lt
 8010300:	4614      	movlt	r4, r2
 8010302:	2f46      	cmp	r7, #70	; 0x46
 8010304:	700b      	strb	r3, [r1, #0]
 8010306:	d004      	beq.n	8010312 <__cvt+0x40>
 8010308:	2f45      	cmp	r7, #69	; 0x45
 801030a:	d100      	bne.n	801030e <__cvt+0x3c>
 801030c:	3601      	adds	r6, #1
 801030e:	2102      	movs	r1, #2
 8010310:	e000      	b.n	8010314 <__cvt+0x42>
 8010312:	2103      	movs	r1, #3
 8010314:	ab03      	add	r3, sp, #12
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	ab02      	add	r3, sp, #8
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	4632      	mov	r2, r6
 801031e:	4653      	mov	r3, sl
 8010320:	ec45 4b10 	vmov	d0, r4, r5
 8010324:	f000 fdfc 	bl	8010f20 <_dtoa_r>
 8010328:	2f47      	cmp	r7, #71	; 0x47
 801032a:	4680      	mov	r8, r0
 801032c:	d102      	bne.n	8010334 <__cvt+0x62>
 801032e:	f019 0f01 	tst.w	r9, #1
 8010332:	d026      	beq.n	8010382 <__cvt+0xb0>
 8010334:	2f46      	cmp	r7, #70	; 0x46
 8010336:	eb08 0906 	add.w	r9, r8, r6
 801033a:	d111      	bne.n	8010360 <__cvt+0x8e>
 801033c:	f898 3000 	ldrb.w	r3, [r8]
 8010340:	2b30      	cmp	r3, #48	; 0x30
 8010342:	d10a      	bne.n	801035a <__cvt+0x88>
 8010344:	2200      	movs	r2, #0
 8010346:	2300      	movs	r3, #0
 8010348:	4620      	mov	r0, r4
 801034a:	4629      	mov	r1, r5
 801034c:	f7f8 faf4 	bl	8008938 <__aeabi_dcmpeq>
 8010350:	b918      	cbnz	r0, 801035a <__cvt+0x88>
 8010352:	f1c6 0601 	rsb	r6, r6, #1
 8010356:	f8ca 6000 	str.w	r6, [sl]
 801035a:	f8da 3000 	ldr.w	r3, [sl]
 801035e:	4499      	add	r9, r3
 8010360:	2200      	movs	r2, #0
 8010362:	2300      	movs	r3, #0
 8010364:	4620      	mov	r0, r4
 8010366:	4629      	mov	r1, r5
 8010368:	f7f8 fae6 	bl	8008938 <__aeabi_dcmpeq>
 801036c:	b938      	cbnz	r0, 801037e <__cvt+0xac>
 801036e:	2230      	movs	r2, #48	; 0x30
 8010370:	9b03      	ldr	r3, [sp, #12]
 8010372:	454b      	cmp	r3, r9
 8010374:	d205      	bcs.n	8010382 <__cvt+0xb0>
 8010376:	1c59      	adds	r1, r3, #1
 8010378:	9103      	str	r1, [sp, #12]
 801037a:	701a      	strb	r2, [r3, #0]
 801037c:	e7f8      	b.n	8010370 <__cvt+0x9e>
 801037e:	f8cd 900c 	str.w	r9, [sp, #12]
 8010382:	9b03      	ldr	r3, [sp, #12]
 8010384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010386:	eba3 0308 	sub.w	r3, r3, r8
 801038a:	4640      	mov	r0, r8
 801038c:	6013      	str	r3, [r2, #0]
 801038e:	b004      	add	sp, #16
 8010390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010394 <__exponent>:
 8010394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010396:	2900      	cmp	r1, #0
 8010398:	4604      	mov	r4, r0
 801039a:	bfba      	itte	lt
 801039c:	4249      	neglt	r1, r1
 801039e:	232d      	movlt	r3, #45	; 0x2d
 80103a0:	232b      	movge	r3, #43	; 0x2b
 80103a2:	2909      	cmp	r1, #9
 80103a4:	f804 2b02 	strb.w	r2, [r4], #2
 80103a8:	7043      	strb	r3, [r0, #1]
 80103aa:	dd20      	ble.n	80103ee <__exponent+0x5a>
 80103ac:	f10d 0307 	add.w	r3, sp, #7
 80103b0:	461f      	mov	r7, r3
 80103b2:	260a      	movs	r6, #10
 80103b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80103b8:	fb06 1115 	mls	r1, r6, r5, r1
 80103bc:	3130      	adds	r1, #48	; 0x30
 80103be:	2d09      	cmp	r5, #9
 80103c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80103c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80103c8:	4629      	mov	r1, r5
 80103ca:	dc09      	bgt.n	80103e0 <__exponent+0x4c>
 80103cc:	3130      	adds	r1, #48	; 0x30
 80103ce:	3b02      	subs	r3, #2
 80103d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80103d4:	42bb      	cmp	r3, r7
 80103d6:	4622      	mov	r2, r4
 80103d8:	d304      	bcc.n	80103e4 <__exponent+0x50>
 80103da:	1a10      	subs	r0, r2, r0
 80103dc:	b003      	add	sp, #12
 80103de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103e0:	4613      	mov	r3, r2
 80103e2:	e7e7      	b.n	80103b4 <__exponent+0x20>
 80103e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e8:	f804 2b01 	strb.w	r2, [r4], #1
 80103ec:	e7f2      	b.n	80103d4 <__exponent+0x40>
 80103ee:	2330      	movs	r3, #48	; 0x30
 80103f0:	4419      	add	r1, r3
 80103f2:	7083      	strb	r3, [r0, #2]
 80103f4:	1d02      	adds	r2, r0, #4
 80103f6:	70c1      	strb	r1, [r0, #3]
 80103f8:	e7ef      	b.n	80103da <__exponent+0x46>
	...

080103fc <_printf_float>:
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	b08d      	sub	sp, #52	; 0x34
 8010402:	460c      	mov	r4, r1
 8010404:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010408:	4616      	mov	r6, r2
 801040a:	461f      	mov	r7, r3
 801040c:	4605      	mov	r5, r0
 801040e:	f001 fcb9 	bl	8011d84 <_localeconv_r>
 8010412:	6803      	ldr	r3, [r0, #0]
 8010414:	9304      	str	r3, [sp, #16]
 8010416:	4618      	mov	r0, r3
 8010418:	f7f7 fe12 	bl	8008040 <strlen>
 801041c:	2300      	movs	r3, #0
 801041e:	930a      	str	r3, [sp, #40]	; 0x28
 8010420:	f8d8 3000 	ldr.w	r3, [r8]
 8010424:	9005      	str	r0, [sp, #20]
 8010426:	3307      	adds	r3, #7
 8010428:	f023 0307 	bic.w	r3, r3, #7
 801042c:	f103 0208 	add.w	r2, r3, #8
 8010430:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010434:	f8d4 b000 	ldr.w	fp, [r4]
 8010438:	f8c8 2000 	str.w	r2, [r8]
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010444:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010448:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801044c:	9307      	str	r3, [sp, #28]
 801044e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010452:	f04f 32ff 	mov.w	r2, #4294967295
 8010456:	4ba7      	ldr	r3, [pc, #668]	; (80106f4 <_printf_float+0x2f8>)
 8010458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801045c:	f7f8 fa9e 	bl	800899c <__aeabi_dcmpun>
 8010460:	bb70      	cbnz	r0, 80104c0 <_printf_float+0xc4>
 8010462:	f04f 32ff 	mov.w	r2, #4294967295
 8010466:	4ba3      	ldr	r3, [pc, #652]	; (80106f4 <_printf_float+0x2f8>)
 8010468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801046c:	f7f8 fa78 	bl	8008960 <__aeabi_dcmple>
 8010470:	bb30      	cbnz	r0, 80104c0 <_printf_float+0xc4>
 8010472:	2200      	movs	r2, #0
 8010474:	2300      	movs	r3, #0
 8010476:	4640      	mov	r0, r8
 8010478:	4649      	mov	r1, r9
 801047a:	f7f8 fa67 	bl	800894c <__aeabi_dcmplt>
 801047e:	b110      	cbz	r0, 8010486 <_printf_float+0x8a>
 8010480:	232d      	movs	r3, #45	; 0x2d
 8010482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010486:	4a9c      	ldr	r2, [pc, #624]	; (80106f8 <_printf_float+0x2fc>)
 8010488:	4b9c      	ldr	r3, [pc, #624]	; (80106fc <_printf_float+0x300>)
 801048a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801048e:	bf8c      	ite	hi
 8010490:	4690      	movhi	r8, r2
 8010492:	4698      	movls	r8, r3
 8010494:	2303      	movs	r3, #3
 8010496:	f02b 0204 	bic.w	r2, fp, #4
 801049a:	6123      	str	r3, [r4, #16]
 801049c:	6022      	str	r2, [r4, #0]
 801049e:	f04f 0900 	mov.w	r9, #0
 80104a2:	9700      	str	r7, [sp, #0]
 80104a4:	4633      	mov	r3, r6
 80104a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80104a8:	4621      	mov	r1, r4
 80104aa:	4628      	mov	r0, r5
 80104ac:	f000 f9e6 	bl	801087c <_printf_common>
 80104b0:	3001      	adds	r0, #1
 80104b2:	f040 808d 	bne.w	80105d0 <_printf_float+0x1d4>
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ba:	b00d      	add	sp, #52	; 0x34
 80104bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c0:	4642      	mov	r2, r8
 80104c2:	464b      	mov	r3, r9
 80104c4:	4640      	mov	r0, r8
 80104c6:	4649      	mov	r1, r9
 80104c8:	f7f8 fa68 	bl	800899c <__aeabi_dcmpun>
 80104cc:	b110      	cbz	r0, 80104d4 <_printf_float+0xd8>
 80104ce:	4a8c      	ldr	r2, [pc, #560]	; (8010700 <_printf_float+0x304>)
 80104d0:	4b8c      	ldr	r3, [pc, #560]	; (8010704 <_printf_float+0x308>)
 80104d2:	e7da      	b.n	801048a <_printf_float+0x8e>
 80104d4:	6861      	ldr	r1, [r4, #4]
 80104d6:	1c4b      	adds	r3, r1, #1
 80104d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80104dc:	a80a      	add	r0, sp, #40	; 0x28
 80104de:	d13e      	bne.n	801055e <_printf_float+0x162>
 80104e0:	2306      	movs	r3, #6
 80104e2:	6063      	str	r3, [r4, #4]
 80104e4:	2300      	movs	r3, #0
 80104e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80104ea:	ab09      	add	r3, sp, #36	; 0x24
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	ec49 8b10 	vmov	d0, r8, r9
 80104f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80104f6:	6022      	str	r2, [r4, #0]
 80104f8:	f8cd a004 	str.w	sl, [sp, #4]
 80104fc:	6861      	ldr	r1, [r4, #4]
 80104fe:	4628      	mov	r0, r5
 8010500:	f7ff fee7 	bl	80102d2 <__cvt>
 8010504:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010508:	2b47      	cmp	r3, #71	; 0x47
 801050a:	4680      	mov	r8, r0
 801050c:	d109      	bne.n	8010522 <_printf_float+0x126>
 801050e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010510:	1cd8      	adds	r0, r3, #3
 8010512:	db02      	blt.n	801051a <_printf_float+0x11e>
 8010514:	6862      	ldr	r2, [r4, #4]
 8010516:	4293      	cmp	r3, r2
 8010518:	dd47      	ble.n	80105aa <_printf_float+0x1ae>
 801051a:	f1aa 0a02 	sub.w	sl, sl, #2
 801051e:	fa5f fa8a 	uxtb.w	sl, sl
 8010522:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010528:	d824      	bhi.n	8010574 <_printf_float+0x178>
 801052a:	3901      	subs	r1, #1
 801052c:	4652      	mov	r2, sl
 801052e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010532:	9109      	str	r1, [sp, #36]	; 0x24
 8010534:	f7ff ff2e 	bl	8010394 <__exponent>
 8010538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801053a:	1813      	adds	r3, r2, r0
 801053c:	2a01      	cmp	r2, #1
 801053e:	4681      	mov	r9, r0
 8010540:	6123      	str	r3, [r4, #16]
 8010542:	dc02      	bgt.n	801054a <_printf_float+0x14e>
 8010544:	6822      	ldr	r2, [r4, #0]
 8010546:	07d1      	lsls	r1, r2, #31
 8010548:	d501      	bpl.n	801054e <_printf_float+0x152>
 801054a:	3301      	adds	r3, #1
 801054c:	6123      	str	r3, [r4, #16]
 801054e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0a5      	beq.n	80104a2 <_printf_float+0xa6>
 8010556:	232d      	movs	r3, #45	; 0x2d
 8010558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801055c:	e7a1      	b.n	80104a2 <_printf_float+0xa6>
 801055e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010562:	f000 8177 	beq.w	8010854 <_printf_float+0x458>
 8010566:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801056a:	d1bb      	bne.n	80104e4 <_printf_float+0xe8>
 801056c:	2900      	cmp	r1, #0
 801056e:	d1b9      	bne.n	80104e4 <_printf_float+0xe8>
 8010570:	2301      	movs	r3, #1
 8010572:	e7b6      	b.n	80104e2 <_printf_float+0xe6>
 8010574:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010578:	d119      	bne.n	80105ae <_printf_float+0x1b2>
 801057a:	2900      	cmp	r1, #0
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	dd0c      	ble.n	801059a <_printf_float+0x19e>
 8010580:	6121      	str	r1, [r4, #16]
 8010582:	b913      	cbnz	r3, 801058a <_printf_float+0x18e>
 8010584:	6822      	ldr	r2, [r4, #0]
 8010586:	07d2      	lsls	r2, r2, #31
 8010588:	d502      	bpl.n	8010590 <_printf_float+0x194>
 801058a:	3301      	adds	r3, #1
 801058c:	440b      	add	r3, r1
 801058e:	6123      	str	r3, [r4, #16]
 8010590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010592:	65a3      	str	r3, [r4, #88]	; 0x58
 8010594:	f04f 0900 	mov.w	r9, #0
 8010598:	e7d9      	b.n	801054e <_printf_float+0x152>
 801059a:	b913      	cbnz	r3, 80105a2 <_printf_float+0x1a6>
 801059c:	6822      	ldr	r2, [r4, #0]
 801059e:	07d0      	lsls	r0, r2, #31
 80105a0:	d501      	bpl.n	80105a6 <_printf_float+0x1aa>
 80105a2:	3302      	adds	r3, #2
 80105a4:	e7f3      	b.n	801058e <_printf_float+0x192>
 80105a6:	2301      	movs	r3, #1
 80105a8:	e7f1      	b.n	801058e <_printf_float+0x192>
 80105aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80105ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80105b2:	4293      	cmp	r3, r2
 80105b4:	db05      	blt.n	80105c2 <_printf_float+0x1c6>
 80105b6:	6822      	ldr	r2, [r4, #0]
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	07d1      	lsls	r1, r2, #31
 80105bc:	d5e8      	bpl.n	8010590 <_printf_float+0x194>
 80105be:	3301      	adds	r3, #1
 80105c0:	e7e5      	b.n	801058e <_printf_float+0x192>
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	bfd4      	ite	le
 80105c6:	f1c3 0302 	rsble	r3, r3, #2
 80105ca:	2301      	movgt	r3, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	e7de      	b.n	801058e <_printf_float+0x192>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	055a      	lsls	r2, r3, #21
 80105d4:	d407      	bmi.n	80105e6 <_printf_float+0x1ea>
 80105d6:	6923      	ldr	r3, [r4, #16]
 80105d8:	4642      	mov	r2, r8
 80105da:	4631      	mov	r1, r6
 80105dc:	4628      	mov	r0, r5
 80105de:	47b8      	blx	r7
 80105e0:	3001      	adds	r0, #1
 80105e2:	d12b      	bne.n	801063c <_printf_float+0x240>
 80105e4:	e767      	b.n	80104b6 <_printf_float+0xba>
 80105e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80105ea:	f240 80dc 	bls.w	80107a6 <_printf_float+0x3aa>
 80105ee:	2200      	movs	r2, #0
 80105f0:	2300      	movs	r3, #0
 80105f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105f6:	f7f8 f99f 	bl	8008938 <__aeabi_dcmpeq>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	d033      	beq.n	8010666 <_printf_float+0x26a>
 80105fe:	2301      	movs	r3, #1
 8010600:	4a41      	ldr	r2, [pc, #260]	; (8010708 <_printf_float+0x30c>)
 8010602:	4631      	mov	r1, r6
 8010604:	4628      	mov	r0, r5
 8010606:	47b8      	blx	r7
 8010608:	3001      	adds	r0, #1
 801060a:	f43f af54 	beq.w	80104b6 <_printf_float+0xba>
 801060e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010612:	429a      	cmp	r2, r3
 8010614:	db02      	blt.n	801061c <_printf_float+0x220>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	07d8      	lsls	r0, r3, #31
 801061a:	d50f      	bpl.n	801063c <_printf_float+0x240>
 801061c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010620:	4631      	mov	r1, r6
 8010622:	4628      	mov	r0, r5
 8010624:	47b8      	blx	r7
 8010626:	3001      	adds	r0, #1
 8010628:	f43f af45 	beq.w	80104b6 <_printf_float+0xba>
 801062c:	f04f 0800 	mov.w	r8, #0
 8010630:	f104 091a 	add.w	r9, r4, #26
 8010634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010636:	3b01      	subs	r3, #1
 8010638:	4543      	cmp	r3, r8
 801063a:	dc09      	bgt.n	8010650 <_printf_float+0x254>
 801063c:	6823      	ldr	r3, [r4, #0]
 801063e:	079b      	lsls	r3, r3, #30
 8010640:	f100 8103 	bmi.w	801084a <_printf_float+0x44e>
 8010644:	68e0      	ldr	r0, [r4, #12]
 8010646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010648:	4298      	cmp	r0, r3
 801064a:	bfb8      	it	lt
 801064c:	4618      	movlt	r0, r3
 801064e:	e734      	b.n	80104ba <_printf_float+0xbe>
 8010650:	2301      	movs	r3, #1
 8010652:	464a      	mov	r2, r9
 8010654:	4631      	mov	r1, r6
 8010656:	4628      	mov	r0, r5
 8010658:	47b8      	blx	r7
 801065a:	3001      	adds	r0, #1
 801065c:	f43f af2b 	beq.w	80104b6 <_printf_float+0xba>
 8010660:	f108 0801 	add.w	r8, r8, #1
 8010664:	e7e6      	b.n	8010634 <_printf_float+0x238>
 8010666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010668:	2b00      	cmp	r3, #0
 801066a:	dc2b      	bgt.n	80106c4 <_printf_float+0x2c8>
 801066c:	2301      	movs	r3, #1
 801066e:	4a26      	ldr	r2, [pc, #152]	; (8010708 <_printf_float+0x30c>)
 8010670:	4631      	mov	r1, r6
 8010672:	4628      	mov	r0, r5
 8010674:	47b8      	blx	r7
 8010676:	3001      	adds	r0, #1
 8010678:	f43f af1d 	beq.w	80104b6 <_printf_float+0xba>
 801067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801067e:	b923      	cbnz	r3, 801068a <_printf_float+0x28e>
 8010680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010682:	b913      	cbnz	r3, 801068a <_printf_float+0x28e>
 8010684:	6823      	ldr	r3, [r4, #0]
 8010686:	07d9      	lsls	r1, r3, #31
 8010688:	d5d8      	bpl.n	801063c <_printf_float+0x240>
 801068a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801068e:	4631      	mov	r1, r6
 8010690:	4628      	mov	r0, r5
 8010692:	47b8      	blx	r7
 8010694:	3001      	adds	r0, #1
 8010696:	f43f af0e 	beq.w	80104b6 <_printf_float+0xba>
 801069a:	f04f 0900 	mov.w	r9, #0
 801069e:	f104 0a1a 	add.w	sl, r4, #26
 80106a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a4:	425b      	negs	r3, r3
 80106a6:	454b      	cmp	r3, r9
 80106a8:	dc01      	bgt.n	80106ae <_printf_float+0x2b2>
 80106aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ac:	e794      	b.n	80105d8 <_printf_float+0x1dc>
 80106ae:	2301      	movs	r3, #1
 80106b0:	4652      	mov	r2, sl
 80106b2:	4631      	mov	r1, r6
 80106b4:	4628      	mov	r0, r5
 80106b6:	47b8      	blx	r7
 80106b8:	3001      	adds	r0, #1
 80106ba:	f43f aefc 	beq.w	80104b6 <_printf_float+0xba>
 80106be:	f109 0901 	add.w	r9, r9, #1
 80106c2:	e7ee      	b.n	80106a2 <_printf_float+0x2a6>
 80106c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106c8:	429a      	cmp	r2, r3
 80106ca:	bfa8      	it	ge
 80106cc:	461a      	movge	r2, r3
 80106ce:	2a00      	cmp	r2, #0
 80106d0:	4691      	mov	r9, r2
 80106d2:	dd07      	ble.n	80106e4 <_printf_float+0x2e8>
 80106d4:	4613      	mov	r3, r2
 80106d6:	4631      	mov	r1, r6
 80106d8:	4642      	mov	r2, r8
 80106da:	4628      	mov	r0, r5
 80106dc:	47b8      	blx	r7
 80106de:	3001      	adds	r0, #1
 80106e0:	f43f aee9 	beq.w	80104b6 <_printf_float+0xba>
 80106e4:	f104 031a 	add.w	r3, r4, #26
 80106e8:	f04f 0b00 	mov.w	fp, #0
 80106ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106f0:	9306      	str	r3, [sp, #24]
 80106f2:	e015      	b.n	8010720 <_printf_float+0x324>
 80106f4:	7fefffff 	.word	0x7fefffff
 80106f8:	08012a88 	.word	0x08012a88
 80106fc:	08012a84 	.word	0x08012a84
 8010700:	08012a90 	.word	0x08012a90
 8010704:	08012a8c 	.word	0x08012a8c
 8010708:	08012a94 	.word	0x08012a94
 801070c:	2301      	movs	r3, #1
 801070e:	9a06      	ldr	r2, [sp, #24]
 8010710:	4631      	mov	r1, r6
 8010712:	4628      	mov	r0, r5
 8010714:	47b8      	blx	r7
 8010716:	3001      	adds	r0, #1
 8010718:	f43f aecd 	beq.w	80104b6 <_printf_float+0xba>
 801071c:	f10b 0b01 	add.w	fp, fp, #1
 8010720:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010724:	ebaa 0309 	sub.w	r3, sl, r9
 8010728:	455b      	cmp	r3, fp
 801072a:	dcef      	bgt.n	801070c <_printf_float+0x310>
 801072c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010730:	429a      	cmp	r2, r3
 8010732:	44d0      	add	r8, sl
 8010734:	db15      	blt.n	8010762 <_printf_float+0x366>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	07da      	lsls	r2, r3, #31
 801073a:	d412      	bmi.n	8010762 <_printf_float+0x366>
 801073c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801073e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010740:	eba3 020a 	sub.w	r2, r3, sl
 8010744:	eba3 0a01 	sub.w	sl, r3, r1
 8010748:	4592      	cmp	sl, r2
 801074a:	bfa8      	it	ge
 801074c:	4692      	movge	sl, r2
 801074e:	f1ba 0f00 	cmp.w	sl, #0
 8010752:	dc0e      	bgt.n	8010772 <_printf_float+0x376>
 8010754:	f04f 0800 	mov.w	r8, #0
 8010758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801075c:	f104 091a 	add.w	r9, r4, #26
 8010760:	e019      	b.n	8010796 <_printf_float+0x39a>
 8010762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010766:	4631      	mov	r1, r6
 8010768:	4628      	mov	r0, r5
 801076a:	47b8      	blx	r7
 801076c:	3001      	adds	r0, #1
 801076e:	d1e5      	bne.n	801073c <_printf_float+0x340>
 8010770:	e6a1      	b.n	80104b6 <_printf_float+0xba>
 8010772:	4653      	mov	r3, sl
 8010774:	4642      	mov	r2, r8
 8010776:	4631      	mov	r1, r6
 8010778:	4628      	mov	r0, r5
 801077a:	47b8      	blx	r7
 801077c:	3001      	adds	r0, #1
 801077e:	d1e9      	bne.n	8010754 <_printf_float+0x358>
 8010780:	e699      	b.n	80104b6 <_printf_float+0xba>
 8010782:	2301      	movs	r3, #1
 8010784:	464a      	mov	r2, r9
 8010786:	4631      	mov	r1, r6
 8010788:	4628      	mov	r0, r5
 801078a:	47b8      	blx	r7
 801078c:	3001      	adds	r0, #1
 801078e:	f43f ae92 	beq.w	80104b6 <_printf_float+0xba>
 8010792:	f108 0801 	add.w	r8, r8, #1
 8010796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801079a:	1a9b      	subs	r3, r3, r2
 801079c:	eba3 030a 	sub.w	r3, r3, sl
 80107a0:	4543      	cmp	r3, r8
 80107a2:	dcee      	bgt.n	8010782 <_printf_float+0x386>
 80107a4:	e74a      	b.n	801063c <_printf_float+0x240>
 80107a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107a8:	2a01      	cmp	r2, #1
 80107aa:	dc01      	bgt.n	80107b0 <_printf_float+0x3b4>
 80107ac:	07db      	lsls	r3, r3, #31
 80107ae:	d53a      	bpl.n	8010826 <_printf_float+0x42a>
 80107b0:	2301      	movs	r3, #1
 80107b2:	4642      	mov	r2, r8
 80107b4:	4631      	mov	r1, r6
 80107b6:	4628      	mov	r0, r5
 80107b8:	47b8      	blx	r7
 80107ba:	3001      	adds	r0, #1
 80107bc:	f43f ae7b 	beq.w	80104b6 <_printf_float+0xba>
 80107c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107c4:	4631      	mov	r1, r6
 80107c6:	4628      	mov	r0, r5
 80107c8:	47b8      	blx	r7
 80107ca:	3001      	adds	r0, #1
 80107cc:	f108 0801 	add.w	r8, r8, #1
 80107d0:	f43f ae71 	beq.w	80104b6 <_printf_float+0xba>
 80107d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d6:	2200      	movs	r2, #0
 80107d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80107dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107e0:	2300      	movs	r3, #0
 80107e2:	f7f8 f8a9 	bl	8008938 <__aeabi_dcmpeq>
 80107e6:	b9c8      	cbnz	r0, 801081c <_printf_float+0x420>
 80107e8:	4653      	mov	r3, sl
 80107ea:	4642      	mov	r2, r8
 80107ec:	4631      	mov	r1, r6
 80107ee:	4628      	mov	r0, r5
 80107f0:	47b8      	blx	r7
 80107f2:	3001      	adds	r0, #1
 80107f4:	d10e      	bne.n	8010814 <_printf_float+0x418>
 80107f6:	e65e      	b.n	80104b6 <_printf_float+0xba>
 80107f8:	2301      	movs	r3, #1
 80107fa:	4652      	mov	r2, sl
 80107fc:	4631      	mov	r1, r6
 80107fe:	4628      	mov	r0, r5
 8010800:	47b8      	blx	r7
 8010802:	3001      	adds	r0, #1
 8010804:	f43f ae57 	beq.w	80104b6 <_printf_float+0xba>
 8010808:	f108 0801 	add.w	r8, r8, #1
 801080c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801080e:	3b01      	subs	r3, #1
 8010810:	4543      	cmp	r3, r8
 8010812:	dcf1      	bgt.n	80107f8 <_printf_float+0x3fc>
 8010814:	464b      	mov	r3, r9
 8010816:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801081a:	e6de      	b.n	80105da <_printf_float+0x1de>
 801081c:	f04f 0800 	mov.w	r8, #0
 8010820:	f104 0a1a 	add.w	sl, r4, #26
 8010824:	e7f2      	b.n	801080c <_printf_float+0x410>
 8010826:	2301      	movs	r3, #1
 8010828:	e7df      	b.n	80107ea <_printf_float+0x3ee>
 801082a:	2301      	movs	r3, #1
 801082c:	464a      	mov	r2, r9
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	f43f ae3e 	beq.w	80104b6 <_printf_float+0xba>
 801083a:	f108 0801 	add.w	r8, r8, #1
 801083e:	68e3      	ldr	r3, [r4, #12]
 8010840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010842:	1a9b      	subs	r3, r3, r2
 8010844:	4543      	cmp	r3, r8
 8010846:	dcf0      	bgt.n	801082a <_printf_float+0x42e>
 8010848:	e6fc      	b.n	8010644 <_printf_float+0x248>
 801084a:	f04f 0800 	mov.w	r8, #0
 801084e:	f104 0919 	add.w	r9, r4, #25
 8010852:	e7f4      	b.n	801083e <_printf_float+0x442>
 8010854:	2900      	cmp	r1, #0
 8010856:	f43f ae8b 	beq.w	8010570 <_printf_float+0x174>
 801085a:	2300      	movs	r3, #0
 801085c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010860:	ab09      	add	r3, sp, #36	; 0x24
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	ec49 8b10 	vmov	d0, r8, r9
 8010868:	6022      	str	r2, [r4, #0]
 801086a:	f8cd a004 	str.w	sl, [sp, #4]
 801086e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010872:	4628      	mov	r0, r5
 8010874:	f7ff fd2d 	bl	80102d2 <__cvt>
 8010878:	4680      	mov	r8, r0
 801087a:	e648      	b.n	801050e <_printf_float+0x112>

0801087c <_printf_common>:
 801087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	4691      	mov	r9, r2
 8010882:	461f      	mov	r7, r3
 8010884:	688a      	ldr	r2, [r1, #8]
 8010886:	690b      	ldr	r3, [r1, #16]
 8010888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801088c:	4293      	cmp	r3, r2
 801088e:	bfb8      	it	lt
 8010890:	4613      	movlt	r3, r2
 8010892:	f8c9 3000 	str.w	r3, [r9]
 8010896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801089a:	4606      	mov	r6, r0
 801089c:	460c      	mov	r4, r1
 801089e:	b112      	cbz	r2, 80108a6 <_printf_common+0x2a>
 80108a0:	3301      	adds	r3, #1
 80108a2:	f8c9 3000 	str.w	r3, [r9]
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	0699      	lsls	r1, r3, #26
 80108aa:	bf42      	ittt	mi
 80108ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108b0:	3302      	addmi	r3, #2
 80108b2:	f8c9 3000 	strmi.w	r3, [r9]
 80108b6:	6825      	ldr	r5, [r4, #0]
 80108b8:	f015 0506 	ands.w	r5, r5, #6
 80108bc:	d107      	bne.n	80108ce <_printf_common+0x52>
 80108be:	f104 0a19 	add.w	sl, r4, #25
 80108c2:	68e3      	ldr	r3, [r4, #12]
 80108c4:	f8d9 2000 	ldr.w	r2, [r9]
 80108c8:	1a9b      	subs	r3, r3, r2
 80108ca:	42ab      	cmp	r3, r5
 80108cc:	dc28      	bgt.n	8010920 <_printf_common+0xa4>
 80108ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80108d2:	6822      	ldr	r2, [r4, #0]
 80108d4:	3300      	adds	r3, #0
 80108d6:	bf18      	it	ne
 80108d8:	2301      	movne	r3, #1
 80108da:	0692      	lsls	r2, r2, #26
 80108dc:	d42d      	bmi.n	801093a <_printf_common+0xbe>
 80108de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108e2:	4639      	mov	r1, r7
 80108e4:	4630      	mov	r0, r6
 80108e6:	47c0      	blx	r8
 80108e8:	3001      	adds	r0, #1
 80108ea:	d020      	beq.n	801092e <_printf_common+0xb2>
 80108ec:	6823      	ldr	r3, [r4, #0]
 80108ee:	68e5      	ldr	r5, [r4, #12]
 80108f0:	f8d9 2000 	ldr.w	r2, [r9]
 80108f4:	f003 0306 	and.w	r3, r3, #6
 80108f8:	2b04      	cmp	r3, #4
 80108fa:	bf08      	it	eq
 80108fc:	1aad      	subeq	r5, r5, r2
 80108fe:	68a3      	ldr	r3, [r4, #8]
 8010900:	6922      	ldr	r2, [r4, #16]
 8010902:	bf0c      	ite	eq
 8010904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010908:	2500      	movne	r5, #0
 801090a:	4293      	cmp	r3, r2
 801090c:	bfc4      	itt	gt
 801090e:	1a9b      	subgt	r3, r3, r2
 8010910:	18ed      	addgt	r5, r5, r3
 8010912:	f04f 0900 	mov.w	r9, #0
 8010916:	341a      	adds	r4, #26
 8010918:	454d      	cmp	r5, r9
 801091a:	d11a      	bne.n	8010952 <_printf_common+0xd6>
 801091c:	2000      	movs	r0, #0
 801091e:	e008      	b.n	8010932 <_printf_common+0xb6>
 8010920:	2301      	movs	r3, #1
 8010922:	4652      	mov	r2, sl
 8010924:	4639      	mov	r1, r7
 8010926:	4630      	mov	r0, r6
 8010928:	47c0      	blx	r8
 801092a:	3001      	adds	r0, #1
 801092c:	d103      	bne.n	8010936 <_printf_common+0xba>
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010936:	3501      	adds	r5, #1
 8010938:	e7c3      	b.n	80108c2 <_printf_common+0x46>
 801093a:	18e1      	adds	r1, r4, r3
 801093c:	1c5a      	adds	r2, r3, #1
 801093e:	2030      	movs	r0, #48	; 0x30
 8010940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010944:	4422      	add	r2, r4
 8010946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801094a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801094e:	3302      	adds	r3, #2
 8010950:	e7c5      	b.n	80108de <_printf_common+0x62>
 8010952:	2301      	movs	r3, #1
 8010954:	4622      	mov	r2, r4
 8010956:	4639      	mov	r1, r7
 8010958:	4630      	mov	r0, r6
 801095a:	47c0      	blx	r8
 801095c:	3001      	adds	r0, #1
 801095e:	d0e6      	beq.n	801092e <_printf_common+0xb2>
 8010960:	f109 0901 	add.w	r9, r9, #1
 8010964:	e7d8      	b.n	8010918 <_printf_common+0x9c>
	...

08010968 <_printf_i>:
 8010968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801096c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010970:	460c      	mov	r4, r1
 8010972:	7e09      	ldrb	r1, [r1, #24]
 8010974:	b085      	sub	sp, #20
 8010976:	296e      	cmp	r1, #110	; 0x6e
 8010978:	4617      	mov	r7, r2
 801097a:	4606      	mov	r6, r0
 801097c:	4698      	mov	r8, r3
 801097e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010980:	f000 80b3 	beq.w	8010aea <_printf_i+0x182>
 8010984:	d822      	bhi.n	80109cc <_printf_i+0x64>
 8010986:	2963      	cmp	r1, #99	; 0x63
 8010988:	d036      	beq.n	80109f8 <_printf_i+0x90>
 801098a:	d80a      	bhi.n	80109a2 <_printf_i+0x3a>
 801098c:	2900      	cmp	r1, #0
 801098e:	f000 80b9 	beq.w	8010b04 <_printf_i+0x19c>
 8010992:	2958      	cmp	r1, #88	; 0x58
 8010994:	f000 8083 	beq.w	8010a9e <_printf_i+0x136>
 8010998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801099c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109a0:	e032      	b.n	8010a08 <_printf_i+0xa0>
 80109a2:	2964      	cmp	r1, #100	; 0x64
 80109a4:	d001      	beq.n	80109aa <_printf_i+0x42>
 80109a6:	2969      	cmp	r1, #105	; 0x69
 80109a8:	d1f6      	bne.n	8010998 <_printf_i+0x30>
 80109aa:	6820      	ldr	r0, [r4, #0]
 80109ac:	6813      	ldr	r3, [r2, #0]
 80109ae:	0605      	lsls	r5, r0, #24
 80109b0:	f103 0104 	add.w	r1, r3, #4
 80109b4:	d52a      	bpl.n	8010a0c <_printf_i+0xa4>
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	6011      	str	r1, [r2, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	da03      	bge.n	80109c6 <_printf_i+0x5e>
 80109be:	222d      	movs	r2, #45	; 0x2d
 80109c0:	425b      	negs	r3, r3
 80109c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80109c6:	486f      	ldr	r0, [pc, #444]	; (8010b84 <_printf_i+0x21c>)
 80109c8:	220a      	movs	r2, #10
 80109ca:	e039      	b.n	8010a40 <_printf_i+0xd8>
 80109cc:	2973      	cmp	r1, #115	; 0x73
 80109ce:	f000 809d 	beq.w	8010b0c <_printf_i+0x1a4>
 80109d2:	d808      	bhi.n	80109e6 <_printf_i+0x7e>
 80109d4:	296f      	cmp	r1, #111	; 0x6f
 80109d6:	d020      	beq.n	8010a1a <_printf_i+0xb2>
 80109d8:	2970      	cmp	r1, #112	; 0x70
 80109da:	d1dd      	bne.n	8010998 <_printf_i+0x30>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	f043 0320 	orr.w	r3, r3, #32
 80109e2:	6023      	str	r3, [r4, #0]
 80109e4:	e003      	b.n	80109ee <_printf_i+0x86>
 80109e6:	2975      	cmp	r1, #117	; 0x75
 80109e8:	d017      	beq.n	8010a1a <_printf_i+0xb2>
 80109ea:	2978      	cmp	r1, #120	; 0x78
 80109ec:	d1d4      	bne.n	8010998 <_printf_i+0x30>
 80109ee:	2378      	movs	r3, #120	; 0x78
 80109f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109f4:	4864      	ldr	r0, [pc, #400]	; (8010b88 <_printf_i+0x220>)
 80109f6:	e055      	b.n	8010aa4 <_printf_i+0x13c>
 80109f8:	6813      	ldr	r3, [r2, #0]
 80109fa:	1d19      	adds	r1, r3, #4
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	6011      	str	r1, [r2, #0]
 8010a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e08c      	b.n	8010b26 <_printf_i+0x1be>
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	6011      	str	r1, [r2, #0]
 8010a10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a14:	bf18      	it	ne
 8010a16:	b21b      	sxthne	r3, r3
 8010a18:	e7cf      	b.n	80109ba <_printf_i+0x52>
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	6825      	ldr	r5, [r4, #0]
 8010a1e:	1d18      	adds	r0, r3, #4
 8010a20:	6010      	str	r0, [r2, #0]
 8010a22:	0628      	lsls	r0, r5, #24
 8010a24:	d501      	bpl.n	8010a2a <_printf_i+0xc2>
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	e002      	b.n	8010a30 <_printf_i+0xc8>
 8010a2a:	0668      	lsls	r0, r5, #25
 8010a2c:	d5fb      	bpl.n	8010a26 <_printf_i+0xbe>
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	4854      	ldr	r0, [pc, #336]	; (8010b84 <_printf_i+0x21c>)
 8010a32:	296f      	cmp	r1, #111	; 0x6f
 8010a34:	bf14      	ite	ne
 8010a36:	220a      	movne	r2, #10
 8010a38:	2208      	moveq	r2, #8
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a40:	6865      	ldr	r5, [r4, #4]
 8010a42:	60a5      	str	r5, [r4, #8]
 8010a44:	2d00      	cmp	r5, #0
 8010a46:	f2c0 8095 	blt.w	8010b74 <_printf_i+0x20c>
 8010a4a:	6821      	ldr	r1, [r4, #0]
 8010a4c:	f021 0104 	bic.w	r1, r1, #4
 8010a50:	6021      	str	r1, [r4, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d13d      	bne.n	8010ad2 <_printf_i+0x16a>
 8010a56:	2d00      	cmp	r5, #0
 8010a58:	f040 808e 	bne.w	8010b78 <_printf_i+0x210>
 8010a5c:	4665      	mov	r5, ip
 8010a5e:	2a08      	cmp	r2, #8
 8010a60:	d10b      	bne.n	8010a7a <_printf_i+0x112>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	07db      	lsls	r3, r3, #31
 8010a66:	d508      	bpl.n	8010a7a <_printf_i+0x112>
 8010a68:	6923      	ldr	r3, [r4, #16]
 8010a6a:	6862      	ldr	r2, [r4, #4]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	bfde      	ittt	le
 8010a70:	2330      	movle	r3, #48	; 0x30
 8010a72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a7a:	ebac 0305 	sub.w	r3, ip, r5
 8010a7e:	6123      	str	r3, [r4, #16]
 8010a80:	f8cd 8000 	str.w	r8, [sp]
 8010a84:	463b      	mov	r3, r7
 8010a86:	aa03      	add	r2, sp, #12
 8010a88:	4621      	mov	r1, r4
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f7ff fef6 	bl	801087c <_printf_common>
 8010a90:	3001      	adds	r0, #1
 8010a92:	d14d      	bne.n	8010b30 <_printf_i+0x1c8>
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295
 8010a98:	b005      	add	sp, #20
 8010a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a9e:	4839      	ldr	r0, [pc, #228]	; (8010b84 <_printf_i+0x21c>)
 8010aa0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010aa4:	6813      	ldr	r3, [r2, #0]
 8010aa6:	6821      	ldr	r1, [r4, #0]
 8010aa8:	1d1d      	adds	r5, r3, #4
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6015      	str	r5, [r2, #0]
 8010aae:	060a      	lsls	r2, r1, #24
 8010ab0:	d50b      	bpl.n	8010aca <_printf_i+0x162>
 8010ab2:	07ca      	lsls	r2, r1, #31
 8010ab4:	bf44      	itt	mi
 8010ab6:	f041 0120 	orrmi.w	r1, r1, #32
 8010aba:	6021      	strmi	r1, [r4, #0]
 8010abc:	b91b      	cbnz	r3, 8010ac6 <_printf_i+0x15e>
 8010abe:	6822      	ldr	r2, [r4, #0]
 8010ac0:	f022 0220 	bic.w	r2, r2, #32
 8010ac4:	6022      	str	r2, [r4, #0]
 8010ac6:	2210      	movs	r2, #16
 8010ac8:	e7b7      	b.n	8010a3a <_printf_i+0xd2>
 8010aca:	064d      	lsls	r5, r1, #25
 8010acc:	bf48      	it	mi
 8010ace:	b29b      	uxthmi	r3, r3
 8010ad0:	e7ef      	b.n	8010ab2 <_printf_i+0x14a>
 8010ad2:	4665      	mov	r5, ip
 8010ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ad8:	fb02 3311 	mls	r3, r2, r1, r3
 8010adc:	5cc3      	ldrb	r3, [r0, r3]
 8010ade:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	2900      	cmp	r1, #0
 8010ae6:	d1f5      	bne.n	8010ad4 <_printf_i+0x16c>
 8010ae8:	e7b9      	b.n	8010a5e <_printf_i+0xf6>
 8010aea:	6813      	ldr	r3, [r2, #0]
 8010aec:	6825      	ldr	r5, [r4, #0]
 8010aee:	6961      	ldr	r1, [r4, #20]
 8010af0:	1d18      	adds	r0, r3, #4
 8010af2:	6010      	str	r0, [r2, #0]
 8010af4:	0628      	lsls	r0, r5, #24
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	d501      	bpl.n	8010afe <_printf_i+0x196>
 8010afa:	6019      	str	r1, [r3, #0]
 8010afc:	e002      	b.n	8010b04 <_printf_i+0x19c>
 8010afe:	066a      	lsls	r2, r5, #25
 8010b00:	d5fb      	bpl.n	8010afa <_printf_i+0x192>
 8010b02:	8019      	strh	r1, [r3, #0]
 8010b04:	2300      	movs	r3, #0
 8010b06:	6123      	str	r3, [r4, #16]
 8010b08:	4665      	mov	r5, ip
 8010b0a:	e7b9      	b.n	8010a80 <_printf_i+0x118>
 8010b0c:	6813      	ldr	r3, [r2, #0]
 8010b0e:	1d19      	adds	r1, r3, #4
 8010b10:	6011      	str	r1, [r2, #0]
 8010b12:	681d      	ldr	r5, [r3, #0]
 8010b14:	6862      	ldr	r2, [r4, #4]
 8010b16:	2100      	movs	r1, #0
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f7f7 fa99 	bl	8008050 <memchr>
 8010b1e:	b108      	cbz	r0, 8010b24 <_printf_i+0x1bc>
 8010b20:	1b40      	subs	r0, r0, r5
 8010b22:	6060      	str	r0, [r4, #4]
 8010b24:	6863      	ldr	r3, [r4, #4]
 8010b26:	6123      	str	r3, [r4, #16]
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b2e:	e7a7      	b.n	8010a80 <_printf_i+0x118>
 8010b30:	6923      	ldr	r3, [r4, #16]
 8010b32:	462a      	mov	r2, r5
 8010b34:	4639      	mov	r1, r7
 8010b36:	4630      	mov	r0, r6
 8010b38:	47c0      	blx	r8
 8010b3a:	3001      	adds	r0, #1
 8010b3c:	d0aa      	beq.n	8010a94 <_printf_i+0x12c>
 8010b3e:	6823      	ldr	r3, [r4, #0]
 8010b40:	079b      	lsls	r3, r3, #30
 8010b42:	d413      	bmi.n	8010b6c <_printf_i+0x204>
 8010b44:	68e0      	ldr	r0, [r4, #12]
 8010b46:	9b03      	ldr	r3, [sp, #12]
 8010b48:	4298      	cmp	r0, r3
 8010b4a:	bfb8      	it	lt
 8010b4c:	4618      	movlt	r0, r3
 8010b4e:	e7a3      	b.n	8010a98 <_printf_i+0x130>
 8010b50:	2301      	movs	r3, #1
 8010b52:	464a      	mov	r2, r9
 8010b54:	4639      	mov	r1, r7
 8010b56:	4630      	mov	r0, r6
 8010b58:	47c0      	blx	r8
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	d09a      	beq.n	8010a94 <_printf_i+0x12c>
 8010b5e:	3501      	adds	r5, #1
 8010b60:	68e3      	ldr	r3, [r4, #12]
 8010b62:	9a03      	ldr	r2, [sp, #12]
 8010b64:	1a9b      	subs	r3, r3, r2
 8010b66:	42ab      	cmp	r3, r5
 8010b68:	dcf2      	bgt.n	8010b50 <_printf_i+0x1e8>
 8010b6a:	e7eb      	b.n	8010b44 <_printf_i+0x1dc>
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	f104 0919 	add.w	r9, r4, #25
 8010b72:	e7f5      	b.n	8010b60 <_printf_i+0x1f8>
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1ac      	bne.n	8010ad2 <_printf_i+0x16a>
 8010b78:	7803      	ldrb	r3, [r0, #0]
 8010b7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b82:	e76c      	b.n	8010a5e <_printf_i+0xf6>
 8010b84:	08012a96 	.word	0x08012a96
 8010b88:	08012aa7 	.word	0x08012aa7

08010b8c <iprintf>:
 8010b8c:	b40f      	push	{r0, r1, r2, r3}
 8010b8e:	4b0a      	ldr	r3, [pc, #40]	; (8010bb8 <iprintf+0x2c>)
 8010b90:	b513      	push	{r0, r1, r4, lr}
 8010b92:	681c      	ldr	r4, [r3, #0]
 8010b94:	b124      	cbz	r4, 8010ba0 <iprintf+0x14>
 8010b96:	69a3      	ldr	r3, [r4, #24]
 8010b98:	b913      	cbnz	r3, 8010ba0 <iprintf+0x14>
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f001 f868 	bl	8011c70 <__sinit>
 8010ba0:	ab05      	add	r3, sp, #20
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	68a1      	ldr	r1, [r4, #8]
 8010ba6:	9301      	str	r3, [sp, #4]
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f001 fd21 	bl	80125f0 <_vfiprintf_r>
 8010bae:	b002      	add	sp, #8
 8010bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bb4:	b004      	add	sp, #16
 8010bb6:	4770      	bx	lr
 8010bb8:	2000000c 	.word	0x2000000c

08010bbc <_puts_r>:
 8010bbc:	b570      	push	{r4, r5, r6, lr}
 8010bbe:	460e      	mov	r6, r1
 8010bc0:	4605      	mov	r5, r0
 8010bc2:	b118      	cbz	r0, 8010bcc <_puts_r+0x10>
 8010bc4:	6983      	ldr	r3, [r0, #24]
 8010bc6:	b90b      	cbnz	r3, 8010bcc <_puts_r+0x10>
 8010bc8:	f001 f852 	bl	8011c70 <__sinit>
 8010bcc:	69ab      	ldr	r3, [r5, #24]
 8010bce:	68ac      	ldr	r4, [r5, #8]
 8010bd0:	b913      	cbnz	r3, 8010bd8 <_puts_r+0x1c>
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	f001 f84c 	bl	8011c70 <__sinit>
 8010bd8:	4b23      	ldr	r3, [pc, #140]	; (8010c68 <_puts_r+0xac>)
 8010bda:	429c      	cmp	r4, r3
 8010bdc:	d117      	bne.n	8010c0e <_puts_r+0x52>
 8010bde:	686c      	ldr	r4, [r5, #4]
 8010be0:	89a3      	ldrh	r3, [r4, #12]
 8010be2:	071b      	lsls	r3, r3, #28
 8010be4:	d51d      	bpl.n	8010c22 <_puts_r+0x66>
 8010be6:	6923      	ldr	r3, [r4, #16]
 8010be8:	b1db      	cbz	r3, 8010c22 <_puts_r+0x66>
 8010bea:	3e01      	subs	r6, #1
 8010bec:	68a3      	ldr	r3, [r4, #8]
 8010bee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	60a3      	str	r3, [r4, #8]
 8010bf6:	b9e9      	cbnz	r1, 8010c34 <_puts_r+0x78>
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	da2e      	bge.n	8010c5a <_puts_r+0x9e>
 8010bfc:	4622      	mov	r2, r4
 8010bfe:	210a      	movs	r1, #10
 8010c00:	4628      	mov	r0, r5
 8010c02:	f000 f83f 	bl	8010c84 <__swbuf_r>
 8010c06:	3001      	adds	r0, #1
 8010c08:	d011      	beq.n	8010c2e <_puts_r+0x72>
 8010c0a:	200a      	movs	r0, #10
 8010c0c:	e011      	b.n	8010c32 <_puts_r+0x76>
 8010c0e:	4b17      	ldr	r3, [pc, #92]	; (8010c6c <_puts_r+0xb0>)
 8010c10:	429c      	cmp	r4, r3
 8010c12:	d101      	bne.n	8010c18 <_puts_r+0x5c>
 8010c14:	68ac      	ldr	r4, [r5, #8]
 8010c16:	e7e3      	b.n	8010be0 <_puts_r+0x24>
 8010c18:	4b15      	ldr	r3, [pc, #84]	; (8010c70 <_puts_r+0xb4>)
 8010c1a:	429c      	cmp	r4, r3
 8010c1c:	bf08      	it	eq
 8010c1e:	68ec      	ldreq	r4, [r5, #12]
 8010c20:	e7de      	b.n	8010be0 <_puts_r+0x24>
 8010c22:	4621      	mov	r1, r4
 8010c24:	4628      	mov	r0, r5
 8010c26:	f000 f87f 	bl	8010d28 <__swsetup_r>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d0dd      	beq.n	8010bea <_puts_r+0x2e>
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da04      	bge.n	8010c42 <_puts_r+0x86>
 8010c38:	69a2      	ldr	r2, [r4, #24]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	dc06      	bgt.n	8010c4c <_puts_r+0x90>
 8010c3e:	290a      	cmp	r1, #10
 8010c40:	d004      	beq.n	8010c4c <_puts_r+0x90>
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	6022      	str	r2, [r4, #0]
 8010c48:	7019      	strb	r1, [r3, #0]
 8010c4a:	e7cf      	b.n	8010bec <_puts_r+0x30>
 8010c4c:	4622      	mov	r2, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f000 f818 	bl	8010c84 <__swbuf_r>
 8010c54:	3001      	adds	r0, #1
 8010c56:	d1c9      	bne.n	8010bec <_puts_r+0x30>
 8010c58:	e7e9      	b.n	8010c2e <_puts_r+0x72>
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	200a      	movs	r0, #10
 8010c5e:	1c5a      	adds	r2, r3, #1
 8010c60:	6022      	str	r2, [r4, #0]
 8010c62:	7018      	strb	r0, [r3, #0]
 8010c64:	e7e5      	b.n	8010c32 <_puts_r+0x76>
 8010c66:	bf00      	nop
 8010c68:	08012ae8 	.word	0x08012ae8
 8010c6c:	08012b08 	.word	0x08012b08
 8010c70:	08012ac8 	.word	0x08012ac8

08010c74 <puts>:
 8010c74:	4b02      	ldr	r3, [pc, #8]	; (8010c80 <puts+0xc>)
 8010c76:	4601      	mov	r1, r0
 8010c78:	6818      	ldr	r0, [r3, #0]
 8010c7a:	f7ff bf9f 	b.w	8010bbc <_puts_r>
 8010c7e:	bf00      	nop
 8010c80:	2000000c 	.word	0x2000000c

08010c84 <__swbuf_r>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	460e      	mov	r6, r1
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4605      	mov	r5, r0
 8010c8c:	b118      	cbz	r0, 8010c96 <__swbuf_r+0x12>
 8010c8e:	6983      	ldr	r3, [r0, #24]
 8010c90:	b90b      	cbnz	r3, 8010c96 <__swbuf_r+0x12>
 8010c92:	f000 ffed 	bl	8011c70 <__sinit>
 8010c96:	4b21      	ldr	r3, [pc, #132]	; (8010d1c <__swbuf_r+0x98>)
 8010c98:	429c      	cmp	r4, r3
 8010c9a:	d12a      	bne.n	8010cf2 <__swbuf_r+0x6e>
 8010c9c:	686c      	ldr	r4, [r5, #4]
 8010c9e:	69a3      	ldr	r3, [r4, #24]
 8010ca0:	60a3      	str	r3, [r4, #8]
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	071a      	lsls	r2, r3, #28
 8010ca6:	d52e      	bpl.n	8010d06 <__swbuf_r+0x82>
 8010ca8:	6923      	ldr	r3, [r4, #16]
 8010caa:	b363      	cbz	r3, 8010d06 <__swbuf_r+0x82>
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	6820      	ldr	r0, [r4, #0]
 8010cb0:	1ac0      	subs	r0, r0, r3
 8010cb2:	6963      	ldr	r3, [r4, #20]
 8010cb4:	b2f6      	uxtb	r6, r6
 8010cb6:	4283      	cmp	r3, r0
 8010cb8:	4637      	mov	r7, r6
 8010cba:	dc04      	bgt.n	8010cc6 <__swbuf_r+0x42>
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f000 ff6c 	bl	8011b9c <_fflush_r>
 8010cc4:	bb28      	cbnz	r0, 8010d12 <__swbuf_r+0x8e>
 8010cc6:	68a3      	ldr	r3, [r4, #8]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	60a3      	str	r3, [r4, #8]
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	6022      	str	r2, [r4, #0]
 8010cd2:	701e      	strb	r6, [r3, #0]
 8010cd4:	6963      	ldr	r3, [r4, #20]
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	4283      	cmp	r3, r0
 8010cda:	d004      	beq.n	8010ce6 <__swbuf_r+0x62>
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	07db      	lsls	r3, r3, #31
 8010ce0:	d519      	bpl.n	8010d16 <__swbuf_r+0x92>
 8010ce2:	2e0a      	cmp	r6, #10
 8010ce4:	d117      	bne.n	8010d16 <__swbuf_r+0x92>
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f000 ff57 	bl	8011b9c <_fflush_r>
 8010cee:	b190      	cbz	r0, 8010d16 <__swbuf_r+0x92>
 8010cf0:	e00f      	b.n	8010d12 <__swbuf_r+0x8e>
 8010cf2:	4b0b      	ldr	r3, [pc, #44]	; (8010d20 <__swbuf_r+0x9c>)
 8010cf4:	429c      	cmp	r4, r3
 8010cf6:	d101      	bne.n	8010cfc <__swbuf_r+0x78>
 8010cf8:	68ac      	ldr	r4, [r5, #8]
 8010cfa:	e7d0      	b.n	8010c9e <__swbuf_r+0x1a>
 8010cfc:	4b09      	ldr	r3, [pc, #36]	; (8010d24 <__swbuf_r+0xa0>)
 8010cfe:	429c      	cmp	r4, r3
 8010d00:	bf08      	it	eq
 8010d02:	68ec      	ldreq	r4, [r5, #12]
 8010d04:	e7cb      	b.n	8010c9e <__swbuf_r+0x1a>
 8010d06:	4621      	mov	r1, r4
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f000 f80d 	bl	8010d28 <__swsetup_r>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d0cc      	beq.n	8010cac <__swbuf_r+0x28>
 8010d12:	f04f 37ff 	mov.w	r7, #4294967295
 8010d16:	4638      	mov	r0, r7
 8010d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	08012ae8 	.word	0x08012ae8
 8010d20:	08012b08 	.word	0x08012b08
 8010d24:	08012ac8 	.word	0x08012ac8

08010d28 <__swsetup_r>:
 8010d28:	4b32      	ldr	r3, [pc, #200]	; (8010df4 <__swsetup_r+0xcc>)
 8010d2a:	b570      	push	{r4, r5, r6, lr}
 8010d2c:	681d      	ldr	r5, [r3, #0]
 8010d2e:	4606      	mov	r6, r0
 8010d30:	460c      	mov	r4, r1
 8010d32:	b125      	cbz	r5, 8010d3e <__swsetup_r+0x16>
 8010d34:	69ab      	ldr	r3, [r5, #24]
 8010d36:	b913      	cbnz	r3, 8010d3e <__swsetup_r+0x16>
 8010d38:	4628      	mov	r0, r5
 8010d3a:	f000 ff99 	bl	8011c70 <__sinit>
 8010d3e:	4b2e      	ldr	r3, [pc, #184]	; (8010df8 <__swsetup_r+0xd0>)
 8010d40:	429c      	cmp	r4, r3
 8010d42:	d10f      	bne.n	8010d64 <__swsetup_r+0x3c>
 8010d44:	686c      	ldr	r4, [r5, #4]
 8010d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	0715      	lsls	r5, r2, #28
 8010d4e:	d42c      	bmi.n	8010daa <__swsetup_r+0x82>
 8010d50:	06d0      	lsls	r0, r2, #27
 8010d52:	d411      	bmi.n	8010d78 <__swsetup_r+0x50>
 8010d54:	2209      	movs	r2, #9
 8010d56:	6032      	str	r2, [r6, #0]
 8010d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d5c:	81a3      	strh	r3, [r4, #12]
 8010d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d62:	e03e      	b.n	8010de2 <__swsetup_r+0xba>
 8010d64:	4b25      	ldr	r3, [pc, #148]	; (8010dfc <__swsetup_r+0xd4>)
 8010d66:	429c      	cmp	r4, r3
 8010d68:	d101      	bne.n	8010d6e <__swsetup_r+0x46>
 8010d6a:	68ac      	ldr	r4, [r5, #8]
 8010d6c:	e7eb      	b.n	8010d46 <__swsetup_r+0x1e>
 8010d6e:	4b24      	ldr	r3, [pc, #144]	; (8010e00 <__swsetup_r+0xd8>)
 8010d70:	429c      	cmp	r4, r3
 8010d72:	bf08      	it	eq
 8010d74:	68ec      	ldreq	r4, [r5, #12]
 8010d76:	e7e6      	b.n	8010d46 <__swsetup_r+0x1e>
 8010d78:	0751      	lsls	r1, r2, #29
 8010d7a:	d512      	bpl.n	8010da2 <__swsetup_r+0x7a>
 8010d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d7e:	b141      	cbz	r1, 8010d92 <__swsetup_r+0x6a>
 8010d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d84:	4299      	cmp	r1, r3
 8010d86:	d002      	beq.n	8010d8e <__swsetup_r+0x66>
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f001 fb5f 	bl	801244c <_free_r>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	6363      	str	r3, [r4, #52]	; 0x34
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d98:	81a3      	strh	r3, [r4, #12]
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	6063      	str	r3, [r4, #4]
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	89a3      	ldrh	r3, [r4, #12]
 8010da4:	f043 0308 	orr.w	r3, r3, #8
 8010da8:	81a3      	strh	r3, [r4, #12]
 8010daa:	6923      	ldr	r3, [r4, #16]
 8010dac:	b94b      	cbnz	r3, 8010dc2 <__swsetup_r+0x9a>
 8010dae:	89a3      	ldrh	r3, [r4, #12]
 8010db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010db8:	d003      	beq.n	8010dc2 <__swsetup_r+0x9a>
 8010dba:	4621      	mov	r1, r4
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f001 f813 	bl	8011de8 <__smakebuf_r>
 8010dc2:	89a2      	ldrh	r2, [r4, #12]
 8010dc4:	f012 0301 	ands.w	r3, r2, #1
 8010dc8:	d00c      	beq.n	8010de4 <__swsetup_r+0xbc>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	60a3      	str	r3, [r4, #8]
 8010dce:	6963      	ldr	r3, [r4, #20]
 8010dd0:	425b      	negs	r3, r3
 8010dd2:	61a3      	str	r3, [r4, #24]
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	b953      	cbnz	r3, 8010dee <__swsetup_r+0xc6>
 8010dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010de0:	d1ba      	bne.n	8010d58 <__swsetup_r+0x30>
 8010de2:	bd70      	pop	{r4, r5, r6, pc}
 8010de4:	0792      	lsls	r2, r2, #30
 8010de6:	bf58      	it	pl
 8010de8:	6963      	ldrpl	r3, [r4, #20]
 8010dea:	60a3      	str	r3, [r4, #8]
 8010dec:	e7f2      	b.n	8010dd4 <__swsetup_r+0xac>
 8010dee:	2000      	movs	r0, #0
 8010df0:	e7f7      	b.n	8010de2 <__swsetup_r+0xba>
 8010df2:	bf00      	nop
 8010df4:	2000000c 	.word	0x2000000c
 8010df8:	08012ae8 	.word	0x08012ae8
 8010dfc:	08012b08 	.word	0x08012b08
 8010e00:	08012ac8 	.word	0x08012ac8

08010e04 <quorem>:
 8010e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e08:	6903      	ldr	r3, [r0, #16]
 8010e0a:	690c      	ldr	r4, [r1, #16]
 8010e0c:	42a3      	cmp	r3, r4
 8010e0e:	4680      	mov	r8, r0
 8010e10:	f2c0 8082 	blt.w	8010f18 <quorem+0x114>
 8010e14:	3c01      	subs	r4, #1
 8010e16:	f101 0714 	add.w	r7, r1, #20
 8010e1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010e1e:	f100 0614 	add.w	r6, r0, #20
 8010e22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010e26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010e2a:	eb06 030c 	add.w	r3, r6, ip
 8010e2e:	3501      	adds	r5, #1
 8010e30:	eb07 090c 	add.w	r9, r7, ip
 8010e34:	9301      	str	r3, [sp, #4]
 8010e36:	fbb0 f5f5 	udiv	r5, r0, r5
 8010e3a:	b395      	cbz	r5, 8010ea2 <quorem+0x9e>
 8010e3c:	f04f 0a00 	mov.w	sl, #0
 8010e40:	4638      	mov	r0, r7
 8010e42:	46b6      	mov	lr, r6
 8010e44:	46d3      	mov	fp, sl
 8010e46:	f850 2b04 	ldr.w	r2, [r0], #4
 8010e4a:	b293      	uxth	r3, r2
 8010e4c:	fb05 a303 	mla	r3, r5, r3, sl
 8010e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	ebab 0303 	sub.w	r3, fp, r3
 8010e5a:	0c12      	lsrs	r2, r2, #16
 8010e5c:	f8de b000 	ldr.w	fp, [lr]
 8010e60:	fb05 a202 	mla	r2, r5, r2, sl
 8010e64:	fa13 f38b 	uxtah	r3, r3, fp
 8010e68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010e6c:	fa1f fb82 	uxth.w	fp, r2
 8010e70:	f8de 2000 	ldr.w	r2, [lr]
 8010e74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e82:	4581      	cmp	r9, r0
 8010e84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010e88:	f84e 3b04 	str.w	r3, [lr], #4
 8010e8c:	d2db      	bcs.n	8010e46 <quorem+0x42>
 8010e8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8010e92:	b933      	cbnz	r3, 8010ea2 <quorem+0x9e>
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	3b04      	subs	r3, #4
 8010e98:	429e      	cmp	r6, r3
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	d330      	bcc.n	8010f00 <quorem+0xfc>
 8010e9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8010ea2:	4640      	mov	r0, r8
 8010ea4:	f001 f9fe 	bl	80122a4 <__mcmp>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	db25      	blt.n	8010ef8 <quorem+0xf4>
 8010eac:	3501      	adds	r5, #1
 8010eae:	4630      	mov	r0, r6
 8010eb0:	f04f 0c00 	mov.w	ip, #0
 8010eb4:	f857 2b04 	ldr.w	r2, [r7], #4
 8010eb8:	f8d0 e000 	ldr.w	lr, [r0]
 8010ebc:	b293      	uxth	r3, r2
 8010ebe:	ebac 0303 	sub.w	r3, ip, r3
 8010ec2:	0c12      	lsrs	r2, r2, #16
 8010ec4:	fa13 f38e 	uxtah	r3, r3, lr
 8010ec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ed6:	45b9      	cmp	r9, r7
 8010ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010edc:	f840 3b04 	str.w	r3, [r0], #4
 8010ee0:	d2e8      	bcs.n	8010eb4 <quorem+0xb0>
 8010ee2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010ee6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010eea:	b92a      	cbnz	r2, 8010ef8 <quorem+0xf4>
 8010eec:	3b04      	subs	r3, #4
 8010eee:	429e      	cmp	r6, r3
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	d30b      	bcc.n	8010f0c <quorem+0x108>
 8010ef4:	f8c8 4010 	str.w	r4, [r8, #16]
 8010ef8:	4628      	mov	r0, r5
 8010efa:	b003      	add	sp, #12
 8010efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f00:	6812      	ldr	r2, [r2, #0]
 8010f02:	3b04      	subs	r3, #4
 8010f04:	2a00      	cmp	r2, #0
 8010f06:	d1ca      	bne.n	8010e9e <quorem+0x9a>
 8010f08:	3c01      	subs	r4, #1
 8010f0a:	e7c5      	b.n	8010e98 <quorem+0x94>
 8010f0c:	6812      	ldr	r2, [r2, #0]
 8010f0e:	3b04      	subs	r3, #4
 8010f10:	2a00      	cmp	r2, #0
 8010f12:	d1ef      	bne.n	8010ef4 <quorem+0xf0>
 8010f14:	3c01      	subs	r4, #1
 8010f16:	e7ea      	b.n	8010eee <quorem+0xea>
 8010f18:	2000      	movs	r0, #0
 8010f1a:	e7ee      	b.n	8010efa <quorem+0xf6>
 8010f1c:	0000      	movs	r0, r0
	...

08010f20 <_dtoa_r>:
 8010f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f24:	ec57 6b10 	vmov	r6, r7, d0
 8010f28:	b097      	sub	sp, #92	; 0x5c
 8010f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f2c:	9106      	str	r1, [sp, #24]
 8010f2e:	4604      	mov	r4, r0
 8010f30:	920b      	str	r2, [sp, #44]	; 0x2c
 8010f32:	9312      	str	r3, [sp, #72]	; 0x48
 8010f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010f38:	e9cd 6700 	strd	r6, r7, [sp]
 8010f3c:	b93d      	cbnz	r5, 8010f4e <_dtoa_r+0x2e>
 8010f3e:	2010      	movs	r0, #16
 8010f40:	f000 ff92 	bl	8011e68 <malloc>
 8010f44:	6260      	str	r0, [r4, #36]	; 0x24
 8010f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010f4a:	6005      	str	r5, [r0, #0]
 8010f4c:	60c5      	str	r5, [r0, #12]
 8010f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f50:	6819      	ldr	r1, [r3, #0]
 8010f52:	b151      	cbz	r1, 8010f6a <_dtoa_r+0x4a>
 8010f54:	685a      	ldr	r2, [r3, #4]
 8010f56:	604a      	str	r2, [r1, #4]
 8010f58:	2301      	movs	r3, #1
 8010f5a:	4093      	lsls	r3, r2
 8010f5c:	608b      	str	r3, [r1, #8]
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 ffbe 	bl	8011ee0 <_Bfree>
 8010f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f66:	2200      	movs	r2, #0
 8010f68:	601a      	str	r2, [r3, #0]
 8010f6a:	1e3b      	subs	r3, r7, #0
 8010f6c:	bfbb      	ittet	lt
 8010f6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010f72:	9301      	strlt	r3, [sp, #4]
 8010f74:	2300      	movge	r3, #0
 8010f76:	2201      	movlt	r2, #1
 8010f78:	bfac      	ite	ge
 8010f7a:	f8c8 3000 	strge.w	r3, [r8]
 8010f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8010f82:	4baf      	ldr	r3, [pc, #700]	; (8011240 <_dtoa_r+0x320>)
 8010f84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f88:	ea33 0308 	bics.w	r3, r3, r8
 8010f8c:	d114      	bne.n	8010fb8 <_dtoa_r+0x98>
 8010f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f90:	f242 730f 	movw	r3, #9999	; 0x270f
 8010f94:	6013      	str	r3, [r2, #0]
 8010f96:	9b00      	ldr	r3, [sp, #0]
 8010f98:	b923      	cbnz	r3, 8010fa4 <_dtoa_r+0x84>
 8010f9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	f000 8542 	beq.w	8011a28 <_dtoa_r+0xb08>
 8010fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fa6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011254 <_dtoa_r+0x334>
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 8544 	beq.w	8011a38 <_dtoa_r+0xb18>
 8010fb0:	f10b 0303 	add.w	r3, fp, #3
 8010fb4:	f000 bd3e 	b.w	8011a34 <_dtoa_r+0xb14>
 8010fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7f7 fcb8 	bl	8008938 <__aeabi_dcmpeq>
 8010fc8:	4681      	mov	r9, r0
 8010fca:	b168      	cbz	r0, 8010fe8 <_dtoa_r+0xc8>
 8010fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fce:	2301      	movs	r3, #1
 8010fd0:	6013      	str	r3, [r2, #0]
 8010fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 8524 	beq.w	8011a22 <_dtoa_r+0xb02>
 8010fda:	4b9a      	ldr	r3, [pc, #616]	; (8011244 <_dtoa_r+0x324>)
 8010fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010fde:	f103 3bff 	add.w	fp, r3, #4294967295
 8010fe2:	6013      	str	r3, [r2, #0]
 8010fe4:	f000 bd28 	b.w	8011a38 <_dtoa_r+0xb18>
 8010fe8:	aa14      	add	r2, sp, #80	; 0x50
 8010fea:	a915      	add	r1, sp, #84	; 0x54
 8010fec:	ec47 6b10 	vmov	d0, r6, r7
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f001 f9ce 	bl	8012392 <__d2b>
 8010ff6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010ffa:	9004      	str	r0, [sp, #16]
 8010ffc:	2d00      	cmp	r5, #0
 8010ffe:	d07c      	beq.n	80110fa <_dtoa_r+0x1da>
 8011000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011004:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011008:	46b2      	mov	sl, r6
 801100a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801100e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011012:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011016:	2200      	movs	r2, #0
 8011018:	4b8b      	ldr	r3, [pc, #556]	; (8011248 <_dtoa_r+0x328>)
 801101a:	4650      	mov	r0, sl
 801101c:	4659      	mov	r1, fp
 801101e:	f7f7 f86b 	bl	80080f8 <__aeabi_dsub>
 8011022:	a381      	add	r3, pc, #516	; (adr r3, 8011228 <_dtoa_r+0x308>)
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	f7f7 fa1e 	bl	8008468 <__aeabi_dmul>
 801102c:	a380      	add	r3, pc, #512	; (adr r3, 8011230 <_dtoa_r+0x310>)
 801102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011032:	f7f7 f863 	bl	80080fc <__adddf3>
 8011036:	4606      	mov	r6, r0
 8011038:	4628      	mov	r0, r5
 801103a:	460f      	mov	r7, r1
 801103c:	f7f7 f9aa 	bl	8008394 <__aeabi_i2d>
 8011040:	a37d      	add	r3, pc, #500	; (adr r3, 8011238 <_dtoa_r+0x318>)
 8011042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011046:	f7f7 fa0f 	bl	8008468 <__aeabi_dmul>
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	4630      	mov	r0, r6
 8011050:	4639      	mov	r1, r7
 8011052:	f7f7 f853 	bl	80080fc <__adddf3>
 8011056:	4606      	mov	r6, r0
 8011058:	460f      	mov	r7, r1
 801105a:	f7f7 fcb5 	bl	80089c8 <__aeabi_d2iz>
 801105e:	2200      	movs	r2, #0
 8011060:	4682      	mov	sl, r0
 8011062:	2300      	movs	r3, #0
 8011064:	4630      	mov	r0, r6
 8011066:	4639      	mov	r1, r7
 8011068:	f7f7 fc70 	bl	800894c <__aeabi_dcmplt>
 801106c:	b148      	cbz	r0, 8011082 <_dtoa_r+0x162>
 801106e:	4650      	mov	r0, sl
 8011070:	f7f7 f990 	bl	8008394 <__aeabi_i2d>
 8011074:	4632      	mov	r2, r6
 8011076:	463b      	mov	r3, r7
 8011078:	f7f7 fc5e 	bl	8008938 <__aeabi_dcmpeq>
 801107c:	b908      	cbnz	r0, 8011082 <_dtoa_r+0x162>
 801107e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011082:	f1ba 0f16 	cmp.w	sl, #22
 8011086:	d859      	bhi.n	801113c <_dtoa_r+0x21c>
 8011088:	4970      	ldr	r1, [pc, #448]	; (801124c <_dtoa_r+0x32c>)
 801108a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801108e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011096:	f7f7 fc77 	bl	8008988 <__aeabi_dcmpgt>
 801109a:	2800      	cmp	r0, #0
 801109c:	d050      	beq.n	8011140 <_dtoa_r+0x220>
 801109e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110a2:	2300      	movs	r3, #0
 80110a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80110a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110a8:	1b5d      	subs	r5, r3, r5
 80110aa:	f1b5 0801 	subs.w	r8, r5, #1
 80110ae:	bf49      	itett	mi
 80110b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80110b4:	2300      	movpl	r3, #0
 80110b6:	9305      	strmi	r3, [sp, #20]
 80110b8:	f04f 0800 	movmi.w	r8, #0
 80110bc:	bf58      	it	pl
 80110be:	9305      	strpl	r3, [sp, #20]
 80110c0:	f1ba 0f00 	cmp.w	sl, #0
 80110c4:	db3e      	blt.n	8011144 <_dtoa_r+0x224>
 80110c6:	2300      	movs	r3, #0
 80110c8:	44d0      	add	r8, sl
 80110ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80110ce:	9307      	str	r3, [sp, #28]
 80110d0:	9b06      	ldr	r3, [sp, #24]
 80110d2:	2b09      	cmp	r3, #9
 80110d4:	f200 8090 	bhi.w	80111f8 <_dtoa_r+0x2d8>
 80110d8:	2b05      	cmp	r3, #5
 80110da:	bfc4      	itt	gt
 80110dc:	3b04      	subgt	r3, #4
 80110de:	9306      	strgt	r3, [sp, #24]
 80110e0:	9b06      	ldr	r3, [sp, #24]
 80110e2:	f1a3 0302 	sub.w	r3, r3, #2
 80110e6:	bfcc      	ite	gt
 80110e8:	2500      	movgt	r5, #0
 80110ea:	2501      	movle	r5, #1
 80110ec:	2b03      	cmp	r3, #3
 80110ee:	f200 808f 	bhi.w	8011210 <_dtoa_r+0x2f0>
 80110f2:	e8df f003 	tbb	[pc, r3]
 80110f6:	7f7d      	.short	0x7f7d
 80110f8:	7131      	.short	0x7131
 80110fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80110fe:	441d      	add	r5, r3
 8011100:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011104:	2820      	cmp	r0, #32
 8011106:	dd13      	ble.n	8011130 <_dtoa_r+0x210>
 8011108:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801110c:	9b00      	ldr	r3, [sp, #0]
 801110e:	fa08 f800 	lsl.w	r8, r8, r0
 8011112:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011116:	fa23 f000 	lsr.w	r0, r3, r0
 801111a:	ea48 0000 	orr.w	r0, r8, r0
 801111e:	f7f7 f929 	bl	8008374 <__aeabi_ui2d>
 8011122:	2301      	movs	r3, #1
 8011124:	4682      	mov	sl, r0
 8011126:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801112a:	3d01      	subs	r5, #1
 801112c:	9313      	str	r3, [sp, #76]	; 0x4c
 801112e:	e772      	b.n	8011016 <_dtoa_r+0xf6>
 8011130:	9b00      	ldr	r3, [sp, #0]
 8011132:	f1c0 0020 	rsb	r0, r0, #32
 8011136:	fa03 f000 	lsl.w	r0, r3, r0
 801113a:	e7f0      	b.n	801111e <_dtoa_r+0x1fe>
 801113c:	2301      	movs	r3, #1
 801113e:	e7b1      	b.n	80110a4 <_dtoa_r+0x184>
 8011140:	900f      	str	r0, [sp, #60]	; 0x3c
 8011142:	e7b0      	b.n	80110a6 <_dtoa_r+0x186>
 8011144:	9b05      	ldr	r3, [sp, #20]
 8011146:	eba3 030a 	sub.w	r3, r3, sl
 801114a:	9305      	str	r3, [sp, #20]
 801114c:	f1ca 0300 	rsb	r3, sl, #0
 8011150:	9307      	str	r3, [sp, #28]
 8011152:	2300      	movs	r3, #0
 8011154:	930e      	str	r3, [sp, #56]	; 0x38
 8011156:	e7bb      	b.n	80110d0 <_dtoa_r+0x1b0>
 8011158:	2301      	movs	r3, #1
 801115a:	930a      	str	r3, [sp, #40]	; 0x28
 801115c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801115e:	2b00      	cmp	r3, #0
 8011160:	dd59      	ble.n	8011216 <_dtoa_r+0x2f6>
 8011162:	9302      	str	r3, [sp, #8]
 8011164:	4699      	mov	r9, r3
 8011166:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011168:	2200      	movs	r2, #0
 801116a:	6072      	str	r2, [r6, #4]
 801116c:	2204      	movs	r2, #4
 801116e:	f102 0014 	add.w	r0, r2, #20
 8011172:	4298      	cmp	r0, r3
 8011174:	6871      	ldr	r1, [r6, #4]
 8011176:	d953      	bls.n	8011220 <_dtoa_r+0x300>
 8011178:	4620      	mov	r0, r4
 801117a:	f000 fe7d 	bl	8011e78 <_Balloc>
 801117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011180:	6030      	str	r0, [r6, #0]
 8011182:	f1b9 0f0e 	cmp.w	r9, #14
 8011186:	f8d3 b000 	ldr.w	fp, [r3]
 801118a:	f200 80e6 	bhi.w	801135a <_dtoa_r+0x43a>
 801118e:	2d00      	cmp	r5, #0
 8011190:	f000 80e3 	beq.w	801135a <_dtoa_r+0x43a>
 8011194:	ed9d 7b00 	vldr	d7, [sp]
 8011198:	f1ba 0f00 	cmp.w	sl, #0
 801119c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80111a0:	dd74      	ble.n	801128c <_dtoa_r+0x36c>
 80111a2:	4a2a      	ldr	r2, [pc, #168]	; (801124c <_dtoa_r+0x32c>)
 80111a4:	f00a 030f 	and.w	r3, sl, #15
 80111a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80111ac:	ed93 7b00 	vldr	d7, [r3]
 80111b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80111b4:	06f0      	lsls	r0, r6, #27
 80111b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80111ba:	d565      	bpl.n	8011288 <_dtoa_r+0x368>
 80111bc:	4b24      	ldr	r3, [pc, #144]	; (8011250 <_dtoa_r+0x330>)
 80111be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80111c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111c6:	f7f7 fa79 	bl	80086bc <__aeabi_ddiv>
 80111ca:	e9cd 0100 	strd	r0, r1, [sp]
 80111ce:	f006 060f 	and.w	r6, r6, #15
 80111d2:	2503      	movs	r5, #3
 80111d4:	4f1e      	ldr	r7, [pc, #120]	; (8011250 <_dtoa_r+0x330>)
 80111d6:	e04c      	b.n	8011272 <_dtoa_r+0x352>
 80111d8:	2301      	movs	r3, #1
 80111da:	930a      	str	r3, [sp, #40]	; 0x28
 80111dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111de:	4453      	add	r3, sl
 80111e0:	f103 0901 	add.w	r9, r3, #1
 80111e4:	9302      	str	r3, [sp, #8]
 80111e6:	464b      	mov	r3, r9
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	bfb8      	it	lt
 80111ec:	2301      	movlt	r3, #1
 80111ee:	e7ba      	b.n	8011166 <_dtoa_r+0x246>
 80111f0:	2300      	movs	r3, #0
 80111f2:	e7b2      	b.n	801115a <_dtoa_r+0x23a>
 80111f4:	2300      	movs	r3, #0
 80111f6:	e7f0      	b.n	80111da <_dtoa_r+0x2ba>
 80111f8:	2501      	movs	r5, #1
 80111fa:	2300      	movs	r3, #0
 80111fc:	9306      	str	r3, [sp, #24]
 80111fe:	950a      	str	r5, [sp, #40]	; 0x28
 8011200:	f04f 33ff 	mov.w	r3, #4294967295
 8011204:	9302      	str	r3, [sp, #8]
 8011206:	4699      	mov	r9, r3
 8011208:	2200      	movs	r2, #0
 801120a:	2312      	movs	r3, #18
 801120c:	920b      	str	r2, [sp, #44]	; 0x2c
 801120e:	e7aa      	b.n	8011166 <_dtoa_r+0x246>
 8011210:	2301      	movs	r3, #1
 8011212:	930a      	str	r3, [sp, #40]	; 0x28
 8011214:	e7f4      	b.n	8011200 <_dtoa_r+0x2e0>
 8011216:	2301      	movs	r3, #1
 8011218:	9302      	str	r3, [sp, #8]
 801121a:	4699      	mov	r9, r3
 801121c:	461a      	mov	r2, r3
 801121e:	e7f5      	b.n	801120c <_dtoa_r+0x2ec>
 8011220:	3101      	adds	r1, #1
 8011222:	6071      	str	r1, [r6, #4]
 8011224:	0052      	lsls	r2, r2, #1
 8011226:	e7a2      	b.n	801116e <_dtoa_r+0x24e>
 8011228:	636f4361 	.word	0x636f4361
 801122c:	3fd287a7 	.word	0x3fd287a7
 8011230:	8b60c8b3 	.word	0x8b60c8b3
 8011234:	3fc68a28 	.word	0x3fc68a28
 8011238:	509f79fb 	.word	0x509f79fb
 801123c:	3fd34413 	.word	0x3fd34413
 8011240:	7ff00000 	.word	0x7ff00000
 8011244:	08012a95 	.word	0x08012a95
 8011248:	3ff80000 	.word	0x3ff80000
 801124c:	08012b50 	.word	0x08012b50
 8011250:	08012b28 	.word	0x08012b28
 8011254:	08012ac1 	.word	0x08012ac1
 8011258:	07f1      	lsls	r1, r6, #31
 801125a:	d508      	bpl.n	801126e <_dtoa_r+0x34e>
 801125c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011264:	f7f7 f900 	bl	8008468 <__aeabi_dmul>
 8011268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801126c:	3501      	adds	r5, #1
 801126e:	1076      	asrs	r6, r6, #1
 8011270:	3708      	adds	r7, #8
 8011272:	2e00      	cmp	r6, #0
 8011274:	d1f0      	bne.n	8011258 <_dtoa_r+0x338>
 8011276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801127a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801127e:	f7f7 fa1d 	bl	80086bc <__aeabi_ddiv>
 8011282:	e9cd 0100 	strd	r0, r1, [sp]
 8011286:	e01a      	b.n	80112be <_dtoa_r+0x39e>
 8011288:	2502      	movs	r5, #2
 801128a:	e7a3      	b.n	80111d4 <_dtoa_r+0x2b4>
 801128c:	f000 80a0 	beq.w	80113d0 <_dtoa_r+0x4b0>
 8011290:	f1ca 0600 	rsb	r6, sl, #0
 8011294:	4b9f      	ldr	r3, [pc, #636]	; (8011514 <_dtoa_r+0x5f4>)
 8011296:	4fa0      	ldr	r7, [pc, #640]	; (8011518 <_dtoa_r+0x5f8>)
 8011298:	f006 020f 	and.w	r2, r6, #15
 801129c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80112a8:	f7f7 f8de 	bl	8008468 <__aeabi_dmul>
 80112ac:	e9cd 0100 	strd	r0, r1, [sp]
 80112b0:	1136      	asrs	r6, r6, #4
 80112b2:	2300      	movs	r3, #0
 80112b4:	2502      	movs	r5, #2
 80112b6:	2e00      	cmp	r6, #0
 80112b8:	d17f      	bne.n	80113ba <_dtoa_r+0x49a>
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d1e1      	bne.n	8011282 <_dtoa_r+0x362>
 80112be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 8087 	beq.w	80113d4 <_dtoa_r+0x4b4>
 80112c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80112ca:	2200      	movs	r2, #0
 80112cc:	4b93      	ldr	r3, [pc, #588]	; (801151c <_dtoa_r+0x5fc>)
 80112ce:	4630      	mov	r0, r6
 80112d0:	4639      	mov	r1, r7
 80112d2:	f7f7 fb3b 	bl	800894c <__aeabi_dcmplt>
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d07c      	beq.n	80113d4 <_dtoa_r+0x4b4>
 80112da:	f1b9 0f00 	cmp.w	r9, #0
 80112de:	d079      	beq.n	80113d4 <_dtoa_r+0x4b4>
 80112e0:	9b02      	ldr	r3, [sp, #8]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	dd35      	ble.n	8011352 <_dtoa_r+0x432>
 80112e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80112ea:	9308      	str	r3, [sp, #32]
 80112ec:	4639      	mov	r1, r7
 80112ee:	2200      	movs	r2, #0
 80112f0:	4b8b      	ldr	r3, [pc, #556]	; (8011520 <_dtoa_r+0x600>)
 80112f2:	4630      	mov	r0, r6
 80112f4:	f7f7 f8b8 	bl	8008468 <__aeabi_dmul>
 80112f8:	e9cd 0100 	strd	r0, r1, [sp]
 80112fc:	9f02      	ldr	r7, [sp, #8]
 80112fe:	3501      	adds	r5, #1
 8011300:	4628      	mov	r0, r5
 8011302:	f7f7 f847 	bl	8008394 <__aeabi_i2d>
 8011306:	e9dd 2300 	ldrd	r2, r3, [sp]
 801130a:	f7f7 f8ad 	bl	8008468 <__aeabi_dmul>
 801130e:	2200      	movs	r2, #0
 8011310:	4b84      	ldr	r3, [pc, #528]	; (8011524 <_dtoa_r+0x604>)
 8011312:	f7f6 fef3 	bl	80080fc <__adddf3>
 8011316:	4605      	mov	r5, r0
 8011318:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801131c:	2f00      	cmp	r7, #0
 801131e:	d15d      	bne.n	80113dc <_dtoa_r+0x4bc>
 8011320:	2200      	movs	r2, #0
 8011322:	4b81      	ldr	r3, [pc, #516]	; (8011528 <_dtoa_r+0x608>)
 8011324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011328:	f7f6 fee6 	bl	80080f8 <__aeabi_dsub>
 801132c:	462a      	mov	r2, r5
 801132e:	4633      	mov	r3, r6
 8011330:	e9cd 0100 	strd	r0, r1, [sp]
 8011334:	f7f7 fb28 	bl	8008988 <__aeabi_dcmpgt>
 8011338:	2800      	cmp	r0, #0
 801133a:	f040 8288 	bne.w	801184e <_dtoa_r+0x92e>
 801133e:	462a      	mov	r2, r5
 8011340:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011348:	f7f7 fb00 	bl	800894c <__aeabi_dcmplt>
 801134c:	2800      	cmp	r0, #0
 801134e:	f040 827c 	bne.w	801184a <_dtoa_r+0x92a>
 8011352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011356:	e9cd 2300 	strd	r2, r3, [sp]
 801135a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801135c:	2b00      	cmp	r3, #0
 801135e:	f2c0 8150 	blt.w	8011602 <_dtoa_r+0x6e2>
 8011362:	f1ba 0f0e 	cmp.w	sl, #14
 8011366:	f300 814c 	bgt.w	8011602 <_dtoa_r+0x6e2>
 801136a:	4b6a      	ldr	r3, [pc, #424]	; (8011514 <_dtoa_r+0x5f4>)
 801136c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011370:	ed93 7b00 	vldr	d7, [r3]
 8011374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011376:	2b00      	cmp	r3, #0
 8011378:	ed8d 7b02 	vstr	d7, [sp, #8]
 801137c:	f280 80d8 	bge.w	8011530 <_dtoa_r+0x610>
 8011380:	f1b9 0f00 	cmp.w	r9, #0
 8011384:	f300 80d4 	bgt.w	8011530 <_dtoa_r+0x610>
 8011388:	f040 825e 	bne.w	8011848 <_dtoa_r+0x928>
 801138c:	2200      	movs	r2, #0
 801138e:	4b66      	ldr	r3, [pc, #408]	; (8011528 <_dtoa_r+0x608>)
 8011390:	ec51 0b17 	vmov	r0, r1, d7
 8011394:	f7f7 f868 	bl	8008468 <__aeabi_dmul>
 8011398:	e9dd 2300 	ldrd	r2, r3, [sp]
 801139c:	f7f7 faea 	bl	8008974 <__aeabi_dcmpge>
 80113a0:	464f      	mov	r7, r9
 80113a2:	464e      	mov	r6, r9
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f040 8234 	bne.w	8011812 <_dtoa_r+0x8f2>
 80113aa:	2331      	movs	r3, #49	; 0x31
 80113ac:	f10b 0501 	add.w	r5, fp, #1
 80113b0:	f88b 3000 	strb.w	r3, [fp]
 80113b4:	f10a 0a01 	add.w	sl, sl, #1
 80113b8:	e22f      	b.n	801181a <_dtoa_r+0x8fa>
 80113ba:	07f2      	lsls	r2, r6, #31
 80113bc:	d505      	bpl.n	80113ca <_dtoa_r+0x4aa>
 80113be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113c2:	f7f7 f851 	bl	8008468 <__aeabi_dmul>
 80113c6:	3501      	adds	r5, #1
 80113c8:	2301      	movs	r3, #1
 80113ca:	1076      	asrs	r6, r6, #1
 80113cc:	3708      	adds	r7, #8
 80113ce:	e772      	b.n	80112b6 <_dtoa_r+0x396>
 80113d0:	2502      	movs	r5, #2
 80113d2:	e774      	b.n	80112be <_dtoa_r+0x39e>
 80113d4:	f8cd a020 	str.w	sl, [sp, #32]
 80113d8:	464f      	mov	r7, r9
 80113da:	e791      	b.n	8011300 <_dtoa_r+0x3e0>
 80113dc:	4b4d      	ldr	r3, [pc, #308]	; (8011514 <_dtoa_r+0x5f4>)
 80113de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80113e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80113e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d047      	beq.n	801147c <_dtoa_r+0x55c>
 80113ec:	4602      	mov	r2, r0
 80113ee:	460b      	mov	r3, r1
 80113f0:	2000      	movs	r0, #0
 80113f2:	494e      	ldr	r1, [pc, #312]	; (801152c <_dtoa_r+0x60c>)
 80113f4:	f7f7 f962 	bl	80086bc <__aeabi_ddiv>
 80113f8:	462a      	mov	r2, r5
 80113fa:	4633      	mov	r3, r6
 80113fc:	f7f6 fe7c 	bl	80080f8 <__aeabi_dsub>
 8011400:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011404:	465d      	mov	r5, fp
 8011406:	e9dd 0100 	ldrd	r0, r1, [sp]
 801140a:	f7f7 fadd 	bl	80089c8 <__aeabi_d2iz>
 801140e:	4606      	mov	r6, r0
 8011410:	f7f6 ffc0 	bl	8008394 <__aeabi_i2d>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	e9dd 0100 	ldrd	r0, r1, [sp]
 801141c:	f7f6 fe6c 	bl	80080f8 <__aeabi_dsub>
 8011420:	3630      	adds	r6, #48	; 0x30
 8011422:	f805 6b01 	strb.w	r6, [r5], #1
 8011426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801142a:	e9cd 0100 	strd	r0, r1, [sp]
 801142e:	f7f7 fa8d 	bl	800894c <__aeabi_dcmplt>
 8011432:	2800      	cmp	r0, #0
 8011434:	d163      	bne.n	80114fe <_dtoa_r+0x5de>
 8011436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801143a:	2000      	movs	r0, #0
 801143c:	4937      	ldr	r1, [pc, #220]	; (801151c <_dtoa_r+0x5fc>)
 801143e:	f7f6 fe5b 	bl	80080f8 <__aeabi_dsub>
 8011442:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011446:	f7f7 fa81 	bl	800894c <__aeabi_dcmplt>
 801144a:	2800      	cmp	r0, #0
 801144c:	f040 80b7 	bne.w	80115be <_dtoa_r+0x69e>
 8011450:	eba5 030b 	sub.w	r3, r5, fp
 8011454:	429f      	cmp	r7, r3
 8011456:	f77f af7c 	ble.w	8011352 <_dtoa_r+0x432>
 801145a:	2200      	movs	r2, #0
 801145c:	4b30      	ldr	r3, [pc, #192]	; (8011520 <_dtoa_r+0x600>)
 801145e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011462:	f7f7 f801 	bl	8008468 <__aeabi_dmul>
 8011466:	2200      	movs	r2, #0
 8011468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801146c:	4b2c      	ldr	r3, [pc, #176]	; (8011520 <_dtoa_r+0x600>)
 801146e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011472:	f7f6 fff9 	bl	8008468 <__aeabi_dmul>
 8011476:	e9cd 0100 	strd	r0, r1, [sp]
 801147a:	e7c4      	b.n	8011406 <_dtoa_r+0x4e6>
 801147c:	462a      	mov	r2, r5
 801147e:	4633      	mov	r3, r6
 8011480:	f7f6 fff2 	bl	8008468 <__aeabi_dmul>
 8011484:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011488:	eb0b 0507 	add.w	r5, fp, r7
 801148c:	465e      	mov	r6, fp
 801148e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011492:	f7f7 fa99 	bl	80089c8 <__aeabi_d2iz>
 8011496:	4607      	mov	r7, r0
 8011498:	f7f6 ff7c 	bl	8008394 <__aeabi_i2d>
 801149c:	3730      	adds	r7, #48	; 0x30
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114a6:	f7f6 fe27 	bl	80080f8 <__aeabi_dsub>
 80114aa:	f806 7b01 	strb.w	r7, [r6], #1
 80114ae:	42ae      	cmp	r6, r5
 80114b0:	e9cd 0100 	strd	r0, r1, [sp]
 80114b4:	f04f 0200 	mov.w	r2, #0
 80114b8:	d126      	bne.n	8011508 <_dtoa_r+0x5e8>
 80114ba:	4b1c      	ldr	r3, [pc, #112]	; (801152c <_dtoa_r+0x60c>)
 80114bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80114c0:	f7f6 fe1c 	bl	80080fc <__adddf3>
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114cc:	f7f7 fa5c 	bl	8008988 <__aeabi_dcmpgt>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d174      	bne.n	80115be <_dtoa_r+0x69e>
 80114d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80114d8:	2000      	movs	r0, #0
 80114da:	4914      	ldr	r1, [pc, #80]	; (801152c <_dtoa_r+0x60c>)
 80114dc:	f7f6 fe0c 	bl	80080f8 <__aeabi_dsub>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114e8:	f7f7 fa30 	bl	800894c <__aeabi_dcmplt>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	f43f af30 	beq.w	8011352 <_dtoa_r+0x432>
 80114f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80114f6:	2b30      	cmp	r3, #48	; 0x30
 80114f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80114fc:	d002      	beq.n	8011504 <_dtoa_r+0x5e4>
 80114fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011502:	e04a      	b.n	801159a <_dtoa_r+0x67a>
 8011504:	4615      	mov	r5, r2
 8011506:	e7f4      	b.n	80114f2 <_dtoa_r+0x5d2>
 8011508:	4b05      	ldr	r3, [pc, #20]	; (8011520 <_dtoa_r+0x600>)
 801150a:	f7f6 ffad 	bl	8008468 <__aeabi_dmul>
 801150e:	e9cd 0100 	strd	r0, r1, [sp]
 8011512:	e7bc      	b.n	801148e <_dtoa_r+0x56e>
 8011514:	08012b50 	.word	0x08012b50
 8011518:	08012b28 	.word	0x08012b28
 801151c:	3ff00000 	.word	0x3ff00000
 8011520:	40240000 	.word	0x40240000
 8011524:	401c0000 	.word	0x401c0000
 8011528:	40140000 	.word	0x40140000
 801152c:	3fe00000 	.word	0x3fe00000
 8011530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011534:	465d      	mov	r5, fp
 8011536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801153a:	4630      	mov	r0, r6
 801153c:	4639      	mov	r1, r7
 801153e:	f7f7 f8bd 	bl	80086bc <__aeabi_ddiv>
 8011542:	f7f7 fa41 	bl	80089c8 <__aeabi_d2iz>
 8011546:	4680      	mov	r8, r0
 8011548:	f7f6 ff24 	bl	8008394 <__aeabi_i2d>
 801154c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011550:	f7f6 ff8a 	bl	8008468 <__aeabi_dmul>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4630      	mov	r0, r6
 801155a:	4639      	mov	r1, r7
 801155c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011560:	f7f6 fdca 	bl	80080f8 <__aeabi_dsub>
 8011564:	f805 6b01 	strb.w	r6, [r5], #1
 8011568:	eba5 060b 	sub.w	r6, r5, fp
 801156c:	45b1      	cmp	r9, r6
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	d139      	bne.n	80115e8 <_dtoa_r+0x6c8>
 8011574:	f7f6 fdc2 	bl	80080fc <__adddf3>
 8011578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801157c:	4606      	mov	r6, r0
 801157e:	460f      	mov	r7, r1
 8011580:	f7f7 fa02 	bl	8008988 <__aeabi_dcmpgt>
 8011584:	b9c8      	cbnz	r0, 80115ba <_dtoa_r+0x69a>
 8011586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801158a:	4630      	mov	r0, r6
 801158c:	4639      	mov	r1, r7
 801158e:	f7f7 f9d3 	bl	8008938 <__aeabi_dcmpeq>
 8011592:	b110      	cbz	r0, 801159a <_dtoa_r+0x67a>
 8011594:	f018 0f01 	tst.w	r8, #1
 8011598:	d10f      	bne.n	80115ba <_dtoa_r+0x69a>
 801159a:	9904      	ldr	r1, [sp, #16]
 801159c:	4620      	mov	r0, r4
 801159e:	f000 fc9f 	bl	8011ee0 <_Bfree>
 80115a2:	2300      	movs	r3, #0
 80115a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80115a6:	702b      	strb	r3, [r5, #0]
 80115a8:	f10a 0301 	add.w	r3, sl, #1
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f000 8241 	beq.w	8011a38 <_dtoa_r+0xb18>
 80115b6:	601d      	str	r5, [r3, #0]
 80115b8:	e23e      	b.n	8011a38 <_dtoa_r+0xb18>
 80115ba:	f8cd a020 	str.w	sl, [sp, #32]
 80115be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115c2:	2a39      	cmp	r2, #57	; 0x39
 80115c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80115c8:	d108      	bne.n	80115dc <_dtoa_r+0x6bc>
 80115ca:	459b      	cmp	fp, r3
 80115cc:	d10a      	bne.n	80115e4 <_dtoa_r+0x6c4>
 80115ce:	9b08      	ldr	r3, [sp, #32]
 80115d0:	3301      	adds	r3, #1
 80115d2:	9308      	str	r3, [sp, #32]
 80115d4:	2330      	movs	r3, #48	; 0x30
 80115d6:	f88b 3000 	strb.w	r3, [fp]
 80115da:	465b      	mov	r3, fp
 80115dc:	781a      	ldrb	r2, [r3, #0]
 80115de:	3201      	adds	r2, #1
 80115e0:	701a      	strb	r2, [r3, #0]
 80115e2:	e78c      	b.n	80114fe <_dtoa_r+0x5de>
 80115e4:	461d      	mov	r5, r3
 80115e6:	e7ea      	b.n	80115be <_dtoa_r+0x69e>
 80115e8:	2200      	movs	r2, #0
 80115ea:	4b9b      	ldr	r3, [pc, #620]	; (8011858 <_dtoa_r+0x938>)
 80115ec:	f7f6 ff3c 	bl	8008468 <__aeabi_dmul>
 80115f0:	2200      	movs	r2, #0
 80115f2:	2300      	movs	r3, #0
 80115f4:	4606      	mov	r6, r0
 80115f6:	460f      	mov	r7, r1
 80115f8:	f7f7 f99e 	bl	8008938 <__aeabi_dcmpeq>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d09a      	beq.n	8011536 <_dtoa_r+0x616>
 8011600:	e7cb      	b.n	801159a <_dtoa_r+0x67a>
 8011602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011604:	2a00      	cmp	r2, #0
 8011606:	f000 808b 	beq.w	8011720 <_dtoa_r+0x800>
 801160a:	9a06      	ldr	r2, [sp, #24]
 801160c:	2a01      	cmp	r2, #1
 801160e:	dc6e      	bgt.n	80116ee <_dtoa_r+0x7ce>
 8011610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011612:	2a00      	cmp	r2, #0
 8011614:	d067      	beq.n	80116e6 <_dtoa_r+0x7c6>
 8011616:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801161a:	9f07      	ldr	r7, [sp, #28]
 801161c:	9d05      	ldr	r5, [sp, #20]
 801161e:	9a05      	ldr	r2, [sp, #20]
 8011620:	2101      	movs	r1, #1
 8011622:	441a      	add	r2, r3
 8011624:	4620      	mov	r0, r4
 8011626:	9205      	str	r2, [sp, #20]
 8011628:	4498      	add	r8, r3
 801162a:	f000 fcf9 	bl	8012020 <__i2b>
 801162e:	4606      	mov	r6, r0
 8011630:	2d00      	cmp	r5, #0
 8011632:	dd0c      	ble.n	801164e <_dtoa_r+0x72e>
 8011634:	f1b8 0f00 	cmp.w	r8, #0
 8011638:	dd09      	ble.n	801164e <_dtoa_r+0x72e>
 801163a:	4545      	cmp	r5, r8
 801163c:	9a05      	ldr	r2, [sp, #20]
 801163e:	462b      	mov	r3, r5
 8011640:	bfa8      	it	ge
 8011642:	4643      	movge	r3, r8
 8011644:	1ad2      	subs	r2, r2, r3
 8011646:	9205      	str	r2, [sp, #20]
 8011648:	1aed      	subs	r5, r5, r3
 801164a:	eba8 0803 	sub.w	r8, r8, r3
 801164e:	9b07      	ldr	r3, [sp, #28]
 8011650:	b1eb      	cbz	r3, 801168e <_dtoa_r+0x76e>
 8011652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011654:	2b00      	cmp	r3, #0
 8011656:	d067      	beq.n	8011728 <_dtoa_r+0x808>
 8011658:	b18f      	cbz	r7, 801167e <_dtoa_r+0x75e>
 801165a:	4631      	mov	r1, r6
 801165c:	463a      	mov	r2, r7
 801165e:	4620      	mov	r0, r4
 8011660:	f000 fd7e 	bl	8012160 <__pow5mult>
 8011664:	9a04      	ldr	r2, [sp, #16]
 8011666:	4601      	mov	r1, r0
 8011668:	4606      	mov	r6, r0
 801166a:	4620      	mov	r0, r4
 801166c:	f000 fce1 	bl	8012032 <__multiply>
 8011670:	9904      	ldr	r1, [sp, #16]
 8011672:	9008      	str	r0, [sp, #32]
 8011674:	4620      	mov	r0, r4
 8011676:	f000 fc33 	bl	8011ee0 <_Bfree>
 801167a:	9b08      	ldr	r3, [sp, #32]
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	9b07      	ldr	r3, [sp, #28]
 8011680:	1bda      	subs	r2, r3, r7
 8011682:	d004      	beq.n	801168e <_dtoa_r+0x76e>
 8011684:	9904      	ldr	r1, [sp, #16]
 8011686:	4620      	mov	r0, r4
 8011688:	f000 fd6a 	bl	8012160 <__pow5mult>
 801168c:	9004      	str	r0, [sp, #16]
 801168e:	2101      	movs	r1, #1
 8011690:	4620      	mov	r0, r4
 8011692:	f000 fcc5 	bl	8012020 <__i2b>
 8011696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011698:	4607      	mov	r7, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 81d0 	beq.w	8011a40 <_dtoa_r+0xb20>
 80116a0:	461a      	mov	r2, r3
 80116a2:	4601      	mov	r1, r0
 80116a4:	4620      	mov	r0, r4
 80116a6:	f000 fd5b 	bl	8012160 <__pow5mult>
 80116aa:	9b06      	ldr	r3, [sp, #24]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	4607      	mov	r7, r0
 80116b0:	dc40      	bgt.n	8011734 <_dtoa_r+0x814>
 80116b2:	9b00      	ldr	r3, [sp, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d139      	bne.n	801172c <_dtoa_r+0x80c>
 80116b8:	9b01      	ldr	r3, [sp, #4]
 80116ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d136      	bne.n	8011730 <_dtoa_r+0x810>
 80116c2:	9b01      	ldr	r3, [sp, #4]
 80116c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116c8:	0d1b      	lsrs	r3, r3, #20
 80116ca:	051b      	lsls	r3, r3, #20
 80116cc:	b12b      	cbz	r3, 80116da <_dtoa_r+0x7ba>
 80116ce:	9b05      	ldr	r3, [sp, #20]
 80116d0:	3301      	adds	r3, #1
 80116d2:	9305      	str	r3, [sp, #20]
 80116d4:	f108 0801 	add.w	r8, r8, #1
 80116d8:	2301      	movs	r3, #1
 80116da:	9307      	str	r3, [sp, #28]
 80116dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d12a      	bne.n	8011738 <_dtoa_r+0x818>
 80116e2:	2001      	movs	r0, #1
 80116e4:	e030      	b.n	8011748 <_dtoa_r+0x828>
 80116e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80116ec:	e795      	b.n	801161a <_dtoa_r+0x6fa>
 80116ee:	9b07      	ldr	r3, [sp, #28]
 80116f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80116f4:	42bb      	cmp	r3, r7
 80116f6:	bfbf      	itttt	lt
 80116f8:	9b07      	ldrlt	r3, [sp, #28]
 80116fa:	9707      	strlt	r7, [sp, #28]
 80116fc:	1afa      	sublt	r2, r7, r3
 80116fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011700:	bfbb      	ittet	lt
 8011702:	189b      	addlt	r3, r3, r2
 8011704:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011706:	1bdf      	subge	r7, r3, r7
 8011708:	2700      	movlt	r7, #0
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	bfb5      	itete	lt
 8011710:	9b05      	ldrlt	r3, [sp, #20]
 8011712:	9d05      	ldrge	r5, [sp, #20]
 8011714:	eba3 0509 	sublt.w	r5, r3, r9
 8011718:	464b      	movge	r3, r9
 801171a:	bfb8      	it	lt
 801171c:	2300      	movlt	r3, #0
 801171e:	e77e      	b.n	801161e <_dtoa_r+0x6fe>
 8011720:	9f07      	ldr	r7, [sp, #28]
 8011722:	9d05      	ldr	r5, [sp, #20]
 8011724:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011726:	e783      	b.n	8011630 <_dtoa_r+0x710>
 8011728:	9a07      	ldr	r2, [sp, #28]
 801172a:	e7ab      	b.n	8011684 <_dtoa_r+0x764>
 801172c:	2300      	movs	r3, #0
 801172e:	e7d4      	b.n	80116da <_dtoa_r+0x7ba>
 8011730:	9b00      	ldr	r3, [sp, #0]
 8011732:	e7d2      	b.n	80116da <_dtoa_r+0x7ba>
 8011734:	2300      	movs	r3, #0
 8011736:	9307      	str	r3, [sp, #28]
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801173e:	6918      	ldr	r0, [r3, #16]
 8011740:	f000 fc20 	bl	8011f84 <__hi0bits>
 8011744:	f1c0 0020 	rsb	r0, r0, #32
 8011748:	4440      	add	r0, r8
 801174a:	f010 001f 	ands.w	r0, r0, #31
 801174e:	d047      	beq.n	80117e0 <_dtoa_r+0x8c0>
 8011750:	f1c0 0320 	rsb	r3, r0, #32
 8011754:	2b04      	cmp	r3, #4
 8011756:	dd3b      	ble.n	80117d0 <_dtoa_r+0x8b0>
 8011758:	9b05      	ldr	r3, [sp, #20]
 801175a:	f1c0 001c 	rsb	r0, r0, #28
 801175e:	4403      	add	r3, r0
 8011760:	9305      	str	r3, [sp, #20]
 8011762:	4405      	add	r5, r0
 8011764:	4480      	add	r8, r0
 8011766:	9b05      	ldr	r3, [sp, #20]
 8011768:	2b00      	cmp	r3, #0
 801176a:	dd05      	ble.n	8011778 <_dtoa_r+0x858>
 801176c:	461a      	mov	r2, r3
 801176e:	9904      	ldr	r1, [sp, #16]
 8011770:	4620      	mov	r0, r4
 8011772:	f000 fd43 	bl	80121fc <__lshift>
 8011776:	9004      	str	r0, [sp, #16]
 8011778:	f1b8 0f00 	cmp.w	r8, #0
 801177c:	dd05      	ble.n	801178a <_dtoa_r+0x86a>
 801177e:	4639      	mov	r1, r7
 8011780:	4642      	mov	r2, r8
 8011782:	4620      	mov	r0, r4
 8011784:	f000 fd3a 	bl	80121fc <__lshift>
 8011788:	4607      	mov	r7, r0
 801178a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801178c:	b353      	cbz	r3, 80117e4 <_dtoa_r+0x8c4>
 801178e:	4639      	mov	r1, r7
 8011790:	9804      	ldr	r0, [sp, #16]
 8011792:	f000 fd87 	bl	80122a4 <__mcmp>
 8011796:	2800      	cmp	r0, #0
 8011798:	da24      	bge.n	80117e4 <_dtoa_r+0x8c4>
 801179a:	2300      	movs	r3, #0
 801179c:	220a      	movs	r2, #10
 801179e:	9904      	ldr	r1, [sp, #16]
 80117a0:	4620      	mov	r0, r4
 80117a2:	f000 fbb4 	bl	8011f0e <__multadd>
 80117a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117a8:	9004      	str	r0, [sp, #16]
 80117aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f000 814d 	beq.w	8011a4e <_dtoa_r+0xb2e>
 80117b4:	2300      	movs	r3, #0
 80117b6:	4631      	mov	r1, r6
 80117b8:	220a      	movs	r2, #10
 80117ba:	4620      	mov	r0, r4
 80117bc:	f000 fba7 	bl	8011f0e <__multadd>
 80117c0:	9b02      	ldr	r3, [sp, #8]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	4606      	mov	r6, r0
 80117c6:	dc4f      	bgt.n	8011868 <_dtoa_r+0x948>
 80117c8:	9b06      	ldr	r3, [sp, #24]
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	dd4c      	ble.n	8011868 <_dtoa_r+0x948>
 80117ce:	e011      	b.n	80117f4 <_dtoa_r+0x8d4>
 80117d0:	d0c9      	beq.n	8011766 <_dtoa_r+0x846>
 80117d2:	9a05      	ldr	r2, [sp, #20]
 80117d4:	331c      	adds	r3, #28
 80117d6:	441a      	add	r2, r3
 80117d8:	9205      	str	r2, [sp, #20]
 80117da:	441d      	add	r5, r3
 80117dc:	4498      	add	r8, r3
 80117de:	e7c2      	b.n	8011766 <_dtoa_r+0x846>
 80117e0:	4603      	mov	r3, r0
 80117e2:	e7f6      	b.n	80117d2 <_dtoa_r+0x8b2>
 80117e4:	f1b9 0f00 	cmp.w	r9, #0
 80117e8:	dc38      	bgt.n	801185c <_dtoa_r+0x93c>
 80117ea:	9b06      	ldr	r3, [sp, #24]
 80117ec:	2b02      	cmp	r3, #2
 80117ee:	dd35      	ble.n	801185c <_dtoa_r+0x93c>
 80117f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80117f4:	9b02      	ldr	r3, [sp, #8]
 80117f6:	b963      	cbnz	r3, 8011812 <_dtoa_r+0x8f2>
 80117f8:	4639      	mov	r1, r7
 80117fa:	2205      	movs	r2, #5
 80117fc:	4620      	mov	r0, r4
 80117fe:	f000 fb86 	bl	8011f0e <__multadd>
 8011802:	4601      	mov	r1, r0
 8011804:	4607      	mov	r7, r0
 8011806:	9804      	ldr	r0, [sp, #16]
 8011808:	f000 fd4c 	bl	80122a4 <__mcmp>
 801180c:	2800      	cmp	r0, #0
 801180e:	f73f adcc 	bgt.w	80113aa <_dtoa_r+0x48a>
 8011812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011814:	465d      	mov	r5, fp
 8011816:	ea6f 0a03 	mvn.w	sl, r3
 801181a:	f04f 0900 	mov.w	r9, #0
 801181e:	4639      	mov	r1, r7
 8011820:	4620      	mov	r0, r4
 8011822:	f000 fb5d 	bl	8011ee0 <_Bfree>
 8011826:	2e00      	cmp	r6, #0
 8011828:	f43f aeb7 	beq.w	801159a <_dtoa_r+0x67a>
 801182c:	f1b9 0f00 	cmp.w	r9, #0
 8011830:	d005      	beq.n	801183e <_dtoa_r+0x91e>
 8011832:	45b1      	cmp	r9, r6
 8011834:	d003      	beq.n	801183e <_dtoa_r+0x91e>
 8011836:	4649      	mov	r1, r9
 8011838:	4620      	mov	r0, r4
 801183a:	f000 fb51 	bl	8011ee0 <_Bfree>
 801183e:	4631      	mov	r1, r6
 8011840:	4620      	mov	r0, r4
 8011842:	f000 fb4d 	bl	8011ee0 <_Bfree>
 8011846:	e6a8      	b.n	801159a <_dtoa_r+0x67a>
 8011848:	2700      	movs	r7, #0
 801184a:	463e      	mov	r6, r7
 801184c:	e7e1      	b.n	8011812 <_dtoa_r+0x8f2>
 801184e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011852:	463e      	mov	r6, r7
 8011854:	e5a9      	b.n	80113aa <_dtoa_r+0x48a>
 8011856:	bf00      	nop
 8011858:	40240000 	.word	0x40240000
 801185c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801185e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	f000 80fa 	beq.w	8011a5c <_dtoa_r+0xb3c>
 8011868:	2d00      	cmp	r5, #0
 801186a:	dd05      	ble.n	8011878 <_dtoa_r+0x958>
 801186c:	4631      	mov	r1, r6
 801186e:	462a      	mov	r2, r5
 8011870:	4620      	mov	r0, r4
 8011872:	f000 fcc3 	bl	80121fc <__lshift>
 8011876:	4606      	mov	r6, r0
 8011878:	9b07      	ldr	r3, [sp, #28]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d04c      	beq.n	8011918 <_dtoa_r+0x9f8>
 801187e:	6871      	ldr	r1, [r6, #4]
 8011880:	4620      	mov	r0, r4
 8011882:	f000 faf9 	bl	8011e78 <_Balloc>
 8011886:	6932      	ldr	r2, [r6, #16]
 8011888:	3202      	adds	r2, #2
 801188a:	4605      	mov	r5, r0
 801188c:	0092      	lsls	r2, r2, #2
 801188e:	f106 010c 	add.w	r1, r6, #12
 8011892:	300c      	adds	r0, #12
 8011894:	f7fe fd0a 	bl	80102ac <memcpy>
 8011898:	2201      	movs	r2, #1
 801189a:	4629      	mov	r1, r5
 801189c:	4620      	mov	r0, r4
 801189e:	f000 fcad 	bl	80121fc <__lshift>
 80118a2:	9b00      	ldr	r3, [sp, #0]
 80118a4:	f8cd b014 	str.w	fp, [sp, #20]
 80118a8:	f003 0301 	and.w	r3, r3, #1
 80118ac:	46b1      	mov	r9, r6
 80118ae:	9307      	str	r3, [sp, #28]
 80118b0:	4606      	mov	r6, r0
 80118b2:	4639      	mov	r1, r7
 80118b4:	9804      	ldr	r0, [sp, #16]
 80118b6:	f7ff faa5 	bl	8010e04 <quorem>
 80118ba:	4649      	mov	r1, r9
 80118bc:	4605      	mov	r5, r0
 80118be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80118c2:	9804      	ldr	r0, [sp, #16]
 80118c4:	f000 fcee 	bl	80122a4 <__mcmp>
 80118c8:	4632      	mov	r2, r6
 80118ca:	9000      	str	r0, [sp, #0]
 80118cc:	4639      	mov	r1, r7
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fd02 	bl	80122d8 <__mdiff>
 80118d4:	68c3      	ldr	r3, [r0, #12]
 80118d6:	4602      	mov	r2, r0
 80118d8:	bb03      	cbnz	r3, 801191c <_dtoa_r+0x9fc>
 80118da:	4601      	mov	r1, r0
 80118dc:	9008      	str	r0, [sp, #32]
 80118de:	9804      	ldr	r0, [sp, #16]
 80118e0:	f000 fce0 	bl	80122a4 <__mcmp>
 80118e4:	9a08      	ldr	r2, [sp, #32]
 80118e6:	4603      	mov	r3, r0
 80118e8:	4611      	mov	r1, r2
 80118ea:	4620      	mov	r0, r4
 80118ec:	9308      	str	r3, [sp, #32]
 80118ee:	f000 faf7 	bl	8011ee0 <_Bfree>
 80118f2:	9b08      	ldr	r3, [sp, #32]
 80118f4:	b9a3      	cbnz	r3, 8011920 <_dtoa_r+0xa00>
 80118f6:	9a06      	ldr	r2, [sp, #24]
 80118f8:	b992      	cbnz	r2, 8011920 <_dtoa_r+0xa00>
 80118fa:	9a07      	ldr	r2, [sp, #28]
 80118fc:	b982      	cbnz	r2, 8011920 <_dtoa_r+0xa00>
 80118fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011902:	d029      	beq.n	8011958 <_dtoa_r+0xa38>
 8011904:	9b00      	ldr	r3, [sp, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	dd01      	ble.n	801190e <_dtoa_r+0x9ee>
 801190a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801190e:	9b05      	ldr	r3, [sp, #20]
 8011910:	1c5d      	adds	r5, r3, #1
 8011912:	f883 8000 	strb.w	r8, [r3]
 8011916:	e782      	b.n	801181e <_dtoa_r+0x8fe>
 8011918:	4630      	mov	r0, r6
 801191a:	e7c2      	b.n	80118a2 <_dtoa_r+0x982>
 801191c:	2301      	movs	r3, #1
 801191e:	e7e3      	b.n	80118e8 <_dtoa_r+0x9c8>
 8011920:	9a00      	ldr	r2, [sp, #0]
 8011922:	2a00      	cmp	r2, #0
 8011924:	db04      	blt.n	8011930 <_dtoa_r+0xa10>
 8011926:	d125      	bne.n	8011974 <_dtoa_r+0xa54>
 8011928:	9a06      	ldr	r2, [sp, #24]
 801192a:	bb1a      	cbnz	r2, 8011974 <_dtoa_r+0xa54>
 801192c:	9a07      	ldr	r2, [sp, #28]
 801192e:	bb0a      	cbnz	r2, 8011974 <_dtoa_r+0xa54>
 8011930:	2b00      	cmp	r3, #0
 8011932:	ddec      	ble.n	801190e <_dtoa_r+0x9ee>
 8011934:	2201      	movs	r2, #1
 8011936:	9904      	ldr	r1, [sp, #16]
 8011938:	4620      	mov	r0, r4
 801193a:	f000 fc5f 	bl	80121fc <__lshift>
 801193e:	4639      	mov	r1, r7
 8011940:	9004      	str	r0, [sp, #16]
 8011942:	f000 fcaf 	bl	80122a4 <__mcmp>
 8011946:	2800      	cmp	r0, #0
 8011948:	dc03      	bgt.n	8011952 <_dtoa_r+0xa32>
 801194a:	d1e0      	bne.n	801190e <_dtoa_r+0x9ee>
 801194c:	f018 0f01 	tst.w	r8, #1
 8011950:	d0dd      	beq.n	801190e <_dtoa_r+0x9ee>
 8011952:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011956:	d1d8      	bne.n	801190a <_dtoa_r+0x9ea>
 8011958:	9b05      	ldr	r3, [sp, #20]
 801195a:	9a05      	ldr	r2, [sp, #20]
 801195c:	1c5d      	adds	r5, r3, #1
 801195e:	2339      	movs	r3, #57	; 0x39
 8011960:	7013      	strb	r3, [r2, #0]
 8011962:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011966:	2b39      	cmp	r3, #57	; 0x39
 8011968:	f105 32ff 	add.w	r2, r5, #4294967295
 801196c:	d04f      	beq.n	8011a0e <_dtoa_r+0xaee>
 801196e:	3301      	adds	r3, #1
 8011970:	7013      	strb	r3, [r2, #0]
 8011972:	e754      	b.n	801181e <_dtoa_r+0x8fe>
 8011974:	9a05      	ldr	r2, [sp, #20]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f102 0501 	add.w	r5, r2, #1
 801197c:	dd06      	ble.n	801198c <_dtoa_r+0xa6c>
 801197e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011982:	d0e9      	beq.n	8011958 <_dtoa_r+0xa38>
 8011984:	f108 0801 	add.w	r8, r8, #1
 8011988:	9b05      	ldr	r3, [sp, #20]
 801198a:	e7c2      	b.n	8011912 <_dtoa_r+0x9f2>
 801198c:	9a02      	ldr	r2, [sp, #8]
 801198e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011992:	eba5 030b 	sub.w	r3, r5, fp
 8011996:	4293      	cmp	r3, r2
 8011998:	d021      	beq.n	80119de <_dtoa_r+0xabe>
 801199a:	2300      	movs	r3, #0
 801199c:	220a      	movs	r2, #10
 801199e:	9904      	ldr	r1, [sp, #16]
 80119a0:	4620      	mov	r0, r4
 80119a2:	f000 fab4 	bl	8011f0e <__multadd>
 80119a6:	45b1      	cmp	r9, r6
 80119a8:	9004      	str	r0, [sp, #16]
 80119aa:	f04f 0300 	mov.w	r3, #0
 80119ae:	f04f 020a 	mov.w	r2, #10
 80119b2:	4649      	mov	r1, r9
 80119b4:	4620      	mov	r0, r4
 80119b6:	d105      	bne.n	80119c4 <_dtoa_r+0xaa4>
 80119b8:	f000 faa9 	bl	8011f0e <__multadd>
 80119bc:	4681      	mov	r9, r0
 80119be:	4606      	mov	r6, r0
 80119c0:	9505      	str	r5, [sp, #20]
 80119c2:	e776      	b.n	80118b2 <_dtoa_r+0x992>
 80119c4:	f000 faa3 	bl	8011f0e <__multadd>
 80119c8:	4631      	mov	r1, r6
 80119ca:	4681      	mov	r9, r0
 80119cc:	2300      	movs	r3, #0
 80119ce:	220a      	movs	r2, #10
 80119d0:	4620      	mov	r0, r4
 80119d2:	f000 fa9c 	bl	8011f0e <__multadd>
 80119d6:	4606      	mov	r6, r0
 80119d8:	e7f2      	b.n	80119c0 <_dtoa_r+0xaa0>
 80119da:	f04f 0900 	mov.w	r9, #0
 80119de:	2201      	movs	r2, #1
 80119e0:	9904      	ldr	r1, [sp, #16]
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 fc0a 	bl	80121fc <__lshift>
 80119e8:	4639      	mov	r1, r7
 80119ea:	9004      	str	r0, [sp, #16]
 80119ec:	f000 fc5a 	bl	80122a4 <__mcmp>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	dcb6      	bgt.n	8011962 <_dtoa_r+0xa42>
 80119f4:	d102      	bne.n	80119fc <_dtoa_r+0xadc>
 80119f6:	f018 0f01 	tst.w	r8, #1
 80119fa:	d1b2      	bne.n	8011962 <_dtoa_r+0xa42>
 80119fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011a00:	2b30      	cmp	r3, #48	; 0x30
 8011a02:	f105 32ff 	add.w	r2, r5, #4294967295
 8011a06:	f47f af0a 	bne.w	801181e <_dtoa_r+0x8fe>
 8011a0a:	4615      	mov	r5, r2
 8011a0c:	e7f6      	b.n	80119fc <_dtoa_r+0xadc>
 8011a0e:	4593      	cmp	fp, r2
 8011a10:	d105      	bne.n	8011a1e <_dtoa_r+0xafe>
 8011a12:	2331      	movs	r3, #49	; 0x31
 8011a14:	f10a 0a01 	add.w	sl, sl, #1
 8011a18:	f88b 3000 	strb.w	r3, [fp]
 8011a1c:	e6ff      	b.n	801181e <_dtoa_r+0x8fe>
 8011a1e:	4615      	mov	r5, r2
 8011a20:	e79f      	b.n	8011962 <_dtoa_r+0xa42>
 8011a22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011a88 <_dtoa_r+0xb68>
 8011a26:	e007      	b.n	8011a38 <_dtoa_r+0xb18>
 8011a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011a8c <_dtoa_r+0xb6c>
 8011a2e:	b11b      	cbz	r3, 8011a38 <_dtoa_r+0xb18>
 8011a30:	f10b 0308 	add.w	r3, fp, #8
 8011a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	4658      	mov	r0, fp
 8011a3a:	b017      	add	sp, #92	; 0x5c
 8011a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a40:	9b06      	ldr	r3, [sp, #24]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	f77f ae35 	ble.w	80116b2 <_dtoa_r+0x792>
 8011a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a4a:	9307      	str	r3, [sp, #28]
 8011a4c:	e649      	b.n	80116e2 <_dtoa_r+0x7c2>
 8011a4e:	9b02      	ldr	r3, [sp, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dc03      	bgt.n	8011a5c <_dtoa_r+0xb3c>
 8011a54:	9b06      	ldr	r3, [sp, #24]
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	f73f aecc 	bgt.w	80117f4 <_dtoa_r+0x8d4>
 8011a5c:	465d      	mov	r5, fp
 8011a5e:	4639      	mov	r1, r7
 8011a60:	9804      	ldr	r0, [sp, #16]
 8011a62:	f7ff f9cf 	bl	8010e04 <quorem>
 8011a66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011a6a:	f805 8b01 	strb.w	r8, [r5], #1
 8011a6e:	9a02      	ldr	r2, [sp, #8]
 8011a70:	eba5 030b 	sub.w	r3, r5, fp
 8011a74:	429a      	cmp	r2, r3
 8011a76:	ddb0      	ble.n	80119da <_dtoa_r+0xaba>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	220a      	movs	r2, #10
 8011a7c:	9904      	ldr	r1, [sp, #16]
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f000 fa45 	bl	8011f0e <__multadd>
 8011a84:	9004      	str	r0, [sp, #16]
 8011a86:	e7ea      	b.n	8011a5e <_dtoa_r+0xb3e>
 8011a88:	08012a94 	.word	0x08012a94
 8011a8c:	08012ab8 	.word	0x08012ab8

08011a90 <__sflush_r>:
 8011a90:	898a      	ldrh	r2, [r1, #12]
 8011a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a96:	4605      	mov	r5, r0
 8011a98:	0710      	lsls	r0, r2, #28
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	d458      	bmi.n	8011b50 <__sflush_r+0xc0>
 8011a9e:	684b      	ldr	r3, [r1, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	dc05      	bgt.n	8011ab0 <__sflush_r+0x20>
 8011aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	dc02      	bgt.n	8011ab0 <__sflush_r+0x20>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ab2:	2e00      	cmp	r6, #0
 8011ab4:	d0f9      	beq.n	8011aaa <__sflush_r+0x1a>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011abc:	682f      	ldr	r7, [r5, #0]
 8011abe:	6a21      	ldr	r1, [r4, #32]
 8011ac0:	602b      	str	r3, [r5, #0]
 8011ac2:	d032      	beq.n	8011b2a <__sflush_r+0x9a>
 8011ac4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	075a      	lsls	r2, r3, #29
 8011aca:	d505      	bpl.n	8011ad8 <__sflush_r+0x48>
 8011acc:	6863      	ldr	r3, [r4, #4]
 8011ace:	1ac0      	subs	r0, r0, r3
 8011ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ad2:	b10b      	cbz	r3, 8011ad8 <__sflush_r+0x48>
 8011ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ad6:	1ac0      	subs	r0, r0, r3
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4602      	mov	r2, r0
 8011adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ade:	6a21      	ldr	r1, [r4, #32]
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b0      	blx	r6
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	89a3      	ldrh	r3, [r4, #12]
 8011ae8:	d106      	bne.n	8011af8 <__sflush_r+0x68>
 8011aea:	6829      	ldr	r1, [r5, #0]
 8011aec:	291d      	cmp	r1, #29
 8011aee:	d848      	bhi.n	8011b82 <__sflush_r+0xf2>
 8011af0:	4a29      	ldr	r2, [pc, #164]	; (8011b98 <__sflush_r+0x108>)
 8011af2:	40ca      	lsrs	r2, r1
 8011af4:	07d6      	lsls	r6, r2, #31
 8011af6:	d544      	bpl.n	8011b82 <__sflush_r+0xf2>
 8011af8:	2200      	movs	r2, #0
 8011afa:	6062      	str	r2, [r4, #4]
 8011afc:	04d9      	lsls	r1, r3, #19
 8011afe:	6922      	ldr	r2, [r4, #16]
 8011b00:	6022      	str	r2, [r4, #0]
 8011b02:	d504      	bpl.n	8011b0e <__sflush_r+0x7e>
 8011b04:	1c42      	adds	r2, r0, #1
 8011b06:	d101      	bne.n	8011b0c <__sflush_r+0x7c>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b903      	cbnz	r3, 8011b0e <__sflush_r+0x7e>
 8011b0c:	6560      	str	r0, [r4, #84]	; 0x54
 8011b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b10:	602f      	str	r7, [r5, #0]
 8011b12:	2900      	cmp	r1, #0
 8011b14:	d0c9      	beq.n	8011aaa <__sflush_r+0x1a>
 8011b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b1a:	4299      	cmp	r1, r3
 8011b1c:	d002      	beq.n	8011b24 <__sflush_r+0x94>
 8011b1e:	4628      	mov	r0, r5
 8011b20:	f000 fc94 	bl	801244c <_free_r>
 8011b24:	2000      	movs	r0, #0
 8011b26:	6360      	str	r0, [r4, #52]	; 0x34
 8011b28:	e7c0      	b.n	8011aac <__sflush_r+0x1c>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	47b0      	blx	r6
 8011b30:	1c41      	adds	r1, r0, #1
 8011b32:	d1c8      	bne.n	8011ac6 <__sflush_r+0x36>
 8011b34:	682b      	ldr	r3, [r5, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d0c5      	beq.n	8011ac6 <__sflush_r+0x36>
 8011b3a:	2b1d      	cmp	r3, #29
 8011b3c:	d001      	beq.n	8011b42 <__sflush_r+0xb2>
 8011b3e:	2b16      	cmp	r3, #22
 8011b40:	d101      	bne.n	8011b46 <__sflush_r+0xb6>
 8011b42:	602f      	str	r7, [r5, #0]
 8011b44:	e7b1      	b.n	8011aaa <__sflush_r+0x1a>
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b4c:	81a3      	strh	r3, [r4, #12]
 8011b4e:	e7ad      	b.n	8011aac <__sflush_r+0x1c>
 8011b50:	690f      	ldr	r7, [r1, #16]
 8011b52:	2f00      	cmp	r7, #0
 8011b54:	d0a9      	beq.n	8011aaa <__sflush_r+0x1a>
 8011b56:	0793      	lsls	r3, r2, #30
 8011b58:	680e      	ldr	r6, [r1, #0]
 8011b5a:	bf08      	it	eq
 8011b5c:	694b      	ldreq	r3, [r1, #20]
 8011b5e:	600f      	str	r7, [r1, #0]
 8011b60:	bf18      	it	ne
 8011b62:	2300      	movne	r3, #0
 8011b64:	eba6 0807 	sub.w	r8, r6, r7
 8011b68:	608b      	str	r3, [r1, #8]
 8011b6a:	f1b8 0f00 	cmp.w	r8, #0
 8011b6e:	dd9c      	ble.n	8011aaa <__sflush_r+0x1a>
 8011b70:	4643      	mov	r3, r8
 8011b72:	463a      	mov	r2, r7
 8011b74:	6a21      	ldr	r1, [r4, #32]
 8011b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b78:	4628      	mov	r0, r5
 8011b7a:	47b0      	blx	r6
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	dc06      	bgt.n	8011b8e <__sflush_r+0xfe>
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b86:	81a3      	strh	r3, [r4, #12]
 8011b88:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8c:	e78e      	b.n	8011aac <__sflush_r+0x1c>
 8011b8e:	4407      	add	r7, r0
 8011b90:	eba8 0800 	sub.w	r8, r8, r0
 8011b94:	e7e9      	b.n	8011b6a <__sflush_r+0xda>
 8011b96:	bf00      	nop
 8011b98:	20400001 	.word	0x20400001

08011b9c <_fflush_r>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	690b      	ldr	r3, [r1, #16]
 8011ba0:	4605      	mov	r5, r0
 8011ba2:	460c      	mov	r4, r1
 8011ba4:	b1db      	cbz	r3, 8011bde <_fflush_r+0x42>
 8011ba6:	b118      	cbz	r0, 8011bb0 <_fflush_r+0x14>
 8011ba8:	6983      	ldr	r3, [r0, #24]
 8011baa:	b90b      	cbnz	r3, 8011bb0 <_fflush_r+0x14>
 8011bac:	f000 f860 	bl	8011c70 <__sinit>
 8011bb0:	4b0c      	ldr	r3, [pc, #48]	; (8011be4 <_fflush_r+0x48>)
 8011bb2:	429c      	cmp	r4, r3
 8011bb4:	d109      	bne.n	8011bca <_fflush_r+0x2e>
 8011bb6:	686c      	ldr	r4, [r5, #4]
 8011bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bbc:	b17b      	cbz	r3, 8011bde <_fflush_r+0x42>
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc6:	f7ff bf63 	b.w	8011a90 <__sflush_r>
 8011bca:	4b07      	ldr	r3, [pc, #28]	; (8011be8 <_fflush_r+0x4c>)
 8011bcc:	429c      	cmp	r4, r3
 8011bce:	d101      	bne.n	8011bd4 <_fflush_r+0x38>
 8011bd0:	68ac      	ldr	r4, [r5, #8]
 8011bd2:	e7f1      	b.n	8011bb8 <_fflush_r+0x1c>
 8011bd4:	4b05      	ldr	r3, [pc, #20]	; (8011bec <_fflush_r+0x50>)
 8011bd6:	429c      	cmp	r4, r3
 8011bd8:	bf08      	it	eq
 8011bda:	68ec      	ldreq	r4, [r5, #12]
 8011bdc:	e7ec      	b.n	8011bb8 <_fflush_r+0x1c>
 8011bde:	2000      	movs	r0, #0
 8011be0:	bd38      	pop	{r3, r4, r5, pc}
 8011be2:	bf00      	nop
 8011be4:	08012ae8 	.word	0x08012ae8
 8011be8:	08012b08 	.word	0x08012b08
 8011bec:	08012ac8 	.word	0x08012ac8

08011bf0 <std>:
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	b510      	push	{r4, lr}
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8011bfa:	6083      	str	r3, [r0, #8]
 8011bfc:	8181      	strh	r1, [r0, #12]
 8011bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8011c00:	81c2      	strh	r2, [r0, #14]
 8011c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c06:	6183      	str	r3, [r0, #24]
 8011c08:	4619      	mov	r1, r3
 8011c0a:	2208      	movs	r2, #8
 8011c0c:	305c      	adds	r0, #92	; 0x5c
 8011c0e:	f7fe fb58 	bl	80102c2 <memset>
 8011c12:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <std+0x38>)
 8011c14:	6263      	str	r3, [r4, #36]	; 0x24
 8011c16:	4b05      	ldr	r3, [pc, #20]	; (8011c2c <std+0x3c>)
 8011c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c1a:	4b05      	ldr	r3, [pc, #20]	; (8011c30 <std+0x40>)
 8011c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c1e:	4b05      	ldr	r3, [pc, #20]	; (8011c34 <std+0x44>)
 8011c20:	6224      	str	r4, [r4, #32]
 8011c22:	6323      	str	r3, [r4, #48]	; 0x30
 8011c24:	bd10      	pop	{r4, pc}
 8011c26:	bf00      	nop
 8011c28:	0801283d 	.word	0x0801283d
 8011c2c:	0801285f 	.word	0x0801285f
 8011c30:	08012897 	.word	0x08012897
 8011c34:	080128bb 	.word	0x080128bb

08011c38 <_cleanup_r>:
 8011c38:	4901      	ldr	r1, [pc, #4]	; (8011c40 <_cleanup_r+0x8>)
 8011c3a:	f000 b885 	b.w	8011d48 <_fwalk_reent>
 8011c3e:	bf00      	nop
 8011c40:	08011b9d 	.word	0x08011b9d

08011c44 <__sfmoreglue>:
 8011c44:	b570      	push	{r4, r5, r6, lr}
 8011c46:	1e4a      	subs	r2, r1, #1
 8011c48:	2568      	movs	r5, #104	; 0x68
 8011c4a:	4355      	muls	r5, r2
 8011c4c:	460e      	mov	r6, r1
 8011c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c52:	f000 fc49 	bl	80124e8 <_malloc_r>
 8011c56:	4604      	mov	r4, r0
 8011c58:	b140      	cbz	r0, 8011c6c <__sfmoreglue+0x28>
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8011c60:	300c      	adds	r0, #12
 8011c62:	60a0      	str	r0, [r4, #8]
 8011c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c68:	f7fe fb2b 	bl	80102c2 <memset>
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	bd70      	pop	{r4, r5, r6, pc}

08011c70 <__sinit>:
 8011c70:	6983      	ldr	r3, [r0, #24]
 8011c72:	b510      	push	{r4, lr}
 8011c74:	4604      	mov	r4, r0
 8011c76:	bb33      	cbnz	r3, 8011cc6 <__sinit+0x56>
 8011c78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011c7c:	6503      	str	r3, [r0, #80]	; 0x50
 8011c7e:	4b12      	ldr	r3, [pc, #72]	; (8011cc8 <__sinit+0x58>)
 8011c80:	4a12      	ldr	r2, [pc, #72]	; (8011ccc <__sinit+0x5c>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6282      	str	r2, [r0, #40]	; 0x28
 8011c86:	4298      	cmp	r0, r3
 8011c88:	bf04      	itt	eq
 8011c8a:	2301      	moveq	r3, #1
 8011c8c:	6183      	streq	r3, [r0, #24]
 8011c8e:	f000 f81f 	bl	8011cd0 <__sfp>
 8011c92:	6060      	str	r0, [r4, #4]
 8011c94:	4620      	mov	r0, r4
 8011c96:	f000 f81b 	bl	8011cd0 <__sfp>
 8011c9a:	60a0      	str	r0, [r4, #8]
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f000 f817 	bl	8011cd0 <__sfp>
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	60e0      	str	r0, [r4, #12]
 8011ca6:	2104      	movs	r1, #4
 8011ca8:	6860      	ldr	r0, [r4, #4]
 8011caa:	f7ff ffa1 	bl	8011bf0 <std>
 8011cae:	2201      	movs	r2, #1
 8011cb0:	2109      	movs	r1, #9
 8011cb2:	68a0      	ldr	r0, [r4, #8]
 8011cb4:	f7ff ff9c 	bl	8011bf0 <std>
 8011cb8:	2202      	movs	r2, #2
 8011cba:	2112      	movs	r1, #18
 8011cbc:	68e0      	ldr	r0, [r4, #12]
 8011cbe:	f7ff ff97 	bl	8011bf0 <std>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	61a3      	str	r3, [r4, #24]
 8011cc6:	bd10      	pop	{r4, pc}
 8011cc8:	08012a80 	.word	0x08012a80
 8011ccc:	08011c39 	.word	0x08011c39

08011cd0 <__sfp>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	4b1b      	ldr	r3, [pc, #108]	; (8011d40 <__sfp+0x70>)
 8011cd4:	681e      	ldr	r6, [r3, #0]
 8011cd6:	69b3      	ldr	r3, [r6, #24]
 8011cd8:	4607      	mov	r7, r0
 8011cda:	b913      	cbnz	r3, 8011ce2 <__sfp+0x12>
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f7ff ffc7 	bl	8011c70 <__sinit>
 8011ce2:	3648      	adds	r6, #72	; 0x48
 8011ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	d503      	bpl.n	8011cf4 <__sfp+0x24>
 8011cec:	6833      	ldr	r3, [r6, #0]
 8011cee:	b133      	cbz	r3, 8011cfe <__sfp+0x2e>
 8011cf0:	6836      	ldr	r6, [r6, #0]
 8011cf2:	e7f7      	b.n	8011ce4 <__sfp+0x14>
 8011cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cf8:	b16d      	cbz	r5, 8011d16 <__sfp+0x46>
 8011cfa:	3468      	adds	r4, #104	; 0x68
 8011cfc:	e7f4      	b.n	8011ce8 <__sfp+0x18>
 8011cfe:	2104      	movs	r1, #4
 8011d00:	4638      	mov	r0, r7
 8011d02:	f7ff ff9f 	bl	8011c44 <__sfmoreglue>
 8011d06:	6030      	str	r0, [r6, #0]
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d1f1      	bne.n	8011cf0 <__sfp+0x20>
 8011d0c:	230c      	movs	r3, #12
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	4604      	mov	r4, r0
 8011d12:	4620      	mov	r0, r4
 8011d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d16:	4b0b      	ldr	r3, [pc, #44]	; (8011d44 <__sfp+0x74>)
 8011d18:	6665      	str	r5, [r4, #100]	; 0x64
 8011d1a:	e9c4 5500 	strd	r5, r5, [r4]
 8011d1e:	60a5      	str	r5, [r4, #8]
 8011d20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011d24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011d28:	2208      	movs	r2, #8
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d30:	f7fe fac7 	bl	80102c2 <memset>
 8011d34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d3c:	e7e9      	b.n	8011d12 <__sfp+0x42>
 8011d3e:	bf00      	nop
 8011d40:	08012a80 	.word	0x08012a80
 8011d44:	ffff0001 	.word	0xffff0001

08011d48 <_fwalk_reent>:
 8011d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d4c:	4680      	mov	r8, r0
 8011d4e:	4689      	mov	r9, r1
 8011d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d54:	2600      	movs	r6, #0
 8011d56:	b914      	cbnz	r4, 8011d5e <_fwalk_reent+0x16>
 8011d58:	4630      	mov	r0, r6
 8011d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011d62:	3f01      	subs	r7, #1
 8011d64:	d501      	bpl.n	8011d6a <_fwalk_reent+0x22>
 8011d66:	6824      	ldr	r4, [r4, #0]
 8011d68:	e7f5      	b.n	8011d56 <_fwalk_reent+0xe>
 8011d6a:	89ab      	ldrh	r3, [r5, #12]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d907      	bls.n	8011d80 <_fwalk_reent+0x38>
 8011d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d74:	3301      	adds	r3, #1
 8011d76:	d003      	beq.n	8011d80 <_fwalk_reent+0x38>
 8011d78:	4629      	mov	r1, r5
 8011d7a:	4640      	mov	r0, r8
 8011d7c:	47c8      	blx	r9
 8011d7e:	4306      	orrs	r6, r0
 8011d80:	3568      	adds	r5, #104	; 0x68
 8011d82:	e7ee      	b.n	8011d62 <_fwalk_reent+0x1a>

08011d84 <_localeconv_r>:
 8011d84:	4b04      	ldr	r3, [pc, #16]	; (8011d98 <_localeconv_r+0x14>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	6a18      	ldr	r0, [r3, #32]
 8011d8a:	4b04      	ldr	r3, [pc, #16]	; (8011d9c <_localeconv_r+0x18>)
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	bf08      	it	eq
 8011d90:	4618      	moveq	r0, r3
 8011d92:	30f0      	adds	r0, #240	; 0xf0
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	2000000c 	.word	0x2000000c
 8011d9c:	20000070 	.word	0x20000070

08011da0 <__swhatbuf_r>:
 8011da0:	b570      	push	{r4, r5, r6, lr}
 8011da2:	460e      	mov	r6, r1
 8011da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011da8:	2900      	cmp	r1, #0
 8011daa:	b096      	sub	sp, #88	; 0x58
 8011dac:	4614      	mov	r4, r2
 8011dae:	461d      	mov	r5, r3
 8011db0:	da07      	bge.n	8011dc2 <__swhatbuf_r+0x22>
 8011db2:	2300      	movs	r3, #0
 8011db4:	602b      	str	r3, [r5, #0]
 8011db6:	89b3      	ldrh	r3, [r6, #12]
 8011db8:	061a      	lsls	r2, r3, #24
 8011dba:	d410      	bmi.n	8011dde <__swhatbuf_r+0x3e>
 8011dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dc0:	e00e      	b.n	8011de0 <__swhatbuf_r+0x40>
 8011dc2:	466a      	mov	r2, sp
 8011dc4:	f000 fda0 	bl	8012908 <_fstat_r>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	dbf2      	blt.n	8011db2 <__swhatbuf_r+0x12>
 8011dcc:	9a01      	ldr	r2, [sp, #4]
 8011dce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011dd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011dd6:	425a      	negs	r2, r3
 8011dd8:	415a      	adcs	r2, r3
 8011dda:	602a      	str	r2, [r5, #0]
 8011ddc:	e7ee      	b.n	8011dbc <__swhatbuf_r+0x1c>
 8011dde:	2340      	movs	r3, #64	; 0x40
 8011de0:	2000      	movs	r0, #0
 8011de2:	6023      	str	r3, [r4, #0]
 8011de4:	b016      	add	sp, #88	; 0x58
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <__smakebuf_r>:
 8011de8:	898b      	ldrh	r3, [r1, #12]
 8011dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dec:	079d      	lsls	r5, r3, #30
 8011dee:	4606      	mov	r6, r0
 8011df0:	460c      	mov	r4, r1
 8011df2:	d507      	bpl.n	8011e04 <__smakebuf_r+0x1c>
 8011df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	6123      	str	r3, [r4, #16]
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	6163      	str	r3, [r4, #20]
 8011e00:	b002      	add	sp, #8
 8011e02:	bd70      	pop	{r4, r5, r6, pc}
 8011e04:	ab01      	add	r3, sp, #4
 8011e06:	466a      	mov	r2, sp
 8011e08:	f7ff ffca 	bl	8011da0 <__swhatbuf_r>
 8011e0c:	9900      	ldr	r1, [sp, #0]
 8011e0e:	4605      	mov	r5, r0
 8011e10:	4630      	mov	r0, r6
 8011e12:	f000 fb69 	bl	80124e8 <_malloc_r>
 8011e16:	b948      	cbnz	r0, 8011e2c <__smakebuf_r+0x44>
 8011e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e1c:	059a      	lsls	r2, r3, #22
 8011e1e:	d4ef      	bmi.n	8011e00 <__smakebuf_r+0x18>
 8011e20:	f023 0303 	bic.w	r3, r3, #3
 8011e24:	f043 0302 	orr.w	r3, r3, #2
 8011e28:	81a3      	strh	r3, [r4, #12]
 8011e2a:	e7e3      	b.n	8011df4 <__smakebuf_r+0xc>
 8011e2c:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <__smakebuf_r+0x7c>)
 8011e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	6020      	str	r0, [r4, #0]
 8011e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	9b00      	ldr	r3, [sp, #0]
 8011e3c:	6163      	str	r3, [r4, #20]
 8011e3e:	9b01      	ldr	r3, [sp, #4]
 8011e40:	6120      	str	r0, [r4, #16]
 8011e42:	b15b      	cbz	r3, 8011e5c <__smakebuf_r+0x74>
 8011e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f000 fd6f 	bl	801292c <_isatty_r>
 8011e4e:	b128      	cbz	r0, 8011e5c <__smakebuf_r+0x74>
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	f023 0303 	bic.w	r3, r3, #3
 8011e56:	f043 0301 	orr.w	r3, r3, #1
 8011e5a:	81a3      	strh	r3, [r4, #12]
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	431d      	orrs	r5, r3
 8011e60:	81a5      	strh	r5, [r4, #12]
 8011e62:	e7cd      	b.n	8011e00 <__smakebuf_r+0x18>
 8011e64:	08011c39 	.word	0x08011c39

08011e68 <malloc>:
 8011e68:	4b02      	ldr	r3, [pc, #8]	; (8011e74 <malloc+0xc>)
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	f000 bb3b 	b.w	80124e8 <_malloc_r>
 8011e72:	bf00      	nop
 8011e74:	2000000c 	.word	0x2000000c

08011e78 <_Balloc>:
 8011e78:	b570      	push	{r4, r5, r6, lr}
 8011e7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	460e      	mov	r6, r1
 8011e80:	b93d      	cbnz	r5, 8011e92 <_Balloc+0x1a>
 8011e82:	2010      	movs	r0, #16
 8011e84:	f7ff fff0 	bl	8011e68 <malloc>
 8011e88:	6260      	str	r0, [r4, #36]	; 0x24
 8011e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011e8e:	6005      	str	r5, [r0, #0]
 8011e90:	60c5      	str	r5, [r0, #12]
 8011e92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011e94:	68eb      	ldr	r3, [r5, #12]
 8011e96:	b183      	cbz	r3, 8011eba <_Balloc+0x42>
 8011e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011ea0:	b9b8      	cbnz	r0, 8011ed2 <_Balloc+0x5a>
 8011ea2:	2101      	movs	r1, #1
 8011ea4:	fa01 f506 	lsl.w	r5, r1, r6
 8011ea8:	1d6a      	adds	r2, r5, #5
 8011eaa:	0092      	lsls	r2, r2, #2
 8011eac:	4620      	mov	r0, r4
 8011eae:	f000 fabf 	bl	8012430 <_calloc_r>
 8011eb2:	b160      	cbz	r0, 8011ece <_Balloc+0x56>
 8011eb4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011eb8:	e00e      	b.n	8011ed8 <_Balloc+0x60>
 8011eba:	2221      	movs	r2, #33	; 0x21
 8011ebc:	2104      	movs	r1, #4
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f000 fab6 	bl	8012430 <_calloc_r>
 8011ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ec6:	60e8      	str	r0, [r5, #12]
 8011ec8:	68db      	ldr	r3, [r3, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d1e4      	bne.n	8011e98 <_Balloc+0x20>
 8011ece:	2000      	movs	r0, #0
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	6802      	ldr	r2, [r0, #0]
 8011ed4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011ed8:	2300      	movs	r3, #0
 8011eda:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ede:	e7f7      	b.n	8011ed0 <_Balloc+0x58>

08011ee0 <_Bfree>:
 8011ee0:	b570      	push	{r4, r5, r6, lr}
 8011ee2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460d      	mov	r5, r1
 8011ee8:	b93c      	cbnz	r4, 8011efa <_Bfree+0x1a>
 8011eea:	2010      	movs	r0, #16
 8011eec:	f7ff ffbc 	bl	8011e68 <malloc>
 8011ef0:	6270      	str	r0, [r6, #36]	; 0x24
 8011ef2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ef6:	6004      	str	r4, [r0, #0]
 8011ef8:	60c4      	str	r4, [r0, #12]
 8011efa:	b13d      	cbz	r5, 8011f0c <_Bfree+0x2c>
 8011efc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011efe:	686a      	ldr	r2, [r5, #4]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f06:	6029      	str	r1, [r5, #0]
 8011f08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}

08011f0e <__multadd>:
 8011f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f12:	690d      	ldr	r5, [r1, #16]
 8011f14:	461f      	mov	r7, r3
 8011f16:	4606      	mov	r6, r0
 8011f18:	460c      	mov	r4, r1
 8011f1a:	f101 0c14 	add.w	ip, r1, #20
 8011f1e:	2300      	movs	r3, #0
 8011f20:	f8dc 0000 	ldr.w	r0, [ip]
 8011f24:	b281      	uxth	r1, r0
 8011f26:	fb02 7101 	mla	r1, r2, r1, r7
 8011f2a:	0c0f      	lsrs	r7, r1, #16
 8011f2c:	0c00      	lsrs	r0, r0, #16
 8011f2e:	fb02 7000 	mla	r0, r2, r0, r7
 8011f32:	b289      	uxth	r1, r1
 8011f34:	3301      	adds	r3, #1
 8011f36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011f3a:	429d      	cmp	r5, r3
 8011f3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011f40:	f84c 1b04 	str.w	r1, [ip], #4
 8011f44:	dcec      	bgt.n	8011f20 <__multadd+0x12>
 8011f46:	b1d7      	cbz	r7, 8011f7e <__multadd+0x70>
 8011f48:	68a3      	ldr	r3, [r4, #8]
 8011f4a:	42ab      	cmp	r3, r5
 8011f4c:	dc12      	bgt.n	8011f74 <__multadd+0x66>
 8011f4e:	6861      	ldr	r1, [r4, #4]
 8011f50:	4630      	mov	r0, r6
 8011f52:	3101      	adds	r1, #1
 8011f54:	f7ff ff90 	bl	8011e78 <_Balloc>
 8011f58:	6922      	ldr	r2, [r4, #16]
 8011f5a:	3202      	adds	r2, #2
 8011f5c:	f104 010c 	add.w	r1, r4, #12
 8011f60:	4680      	mov	r8, r0
 8011f62:	0092      	lsls	r2, r2, #2
 8011f64:	300c      	adds	r0, #12
 8011f66:	f7fe f9a1 	bl	80102ac <memcpy>
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7ff ffb7 	bl	8011ee0 <_Bfree>
 8011f72:	4644      	mov	r4, r8
 8011f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011f78:	3501      	adds	r5, #1
 8011f7a:	615f      	str	r7, [r3, #20]
 8011f7c:	6125      	str	r5, [r4, #16]
 8011f7e:	4620      	mov	r0, r4
 8011f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f84 <__hi0bits>:
 8011f84:	0c02      	lsrs	r2, r0, #16
 8011f86:	0412      	lsls	r2, r2, #16
 8011f88:	4603      	mov	r3, r0
 8011f8a:	b9b2      	cbnz	r2, 8011fba <__hi0bits+0x36>
 8011f8c:	0403      	lsls	r3, r0, #16
 8011f8e:	2010      	movs	r0, #16
 8011f90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011f94:	bf04      	itt	eq
 8011f96:	021b      	lsleq	r3, r3, #8
 8011f98:	3008      	addeq	r0, #8
 8011f9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011f9e:	bf04      	itt	eq
 8011fa0:	011b      	lsleq	r3, r3, #4
 8011fa2:	3004      	addeq	r0, #4
 8011fa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011fa8:	bf04      	itt	eq
 8011faa:	009b      	lsleq	r3, r3, #2
 8011fac:	3002      	addeq	r0, #2
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	db06      	blt.n	8011fc0 <__hi0bits+0x3c>
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	d503      	bpl.n	8011fbe <__hi0bits+0x3a>
 8011fb6:	3001      	adds	r0, #1
 8011fb8:	4770      	bx	lr
 8011fba:	2000      	movs	r0, #0
 8011fbc:	e7e8      	b.n	8011f90 <__hi0bits+0xc>
 8011fbe:	2020      	movs	r0, #32
 8011fc0:	4770      	bx	lr

08011fc2 <__lo0bits>:
 8011fc2:	6803      	ldr	r3, [r0, #0]
 8011fc4:	f013 0207 	ands.w	r2, r3, #7
 8011fc8:	4601      	mov	r1, r0
 8011fca:	d00b      	beq.n	8011fe4 <__lo0bits+0x22>
 8011fcc:	07da      	lsls	r2, r3, #31
 8011fce:	d423      	bmi.n	8012018 <__lo0bits+0x56>
 8011fd0:	0798      	lsls	r0, r3, #30
 8011fd2:	bf49      	itett	mi
 8011fd4:	085b      	lsrmi	r3, r3, #1
 8011fd6:	089b      	lsrpl	r3, r3, #2
 8011fd8:	2001      	movmi	r0, #1
 8011fda:	600b      	strmi	r3, [r1, #0]
 8011fdc:	bf5c      	itt	pl
 8011fde:	600b      	strpl	r3, [r1, #0]
 8011fe0:	2002      	movpl	r0, #2
 8011fe2:	4770      	bx	lr
 8011fe4:	b298      	uxth	r0, r3
 8011fe6:	b9a8      	cbnz	r0, 8012014 <__lo0bits+0x52>
 8011fe8:	0c1b      	lsrs	r3, r3, #16
 8011fea:	2010      	movs	r0, #16
 8011fec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011ff0:	bf04      	itt	eq
 8011ff2:	0a1b      	lsreq	r3, r3, #8
 8011ff4:	3008      	addeq	r0, #8
 8011ff6:	071a      	lsls	r2, r3, #28
 8011ff8:	bf04      	itt	eq
 8011ffa:	091b      	lsreq	r3, r3, #4
 8011ffc:	3004      	addeq	r0, #4
 8011ffe:	079a      	lsls	r2, r3, #30
 8012000:	bf04      	itt	eq
 8012002:	089b      	lsreq	r3, r3, #2
 8012004:	3002      	addeq	r0, #2
 8012006:	07da      	lsls	r2, r3, #31
 8012008:	d402      	bmi.n	8012010 <__lo0bits+0x4e>
 801200a:	085b      	lsrs	r3, r3, #1
 801200c:	d006      	beq.n	801201c <__lo0bits+0x5a>
 801200e:	3001      	adds	r0, #1
 8012010:	600b      	str	r3, [r1, #0]
 8012012:	4770      	bx	lr
 8012014:	4610      	mov	r0, r2
 8012016:	e7e9      	b.n	8011fec <__lo0bits+0x2a>
 8012018:	2000      	movs	r0, #0
 801201a:	4770      	bx	lr
 801201c:	2020      	movs	r0, #32
 801201e:	4770      	bx	lr

08012020 <__i2b>:
 8012020:	b510      	push	{r4, lr}
 8012022:	460c      	mov	r4, r1
 8012024:	2101      	movs	r1, #1
 8012026:	f7ff ff27 	bl	8011e78 <_Balloc>
 801202a:	2201      	movs	r2, #1
 801202c:	6144      	str	r4, [r0, #20]
 801202e:	6102      	str	r2, [r0, #16]
 8012030:	bd10      	pop	{r4, pc}

08012032 <__multiply>:
 8012032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	4614      	mov	r4, r2
 8012038:	690a      	ldr	r2, [r1, #16]
 801203a:	6923      	ldr	r3, [r4, #16]
 801203c:	429a      	cmp	r2, r3
 801203e:	bfb8      	it	lt
 8012040:	460b      	movlt	r3, r1
 8012042:	4688      	mov	r8, r1
 8012044:	bfbc      	itt	lt
 8012046:	46a0      	movlt	r8, r4
 8012048:	461c      	movlt	r4, r3
 801204a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801204e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012056:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801205a:	eb07 0609 	add.w	r6, r7, r9
 801205e:	42b3      	cmp	r3, r6
 8012060:	bfb8      	it	lt
 8012062:	3101      	addlt	r1, #1
 8012064:	f7ff ff08 	bl	8011e78 <_Balloc>
 8012068:	f100 0514 	add.w	r5, r0, #20
 801206c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012070:	462b      	mov	r3, r5
 8012072:	2200      	movs	r2, #0
 8012074:	4573      	cmp	r3, lr
 8012076:	d316      	bcc.n	80120a6 <__multiply+0x74>
 8012078:	f104 0214 	add.w	r2, r4, #20
 801207c:	f108 0114 	add.w	r1, r8, #20
 8012080:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012084:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	9b00      	ldr	r3, [sp, #0]
 801208c:	9201      	str	r2, [sp, #4]
 801208e:	4293      	cmp	r3, r2
 8012090:	d80c      	bhi.n	80120ac <__multiply+0x7a>
 8012092:	2e00      	cmp	r6, #0
 8012094:	dd03      	ble.n	801209e <__multiply+0x6c>
 8012096:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801209a:	2b00      	cmp	r3, #0
 801209c:	d05d      	beq.n	801215a <__multiply+0x128>
 801209e:	6106      	str	r6, [r0, #16]
 80120a0:	b003      	add	sp, #12
 80120a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a6:	f843 2b04 	str.w	r2, [r3], #4
 80120aa:	e7e3      	b.n	8012074 <__multiply+0x42>
 80120ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80120b0:	f1bb 0f00 	cmp.w	fp, #0
 80120b4:	d023      	beq.n	80120fe <__multiply+0xcc>
 80120b6:	4689      	mov	r9, r1
 80120b8:	46ac      	mov	ip, r5
 80120ba:	f04f 0800 	mov.w	r8, #0
 80120be:	f859 4b04 	ldr.w	r4, [r9], #4
 80120c2:	f8dc a000 	ldr.w	sl, [ip]
 80120c6:	b2a3      	uxth	r3, r4
 80120c8:	fa1f fa8a 	uxth.w	sl, sl
 80120cc:	fb0b a303 	mla	r3, fp, r3, sl
 80120d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80120d4:	f8dc 4000 	ldr.w	r4, [ip]
 80120d8:	4443      	add	r3, r8
 80120da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80120de:	fb0b 840a 	mla	r4, fp, sl, r8
 80120e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80120e6:	46e2      	mov	sl, ip
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80120ee:	454f      	cmp	r7, r9
 80120f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80120f4:	f84a 3b04 	str.w	r3, [sl], #4
 80120f8:	d82b      	bhi.n	8012152 <__multiply+0x120>
 80120fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80120fe:	9b01      	ldr	r3, [sp, #4]
 8012100:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012104:	3204      	adds	r2, #4
 8012106:	f1ba 0f00 	cmp.w	sl, #0
 801210a:	d020      	beq.n	801214e <__multiply+0x11c>
 801210c:	682b      	ldr	r3, [r5, #0]
 801210e:	4689      	mov	r9, r1
 8012110:	46a8      	mov	r8, r5
 8012112:	f04f 0b00 	mov.w	fp, #0
 8012116:	f8b9 c000 	ldrh.w	ip, [r9]
 801211a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801211e:	fb0a 440c 	mla	r4, sl, ip, r4
 8012122:	445c      	add	r4, fp
 8012124:	46c4      	mov	ip, r8
 8012126:	b29b      	uxth	r3, r3
 8012128:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801212c:	f84c 3b04 	str.w	r3, [ip], #4
 8012130:	f859 3b04 	ldr.w	r3, [r9], #4
 8012134:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012138:	0c1b      	lsrs	r3, r3, #16
 801213a:	fb0a b303 	mla	r3, sl, r3, fp
 801213e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012142:	454f      	cmp	r7, r9
 8012144:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012148:	d805      	bhi.n	8012156 <__multiply+0x124>
 801214a:	f8c8 3004 	str.w	r3, [r8, #4]
 801214e:	3504      	adds	r5, #4
 8012150:	e79b      	b.n	801208a <__multiply+0x58>
 8012152:	46d4      	mov	ip, sl
 8012154:	e7b3      	b.n	80120be <__multiply+0x8c>
 8012156:	46e0      	mov	r8, ip
 8012158:	e7dd      	b.n	8012116 <__multiply+0xe4>
 801215a:	3e01      	subs	r6, #1
 801215c:	e799      	b.n	8012092 <__multiply+0x60>
	...

08012160 <__pow5mult>:
 8012160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012164:	4615      	mov	r5, r2
 8012166:	f012 0203 	ands.w	r2, r2, #3
 801216a:	4606      	mov	r6, r0
 801216c:	460f      	mov	r7, r1
 801216e:	d007      	beq.n	8012180 <__pow5mult+0x20>
 8012170:	3a01      	subs	r2, #1
 8012172:	4c21      	ldr	r4, [pc, #132]	; (80121f8 <__pow5mult+0x98>)
 8012174:	2300      	movs	r3, #0
 8012176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801217a:	f7ff fec8 	bl	8011f0e <__multadd>
 801217e:	4607      	mov	r7, r0
 8012180:	10ad      	asrs	r5, r5, #2
 8012182:	d035      	beq.n	80121f0 <__pow5mult+0x90>
 8012184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012186:	b93c      	cbnz	r4, 8012198 <__pow5mult+0x38>
 8012188:	2010      	movs	r0, #16
 801218a:	f7ff fe6d 	bl	8011e68 <malloc>
 801218e:	6270      	str	r0, [r6, #36]	; 0x24
 8012190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012194:	6004      	str	r4, [r0, #0]
 8012196:	60c4      	str	r4, [r0, #12]
 8012198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801219c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121a0:	b94c      	cbnz	r4, 80121b6 <__pow5mult+0x56>
 80121a2:	f240 2171 	movw	r1, #625	; 0x271
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7ff ff3a 	bl	8012020 <__i2b>
 80121ac:	2300      	movs	r3, #0
 80121ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80121b2:	4604      	mov	r4, r0
 80121b4:	6003      	str	r3, [r0, #0]
 80121b6:	f04f 0800 	mov.w	r8, #0
 80121ba:	07eb      	lsls	r3, r5, #31
 80121bc:	d50a      	bpl.n	80121d4 <__pow5mult+0x74>
 80121be:	4639      	mov	r1, r7
 80121c0:	4622      	mov	r2, r4
 80121c2:	4630      	mov	r0, r6
 80121c4:	f7ff ff35 	bl	8012032 <__multiply>
 80121c8:	4639      	mov	r1, r7
 80121ca:	4681      	mov	r9, r0
 80121cc:	4630      	mov	r0, r6
 80121ce:	f7ff fe87 	bl	8011ee0 <_Bfree>
 80121d2:	464f      	mov	r7, r9
 80121d4:	106d      	asrs	r5, r5, #1
 80121d6:	d00b      	beq.n	80121f0 <__pow5mult+0x90>
 80121d8:	6820      	ldr	r0, [r4, #0]
 80121da:	b938      	cbnz	r0, 80121ec <__pow5mult+0x8c>
 80121dc:	4622      	mov	r2, r4
 80121de:	4621      	mov	r1, r4
 80121e0:	4630      	mov	r0, r6
 80121e2:	f7ff ff26 	bl	8012032 <__multiply>
 80121e6:	6020      	str	r0, [r4, #0]
 80121e8:	f8c0 8000 	str.w	r8, [r0]
 80121ec:	4604      	mov	r4, r0
 80121ee:	e7e4      	b.n	80121ba <__pow5mult+0x5a>
 80121f0:	4638      	mov	r0, r7
 80121f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121f6:	bf00      	nop
 80121f8:	08012c18 	.word	0x08012c18

080121fc <__lshift>:
 80121fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012206:	6923      	ldr	r3, [r4, #16]
 8012208:	6849      	ldr	r1, [r1, #4]
 801220a:	eb0a 0903 	add.w	r9, sl, r3
 801220e:	68a3      	ldr	r3, [r4, #8]
 8012210:	4607      	mov	r7, r0
 8012212:	4616      	mov	r6, r2
 8012214:	f109 0501 	add.w	r5, r9, #1
 8012218:	42ab      	cmp	r3, r5
 801221a:	db32      	blt.n	8012282 <__lshift+0x86>
 801221c:	4638      	mov	r0, r7
 801221e:	f7ff fe2b 	bl	8011e78 <_Balloc>
 8012222:	2300      	movs	r3, #0
 8012224:	4680      	mov	r8, r0
 8012226:	f100 0114 	add.w	r1, r0, #20
 801222a:	461a      	mov	r2, r3
 801222c:	4553      	cmp	r3, sl
 801222e:	db2b      	blt.n	8012288 <__lshift+0x8c>
 8012230:	6920      	ldr	r0, [r4, #16]
 8012232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012236:	f104 0314 	add.w	r3, r4, #20
 801223a:	f016 021f 	ands.w	r2, r6, #31
 801223e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012242:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012246:	d025      	beq.n	8012294 <__lshift+0x98>
 8012248:	f1c2 0e20 	rsb	lr, r2, #32
 801224c:	2000      	movs	r0, #0
 801224e:	681e      	ldr	r6, [r3, #0]
 8012250:	468a      	mov	sl, r1
 8012252:	4096      	lsls	r6, r2
 8012254:	4330      	orrs	r0, r6
 8012256:	f84a 0b04 	str.w	r0, [sl], #4
 801225a:	f853 0b04 	ldr.w	r0, [r3], #4
 801225e:	459c      	cmp	ip, r3
 8012260:	fa20 f00e 	lsr.w	r0, r0, lr
 8012264:	d814      	bhi.n	8012290 <__lshift+0x94>
 8012266:	6048      	str	r0, [r1, #4]
 8012268:	b108      	cbz	r0, 801226e <__lshift+0x72>
 801226a:	f109 0502 	add.w	r5, r9, #2
 801226e:	3d01      	subs	r5, #1
 8012270:	4638      	mov	r0, r7
 8012272:	f8c8 5010 	str.w	r5, [r8, #16]
 8012276:	4621      	mov	r1, r4
 8012278:	f7ff fe32 	bl	8011ee0 <_Bfree>
 801227c:	4640      	mov	r0, r8
 801227e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012282:	3101      	adds	r1, #1
 8012284:	005b      	lsls	r3, r3, #1
 8012286:	e7c7      	b.n	8012218 <__lshift+0x1c>
 8012288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801228c:	3301      	adds	r3, #1
 801228e:	e7cd      	b.n	801222c <__lshift+0x30>
 8012290:	4651      	mov	r1, sl
 8012292:	e7dc      	b.n	801224e <__lshift+0x52>
 8012294:	3904      	subs	r1, #4
 8012296:	f853 2b04 	ldr.w	r2, [r3], #4
 801229a:	f841 2f04 	str.w	r2, [r1, #4]!
 801229e:	459c      	cmp	ip, r3
 80122a0:	d8f9      	bhi.n	8012296 <__lshift+0x9a>
 80122a2:	e7e4      	b.n	801226e <__lshift+0x72>

080122a4 <__mcmp>:
 80122a4:	6903      	ldr	r3, [r0, #16]
 80122a6:	690a      	ldr	r2, [r1, #16]
 80122a8:	1a9b      	subs	r3, r3, r2
 80122aa:	b530      	push	{r4, r5, lr}
 80122ac:	d10c      	bne.n	80122c8 <__mcmp+0x24>
 80122ae:	0092      	lsls	r2, r2, #2
 80122b0:	3014      	adds	r0, #20
 80122b2:	3114      	adds	r1, #20
 80122b4:	1884      	adds	r4, r0, r2
 80122b6:	4411      	add	r1, r2
 80122b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80122bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80122c0:	4295      	cmp	r5, r2
 80122c2:	d003      	beq.n	80122cc <__mcmp+0x28>
 80122c4:	d305      	bcc.n	80122d2 <__mcmp+0x2e>
 80122c6:	2301      	movs	r3, #1
 80122c8:	4618      	mov	r0, r3
 80122ca:	bd30      	pop	{r4, r5, pc}
 80122cc:	42a0      	cmp	r0, r4
 80122ce:	d3f3      	bcc.n	80122b8 <__mcmp+0x14>
 80122d0:	e7fa      	b.n	80122c8 <__mcmp+0x24>
 80122d2:	f04f 33ff 	mov.w	r3, #4294967295
 80122d6:	e7f7      	b.n	80122c8 <__mcmp+0x24>

080122d8 <__mdiff>:
 80122d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122dc:	460d      	mov	r5, r1
 80122de:	4607      	mov	r7, r0
 80122e0:	4611      	mov	r1, r2
 80122e2:	4628      	mov	r0, r5
 80122e4:	4614      	mov	r4, r2
 80122e6:	f7ff ffdd 	bl	80122a4 <__mcmp>
 80122ea:	1e06      	subs	r6, r0, #0
 80122ec:	d108      	bne.n	8012300 <__mdiff+0x28>
 80122ee:	4631      	mov	r1, r6
 80122f0:	4638      	mov	r0, r7
 80122f2:	f7ff fdc1 	bl	8011e78 <_Balloc>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80122fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012300:	bfa4      	itt	ge
 8012302:	4623      	movge	r3, r4
 8012304:	462c      	movge	r4, r5
 8012306:	4638      	mov	r0, r7
 8012308:	6861      	ldr	r1, [r4, #4]
 801230a:	bfa6      	itte	ge
 801230c:	461d      	movge	r5, r3
 801230e:	2600      	movge	r6, #0
 8012310:	2601      	movlt	r6, #1
 8012312:	f7ff fdb1 	bl	8011e78 <_Balloc>
 8012316:	692b      	ldr	r3, [r5, #16]
 8012318:	60c6      	str	r6, [r0, #12]
 801231a:	6926      	ldr	r6, [r4, #16]
 801231c:	f105 0914 	add.w	r9, r5, #20
 8012320:	f104 0214 	add.w	r2, r4, #20
 8012324:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012328:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801232c:	f100 0514 	add.w	r5, r0, #20
 8012330:	f04f 0e00 	mov.w	lr, #0
 8012334:	f852 ab04 	ldr.w	sl, [r2], #4
 8012338:	f859 4b04 	ldr.w	r4, [r9], #4
 801233c:	fa1e f18a 	uxtah	r1, lr, sl
 8012340:	b2a3      	uxth	r3, r4
 8012342:	1ac9      	subs	r1, r1, r3
 8012344:	0c23      	lsrs	r3, r4, #16
 8012346:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801234a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801234e:	b289      	uxth	r1, r1
 8012350:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012354:	45c8      	cmp	r8, r9
 8012356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801235a:	4694      	mov	ip, r2
 801235c:	f845 3b04 	str.w	r3, [r5], #4
 8012360:	d8e8      	bhi.n	8012334 <__mdiff+0x5c>
 8012362:	45bc      	cmp	ip, r7
 8012364:	d304      	bcc.n	8012370 <__mdiff+0x98>
 8012366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801236a:	b183      	cbz	r3, 801238e <__mdiff+0xb6>
 801236c:	6106      	str	r6, [r0, #16]
 801236e:	e7c5      	b.n	80122fc <__mdiff+0x24>
 8012370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012374:	fa1e f381 	uxtah	r3, lr, r1
 8012378:	141a      	asrs	r2, r3, #16
 801237a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801237e:	b29b      	uxth	r3, r3
 8012380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012384:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012388:	f845 3b04 	str.w	r3, [r5], #4
 801238c:	e7e9      	b.n	8012362 <__mdiff+0x8a>
 801238e:	3e01      	subs	r6, #1
 8012390:	e7e9      	b.n	8012366 <__mdiff+0x8e>

08012392 <__d2b>:
 8012392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012396:	460e      	mov	r6, r1
 8012398:	2101      	movs	r1, #1
 801239a:	ec59 8b10 	vmov	r8, r9, d0
 801239e:	4615      	mov	r5, r2
 80123a0:	f7ff fd6a 	bl	8011e78 <_Balloc>
 80123a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80123a8:	4607      	mov	r7, r0
 80123aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80123ae:	bb34      	cbnz	r4, 80123fe <__d2b+0x6c>
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	f1b8 0300 	subs.w	r3, r8, #0
 80123b6:	d027      	beq.n	8012408 <__d2b+0x76>
 80123b8:	a802      	add	r0, sp, #8
 80123ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 80123be:	f7ff fe00 	bl	8011fc2 <__lo0bits>
 80123c2:	9900      	ldr	r1, [sp, #0]
 80123c4:	b1f0      	cbz	r0, 8012404 <__d2b+0x72>
 80123c6:	9a01      	ldr	r2, [sp, #4]
 80123c8:	f1c0 0320 	rsb	r3, r0, #32
 80123cc:	fa02 f303 	lsl.w	r3, r2, r3
 80123d0:	430b      	orrs	r3, r1
 80123d2:	40c2      	lsrs	r2, r0
 80123d4:	617b      	str	r3, [r7, #20]
 80123d6:	9201      	str	r2, [sp, #4]
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	61bb      	str	r3, [r7, #24]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	bf14      	ite	ne
 80123e0:	2102      	movne	r1, #2
 80123e2:	2101      	moveq	r1, #1
 80123e4:	6139      	str	r1, [r7, #16]
 80123e6:	b1c4      	cbz	r4, 801241a <__d2b+0x88>
 80123e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80123ec:	4404      	add	r4, r0
 80123ee:	6034      	str	r4, [r6, #0]
 80123f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80123f4:	6028      	str	r0, [r5, #0]
 80123f6:	4638      	mov	r0, r7
 80123f8:	b003      	add	sp, #12
 80123fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012402:	e7d5      	b.n	80123b0 <__d2b+0x1e>
 8012404:	6179      	str	r1, [r7, #20]
 8012406:	e7e7      	b.n	80123d8 <__d2b+0x46>
 8012408:	a801      	add	r0, sp, #4
 801240a:	f7ff fdda 	bl	8011fc2 <__lo0bits>
 801240e:	9b01      	ldr	r3, [sp, #4]
 8012410:	617b      	str	r3, [r7, #20]
 8012412:	2101      	movs	r1, #1
 8012414:	6139      	str	r1, [r7, #16]
 8012416:	3020      	adds	r0, #32
 8012418:	e7e5      	b.n	80123e6 <__d2b+0x54>
 801241a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801241e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012422:	6030      	str	r0, [r6, #0]
 8012424:	6918      	ldr	r0, [r3, #16]
 8012426:	f7ff fdad 	bl	8011f84 <__hi0bits>
 801242a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801242e:	e7e1      	b.n	80123f4 <__d2b+0x62>

08012430 <_calloc_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	fb02 f401 	mul.w	r4, r2, r1
 8012436:	4621      	mov	r1, r4
 8012438:	f000 f856 	bl	80124e8 <_malloc_r>
 801243c:	4605      	mov	r5, r0
 801243e:	b118      	cbz	r0, 8012448 <_calloc_r+0x18>
 8012440:	4622      	mov	r2, r4
 8012442:	2100      	movs	r1, #0
 8012444:	f7fd ff3d 	bl	80102c2 <memset>
 8012448:	4628      	mov	r0, r5
 801244a:	bd38      	pop	{r3, r4, r5, pc}

0801244c <_free_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4605      	mov	r5, r0
 8012450:	2900      	cmp	r1, #0
 8012452:	d045      	beq.n	80124e0 <_free_r+0x94>
 8012454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012458:	1f0c      	subs	r4, r1, #4
 801245a:	2b00      	cmp	r3, #0
 801245c:	bfb8      	it	lt
 801245e:	18e4      	addlt	r4, r4, r3
 8012460:	f000 fa98 	bl	8012994 <__malloc_lock>
 8012464:	4a1f      	ldr	r2, [pc, #124]	; (80124e4 <_free_r+0x98>)
 8012466:	6813      	ldr	r3, [r2, #0]
 8012468:	4610      	mov	r0, r2
 801246a:	b933      	cbnz	r3, 801247a <_free_r+0x2e>
 801246c:	6063      	str	r3, [r4, #4]
 801246e:	6014      	str	r4, [r2, #0]
 8012470:	4628      	mov	r0, r5
 8012472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012476:	f000 ba8e 	b.w	8012996 <__malloc_unlock>
 801247a:	42a3      	cmp	r3, r4
 801247c:	d90c      	bls.n	8012498 <_free_r+0x4c>
 801247e:	6821      	ldr	r1, [r4, #0]
 8012480:	1862      	adds	r2, r4, r1
 8012482:	4293      	cmp	r3, r2
 8012484:	bf04      	itt	eq
 8012486:	681a      	ldreq	r2, [r3, #0]
 8012488:	685b      	ldreq	r3, [r3, #4]
 801248a:	6063      	str	r3, [r4, #4]
 801248c:	bf04      	itt	eq
 801248e:	1852      	addeq	r2, r2, r1
 8012490:	6022      	streq	r2, [r4, #0]
 8012492:	6004      	str	r4, [r0, #0]
 8012494:	e7ec      	b.n	8012470 <_free_r+0x24>
 8012496:	4613      	mov	r3, r2
 8012498:	685a      	ldr	r2, [r3, #4]
 801249a:	b10a      	cbz	r2, 80124a0 <_free_r+0x54>
 801249c:	42a2      	cmp	r2, r4
 801249e:	d9fa      	bls.n	8012496 <_free_r+0x4a>
 80124a0:	6819      	ldr	r1, [r3, #0]
 80124a2:	1858      	adds	r0, r3, r1
 80124a4:	42a0      	cmp	r0, r4
 80124a6:	d10b      	bne.n	80124c0 <_free_r+0x74>
 80124a8:	6820      	ldr	r0, [r4, #0]
 80124aa:	4401      	add	r1, r0
 80124ac:	1858      	adds	r0, r3, r1
 80124ae:	4282      	cmp	r2, r0
 80124b0:	6019      	str	r1, [r3, #0]
 80124b2:	d1dd      	bne.n	8012470 <_free_r+0x24>
 80124b4:	6810      	ldr	r0, [r2, #0]
 80124b6:	6852      	ldr	r2, [r2, #4]
 80124b8:	605a      	str	r2, [r3, #4]
 80124ba:	4401      	add	r1, r0
 80124bc:	6019      	str	r1, [r3, #0]
 80124be:	e7d7      	b.n	8012470 <_free_r+0x24>
 80124c0:	d902      	bls.n	80124c8 <_free_r+0x7c>
 80124c2:	230c      	movs	r3, #12
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	e7d3      	b.n	8012470 <_free_r+0x24>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	1821      	adds	r1, r4, r0
 80124cc:	428a      	cmp	r2, r1
 80124ce:	bf04      	itt	eq
 80124d0:	6811      	ldreq	r1, [r2, #0]
 80124d2:	6852      	ldreq	r2, [r2, #4]
 80124d4:	6062      	str	r2, [r4, #4]
 80124d6:	bf04      	itt	eq
 80124d8:	1809      	addeq	r1, r1, r0
 80124da:	6021      	streq	r1, [r4, #0]
 80124dc:	605c      	str	r4, [r3, #4]
 80124de:	e7c7      	b.n	8012470 <_free_r+0x24>
 80124e0:	bd38      	pop	{r3, r4, r5, pc}
 80124e2:	bf00      	nop
 80124e4:	20000420 	.word	0x20000420

080124e8 <_malloc_r>:
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	1ccd      	adds	r5, r1, #3
 80124ec:	f025 0503 	bic.w	r5, r5, #3
 80124f0:	3508      	adds	r5, #8
 80124f2:	2d0c      	cmp	r5, #12
 80124f4:	bf38      	it	cc
 80124f6:	250c      	movcc	r5, #12
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	4606      	mov	r6, r0
 80124fc:	db01      	blt.n	8012502 <_malloc_r+0x1a>
 80124fe:	42a9      	cmp	r1, r5
 8012500:	d903      	bls.n	801250a <_malloc_r+0x22>
 8012502:	230c      	movs	r3, #12
 8012504:	6033      	str	r3, [r6, #0]
 8012506:	2000      	movs	r0, #0
 8012508:	bd70      	pop	{r4, r5, r6, pc}
 801250a:	f000 fa43 	bl	8012994 <__malloc_lock>
 801250e:	4a21      	ldr	r2, [pc, #132]	; (8012594 <_malloc_r+0xac>)
 8012510:	6814      	ldr	r4, [r2, #0]
 8012512:	4621      	mov	r1, r4
 8012514:	b991      	cbnz	r1, 801253c <_malloc_r+0x54>
 8012516:	4c20      	ldr	r4, [pc, #128]	; (8012598 <_malloc_r+0xb0>)
 8012518:	6823      	ldr	r3, [r4, #0]
 801251a:	b91b      	cbnz	r3, 8012524 <_malloc_r+0x3c>
 801251c:	4630      	mov	r0, r6
 801251e:	f000 f97d 	bl	801281c <_sbrk_r>
 8012522:	6020      	str	r0, [r4, #0]
 8012524:	4629      	mov	r1, r5
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f978 	bl	801281c <_sbrk_r>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	d124      	bne.n	801257a <_malloc_r+0x92>
 8012530:	230c      	movs	r3, #12
 8012532:	6033      	str	r3, [r6, #0]
 8012534:	4630      	mov	r0, r6
 8012536:	f000 fa2e 	bl	8012996 <__malloc_unlock>
 801253a:	e7e4      	b.n	8012506 <_malloc_r+0x1e>
 801253c:	680b      	ldr	r3, [r1, #0]
 801253e:	1b5b      	subs	r3, r3, r5
 8012540:	d418      	bmi.n	8012574 <_malloc_r+0x8c>
 8012542:	2b0b      	cmp	r3, #11
 8012544:	d90f      	bls.n	8012566 <_malloc_r+0x7e>
 8012546:	600b      	str	r3, [r1, #0]
 8012548:	50cd      	str	r5, [r1, r3]
 801254a:	18cc      	adds	r4, r1, r3
 801254c:	4630      	mov	r0, r6
 801254e:	f000 fa22 	bl	8012996 <__malloc_unlock>
 8012552:	f104 000b 	add.w	r0, r4, #11
 8012556:	1d23      	adds	r3, r4, #4
 8012558:	f020 0007 	bic.w	r0, r0, #7
 801255c:	1ac3      	subs	r3, r0, r3
 801255e:	d0d3      	beq.n	8012508 <_malloc_r+0x20>
 8012560:	425a      	negs	r2, r3
 8012562:	50e2      	str	r2, [r4, r3]
 8012564:	e7d0      	b.n	8012508 <_malloc_r+0x20>
 8012566:	428c      	cmp	r4, r1
 8012568:	684b      	ldr	r3, [r1, #4]
 801256a:	bf16      	itet	ne
 801256c:	6063      	strne	r3, [r4, #4]
 801256e:	6013      	streq	r3, [r2, #0]
 8012570:	460c      	movne	r4, r1
 8012572:	e7eb      	b.n	801254c <_malloc_r+0x64>
 8012574:	460c      	mov	r4, r1
 8012576:	6849      	ldr	r1, [r1, #4]
 8012578:	e7cc      	b.n	8012514 <_malloc_r+0x2c>
 801257a:	1cc4      	adds	r4, r0, #3
 801257c:	f024 0403 	bic.w	r4, r4, #3
 8012580:	42a0      	cmp	r0, r4
 8012582:	d005      	beq.n	8012590 <_malloc_r+0xa8>
 8012584:	1a21      	subs	r1, r4, r0
 8012586:	4630      	mov	r0, r6
 8012588:	f000 f948 	bl	801281c <_sbrk_r>
 801258c:	3001      	adds	r0, #1
 801258e:	d0cf      	beq.n	8012530 <_malloc_r+0x48>
 8012590:	6025      	str	r5, [r4, #0]
 8012592:	e7db      	b.n	801254c <_malloc_r+0x64>
 8012594:	20000420 	.word	0x20000420
 8012598:	20000424 	.word	0x20000424

0801259c <__sfputc_r>:
 801259c:	6893      	ldr	r3, [r2, #8]
 801259e:	3b01      	subs	r3, #1
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	b410      	push	{r4}
 80125a4:	6093      	str	r3, [r2, #8]
 80125a6:	da08      	bge.n	80125ba <__sfputc_r+0x1e>
 80125a8:	6994      	ldr	r4, [r2, #24]
 80125aa:	42a3      	cmp	r3, r4
 80125ac:	db01      	blt.n	80125b2 <__sfputc_r+0x16>
 80125ae:	290a      	cmp	r1, #10
 80125b0:	d103      	bne.n	80125ba <__sfputc_r+0x1e>
 80125b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125b6:	f7fe bb65 	b.w	8010c84 <__swbuf_r>
 80125ba:	6813      	ldr	r3, [r2, #0]
 80125bc:	1c58      	adds	r0, r3, #1
 80125be:	6010      	str	r0, [r2, #0]
 80125c0:	7019      	strb	r1, [r3, #0]
 80125c2:	4608      	mov	r0, r1
 80125c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <__sfputs_r>:
 80125ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125cc:	4606      	mov	r6, r0
 80125ce:	460f      	mov	r7, r1
 80125d0:	4614      	mov	r4, r2
 80125d2:	18d5      	adds	r5, r2, r3
 80125d4:	42ac      	cmp	r4, r5
 80125d6:	d101      	bne.n	80125dc <__sfputs_r+0x12>
 80125d8:	2000      	movs	r0, #0
 80125da:	e007      	b.n	80125ec <__sfputs_r+0x22>
 80125dc:	463a      	mov	r2, r7
 80125de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7ff ffda 	bl	801259c <__sfputc_r>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d1f3      	bne.n	80125d4 <__sfputs_r+0xa>
 80125ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080125f0 <_vfiprintf_r>:
 80125f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f4:	460c      	mov	r4, r1
 80125f6:	b09d      	sub	sp, #116	; 0x74
 80125f8:	4617      	mov	r7, r2
 80125fa:	461d      	mov	r5, r3
 80125fc:	4606      	mov	r6, r0
 80125fe:	b118      	cbz	r0, 8012608 <_vfiprintf_r+0x18>
 8012600:	6983      	ldr	r3, [r0, #24]
 8012602:	b90b      	cbnz	r3, 8012608 <_vfiprintf_r+0x18>
 8012604:	f7ff fb34 	bl	8011c70 <__sinit>
 8012608:	4b7c      	ldr	r3, [pc, #496]	; (80127fc <_vfiprintf_r+0x20c>)
 801260a:	429c      	cmp	r4, r3
 801260c:	d158      	bne.n	80126c0 <_vfiprintf_r+0xd0>
 801260e:	6874      	ldr	r4, [r6, #4]
 8012610:	89a3      	ldrh	r3, [r4, #12]
 8012612:	0718      	lsls	r0, r3, #28
 8012614:	d55e      	bpl.n	80126d4 <_vfiprintf_r+0xe4>
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d05b      	beq.n	80126d4 <_vfiprintf_r+0xe4>
 801261c:	2300      	movs	r3, #0
 801261e:	9309      	str	r3, [sp, #36]	; 0x24
 8012620:	2320      	movs	r3, #32
 8012622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012626:	2330      	movs	r3, #48	; 0x30
 8012628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801262c:	9503      	str	r5, [sp, #12]
 801262e:	f04f 0b01 	mov.w	fp, #1
 8012632:	46b8      	mov	r8, r7
 8012634:	4645      	mov	r5, r8
 8012636:	f815 3b01 	ldrb.w	r3, [r5], #1
 801263a:	b10b      	cbz	r3, 8012640 <_vfiprintf_r+0x50>
 801263c:	2b25      	cmp	r3, #37	; 0x25
 801263e:	d154      	bne.n	80126ea <_vfiprintf_r+0xfa>
 8012640:	ebb8 0a07 	subs.w	sl, r8, r7
 8012644:	d00b      	beq.n	801265e <_vfiprintf_r+0x6e>
 8012646:	4653      	mov	r3, sl
 8012648:	463a      	mov	r2, r7
 801264a:	4621      	mov	r1, r4
 801264c:	4630      	mov	r0, r6
 801264e:	f7ff ffbc 	bl	80125ca <__sfputs_r>
 8012652:	3001      	adds	r0, #1
 8012654:	f000 80c2 	beq.w	80127dc <_vfiprintf_r+0x1ec>
 8012658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801265a:	4453      	add	r3, sl
 801265c:	9309      	str	r3, [sp, #36]	; 0x24
 801265e:	f898 3000 	ldrb.w	r3, [r8]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 80ba 	beq.w	80127dc <_vfiprintf_r+0x1ec>
 8012668:	2300      	movs	r3, #0
 801266a:	f04f 32ff 	mov.w	r2, #4294967295
 801266e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012672:	9304      	str	r3, [sp, #16]
 8012674:	9307      	str	r3, [sp, #28]
 8012676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801267a:	931a      	str	r3, [sp, #104]	; 0x68
 801267c:	46a8      	mov	r8, r5
 801267e:	2205      	movs	r2, #5
 8012680:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012684:	485e      	ldr	r0, [pc, #376]	; (8012800 <_vfiprintf_r+0x210>)
 8012686:	f7f5 fce3 	bl	8008050 <memchr>
 801268a:	9b04      	ldr	r3, [sp, #16]
 801268c:	bb78      	cbnz	r0, 80126ee <_vfiprintf_r+0xfe>
 801268e:	06d9      	lsls	r1, r3, #27
 8012690:	bf44      	itt	mi
 8012692:	2220      	movmi	r2, #32
 8012694:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012698:	071a      	lsls	r2, r3, #28
 801269a:	bf44      	itt	mi
 801269c:	222b      	movmi	r2, #43	; 0x2b
 801269e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80126a2:	782a      	ldrb	r2, [r5, #0]
 80126a4:	2a2a      	cmp	r2, #42	; 0x2a
 80126a6:	d02a      	beq.n	80126fe <_vfiprintf_r+0x10e>
 80126a8:	9a07      	ldr	r2, [sp, #28]
 80126aa:	46a8      	mov	r8, r5
 80126ac:	2000      	movs	r0, #0
 80126ae:	250a      	movs	r5, #10
 80126b0:	4641      	mov	r1, r8
 80126b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126b6:	3b30      	subs	r3, #48	; 0x30
 80126b8:	2b09      	cmp	r3, #9
 80126ba:	d969      	bls.n	8012790 <_vfiprintf_r+0x1a0>
 80126bc:	b360      	cbz	r0, 8012718 <_vfiprintf_r+0x128>
 80126be:	e024      	b.n	801270a <_vfiprintf_r+0x11a>
 80126c0:	4b50      	ldr	r3, [pc, #320]	; (8012804 <_vfiprintf_r+0x214>)
 80126c2:	429c      	cmp	r4, r3
 80126c4:	d101      	bne.n	80126ca <_vfiprintf_r+0xda>
 80126c6:	68b4      	ldr	r4, [r6, #8]
 80126c8:	e7a2      	b.n	8012610 <_vfiprintf_r+0x20>
 80126ca:	4b4f      	ldr	r3, [pc, #316]	; (8012808 <_vfiprintf_r+0x218>)
 80126cc:	429c      	cmp	r4, r3
 80126ce:	bf08      	it	eq
 80126d0:	68f4      	ldreq	r4, [r6, #12]
 80126d2:	e79d      	b.n	8012610 <_vfiprintf_r+0x20>
 80126d4:	4621      	mov	r1, r4
 80126d6:	4630      	mov	r0, r6
 80126d8:	f7fe fb26 	bl	8010d28 <__swsetup_r>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d09d      	beq.n	801261c <_vfiprintf_r+0x2c>
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295
 80126e4:	b01d      	add	sp, #116	; 0x74
 80126e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ea:	46a8      	mov	r8, r5
 80126ec:	e7a2      	b.n	8012634 <_vfiprintf_r+0x44>
 80126ee:	4a44      	ldr	r2, [pc, #272]	; (8012800 <_vfiprintf_r+0x210>)
 80126f0:	1a80      	subs	r0, r0, r2
 80126f2:	fa0b f000 	lsl.w	r0, fp, r0
 80126f6:	4318      	orrs	r0, r3
 80126f8:	9004      	str	r0, [sp, #16]
 80126fa:	4645      	mov	r5, r8
 80126fc:	e7be      	b.n	801267c <_vfiprintf_r+0x8c>
 80126fe:	9a03      	ldr	r2, [sp, #12]
 8012700:	1d11      	adds	r1, r2, #4
 8012702:	6812      	ldr	r2, [r2, #0]
 8012704:	9103      	str	r1, [sp, #12]
 8012706:	2a00      	cmp	r2, #0
 8012708:	db01      	blt.n	801270e <_vfiprintf_r+0x11e>
 801270a:	9207      	str	r2, [sp, #28]
 801270c:	e004      	b.n	8012718 <_vfiprintf_r+0x128>
 801270e:	4252      	negs	r2, r2
 8012710:	f043 0302 	orr.w	r3, r3, #2
 8012714:	9207      	str	r2, [sp, #28]
 8012716:	9304      	str	r3, [sp, #16]
 8012718:	f898 3000 	ldrb.w	r3, [r8]
 801271c:	2b2e      	cmp	r3, #46	; 0x2e
 801271e:	d10e      	bne.n	801273e <_vfiprintf_r+0x14e>
 8012720:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012724:	2b2a      	cmp	r3, #42	; 0x2a
 8012726:	d138      	bne.n	801279a <_vfiprintf_r+0x1aa>
 8012728:	9b03      	ldr	r3, [sp, #12]
 801272a:	1d1a      	adds	r2, r3, #4
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	9203      	str	r2, [sp, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	bfb8      	it	lt
 8012734:	f04f 33ff 	movlt.w	r3, #4294967295
 8012738:	f108 0802 	add.w	r8, r8, #2
 801273c:	9305      	str	r3, [sp, #20]
 801273e:	4d33      	ldr	r5, [pc, #204]	; (801280c <_vfiprintf_r+0x21c>)
 8012740:	f898 1000 	ldrb.w	r1, [r8]
 8012744:	2203      	movs	r2, #3
 8012746:	4628      	mov	r0, r5
 8012748:	f7f5 fc82 	bl	8008050 <memchr>
 801274c:	b140      	cbz	r0, 8012760 <_vfiprintf_r+0x170>
 801274e:	2340      	movs	r3, #64	; 0x40
 8012750:	1b40      	subs	r0, r0, r5
 8012752:	fa03 f000 	lsl.w	r0, r3, r0
 8012756:	9b04      	ldr	r3, [sp, #16]
 8012758:	4303      	orrs	r3, r0
 801275a:	f108 0801 	add.w	r8, r8, #1
 801275e:	9304      	str	r3, [sp, #16]
 8012760:	f898 1000 	ldrb.w	r1, [r8]
 8012764:	482a      	ldr	r0, [pc, #168]	; (8012810 <_vfiprintf_r+0x220>)
 8012766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801276a:	2206      	movs	r2, #6
 801276c:	f108 0701 	add.w	r7, r8, #1
 8012770:	f7f5 fc6e 	bl	8008050 <memchr>
 8012774:	2800      	cmp	r0, #0
 8012776:	d037      	beq.n	80127e8 <_vfiprintf_r+0x1f8>
 8012778:	4b26      	ldr	r3, [pc, #152]	; (8012814 <_vfiprintf_r+0x224>)
 801277a:	bb1b      	cbnz	r3, 80127c4 <_vfiprintf_r+0x1d4>
 801277c:	9b03      	ldr	r3, [sp, #12]
 801277e:	3307      	adds	r3, #7
 8012780:	f023 0307 	bic.w	r3, r3, #7
 8012784:	3308      	adds	r3, #8
 8012786:	9303      	str	r3, [sp, #12]
 8012788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801278a:	444b      	add	r3, r9
 801278c:	9309      	str	r3, [sp, #36]	; 0x24
 801278e:	e750      	b.n	8012632 <_vfiprintf_r+0x42>
 8012790:	fb05 3202 	mla	r2, r5, r2, r3
 8012794:	2001      	movs	r0, #1
 8012796:	4688      	mov	r8, r1
 8012798:	e78a      	b.n	80126b0 <_vfiprintf_r+0xc0>
 801279a:	2300      	movs	r3, #0
 801279c:	f108 0801 	add.w	r8, r8, #1
 80127a0:	9305      	str	r3, [sp, #20]
 80127a2:	4619      	mov	r1, r3
 80127a4:	250a      	movs	r5, #10
 80127a6:	4640      	mov	r0, r8
 80127a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127ac:	3a30      	subs	r2, #48	; 0x30
 80127ae:	2a09      	cmp	r2, #9
 80127b0:	d903      	bls.n	80127ba <_vfiprintf_r+0x1ca>
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d0c3      	beq.n	801273e <_vfiprintf_r+0x14e>
 80127b6:	9105      	str	r1, [sp, #20]
 80127b8:	e7c1      	b.n	801273e <_vfiprintf_r+0x14e>
 80127ba:	fb05 2101 	mla	r1, r5, r1, r2
 80127be:	2301      	movs	r3, #1
 80127c0:	4680      	mov	r8, r0
 80127c2:	e7f0      	b.n	80127a6 <_vfiprintf_r+0x1b6>
 80127c4:	ab03      	add	r3, sp, #12
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	4622      	mov	r2, r4
 80127ca:	4b13      	ldr	r3, [pc, #76]	; (8012818 <_vfiprintf_r+0x228>)
 80127cc:	a904      	add	r1, sp, #16
 80127ce:	4630      	mov	r0, r6
 80127d0:	f7fd fe14 	bl	80103fc <_printf_float>
 80127d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80127d8:	4681      	mov	r9, r0
 80127da:	d1d5      	bne.n	8012788 <_vfiprintf_r+0x198>
 80127dc:	89a3      	ldrh	r3, [r4, #12]
 80127de:	065b      	lsls	r3, r3, #25
 80127e0:	f53f af7e 	bmi.w	80126e0 <_vfiprintf_r+0xf0>
 80127e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80127e6:	e77d      	b.n	80126e4 <_vfiprintf_r+0xf4>
 80127e8:	ab03      	add	r3, sp, #12
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	4622      	mov	r2, r4
 80127ee:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <_vfiprintf_r+0x228>)
 80127f0:	a904      	add	r1, sp, #16
 80127f2:	4630      	mov	r0, r6
 80127f4:	f7fe f8b8 	bl	8010968 <_printf_i>
 80127f8:	e7ec      	b.n	80127d4 <_vfiprintf_r+0x1e4>
 80127fa:	bf00      	nop
 80127fc:	08012ae8 	.word	0x08012ae8
 8012800:	08012c24 	.word	0x08012c24
 8012804:	08012b08 	.word	0x08012b08
 8012808:	08012ac8 	.word	0x08012ac8
 801280c:	08012c2a 	.word	0x08012c2a
 8012810:	08012c2e 	.word	0x08012c2e
 8012814:	080103fd 	.word	0x080103fd
 8012818:	080125cb 	.word	0x080125cb

0801281c <_sbrk_r>:
 801281c:	b538      	push	{r3, r4, r5, lr}
 801281e:	4c06      	ldr	r4, [pc, #24]	; (8012838 <_sbrk_r+0x1c>)
 8012820:	2300      	movs	r3, #0
 8012822:	4605      	mov	r5, r0
 8012824:	4608      	mov	r0, r1
 8012826:	6023      	str	r3, [r4, #0]
 8012828:	f7f8 ffa8 	bl	800b77c <_sbrk>
 801282c:	1c43      	adds	r3, r0, #1
 801282e:	d102      	bne.n	8012836 <_sbrk_r+0x1a>
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	b103      	cbz	r3, 8012836 <_sbrk_r+0x1a>
 8012834:	602b      	str	r3, [r5, #0]
 8012836:	bd38      	pop	{r3, r4, r5, pc}
 8012838:	200007b8 	.word	0x200007b8

0801283c <__sread>:
 801283c:	b510      	push	{r4, lr}
 801283e:	460c      	mov	r4, r1
 8012840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012844:	f000 f8a8 	bl	8012998 <_read_r>
 8012848:	2800      	cmp	r0, #0
 801284a:	bfab      	itete	ge
 801284c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801284e:	89a3      	ldrhlt	r3, [r4, #12]
 8012850:	181b      	addge	r3, r3, r0
 8012852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012856:	bfac      	ite	ge
 8012858:	6563      	strge	r3, [r4, #84]	; 0x54
 801285a:	81a3      	strhlt	r3, [r4, #12]
 801285c:	bd10      	pop	{r4, pc}

0801285e <__swrite>:
 801285e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012862:	461f      	mov	r7, r3
 8012864:	898b      	ldrh	r3, [r1, #12]
 8012866:	05db      	lsls	r3, r3, #23
 8012868:	4605      	mov	r5, r0
 801286a:	460c      	mov	r4, r1
 801286c:	4616      	mov	r6, r2
 801286e:	d505      	bpl.n	801287c <__swrite+0x1e>
 8012870:	2302      	movs	r3, #2
 8012872:	2200      	movs	r2, #0
 8012874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012878:	f000 f868 	bl	801294c <_lseek_r>
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012886:	81a3      	strh	r3, [r4, #12]
 8012888:	4632      	mov	r2, r6
 801288a:	463b      	mov	r3, r7
 801288c:	4628      	mov	r0, r5
 801288e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012892:	f000 b817 	b.w	80128c4 <_write_r>

08012896 <__sseek>:
 8012896:	b510      	push	{r4, lr}
 8012898:	460c      	mov	r4, r1
 801289a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801289e:	f000 f855 	bl	801294c <_lseek_r>
 80128a2:	1c43      	adds	r3, r0, #1
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	bf15      	itete	ne
 80128a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80128aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128b2:	81a3      	strheq	r3, [r4, #12]
 80128b4:	bf18      	it	ne
 80128b6:	81a3      	strhne	r3, [r4, #12]
 80128b8:	bd10      	pop	{r4, pc}

080128ba <__sclose>:
 80128ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128be:	f000 b813 	b.w	80128e8 <_close_r>
	...

080128c4 <_write_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4c07      	ldr	r4, [pc, #28]	; (80128e4 <_write_r+0x20>)
 80128c8:	4605      	mov	r5, r0
 80128ca:	4608      	mov	r0, r1
 80128cc:	4611      	mov	r1, r2
 80128ce:	2200      	movs	r2, #0
 80128d0:	6022      	str	r2, [r4, #0]
 80128d2:	461a      	mov	r2, r3
 80128d4:	f7f8 ff01 	bl	800b6da <_write>
 80128d8:	1c43      	adds	r3, r0, #1
 80128da:	d102      	bne.n	80128e2 <_write_r+0x1e>
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	b103      	cbz	r3, 80128e2 <_write_r+0x1e>
 80128e0:	602b      	str	r3, [r5, #0]
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	200007b8 	.word	0x200007b8

080128e8 <_close_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4c06      	ldr	r4, [pc, #24]	; (8012904 <_close_r+0x1c>)
 80128ec:	2300      	movs	r3, #0
 80128ee:	4605      	mov	r5, r0
 80128f0:	4608      	mov	r0, r1
 80128f2:	6023      	str	r3, [r4, #0]
 80128f4:	f7f8 ff0d 	bl	800b712 <_close>
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	d102      	bne.n	8012902 <_close_r+0x1a>
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	b103      	cbz	r3, 8012902 <_close_r+0x1a>
 8012900:	602b      	str	r3, [r5, #0]
 8012902:	bd38      	pop	{r3, r4, r5, pc}
 8012904:	200007b8 	.word	0x200007b8

08012908 <_fstat_r>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	4c07      	ldr	r4, [pc, #28]	; (8012928 <_fstat_r+0x20>)
 801290c:	2300      	movs	r3, #0
 801290e:	4605      	mov	r5, r0
 8012910:	4608      	mov	r0, r1
 8012912:	4611      	mov	r1, r2
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	f7f8 ff08 	bl	800b72a <_fstat>
 801291a:	1c43      	adds	r3, r0, #1
 801291c:	d102      	bne.n	8012924 <_fstat_r+0x1c>
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	b103      	cbz	r3, 8012924 <_fstat_r+0x1c>
 8012922:	602b      	str	r3, [r5, #0]
 8012924:	bd38      	pop	{r3, r4, r5, pc}
 8012926:	bf00      	nop
 8012928:	200007b8 	.word	0x200007b8

0801292c <_isatty_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	4c06      	ldr	r4, [pc, #24]	; (8012948 <_isatty_r+0x1c>)
 8012930:	2300      	movs	r3, #0
 8012932:	4605      	mov	r5, r0
 8012934:	4608      	mov	r0, r1
 8012936:	6023      	str	r3, [r4, #0]
 8012938:	f7f8 ff07 	bl	800b74a <_isatty>
 801293c:	1c43      	adds	r3, r0, #1
 801293e:	d102      	bne.n	8012946 <_isatty_r+0x1a>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	b103      	cbz	r3, 8012946 <_isatty_r+0x1a>
 8012944:	602b      	str	r3, [r5, #0]
 8012946:	bd38      	pop	{r3, r4, r5, pc}
 8012948:	200007b8 	.word	0x200007b8

0801294c <_lseek_r>:
 801294c:	b538      	push	{r3, r4, r5, lr}
 801294e:	4c07      	ldr	r4, [pc, #28]	; (801296c <_lseek_r+0x20>)
 8012950:	4605      	mov	r5, r0
 8012952:	4608      	mov	r0, r1
 8012954:	4611      	mov	r1, r2
 8012956:	2200      	movs	r2, #0
 8012958:	6022      	str	r2, [r4, #0]
 801295a:	461a      	mov	r2, r3
 801295c:	f7f8 ff00 	bl	800b760 <_lseek>
 8012960:	1c43      	adds	r3, r0, #1
 8012962:	d102      	bne.n	801296a <_lseek_r+0x1e>
 8012964:	6823      	ldr	r3, [r4, #0]
 8012966:	b103      	cbz	r3, 801296a <_lseek_r+0x1e>
 8012968:	602b      	str	r3, [r5, #0]
 801296a:	bd38      	pop	{r3, r4, r5, pc}
 801296c:	200007b8 	.word	0x200007b8

08012970 <__ascii_mbtowc>:
 8012970:	b082      	sub	sp, #8
 8012972:	b901      	cbnz	r1, 8012976 <__ascii_mbtowc+0x6>
 8012974:	a901      	add	r1, sp, #4
 8012976:	b142      	cbz	r2, 801298a <__ascii_mbtowc+0x1a>
 8012978:	b14b      	cbz	r3, 801298e <__ascii_mbtowc+0x1e>
 801297a:	7813      	ldrb	r3, [r2, #0]
 801297c:	600b      	str	r3, [r1, #0]
 801297e:	7812      	ldrb	r2, [r2, #0]
 8012980:	1c10      	adds	r0, r2, #0
 8012982:	bf18      	it	ne
 8012984:	2001      	movne	r0, #1
 8012986:	b002      	add	sp, #8
 8012988:	4770      	bx	lr
 801298a:	4610      	mov	r0, r2
 801298c:	e7fb      	b.n	8012986 <__ascii_mbtowc+0x16>
 801298e:	f06f 0001 	mvn.w	r0, #1
 8012992:	e7f8      	b.n	8012986 <__ascii_mbtowc+0x16>

08012994 <__malloc_lock>:
 8012994:	4770      	bx	lr

08012996 <__malloc_unlock>:
 8012996:	4770      	bx	lr

08012998 <_read_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4c07      	ldr	r4, [pc, #28]	; (80129b8 <_read_r+0x20>)
 801299c:	4605      	mov	r5, r0
 801299e:	4608      	mov	r0, r1
 80129a0:	4611      	mov	r1, r2
 80129a2:	2200      	movs	r2, #0
 80129a4:	6022      	str	r2, [r4, #0]
 80129a6:	461a      	mov	r2, r3
 80129a8:	f7f8 fe7a 	bl	800b6a0 <_read>
 80129ac:	1c43      	adds	r3, r0, #1
 80129ae:	d102      	bne.n	80129b6 <_read_r+0x1e>
 80129b0:	6823      	ldr	r3, [r4, #0]
 80129b2:	b103      	cbz	r3, 80129b6 <_read_r+0x1e>
 80129b4:	602b      	str	r3, [r5, #0]
 80129b6:	bd38      	pop	{r3, r4, r5, pc}
 80129b8:	200007b8 	.word	0x200007b8

080129bc <__ascii_wctomb>:
 80129bc:	b149      	cbz	r1, 80129d2 <__ascii_wctomb+0x16>
 80129be:	2aff      	cmp	r2, #255	; 0xff
 80129c0:	bf85      	ittet	hi
 80129c2:	238a      	movhi	r3, #138	; 0x8a
 80129c4:	6003      	strhi	r3, [r0, #0]
 80129c6:	700a      	strbls	r2, [r1, #0]
 80129c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80129cc:	bf98      	it	ls
 80129ce:	2001      	movls	r0, #1
 80129d0:	4770      	bx	lr
 80129d2:	4608      	mov	r0, r1
 80129d4:	4770      	bx	lr
	...

080129d8 <_init>:
 80129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129da:	bf00      	nop
 80129dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129de:	bc08      	pop	{r3}
 80129e0:	469e      	mov	lr, r3
 80129e2:	4770      	bx	lr

080129e4 <_fini>:
 80129e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e6:	bf00      	nop
 80129e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ea:	bc08      	pop	{r3}
 80129ec:	469e      	mov	lr, r3
 80129ee:	4770      	bx	lr
