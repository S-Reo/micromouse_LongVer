
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         00010808  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000450  08018808  08018808  00028808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08018c58  08018c58  0003025c  2**0
                  CONTENTS
  5 .ARM          00000008  08018c58  08018c58  00028c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08018c60  08018c60  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08018c60  08018c60  00028c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08018c64  08018c64  00028c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000025c  20000000  08018c68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001a568  20000260  08018ec4  00030260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001a7c8  08018ec4  0003a7c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149c1  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002ce2  00000000  00000000  00044c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014c8  00000000  00000000  00047930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00048df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f577  00000000  00000000  0006bca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8619  00000000  00000000  0007b21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00143836  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064d8  00000000  00000000  001438b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000260 	.word	0x20000260
 800801c:	00000000 	.word	0x00000000
 8008020:	080187f0 	.word	0x080187f0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000264 	.word	0x20000264
 800803c:	080187f0 	.word	0x080187f0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:

float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 8008dd6:	4b54      	ldr	r3, [pc, #336]	; (8008f28 <Side_Wall_Control+0x170>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10f      	bne.n	8008dfe <Side_Wall_Control+0x46>
		e=0;
 8008dde:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <Side_Wall_Control+0x174>)
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
		ei =0;
 8008de6:	4b52      	ldr	r3, [pc, #328]	; (8008f30 <Side_Wall_Control+0x178>)
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
		ed = 0;
 8008dee:	4b51      	ldr	r3, [pc, #324]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df6:	4b50      	ldr	r3, [pc, #320]	; (8008f38 <Side_Wall_Control+0x180>)
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfe:	4b4a      	ldr	r3, [pc, #296]	; (8008f28 <Side_Wall_Control+0x170>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
	e =  40 + target - now;//r - l
 8008e04:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e08:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008f3c <Side_Wall_Control+0x184>
 8008e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e18:	4b44      	ldr	r3, [pc, #272]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e1a:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 8008e1e:	4b43      	ldr	r3, [pc, #268]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e20:	ed93 7a00 	vldr	s14, [r3]
 8008e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e2c:	4b40      	ldr	r3, [pc, #256]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e2e:	edd3 7a00 	vldr	s15, [r3]
 8008e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e36:	4b3e      	ldr	r3, [pc, #248]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e38:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e3c:	4b3b      	ldr	r3, [pc, #236]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e3e:	ed93 7a00 	vldr	s14, [r3]
 8008e42:	4b3d      	ldr	r3, [pc, #244]	; (8008f38 <Side_Wall_Control+0x180>)
 8008e44:	edd3 7a00 	vldr	s15, [r3]
 8008e48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e54:	4b37      	ldr	r3, [pc, #220]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008e56:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 8008e5a:	4b34      	ldr	r3, [pc, #208]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a36      	ldr	r2, [pc, #216]	; (8008f38 <Side_Wall_Control+0x180>)
 8008e60:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e62:	4b32      	ldr	r3, [pc, #200]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e64:	ed93 7a00 	vldr	s14, [r3]
 8008e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e70:	4b2f      	ldr	r3, [pc, #188]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e72:	edd3 6a00 	vldr	s13, [r3]
 8008e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e82:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008e84:	edd3 6a00 	vldr	s13, [r3]
 8008e88:	edd7 7a00 	vldr	s15, [r7]
 8008e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e94:	ee17 0a90 	vmov	r0, s15
 8008e98:	f7ff fa8e 	bl	80083b8 <__aeabi_f2d>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	ec44 3b10 	vmov	d0, r3, r4
 8008ea4:	f00d f89c 	bl	8015fe0 <round>
 8008ea8:	ec54 3b10 	vmov	r3, r4, d0
 8008eac:	4618      	mov	r0, r3
 8008eae:	4621      	mov	r1, r4
 8008eb0:	f7ff fd8a 	bl	80089c8 <__aeabi_d2iz>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b21a      	sxth	r2, r3
 8008eb8:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <Side_Wall_Control+0x188>)
 8008eba:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <Side_Wall_Control+0x174>)
 8008ebe:	ed93 7a00 	vldr	s14, [r3]
 8008ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eca:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <Side_Wall_Control+0x178>)
 8008ecc:	edd3 6a00 	vldr	s13, [r3]
 8008ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008edc:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008ede:	edd3 6a00 	vldr	s13, [r3]
 8008ee2:	edd7 7a00 	vldr	s15, [r7]
 8008ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eee:	ee17 0a90 	vmov	r0, s15
 8008ef2:	f7ff fa61 	bl	80083b8 <__aeabi_f2d>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	ec44 3b10 	vmov	d0, r3, r4
 8008efe:	f00d f86f 	bl	8015fe0 <round>
 8008f02:	ec54 3b10 	vmov	r3, r4, d0
 8008f06:	4618      	mov	r0, r3
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f7ff fd5d 	bl	80089c8 <__aeabi_d2iz>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	425b      	negs	r3, r3
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <Side_Wall_Control+0x18c>)
 8008f1c:	801a      	strh	r2, [r3, #0]

}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	bf00      	nop
 8008f28:	2000027c 	.word	0x2000027c
 8008f2c:	20000280 	.word	0x20000280
 8008f30:	20000284 	.word	0x20000284
 8008f34:	20000288 	.word	0x20000288
 8008f38:	2000028c 	.word	0x2000028c
 8008f3c:	42200000 	.word	0x42200000
 8008f40:	2000e01a 	.word	0x2000e01a
 8008f44:	2000e02c 	.word	0x2000e02c

08008f48 <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f52:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f56:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f5e:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f62:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 8008f66:	4b59      	ldr	r3, [pc, #356]	; (80090cc <Left_Wall_Control+0x184>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10f      	bne.n	8008f8e <Left_Wall_Control+0x46>
		e=0;
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <Left_Wall_Control+0x188>)
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
		ei =0;
 8008f76:	4b57      	ldr	r3, [pc, #348]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
		ed = 0;
 8008f7e:	4b56      	ldr	r3, [pc, #344]	; (80090d8 <Left_Wall_Control+0x190>)
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f86:	4b55      	ldr	r3, [pc, #340]	; (80090dc <Left_Wall_Control+0x194>)
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f8e:	4b4f      	ldr	r3, [pc, #316]	; (80090cc <Left_Wall_Control+0x184>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fa0:	ee17 0a90 	vmov	r0, s15
 8008fa4:	f7ff fa08 	bl	80083b8 <__aeabi_f2d>
 8008fa8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008fac:	4b4c      	ldr	r3, [pc, #304]	; (80090e0 <Left_Wall_Control+0x198>)
 8008fae:	f7ff fa5b 	bl	8008468 <__aeabi_dmul>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7ff fd2d 	bl	8008a18 <__aeabi_d2f>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fc2:	601a      	str	r2, [r3, #0]
	ei += e * T;
 8008fc4:	4b42      	ldr	r3, [pc, #264]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fc6:	ed93 7a00 	vldr	s14, [r3]
 8008fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fd2:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008fd4:	edd3 7a00 	vldr	s15, [r3]
 8008fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fdc:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008fde:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fe4:	ed93 7a00 	vldr	s14, [r3]
 8008fe8:	4b3c      	ldr	r3, [pc, #240]	; (80090dc <Left_Wall_Control+0x194>)
 8008fea:	edd3 7a00 	vldr	s15, [r3]
 8008fee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffa:	4b37      	ldr	r3, [pc, #220]	; (80090d8 <Left_Wall_Control+0x190>)
 8008ffc:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 8009000:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <Left_Wall_Control+0x188>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a35      	ldr	r2, [pc, #212]	; (80090dc <Left_Wall_Control+0x194>)
 8009006:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009008:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <Left_Wall_Control+0x188>)
 800900a:	ed93 7a00 	vldr	s14, [r3]
 800900e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <Left_Wall_Control+0x18c>)
 8009018:	edd3 6a00 	vldr	s13, [r3]
 800901c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009028:	4b2b      	ldr	r3, [pc, #172]	; (80090d8 <Left_Wall_Control+0x190>)
 800902a:	edd3 6a00 	vldr	s13, [r3]
 800902e:	edd7 7a00 	vldr	s15, [r7]
 8009032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800903a:	ee17 0a90 	vmov	r0, s15
 800903e:	f7ff f9bb 	bl	80083b8 <__aeabi_f2d>
 8009042:	4603      	mov	r3, r0
 8009044:	460c      	mov	r4, r1
 8009046:	ec44 3b10 	vmov	d0, r3, r4
 800904a:	f00c ffc9 	bl	8015fe0 <round>
 800904e:	ec54 3b10 	vmov	r3, r4, d0
 8009052:	4618      	mov	r0, r3
 8009054:	4621      	mov	r1, r4
 8009056:	f7ff fcb7 	bl	80089c8 <__aeabi_d2iz>
 800905a:	4603      	mov	r3, r0
 800905c:	b21b      	sxth	r3, r3
 800905e:	b29b      	uxth	r3, r3
 8009060:	425b      	negs	r3, r3
 8009062:	b29b      	uxth	r3, r3
 8009064:	b21a      	sxth	r2, r3
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <Left_Wall_Control+0x19c>)
 8009068:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 800906a:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <Left_Wall_Control+0x188>)
 800906c:	ed93 7a00 	vldr	s14, [r3]
 8009070:	edd7 7a02 	vldr	s15, [r7, #8]
 8009074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009078:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <Left_Wall_Control+0x18c>)
 800907a:	edd3 6a00 	vldr	s13, [r3]
 800907e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <Left_Wall_Control+0x190>)
 800908c:	edd3 6a00 	vldr	s13, [r3]
 8009090:	edd7 7a00 	vldr	s15, [r7]
 8009094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800909c:	ee17 0a90 	vmov	r0, s15
 80090a0:	f7ff f98a 	bl	80083b8 <__aeabi_f2d>
 80090a4:	4603      	mov	r3, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	ec44 3b10 	vmov	d0, r3, r4
 80090ac:	f00c ff98 	bl	8015fe0 <round>
 80090b0:	ec54 3b10 	vmov	r3, r4, d0
 80090b4:	4618      	mov	r0, r3
 80090b6:	4621      	mov	r1, r4
 80090b8:	f7ff fc86 	bl	80089c8 <__aeabi_d2iz>
 80090bc:	4603      	mov	r3, r0
 80090be:	b21a      	sxth	r2, r3
 80090c0:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <Left_Wall_Control+0x1a0>)
 80090c2:	801a      	strh	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}
 80090cc:	2000027c 	.word	0x2000027c
 80090d0:	20000290 	.word	0x20000290
 80090d4:	20000294 	.word	0x20000294
 80090d8:	20000298 	.word	0x20000298
 80090dc:	2000029c 	.word	0x2000029c
 80090e0:	3ff33333 	.word	0x3ff33333
 80090e4:	2000e016 	.word	0x2000e016
 80090e8:	2000e038 	.word	0x2000e038

080090ec <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80090f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80090fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80090fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8009102:	ed87 2a01 	vstr	s4, [r7, #4]
 8009106:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 800910a:	4b59      	ldr	r3, [pc, #356]	; (8009270 <Right_Wall_Control+0x184>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10f      	bne.n	8009132 <Right_Wall_Control+0x46>
		e=0;
 8009112:	4b58      	ldr	r3, [pc, #352]	; (8009274 <Right_Wall_Control+0x188>)
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
		ei =0;
 800911a:	4b57      	ldr	r3, [pc, #348]	; (8009278 <Right_Wall_Control+0x18c>)
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009122:	4b56      	ldr	r3, [pc, #344]	; (800927c <Right_Wall_Control+0x190>)
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800912a:	4b55      	ldr	r3, [pc, #340]	; (8009280 <Right_Wall_Control+0x194>)
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009132:	4b4f      	ldr	r3, [pc, #316]	; (8009270 <Right_Wall_Control+0x184>)
 8009134:	2201      	movs	r2, #1
 8009136:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8009138:	ed97 7a05 	vldr	s14, [r7, #20]
 800913c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009144:	ee17 0a90 	vmov	r0, s15
 8009148:	f7ff f936 	bl	80083b8 <__aeabi_f2d>
 800914c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <Right_Wall_Control+0x198>)
 8009152:	f7ff f989 	bl	8008468 <__aeabi_dmul>
 8009156:	4603      	mov	r3, r0
 8009158:	460c      	mov	r4, r1
 800915a:	4618      	mov	r0, r3
 800915c:	4621      	mov	r1, r4
 800915e:	f7ff fc5b 	bl	8008a18 <__aeabi_d2f>
 8009162:	4602      	mov	r2, r0
 8009164:	4b43      	ldr	r3, [pc, #268]	; (8009274 <Right_Wall_Control+0x188>)
 8009166:	601a      	str	r2, [r3, #0]
	ei += e * T;
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <Right_Wall_Control+0x188>)
 800916a:	ed93 7a00 	vldr	s14, [r3]
 800916e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009176:	4b40      	ldr	r3, [pc, #256]	; (8009278 <Right_Wall_Control+0x18c>)
 8009178:	edd3 7a00 	vldr	s15, [r3]
 800917c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009180:	4b3d      	ldr	r3, [pc, #244]	; (8009278 <Right_Wall_Control+0x18c>)
 8009182:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009186:	4b3b      	ldr	r3, [pc, #236]	; (8009274 <Right_Wall_Control+0x188>)
 8009188:	ed93 7a00 	vldr	s14, [r3]
 800918c:	4b3c      	ldr	r3, [pc, #240]	; (8009280 <Right_Wall_Control+0x194>)
 800918e:	edd3 7a00 	vldr	s15, [r3]
 8009192:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009196:	ed97 7a03 	vldr	s14, [r7, #12]
 800919a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919e:	4b37      	ldr	r3, [pc, #220]	; (800927c <Right_Wall_Control+0x190>)
 80091a0:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80091a4:	4b33      	ldr	r3, [pc, #204]	; (8009274 <Right_Wall_Control+0x188>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a35      	ldr	r2, [pc, #212]	; (8009280 <Right_Wall_Control+0x194>)
 80091aa:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 80091ac:	4b31      	ldr	r3, [pc, #196]	; (8009274 <Right_Wall_Control+0x188>)
 80091ae:	ed93 7a00 	vldr	s14, [r3]
 80091b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80091b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091ba:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <Right_Wall_Control+0x18c>)
 80091bc:	edd3 6a00 	vldr	s13, [r3]
 80091c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80091c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <Right_Wall_Control+0x190>)
 80091ce:	edd3 6a00 	vldr	s13, [r3]
 80091d2:	edd7 7a00 	vldr	s15, [r7]
 80091d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091de:	ee17 0a90 	vmov	r0, s15
 80091e2:	f7ff f8e9 	bl	80083b8 <__aeabi_f2d>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	ec44 3b10 	vmov	d0, r3, r4
 80091ee:	f00c fef7 	bl	8015fe0 <round>
 80091f2:	ec54 3b10 	vmov	r3, r4, d0
 80091f6:	4618      	mov	r0, r3
 80091f8:	4621      	mov	r1, r4
 80091fa:	f7ff fbe5 	bl	80089c8 <__aeabi_d2iz>
 80091fe:	4603      	mov	r3, r0
 8009200:	b21a      	sxth	r2, r3
 8009202:	4b21      	ldr	r3, [pc, #132]	; (8009288 <Right_Wall_Control+0x19c>)
 8009204:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009206:	4b1b      	ldr	r3, [pc, #108]	; (8009274 <Right_Wall_Control+0x188>)
 8009208:	ed93 7a00 	vldr	s14, [r3]
 800920c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009214:	4b18      	ldr	r3, [pc, #96]	; (8009278 <Right_Wall_Control+0x18c>)
 8009216:	edd3 6a00 	vldr	s13, [r3]
 800921a:	edd7 7a01 	vldr	s15, [r7, #4]
 800921e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <Right_Wall_Control+0x190>)
 8009228:	edd3 6a00 	vldr	s13, [r3]
 800922c:	edd7 7a00 	vldr	s15, [r7]
 8009230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009238:	ee17 0a90 	vmov	r0, s15
 800923c:	f7ff f8bc 	bl	80083b8 <__aeabi_f2d>
 8009240:	4603      	mov	r3, r0
 8009242:	460c      	mov	r4, r1
 8009244:	ec44 3b10 	vmov	d0, r3, r4
 8009248:	f00c feca 	bl	8015fe0 <round>
 800924c:	ec54 3b10 	vmov	r3, r4, d0
 8009250:	4618      	mov	r0, r3
 8009252:	4621      	mov	r1, r4
 8009254:	f7ff fbb8 	bl	80089c8 <__aeabi_d2iz>
 8009258:	4603      	mov	r3, r0
 800925a:	b21b      	sxth	r3, r3
 800925c:	b29b      	uxth	r3, r3
 800925e:	425b      	negs	r3, r3
 8009260:	b29b      	uxth	r3, r3
 8009262:	b21a      	sxth	r2, r3
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <Right_Wall_Control+0x1a0>)
 8009266:	801a      	strh	r2, [r3, #0]
}
 8009268:	bf00      	nop
 800926a:	371c      	adds	r7, #28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}
 8009270:	2000027c 	.word	0x2000027c
 8009274:	200002a0 	.word	0x200002a0
 8009278:	200002a4 	.word	0x200002a4
 800927c:	200002a8 	.word	0x200002a8
 8009280:	200002ac 	.word	0x200002ac
 8009284:	3ff33333 	.word	0x3ff33333
 8009288:	2000e008 	.word	0x2000e008
 800928c:	2000e020 	.word	0x2000e020

08009290 <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	ed87 0a05 	vstr	s0, [r7, #20]
 800929a:	edc7 0a04 	vstr	s1, [r7, #16]
 800929e:	ed87 1a03 	vstr	s2, [r7, #12]
 80092a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80092a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80092aa:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;

	if(error_reset == 0){
 80092ae:	4b50      	ldr	r3, [pc, #320]	; (80093f0 <Velocity_Control+0x160>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10f      	bne.n	80092d6 <Velocity_Control+0x46>
		e=0;
 80092b6:	4b4f      	ldr	r3, [pc, #316]	; (80093f4 <Velocity_Control+0x164>)
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
		ei =0;
 80092be:	4b4e      	ldr	r3, [pc, #312]	; (80093f8 <Velocity_Control+0x168>)
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
		ed = 0;
 80092c6:	4b4d      	ldr	r3, [pc, #308]	; (80093fc <Velocity_Control+0x16c>)
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80092ce:	4b4c      	ldr	r3, [pc, #304]	; (8009400 <Velocity_Control+0x170>)
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80092d6:	4b46      	ldr	r3, [pc, #280]	; (80093f0 <Velocity_Control+0x160>)
 80092d8:	2201      	movs	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80092dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80092e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	4b42      	ldr	r3, [pc, #264]	; (80093f4 <Velocity_Control+0x164>)
 80092ea:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 80092ee:	4b41      	ldr	r3, [pc, #260]	; (80093f4 <Velocity_Control+0x164>)
 80092f0:	ed93 7a00 	vldr	s14, [r3]
 80092f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80092f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092fc:	4b3e      	ldr	r3, [pc, #248]	; (80093f8 <Velocity_Control+0x168>)
 80092fe:	edd3 7a00 	vldr	s15, [r3]
 8009302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009306:	4b3c      	ldr	r3, [pc, #240]	; (80093f8 <Velocity_Control+0x168>)
 8009308:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800930c:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <Velocity_Control+0x164>)
 800930e:	ed93 7a00 	vldr	s14, [r3]
 8009312:	4b3b      	ldr	r3, [pc, #236]	; (8009400 <Velocity_Control+0x170>)
 8009314:	edd3 7a00 	vldr	s15, [r3]
 8009318:	ee77 6a67 	vsub.f32	s13, s14, s15
 800931c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009324:	4b35      	ldr	r3, [pc, #212]	; (80093fc <Velocity_Control+0x16c>)
 8009326:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800932a:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <Velocity_Control+0x164>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a34      	ldr	r2, [pc, #208]	; (8009400 <Velocity_Control+0x170>)
 8009330:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009332:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <Velocity_Control+0x164>)
 8009334:	ed93 7a00 	vldr	s14, [r3]
 8009338:	edd7 7a02 	vldr	s15, [r7, #8]
 800933c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009340:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <Velocity_Control+0x168>)
 8009342:	edd3 6a00 	vldr	s13, [r3]
 8009346:	edd7 7a01 	vldr	s15, [r7, #4]
 800934a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800934e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <Velocity_Control+0x16c>)
 8009354:	edd3 6a00 	vldr	s13, [r3]
 8009358:	edd7 7a00 	vldr	s15, [r7]
 800935c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009364:	ee17 0a90 	vmov	r0, s15
 8009368:	f7ff f826 	bl	80083b8 <__aeabi_f2d>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	ec44 3b10 	vmov	d0, r3, r4
 8009374:	f00c fe34 	bl	8015fe0 <round>
 8009378:	ec54 3b10 	vmov	r3, r4, d0
 800937c:	4618      	mov	r0, r3
 800937e:	4621      	mov	r1, r4
 8009380:	f7ff fb22 	bl	80089c8 <__aeabi_d2iz>
 8009384:	4603      	mov	r3, r0
 8009386:	b21a      	sxth	r2, r3
 8009388:	4b1e      	ldr	r3, [pc, #120]	; (8009404 <Velocity_Control+0x174>)
 800938a:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <Velocity_Control+0x164>)
 800938e:	ed93 7a00 	vldr	s14, [r3]
 8009392:	edd7 7a02 	vldr	s15, [r7, #8]
 8009396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <Velocity_Control+0x168>)
 800939c:	edd3 6a00 	vldr	s13, [r3]
 80093a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80093a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <Velocity_Control+0x16c>)
 80093ae:	edd3 6a00 	vldr	s13, [r3]
 80093b2:	edd7 7a00 	vldr	s15, [r7]
 80093b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093be:	ee17 0a90 	vmov	r0, s15
 80093c2:	f7fe fff9 	bl	80083b8 <__aeabi_f2d>
 80093c6:	4603      	mov	r3, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	ec44 3b10 	vmov	d0, r3, r4
 80093ce:	f00c fe07 	bl	8015fe0 <round>
 80093d2:	ec54 3b10 	vmov	r3, r4, d0
 80093d6:	4618      	mov	r0, r3
 80093d8:	4621      	mov	r1, r4
 80093da:	f7ff faf5 	bl	80089c8 <__aeabi_d2iz>
 80093de:	4603      	mov	r3, r0
 80093e0:	b21a      	sxth	r2, r3
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <Velocity_Control+0x178>)
 80093e4:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}
 80093ee:	bf00      	nop
 80093f0:	2000027c 	.word	0x2000027c
 80093f4:	200002b0 	.word	0x200002b0
 80093f8:	200002b4 	.word	0x200002b4
 80093fc:	200002b8 	.word	0x200002b8
 8009400:	200002bc 	.word	0x200002bc
 8009404:	2000e01c 	.word	0x2000e01c
 8009408:	2000e014 	.word	0x2000e014

0800940c <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	ed87 0a05 	vstr	s0, [r7, #20]
 8009416:	edc7 0a04 	vstr	s1, [r7, #16]
 800941a:	ed87 1a03 	vstr	s2, [r7, #12]
 800941e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009422:	ed87 2a01 	vstr	s4, [r7, #4]
 8009426:	edc7 2a00 	vstr	s5, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 800942a:	4b39      	ldr	r3, [pc, #228]	; (8009510 <Right_Velo_Control+0x104>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10f      	bne.n	8009452 <Right_Velo_Control+0x46>
		e=0;
 8009432:	4b38      	ldr	r3, [pc, #224]	; (8009514 <Right_Velo_Control+0x108>)
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
		ei =0;
 800943a:	4b37      	ldr	r3, [pc, #220]	; (8009518 <Right_Velo_Control+0x10c>)
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009442:	4b36      	ldr	r3, [pc, #216]	; (800951c <Right_Velo_Control+0x110>)
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800944a:	4b35      	ldr	r3, [pc, #212]	; (8009520 <Right_Velo_Control+0x114>)
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009452:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <Right_Velo_Control+0x104>)
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009458:	ed97 7a05 	vldr	s14, [r7, #20]
 800945c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009464:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <Right_Velo_Control+0x108>)
 8009466:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800946a:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <Right_Velo_Control+0x108>)
 800946c:	ed93 7a00 	vldr	s14, [r3]
 8009470:	edd7 7a03 	vldr	s15, [r7, #12]
 8009474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009478:	4b27      	ldr	r3, [pc, #156]	; (8009518 <Right_Velo_Control+0x10c>)
 800947a:	edd3 7a00 	vldr	s15, [r3]
 800947e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009482:	4b25      	ldr	r3, [pc, #148]	; (8009518 <Right_Velo_Control+0x10c>)
 8009484:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <Right_Velo_Control+0x108>)
 800948a:	ed93 7a00 	vldr	s14, [r3]
 800948e:	4b24      	ldr	r3, [pc, #144]	; (8009520 <Right_Velo_Control+0x114>)
 8009490:	edd3 7a00 	vldr	s15, [r3]
 8009494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009498:	ed97 7a03 	vldr	s14, [r7, #12]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <Right_Velo_Control+0x110>)
 80094a2:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80094a6:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <Right_Velo_Control+0x108>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <Right_Velo_Control+0x114>)
 80094ac:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80094ae:	4b19      	ldr	r3, [pc, #100]	; (8009514 <Right_Velo_Control+0x108>)
 80094b0:	ed93 7a00 	vldr	s14, [r3]
 80094b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80094b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094bc:	4b16      	ldr	r3, [pc, #88]	; (8009518 <Right_Velo_Control+0x10c>)
 80094be:	edd3 6a00 	vldr	s13, [r3]
 80094c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80094c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <Right_Velo_Control+0x110>)
 80094d0:	edd3 6a00 	vldr	s13, [r3]
 80094d4:	edd7 7a00 	vldr	s15, [r7]
 80094d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e0:	ee17 0a90 	vmov	r0, s15
 80094e4:	f7fe ff68 	bl	80083b8 <__aeabi_f2d>
 80094e8:	4603      	mov	r3, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	ec44 3b10 	vmov	d0, r3, r4
 80094f0:	f00c fd76 	bl	8015fe0 <round>
 80094f4:	ec54 3b10 	vmov	r3, r4, d0
 80094f8:	4618      	mov	r0, r3
 80094fa:	4621      	mov	r1, r4
 80094fc:	f7ff fa64 	bl	80089c8 <__aeabi_d2iz>
 8009500:	4603      	mov	r3, r0
 8009502:	b21a      	sxth	r2, r3
 8009504:	4b07      	ldr	r3, [pc, #28]	; (8009524 <Right_Velo_Control+0x118>)
 8009506:	801a      	strh	r2, [r3, #0]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd90      	pop	{r4, r7, pc}
 8009510:	2000027c 	.word	0x2000027c
 8009514:	200002c0 	.word	0x200002c0
 8009518:	200002c4 	.word	0x200002c4
 800951c:	200002c8 	.word	0x200002c8
 8009520:	200002cc 	.word	0x200002cc
 8009524:	2000e00c 	.word	0x2000e00c

08009528 <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009532:	edc7 0a04 	vstr	s1, [r7, #16]
 8009536:	ed87 1a03 	vstr	s2, [r7, #12]
 800953a:	edc7 1a02 	vstr	s3, [r7, #8]
 800953e:	ed87 2a01 	vstr	s4, [r7, #4]
 8009542:	edc7 2a00 	vstr	s5, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 8009546:	4b39      	ldr	r3, [pc, #228]	; (800962c <Left_Velo_Control+0x104>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10f      	bne.n	800956e <Left_Velo_Control+0x46>
		e=0;
 800954e:	4b38      	ldr	r3, [pc, #224]	; (8009630 <Left_Velo_Control+0x108>)
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
		ei =0;
 8009556:	4b37      	ldr	r3, [pc, #220]	; (8009634 <Left_Velo_Control+0x10c>)
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
		ed = 0;
 800955e:	4b36      	ldr	r3, [pc, #216]	; (8009638 <Left_Velo_Control+0x110>)
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009566:	4b35      	ldr	r3, [pc, #212]	; (800963c <Left_Velo_Control+0x114>)
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800956e:	4b2f      	ldr	r3, [pc, #188]	; (800962c <Left_Velo_Control+0x104>)
 8009570:	2201      	movs	r2, #1
 8009572:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009574:	ed97 7a05 	vldr	s14, [r7, #20]
 8009578:	edd7 7a04 	vldr	s15, [r7, #16]
 800957c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009580:	4b2b      	ldr	r3, [pc, #172]	; (8009630 <Left_Velo_Control+0x108>)
 8009582:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 8009586:	4b2a      	ldr	r3, [pc, #168]	; (8009630 <Left_Velo_Control+0x108>)
 8009588:	ed93 7a00 	vldr	s14, [r3]
 800958c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009594:	4b27      	ldr	r3, [pc, #156]	; (8009634 <Left_Velo_Control+0x10c>)
 8009596:	edd3 7a00 	vldr	s15, [r3]
 800959a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800959e:	4b25      	ldr	r3, [pc, #148]	; (8009634 <Left_Velo_Control+0x10c>)
 80095a0:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 80095a4:	4b22      	ldr	r3, [pc, #136]	; (8009630 <Left_Velo_Control+0x108>)
 80095a6:	ed93 7a00 	vldr	s14, [r3]
 80095aa:	4b24      	ldr	r3, [pc, #144]	; (800963c <Left_Velo_Control+0x114>)
 80095ac:	edd3 7a00 	vldr	s15, [r3]
 80095b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80095b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80095b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095bc:	4b1e      	ldr	r3, [pc, #120]	; (8009638 <Left_Velo_Control+0x110>)
 80095be:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <Left_Velo_Control+0x108>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a1d      	ldr	r2, [pc, #116]	; (800963c <Left_Velo_Control+0x114>)
 80095c8:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80095ca:	4b19      	ldr	r3, [pc, #100]	; (8009630 <Left_Velo_Control+0x108>)
 80095cc:	ed93 7a00 	vldr	s14, [r3]
 80095d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80095d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095d8:	4b16      	ldr	r3, [pc, #88]	; (8009634 <Left_Velo_Control+0x10c>)
 80095da:	edd3 6a00 	vldr	s13, [r3]
 80095de:	edd7 7a01 	vldr	s15, [r7, #4]
 80095e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <Left_Velo_Control+0x110>)
 80095ec:	edd3 6a00 	vldr	s13, [r3]
 80095f0:	edd7 7a00 	vldr	s15, [r7]
 80095f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095fc:	ee17 0a90 	vmov	r0, s15
 8009600:	f7fe feda 	bl	80083b8 <__aeabi_f2d>
 8009604:	4603      	mov	r3, r0
 8009606:	460c      	mov	r4, r1
 8009608:	ec44 3b10 	vmov	d0, r3, r4
 800960c:	f00c fce8 	bl	8015fe0 <round>
 8009610:	ec54 3b10 	vmov	r3, r4, d0
 8009614:	4618      	mov	r0, r3
 8009616:	4621      	mov	r1, r4
 8009618:	f7ff f9d6 	bl	80089c8 <__aeabi_d2iz>
 800961c:	4603      	mov	r3, r0
 800961e:	b21a      	sxth	r2, r3
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <Left_Velo_Control+0x118>)
 8009622:	801a      	strh	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd90      	pop	{r4, r7, pc}
 800962c:	2000027c 	.word	0x2000027c
 8009630:	200002d0 	.word	0x200002d0
 8009634:	200002d4 	.word	0x200002d4
 8009638:	200002d8 	.word	0x200002d8
 800963c:	200002dc 	.word	0x200002dc
 8009640:	2000e02e 	.word	0x2000e02e

08009644 <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	ed87 0a03 	vstr	s0, [r7, #12]
 800964e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009652:	ed87 1a01 	vstr	s2, [r7, #4]
 8009656:	edc7 1a00 	vstr	s3, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 800965a:	4b53      	ldr	r3, [pc, #332]	; (80097a8 <Enc_Velo_Control+0x164>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10f      	bne.n	8009682 <Enc_Velo_Control+0x3e>
		e=0;
 8009662:	4b52      	ldr	r3, [pc, #328]	; (80097ac <Enc_Velo_Control+0x168>)
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
		ei =0;
 800966a:	4b51      	ldr	r3, [pc, #324]	; (80097b0 <Enc_Velo_Control+0x16c>)
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009672:	4b50      	ldr	r3, [pc, #320]	; (80097b4 <Enc_Velo_Control+0x170>)
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800967a:	4b4f      	ldr	r3, [pc, #316]	; (80097b8 <Enc_Velo_Control+0x174>)
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009682:	4b49      	ldr	r3, [pc, #292]	; (80097a8 <Enc_Velo_Control+0x164>)
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 8009688:	4b4c      	ldr	r3, [pc, #304]	; (80097bc <Enc_Velo_Control+0x178>)
 800968a:	ed93 7a00 	vldr	s14, [r3]
 800968e:	4b4c      	ldr	r3, [pc, #304]	; (80097c0 <Enc_Velo_Control+0x17c>)
 8009690:	edd3 7a00 	vldr	s15, [r3]
 8009694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009698:	4b44      	ldr	r3, [pc, #272]	; (80097ac <Enc_Velo_Control+0x168>)
 800969a:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800969e:	4b43      	ldr	r3, [pc, #268]	; (80097ac <Enc_Velo_Control+0x168>)
 80096a0:	ed93 7a00 	vldr	s14, [r3]
 80096a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80096a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096ac:	4b40      	ldr	r3, [pc, #256]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096ae:	edd3 7a00 	vldr	s15, [r3]
 80096b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b6:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096b8:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 80096bc:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <Enc_Velo_Control+0x168>)
 80096be:	ed93 7a00 	vldr	s14, [r3]
 80096c2:	4b3d      	ldr	r3, [pc, #244]	; (80097b8 <Enc_Velo_Control+0x174>)
 80096c4:	edd3 7a00 	vldr	s15, [r3]
 80096c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80096d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d4:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <Enc_Velo_Control+0x170>)
 80096d6:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80096da:	4b34      	ldr	r3, [pc, #208]	; (80097ac <Enc_Velo_Control+0x168>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a36      	ldr	r2, [pc, #216]	; (80097b8 <Enc_Velo_Control+0x174>)
 80096e0:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80096e2:	4b32      	ldr	r3, [pc, #200]	; (80097ac <Enc_Velo_Control+0x168>)
 80096e4:	ed93 7a00 	vldr	s14, [r3]
 80096e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096f0:	4b2f      	ldr	r3, [pc, #188]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096f2:	edd3 6a00 	vldr	s13, [r3]
 80096f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80096fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009702:	4b2c      	ldr	r3, [pc, #176]	; (80097b4 <Enc_Velo_Control+0x170>)
 8009704:	edd3 6a00 	vldr	s13, [r3]
 8009708:	edd7 7a00 	vldr	s15, [r7]
 800970c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009714:	ee17 0a90 	vmov	r0, s15
 8009718:	f7fe fe4e 	bl	80083b8 <__aeabi_f2d>
 800971c:	4603      	mov	r3, r0
 800971e:	460c      	mov	r4, r1
 8009720:	ec44 3b10 	vmov	d0, r3, r4
 8009724:	f00c fc5c 	bl	8015fe0 <round>
 8009728:	ec54 3b10 	vmov	r3, r4, d0
 800972c:	4618      	mov	r0, r3
 800972e:	4621      	mov	r1, r4
 8009730:	f7ff f94a 	bl	80089c8 <__aeabi_d2iz>
 8009734:	4603      	mov	r3, r0
 8009736:	b21a      	sxth	r2, r3
 8009738:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <Enc_Velo_Control+0x180>)
 800973a:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <Enc_Velo_Control+0x168>)
 800973e:	ed93 7a00 	vldr	s14, [r3]
 8009742:	edd7 7a02 	vldr	s15, [r7, #8]
 8009746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800974a:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <Enc_Velo_Control+0x16c>)
 800974c:	edd3 6a00 	vldr	s13, [r3]
 8009750:	edd7 7a01 	vldr	s15, [r7, #4]
 8009754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800975c:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <Enc_Velo_Control+0x170>)
 800975e:	edd3 6a00 	vldr	s13, [r3]
 8009762:	edd7 7a00 	vldr	s15, [r7]
 8009766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800976a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976e:	ee17 0a90 	vmov	r0, s15
 8009772:	f7fe fe21 	bl	80083b8 <__aeabi_f2d>
 8009776:	4603      	mov	r3, r0
 8009778:	460c      	mov	r4, r1
 800977a:	ec44 3b10 	vmov	d0, r3, r4
 800977e:	f00c fc2f 	bl	8015fe0 <round>
 8009782:	ec54 3b10 	vmov	r3, r4, d0
 8009786:	4618      	mov	r0, r3
 8009788:	4621      	mov	r1, r4
 800978a:	f7ff f91d 	bl	80089c8 <__aeabi_d2iz>
 800978e:	4603      	mov	r3, r0
 8009790:	b21b      	sxth	r3, r3
 8009792:	b29b      	uxth	r3, r3
 8009794:	425b      	negs	r3, r3
 8009796:	b29b      	uxth	r3, r3
 8009798:	b21a      	sxth	r2, r3
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <Enc_Velo_Control+0x184>)
 800979c:	801a      	strh	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000027c 	.word	0x2000027c
 80097ac:	200002e0 	.word	0x200002e0
 80097b0:	200002e4 	.word	0x200002e4
 80097b4:	200002e8 	.word	0x200002e8
 80097b8:	200002ec 	.word	0x200002ec
 80097bc:	2000e028 	.word	0x2000e028
 80097c0:	2000e034 	.word	0x2000e034
 80097c4:	2000e018 	.word	0x2000e018
 80097c8:	2000e00a 	.word	0x2000e00a

080097cc <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80097e0:	2200      	movs	r2, #0
 80097e2:	2104      	movs	r1, #4
 80097e4:	480d      	ldr	r0, [pc, #52]	; (800981c <read_byte+0x50>)
 80097e6:	f009 fa2b 	bl	8012c40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80097ea:	f107 010f 	add.w	r1, r7, #15
 80097ee:	2364      	movs	r3, #100	; 0x64
 80097f0:	2201      	movs	r2, #1
 80097f2:	480b      	ldr	r0, [pc, #44]	; (8009820 <read_byte+0x54>)
 80097f4:	f009 ff04 	bl	8013600 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 80097f8:	f107 010e 	add.w	r1, r7, #14
 80097fc:	2364      	movs	r3, #100	; 0x64
 80097fe:	2201      	movs	r2, #1
 8009800:	4807      	ldr	r0, [pc, #28]	; (8009820 <read_byte+0x54>)
 8009802:	f00a f831 	bl	8013868 <HAL_SPI_Receive>
	CS_SET;
 8009806:	2201      	movs	r2, #1
 8009808:	2104      	movs	r1, #4
 800980a:	4804      	ldr	r0, [pc, #16]	; (800981c <read_byte+0x50>)
 800980c:	f009 fa18 	bl	8012c40 <HAL_GPIO_WritePin>

	return val;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40020c00 	.word	0x40020c00
 8009820:	20019d34 	.word	0x20019d34

08009824 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	460a      	mov	r2, r1
 800982e:	71fb      	strb	r3, [r7, #7]
 8009830:	4613      	mov	r3, r2
 8009832:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983a:	b2db      	uxtb	r3, r3
 800983c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800983e:	2200      	movs	r2, #0
 8009840:	2104      	movs	r1, #4
 8009842:	480c      	ldr	r0, [pc, #48]	; (8009874 <write_byte+0x50>)
 8009844:	f009 f9fc 	bl	8012c40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009848:	f107 010f 	add.w	r1, r7, #15
 800984c:	2364      	movs	r3, #100	; 0x64
 800984e:	2201      	movs	r2, #1
 8009850:	4809      	ldr	r0, [pc, #36]	; (8009878 <write_byte+0x54>)
 8009852:	f009 fed5 	bl	8013600 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8009856:	1db9      	adds	r1, r7, #6
 8009858:	2364      	movs	r3, #100	; 0x64
 800985a:	2201      	movs	r2, #1
 800985c:	4806      	ldr	r0, [pc, #24]	; (8009878 <write_byte+0x54>)
 800985e:	f009 fecf 	bl	8013600 <HAL_SPI_Transmit>
	CS_SET;
 8009862:	2201      	movs	r2, #1
 8009864:	2104      	movs	r1, #4
 8009866:	4803      	ldr	r0, [pc, #12]	; (8009874 <write_byte+0x50>)
 8009868:	f009 f9ea 	bl	8012c40 <HAL_GPIO_WritePin>
}
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40020c00 	.word	0x40020c00
 8009878:	20019d34 	.word	0x20019d34

0800987c <IMU_init>:

uint8_t IMU_init() {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8009882:	2000      	movs	r0, #0
 8009884:	f7ff ffa2 	bl	80097cc <read_byte>
 8009888:	4603      	mov	r3, r0
 800988a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800988c:	79bb      	ldrb	r3, [r7, #6]
 800988e:	2be0      	cmp	r3, #224	; 0xe0
 8009890:	d119      	bne.n	80098c6 <IMU_init+0x4a>
		ret = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8009896:	2101      	movs	r1, #1
 8009898:	2006      	movs	r0, #6
 800989a:	f7ff ffc3 	bl	8009824 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800989e:	2110      	movs	r1, #16
 80098a0:	2003      	movs	r0, #3
 80098a2:	f7ff ffbf 	bl	8009824 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80098a6:	2120      	movs	r1, #32
 80098a8:	207f      	movs	r0, #127	; 0x7f
 80098aa:	f7ff ffbb 	bl	8009824 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 80098ae:	2117      	movs	r1, #23
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7ff ffb7 	bl	8009824 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 80098b6:	2106      	movs	r1, #6
 80098b8:	2014      	movs	r0, #20
 80098ba:	f7ff ffb3 	bl	8009824 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80098be:	2100      	movs	r1, #0
 80098c0:	207f      	movs	r0, #127	; 0x7f
 80098c2:	f7ff ffaf 	bl	8009824 <write_byte>
	}
	return ret;
 80098c6:	79fb      	ldrb	r3, [r7, #7]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <read_gyro_data>:

void read_gyro_data() {
 80098d0:	b598      	push	{r3, r4, r7, lr}
 80098d2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80098d4:	2033      	movs	r0, #51	; 0x33
 80098d6:	f7ff ff79 	bl	80097cc <read_byte>
 80098da:	4603      	mov	r3, r0
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	b21c      	sxth	r4, r3
 80098e0:	2034      	movs	r0, #52	; 0x34
 80098e2:	f7ff ff73 	bl	80097cc <read_byte>
 80098e6:	4603      	mov	r3, r0
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	4323      	orrs	r3, r4
 80098ec:	b21a      	sxth	r2, r3
 80098ee:	4b11      	ldr	r3, [pc, #68]	; (8009934 <read_gyro_data+0x64>)
 80098f0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80098f2:	2035      	movs	r0, #53	; 0x35
 80098f4:	f7ff ff6a 	bl	80097cc <read_byte>
 80098f8:	4603      	mov	r3, r0
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	b21c      	sxth	r4, r3
 80098fe:	2036      	movs	r0, #54	; 0x36
 8009900:	f7ff ff64 	bl	80097cc <read_byte>
 8009904:	4603      	mov	r3, r0
 8009906:	b21b      	sxth	r3, r3
 8009908:	4323      	orrs	r3, r4
 800990a:	b21a      	sxth	r2, r3
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <read_gyro_data+0x68>)
 800990e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009910:	2037      	movs	r0, #55	; 0x37
 8009912:	f7ff ff5b 	bl	80097cc <read_byte>
 8009916:	4603      	mov	r3, r0
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	b21c      	sxth	r4, r3
 800991c:	2038      	movs	r0, #56	; 0x38
 800991e:	f7ff ff55 	bl	80097cc <read_byte>
 8009922:	4603      	mov	r3, r0
 8009924:	b21b      	sxth	r3, r3
 8009926:	4323      	orrs	r3, r4
 8009928:	b21a      	sxth	r2, r3
 800992a:	4b04      	ldr	r3, [pc, #16]	; (800993c <read_gyro_data+0x6c>)
 800992c:	801a      	strh	r2, [r3, #0]
}
 800992e:	bf00      	nop
 8009930:	bd98      	pop	{r3, r4, r7, pc}
 8009932:	bf00      	nop
 8009934:	2000e042 	.word	0x2000e042
 8009938:	2000e040 	.word	0x2000e040
 800993c:	2000e03a 	.word	0x2000e03a

08009940 <read_accel_data>:

void read_accel_data() {
 8009940:	b598      	push	{r3, r4, r7, lr}
 8009942:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8009944:	202d      	movs	r0, #45	; 0x2d
 8009946:	f7ff ff41 	bl	80097cc <read_byte>
 800994a:	4603      	mov	r3, r0
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	b21c      	sxth	r4, r3
 8009950:	202e      	movs	r0, #46	; 0x2e
 8009952:	f7ff ff3b 	bl	80097cc <read_byte>
 8009956:	4603      	mov	r3, r0
 8009958:	b21b      	sxth	r3, r3
 800995a:	4323      	orrs	r3, r4
 800995c:	b21a      	sxth	r2, r3
 800995e:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <read_accel_data+0x64>)
 8009960:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8009962:	202f      	movs	r0, #47	; 0x2f
 8009964:	f7ff ff32 	bl	80097cc <read_byte>
 8009968:	4603      	mov	r3, r0
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	b21c      	sxth	r4, r3
 800996e:	2030      	movs	r0, #48	; 0x30
 8009970:	f7ff ff2c 	bl	80097cc <read_byte>
 8009974:	4603      	mov	r3, r0
 8009976:	b21b      	sxth	r3, r3
 8009978:	4323      	orrs	r3, r4
 800997a:	b21a      	sxth	r2, r3
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <read_accel_data+0x68>)
 800997e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8009980:	2031      	movs	r0, #49	; 0x31
 8009982:	f7ff ff23 	bl	80097cc <read_byte>
 8009986:	4603      	mov	r3, r0
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	b21c      	sxth	r4, r3
 800998c:	2032      	movs	r0, #50	; 0x32
 800998e:	f7ff ff1d 	bl	80097cc <read_byte>
 8009992:	4603      	mov	r3, r0
 8009994:	b21b      	sxth	r3, r3
 8009996:	4323      	orrs	r3, r4
 8009998:	b21a      	sxth	r2, r3
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <read_accel_data+0x6c>)
 800999c:	801a      	strh	r2, [r3, #0]
}
 800999e:	bf00      	nop
 80099a0:	bd98      	pop	{r3, r4, r7, pc}
 80099a2:	bf00      	nop
 80099a4:	2000e03e 	.word	0x2000e03e
 80099a8:	2000e044 	.word	0x2000e044
 80099ac:	2000e03c 	.word	0x2000e03c

080099b0 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80099b8:	1d39      	adds	r1, r7, #4
 80099ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099be:	2201      	movs	r2, #1
 80099c0:	4803      	ldr	r0, [pc, #12]	; (80099d0 <__io_putchar+0x20>)
 80099c2:	f00b fead 	bl	8015720 <HAL_UART_Transmit>
	return ch;
 80099c6:	687b      	ldr	r3, [r7, #4]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20019ddc 	.word	0x20019ddc

080099d4 <Motor_Count_Clear>:
	*R_counter = round(567 * R_Volt);
	*L_counter = round(567 * L_Volt);

}

void Motor_Count_Clear(){
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 80099d8:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <Motor_Count_Clear+0xbc>)
 80099da:	2200      	movs	r2, #0
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <Motor_Count_Clear+0xbc>)
 80099e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e4:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <Motor_Count_Clear+0xc0>)
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	4b2a      	ldr	r3, [pc, #168]	; (8009a94 <Motor_Count_Clear+0xc0>)
 80099ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <Motor_Count_Clear+0xc4>)
 80099f0:	801a      	strh	r2, [r3, #0]
 80099f2:	4b29      	ldr	r3, [pc, #164]	; (8009a98 <Motor_Count_Clear+0xc4>)
 80099f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099f8:	4b28      	ldr	r3, [pc, #160]	; (8009a9c <Motor_Count_Clear+0xc8>)
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	4b27      	ldr	r3, [pc, #156]	; (8009a9c <Motor_Count_Clear+0xc8>)
 80099fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a02:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <Motor_Count_Clear+0xcc>)
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	4b26      	ldr	r3, [pc, #152]	; (8009aa0 <Motor_Count_Clear+0xcc>)
 8009a08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a0c:	4b25      	ldr	r3, [pc, #148]	; (8009aa4 <Motor_Count_Clear+0xd0>)
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <Motor_Count_Clear+0xd0>)
 8009a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a16:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <Motor_Count_Clear+0xd4>)
 8009a18:	801a      	strh	r2, [r3, #0]
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <Motor_Count_Clear+0xd4>)
 8009a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a20:	4b22      	ldr	r3, [pc, #136]	; (8009aac <Motor_Count_Clear+0xd8>)
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	4b21      	ldr	r3, [pc, #132]	; (8009aac <Motor_Count_Clear+0xd8>)
 8009a26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a2a:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <Motor_Count_Clear+0xdc>)
 8009a2c:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 8009a2e:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <Motor_Count_Clear+0xe0>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	4b1f      	ldr	r3, [pc, #124]	; (8009ab4 <Motor_Count_Clear+0xe0>)
 8009a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <Motor_Count_Clear+0xe4>)
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	4b1e      	ldr	r3, [pc, #120]	; (8009ab8 <Motor_Count_Clear+0xe4>)
 8009a40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a44:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <Motor_Count_Clear+0xe8>)
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <Motor_Count_Clear+0xe8>)
 8009a4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <Motor_Count_Clear+0xec>)
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <Motor_Count_Clear+0xec>)
 8009a54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a58:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <Motor_Count_Clear+0xf0>)
 8009a5a:	801a      	strh	r2, [r3, #0]
 8009a5c:	4b19      	ldr	r3, [pc, #100]	; (8009ac4 <Motor_Count_Clear+0xf0>)
 8009a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a62:	4b19      	ldr	r3, [pc, #100]	; (8009ac8 <Motor_Count_Clear+0xf4>)
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <Motor_Count_Clear+0xf4>)
 8009a68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a6c:	4b17      	ldr	r3, [pc, #92]	; (8009acc <Motor_Count_Clear+0xf8>)
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	4b16      	ldr	r3, [pc, #88]	; (8009acc <Motor_Count_Clear+0xf8>)
 8009a72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <Motor_Count_Clear+0xfc>)
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <Motor_Count_Clear+0xfc>)
 8009a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <Motor_Count_Clear+0x100>)
 8009a82:	801a      	strh	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	2000e02e 	.word	0x2000e02e
 8009a94:	2000e00a 	.word	0x2000e00a
 8009a98:	2000e01e 	.word	0x2000e01e
 8009a9c:	2000e024 	.word	0x2000e024
 8009aa0:	2000e008 	.word	0x2000e008
 8009aa4:	2000e016 	.word	0x2000e016
 8009aa8:	2000e02c 	.word	0x2000e02c
 8009aac:	2000e014 	.word	0x2000e014
 8009ab0:	2001a734 	.word	0x2001a734
 8009ab4:	2000e00c 	.word	0x2000e00c
 8009ab8:	2000e018 	.word	0x2000e018
 8009abc:	2000e022 	.word	0x2000e022
 8009ac0:	2000e026 	.word	0x2000e026
 8009ac4:	2000e020 	.word	0x2000e020
 8009ac8:	2000e038 	.word	0x2000e038
 8009acc:	2000e01a 	.word	0x2000e01a
 8009ad0:	2000e01c 	.word	0x2000e01c
 8009ad4:	20019ca4 	.word	0x20019ca4

08009ad8 <Tim_Count>:

void Tim_Count(){
 8009ad8:	b598      	push	{r3, r4, r7, lr}
 8009ada:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009adc:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <Tim_Count+0x6c>)
 8009ade:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	bfb8      	it	lt
 8009aea:	425b      	neglt	r3, r3
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d025      	beq.n	8009b3e <Tim_Count+0x66>
		timer += 1;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <Tim_Count+0x70>)
 8009af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <Tim_Count+0x74>)
 8009afe:	f7fe fafd 	bl	80080fc <__adddf3>
 8009b02:	4603      	mov	r3, r0
 8009b04:	460c      	mov	r4, r1
 8009b06:	4a10      	ldr	r2, [pc, #64]	; (8009b48 <Tim_Count+0x70>)
 8009b08:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <Tim_Count+0x70>)
 8009b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <Tim_Count+0x78>)
 8009b18:	f7fe ff0e 	bl	8008938 <__aeabi_dcmpeq>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d100      	bne.n	8009b24 <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009b22:	e00c      	b.n	8009b3e <Tim_Count+0x66>
			self_timer ++;
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <Tim_Count+0x7c>)
 8009b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <Tim_Count+0x74>)
 8009b30:	f7fe fae4 	bl	80080fc <__adddf3>
 8009b34:	4603      	mov	r3, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4a06      	ldr	r2, [pc, #24]	; (8009b54 <Tim_Count+0x7c>)
 8009b3a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009b3e:	bf00      	nop
 8009b40:	bd98      	pop	{r3, r4, r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000074 	.word	0x20000074
 8009b48:	20000320 	.word	0x20000320
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	408f4000 	.word	0x408f4000
 8009b54:	20000318 	.word	0x20000318

08009b58 <map_init>:

void map_init(){
 8009b58:	b4b0      	push	{r4, r5, r7}
 8009b5a:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b5c:	4b35      	ldr	r3, [pc, #212]	; (8009c34 <map_init+0xdc>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e05e      	b.n	8009c22 <map_init+0xca>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009b64:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <map_init+0xe0>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e051      	b.n	8009c10 <map_init+0xb8>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009b6c:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <map_init+0xdc>)
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	4b31      	ldr	r3, [pc, #196]	; (8009c38 <map_init+0xe0>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4c31      	ldr	r4, [pc, #196]	; (8009c3c <map_init+0xe4>)
 8009b76:	008b      	lsls	r3, r1, #2
 8009b78:	1898      	adds	r0, r3, r2
 8009b7a:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009b7e:	2502      	movs	r5, #2
 8009b80:	f365 1387 	bfi	r3, r5, #6, #2
 8009b84:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			= wall[i][j].south
 8009b88:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <map_init+0xdc>)
 8009b8a:	681c      	ldr	r4, [r3, #0]
 8009b8c:	4b2a      	ldr	r3, [pc, #168]	; (8009c38 <map_init+0xe0>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009b90:	4d2a      	ldr	r5, [pc, #168]	; (8009c3c <map_init+0xe4>)
 8009b92:	008b      	lsls	r3, r1, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009b9a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009b9e:	b2dd      	uxtb	r5, r3
 8009ba0:	4926      	ldr	r1, [pc, #152]	; (8009c3c <map_init+0xe4>)
 8009ba2:	00a3      	lsls	r3, r4, #2
 8009ba4:	181a      	adds	r2, r3, r0
 8009ba6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009baa:	f365 1305 	bfi	r3, r5, #4, #2
 8009bae:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			= wall[i][j].east
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <map_init+0xdc>)
 8009bb4:	6819      	ldr	r1, [r3, #0]
 8009bb6:	4b20      	ldr	r3, [pc, #128]	; (8009c38 <map_init+0xe0>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
			= wall[i][j].south
 8009bba:	4d20      	ldr	r5, [pc, #128]	; (8009c3c <map_init+0xe4>)
 8009bbc:	00a3      	lsls	r3, r4, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009bc4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009bc8:	b2dd      	uxtb	r5, r3
 8009bca:	4c1c      	ldr	r4, [pc, #112]	; (8009c3c <map_init+0xe4>)
 8009bcc:	008b      	lsls	r3, r1, #2
 8009bce:	1898      	adds	r0, r3, r2
 8009bd0:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009bd4:	f365 0383 	bfi	r3, r5, #2, #2
 8009bd8:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			wall[i][j].north
 8009bdc:	4b15      	ldr	r3, [pc, #84]	; (8009c34 <map_init+0xdc>)
 8009bde:	681c      	ldr	r4, [r3, #0]
 8009be0:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <map_init+0xe0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
			= wall[i][j].east
 8009be4:	4815      	ldr	r0, [pc, #84]	; (8009c3c <map_init+0xe4>)
 8009be6:	0089      	lsls	r1, r1, #2
 8009be8:	440a      	add	r2, r1
 8009bea:	f810 2012 	ldrb.w	r2, [r0, r2, lsl #1]
 8009bee:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009bf2:	b2d0      	uxtb	r0, r2
 8009bf4:	4911      	ldr	r1, [pc, #68]	; (8009c3c <map_init+0xe4>)
 8009bf6:	00a2      	lsls	r2, r4, #2
 8009bf8:	441a      	add	r2, r3
 8009bfa:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009bfe:	f360 0301 	bfi	r3, r0, #0, #2
 8009c02:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <map_init+0xe0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <map_init+0xe0>)
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <map_init+0xe0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	dda9      	ble.n	8009b6c <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <map_init+0xdc>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <map_init+0xdc>)
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <map_init+0xdc>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	dd9c      	ble.n	8009b64 <map_init+0xc>

		}

	}
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bcb0      	pop	{r4, r5, r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000df90 	.word	0x2000df90
 8009c38:	2000df94 	.word	0x2000df94
 8009c3c:	2001a6d4 	.word	0x2001a6d4

08009c40 <mapcopy>:

void mapcopy(){
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c44:	4b4b      	ldr	r3, [pc, #300]	; (8009d74 <mapcopy+0x134>)
 8009c46:	2203      	movs	r2, #3
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e05d      	b.n	8009d08 <mapcopy+0xc8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c4c:	4b4a      	ldr	r3, [pc, #296]	; (8009d78 <mapcopy+0x138>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e050      	b.n	8009cf6 <mapcopy+0xb6>
			work_ram[k] = wall[i][j].north;
 8009c54:	4b48      	ldr	r3, [pc, #288]	; (8009d78 <mapcopy+0x138>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4b46      	ldr	r3, [pc, #280]	; (8009d74 <mapcopy+0x134>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4947      	ldr	r1, [pc, #284]	; (8009d7c <mapcopy+0x13c>)
 8009c5e:	0092      	lsls	r2, r2, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	4b44      	ldr	r3, [pc, #272]	; (8009d80 <mapcopy+0x140>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4a44      	ldr	r2, [pc, #272]	; (8009d84 <mapcopy+0x144>)
 8009c74:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009c76:	4b40      	ldr	r3, [pc, #256]	; (8009d78 <mapcopy+0x138>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	4b3e      	ldr	r3, [pc, #248]	; (8009d74 <mapcopy+0x134>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	493f      	ldr	r1, [pc, #252]	; (8009d7c <mapcopy+0x13c>)
 8009c80:	0092      	lsls	r2, r2, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	4b3c      	ldr	r3, [pc, #240]	; (8009d80 <mapcopy+0x140>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4611      	mov	r1, r2
 8009c96:	4a3b      	ldr	r2, [pc, #236]	; (8009d84 <mapcopy+0x144>)
 8009c98:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009c9a:	4b37      	ldr	r3, [pc, #220]	; (8009d78 <mapcopy+0x138>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	4b35      	ldr	r3, [pc, #212]	; (8009d74 <mapcopy+0x134>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4936      	ldr	r1, [pc, #216]	; (8009d7c <mapcopy+0x13c>)
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009cac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	4b33      	ldr	r3, [pc, #204]	; (8009d80 <mapcopy+0x140>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3302      	adds	r3, #2
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4a32      	ldr	r2, [pc, #200]	; (8009d84 <mapcopy+0x144>)
 8009cbc:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009cbe:	4b2e      	ldr	r3, [pc, #184]	; (8009d78 <mapcopy+0x138>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	; (8009d74 <mapcopy+0x134>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	492d      	ldr	r1, [pc, #180]	; (8009d7c <mapcopy+0x13c>)
 8009cc8:	0092      	lsls	r2, r2, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009cd0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <mapcopy+0x140>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3303      	adds	r3, #3
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4a29      	ldr	r2, [pc, #164]	; (8009d84 <mapcopy+0x144>)
 8009ce0:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009ce2:	4b27      	ldr	r3, [pc, #156]	; (8009d80 <mapcopy+0x140>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4a25      	ldr	r2, [pc, #148]	; (8009d80 <mapcopy+0x140>)
 8009cea:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cec:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <mapcopy+0x138>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	4a21      	ldr	r2, [pc, #132]	; (8009d78 <mapcopy+0x138>)
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <mapcopy+0x138>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	ddaa      	ble.n	8009c54 <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <mapcopy+0x134>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <mapcopy+0x134>)
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	4b1a      	ldr	r3, [pc, #104]	; (8009d74 <mapcopy+0x134>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da9d      	bge.n	8009c4c <mapcopy+0xc>
		//要�?は4*NOS*NOS番目 - 1 まで�?ま�?
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d10:	4b18      	ldr	r3, [pc, #96]	; (8009d74 <mapcopy+0x134>)
 8009d12:	2203      	movs	r2, #3
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	e023      	b.n	8009d60 <mapcopy+0x120>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d18:	4b17      	ldr	r3, [pc, #92]	; (8009d78 <mapcopy+0x138>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e016      	b.n	8009d4e <mapcopy+0x10e>
			work_ram[k] = walk_map[i][j];
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <mapcopy+0x138>)
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <mapcopy+0x134>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <mapcopy+0x140>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4816      	ldr	r0, [pc, #88]	; (8009d88 <mapcopy+0x148>)
 8009d2e:	0089      	lsls	r1, r1, #2
 8009d30:	4401      	add	r1, r0
 8009d32:	440a      	add	r2, r1
 8009d34:	7811      	ldrb	r1, [r2, #0]
 8009d36:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <mapcopy+0x144>)
 8009d38:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <mapcopy+0x140>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <mapcopy+0x140>)
 8009d42:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <mapcopy+0x138>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a0b      	ldr	r2, [pc, #44]	; (8009d78 <mapcopy+0x138>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <mapcopy+0x138>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	dde4      	ble.n	8009d20 <mapcopy+0xe0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d56:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <mapcopy+0x134>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4a05      	ldr	r2, [pc, #20]	; (8009d74 <mapcopy+0x134>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <mapcopy+0x134>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dad7      	bge.n	8009d18 <mapcopy+0xd8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009d68:	bf00      	nop
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	2000df98 	.word	0x2000df98
 8009d78:	2000df9c 	.word	0x2000df9c
 8009d7c:	2001a6d4 	.word	0x2001a6d4
 8009d80:	2000dfa0 	.word	0x2000dfa0
 8009d84:	20009f90 	.word	0x20009f90
 8009d88:	2001a268 	.word	0x2001a268

08009d8c <mapprint>:

void mapprint(){
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路�?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d90:	4b3f      	ldr	r3, [pc, #252]	; (8009e90 <mapprint+0x104>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e041      	b.n	8009e1c <mapprint+0x90>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d98:	4b3e      	ldr	r3, [pc, #248]	; (8009e94 <mapprint+0x108>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e031      	b.n	8009e04 <mapprint+0x78>
			printf("%u",work_ram[k]);
 8009da0:	4b3d      	ldr	r3, [pc, #244]	; (8009e98 <mapprint+0x10c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a3d      	ldr	r2, [pc, #244]	; (8009e9c <mapprint+0x110>)
 8009da6:	5cd3      	ldrb	r3, [r2, r3]
 8009da8:	4619      	mov	r1, r3
 8009daa:	483d      	ldr	r0, [pc, #244]	; (8009ea0 <mapprint+0x114>)
 8009dac:	f00c fdfc 	bl	80169a8 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009db0:	4b39      	ldr	r3, [pc, #228]	; (8009e98 <mapprint+0x10c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00e      	beq.n	8009ddc <mapprint+0x50>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009dbe:	4b36      	ldr	r3, [pc, #216]	; (8009e98 <mapprint+0x10c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	dd09      	ble.n	8009ddc <mapprint+0x50>
 8009dc8:	4b33      	ldr	r3, [pc, #204]	; (8009e98 <mapprint+0x10c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <mapprint+0x50>
				printf("  ");
 8009dd6:	4833      	ldr	r0, [pc, #204]	; (8009ea4 <mapprint+0x118>)
 8009dd8:	f00c fde6 	bl	80169a8 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009ddc:	4b2e      	ldr	r3, [pc, #184]	; (8009e98 <mapprint+0x10c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <mapprint+0x64>
				printf("\r\n");
 8009dea:	482f      	ldr	r0, [pc, #188]	; (8009ea8 <mapprint+0x11c>)
 8009dec:	f00c fe50 	bl	8016a90 <puts>
			}
			k++;
 8009df0:	4b29      	ldr	r3, [pc, #164]	; (8009e98 <mapprint+0x10c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <mapprint+0x10c>)
 8009df8:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009dfa:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <mapprint+0x108>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	4a24      	ldr	r2, [pc, #144]	; (8009e94 <mapprint+0x108>)
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	4b23      	ldr	r3, [pc, #140]	; (8009e94 <mapprint+0x108>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	ddc9      	ble.n	8009da0 <mapprint+0x14>
		}
		printf("\r\n");
 8009e0c:	4826      	ldr	r0, [pc, #152]	; (8009ea8 <mapprint+0x11c>)
 8009e0e:	f00c fe3f 	bl	8016a90 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e12:	4b1f      	ldr	r3, [pc, #124]	; (8009e90 <mapprint+0x104>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	4a1d      	ldr	r2, [pc, #116]	; (8009e90 <mapprint+0x104>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <mapprint+0x104>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	ddb9      	ble.n	8009d98 <mapprint+0xc>
	}

	printf("\r\n");
 8009e24:	4820      	ldr	r0, [pc, #128]	; (8009ea8 <mapprint+0x11c>)
 8009e26:	f00c fe33 	bl	8016a90 <puts>
	printf("\r\n");
 8009e2a:	481f      	ldr	r0, [pc, #124]	; (8009ea8 <mapprint+0x11c>)
 8009e2c:	f00c fe30 	bl	8016a90 <puts>


	//歩数マッ�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e30:	4b17      	ldr	r3, [pc, #92]	; (8009e90 <mapprint+0x104>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e024      	b.n	8009e82 <mapprint+0xf6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009e38:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <mapprint+0x108>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e011      	b.n	8009e64 <mapprint+0xd8>
			printf("%u  ",work_ram[k]);
 8009e40:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <mapprint+0x10c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a15      	ldr	r2, [pc, #84]	; (8009e9c <mapprint+0x110>)
 8009e46:	5cd3      	ldrb	r3, [r2, r3]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4818      	ldr	r0, [pc, #96]	; (8009eac <mapprint+0x120>)
 8009e4c:	f00c fdac 	bl	80169a8 <iprintf>
			k++;
 8009e50:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <mapprint+0x10c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a10      	ldr	r2, [pc, #64]	; (8009e98 <mapprint+0x10c>)
 8009e58:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	; (8009e94 <mapprint+0x108>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	4a0c      	ldr	r2, [pc, #48]	; (8009e94 <mapprint+0x108>)
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <mapprint+0x108>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	dde9      	ble.n	8009e40 <mapprint+0xb4>
		}
		printf("\r\n");
 8009e6c:	480e      	ldr	r0, [pc, #56]	; (8009ea8 <mapprint+0x11c>)
 8009e6e:	f00c fe0f 	bl	8016a90 <puts>
		printf("\r\n");
 8009e72:	480d      	ldr	r0, [pc, #52]	; (8009ea8 <mapprint+0x11c>)
 8009e74:	f00c fe0c 	bl	8016a90 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <mapprint+0x104>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <mapprint+0x104>)
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	4b03      	ldr	r3, [pc, #12]	; (8009e90 <mapprint+0x104>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	ddd6      	ble.n	8009e38 <mapprint+0xac>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000dfa4 	.word	0x2000dfa4
 8009e94:	2000dfa8 	.word	0x2000dfa8
 8009e98:	2000dfac 	.word	0x2000dfac
 8009e9c:	20009f90 	.word	0x20009f90
 8009ea0:	08018808 	.word	0x08018808
 8009ea4:	0801880c 	.word	0x0801880c
 8009ea8:	08018810 	.word	0x08018810
 8009eac:	08018814 	.word	0x08018814

08009eb0 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009eb6:	f008 fa8f 	bl	80123d8 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009eca:	1d3a      	adds	r2, r7, #4
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f008 fbe0 	bl	8012698 <HAL_FLASHEx_Erase>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009edc:	f008 fa9e 	bl	801241c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009ee0:	7ffb      	ldrb	r3, [r7, #31]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <Flash_clear+0x42>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d101      	bne.n	8009ef2 <Flash_clear+0x42>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <Flash_clear+0x44>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	b2db      	uxtb	r3, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009f08:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <Flash_load+0x1c>)
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <Flash_load+0x20>)
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f14:	461a      	mov	r2, r3
 8009f16:	f00c f8d7 	bl	80160c8 <memcpy>
    return work_ram;
 8009f1a:	4b01      	ldr	r3, [pc, #4]	; (8009f20 <Flash_load+0x1c>)
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20009f90 	.word	0x20009f90
 8009f24:	08004000 	.word	0x08004000

08009f28 <Flash_store>:

// Flashのsector1を消去後�???��?��タを書き込
bool Flash_store()
{
 8009f28:	b590      	push	{r4, r7, lr}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009f2e:	f7ff ffbf 	bl	8009eb0 <Flash_clear>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f083 0301 	eor.w	r3, r3, #1
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <Flash_store+0x1a>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e02f      	b.n	8009fa2 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <Flash_store+0x84>)
 8009f44:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009f46:	f008 fa47 	bl	80123d8 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f4e:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009f50:	2300      	movs	r3, #0
 8009f52:	60bb      	str	r3, [r7, #8]
 8009f54:	e017      	b.n	8009f86 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009f5c:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4413      	add	r3, r2
 8009f66:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009f68:	f04f 0400 	mov.w	r4, #0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4623      	mov	r3, r4
 8009f70:	2002      	movs	r0, #2
 8009f72:	f008 f929 	bl	80121c8 <HAL_FLASH_Program>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d3e3      	bcc.n	8009f56 <Flash_store+0x2e>
 8009f8e:	e000      	b.n	8009f92 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009f90:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009f92:	f008 fa43 	bl	801241c <HAL_FLASH_Lock>

    return result == HAL_OK;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bf0c      	ite	eq
 8009f9c:	2301      	moveq	r3, #1
 8009f9e:	2300      	movne	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd90      	pop	{r4, r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20009f90 	.word	0x20009f90
 8009fb0:	08004000 	.word	0x08004000

08009fb4 <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4804      	ldr	r0, [pc, #16]	; (8009fcc <Emitter_ON+0x18>)
 8009fbc:	f00a f8c0 	bl	8014140 <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4802      	ldr	r0, [pc, #8]	; (8009fcc <Emitter_ON+0x18>)
 8009fc4:	f00b f98d 	bl	80152e2 <HAL_TIMEx_OCN_Start_IT>
#endif
}
 8009fc8:	bf00      	nop
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	2000e050 	.word	0x2000e050

08009fd0 <Emitter_OFF>:
void Emitter_OFF(){
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4804      	ldr	r0, [pc, #16]	; (8009fe8 <Emitter_OFF+0x18>)
 8009fd8:	f00a f936 	bl	8014248 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <Emitter_OFF+0x18>)
 8009fe0:	f00b f9d4 	bl	801538c <HAL_TIMEx_OCN_Stop_IT>
#endif
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	2000e050 	.word	0x2000e050

08009fec <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	490a      	ldr	r1, [pc, #40]	; (800a01c <ADC_Start+0x30>)
 8009ff4:	480a      	ldr	r0, [pc, #40]	; (800a020 <ADC_Start+0x34>)
 8009ff6:	f006 fff3 	bl	8010fe0 <HAL_ADC_Start_DMA>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <ADC_Start+0x18>
  		        Error_Handler();
 800a000:	f006 f8c4 	bl	801018c <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 800a004:	2202      	movs	r2, #2
 800a006:	4907      	ldr	r1, [pc, #28]	; (800a024 <ADC_Start+0x38>)
 800a008:	4807      	ldr	r0, [pc, #28]	; (800a028 <ADC_Start+0x3c>)
 800a00a:	f006 ffe9 	bl	8010fe0 <HAL_ADC_Start_DMA>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <ADC_Start+0x2c>
  		    	Error_Handler();
 800a014:	f006 f8ba 	bl	801018c <Error_Handler>
 }
#endif
}
 800a018:	bf00      	nop
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20009f78 	.word	0x20009f78
 800a020:	20019d90 	.word	0x20019d90
 800a024:	20009f80 	.word	0x20009f80
 800a028:	2000e0d4 	.word	0x2000e0d4

0800a02c <ADC_Stop>:
void ADC_Stop(){
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 800a030:	4808      	ldr	r0, [pc, #32]	; (800a054 <ADC_Stop+0x28>)
 800a032:	f007 f8c7 	bl	80111c4 <HAL_ADC_Stop_DMA>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <ADC_Stop+0x14>
  		        Error_Handler();
 800a03c:	f006 f8a6 	bl	801018c <Error_Handler>
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 800a040:	4805      	ldr	r0, [pc, #20]	; (800a058 <ADC_Stop+0x2c>)
 800a042:	f007 f8bf 	bl	80111c4 <HAL_ADC_Stop_DMA>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <ADC_Stop+0x24>
  		    	Error_Handler();
 800a04c:	f006 f89e 	bl	801018c <Error_Handler>
            }
#endif
}
 800a050:	bf00      	nop
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20019d90 	.word	0x20019d90
 800a058:	2000e0d4 	.word	0x2000e0d4

0800a05c <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800a060:	213c      	movs	r1, #60	; 0x3c
 800a062:	4804      	ldr	r0, [pc, #16]	; (800a074 <Encoder_Start+0x18>)
 800a064:	f00a fae8 	bl	8014638 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a068:	213c      	movs	r1, #60	; 0x3c
 800a06a:	4803      	ldr	r0, [pc, #12]	; (800a078 <Encoder_Start+0x1c>)
 800a06c:	f00a fae4 	bl	8014638 <HAL_TIM_Encoder_Start>
}
 800a070:	bf00      	nop
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20019cf0 	.word	0x20019cf0
 800a078:	2000e094 	.word	0x2000e094

0800a07c <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a080:	210c      	movs	r1, #12
 800a082:	4809      	ldr	r0, [pc, #36]	; (800a0a8 <Motor_PWM_Start+0x2c>)
 800a084:	f00a f9b0 	bl	80143e8 <HAL_TIM_PWM_Start>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 800a08e:	f006 f87d 	bl	801018c <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a092:	2104      	movs	r1, #4
 800a094:	4805      	ldr	r0, [pc, #20]	; (800a0ac <Motor_PWM_Start+0x30>)
 800a096:	f00a f9a7 	bl	80143e8 <HAL_TIM_PWM_Start>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 800a0a0:	f006 f874 	bl	801018c <Error_Handler>
	 	    	        }


#endif
}
 800a0a4:	bf00      	nop
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	2001a6f4 	.word	0x2001a6f4
 800a0ac:	20019cac 	.word	0x20019cac

0800a0b0 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a0b4:	210c      	movs	r1, #12
 800a0b6:	4809      	ldr	r0, [pc, #36]	; (800a0dc <Motor_PWM_Stop+0x2c>)
 800a0b8:	f00a f9d4 	bl	8014464 <HAL_TIM_PWM_Stop>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 800a0c2:	f006 f863 	bl	801018c <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <Motor_PWM_Stop+0x30>)
 800a0ca:	f00a f9cb 	bl	8014464 <HAL_TIM_PWM_Stop>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800a0d4:	f006 f85a 	bl	801018c <Error_Handler>
	 }

#endif
}
 800a0d8:	bf00      	nop
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	2001a6f4 	.word	0x2001a6f4
 800a0e0:	20019cac 	.word	0x20019cac

0800a0e4 <Init>:
void PWM_Log(){
//左右のモータのカウント値を配列に格納


}
void Init() { // 諸
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a0e8:	f7ff ff64 	bl	8009fb4 <Emitter_ON>
	ADC_Start();
 800a0ec:	f7ff ff7e 	bl	8009fec <ADC_Start>
	IMU_init();
 800a0f0:	f7ff fbc4 	bl	800987c <IMU_init>
	Motor_PWM_Start();
 800a0f4:	f7ff ffc2 	bl	800a07c <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	0000      	movs	r0, r0
	...

0800a100 <IMU_Get_Data>:
/*---- DEFINING FUNCTION ----*/



/*---- DEFINING FUNCTION ----*/
double IMU_Get_Data(){// IMUの値を取
 800a100:	b5b0      	push	{r4, r5, r7, lr}
 800a102:	af00      	add	r7, sp, #0
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;

    read_gyro_data();
 800a104:	f7ff fbe4 	bl	80098d0 <read_gyro_data>
    read_accel_data();
 800a108:	f7ff fc1a 	bl	8009940 <read_accel_data>

    //atan2(za,xa);
	imu_accel =  ( ( (double)zg - offset/*2.0*/ )/16.4) * PI /180;
 800a10c:	4b56      	ldr	r3, [pc, #344]	; (800a268 <IMU_Get_Data+0x168>)
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b21b      	sxth	r3, r3
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe f93e 	bl	8008394 <__aeabi_i2d>
 800a118:	4b54      	ldr	r3, [pc, #336]	; (800a26c <IMU_Get_Data+0x16c>)
 800a11a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a11e:	461a      	mov	r2, r3
 800a120:	4623      	mov	r3, r4
 800a122:	f7fd ffe9 	bl	80080f8 <__aeabi_dsub>
 800a126:	4603      	mov	r3, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	4618      	mov	r0, r3
 800a12c:	4621      	mov	r1, r4
 800a12e:	a348      	add	r3, pc, #288	; (adr r3, 800a250 <IMU_Get_Data+0x150>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f7fe fac2 	bl	80086bc <__aeabi_ddiv>
 800a138:	4603      	mov	r3, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	4618      	mov	r0, r3
 800a13e:	4621      	mov	r1, r4
 800a140:	a345      	add	r3, pc, #276	; (adr r3, 800a258 <IMU_Get_Data+0x158>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7fe f98f 	bl	8008468 <__aeabi_dmul>
 800a14a:	4603      	mov	r3, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	4618      	mov	r0, r3
 800a150:	4621      	mov	r1, r4
 800a152:	f04f 0200 	mov.w	r2, #0
 800a156:	4b46      	ldr	r3, [pc, #280]	; (800a270 <IMU_Get_Data+0x170>)
 800a158:	f7fe fab0 	bl	80086bc <__aeabi_ddiv>
 800a15c:	4603      	mov	r3, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	4a44      	ldr	r2, [pc, #272]	; (800a274 <IMU_Get_Data+0x174>)
 800a162:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle += (imu_pre_accel + imu_accel) * T1 / 2;
 800a166:	4b44      	ldr	r3, [pc, #272]	; (800a278 <IMU_Get_Data+0x178>)
 800a168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a16c:	4b41      	ldr	r3, [pc, #260]	; (800a274 <IMU_Get_Data+0x174>)
 800a16e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a172:	461a      	mov	r2, r3
 800a174:	4623      	mov	r3, r4
 800a176:	f7fd ffc1 	bl	80080fc <__adddf3>
 800a17a:	4603      	mov	r3, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	4618      	mov	r0, r3
 800a180:	4621      	mov	r1, r4
 800a182:	a337      	add	r3, pc, #220	; (adr r3, 800a260 <IMU_Get_Data+0x160>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7fe f96e 	bl	8008468 <__aeabi_dmul>
 800a18c:	4603      	mov	r3, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	4618      	mov	r0, r3
 800a192:	4621      	mov	r1, r4
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a19c:	f7fe fa8e 	bl	80086bc <__aeabi_ddiv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4b34      	ldr	r3, [pc, #208]	; (800a27c <IMU_Get_Data+0x17c>)
 800a1aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	f7fd ffa3 	bl	80080fc <__adddf3>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	4a30      	ldr	r2, [pc, #192]	; (800a27c <IMU_Get_Data+0x17c>)
 800a1bc:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle -= drift_fix * PI /180;
 800a1c0:	4b2e      	ldr	r3, [pc, #184]	; (800a27c <IMU_Get_Data+0x17c>)
 800a1c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a1c6:	4b2e      	ldr	r3, [pc, #184]	; (800a280 <IMU_Get_Data+0x180>)
 800a1c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1cc:	a322      	add	r3, pc, #136	; (adr r3, 800a258 <IMU_Get_Data+0x158>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7fe f949 	bl	8008468 <__aeabi_dmul>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4610      	mov	r0, r2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	f04f 0200 	mov.w	r2, #0
 800a1e2:	4b23      	ldr	r3, [pc, #140]	; (800a270 <IMU_Get_Data+0x170>)
 800a1e4:	f7fe fa6a 	bl	80086bc <__aeabi_ddiv>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7fd ff82 	bl	80080f8 <__aeabi_dsub>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4a20      	ldr	r2, [pc, #128]	; (800a27c <IMU_Get_Data+0x17c>)
 800a1fa:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 800a1fe:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <IMU_Get_Data+0x174>)
 800a200:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a204:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <IMU_Get_Data+0x178>)
 800a206:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a20a:	4b1c      	ldr	r3, [pc, #112]	; (800a27c <IMU_Get_Data+0x17c>)
 800a20c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a210:	f04f 0200 	mov.w	r2, #0
 800a214:	4b16      	ldr	r3, [pc, #88]	; (800a270 <IMU_Get_Data+0x170>)
 800a216:	f7fe f927 	bl	8008468 <__aeabi_dmul>
 800a21a:	4603      	mov	r3, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	4618      	mov	r0, r3
 800a220:	4621      	mov	r1, r4
 800a222:	a30d      	add	r3, pc, #52	; (adr r3, 800a258 <IMU_Get_Data+0x158>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7fe fa48 	bl	80086bc <__aeabi_ddiv>
 800a22c:	4603      	mov	r3, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4a14      	ldr	r2, [pc, #80]	; (800a284 <IMU_Get_Data+0x184>)
 800a232:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <IMU_Get_Data+0x174>)
 800a238:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a23c:	ec44 3b17 	vmov	d7, r3, r4
}
 800a240:	eeb0 0a47 	vmov.f32	s0, s14
 800a244:	eef0 0a67 	vmov.f32	s1, s15
 800a248:	bdb0      	pop	{r4, r5, r7, pc}
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	66666666 	.word	0x66666666
 800a254:	40306666 	.word	0x40306666
 800a258:	54442d18 	.word	0x54442d18
 800a25c:	400921fb 	.word	0x400921fb
 800a260:	d2f1a9fc 	.word	0xd2f1a9fc
 800a264:	3f50624d 	.word	0x3f50624d
 800a268:	2000e03a 	.word	0x2000e03a
 800a26c:	20000310 	.word	0x20000310
 800a270:	40668000 	.word	0x40668000
 800a274:	2000dfb0 	.word	0x2000dfb0
 800a278:	2000dfb8 	.word	0x2000dfb8
 800a27c:	20000300 	.word	0x20000300
 800a280:	20000018 	.word	0x20000018
 800a284:	200002f8 	.word	0x200002f8

0800a288 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	b08c      	sub	sp, #48	; 0x30
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a292:	ed87 1b08 	vstr	d1, [r7, #32]
 800a296:	ed87 2b06 	vstr	d2, [r7, #24]
 800a29a:	ed87 3b04 	vstr	d3, [r7, #16]
 800a29e:	ed87 4b02 	vstr	d4, [r7, #8]
 800a2a2:	ed87 5b00 	vstr	d5, [r7]

	static double e=0, ei=0, ed=0, e0=0;

	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a2a6:	4b7c      	ldr	r3, [pc, #496]	; (800a498 <IMU_Control+0x210>)
 800a2a8:	799b      	ldrb	r3, [r3, #6]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00f      	beq.n	800a2d4 <IMU_Control+0x4c>
 800a2b4:	4b79      	ldr	r3, [pc, #484]	; (800a49c <IMU_Control+0x214>)
 800a2b6:	edd3 7a00 	vldr	s15, [r3]
 800a2ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c2:	d123      	bne.n	800a30c <IMU_Control+0x84>
 800a2c4:	4b76      	ldr	r3, [pc, #472]	; (800a4a0 <IMU_Control+0x218>)
 800a2c6:	edd3 7a00 	vldr	s15, [r3]
 800a2ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d2:	d11b      	bne.n	800a30c <IMU_Control+0x84>
		e=0;
 800a2d4:	4a73      	ldr	r2, [pc, #460]	; (800a4a4 <IMU_Control+0x21c>)
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	f04f 0400 	mov.w	r4, #0
 800a2de:	e9c2 3400 	strd	r3, r4, [r2]
		ei = 0;
 800a2e2:	4a71      	ldr	r2, [pc, #452]	; (800a4a8 <IMU_Control+0x220>)
 800a2e4:	f04f 0300 	mov.w	r3, #0
 800a2e8:	f04f 0400 	mov.w	r4, #0
 800a2ec:	e9c2 3400 	strd	r3, r4, [r2]
		ed=0;
 800a2f0:	4a6e      	ldr	r2, [pc, #440]	; (800a4ac <IMU_Control+0x224>)
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	f04f 0400 	mov.w	r4, #0
 800a2fa:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a2fe:	4a6c      	ldr	r2, [pc, #432]	; (800a4b0 <IMU_Control+0x228>)
 800a300:	f04f 0300 	mov.w	r3, #0
 800a304:	f04f 0400 	mov.w	r4, #0
 800a308:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a30c:	4a62      	ldr	r2, [pc, #392]	; (800a498 <IMU_Control+0x210>)
 800a30e:	7993      	ldrb	r3, [r2, #6]
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a31a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a31e:	f7fd feeb 	bl	80080f8 <__aeabi_dsub>
 800a322:	4603      	mov	r3, r0
 800a324:	460c      	mov	r4, r1
 800a326:	4a5f      	ldr	r2, [pc, #380]	; (800a4a4 <IMU_Control+0x21c>)
 800a328:	e9c2 3400 	strd	r3, r4, [r2]
	ei += e * T;
 800a32c:	4b5d      	ldr	r3, [pc, #372]	; (800a4a4 <IMU_Control+0x21c>)
 800a32e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a336:	f7fe f897 	bl	8008468 <__aeabi_dmul>
 800a33a:	4603      	mov	r3, r0
 800a33c:	460c      	mov	r4, r1
 800a33e:	4618      	mov	r0, r3
 800a340:	4621      	mov	r1, r4
 800a342:	4b59      	ldr	r3, [pc, #356]	; (800a4a8 <IMU_Control+0x220>)
 800a344:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a348:	461a      	mov	r2, r3
 800a34a:	4623      	mov	r3, r4
 800a34c:	f7fd fed6 	bl	80080fc <__adddf3>
 800a350:	4603      	mov	r3, r0
 800a352:	460c      	mov	r4, r1
 800a354:	4a54      	ldr	r2, [pc, #336]	; (800a4a8 <IMU_Control+0x220>)
 800a356:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a35a:	4b52      	ldr	r3, [pc, #328]	; (800a4a4 <IMU_Control+0x21c>)
 800a35c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a360:	4b53      	ldr	r3, [pc, #332]	; (800a4b0 <IMU_Control+0x228>)
 800a362:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a366:	461a      	mov	r2, r3
 800a368:	4623      	mov	r3, r4
 800a36a:	f7fd fec5 	bl	80080f8 <__aeabi_dsub>
 800a36e:	4603      	mov	r3, r0
 800a370:	460c      	mov	r4, r1
 800a372:	4618      	mov	r0, r3
 800a374:	4621      	mov	r1, r4
 800a376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a37a:	f7fe f99f 	bl	80086bc <__aeabi_ddiv>
 800a37e:	4603      	mov	r3, r0
 800a380:	460c      	mov	r4, r1
 800a382:	4a4a      	ldr	r2, [pc, #296]	; (800a4ac <IMU_Control+0x224>)
 800a384:	e9c2 3400 	strd	r3, r4, [r2]
	e0 = e;
 800a388:	4b46      	ldr	r3, [pc, #280]	; (800a4a4 <IMU_Control+0x21c>)
 800a38a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a38e:	4a48      	ldr	r2, [pc, #288]	; (800a4b0 <IMU_Control+0x228>)
 800a390:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a394:	4b43      	ldr	r3, [pc, #268]	; (800a4a4 <IMU_Control+0x21c>)
 800a396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a39a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a39e:	f7fe f863 	bl	8008468 <__aeabi_dmul>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	4625      	mov	r5, r4
 800a3a8:	461c      	mov	r4, r3
 800a3aa:	4b3f      	ldr	r3, [pc, #252]	; (800a4a8 <IMU_Control+0x220>)
 800a3ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3b4:	f7fe f858 	bl	8008468 <__aeabi_dmul>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7fd fe9c 	bl	80080fc <__adddf3>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	4625      	mov	r5, r4
 800a3ca:	461c      	mov	r4, r3
 800a3cc:	4b37      	ldr	r3, [pc, #220]	; (800a4ac <IMU_Control+0x224>)
 800a3ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f7fe f847 	bl	8008468 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7fd fe8b 	bl	80080fc <__adddf3>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	ec44 3b17 	vmov	d7, r3, r4
 800a3ee:	eeb0 0a47 	vmov.f32	s0, s14
 800a3f2:	eef0 0a67 	vmov.f32	s1, s15
 800a3f6:	f00b fdf3 	bl	8015fe0 <round>
 800a3fa:	ec54 3b10 	vmov	r3, r4, d0
 800a3fe:	4618      	mov	r0, r3
 800a400:	4621      	mov	r1, r4
 800a402:	f7fe fae1 	bl	80089c8 <__aeabi_d2iz>
 800a406:	4603      	mov	r3, r0
 800a408:	b21b      	sxth	r3, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	425b      	negs	r3, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	b21a      	sxth	r2, r3
 800a412:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <IMU_Control+0x22c>)
 800a414:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a416:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <IMU_Control+0x21c>)
 800a418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a41c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a420:	f7fe f822 	bl	8008468 <__aeabi_dmul>
 800a424:	4603      	mov	r3, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4625      	mov	r5, r4
 800a42a:	461c      	mov	r4, r3
 800a42c:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <IMU_Control+0x220>)
 800a42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a436:	f7fe f817 	bl	8008468 <__aeabi_dmul>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7fd fe5b 	bl	80080fc <__adddf3>
 800a446:	4603      	mov	r3, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	4625      	mov	r5, r4
 800a44c:	461c      	mov	r4, r3
 800a44e:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <IMU_Control+0x224>)
 800a450:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a458:	f7fe f806 	bl	8008468 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7fd fe4a 	bl	80080fc <__adddf3>
 800a468:	4603      	mov	r3, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	ec44 3b17 	vmov	d7, r3, r4
 800a470:	eeb0 0a47 	vmov.f32	s0, s14
 800a474:	eef0 0a67 	vmov.f32	s1, s15
 800a478:	f00b fdb2 	bl	8015fe0 <round>
 800a47c:	ec54 3b10 	vmov	r3, r4, d0
 800a480:	4618      	mov	r0, r3
 800a482:	4621      	mov	r1, r4
 800a484:	f7fe faa0 	bl	80089c8 <__aeabi_d2iz>
 800a488:	4603      	mov	r3, r0
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <IMU_Control+0x230>)
 800a48e:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a490:	bf00      	nop
 800a492:	3730      	adds	r7, #48	; 0x30
 800a494:	46bd      	mov	sp, r7
 800a496:	bdb0      	pop	{r4, r5, r7, pc}
 800a498:	20000074 	.word	0x20000074
 800a49c:	200002f0 	.word	0x200002f0
 800a4a0:	200002f4 	.word	0x200002f4
 800a4a4:	2000dfc0 	.word	0x2000dfc0
 800a4a8:	2000dfc8 	.word	0x2000dfc8
 800a4ac:	2000dfd0 	.word	0x2000dfd0
 800a4b0:	2000dfd8 	.word	0x2000dfd8
 800a4b4:	2000e01e 	.word	0x2000e01e
 800a4b8:	2000e022 	.word	0x2000e022

0800a4bc <IMU_Calib>:
void IMU_Calib(){
 800a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4be:	b089      	sub	sp, #36	; 0x24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	466b      	mov	r3, sp
 800a4c4:	461e      	mov	r6, r3

	HAL_Delay(1000);
 800a4c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4ca:	f006 fbe3 	bl	8010c94 <HAL_Delay>

	int16_t num = 2000;
 800a4ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a4d2:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a4d4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a4d8:	4603      	mov	r3, r0
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	60bb      	str	r3, [r7, #8]
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	f04f 0400 	mov.w	r4, #0
 800a4ee:	0194      	lsls	r4, r2, #6
 800a4f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a4f4:	018b      	lsls	r3, r1, #6
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0200 	mov.w	r2, #0
 800a4fe:	f04f 0300 	mov.w	r3, #0
 800a502:	f04f 0400 	mov.w	r4, #0
 800a506:	0194      	lsls	r4, r2, #6
 800a508:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a50c:	018b      	lsls	r3, r1, #6
 800a50e:	4603      	mov	r3, r0
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	3307      	adds	r3, #7
 800a514:	3307      	adds	r3, #7
 800a516:	08db      	lsrs	r3, r3, #3
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	ebad 0d03 	sub.w	sp, sp, r3
 800a51e:	466b      	mov	r3, sp
 800a520:	3307      	adds	r3, #7
 800a522:	08db      	lsrs	r3, r3, #3
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a528:	2300      	movs	r3, #0
 800a52a:	83fb      	strh	r3, [r7, #30]
 800a52c:	e023      	b.n	800a576 <IMU_Calib+0xba>
		zg_vals[i] = (double)zg;
 800a52e:	4b20      	ldr	r3, [pc, #128]	; (800a5b0 <IMU_Calib+0xf4>)
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b21b      	sxth	r3, r3
 800a534:	8bfd      	ldrh	r5, [r7, #30]
 800a536:	4618      	mov	r0, r3
 800a538:	f7fd ff2c 	bl	8008394 <__aeabi_i2d>
 800a53c:	4603      	mov	r3, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	00ea      	lsls	r2, r5, #3
 800a544:	440a      	add	r2, r1
 800a546:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a54a:	8bfb      	ldrh	r3, [r7, #30]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	4413      	add	r3, r2
 800a552:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a556:	461a      	mov	r2, r3
 800a558:	4623      	mov	r3, r4
 800a55a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a55e:	f7fd fdcd 	bl	80080fc <__adddf3>
 800a562:	4603      	mov	r3, r0
 800a564:	460c      	mov	r4, r1
 800a566:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
 800a56a:	2002      	movs	r0, #2
 800a56c:	f006 fb92 	bl	8010c94 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 800a570:	8bfb      	ldrh	r3, [r7, #30]
 800a572:	3301      	adds	r3, #1
 800a574:	83fb      	strh	r3, [r7, #30]
 800a576:	8bfa      	ldrh	r2, [r7, #30]
 800a578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	dbd6      	blt.n	800a52e <IMU_Calib+0x72>
	}

	offset = sum / num;
 800a580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd ff05 	bl	8008394 <__aeabi_i2d>
 800a58a:	4603      	mov	r3, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	461a      	mov	r2, r3
 800a590:	4623      	mov	r3, r4
 800a592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a596:	f7fe f891 	bl	80086bc <__aeabi_ddiv>
 800a59a:	4603      	mov	r3, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	4a05      	ldr	r2, [pc, #20]	; (800a5b4 <IMU_Calib+0xf8>)
 800a5a0:	e9c2 3400 	strd	r3, r4, [r2]
 800a5a4:	46b5      	mov	sp, r6
}
 800a5a6:	bf00      	nop
 800a5a8:	3724      	adds	r7, #36	; 0x24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	2000e03a 	.word	0x2000e03a
 800a5b4:	20000310 	.word	0x20000310

0800a5b8 <LED_Change>:

void LED_Change(){
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a5bc:	4b5a      	ldr	r3, [pc, #360]	; (800a728 <LED_Change+0x170>)
 800a5be:	f993 3000 	ldrsb.w	r3, [r3]
 800a5c2:	2b07      	cmp	r3, #7
 800a5c4:	f200 80ac 	bhi.w	800a720 <LED_Change+0x168>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <LED_Change+0x18>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a617 	.word	0x0800a617
 800a5d8:	0800a63d 	.word	0x0800a63d
 800a5dc:	0800a663 	.word	0x0800a663
 800a5e0:	0800a689 	.word	0x0800a689
 800a5e4:	0800a6af 	.word	0x0800a6af
 800a5e8:	0800a6d5 	.word	0x0800a6d5
 800a5ec:	0800a6fb 	.word	0x0800a6fb
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5f6:	484d      	ldr	r0, [pc, #308]	; (800a72c <LED_Change+0x174>)
 800a5f8:	f008 fb22 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a602:	484a      	ldr	r0, [pc, #296]	; (800a72c <LED_Change+0x174>)
 800a604:	f008 fb1c 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a60e:	4848      	ldr	r0, [pc, #288]	; (800a730 <LED_Change+0x178>)
 800a610:	f008 fb16 	bl	8012c40 <HAL_GPIO_WritePin>
		break;
 800a614:	e085      	b.n	800a722 <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a616:	2201      	movs	r2, #1
 800a618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61c:	4843      	ldr	r0, [pc, #268]	; (800a72c <LED_Change+0x174>)
 800a61e:	f008 fb0f 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a622:	2200      	movs	r2, #0
 800a624:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a628:	4840      	ldr	r0, [pc, #256]	; (800a72c <LED_Change+0x174>)
 800a62a:	f008 fb09 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a62e:	2200      	movs	r2, #0
 800a630:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a634:	483e      	ldr	r0, [pc, #248]	; (800a730 <LED_Change+0x178>)
 800a636:	f008 fb03 	bl	8012c40 <HAL_GPIO_WritePin>
		break;
 800a63a:	e072      	b.n	800a722 <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a63c:	2200      	movs	r2, #0
 800a63e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a642:	483a      	ldr	r0, [pc, #232]	; (800a72c <LED_Change+0x174>)
 800a644:	f008 fafc 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a648:	2201      	movs	r2, #1
 800a64a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a64e:	4837      	ldr	r0, [pc, #220]	; (800a72c <LED_Change+0x174>)
 800a650:	f008 faf6 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a654:	2200      	movs	r2, #0
 800a656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a65a:	4835      	ldr	r0, [pc, #212]	; (800a730 <LED_Change+0x178>)
 800a65c:	f008 faf0 	bl	8012c40 <HAL_GPIO_WritePin>

		break;
 800a660:	e05f      	b.n	800a722 <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a662:	2201      	movs	r2, #1
 800a664:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a668:	4830      	ldr	r0, [pc, #192]	; (800a72c <LED_Change+0x174>)
 800a66a:	f008 fae9 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a66e:	2201      	movs	r2, #1
 800a670:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a674:	482d      	ldr	r0, [pc, #180]	; (800a72c <LED_Change+0x174>)
 800a676:	f008 fae3 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a67a:	2200      	movs	r2, #0
 800a67c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a680:	482b      	ldr	r0, [pc, #172]	; (800a730 <LED_Change+0x178>)
 800a682:	f008 fadd 	bl	8012c40 <HAL_GPIO_WritePin>
		break;
 800a686:	e04c      	b.n	800a722 <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a68e:	4827      	ldr	r0, [pc, #156]	; (800a72c <LED_Change+0x174>)
 800a690:	f008 fad6 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a69a:	4824      	ldr	r0, [pc, #144]	; (800a72c <LED_Change+0x174>)
 800a69c:	f008 fad0 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6a6:	4822      	ldr	r0, [pc, #136]	; (800a730 <LED_Change+0x178>)
 800a6a8:	f008 faca 	bl	8012c40 <HAL_GPIO_WritePin>
		break;
 800a6ac:	e039      	b.n	800a722 <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6b4:	481d      	ldr	r0, [pc, #116]	; (800a72c <LED_Change+0x174>)
 800a6b6:	f008 fac3 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6c0:	481a      	ldr	r0, [pc, #104]	; (800a72c <LED_Change+0x174>)
 800a6c2:	f008 fabd 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6cc:	4818      	ldr	r0, [pc, #96]	; (800a730 <LED_Change+0x178>)
 800a6ce:	f008 fab7 	bl	8012c40 <HAL_GPIO_WritePin>
		break;
 800a6d2:	e026      	b.n	800a722 <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6da:	4814      	ldr	r0, [pc, #80]	; (800a72c <LED_Change+0x174>)
 800a6dc:	f008 fab0 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6e6:	4811      	ldr	r0, [pc, #68]	; (800a72c <LED_Change+0x174>)
 800a6e8:	f008 faaa 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6f2:	480f      	ldr	r0, [pc, #60]	; (800a730 <LED_Change+0x178>)
 800a6f4:	f008 faa4 	bl	8012c40 <HAL_GPIO_WritePin>

		break;
 800a6f8:	e013      	b.n	800a722 <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a700:	480a      	ldr	r0, [pc, #40]	; (800a72c <LED_Change+0x174>)
 800a702:	f008 fa9d 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a706:	2201      	movs	r2, #1
 800a708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a70c:	4807      	ldr	r0, [pc, #28]	; (800a72c <LED_Change+0x174>)
 800a70e:	f008 fa97 	bl	8012c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a712:	2201      	movs	r2, #1
 800a714:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a718:	4805      	ldr	r0, [pc, #20]	; (800a730 <LED_Change+0x178>)
 800a71a:	f008 fa91 	bl	8012c40 <HAL_GPIO_WritePin>

		break;
 800a71e:	e000      	b.n	800a722 <LED_Change+0x16a>
	default: break;
 800a720:	bf00      	nop

	}
}
 800a722:	bf00      	nop
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000074 	.word	0x20000074
 800a72c:	40020800 	.word	0x40020800
 800a730:	40020400 	.word	0x40020400

0800a734 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	460a      	mov	r2, r1
 800a73e:	80fb      	strh	r3, [r7, #6]
 800a740:	4613      	mov	r3, r2
 800a742:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dd05      	ble.n	800a758 <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 800a74c:	2201      	movs	r2, #1
 800a74e:	2104      	movs	r1, #4
 800a750:	481a      	ldr	r0, [pc, #104]	; (800a7bc <Motor_Switch+0x88>)
 800a752:	f008 fa75 	bl	8012c40 <HAL_GPIO_WritePin>
 800a756:	e00c      	b.n	800a772 <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 800a758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da08      	bge.n	800a772 <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a760:	2200      	movs	r2, #0
 800a762:	2104      	movs	r1, #4
 800a764:	4815      	ldr	r0, [pc, #84]	; (800a7bc <Motor_Switch+0x88>)
 800a766:	f008 fa6b 	bl	8012c40 <HAL_GPIO_WritePin>
		L = -L;
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	425b      	negs	r3, r3
 800a76e:	b29b      	uxth	r3, r3
 800a770:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	dd05      	ble.n	800a786 <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a77a:	2200      	movs	r2, #0
 800a77c:	2101      	movs	r1, #1
 800a77e:	480f      	ldr	r0, [pc, #60]	; (800a7bc <Motor_Switch+0x88>)
 800a780:	f008 fa5e 	bl	8012c40 <HAL_GPIO_WritePin>
 800a784:	e00c      	b.n	800a7a0 <Motor_Switch+0x6c>

	}

	else if (R < 0){
 800a786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da08      	bge.n	800a7a0 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a78e:	2201      	movs	r2, #1
 800a790:	2101      	movs	r1, #1
 800a792:	480a      	ldr	r0, [pc, #40]	; (800a7bc <Motor_Switch+0x88>)
 800a794:	f008 fa54 	bl	8012c40 <HAL_GPIO_WritePin>
	  	R = -R;
 800a798:	88bb      	ldrh	r3, [r7, #4]
 800a79a:	425b      	negs	r3, r3
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <Motor_Switch+0x8c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a7a8:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <Motor_Switch+0x90>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40020000 	.word	0x40020000
 800a7c0:	2001a6f4 	.word	0x2001a6f4
 800a7c4:	20019cac 	.word	0x20019cac

0800a7c8 <ADC_Get_Data>:

void ADC_Get_Data(){
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 800a7cc:	4b80      	ldr	r3, [pc, #512]	; (800a9d0 <ADC_Get_Data+0x208>)
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b21a      	sxth	r2, r3
 800a7d2:	4b80      	ldr	r3, [pc, #512]	; (800a9d4 <ADC_Get_Data+0x20c>)
 800a7d4:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a7d6:	4b7e      	ldr	r3, [pc, #504]	; (800a9d0 <ADC_Get_Data+0x208>)
 800a7d8:	885b      	ldrh	r3, [r3, #2]
 800a7da:	b21a      	sxth	r2, r3
 800a7dc:	4b7e      	ldr	r3, [pc, #504]	; (800a9d8 <ADC_Get_Data+0x210>)
 800a7de:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a7e0:	4b7e      	ldr	r3, [pc, #504]	; (800a9dc <ADC_Get_Data+0x214>)
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b21a      	sxth	r2, r3
 800a7e6:	4b7e      	ldr	r3, [pc, #504]	; (800a9e0 <ADC_Get_Data+0x218>)
 800a7e8:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a7ea:	4b7c      	ldr	r3, [pc, #496]	; (800a9dc <ADC_Get_Data+0x214>)
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	b21a      	sxth	r2, r3
 800a7f0:	4b7c      	ldr	r3, [pc, #496]	; (800a9e4 <ADC_Get_Data+0x21c>)
 800a7f2:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a7f4:	4b7c      	ldr	r3, [pc, #496]	; (800a9e8 <ADC_Get_Data+0x220>)
 800a7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b75      	ldr	r3, [pc, #468]	; (800a9d4 <ADC_Get_Data+0x20c>)
 800a7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfb8      	it	lt
 800a808:	425b      	neglt	r3, r3
 800a80a:	b21a      	sxth	r2, r3
 800a80c:	4b77      	ldr	r3, [pc, #476]	; (800a9ec <ADC_Get_Data+0x224>)
 800a80e:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a810:	4b77      	ldr	r3, [pc, #476]	; (800a9f0 <ADC_Get_Data+0x228>)
 800a812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a816:	461a      	mov	r2, r3
 800a818:	4b6f      	ldr	r3, [pc, #444]	; (800a9d8 <ADC_Get_Data+0x210>)
 800a81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfb8      	it	lt
 800a824:	425b      	neglt	r3, r3
 800a826:	b21a      	sxth	r2, r3
 800a828:	4b72      	ldr	r3, [pc, #456]	; (800a9f4 <ADC_Get_Data+0x22c>)
 800a82a:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a82c:	4b72      	ldr	r3, [pc, #456]	; (800a9f8 <ADC_Get_Data+0x230>)
 800a82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a832:	461a      	mov	r2, r3
 800a834:	4b6a      	ldr	r3, [pc, #424]	; (800a9e0 <ADC_Get_Data+0x218>)
 800a836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfb8      	it	lt
 800a840:	425b      	neglt	r3, r3
 800a842:	b21a      	sxth	r2, r3
 800a844:	4b6d      	ldr	r3, [pc, #436]	; (800a9fc <ADC_Get_Data+0x234>)
 800a846:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a848:	4b6d      	ldr	r3, [pc, #436]	; (800aa00 <ADC_Get_Data+0x238>)
 800a84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a84e:	461a      	mov	r2, r3
 800a850:	4b64      	ldr	r3, [pc, #400]	; (800a9e4 <ADC_Get_Data+0x21c>)
 800a852:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	bfb8      	it	lt
 800a85c:	425b      	neglt	r3, r3
 800a85e:	b21a      	sxth	r2, r3
 800a860:	4b68      	ldr	r3, [pc, #416]	; (800aa04 <ADC_Get_Data+0x23c>)
 800a862:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a864:	4b5b      	ldr	r3, [pc, #364]	; (800a9d4 <ADC_Get_Data+0x20c>)
 800a866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a86a:	4b5f      	ldr	r3, [pc, #380]	; (800a9e8 <ADC_Get_Data+0x220>)
 800a86c:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a86e:	4b5a      	ldr	r3, [pc, #360]	; (800a9d8 <ADC_Get_Data+0x210>)
 800a870:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a874:	4b5e      	ldr	r3, [pc, #376]	; (800a9f0 <ADC_Get_Data+0x228>)
 800a876:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a878:	4b59      	ldr	r3, [pc, #356]	; (800a9e0 <ADC_Get_Data+0x218>)
 800a87a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a87e:	4b5e      	ldr	r3, [pc, #376]	; (800a9f8 <ADC_Get_Data+0x230>)
 800a880:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a882:	4b58      	ldr	r3, [pc, #352]	; (800a9e4 <ADC_Get_Data+0x21c>)
 800a884:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a888:	4b5d      	ldr	r3, [pc, #372]	; (800aa00 <ADC_Get_Data+0x238>)
 800a88a:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a88c:	4b50      	ldr	r3, [pc, #320]	; (800a9d0 <ADC_Get_Data+0x208>)
 800a88e:	889b      	ldrh	r3, [r3, #4]
 800a890:	ee07 3a90 	vmov	s15, r3
 800a894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a898:	4b5b      	ldr	r3, [pc, #364]	; (800aa08 <ADC_Get_Data+0x240>)
 800a89a:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a89e:	4b5b      	ldr	r3, [pc, #364]	; (800aa0c <ADC_Get_Data+0x244>)
 800a8a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	4b51      	ldr	r3, [pc, #324]	; (800a9ec <ADC_Get_Data+0x224>)
 800a8a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	b21a      	sxth	r2, r3
 800a8b4:	4b55      	ldr	r3, [pc, #340]	; (800aa0c <ADC_Get_Data+0x244>)
 800a8b6:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a8b8:	4b55      	ldr	r3, [pc, #340]	; (800aa10 <ADC_Get_Data+0x248>)
 800a8ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	4b4c      	ldr	r3, [pc, #304]	; (800a9f4 <ADC_Get_Data+0x22c>)
 800a8c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	4413      	add	r3, r2
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	b21a      	sxth	r2, r3
 800a8ce:	4b50      	ldr	r3, [pc, #320]	; (800aa10 <ADC_Get_Data+0x248>)
 800a8d0:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a8d2:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a8d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	4b48      	ldr	r3, [pc, #288]	; (800a9fc <ADC_Get_Data+0x234>)
 800a8dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	b21a      	sxth	r2, r3
 800a8e8:	4b4a      	ldr	r3, [pc, #296]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a8ea:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a8ec:	4b4a      	ldr	r3, [pc, #296]	; (800aa18 <ADC_Get_Data+0x250>)
 800a8ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	4b43      	ldr	r3, [pc, #268]	; (800aa04 <ADC_Get_Data+0x23c>)
 800a8f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	b21a      	sxth	r2, r3
 800a902:	4b45      	ldr	r3, [pc, #276]	; (800aa18 <ADC_Get_Data+0x250>)
 800a904:	801a      	strh	r2, [r3, #0]

		count ++;
 800a906:	4b45      	ldr	r3, [pc, #276]	; (800aa1c <ADC_Get_Data+0x254>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3301      	adds	r3, #1
 800a90c:	4a43      	ldr	r2, [pc, #268]	; (800aa1c <ADC_Get_Data+0x254>)
 800a90e:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a910:	4b42      	ldr	r3, [pc, #264]	; (800aa1c <ADC_Get_Data+0x254>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b0a      	cmp	r3, #10
 800a916:	d156      	bne.n	800a9c6 <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a918:	4b3c      	ldr	r3, [pc, #240]	; (800aa0c <ADC_Get_Data+0x244>)
 800a91a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a926:	4b3d      	ldr	r3, [pc, #244]	; (800aa1c <ADC_Get_Data+0x254>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a936:	4b3a      	ldr	r3, [pc, #232]	; (800aa20 <ADC_Get_Data+0x258>)
 800a938:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a93c:	4b34      	ldr	r3, [pc, #208]	; (800aa10 <ADC_Get_Data+0x248>)
 800a93e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a94a:	4b34      	ldr	r3, [pc, #208]	; (800aa1c <ADC_Get_Data+0x254>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a95a:	4b32      	ldr	r3, [pc, #200]	; (800aa24 <ADC_Get_Data+0x25c>)
 800a95c:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a960:	4b2c      	ldr	r3, [pc, #176]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a962:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a96e:	4b2b      	ldr	r3, [pc, #172]	; (800aa1c <ADC_Get_Data+0x254>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97e:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <ADC_Get_Data+0x260>)
 800a980:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a984:	4b24      	ldr	r3, [pc, #144]	; (800aa18 <ADC_Get_Data+0x250>)
 800a986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a992:	4b22      	ldr	r3, [pc, #136]	; (800aa1c <ADC_Get_Data+0x254>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a99e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a2:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <ADC_Get_Data+0x264>)
 800a9a4:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800a9a8:	4b18      	ldr	r3, [pc, #96]	; (800aa0c <ADC_Get_Data+0x244>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800a9ae:	4b18      	ldr	r3, [pc, #96]	; (800aa10 <ADC_Get_Data+0x248>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800a9b4:	4b17      	ldr	r3, [pc, #92]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800a9ba:	4b17      	ldr	r3, [pc, #92]	; (800aa18 <ADC_Get_Data+0x250>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	801a      	strh	r2, [r3, #0]

			count = 0;
 800a9c0:	4b16      	ldr	r3, [pc, #88]	; (800aa1c <ADC_Get_Data+0x254>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
		}

#endif
}
 800a9c6:	bf00      	nop
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20009f78 	.word	0x20009f78
 800a9d4:	2000e11c 	.word	0x2000e11c
 800a9d8:	20000028 	.word	0x20000028
 800a9dc:	20009f80 	.word	0x20009f80
 800a9e0:	20009f86 	.word	0x20009f86
 800a9e4:	2001a736 	.word	0x2001a736
 800a9e8:	2000e120 	.word	0x2000e120
 800a9ec:	2000e11e 	.word	0x2000e11e
 800a9f0:	20009f8a 	.word	0x20009f8a
 800a9f4:	20009f8c 	.word	0x20009f8c
 800a9f8:	20009f88 	.word	0x20009f88
 800a9fc:	20009f8e 	.word	0x20009f8e
 800aa00:	2000e048 	.word	0x2000e048
 800aa04:	20019cec 	.word	0x20019cec
 800aa08:	2001a79c 	.word	0x2001a79c
 800aa0c:	20019ca6 	.word	0x20019ca6
 800aa10:	20019dd8 	.word	0x20019dd8
 800aa14:	20019d8c 	.word	0x20019d8c
 800aa18:	20019d30 	.word	0x20019d30
 800aa1c:	2000dfe0 	.word	0x2000dfe0
 800aa20:	2001a798 	.word	0x2001a798
 800aa24:	2001a6d0 	.word	0x2001a6d0
 800aa28:	2000e04c 	.word	0x2000e04c
 800aa2c:	20019ca8 	.word	0x20019ca8

0800aa30 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa3a:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <Velocity_Get+0x4c>)
 800aa40:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800aa42:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800aa46:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800aa48:	edd7 6a05 	vldr	s13, [r7, #20]
 800aa4c:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa54:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa58:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aa5c:	ed97 7a00 	vldr	s14, [r7]
 800aa60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa64:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800aa6e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	42816f02 	.word	0x42816f02

0800aa80 <Encoder_Reset>:


}


void Encoder_Reset(){
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <Encoder_Reset+0x20>)
 800aa86:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800aa8c:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <Encoder_Reset+0x24>)
 800aa8e:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa92:	625a      	str	r2, [r3, #36]	; 0x24

}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	40000400 	.word	0x40000400
 800aaa4:	40000800 	.word	0x40000800

0800aaa8 <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800aab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <Encoder_Count+0x18>

		mode = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	80fb      	strh	r3, [r7, #6]
 800aabe:	e030      	b.n	800ab22 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800aac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d12c      	bne.n	800ab22 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800aac8:	4b1a      	ldr	r3, [pc, #104]	; (800ab34 <Encoder_Count+0x8c>)
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	4b19      	ldr	r3, [pc, #100]	; (800ab34 <Encoder_Count+0x8c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4413      	add	r3, r2
 800aad2:	4a18      	ldr	r2, [pc, #96]	; (800ab34 <Encoder_Count+0x8c>)
 800aad4:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800aad6:	4b18      	ldr	r3, [pc, #96]	; (800ab38 <Encoder_Count+0x90>)
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	4b17      	ldr	r3, [pc, #92]	; (800ab38 <Encoder_Count+0x90>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4413      	add	r3, r2
 800aae0:	4a15      	ldr	r2, [pc, #84]	; (800ab38 <Encoder_Count+0x90>)
 800aae2:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800aae4:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <Encoder_Count+0x8c>)
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <Encoder_Count+0x90>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aaf6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aafa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aafe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab02:	ee17 2a90 	vmov	r2, s15
 800ab06:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <Encoder_Count+0x94>)
 800ab08:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800ab0a:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <Encoder_Count+0x8c>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <Encoder_Count+0x90>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	441a      	add	r2, r3
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <Encoder_Count+0x98>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4413      	add	r3, r2
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <Encoder_Count+0x98>)
 800ab1c:	6013      	str	r3, [r2, #0]
	    mode =1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800ab22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000050 	.word	0x20000050
 800ab38:	2000005c 	.word	0x2000005c
 800ab3c:	20000068 	.word	0x20000068
 800ab40:	20000330 	.word	0x20000330

0800ab44 <wait>:
//o 走行用の関数
//Motion.cとMotion.hにまとめる
//時間待ち関数

void wait(double wait_second)
{
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使う
	//いらない制御を切って待つ。か、つけっぱなし。
	//つけっぱなしのパターン
	//待った先の時間 - 現在の時間
	//待ちたい時間
	double starting_point_of_time = elapsed_time;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <wait+0x48>)
 800ab50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab54:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800ab58:	bf00      	nop
 800ab5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab62:	f7fd facb 	bl	80080fc <__adddf3>
 800ab66:	4603      	mov	r3, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <wait+0x48>)
 800ab70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab74:	461a      	mov	r2, r3
 800ab76:	4623      	mov	r3, r4
 800ab78:	f7fd ff06 	bl	8008988 <__aeabi_dcmpgt>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1eb      	bne.n	800ab5a <wait+0x16>
	{

	}

	//いらない制御を切るパターン
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd90      	pop	{r4, r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000328 	.word	0x20000328

0800ab90 <Start_Accel>:


void Start_Accel(){
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ab94:	4b22      	ldr	r3, [pc, #136]	; (800ac20 <Start_Accel+0x90>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ab9a:	f7fe ff1b 	bl	80099d4 <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800ab9e:	4b21      	ldr	r3, [pc, #132]	; (800ac24 <Start_Accel+0x94>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800aba4:	4b20      	ldr	r3, [pc, #128]	; (800ac28 <Start_Accel+0x98>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800abaa:	4b20      	ldr	r3, [pc, #128]	; (800ac2c <Start_Accel+0x9c>)
 800abac:	2200      	movs	r2, #0
 800abae:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800abb0:	4b1f      	ldr	r3, [pc, #124]	; (800ac30 <Start_Accel+0xa0>)
 800abb2:	2201      	movs	r2, #1
 800abb4:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abb6:	e005      	b.n	800abc4 <Start_Accel+0x34>
		mode.control = 4;
 800abb8:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <Start_Accel+0xa0>)
 800abba:	2204      	movs	r2, #4
 800abbc:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800abbe:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <Start_Accel+0xa0>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abc4:	4b17      	ldr	r3, [pc, #92]	; (800ac24 <Start_Accel+0x94>)
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	4b17      	ldr	r3, [pc, #92]	; (800ac28 <Start_Accel+0x98>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	db0f      	blt.n	800abf2 <Start_Accel+0x62>
 800abd2:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <Start_Accel+0x94>)
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <Start_Accel+0x98>)
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4413      	add	r3, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fbd9 	bl	8008394 <__aeabi_i2d>
 800abe2:	a30d      	add	r3, pc, #52	; (adr r3, 800ac18 <Start_Accel+0x88>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7fd feb0 	bl	800894c <__aeabi_dcmplt>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e2      	bne.n	800abb8 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <Start_Accel+0xa0>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800abf8:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <Start_Accel+0xa4>)
 800abfa:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <Start_Accel+0xa8>)
 800abfc:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800abfe:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <Start_Accel+0x94>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac04:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <Start_Accel+0x98>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <Start_Accel+0x9c>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	605a      	str	r2, [r3, #4]

}
 800ac10:	bf00      	nop
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	f3af 8000 	nop.w
 800ac18:	63ed7f78 	.word	0x63ed7f78
 800ac1c:	40ee8874 	.word	0x40ee8874
 800ac20:	2000027c 	.word	0x2000027c
 800ac24:	20000050 	.word	0x20000050
 800ac28:	2000005c 	.word	0x2000005c
 800ac2c:	20000068 	.word	0x20000068
 800ac30:	20000074 	.word	0x20000074
 800ac34:	200002f0 	.word	0x200002f0
 800ac38:	43870000 	.word	0x43870000
 800ac3c:	00000000 	.word	0x00000000

0800ac40 <Accelerate>:

void Accelerate(){
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ac44:	4b4a      	ldr	r3, [pc, #296]	; (800ad70 <Accelerate+0x130>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ac4a:	f7fe fec3 	bl	80099d4 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800ac4e:	4b49      	ldr	r3, [pc, #292]	; (800ad74 <Accelerate+0x134>)
 800ac50:	2203      	movs	r2, #3
 800ac52:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ac54:	4b48      	ldr	r3, [pc, #288]	; (800ad78 <Accelerate+0x138>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac5a:	4b48      	ldr	r3, [pc, #288]	; (800ad7c <Accelerate+0x13c>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac60:	4b47      	ldr	r3, [pc, #284]	; (800ad80 <Accelerate+0x140>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800ac66:	4b43      	ldr	r3, [pc, #268]	; (800ad74 <Accelerate+0x134>)
 800ac68:	2201      	movs	r2, #1
 800ac6a:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac6c:	e04d      	b.n	800ad0a <Accelerate+0xca>

		mode.accel = 2;
 800ac6e:	4b41      	ldr	r3, [pc, #260]	; (800ad74 <Accelerate+0x134>)
 800ac70:	2202      	movs	r2, #2
 800ac72:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800ac74:	4b40      	ldr	r3, [pc, #256]	; (800ad78 <Accelerate+0x138>)
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	4b40      	ldr	r3, [pc, #256]	; (800ad7c <Accelerate+0x13c>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fd fb88 	bl	8008394 <__aeabi_i2d>
 800ac84:	a336      	add	r3, pc, #216	; (adr r3, 800ad60 <Accelerate+0x120>)
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f7fd fe7d 	bl	8008988 <__aeabi_dcmpgt>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d037      	beq.n	800ad04 <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ac94:	4b3b      	ldr	r3, [pc, #236]	; (800ad84 <Accelerate+0x144>)
 800ac96:	edd3 7a00 	vldr	s15, [r3]
 800ac9a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ad88 <Accelerate+0x148>
 800ac9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca6:	dd0d      	ble.n	800acc4 <Accelerate+0x84>
 800aca8:	4b38      	ldr	r3, [pc, #224]	; (800ad8c <Accelerate+0x14c>)
 800acaa:	edd3 7a00 	vldr	s15, [r3]
 800acae:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ad90 <Accelerate+0x150>
 800acb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acba:	dd03      	ble.n	800acc4 <Accelerate+0x84>
				  mode.control = 0;
 800acbc:	4b2d      	ldr	r3, [pc, #180]	; (800ad74 <Accelerate+0x134>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	715a      	strb	r2, [r3, #5]
 800acc2:	e022      	b.n	800ad0a <Accelerate+0xca>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800acc4:	4b31      	ldr	r3, [pc, #196]	; (800ad8c <Accelerate+0x14c>)
 800acc6:	edd3 7a00 	vldr	s15, [r3]
 800acca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ad90 <Accelerate+0x150>
 800acce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	dd03      	ble.n	800ace0 <Accelerate+0xa0>
				  mode.control = 1;
 800acd8:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <Accelerate+0x134>)
 800acda:	2201      	movs	r2, #1
 800acdc:	715a      	strb	r2, [r3, #5]
 800acde:	e014      	b.n	800ad0a <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ace0:	4b28      	ldr	r3, [pc, #160]	; (800ad84 <Accelerate+0x144>)
 800ace2:	edd3 7a00 	vldr	s15, [r3]
 800ace6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ad88 <Accelerate+0x148>
 800acea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	dd03      	ble.n	800acfc <Accelerate+0xbc>
				  mode.control = 2;
 800acf4:	4b1f      	ldr	r3, [pc, #124]	; (800ad74 <Accelerate+0x134>)
 800acf6:	2202      	movs	r2, #2
 800acf8:	715a      	strb	r2, [r3, #5]
 800acfa:	e006      	b.n	800ad0a <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800acfc:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <Accelerate+0x134>)
 800acfe:	2204      	movs	r2, #4
 800ad00:	715a      	strb	r2, [r3, #5]
 800ad02:	e002      	b.n	800ad0a <Accelerate+0xca>
		}
		else mode.control = 4;
 800ad04:	4b1b      	ldr	r3, [pc, #108]	; (800ad74 <Accelerate+0x134>)
 800ad06:	2204      	movs	r2, #4
 800ad08:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ad0a:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <Accelerate+0x138>)
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <Accelerate+0x13c>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4413      	add	r3, r2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	db0f      	blt.n	800ad38 <Accelerate+0xf8>
 800ad18:	4b17      	ldr	r3, [pc, #92]	; (800ad78 <Accelerate+0x138>)
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	4b17      	ldr	r3, [pc, #92]	; (800ad7c <Accelerate+0x13c>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fd fb36 	bl	8008394 <__aeabi_i2d>
 800ad28:	a30f      	add	r3, pc, #60	; (adr r3, 800ad68 <Accelerate+0x128>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7fd fe0d 	bl	800894c <__aeabi_dcmplt>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d19a      	bne.n	800ac6e <Accelerate+0x2e>
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
 800ad38:	4b0e      	ldr	r3, [pc, #56]	; (800ad74 <Accelerate+0x134>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <Accelerate+0x154>)
 800ad40:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <Accelerate+0x158>)
 800ad42:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ad44:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <Accelerate+0x138>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ad4a:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <Accelerate+0x13c>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <Accelerate+0x140>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	605a      	str	r2, [r3, #4]

}
 800ad56:	bf00      	nop
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	f3af 8000 	nop.w
 800ad60:	f298ebe1 	.word	0xf298ebe1
 800ad64:	40d8b91c 	.word	0x40d8b91c
 800ad68:	a7233ab1 	.word	0xa7233ab1
 800ad6c:	40e64033 	.word	0x40e64033
 800ad70:	2000027c 	.word	0x2000027c
 800ad74:	20000074 	.word	0x20000074
 800ad78:	20000050 	.word	0x20000050
 800ad7c:	2000005c 	.word	0x2000005c
 800ad80:	20000068 	.word	0x20000068
 800ad84:	2001a6d0 	.word	0x2001a6d0
 800ad88:	42c80000 	.word	0x42c80000
 800ad8c:	2000e04c 	.word	0x2000e04c
 800ad90:	430c0000 	.word	0x430c0000
 800ad94:	200002f0 	.word	0x200002f0
 800ad98:	43870000 	.word	0x43870000
 800ad9c:	00000000 	.word	0x00000000

0800ada0 <Decelerate>:
void Decelerate(){
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800ada4:	4b48      	ldr	r3, [pc, #288]	; (800aec8 <Decelerate+0x128>)
 800ada6:	2203      	movs	r2, #3
 800ada8:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 1950){
 800adaa:	e04d      	b.n	800ae48 <Decelerate+0xa8>
		mode.accel = 3;
 800adac:	4b46      	ldr	r3, [pc, #280]	; (800aec8 <Decelerate+0x128>)
 800adae:	2203      	movs	r2, #3
 800adb0:	705a      	strb	r2, [r3, #1]
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減速する距離は半区画 -
 800adb2:	4b46      	ldr	r3, [pc, #280]	; (800aecc <Decelerate+0x12c>)
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	4b46      	ldr	r3, [pc, #280]	; (800aed0 <Decelerate+0x130>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4413      	add	r3, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fd fae9 	bl	8008394 <__aeabi_i2d>
 800adc2:	a33d      	add	r3, pc, #244	; (adr r3, 800aeb8 <Decelerate+0x118>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7fd fdc0 	bl	800894c <__aeabi_dcmplt>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d037      	beq.n	800ae42 <Decelerate+0xa2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800add2:	4b40      	ldr	r3, [pc, #256]	; (800aed4 <Decelerate+0x134>)
 800add4:	edd3 7a00 	vldr	s15, [r3]
 800add8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800aed8 <Decelerate+0x138>
 800addc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	dd0d      	ble.n	800ae02 <Decelerate+0x62>
 800ade6:	4b3d      	ldr	r3, [pc, #244]	; (800aedc <Decelerate+0x13c>)
 800ade8:	edd3 7a00 	vldr	s15, [r3]
 800adec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800aee0 <Decelerate+0x140>
 800adf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf8:	dd03      	ble.n	800ae02 <Decelerate+0x62>
			  mode.control = 0;
 800adfa:	4b33      	ldr	r3, [pc, #204]	; (800aec8 <Decelerate+0x128>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	715a      	strb	r2, [r3, #5]
 800ae00:	e022      	b.n	800ae48 <Decelerate+0xa8>

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
 800ae02:	4b36      	ldr	r3, [pc, #216]	; (800aedc <Decelerate+0x13c>)
 800ae04:	edd3 7a00 	vldr	s15, [r3]
 800ae08:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800aee0 <Decelerate+0x140>
 800ae0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	dd03      	ble.n	800ae1e <Decelerate+0x7e>
			  mode.control = 1;
 800ae16:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <Decelerate+0x128>)
 800ae18:	2201      	movs	r2, #1
 800ae1a:	715a      	strb	r2, [r3, #5]
 800ae1c:	e014      	b.n	800ae48 <Decelerate+0xa8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ae1e:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <Decelerate+0x134>)
 800ae20:	edd3 7a00 	vldr	s15, [r3]
 800ae24:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800aed8 <Decelerate+0x138>
 800ae28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	dd03      	ble.n	800ae3a <Decelerate+0x9a>
			  mode.control = 2;
 800ae32:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <Decelerate+0x128>)
 800ae34:	2202      	movs	r2, #2
 800ae36:	715a      	strb	r2, [r3, #5]
 800ae38:	e006      	b.n	800ae48 <Decelerate+0xa8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800ae3a:	4b23      	ldr	r3, [pc, #140]	; (800aec8 <Decelerate+0x128>)
 800ae3c:	2204      	movs	r2, #4
 800ae3e:	715a      	strb	r2, [r3, #5]
 800ae40:	e002      	b.n	800ae48 <Decelerate+0xa8>
		}
		else mode.control = 4;
 800ae42:	4b21      	ldr	r3, [pc, #132]	; (800aec8 <Decelerate+0x128>)
 800ae44:	2204      	movs	r2, #4
 800ae46:	715a      	strb	r2, [r3, #5]
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 1950){
 800ae48:	4b20      	ldr	r3, [pc, #128]	; (800aecc <Decelerate+0x12c>)
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	4b20      	ldr	r3, [pc, #128]	; (800aed0 <Decelerate+0x130>)
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4413      	add	r3, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fd fa9e 	bl	8008394 <__aeabi_i2d>
 800ae58:	a319      	add	r3, pc, #100	; (adr r3, 800aec0 <Decelerate+0x120>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7fd fd75 	bl	800894c <__aeabi_dcmplt>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <Decelerate+0xee>
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <Decelerate+0x144>)
 800ae6a:	ed93 7a00 	vldr	s14, [r3]
 800ae6e:	4b1e      	ldr	r3, [pc, #120]	; (800aee8 <Decelerate+0x148>)
 800ae70:	edd3 7a00 	vldr	s15, [r3]
 800ae74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae80:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800aeec <Decelerate+0x14c>
 800ae84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8c:	d48e      	bmi.n	800adac <Decelerate+0xc>
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <Decelerate+0x128>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800ae94:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <Decelerate+0x128>)
 800ae96:	2205      	movs	r2, #5
 800ae98:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800ae9a:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <Decelerate+0x150>)
 800ae9c:	f04f 0200 	mov.w	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <Decelerate+0x128>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800aea8:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <Decelerate+0x154>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800aeae:	f7fe fd91 	bl	80099d4 <Motor_Count_Clear>

	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800aeb2:	bf00      	nop
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	89844e41 	.word	0x89844e41
 800aebc:	40ddaaef 	.word	0x40ddaaef
 800aec0:	a7233ab1 	.word	0xa7233ab1
 800aec4:	40e64033 	.word	0x40e64033
 800aec8:	20000074 	.word	0x20000074
 800aecc:	20000050 	.word	0x20000050
 800aed0:	2000005c 	.word	0x2000005c
 800aed4:	2001a6d0 	.word	0x2001a6d0
 800aed8:	42c80000 	.word	0x42c80000
 800aedc:	2000e04c 	.word	0x2000e04c
 800aee0:	430c0000 	.word	0x430c0000
 800aee4:	2001a798 	.word	0x2001a798
 800aee8:	20019ca8 	.word	0x20019ca8
 800aeec:	44f3c000 	.word	0x44f3c000
 800aef0:	200002f0 	.word	0x200002f0
 800aef4:	2000027c 	.word	0x2000027c

0800aef8 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800aef8:	b5b0      	push	{r4, r5, r7, lr}
 800aefa:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800aefc:	e07e      	b.n	800affc <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800aefe:	4b54      	ldr	r3, [pc, #336]	; (800b050 <straight+0x158>)
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4b54      	ldr	r3, [pc, #336]	; (800b054 <straight+0x15c>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4413      	add	r3, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fd fa43 	bl	8008394 <__aeabi_i2d>
 800af0e:	4604      	mov	r4, r0
 800af10:	460d      	mov	r5, r1
 800af12:	4b51      	ldr	r3, [pc, #324]	; (800b058 <straight+0x160>)
 800af14:	edd3 7a00 	vldr	s15, [r3]
 800af18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af1c:	ee17 0a90 	vmov	r0, s15
 800af20:	f7fd fa4a 	bl	80083b8 <__aeabi_f2d>
 800af24:	a346      	add	r3, pc, #280	; (adr r3, 800b040 <straight+0x148>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	f7fd fa9d 	bl	8008468 <__aeabi_dmul>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4620      	mov	r0, r4
 800af34:	4629      	mov	r1, r5
 800af36:	f7fd fd09 	bl	800894c <__aeabi_dcmplt>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d122      	bne.n	800af86 <straight+0x8e>
 800af40:	4b45      	ldr	r3, [pc, #276]	; (800b058 <straight+0x160>)
 800af42:	edd3 7a00 	vldr	s15, [r3]
 800af46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af4a:	ee17 0a90 	vmov	r0, s15
 800af4e:	f7fd fa33 	bl	80083b8 <__aeabi_f2d>
 800af52:	a33d      	add	r3, pc, #244	; (adr r3, 800b048 <straight+0x150>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7fd f8ce 	bl	80080f8 <__aeabi_dsub>
 800af5c:	4603      	mov	r3, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4625      	mov	r5, r4
 800af62:	461c      	mov	r4, r3
 800af64:	4b3a      	ldr	r3, [pc, #232]	; (800b050 <straight+0x158>)
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	4b3a      	ldr	r3, [pc, #232]	; (800b054 <straight+0x15c>)
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4413      	add	r3, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fd fa10 	bl	8008394 <__aeabi_i2d>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4620      	mov	r0, r4
 800af7a:	4629      	mov	r1, r5
 800af7c:	f7fd fce6 	bl	800894c <__aeabi_dcmplt>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d037      	beq.n	800aff6 <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af86:	4b35      	ldr	r3, [pc, #212]	; (800b05c <straight+0x164>)
 800af88:	edd3 7a00 	vldr	s15, [r3]
 800af8c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b060 <straight+0x168>
 800af90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af98:	dd0d      	ble.n	800afb6 <straight+0xbe>
 800af9a:	4b32      	ldr	r3, [pc, #200]	; (800b064 <straight+0x16c>)
 800af9c:	edd3 7a00 	vldr	s15, [r3]
 800afa0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b068 <straight+0x170>
 800afa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	dd03      	ble.n	800afb6 <straight+0xbe>
				  mode.control = 0;
 800afae:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <straight+0x174>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	715a      	strb	r2, [r3, #5]
 800afb4:	e01e      	b.n	800aff4 <straight+0xfc>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800afb6:	4b2b      	ldr	r3, [pc, #172]	; (800b064 <straight+0x16c>)
 800afb8:	edd3 7a00 	vldr	s15, [r3]
 800afbc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b068 <straight+0x170>
 800afc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc8:	dd03      	ble.n	800afd2 <straight+0xda>
				  mode.control = 1;
 800afca:	4b28      	ldr	r3, [pc, #160]	; (800b06c <straight+0x174>)
 800afcc:	2201      	movs	r2, #1
 800afce:	715a      	strb	r2, [r3, #5]
 800afd0:	e014      	b.n	800affc <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800afd2:	4b22      	ldr	r3, [pc, #136]	; (800b05c <straight+0x164>)
 800afd4:	edd3 7a00 	vldr	s15, [r3]
 800afd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b060 <straight+0x168>
 800afdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe4:	dd03      	ble.n	800afee <straight+0xf6>
				  mode.control = 2;
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <straight+0x174>)
 800afe8:	2202      	movs	r2, #2
 800afea:	715a      	strb	r2, [r3, #5]
 800afec:	e006      	b.n	800affc <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800afee:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <straight+0x174>)
 800aff0:	2204      	movs	r2, #4
 800aff2:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800aff4:	e002      	b.n	800affc <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800aff6:	4b1d      	ldr	r3, [pc, #116]	; (800b06c <straight+0x174>)
 800aff8:	2204      	movs	r2, #4
 800affa:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800affc:	4b14      	ldr	r3, [pc, #80]	; (800b050 <straight+0x158>)
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	4b14      	ldr	r3, [pc, #80]	; (800b054 <straight+0x15c>)
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4413      	add	r3, r2
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <straight+0x160>)
 800b010:	edd3 7a00 	vldr	s15, [r3]
 800b014:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b020:	f53f af6d 	bmi.w	800aefe <straight+0x6>
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
 800b024:	4b0a      	ldr	r3, [pc, #40]	; (800b050 <straight+0x158>)
 800b026:	2200      	movs	r2, #0
 800b028:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b02a:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <straight+0x15c>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800b030:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <straight+0x178>)
 800b032:	2200      	movs	r2, #0
 800b034:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ??��?��? : %d \r\n",check);

#endif
}
 800b036:	bf00      	nop
 800b038:	bdb0      	pop	{r4, r5, r7, pc}
 800b03a:	bf00      	nop
 800b03c:	f3af 8000 	nop.w
 800b040:	cccccccd 	.word	0xcccccccd
 800b044:	3fdccccc 	.word	0x3fdccccc
 800b048:	89844e42 	.word	0x89844e42
 800b04c:	40ddaaef 	.word	0x40ddaaef
 800b050:	20000050 	.word	0x20000050
 800b054:	2000005c 	.word	0x2000005c
 800b058:	20000000 	.word	0x20000000
 800b05c:	2001a6d0 	.word	0x2001a6d0
 800b060:	42c80000 	.word	0x42c80000
 800b064:	2000e04c 	.word	0x2000e04c
 800b068:	430c0000 	.word	0x430c0000
 800b06c:	20000074 	.word	0x20000074
 800b070:	20000068 	.word	0x20000068
 800b074:	00000000 	.word	0x00000000

0800b078 <IMU_turn>:

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800b078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b07c:	ed2d 8b02 	vpush	{d8}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	4603      	mov	r3, r0
 800b086:	ed87 0b00 	vstr	d0, [r7]
 800b08a:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b08c:	f7fe fff6 	bl	800a07c <Motor_PWM_Start>
	    if(target_angle < 0){
 800b090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	da37      	bge.n	800b108 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b098:	e027      	b.n	800b0ea <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b09a:	4b47      	ldr	r3, [pc, #284]	; (800b1b8 <IMU_turn+0x140>)
 800b09c:	ed93 8b00 	vldr	d8, [r3]
 800b0a0:	4b46      	ldr	r3, [pc, #280]	; (800b1bc <IMU_turn+0x144>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fd f987 	bl	80083b8 <__aeabi_f2d>
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <IMU_turn+0x144>)
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd f980 	bl	80083b8 <__aeabi_f2d>
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4689      	mov	r9, r1
 800b0bc:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <IMU_turn+0x144>)
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fd f979 	bl	80083b8 <__aeabi_f2d>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	ec43 2b15 	vmov	d5, r2, r3
 800b0ce:	ec49 8b14 	vmov	d4, r8, r9
 800b0d2:	ec45 4b13 	vmov	d3, r4, r5
 800b0d6:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b1b0 <IMU_turn+0x138>
 800b0da:	eeb0 1a48 	vmov.f32	s2, s16
 800b0de:	eef0 1a68 	vmov.f32	s3, s17
 800b0e2:	ed97 0b00 	vldr	d0, [r7]
 800b0e6:	f7ff f8cf 	bl	800a288 <IMU_Control>
	     while(target_angle < Body_angle){
 800b0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fd f950 	bl	8008394 <__aeabi_i2d>
 800b0f4:	4b32      	ldr	r3, [pc, #200]	; (800b1c0 <IMU_turn+0x148>)
 800b0f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	f7fd fc25 	bl	800894c <__aeabi_dcmplt>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1c8      	bne.n	800b09a <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dd37      	ble.n	800b180 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b110:	e027      	b.n	800b162 <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b112:	4b29      	ldr	r3, [pc, #164]	; (800b1b8 <IMU_turn+0x140>)
 800b114:	ed93 8b00 	vldr	d8, [r3]
 800b118:	4b28      	ldr	r3, [pc, #160]	; (800b1bc <IMU_turn+0x144>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fd f94b 	bl	80083b8 <__aeabi_f2d>
 800b122:	4604      	mov	r4, r0
 800b124:	460d      	mov	r5, r1
 800b126:	4b25      	ldr	r3, [pc, #148]	; (800b1bc <IMU_turn+0x144>)
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fd f944 	bl	80083b8 <__aeabi_f2d>
 800b130:	4680      	mov	r8, r0
 800b132:	4689      	mov	r9, r1
 800b134:	4b21      	ldr	r3, [pc, #132]	; (800b1bc <IMU_turn+0x144>)
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fd f93d 	bl	80083b8 <__aeabi_f2d>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	ec43 2b15 	vmov	d5, r2, r3
 800b146:	ec49 8b14 	vmov	d4, r8, r9
 800b14a:	ec45 4b13 	vmov	d3, r4, r5
 800b14e:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b1b0 <IMU_turn+0x138>
 800b152:	eeb0 1a48 	vmov.f32	s2, s16
 800b156:	eef0 1a68 	vmov.f32	s3, s17
 800b15a:	ed97 0b00 	vldr	d0, [r7]
 800b15e:	f7ff f893 	bl	800a288 <IMU_Control>
	     while(target_angle > Body_angle){
 800b162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b166:	4618      	mov	r0, r3
 800b168:	f7fd f914 	bl	8008394 <__aeabi_i2d>
 800b16c:	4b14      	ldr	r3, [pc, #80]	; (800b1c0 <IMU_turn+0x148>)
 800b16e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b172:	461a      	mov	r2, r3
 800b174:	4623      	mov	r3, r4
 800b176:	f7fd fc07 	bl	8008988 <__aeabi_dcmpgt>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1c8      	bne.n	800b112 <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <IMU_turn+0x14c>)
 800b182:	2200      	movs	r2, #0
 800b184:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b186:	4a10      	ldr	r2, [pc, #64]	; (800b1c8 <IMU_turn+0x150>)
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	f04f 0400 	mov.w	r4, #0
 800b190:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b194:	4a0a      	ldr	r2, [pc, #40]	; (800b1c0 <IMU_turn+0x148>)
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	f04f 0400 	mov.w	r4, #0
 800b19e:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b1a2:	bf00      	nop
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	ecbd 8b02 	vpop	{d8}
 800b1ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1b0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1b4:	3f50624d 	.word	0x3f50624d
 800b1b8:	20000308 	.word	0x20000308
 800b1bc:	20000044 	.word	0x20000044
 800b1c0:	200002f8 	.word	0x200002f8
 800b1c4:	20000074 	.word	0x20000074
 800b1c8:	20000300 	.word	0x20000300

0800b1cc <turn_right>:

void turn_right(){
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0

	//左右の車輪速度制御
	//or 角速度制御で旋回
	  uint8_t counter=0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	71fb      	strb	r3, [r7, #7]

	   while(counter < 1){
 800b1d6:	e045      	b.n	800b264 <turn_right+0x98>

			Target_velocity = 0;
 800b1d8:	4b28      	ldr	r3, [pc, #160]	; (800b27c <turn_right+0xb0>)
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b1e0:	4b27      	ldr	r3, [pc, #156]	; (800b280 <turn_right+0xb4>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b1e6:	f7fe fbf5 	bl	80099d4 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b1ea:	4b26      	ldr	r3, [pc, #152]	; (800b284 <turn_right+0xb8>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b1f0:	4b25      	ldr	r3, [pc, #148]	; (800b288 <turn_right+0xbc>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b1f6:	4b25      	ldr	r3, [pc, #148]	; (800b28c <turn_right+0xc0>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b1fc:	4b24      	ldr	r3, [pc, #144]	; (800b290 <turn_right+0xc4>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	70da      	strb	r2, [r3, #3]
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b202:	e005      	b.n	800b210 <turn_right+0x44>
		  mode.control = 3;
 800b204:	4b22      	ldr	r3, [pc, #136]	; (800b290 <turn_right+0xc4>)
 800b206:	2203      	movs	r2, #3
 800b208:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -5;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b20a:	4b22      	ldr	r3, [pc, #136]	; (800b294 <turn_right+0xc8>)
 800b20c:	4a22      	ldr	r2, [pc, #136]	; (800b298 <turn_right+0xcc>)
 800b20e:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b210:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <turn_right+0xb8>)
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <turn_right+0xbc>)
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b222:	4b1e      	ldr	r3, [pc, #120]	; (800b29c <turn_right+0xd0>)
 800b224:	edd3 7a00 	vldr	s15, [r3]
 800b228:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b22c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	d9e6      	bls.n	800b204 <turn_right+0x38>
		  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);
//		  mode.control = 3;
//		  Target_Rad_velo = -10;
	    	}
	      mode.enc = 0;
 800b236:	4b16      	ldr	r3, [pc, #88]	; (800b290 <turn_right+0xc4>)
 800b238:	2200      	movs	r2, #0
 800b23a:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b23c:	4b15      	ldr	r3, [pc, #84]	; (800b294 <turn_right+0xc8>)
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b244:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <turn_right+0xb0>)
 800b246:	f04f 0200 	mov.w	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b24c:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <turn_right+0xb8>)
 800b24e:	2200      	movs	r2, #0
 800b250:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <turn_right+0xbc>)
 800b254:	2200      	movs	r2, #0
 800b256:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b258:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <turn_right+0xc0>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	605a      	str	r2, [r3, #4]
	      counter++;
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	3301      	adds	r3, #1
 800b262:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d0b6      	beq.n	800b1d8 <turn_right+0xc>
	     }
		error_reset = 0;
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <turn_right+0xb4>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b270:	f7fe fbb0 	bl	80099d4 <Motor_Count_Clear>



}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200002f0 	.word	0x200002f0
 800b280:	2000027c 	.word	0x2000027c
 800b284:	20000050 	.word	0x20000050
 800b288:	2000005c 	.word	0x2000005c
 800b28c:	20000068 	.word	0x20000068
 800b290:	20000074 	.word	0x20000074
 800b294:	200002f4 	.word	0x200002f4
 800b298:	c0a00000 	.word	0xc0a00000
 800b29c:	20000004 	.word	0x20000004

0800b2a0 <turn_left>:

void turn_left(){
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b2aa:	e045      	b.n	800b338 <turn_left+0x98>

			Target_velocity = 0;
 800b2ac:	4b28      	ldr	r3, [pc, #160]	; (800b350 <turn_left+0xb0>)
 800b2ae:	f04f 0200 	mov.w	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b2b4:	4b27      	ldr	r3, [pc, #156]	; (800b354 <turn_left+0xb4>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b2ba:	f7fe fb8b 	bl	80099d4 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b2be:	4b26      	ldr	r3, [pc, #152]	; (800b358 <turn_left+0xb8>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b2c4:	4b25      	ldr	r3, [pc, #148]	; (800b35c <turn_left+0xbc>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b2ca:	4b25      	ldr	r3, [pc, #148]	; (800b360 <turn_left+0xc0>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b2d0:	4b24      	ldr	r3, [pc, #144]	; (800b364 <turn_left+0xc4>)
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b2d6:	e005      	b.n	800b2e4 <turn_left+0x44>

		  mode.control = 3;
 800b2d8:	4b22      	ldr	r3, [pc, #136]	; (800b364 <turn_left+0xc4>)
 800b2da:	2203      	movs	r2, #3
 800b2dc:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 5;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b2de:	4b22      	ldr	r3, [pc, #136]	; (800b368 <turn_left+0xc8>)
 800b2e0:	4a22      	ldr	r2, [pc, #136]	; (800b36c <turn_left+0xcc>)
 800b2e2:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <turn_left+0xbc>)
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <turn_left+0xb8>)
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <turn_left+0xd0>)
 800b2f8:	edd3 7a00 	vldr	s15, [r3]
 800b2fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b308:	d9e6      	bls.n	800b2d8 <turn_left+0x38>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b30a:	4b16      	ldr	r3, [pc, #88]	; (800b364 <turn_left+0xc4>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b310:	4b15      	ldr	r3, [pc, #84]	; (800b368 <turn_left+0xc8>)
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <turn_left+0xb0>)
 800b31a:	f04f 0200 	mov.w	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <turn_left+0xb8>)
 800b322:	2200      	movs	r2, #0
 800b324:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <turn_left+0xbc>)
 800b328:	2200      	movs	r2, #0
 800b32a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b32c:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <turn_left+0xc0>)
 800b32e:	2200      	movs	r2, #0
 800b330:	605a      	str	r2, [r3, #4]
    counter++;
 800b332:	79fb      	ldrb	r3, [r7, #7]
 800b334:	3301      	adds	r3, #1
 800b336:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0b6      	beq.n	800b2ac <turn_left+0xc>
   }
	error_reset = 0;
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <turn_left+0xb4>)
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b344:	f7fe fb46 	bl	80099d4 <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	200002f0 	.word	0x200002f0
 800b354:	2000027c 	.word	0x2000027c
 800b358:	20000050 	.word	0x20000050
 800b35c:	2000005c 	.word	0x2000005c
 800b360:	20000068 	.word	0x20000068
 800b364:	20000074 	.word	0x20000074
 800b368:	200002f4 	.word	0x200002f4
 800b36c:	40a00000 	.word	0x40a00000
 800b370:	20000004 	.word	0x20000004
 800b374:	00000000 	.word	0x00000000

0800b378 <slow_turn_R>:

void slow_turn_R(){
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b37c:	4b46      	ldr	r3, [pc, #280]	; (800b498 <slow_turn_R+0x120>)
 800b37e:	2206      	movs	r2, #6
 800b380:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b382:	e002      	b.n	800b38a <slow_turn_R+0x12>
			mode.accel = 6;
 800b384:	4b44      	ldr	r3, [pc, #272]	; (800b498 <slow_turn_R+0x120>)
 800b386:	2206      	movs	r2, #6
 800b388:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b38a:	4b44      	ldr	r3, [pc, #272]	; (800b49c <slow_turn_R+0x124>)
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	4b44      	ldr	r3, [pc, #272]	; (800b4a0 <slow_turn_R+0x128>)
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	4413      	add	r3, r2
 800b394:	4618      	mov	r0, r3
 800b396:	f7fc fffd 	bl	8008394 <__aeabi_i2d>
 800b39a:	a339      	add	r3, pc, #228	; (adr r3, 800b480 <slow_turn_R+0x108>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f7fd fad4 	bl	800894c <__aeabi_dcmplt>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1ec      	bne.n	800b384 <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b3aa:	4b3b      	ldr	r3, [pc, #236]	; (800b498 <slow_turn_R+0x120>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b3b0:	e013      	b.n	800b3da <slow_turn_R+0x62>
			Target_velocity = CURVE_SPEED;
 800b3b2:	4b3c      	ldr	r3, [pc, #240]	; (800b4a4 <slow_turn_R+0x12c>)
 800b3b4:	4a3c      	ldr	r2, [pc, #240]	; (800b4a8 <slow_turn_R+0x130>)
 800b3b6:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b3b8:	4b3c      	ldr	r3, [pc, #240]	; (800b4ac <slow_turn_R+0x134>)
 800b3ba:	4a3d      	ldr	r2, [pc, #244]	; (800b4b0 <slow_turn_R+0x138>)
 800b3bc:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b3be:	4b3b      	ldr	r3, [pc, #236]	; (800b4ac <slow_turn_R+0x134>)
 800b3c0:	edd3 7a00 	vldr	s15, [r3]
 800b3c4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b4b4 <slow_turn_R+0x13c>
 800b3c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b3cc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b4b8 <slow_turn_R+0x140>
 800b3d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3d4:	4b39      	ldr	r3, [pc, #228]	; (800b4bc <slow_turn_R+0x144>)
 800b3d6:	edc3 7a00 	vstr	s15, [r3]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b3da:	4b30      	ldr	r3, [pc, #192]	; (800b49c <slow_turn_R+0x124>)
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	4b30      	ldr	r3, [pc, #192]	; (800b4a0 <slow_turn_R+0x128>)
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fc ffd5 	bl	8008394 <__aeabi_i2d>
 800b3ea:	a325      	add	r3, pc, #148	; (adr r3, 800b480 <slow_turn_R+0x108>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7fd fac0 	bl	8008974 <__aeabi_dcmpge>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00f      	beq.n	800b41a <slow_turn_R+0xa2>
 800b3fa:	4b28      	ldr	r3, [pc, #160]	; (800b49c <slow_turn_R+0x124>)
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	4b28      	ldr	r3, [pc, #160]	; (800b4a0 <slow_turn_R+0x128>)
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	4413      	add	r3, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f7fc ffc5 	bl	8008394 <__aeabi_i2d>
 800b40a:	a31f      	add	r3, pc, #124	; (adr r3, 800b488 <slow_turn_R+0x110>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7fd fa9c 	bl	800894c <__aeabi_dcmplt>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1cb      	bne.n	800b3b2 <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b41a:	e002      	b.n	800b422 <slow_turn_R+0xaa>
			mode.accel = 7;
 800b41c:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <slow_turn_R+0x120>)
 800b41e:	2207      	movs	r2, #7
 800b420:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b422:	4b1e      	ldr	r3, [pc, #120]	; (800b49c <slow_turn_R+0x124>)
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	4b1e      	ldr	r3, [pc, #120]	; (800b4a0 <slow_turn_R+0x128>)
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	4413      	add	r3, r2
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fc ffb1 	bl	8008394 <__aeabi_i2d>
 800b432:	a317      	add	r3, pc, #92	; (adr r3, 800b490 <slow_turn_R+0x118>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f7fd fa88 	bl	800894c <__aeabi_dcmplt>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1ec      	bne.n	800b41c <slow_turn_R+0xa4>

		}
		mode.accel = 0;
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <slow_turn_R+0x120>)
 800b444:	2200      	movs	r2, #0
 800b446:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b448:	4b13      	ldr	r3, [pc, #76]	; (800b498 <slow_turn_R+0x120>)
 800b44a:	2204      	movs	r2, #4
 800b44c:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <slow_turn_R+0x124>)
 800b450:	2200      	movs	r2, #0
 800b452:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b454:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <slow_turn_R+0x128>)
 800b456:	2200      	movs	r2, #0
 800b458:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b45a:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <slow_turn_R+0x148>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b460:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <slow_turn_R+0x134>)
 800b462:	f04f 0200 	mov.w	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b468:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <slow_turn_R+0x144>)
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b470:	4b0c      	ldr	r3, [pc, #48]	; (800b4a4 <slow_turn_R+0x12c>)
 800b472:	4a14      	ldr	r2, [pc, #80]	; (800b4c4 <slow_turn_R+0x14c>)
 800b474:	601a      	str	r2, [r3, #0]
}
 800b476:	bf00      	nop
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	234f4839 	.word	0x234f4839
 800b484:	40b7f082 	.word	0x40b7f082
 800b488:	5fa0080d 	.word	0x5fa0080d
 800b48c:	40eff582 	.word	0x40eff582
 800b490:	5204f88a 	.word	0x5204f88a
 800b494:	40f179c9 	.word	0x40f179c9
 800b498:	20000074 	.word	0x20000074
 800b49c:	20000050 	.word	0x20000050
 800b4a0:	2000005c 	.word	0x2000005c
 800b4a4:	200002f0 	.word	0x200002f0
 800b4a8:	43340000 	.word	0x43340000
 800b4ac:	2000e030 	.word	0x2000e030
 800b4b0:	43780000 	.word	0x43780000
 800b4b4:	42600000 	.word	0x42600000
 800b4b8:	42f80000 	.word	0x42f80000
 800b4bc:	2000e010 	.word	0x2000e010
 800b4c0:	20000068 	.word	0x20000068
 800b4c4:	43870000 	.word	0x43870000

0800b4c8 <slow_turn_L>:

void slow_turn_L(){
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b4cc:	4b46      	ldr	r3, [pc, #280]	; (800b5e8 <slow_turn_L+0x120>)
 800b4ce:	2206      	movs	r2, #6
 800b4d0:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b4d2:	e002      	b.n	800b4da <slow_turn_L+0x12>
		mode.accel = 4;
 800b4d4:	4b44      	ldr	r3, [pc, #272]	; (800b5e8 <slow_turn_L+0x120>)
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b4da:	4b44      	ldr	r3, [pc, #272]	; (800b5ec <slow_turn_L+0x124>)
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	4b44      	ldr	r3, [pc, #272]	; (800b5f0 <slow_turn_L+0x128>)
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fc ff55 	bl	8008394 <__aeabi_i2d>
 800b4ea:	a339      	add	r3, pc, #228	; (adr r3, 800b5d0 <slow_turn_L+0x108>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7fd fa2c 	bl	800894c <__aeabi_dcmplt>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1ec      	bne.n	800b4d4 <slow_turn_L+0xc>

	}
	//加速やめる
	mode.accel = 0;
 800b4fa:	4b3b      	ldr	r3, [pc, #236]	; (800b5e8 <slow_turn_L+0x120>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b500:	e013      	b.n	800b52a <slow_turn_L+0x62>
		Target_velocity = CURVE_SPEED;
 800b502:	4b3c      	ldr	r3, [pc, #240]	; (800b5f4 <slow_turn_L+0x12c>)
 800b504:	4a3c      	ldr	r2, [pc, #240]	; (800b5f8 <slow_turn_L+0x130>)
 800b506:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b508:	4b3c      	ldr	r3, [pc, #240]	; (800b5fc <slow_turn_L+0x134>)
 800b50a:	4a3d      	ldr	r2, [pc, #244]	; (800b600 <slow_turn_L+0x138>)
 800b50c:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b50e:	4b3b      	ldr	r3, [pc, #236]	; (800b5fc <slow_turn_L+0x134>)
 800b510:	edd3 7a00 	vldr	s15, [r3]
 800b514:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b604 <slow_turn_L+0x13c>
 800b518:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b51c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b608 <slow_turn_L+0x140>
 800b520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b524:	4b39      	ldr	r3, [pc, #228]	; (800b60c <slow_turn_L+0x144>)
 800b526:	edc3 7a00 	vstr	s15, [r3]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b52a:	4b30      	ldr	r3, [pc, #192]	; (800b5ec <slow_turn_L+0x124>)
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	4b30      	ldr	r3, [pc, #192]	; (800b5f0 <slow_turn_L+0x128>)
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4413      	add	r3, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7fc ff2d 	bl	8008394 <__aeabi_i2d>
 800b53a:	a325      	add	r3, pc, #148	; (adr r3, 800b5d0 <slow_turn_L+0x108>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7fd fa18 	bl	8008974 <__aeabi_dcmpge>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00f      	beq.n	800b56a <slow_turn_L+0xa2>
 800b54a:	4b28      	ldr	r3, [pc, #160]	; (800b5ec <slow_turn_L+0x124>)
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	4b28      	ldr	r3, [pc, #160]	; (800b5f0 <slow_turn_L+0x128>)
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	4413      	add	r3, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7fc ff1d 	bl	8008394 <__aeabi_i2d>
 800b55a:	a31f      	add	r3, pc, #124	; (adr r3, 800b5d8 <slow_turn_L+0x110>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7fd f9f4 	bl	800894c <__aeabi_dcmplt>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1cb      	bne.n	800b502 <slow_turn_L+0x3a>
		//タイヤ幅が広くなってから比率を変えていなかったはず
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b56a:	e002      	b.n	800b572 <slow_turn_L+0xaa>
		mode.accel = 5;
 800b56c:	4b1e      	ldr	r3, [pc, #120]	; (800b5e8 <slow_turn_L+0x120>)
 800b56e:	2205      	movs	r2, #5
 800b570:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b572:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <slow_turn_L+0x124>)
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	4b1e      	ldr	r3, [pc, #120]	; (800b5f0 <slow_turn_L+0x128>)
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	4413      	add	r3, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fc ff09 	bl	8008394 <__aeabi_i2d>
 800b582:	a317      	add	r3, pc, #92	; (adr r3, 800b5e0 <slow_turn_L+0x118>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7fd f9e0 	bl	800894c <__aeabi_dcmplt>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1ec      	bne.n	800b56c <slow_turn_L+0xa4>

	}
	//加減速やめる
	mode.accel = 0;
 800b592:	4b15      	ldr	r3, [pc, #84]	; (800b5e8 <slow_turn_L+0x120>)
 800b594:	2200      	movs	r2, #0
 800b596:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b598:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <slow_turn_L+0x120>)
 800b59a:	2204      	movs	r2, #4
 800b59c:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <slow_turn_L+0x124>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <slow_turn_L+0x128>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b5aa:	4b19      	ldr	r3, [pc, #100]	; (800b610 <slow_turn_L+0x148>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b5b0:	4b16      	ldr	r3, [pc, #88]	; (800b60c <slow_turn_L+0x144>)
 800b5b2:	f04f 0200 	mov.w	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b5b8:	4b10      	ldr	r3, [pc, #64]	; (800b5fc <slow_turn_L+0x134>)
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <slow_turn_L+0x12c>)
 800b5c2:	4a14      	ldr	r2, [pc, #80]	; (800b614 <slow_turn_L+0x14c>)
 800b5c4:	601a      	str	r2, [r3, #0]
}
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	234f4839 	.word	0x234f4839
 800b5d4:	40b7f082 	.word	0x40b7f082
 800b5d8:	5fa0080d 	.word	0x5fa0080d
 800b5dc:	40eff582 	.word	0x40eff582
 800b5e0:	5204f88a 	.word	0x5204f88a
 800b5e4:	40f179c9 	.word	0x40f179c9
 800b5e8:	20000074 	.word	0x20000074
 800b5ec:	20000050 	.word	0x20000050
 800b5f0:	2000005c 	.word	0x2000005c
 800b5f4:	200002f0 	.word	0x200002f0
 800b5f8:	43340000 	.word	0x43340000
 800b5fc:	2000e010 	.word	0x2000e010
 800b600:	43780000 	.word	0x43780000
 800b604:	42600000 	.word	0x42600000
 800b608:	42f80000 	.word	0x42f80000
 800b60c:	2000e030 	.word	0x2000e030
 800b610:	20000068 	.word	0x20000068
 800b614:	43870000 	.word	0x43870000

0800b618 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b61c:	e070      	b.n	800b700 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b61e:	4b54      	ldr	r3, [pc, #336]	; (800b770 <shinchi_turn_R+0x158>)
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	4b54      	ldr	r3, [pc, #336]	; (800b774 <shinchi_turn_R+0x15c>)
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	4413      	add	r3, r2
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fc feb3 	bl	8008394 <__aeabi_i2d>
 800b62e:	a34a      	add	r3, pc, #296	; (adr r3, 800b758 <shinchi_turn_R+0x140>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f7fd f98a 	bl	800894c <__aeabi_dcmplt>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <shinchi_turn_R+0x32>
			mode.control = 4;
 800b63e:	4b4e      	ldr	r3, [pc, #312]	; (800b778 <shinchi_turn_R+0x160>)
 800b640:	2204      	movs	r2, #4
 800b642:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b644:	4b4d      	ldr	r3, [pc, #308]	; (800b77c <shinchi_turn_R+0x164>)
 800b646:	4a4e      	ldr	r2, [pc, #312]	; (800b780 <shinchi_turn_R+0x168>)
 800b648:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b64a:	4b49      	ldr	r3, [pc, #292]	; (800b770 <shinchi_turn_R+0x158>)
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b49      	ldr	r3, [pc, #292]	; (800b774 <shinchi_turn_R+0x15c>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	4413      	add	r3, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fc fe9d 	bl	8008394 <__aeabi_i2d>
 800b65a:	a33f      	add	r3, pc, #252	; (adr r3, 800b758 <shinchi_turn_R+0x140>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7fd f988 	bl	8008974 <__aeabi_dcmpge>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d022      	beq.n	800b6b0 <shinchi_turn_R+0x98>
 800b66a:	4b41      	ldr	r3, [pc, #260]	; (800b770 <shinchi_turn_R+0x158>)
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	4b41      	ldr	r3, [pc, #260]	; (800b774 <shinchi_turn_R+0x15c>)
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	4413      	add	r3, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f7fc fe8d 	bl	8008394 <__aeabi_i2d>
 800b67a:	a339      	add	r3, pc, #228	; (adr r3, 800b760 <shinchi_turn_R+0x148>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7fd f964 	bl	800894c <__aeabi_dcmplt>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d012      	beq.n	800b6b0 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b68a:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <shinchi_turn_R+0x160>)
 800b68c:	2206      	movs	r2, #6
 800b68e:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b690:	4b3a      	ldr	r3, [pc, #232]	; (800b77c <shinchi_turn_R+0x164>)
 800b692:	4a3b      	ldr	r2, [pc, #236]	; (800b780 <shinchi_turn_R+0x168>)
 800b694:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b696:	4b3b      	ldr	r3, [pc, #236]	; (800b784 <shinchi_turn_R+0x16c>)
 800b698:	4a3b      	ldr	r2, [pc, #236]	; (800b788 <shinchi_turn_R+0x170>)
 800b69a:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b69c:	4b39      	ldr	r3, [pc, #228]	; (800b784 <shinchi_turn_R+0x16c>)
 800b69e:	edd3 7a00 	vldr	s15, [r3]
 800b6a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b78c <shinchi_turn_R+0x174>
 800b6a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6aa:	4b39      	ldr	r3, [pc, #228]	; (800b790 <shinchi_turn_R+0x178>)
 800b6ac:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b6b0:	4b2f      	ldr	r3, [pc, #188]	; (800b770 <shinchi_turn_R+0x158>)
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <shinchi_turn_R+0x15c>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fc fe6a 	bl	8008394 <__aeabi_i2d>
 800b6c0:	a327      	add	r3, pc, #156	; (adr r3, 800b760 <shinchi_turn_R+0x148>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7fd f955 	bl	8008974 <__aeabi_dcmpge>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d100      	bne.n	800b6d2 <shinchi_turn_R+0xba>
 800b6d0:	e016      	b.n	800b700 <shinchi_turn_R+0xe8>
 800b6d2:	4b27      	ldr	r3, [pc, #156]	; (800b770 <shinchi_turn_R+0x158>)
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	4b27      	ldr	r3, [pc, #156]	; (800b774 <shinchi_turn_R+0x15c>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	4413      	add	r3, r2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fc fe59 	bl	8008394 <__aeabi_i2d>
 800b6e2:	a321      	add	r3, pc, #132	; (adr r3, 800b768 <shinchi_turn_R+0x150>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7fd f930 	bl	800894c <__aeabi_dcmplt>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d100      	bne.n	800b6f4 <shinchi_turn_R+0xdc>
 800b6f2:	e005      	b.n	800b700 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b6f4:	4b20      	ldr	r3, [pc, #128]	; (800b778 <shinchi_turn_R+0x160>)
 800b6f6:	2204      	movs	r2, #4
 800b6f8:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b6fa:	4b20      	ldr	r3, [pc, #128]	; (800b77c <shinchi_turn_R+0x164>)
 800b6fc:	4a20      	ldr	r2, [pc, #128]	; (800b780 <shinchi_turn_R+0x168>)
 800b6fe:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <shinchi_turn_R+0x158>)
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	4b1b      	ldr	r3, [pc, #108]	; (800b774 <shinchi_turn_R+0x15c>)
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	4413      	add	r3, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fc fe42 	bl	8008394 <__aeabi_i2d>
 800b710:	a315      	add	r3, pc, #84	; (adr r3, 800b768 <shinchi_turn_R+0x150>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7fd f919 	bl	800894c <__aeabi_dcmplt>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f47f af7e 	bne.w	800b61e <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800b722:	4b15      	ldr	r3, [pc, #84]	; (800b778 <shinchi_turn_R+0x160>)
 800b724:	2204      	movs	r2, #4
 800b726:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b728:	4b11      	ldr	r3, [pc, #68]	; (800b770 <shinchi_turn_R+0x158>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b72e:	4b11      	ldr	r3, [pc, #68]	; (800b774 <shinchi_turn_R+0x15c>)
 800b730:	2200      	movs	r2, #0
 800b732:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b734:	4b17      	ldr	r3, [pc, #92]	; (800b794 <shinchi_turn_R+0x17c>)
 800b736:	2200      	movs	r2, #0
 800b738:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b73a:	4b12      	ldr	r3, [pc, #72]	; (800b784 <shinchi_turn_R+0x16c>)
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b742:	4b13      	ldr	r3, [pc, #76]	; (800b790 <shinchi_turn_R+0x178>)
 800b744:	f04f 0200 	mov.w	r2, #0
 800b748:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b74a:	4b0c      	ldr	r3, [pc, #48]	; (800b77c <shinchi_turn_R+0x164>)
 800b74c:	4a12      	ldr	r2, [pc, #72]	; (800b798 <shinchi_turn_R+0x180>)
 800b74e:	601a      	str	r2, [r3, #0]

}
 800b750:	bf00      	nop
 800b752:	bd80      	pop	{r7, pc}
 800b754:	f3af 8000 	nop.w
 800b758:	4d2626e7 	.word	0x4d2626e7
 800b75c:	40dbb09b 	.word	0x40dbb09b
 800b760:	5c02ebaf 	.word	0x5c02ebaf
 800b764:	40eb0c7f 	.word	0x40eb0c7f
 800b768:	814aff91 	.word	0x814aff91
 800b76c:	40f47266 	.word	0x40f47266
 800b770:	20000050 	.word	0x20000050
 800b774:	2000005c 	.word	0x2000005c
 800b778:	20000074 	.word	0x20000074
 800b77c:	200002f0 	.word	0x200002f0
 800b780:	43340000 	.word	0x43340000
 800b784:	2000e030 	.word	0x2000e030
 800b788:	43b40000 	.word	0x43b40000
 800b78c:	00000000 	.word	0x00000000
 800b790:	2000e010 	.word	0x2000e010
 800b794:	20000068 	.word	0x20000068
 800b798:	43870000 	.word	0x43870000
 800b79c:	00000000 	.word	0x00000000

0800b7a0 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b7a4:	e070      	b.n	800b888 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b7a6:	4b54      	ldr	r3, [pc, #336]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	4b54      	ldr	r3, [pc, #336]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fc fdef 	bl	8008394 <__aeabi_i2d>
 800b7b6:	a34a      	add	r3, pc, #296	; (adr r3, 800b8e0 <shinchi_turn_L+0x140>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7fd f8c6 	bl	800894c <__aeabi_dcmplt>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <shinchi_turn_L+0x32>
			mode.control = 4;
 800b7c6:	4b4e      	ldr	r3, [pc, #312]	; (800b900 <shinchi_turn_L+0x160>)
 800b7c8:	2204      	movs	r2, #4
 800b7ca:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b7cc:	4b4d      	ldr	r3, [pc, #308]	; (800b904 <shinchi_turn_L+0x164>)
 800b7ce:	4a4e      	ldr	r2, [pc, #312]	; (800b908 <shinchi_turn_L+0x168>)
 800b7d0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b7d2:	4b49      	ldr	r3, [pc, #292]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b49      	ldr	r3, [pc, #292]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	4413      	add	r3, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc fdd9 	bl	8008394 <__aeabi_i2d>
 800b7e2:	a33f      	add	r3, pc, #252	; (adr r3, 800b8e0 <shinchi_turn_L+0x140>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7fd f8c4 	bl	8008974 <__aeabi_dcmpge>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d022      	beq.n	800b838 <shinchi_turn_L+0x98>
 800b7f2:	4b41      	ldr	r3, [pc, #260]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	4b41      	ldr	r3, [pc, #260]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fc fdc9 	bl	8008394 <__aeabi_i2d>
 800b802:	a339      	add	r3, pc, #228	; (adr r3, 800b8e8 <shinchi_turn_L+0x148>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7fd f8a0 	bl	800894c <__aeabi_dcmplt>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d012      	beq.n	800b838 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b812:	4b3b      	ldr	r3, [pc, #236]	; (800b900 <shinchi_turn_L+0x160>)
 800b814:	2206      	movs	r2, #6
 800b816:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b818:	4b3a      	ldr	r3, [pc, #232]	; (800b904 <shinchi_turn_L+0x164>)
 800b81a:	4a3b      	ldr	r2, [pc, #236]	; (800b908 <shinchi_turn_L+0x168>)
 800b81c:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b81e:	4b3b      	ldr	r3, [pc, #236]	; (800b90c <shinchi_turn_L+0x16c>)
 800b820:	4a3b      	ldr	r2, [pc, #236]	; (800b910 <shinchi_turn_L+0x170>)
 800b822:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b824:	4b39      	ldr	r3, [pc, #228]	; (800b90c <shinchi_turn_L+0x16c>)
 800b826:	edd3 7a00 	vldr	s15, [r3]
 800b82a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b914 <shinchi_turn_L+0x174>
 800b82e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b832:	4b39      	ldr	r3, [pc, #228]	; (800b918 <shinchi_turn_L+0x178>)
 800b834:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b838:	4b2f      	ldr	r3, [pc, #188]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	4b2f      	ldr	r3, [pc, #188]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4413      	add	r3, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f7fc fda6 	bl	8008394 <__aeabi_i2d>
 800b848:	a327      	add	r3, pc, #156	; (adr r3, 800b8e8 <shinchi_turn_L+0x148>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7fd f891 	bl	8008974 <__aeabi_dcmpge>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d100      	bne.n	800b85a <shinchi_turn_L+0xba>
 800b858:	e016      	b.n	800b888 <shinchi_turn_L+0xe8>
 800b85a:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	4b27      	ldr	r3, [pc, #156]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	4413      	add	r3, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f7fc fd95 	bl	8008394 <__aeabi_i2d>
 800b86a:	a321      	add	r3, pc, #132	; (adr r3, 800b8f0 <shinchi_turn_L+0x150>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7fd f86c 	bl	800894c <__aeabi_dcmplt>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d100      	bne.n	800b87c <shinchi_turn_L+0xdc>
 800b87a:	e005      	b.n	800b888 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b87c:	4b20      	ldr	r3, [pc, #128]	; (800b900 <shinchi_turn_L+0x160>)
 800b87e:	2204      	movs	r2, #4
 800b880:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <shinchi_turn_L+0x164>)
 800b884:	4a20      	ldr	r2, [pc, #128]	; (800b908 <shinchi_turn_L+0x168>)
 800b886:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b888:	4b1b      	ldr	r3, [pc, #108]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b1b      	ldr	r3, [pc, #108]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4413      	add	r3, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fc fd7e 	bl	8008394 <__aeabi_i2d>
 800b898:	a315      	add	r3, pc, #84	; (adr r3, 800b8f0 <shinchi_turn_L+0x150>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7fd f855 	bl	800894c <__aeabi_dcmplt>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f47f af7e 	bne.w	800b7a6 <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800b8aa:	4b15      	ldr	r3, [pc, #84]	; (800b900 <shinchi_turn_L+0x160>)
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b8b0:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <shinchi_turn_L+0x158>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <shinchi_turn_L+0x15c>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b8bc:	4b17      	ldr	r3, [pc, #92]	; (800b91c <shinchi_turn_L+0x17c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b8c2:	4b15      	ldr	r3, [pc, #84]	; (800b918 <shinchi_turn_L+0x178>)
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b8ca:	4b10      	ldr	r3, [pc, #64]	; (800b90c <shinchi_turn_L+0x16c>)
 800b8cc:	f04f 0200 	mov.w	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <shinchi_turn_L+0x164>)
 800b8d4:	4a12      	ldr	r2, [pc, #72]	; (800b920 <shinchi_turn_L+0x180>)
 800b8d6:	601a      	str	r2, [r3, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	4d2626e7 	.word	0x4d2626e7
 800b8e4:	40dbb09b 	.word	0x40dbb09b
 800b8e8:	5c02ebaf 	.word	0x5c02ebaf
 800b8ec:	40eb0c7f 	.word	0x40eb0c7f
 800b8f0:	814aff91 	.word	0x814aff91
 800b8f4:	40f47266 	.word	0x40f47266
 800b8f8:	20000050 	.word	0x20000050
 800b8fc:	2000005c 	.word	0x2000005c
 800b900:	20000074 	.word	0x20000074
 800b904:	200002f0 	.word	0x200002f0
 800b908:	43340000 	.word	0x43340000
 800b90c:	2000e010 	.word	0x2000e010
 800b910:	43b40000 	.word	0x43b40000
 800b914:	00000000 	.word	0x00000000
 800b918:	2000e030 	.word	0x2000e030
 800b91c:	20000068 	.word	0x20000068
 800b920:	43870000 	.word	0x43870000

0800b924 <rotate180>:
void rotate180(){
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b92e:	e054      	b.n	800b9da <rotate180+0xb6>

		Target_velocity = 0;
 800b930:	4b30      	ldr	r3, [pc, #192]	; (800b9f4 <rotate180+0xd0>)
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b938:	4b2f      	ldr	r3, [pc, #188]	; (800b9f8 <rotate180+0xd4>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b93e:	f7fe f849 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b942:	4b2e      	ldr	r3, [pc, #184]	; (800b9fc <rotate180+0xd8>)
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b948:	4b2d      	ldr	r3, [pc, #180]	; (800ba00 <rotate180+0xdc>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b94e:	4b2d      	ldr	r3, [pc, #180]	; (800ba04 <rotate180+0xe0>)
 800b950:	2200      	movs	r2, #0
 800b952:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b954:	4b2c      	ldr	r3, [pc, #176]	; (800ba08 <rotate180+0xe4>)
 800b956:	2201      	movs	r2, #1
 800b958:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b95a:	e005      	b.n	800b968 <rotate180+0x44>
	  mode.control = 3;
 800b95c:	4b2a      	ldr	r3, [pc, #168]	; (800ba08 <rotate180+0xe4>)
 800b95e:	2203      	movs	r2, #3
 800b960:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b962:	4b2a      	ldr	r3, [pc, #168]	; (800ba0c <rotate180+0xe8>)
 800b964:	4a2a      	ldr	r2, [pc, #168]	; (800ba10 <rotate180+0xec>)
 800b966:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b968:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <rotate180+0xd8>)
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	ee07 3a90 	vmov	s15, r3
 800b970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b974:	4b27      	ldr	r3, [pc, #156]	; (800ba14 <rotate180+0xf0>)
 800b976:	edd3 7a00 	vldr	s15, [r3]
 800b97a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b97e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b986:	d9e9      	bls.n	800b95c <rotate180+0x38>
 800b988:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <rotate180+0xdc>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b994:	4b1f      	ldr	r3, [pc, #124]	; (800ba14 <rotate180+0xf0>)
 800b996:	edd3 7a00 	vldr	s15, [r3]
 800b99a:	eef1 7a67 	vneg.f32	s15, s15
 800b99e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9aa:	dad7      	bge.n	800b95c <rotate180+0x38>
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800b9ac:	4b16      	ldr	r3, [pc, #88]	; (800ba08 <rotate180+0xe4>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800b9b2:	4b10      	ldr	r3, [pc, #64]	; (800b9f4 <rotate180+0xd0>)
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800b9ba:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <rotate180+0xe8>)
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	; (800b9fc <rotate180+0xd8>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ba00 <rotate180+0xdc>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <rotate180+0xe0>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	605a      	str	r2, [r3, #4]

      counter++;
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0a7      	beq.n	800b930 <rotate180+0xc>
     }
	error_reset = 0;
 800b9e0:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <rotate180+0xd4>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b9e6:	f7fd fff5 	bl	80099d4 <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200002f0 	.word	0x200002f0
 800b9f8:	2000027c 	.word	0x2000027c
 800b9fc:	20000050 	.word	0x20000050
 800ba00:	2000005c 	.word	0x2000005c
 800ba04:	20000068 	.word	0x20000068
 800ba08:	20000074 	.word	0x20000074
 800ba0c:	200002f4 	.word	0x200002f4
 800ba10:	c0c00000 	.word	0xc0c00000
 800ba14:	20000004 	.word	0x20000004

0800ba18 <back_calib>:
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ba1e:	4b2a      	ldr	r3, [pc, #168]	; (800bac8 <back_calib+0xb0>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba24:	f7fd ffd6 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800ba28:	4b28      	ldr	r3, [pc, #160]	; (800bacc <back_calib+0xb4>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba2e:	4b28      	ldr	r3, [pc, #160]	; (800bad0 <back_calib+0xb8>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800ba34:	4b27      	ldr	r3, [pc, #156]	; (800bad4 <back_calib+0xbc>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ba3a:	4b27      	ldr	r3, [pc, #156]	; (800bad8 <back_calib+0xc0>)
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800ba40:	e005      	b.n	800ba4e <back_calib+0x36>
    	Target_velocity = -90;
 800ba42:	4b26      	ldr	r3, [pc, #152]	; (800badc <back_calib+0xc4>)
 800ba44:	4a26      	ldr	r2, [pc, #152]	; (800bae0 <back_calib+0xc8>)
 800ba46:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800ba48:	4b23      	ldr	r3, [pc, #140]	; (800bad8 <back_calib+0xc0>)
 800ba4a:	2204      	movs	r2, #4
 800ba4c:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800ba4e:	4b1f      	ldr	r3, [pc, #124]	; (800bacc <back_calib+0xb4>)
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	4b1f      	ldr	r3, [pc, #124]	; (800bad0 <back_calib+0xb8>)
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	4413      	add	r3, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fc fc9b 	bl	8008394 <__aeabi_i2d>
 800ba5e:	a318      	add	r3, pc, #96	; (adr r3, 800bac0 <back_calib+0xa8>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f7fc ff90 	bl	8008988 <__aeabi_dcmpgt>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e9      	bne.n	800ba42 <back_calib+0x2a>
    }
    Target_velocity = 0;
 800ba6e:	4b1b      	ldr	r3, [pc, #108]	; (800badc <back_calib+0xc4>)
 800ba70:	f04f 0200 	mov.w	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800ba76:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <back_calib+0xc0>)
 800ba78:	2205      	movs	r2, #5
 800ba7a:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800ba7c:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <back_calib+0xc0>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800ba82:	4b12      	ldr	r3, [pc, #72]	; (800bacc <back_calib+0xb4>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba88:	4b11      	ldr	r3, [pc, #68]	; (800bad0 <back_calib+0xb8>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ba8e:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <back_calib+0xbc>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <back_calib+0xb0>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba9a:	f7fd ff9b 	bl	80099d4 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800ba9e:	2300      	movs	r3, #0
 800baa0:	607b      	str	r3, [r7, #4]
 800baa2:	e002      	b.n	800baaa <back_calib+0x92>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	3301      	adds	r3, #1
 800baa8:	607b      	str	r3, [r7, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a0d      	ldr	r2, [pc, #52]	; (800bae4 <back_calib+0xcc>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	ddf8      	ble.n	800baa4 <back_calib+0x8c>

}
 800bab2:	bf00      	nop
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w
 800bac0:	107febef 	.word	0x107febef
 800bac4:	c0d58254 	.word	0xc0d58254
 800bac8:	2000027c 	.word	0x2000027c
 800bacc:	20000050 	.word	0x20000050
 800bad0:	2000005c 	.word	0x2000005c
 800bad4:	20000068 	.word	0x20000068
 800bad8:	20000074 	.word	0x20000074
 800badc:	200002f0 	.word	0x200002f0
 800bae0:	c2b40000 	.word	0xc2b40000
 800bae4:	0001d4bf 	.word	0x0001d4bf

0800bae8 <R_turn_select>:
	//経過時間計測オフ



}
void R_turn_select(){
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800baec:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <R_turn_select+0x80>)
 800baee:	7a5b      	ldrb	r3, [r3, #9]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d82d      	bhi.n	800bb50 <R_turn_select+0x68>
 800baf4:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <R_turn_select+0x14>)
 800baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafa:	bf00      	nop
 800bafc:	0800bb0d 	.word	0x0800bb0d
 800bb00:	0800bb2b 	.word	0x0800bb2b
 800bb04:	0800bb31 	.word	0x0800bb31
 800bb08:	0800bb37 	.word	0x0800bb37
  case 0:
	  Decelerate();
 800bb0c:	f7ff f948 	bl	800ada0 <Decelerate>
	  wait(0.3);
 800bb10:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bb58 <R_turn_select+0x70>
 800bb14:	f7ff f816 	bl	800ab44 <wait>
	  turn_right();
 800bb18:	f7ff fb58 	bl	800b1cc <turn_right>
	  wait(0.3);
 800bb1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb58 <R_turn_select+0x70>
 800bb20:	f7ff f810 	bl	800ab44 <wait>
      Accelerate();
 800bb24:	f7ff f88c 	bl	800ac40 <Accelerate>
      break;
 800bb28:	e012      	b.n	800bb50 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800bb2a:	f7ff fc25 	bl	800b378 <slow_turn_R>
	  break;
 800bb2e:	e00f      	b.n	800bb50 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800bb30:	f7ff fd72 	bl	800b618 <shinchi_turn_R>
	  break;
 800bb34:	e00c      	b.n	800bb50 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800bb36:	f7ff f933 	bl	800ada0 <Decelerate>
      IMU_turn(-90,-5);
 800bb3a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb60 <R_turn_select+0x78>
 800bb3e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bb42:	f7ff fa99 	bl	800b078 <IMU_turn>
      IMU_init();
 800bb46:	f7fd fe99 	bl	800987c <IMU_init>
      Accelerate();
 800bb4a:	f7ff f879 	bl	800ac40 <Accelerate>
      break;
 800bb4e:	bf00      	nop
  }
}
 800bb50:	bf00      	nop
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	f3af 8000 	nop.w
 800bb58:	33333333 	.word	0x33333333
 800bb5c:	3fd33333 	.word	0x3fd33333
 800bb60:	00000000 	.word	0x00000000
 800bb64:	c0140000 	.word	0xc0140000
 800bb68:	20000074 	.word	0x20000074
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <L_turn_select>:
void L_turn_select(){
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bb74:	4b1e      	ldr	r3, [pc, #120]	; (800bbf0 <L_turn_select+0x80>)
 800bb76:	7a5b      	ldrb	r3, [r3, #9]
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d82c      	bhi.n	800bbd6 <L_turn_select+0x66>
 800bb7c:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <L_turn_select+0x14>)
 800bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb82:	bf00      	nop
 800bb84:	0800bb95 	.word	0x0800bb95
 800bb88:	0800bbb3 	.word	0x0800bbb3
 800bb8c:	0800bbb9 	.word	0x0800bbb9
 800bb90:	0800bbbf 	.word	0x0800bbbf
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800bb94:	f7ff f904 	bl	800ada0 <Decelerate>
	  wait(0.3);
 800bb98:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bbe0 <L_turn_select+0x70>
 800bb9c:	f7fe ffd2 	bl	800ab44 <wait>
	  turn_left();
 800bba0:	f7ff fb7e 	bl	800b2a0 <turn_left>
	  wait(0.3);
 800bba4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bbe0 <L_turn_select+0x70>
 800bba8:	f7fe ffcc 	bl	800ab44 <wait>
      Accelerate();
 800bbac:	f7ff f848 	bl	800ac40 <Accelerate>
      break;
 800bbb0:	e011      	b.n	800bbd6 <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bbb2:	f7ff fc89 	bl	800b4c8 <slow_turn_L>
	  break;
 800bbb6:	e00e      	b.n	800bbd6 <L_turn_select+0x66>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800bbb8:	f7ff fdf2 	bl	800b7a0 <shinchi_turn_L>
	  break;
 800bbbc:	e00b      	b.n	800bbd6 <L_turn_select+0x66>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800bbbe:	f7ff f8ef 	bl	800ada0 <Decelerate>
      IMU_turn(90,5);
 800bbc2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bbe8 <L_turn_select+0x78>
 800bbc6:	205a      	movs	r0, #90	; 0x5a
 800bbc8:	f7ff fa56 	bl	800b078 <IMU_turn>
      IMU_init();
 800bbcc:	f7fd fe56 	bl	800987c <IMU_init>
      Accelerate();
 800bbd0:	f7ff f836 	bl	800ac40 <Accelerate>
      break;
 800bbd4:	bf00      	nop
  }
}
 800bbd6:	bf00      	nop
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	f3af 8000 	nop.w
 800bbe0:	33333333 	.word	0x33333333
 800bbe4:	3fd33333 	.word	0x3fd33333
 800bbe8:	00000000 	.word	0x00000000
 800bbec:	40140000 	.word	0x40140000
 800bbf0:	20000074 	.word	0x20000074

0800bbf4 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bbf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbfc:	485b      	ldr	r0, [pc, #364]	; (800bd6c <Execution_Select+0x178>)
 800bbfe:	f007 f807 	bl	8012c10 <HAL_GPIO_ReadPin>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	f040 80a3 	bne.w	800bd50 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800bc0a:	4859      	ldr	r0, [pc, #356]	; (800bd70 <Execution_Select+0x17c>)
 800bc0c:	f00a ff40 	bl	8016a90 <puts>
			Motor_PWM_Stop();
 800bc10:	f7fe fa4e 	bl	800a0b0 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bc14:	4857      	ldr	r0, [pc, #348]	; (800bd74 <Execution_Select+0x180>)
 800bc16:	f008 fa32 	bl	801407e <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bc1a:	4857      	ldr	r0, [pc, #348]	; (800bd78 <Execution_Select+0x184>)
 800bc1c:	f008 fa2f 	bl	801407e <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bc20:	f7fe f9d6 	bl	8009fd0 <Emitter_OFF>
			ADC_Stop();
 800bc24:	f7fe fa02 	bl	800a02c <ADC_Stop>
	    	HAL_Delay(400);
 800bc28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bc2c:	f005 f832 	bl	8010c94 <HAL_Delay>

	    	mode.select += 1;
 800bc30:	4b52      	ldr	r3, [pc, #328]	; (800bd7c <Execution_Select+0x188>)
 800bc32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	3301      	adds	r3, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	b25a      	sxtb	r2, r3
 800bc3e:	4b4f      	ldr	r3, [pc, #316]	; (800bd7c <Execution_Select+0x188>)
 800bc40:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bc42:	4b4e      	ldr	r3, [pc, #312]	; (800bd7c <Execution_Select+0x188>)
 800bc44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc48:	2b05      	cmp	r3, #5
 800bc4a:	f040 8081 	bne.w	800bd50 <Execution_Select+0x15c>
	    		mode.select = 3;
 800bc4e:	4b4b      	ldr	r3, [pc, #300]	; (800bd7c <Execution_Select+0x188>)
 800bc50:	2203      	movs	r2, #3
 800bc52:	711a      	strb	r2, [r3, #4]

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
 800bc54:	e07c      	b.n	800bd50 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800bc56:	4b4a      	ldr	r3, [pc, #296]	; (800bd80 <Execution_Select+0x18c>)
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	4b49      	ldr	r3, [pc, #292]	; (800bd84 <Execution_Select+0x190>)
 800bc5e:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bc60:	4b48      	ldr	r3, [pc, #288]	; (800bd84 <Execution_Select+0x190>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4619      	mov	r1, r3
 800bc66:	4848      	ldr	r0, [pc, #288]	; (800bd88 <Execution_Select+0x194>)
 800bc68:	f00a fe9e 	bl	80169a8 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800bc6c:	4b45      	ldr	r3, [pc, #276]	; (800bd84 <Execution_Select+0x190>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f249 522e 	movw	r2, #38190	; 0x952e
 800bc74:	4293      	cmp	r3, r2
 800bc76:	dd1e      	ble.n	800bcb6 <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800bc78:	4b40      	ldr	r3, [pc, #256]	; (800bd7c <Execution_Select+0x188>)
 800bc7a:	f993 3000 	ldrsb.w	r3, [r3]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	3301      	adds	r3, #1
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	b25a      	sxtb	r2, r3
 800bc86:	4b3d      	ldr	r3, [pc, #244]	; (800bd7c <Execution_Select+0x188>)
 800bc88:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bc8a:	4b3c      	ldr	r3, [pc, #240]	; (800bd7c <Execution_Select+0x188>)
 800bc8c:	f993 3000 	ldrsb.w	r3, [r3]
 800bc90:	2b07      	cmp	r3, #7
 800bc92:	dd02      	ble.n	800bc9a <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800bc94:	4b39      	ldr	r3, [pc, #228]	; (800bd7c <Execution_Select+0x188>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bc9a:	f7fe fc8d 	bl	800a5b8 <LED_Change>

	  	  Encoder_Reset();
 800bc9e:	f7fe feef 	bl	800aa80 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bca2:	4b36      	ldr	r3, [pc, #216]	; (800bd7c <Execution_Select+0x188>)
 800bca4:	f993 2000 	ldrsb.w	r2, [r3]
 800bca8:	4b34      	ldr	r3, [pc, #208]	; (800bd7c <Execution_Select+0x188>)
 800bcaa:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bcac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bcb0:	f004 fff0 	bl	8010c94 <HAL_Delay>
 800bcb4:	e04c      	b.n	800bd50 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bcb6:	4b33      	ldr	r3, [pc, #204]	; (800bd84 <Execution_Select+0x190>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f245 522f 	movw	r2, #21807	; 0x552f
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	dc1e      	bgt.n	800bd00 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800bcc2:	4b2e      	ldr	r3, [pc, #184]	; (800bd7c <Execution_Select+0x188>)
 800bcc4:	f993 3000 	ldrsb.w	r3, [r3]
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	3b01      	subs	r3, #1
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	b25a      	sxtb	r2, r3
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <Execution_Select+0x188>)
 800bcd2:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800bcd4:	4b29      	ldr	r3, [pc, #164]	; (800bd7c <Execution_Select+0x188>)
 800bcd6:	f993 3000 	ldrsb.w	r3, [r3]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	da02      	bge.n	800bce4 <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800bcde:	4b27      	ldr	r3, [pc, #156]	; (800bd7c <Execution_Select+0x188>)
 800bce0:	2207      	movs	r2, #7
 800bce2:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bce4:	f7fe fc68 	bl	800a5b8 <LED_Change>

	  	  Encoder_Reset();
 800bce8:	f7fe feca 	bl	800aa80 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bcec:	4b23      	ldr	r3, [pc, #140]	; (800bd7c <Execution_Select+0x188>)
 800bcee:	f993 2000 	ldrsb.w	r2, [r3]
 800bcf2:	4b22      	ldr	r3, [pc, #136]	; (800bd7c <Execution_Select+0x188>)
 800bcf4:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bcf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bcfa:	f004 ffcb 	bl	8010c94 <HAL_Delay>
 800bcfe:	e027      	b.n	800bd50 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bd00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd04:	4819      	ldr	r0, [pc, #100]	; (800bd6c <Execution_Select+0x178>)
 800bd06:	f006 ff83 	bl	8012c10 <HAL_GPIO_ReadPin>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d11f      	bne.n	800bd50 <Execution_Select+0x15c>
		  printf("\r\n");
 800bd10:	481e      	ldr	r0, [pc, #120]	; (800bd8c <Execution_Select+0x198>)
 800bd12:	f00a febd 	bl	8016a90 <puts>
		      HAL_Delay(500);
 800bd16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd1a:	f004 ffbb 	bl	8010c94 <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800bd1e:	f7fe f9e1 	bl	800a0e4 <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bd22:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <Execution_Select+0x18c>)
 800bd24:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd28:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bd2a:	4b19      	ldr	r3, [pc, #100]	; (800bd90 <Execution_Select+0x19c>)
 800bd2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd30:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800bd32:	4811      	ldr	r0, [pc, #68]	; (800bd78 <Execution_Select+0x184>)
 800bd34:	f008 f97f 	bl	8014036 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bd38:	480e      	ldr	r0, [pc, #56]	; (800bd74 <Execution_Select+0x180>)
 800bd3a:	f008 f97c 	bl	8014036 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <Execution_Select+0x188>)
 800bd40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	3301      	adds	r3, #1
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	b25a      	sxtb	r2, r3
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <Execution_Select+0x188>)
 800bd4e:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <Execution_Select+0x188>)
 800bd52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	bfb8      	it	lt
 800bd5e:	425b      	neglt	r3, r3
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	f43f af77 	beq.w	800bc56 <Execution_Select+0x62>
}

	}
  }
 800bd68:	bf00      	nop
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	40020400 	.word	0x40020400
 800bd70:	080188a4 	.word	0x080188a4
 800bd74:	2001a2a8 	.word	0x2001a2a8
 800bd78:	2000e050 	.word	0x2000e050
 800bd7c:	20000074 	.word	0x20000074
 800bd80:	40000400 	.word	0x40000400
 800bd84:	20000050 	.word	0x20000050
 800bd88:	080188b0 	.word	0x080188b0
 800bd8c:	08018810 	.word	0x08018810
 800bd90:	40000800 	.word	0x40000800

0800bd94 <Walk_Map_Update>:
void Gain_Change(){

}


void Walk_Map_Update(){
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	2300      	movs	r3, #0
 800bda8:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	e013      	b.n	800bdd8 <Walk_Map_Update+0x44>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60bb      	str	r3, [r7, #8]
 800bdb4:	e00a      	b.n	800bdcc <Walk_Map_Update+0x38>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800bdb6:	4a93      	ldr	r2, [pc, #588]	; (800c004 <Walk_Map_Update+0x270>)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	441a      	add	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	220f      	movs	r2, #15
 800bdc4:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60bb      	str	r3, [r7, #8]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	ddf1      	ble.n	800bdb6 <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	dde8      	ble.n	800bdb0 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画�?0に初期�?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bdde:	2302      	movs	r3, #2
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e013      	b.n	800be0c <Walk_Map_Update+0x78>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bde4:	2302      	movs	r3, #2
 800bde6:	60bb      	str	r3, [r7, #8]
 800bde8:	e00a      	b.n	800be00 <Walk_Map_Update+0x6c>
			walk_map[i][j] = 0;
 800bdea:	4a86      	ldr	r2, [pc, #536]	; (800c004 <Walk_Map_Update+0x270>)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	441a      	add	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	60bb      	str	r3, [r7, #8]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b03      	cmp	r3, #3
 800be04:	ddf1      	ble.n	800bdea <Walk_Map_Update+0x56>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b03      	cmp	r3, #3
 800be10:	dde8      	ble.n	800bde4 <Walk_Map_Update+0x50>
		}
	}

	//壁が無�?として、�?�区画に歩数を割り当てる�??
	do{
		flag = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be16:	2300      	movs	r3, #0
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e0e2      	b.n	800bfe2 <Walk_Map_Update+0x24e>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be1c:	2300      	movs	r3, #0
 800be1e:	60bb      	str	r3, [r7, #8]
 800be20:	e0d8      	b.n	800bfd4 <Walk_Map_Update+0x240>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800be22:	4a78      	ldr	r2, [pc, #480]	; (800c004 <Walk_Map_Update+0x270>)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	441a      	add	r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	4413      	add	r3, r2
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	461a      	mov	r2, r3
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	4293      	cmp	r3, r2
 800be36:	f040 80ca 	bne.w	800bfce <Walk_Map_Update+0x23a>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800be3a:	4973      	ldr	r1, [pc, #460]	; (800c008 <Walk_Map_Update+0x274>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	009a      	lsls	r2, r3, #2
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	4413      	add	r3, r2
 800be44:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be48:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d025      	beq.n	800be9e <Walk_Map_Update+0x10a>
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3301      	adds	r3, #1
 800be56:	496b      	ldr	r1, [pc, #428]	; (800c004 <Walk_Map_Update+0x270>)
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	0092      	lsls	r2, r2, #2
 800be5c:	440a      	add	r2, r1
 800be5e:	4413      	add	r3, r2
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	4968      	ldr	r1, [pc, #416]	; (800c004 <Walk_Map_Update+0x270>)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4419      	add	r1, r3
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	440b      	add	r3, r1
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d914      	bls.n	800be9e <Walk_Map_Update+0x10a>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b02      	cmp	r3, #2
 800be78:	dc11      	bgt.n	800be9e <Walk_Map_Update+0x10a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800be7a:	4a62      	ldr	r2, [pc, #392]	; (800c004 <Walk_Map_Update+0x270>)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	441a      	add	r2, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	4413      	add	r3, r2
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3301      	adds	r3, #1
 800be8c:	3201      	adds	r2, #1
 800be8e:	b2d0      	uxtb	r0, r2
 800be90:	495c      	ldr	r1, [pc, #368]	; (800c004 <Walk_Map_Update+0x270>)
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	0092      	lsls	r2, r2, #2
 800be96:	440a      	add	r2, r1
 800be98:	4413      	add	r3, r2
 800be9a:	4602      	mov	r2, r0
 800be9c:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800be9e:	495a      	ldr	r1, [pc, #360]	; (800c008 <Walk_Map_Update+0x274>)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	009a      	lsls	r2, r3, #2
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4413      	add	r3, r2
 800bea8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800beac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d025      	beq.n	800bf02 <Walk_Map_Update+0x16e>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	4a52      	ldr	r2, [pc, #328]	; (800c004 <Walk_Map_Update+0x270>)
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	441a      	add	r2, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4413      	add	r3, r2
 800bec4:	781a      	ldrb	r2, [r3, #0]
 800bec6:	494f      	ldr	r1, [pc, #316]	; (800c004 <Walk_Map_Update+0x270>)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4419      	add	r1, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	440b      	add	r3, r1
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d914      	bls.n	800bf02 <Walk_Map_Update+0x16e>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	dc11      	bgt.n	800bf02 <Walk_Map_Update+0x16e>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800bede:	4a49      	ldr	r2, [pc, #292]	; (800c004 <Walk_Map_Update+0x270>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	441a      	add	r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	4413      	add	r3, r2
 800beea:	781a      	ldrb	r2, [r3, #0]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3301      	adds	r3, #1
 800bef0:	3201      	adds	r2, #1
 800bef2:	b2d1      	uxtb	r1, r2
 800bef4:	4a43      	ldr	r2, [pc, #268]	; (800c004 <Walk_Map_Update+0x270>)
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	441a      	add	r2, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	460a      	mov	r2, r1
 800bf00:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800bf02:	4941      	ldr	r1, [pc, #260]	; (800c008 <Walk_Map_Update+0x274>)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	009a      	lsls	r2, r3, #2
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d025      	beq.n	800bf66 <Walk_Map_Update+0x1d2>
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	4939      	ldr	r1, [pc, #228]	; (800c004 <Walk_Map_Update+0x270>)
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	0092      	lsls	r2, r2, #2
 800bf24:	440a      	add	r2, r1
 800bf26:	4413      	add	r3, r2
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	4936      	ldr	r1, [pc, #216]	; (800c004 <Walk_Map_Update+0x270>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4419      	add	r1, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	440b      	add	r3, r1
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d914      	bls.n	800bf66 <Walk_Map_Update+0x1d2>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dd11      	ble.n	800bf66 <Walk_Map_Update+0x1d2>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800bf42:	4a30      	ldr	r2, [pc, #192]	; (800c004 <Walk_Map_Update+0x270>)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	441a      	add	r2, r3
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	781a      	ldrb	r2, [r3, #0]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	3201      	adds	r2, #1
 800bf56:	b2d0      	uxtb	r0, r2
 800bf58:	492a      	ldr	r1, [pc, #168]	; (800c004 <Walk_Map_Update+0x270>)
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	0092      	lsls	r2, r2, #2
 800bf5e:	440a      	add	r2, r1
 800bf60:	4413      	add	r3, r2
 800bf62:	4602      	mov	r2, r0
 800bf64:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bf66:	4928      	ldr	r1, [pc, #160]	; (800c008 <Walk_Map_Update+0x274>)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	009a      	lsls	r2, r3, #2
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf74:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d025      	beq.n	800bfca <Walk_Map_Update+0x236>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	4a20      	ldr	r2, [pc, #128]	; (800c004 <Walk_Map_Update+0x270>)
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	781a      	ldrb	r2, [r3, #0]
 800bf8e:	491d      	ldr	r1, [pc, #116]	; (800c004 <Walk_Map_Update+0x270>)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4419      	add	r1, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	440b      	add	r3, r1
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d914      	bls.n	800bfca <Walk_Map_Update+0x236>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dd11      	ble.n	800bfca <Walk_Map_Update+0x236>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800bfa6:	4a17      	ldr	r2, [pc, #92]	; (800c004 <Walk_Map_Update+0x270>)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	441a      	add	r2, r3
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	3201      	adds	r2, #1
 800bfba:	b2d1      	uxtb	r1, r2
 800bfbc:	4a11      	ldr	r2, [pc, #68]	; (800c004 <Walk_Map_Update+0x270>)
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	460a      	mov	r2, r1
 800bfc8:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	60bb      	str	r3, [r7, #8]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	f77f af23 	ble.w	800be22 <Walk_Map_Update+0x8e>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	f77f af19 	ble.w	800be1c <Walk_Map_Update+0x88>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し�?
		  hosu++;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	3301      	adds	r3, #1
 800bfee:	603b      	str	r3, [r7, #0]
	}while(flag);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f47f af0d 	bne.w	800be12 <Walk_Map_Update+0x7e>

}
 800bff8:	bf00      	nop
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	2001a268 	.word	0x2001a268
 800c008:	2001a6d4 	.word	0x2001a6d4

0800c00c <Tire_Maintenance>:
//
//	}
}


void Tire_Maintenance(){
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c014:	f004 fe3e 	bl	8010c94 <HAL_Delay>
	Accelerate();
 800c018:	f7fe fe12 	bl	800ac40 <Accelerate>
	straight();
 800c01c:	f7fe ff6c 	bl	800aef8 <straight>
	straight();
 800c020:	f7fe ff6a 	bl	800aef8 <straight>
	Decelerate();
 800c024:	f7fe febc 	bl	800ada0 <Decelerate>
	Motor_PWM_Stop();
 800c028:	f7fe f842 	bl	800a0b0 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c02c:	480a      	ldr	r0, [pc, #40]	; (800c058 <Tire_Maintenance+0x4c>)
 800c02e:	f008 f826 	bl	801407e <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c032:	480a      	ldr	r0, [pc, #40]	; (800c05c <Tire_Maintenance+0x50>)
 800c034:	f008 f823 	bl	801407e <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <Tire_Maintenance+0x54>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4619      	mov	r1, r3
 800c03e:	4809      	ldr	r0, [pc, #36]	; (800c064 <Tire_Maintenance+0x58>)
 800c040:	f00a fcb2 	bl	80169a8 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800c044:	4b08      	ldr	r3, [pc, #32]	; (800c068 <Tire_Maintenance+0x5c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4619      	mov	r1, r3
 800c04a:	4808      	ldr	r0, [pc, #32]	; (800c06c <Tire_Maintenance+0x60>)
 800c04c:	f00a fcac 	bl	80169a8 <iprintf>
		printf("\r\n");
 800c050:	4807      	ldr	r0, [pc, #28]	; (800c070 <Tire_Maintenance+0x64>)
 800c052:	f00a fd1d 	bl	8016a90 <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c056:	e7ef      	b.n	800c038 <Tire_Maintenance+0x2c>
 800c058:	2001a2a8 	.word	0x2001a2a8
 800c05c:	2000e050 	.word	0x2000e050
 800c060:	20000334 	.word	0x20000334
 800c064:	080188b8 	.word	0x080188b8
 800c068:	20000330 	.word	0x20000330
 800c06c:	080188d4 	.word	0x080188d4
 800c070:	08018810 	.word	0x08018810

0800c074 <wall_set>:
	}

}
void wall_set(){
 800c074:	b490      	push	{r4, r7}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c07a:	4b8b      	ldr	r3, [pc, #556]	; (800c2a8 <wall_set+0x234>)
 800c07c:	ed93 7a00 	vldr	s14, [r3]
 800c080:	4b8a      	ldr	r3, [pc, #552]	; (800c2ac <wall_set+0x238>)
 800c082:	edd3 7a00 	vldr	s15, [r3]
 800c086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c08a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c08e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c092:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09e:	bfcc      	ite	gt
 800c0a0:	2301      	movgt	r3, #1
 800c0a2:	2300      	movle	r3, #0
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	4b82      	ldr	r3, [pc, #520]	; (800c2b0 <wall_set+0x23c>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f107 0108 	add.w	r1, r7, #8
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c0b4:	4b7f      	ldr	r3, [pc, #508]	; (800c2b4 <wall_set+0x240>)
 800c0b6:	edd3 7a00 	vldr	s15, [r3]
 800c0ba:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c2b8 <wall_set+0x244>
 800c0be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c6:	bfcc      	ite	gt
 800c0c8:	2301      	movgt	r3, #1
 800c0ca:	2300      	movle	r3, #0
 800c0cc:	b2d9      	uxtb	r1, r3
 800c0ce:	4b78      	ldr	r3, [pc, #480]	; (800c2b0 <wall_set+0x23c>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	425a      	negs	r2, r3
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	f002 0203 	and.w	r2, r2, #3
 800c0de:	bf58      	it	pl
 800c0e0:	4253      	negpl	r3, r2
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	440b      	add	r3, r1
 800c0ea:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c0ee:	4b70      	ldr	r3, [pc, #448]	; (800c2b0 <wall_set+0x23c>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	3302      	adds	r3, #2
 800c0f4:	425a      	negs	r2, r3
 800c0f6:	f003 0303 	and.w	r3, r3, #3
 800c0fa:	f002 0203 	and.w	r2, r2, #3
 800c0fe:	bf58      	it	pl
 800c100:	4253      	negpl	r3, r2
 800c102:	f107 0208 	add.w	r2, r7, #8
 800c106:	4413      	add	r3, r2
 800c108:	2200      	movs	r2, #0
 800c10a:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c10e:	4b6b      	ldr	r3, [pc, #428]	; (800c2bc <wall_set+0x248>)
 800c110:	edd3 7a00 	vldr	s15, [r3]
 800c114:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c2c0 <wall_set+0x24c>
 800c118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c120:	bfcc      	ite	gt
 800c122:	2301      	movgt	r3, #1
 800c124:	2300      	movle	r3, #0
 800c126:	b2d9      	uxtb	r1, r3
 800c128:	4b61      	ldr	r3, [pc, #388]	; (800c2b0 <wall_set+0x23c>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	3303      	adds	r3, #3
 800c12e:	425a      	negs	r2, r3
 800c130:	f003 0303 	and.w	r3, r3, #3
 800c134:	f002 0203 	and.w	r2, r2, #3
 800c138:	bf58      	it	pl
 800c13a:	4253      	negpl	r3, r2
 800c13c:	460a      	mov	r2, r1
 800c13e:	f107 0108 	add.w	r1, r7, #8
 800c142:	440b      	add	r3, r1
 800c144:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c148:	7939      	ldrb	r1, [r7, #4]
 800c14a:	4b5e      	ldr	r3, [pc, #376]	; (800c2c4 <wall_set+0x250>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	461c      	mov	r4, r3
 800c150:	4b5d      	ldr	r3, [pc, #372]	; (800c2c8 <wall_set+0x254>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	460b      	mov	r3, r1
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	b2d8      	uxtb	r0, r3
 800c15e:	495b      	ldr	r1, [pc, #364]	; (800c2cc <wall_set+0x258>)
 800c160:	00a3      	lsls	r3, r4, #2
 800c162:	441a      	add	r2, r3
 800c164:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c168:	f360 0301 	bfi	r3, r0, #0, #2
 800c16c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c170:	7979      	ldrb	r1, [r7, #5]
 800c172:	4b54      	ldr	r3, [pc, #336]	; (800c2c4 <wall_set+0x250>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	461c      	mov	r4, r3
 800c178:	4b53      	ldr	r3, [pc, #332]	; (800c2c8 <wall_set+0x254>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	461a      	mov	r2, r3
 800c17e:	460b      	mov	r3, r1
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	b2d8      	uxtb	r0, r3
 800c186:	4951      	ldr	r1, [pc, #324]	; (800c2cc <wall_set+0x258>)
 800c188:	00a3      	lsls	r3, r4, #2
 800c18a:	441a      	add	r2, r3
 800c18c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c190:	f360 0383 	bfi	r3, r0, #2, #2
 800c194:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c198:	79b9      	ldrb	r1, [r7, #6]
 800c19a:	4b4a      	ldr	r3, [pc, #296]	; (800c2c4 <wall_set+0x250>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	461c      	mov	r4, r3
 800c1a0:	4b49      	ldr	r3, [pc, #292]	; (800c2c8 <wall_set+0x254>)
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	b2d8      	uxtb	r0, r3
 800c1ae:	4947      	ldr	r1, [pc, #284]	; (800c2cc <wall_set+0x258>)
 800c1b0:	00a3      	lsls	r3, r4, #2
 800c1b2:	441a      	add	r2, r3
 800c1b4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1b8:	f360 1305 	bfi	r3, r0, #4, #2
 800c1bc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c1c0:	79f9      	ldrb	r1, [r7, #7]
 800c1c2:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <wall_set+0x250>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	4b3f      	ldr	r3, [pc, #252]	; (800c2c8 <wall_set+0x254>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	f003 0303 	and.w	r3, r3, #3
 800c1d4:	b2d8      	uxtb	r0, r3
 800c1d6:	493d      	ldr	r1, [pc, #244]	; (800c2cc <wall_set+0x258>)
 800c1d8:	00a3      	lsls	r3, r4, #2
 800c1da:	441a      	add	r2, r3
 800c1dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1e0:	f360 1387 	bfi	r3, r0, #6, #2
 800c1e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c1e8:	4b37      	ldr	r3, [pc, #220]	; (800c2c8 <wall_set+0x254>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d812      	bhi.n	800c216 <wall_set+0x1a2>
 800c1f0:	7939      	ldrb	r1, [r7, #4]
 800c1f2:	4b34      	ldr	r3, [pc, #208]	; (800c2c4 <wall_set+0x250>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	4b33      	ldr	r3, [pc, #204]	; (800c2c8 <wall_set+0x254>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	f001 0103 	and.w	r1, r1, #3
 800c202:	b2c8      	uxtb	r0, r1
 800c204:	4931      	ldr	r1, [pc, #196]	; (800c2cc <wall_set+0x258>)
 800c206:	0092      	lsls	r2, r2, #2
 800c208:	441a      	add	r2, r3
 800c20a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c20e:	f360 1305 	bfi	r3, r0, #4, #2
 800c212:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c216:	4b2b      	ldr	r3, [pc, #172]	; (800c2c4 <wall_set+0x250>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d811      	bhi.n	800c242 <wall_set+0x1ce>
 800c21e:	7979      	ldrb	r1, [r7, #5]
 800c220:	4b28      	ldr	r3, [pc, #160]	; (800c2c4 <wall_set+0x250>)
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	3301      	adds	r3, #1
 800c226:	4a28      	ldr	r2, [pc, #160]	; (800c2c8 <wall_set+0x254>)
 800c228:	7812      	ldrb	r2, [r2, #0]
 800c22a:	f001 0103 	and.w	r1, r1, #3
 800c22e:	b2c8      	uxtb	r0, r1
 800c230:	4926      	ldr	r1, [pc, #152]	; (800c2cc <wall_set+0x258>)
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	441a      	add	r2, r3
 800c236:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c23a:	f360 1387 	bfi	r3, r0, #6, #2
 800c23e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c242:	4b21      	ldr	r3, [pc, #132]	; (800c2c8 <wall_set+0x254>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d012      	beq.n	800c270 <wall_set+0x1fc>
 800c24a:	79b9      	ldrb	r1, [r7, #6]
 800c24c:	4b1d      	ldr	r3, [pc, #116]	; (800c2c4 <wall_set+0x250>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	4b1d      	ldr	r3, [pc, #116]	; (800c2c8 <wall_set+0x254>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	3b01      	subs	r3, #1
 800c258:	f001 0103 	and.w	r1, r1, #3
 800c25c:	b2c8      	uxtb	r0, r1
 800c25e:	491b      	ldr	r1, [pc, #108]	; (800c2cc <wall_set+0x258>)
 800c260:	0092      	lsls	r2, r2, #2
 800c262:	441a      	add	r2, r3
 800c264:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c268:	f360 0301 	bfi	r3, r0, #0, #2
 800c26c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c270:	4b14      	ldr	r3, [pc, #80]	; (800c2c4 <wall_set+0x250>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d011      	beq.n	800c29c <wall_set+0x228>
 800c278:	79f9      	ldrb	r1, [r7, #7]
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <wall_set+0x250>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	3b01      	subs	r3, #1
 800c280:	4a11      	ldr	r2, [pc, #68]	; (800c2c8 <wall_set+0x254>)
 800c282:	7812      	ldrb	r2, [r2, #0]
 800c284:	f001 0103 	and.w	r1, r1, #3
 800c288:	b2c8      	uxtb	r0, r1
 800c28a:	4910      	ldr	r1, [pc, #64]	; (800c2cc <wall_set+0x258>)
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	441a      	add	r2, r3
 800c290:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c294:	f360 0383 	bfi	r3, r0, #2, #2
 800c298:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bc90      	pop	{r4, r7}
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	2001a798 	.word	0x2001a798
 800c2ac:	20019ca8 	.word	0x20019ca8
 800c2b0:	2000e122 	.word	0x2000e122
 800c2b4:	2001a6d0 	.word	0x2001a6d0
 800c2b8:	42c80000 	.word	0x42c80000
 800c2bc:	2000e04c 	.word	0x2000e04c
 800c2c0:	430c0000 	.word	0x430c0000
 800c2c4:	20009f84 	.word	0x20009f84
 800c2c8:	20009f85 	.word	0x20009f85
 800c2cc:	2001a6d4 	.word	0x2001a6d4

0800c2d0 <goal_area_search>:
    	}
#endif
}


void goal_area_search(){
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b0be      	sub	sp, #248	; 0xf8
 800c2d4:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c2d6:	f7ff fecd 	bl	800c074 <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c2da:	f7ff fd5b 	bl	800bd94 <Walk_Map_Update>


	switch(my_direction){
 800c2de:	4bcc      	ldr	r3, [pc, #816]	; (800c610 <goal_area_search+0x340>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	f200 86f7 	bhi.w	800d0d6 <goal_area_search+0xe06>
 800c2e8:	a201      	add	r2, pc, #4	; (adr r2, 800c2f0 <goal_area_search+0x20>)
 800c2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ee:	bf00      	nop
 800c2f0:	0800c301 	.word	0x0800c301
 800c2f4:	0800c6b5 	.word	0x0800c6b5
 800c2f8:	0800ca5f 	.word	0x0800ca5f
 800c2fc:	0800cd9b 	.word	0x0800cd9b
	case north:

		//現在の座標 == ゴールの下2マス
		//xが小さいほうなら、右回り
		//直進
		Accelerate();
 800c300:	f7fe fc9e 	bl	800ac40 <Accelerate>
		Decelerate();
 800c304:	f7fe fd4c 	bl	800ada0 <Decelerate>
		y++;
 800c308:	4bc2      	ldr	r3, [pc, #776]	; (800c614 <goal_area_search+0x344>)
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	4bc0      	ldr	r3, [pc, #768]	; (800c614 <goal_area_search+0x344>)
 800c312:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c314:	f7ff feae 	bl	800c074 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c318:	2300      	movs	r3, #0
 800c31a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c31e:	e004      	b.n	800c32a <goal_area_search+0x5a>
 800c320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c324:	3301      	adds	r3, #1
 800c326:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c32a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c32e:	f7fc f831 	bl	8008394 <__aeabi_i2d>
 800c332:	a3b5      	add	r3, pc, #724	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7fc fb08 	bl	800894c <__aeabi_dcmplt>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1ee      	bne.n	800c320 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c342:	4bb5      	ldr	r3, [pc, #724]	; (800c618 <goal_area_search+0x348>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b02      	cmp	r3, #2
 800c348:	d103      	bne.n	800c352 <goal_area_search+0x82>
			orbit = 'R';
 800c34a:	2352      	movs	r3, #82	; 0x52
 800c34c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c350:	e006      	b.n	800c360 <goal_area_search+0x90>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800c352:	4bb1      	ldr	r3, [pc, #708]	; (800c618 <goal_area_search+0x348>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d102      	bne.n	800c360 <goal_area_search+0x90>
			orbit = 'L';
 800c35a:	234c      	movs	r3, #76	; 0x4c
 800c35c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c360:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c364:	2b52      	cmp	r3, #82	; 0x52
 800c366:	f040 80c9 	bne.w	800c4fc <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c36a:	f7fe ff2f 	bl	800b1cc <turn_right>
			my_direction = east;
 800c36e:	4ba8      	ldr	r3, [pc, #672]	; (800c610 <goal_area_search+0x340>)
 800c370:	2201      	movs	r2, #1
 800c372:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c374:	2300      	movs	r3, #0
 800c376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c37a:	e004      	b.n	800c386 <goal_area_search+0xb6>
 800c37c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c380:	3301      	adds	r3, #1
 800c382:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c386:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c38a:	f7fc f803 	bl	8008394 <__aeabi_i2d>
 800c38e:	a39e      	add	r3, pc, #632	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7fc fada 	bl	800894c <__aeabi_dcmplt>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1ee      	bne.n	800c37c <goal_area_search+0xac>
			//直進
			Accelerate();
 800c39e:	f7fe fc4f 	bl	800ac40 <Accelerate>
			Decelerate();
 800c3a2:	f7fe fcfd 	bl	800ada0 <Decelerate>
			x++;
 800c3a6:	4b9c      	ldr	r3, [pc, #624]	; (800c618 <goal_area_search+0x348>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	4b9a      	ldr	r3, [pc, #616]	; (800c618 <goal_area_search+0x348>)
 800c3b0:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c3b2:	f7ff fe5f 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c3bc:	e004      	b.n	800c3c8 <goal_area_search+0xf8>
 800c3be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c3c8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c3cc:	f7fb ffe2 	bl	8008394 <__aeabi_i2d>
 800c3d0:	a38d      	add	r3, pc, #564	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	f7fc fab9 	bl	800894c <__aeabi_dcmplt>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1ee      	bne.n	800c3be <goal_area_search+0xee>


			//右回り
			turn_right();
 800c3e0:	f7fe fef4 	bl	800b1cc <turn_right>
			my_direction = south;
 800c3e4:	4b8a      	ldr	r3, [pc, #552]	; (800c610 <goal_area_search+0x340>)
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3f0:	e004      	b.n	800c3fc <goal_area_search+0x12c>
 800c3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3fc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c400:	f7fb ffc8 	bl	8008394 <__aeabi_i2d>
 800c404:	a380      	add	r3, pc, #512	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	f7fc fa9f 	bl	800894c <__aeabi_dcmplt>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1ee      	bne.n	800c3f2 <goal_area_search+0x122>
			//直進
			Accelerate();
 800c414:	f7fe fc14 	bl	800ac40 <Accelerate>
			Decelerate();
 800c418:	f7fe fcc2 	bl	800ada0 <Decelerate>
			y--;
 800c41c:	4b7d      	ldr	r3, [pc, #500]	; (800c614 <goal_area_search+0x344>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	3b01      	subs	r3, #1
 800c422:	b2da      	uxtb	r2, r3
 800c424:	4b7b      	ldr	r3, [pc, #492]	; (800c614 <goal_area_search+0x344>)
 800c426:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c428:	f7ff fe24 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c432:	e004      	b.n	800c43e <goal_area_search+0x16e>
 800c434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c438:	3301      	adds	r3, #1
 800c43a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c43e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c442:	f7fb ffa7 	bl	8008394 <__aeabi_i2d>
 800c446:	a370      	add	r3, pc, #448	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7fc fa7e 	bl	800894c <__aeabi_dcmplt>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1ee      	bne.n	800c434 <goal_area_search+0x164>

			//右回転
			turn_right();
 800c456:	f7fe feb9 	bl	800b1cc <turn_right>
			my_direction = west;
 800c45a:	4b6d      	ldr	r3, [pc, #436]	; (800c610 <goal_area_search+0x340>)
 800c45c:	2203      	movs	r2, #3
 800c45e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c460:	2300      	movs	r3, #0
 800c462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c466:	e004      	b.n	800c472 <goal_area_search+0x1a2>
 800c468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46c:	3301      	adds	r3, #1
 800c46e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c472:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c476:	f7fb ff8d 	bl	8008394 <__aeabi_i2d>
 800c47a:	a363      	add	r3, pc, #396	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7fc fa64 	bl	800894c <__aeabi_dcmplt>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1ee      	bne.n	800c468 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c48a:	f7fe fbd9 	bl	800ac40 <Accelerate>
			Decelerate();
 800c48e:	f7fe fc87 	bl	800ada0 <Decelerate>
			y--;
 800c492:	4b60      	ldr	r3, [pc, #384]	; (800c614 <goal_area_search+0x344>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b5e      	ldr	r3, [pc, #376]	; (800c614 <goal_area_search+0x344>)
 800c49c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4a4:	e004      	b.n	800c4b0 <goal_area_search+0x1e0>
 800c4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4b0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c4b4:	f7fb ff6e 	bl	8008394 <__aeabi_i2d>
 800c4b8:	a353      	add	r3, pc, #332	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7fc fa45 	bl	800894c <__aeabi_dcmplt>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1ee      	bne.n	800c4a6 <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c4c8:	f7fe feea 	bl	800b2a0 <turn_left>
			my_direction = south;
 800c4cc:	4b50      	ldr	r3, [pc, #320]	; (800c610 <goal_area_search+0x340>)
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4d8:	e004      	b.n	800c4e4 <goal_area_search+0x214>
 800c4da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4de:	3301      	adds	r3, #1
 800c4e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4e4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c4e8:	f7fb ff54 	bl	8008394 <__aeabi_i2d>
 800c4ec:	a346      	add	r3, pc, #280	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7fc fa2b 	bl	800894c <__aeabi_dcmplt>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1ee      	bne.n	800c4da <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c4fc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c500:	2b4c      	cmp	r3, #76	; 0x4c
 800c502:	f040 85ea 	bne.w	800d0da <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c506:	f7fe fecb 	bl	800b2a0 <turn_left>
			my_direction = west;
 800c50a:	4b41      	ldr	r3, [pc, #260]	; (800c610 <goal_area_search+0x340>)
 800c50c:	2203      	movs	r2, #3
 800c50e:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c510:	2300      	movs	r3, #0
 800c512:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c516:	e004      	b.n	800c522 <goal_area_search+0x252>
 800c518:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c51c:	3301      	adds	r3, #1
 800c51e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c522:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c526:	f7fb ff35 	bl	8008394 <__aeabi_i2d>
 800c52a:	a337      	add	r3, pc, #220	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7fc fa0c 	bl	800894c <__aeabi_dcmplt>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1ee      	bne.n	800c518 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c53a:	f7fe fb81 	bl	800ac40 <Accelerate>
			Decelerate();
 800c53e:	f7fe fc2f 	bl	800ada0 <Decelerate>
			x--;
 800c542:	4b35      	ldr	r3, [pc, #212]	; (800c618 <goal_area_search+0x348>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	3b01      	subs	r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	4b33      	ldr	r3, [pc, #204]	; (800c618 <goal_area_search+0x348>)
 800c54c:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c54e:	f7ff fd91 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c552:	2300      	movs	r3, #0
 800c554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c558:	e004      	b.n	800c564 <goal_area_search+0x294>
 800c55a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c55e:	3301      	adds	r3, #1
 800c560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c564:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c568:	f7fb ff14 	bl	8008394 <__aeabi_i2d>
 800c56c:	a326      	add	r3, pc, #152	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7fc f9eb 	bl	800894c <__aeabi_dcmplt>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1ee      	bne.n	800c55a <goal_area_search+0x28a>

			turn_left();
 800c57c:	f7fe fe90 	bl	800b2a0 <turn_left>
			my_direction = south;
 800c580:	4b23      	ldr	r3, [pc, #140]	; (800c610 <goal_area_search+0x340>)
 800c582:	2202      	movs	r2, #2
 800c584:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c586:	2300      	movs	r3, #0
 800c588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c58c:	e004      	b.n	800c598 <goal_area_search+0x2c8>
 800c58e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c592:	3301      	adds	r3, #1
 800c594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c598:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c59c:	f7fb fefa 	bl	8008394 <__aeabi_i2d>
 800c5a0:	a319      	add	r3, pc, #100	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7fc f9d1 	bl	800894c <__aeabi_dcmplt>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1ee      	bne.n	800c58e <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c5b0:	f7fe fb46 	bl	800ac40 <Accelerate>
			Decelerate();
 800c5b4:	f7fe fbf4 	bl	800ada0 <Decelerate>
			y--;
 800c5b8:	4b16      	ldr	r3, [pc, #88]	; (800c614 <goal_area_search+0x344>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	4b14      	ldr	r3, [pc, #80]	; (800c614 <goal_area_search+0x344>)
 800c5c2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c5c4:	f7ff fd56 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5ce:	e004      	b.n	800c5da <goal_area_search+0x30a>
 800c5d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5da:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c5de:	f7fb fed9 	bl	8008394 <__aeabi_i2d>
 800c5e2:	a309      	add	r3, pc, #36	; (adr r3, 800c608 <goal_area_search+0x338>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7fc f9b0 	bl	800894c <__aeabi_dcmplt>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1ee      	bne.n	800c5d0 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c5f2:	f7fe fe55 	bl	800b2a0 <turn_left>
			my_direction = east;
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <goal_area_search+0x340>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c602:	e010      	b.n	800c626 <goal_area_search+0x356>
 800c604:	f3af 8000 	nop.w
 800c608:	00000000 	.word	0x00000000
 800c60c:	40cd4c00 	.word	0x40cd4c00
 800c610:	2000e122 	.word	0x2000e122
 800c614:	20009f85 	.word	0x20009f85
 800c618:	20009f84 	.word	0x20009f84
 800c61c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c620:	3301      	adds	r3, #1
 800c622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c626:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c62a:	f7fb feb3 	bl	8008394 <__aeabi_i2d>
 800c62e:	a3d6      	add	r3, pc, #856	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7fc f98a 	bl	800894c <__aeabi_dcmplt>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1ee      	bne.n	800c61c <goal_area_search+0x34c>
			//直進
			Accelerate();
 800c63e:	f7fe faff 	bl	800ac40 <Accelerate>
			Decelerate();
 800c642:	f7fe fbad 	bl	800ada0 <Decelerate>
			x++;
 800c646:	4bd2      	ldr	r3, [pc, #840]	; (800c990 <goal_area_search+0x6c0>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	3301      	adds	r3, #1
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	4bd0      	ldr	r3, [pc, #832]	; (800c990 <goal_area_search+0x6c0>)
 800c650:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c652:	2300      	movs	r3, #0
 800c654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c658:	e004      	b.n	800c664 <goal_area_search+0x394>
 800c65a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c65e:	3301      	adds	r3, #1
 800c660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c664:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c668:	f7fb fe94 	bl	8008394 <__aeabi_i2d>
 800c66c:	a3c6      	add	r3, pc, #792	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	f7fc f96b 	bl	800894c <__aeabi_dcmplt>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1ee      	bne.n	800c65a <goal_area_search+0x38a>
			//右回転
			turn_right();
 800c67c:	f7fe fda6 	bl	800b1cc <turn_right>
			my_direction = north;
 800c680:	4bc4      	ldr	r3, [pc, #784]	; (800c994 <goal_area_search+0x6c4>)
 800c682:	2200      	movs	r2, #0
 800c684:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c686:	2300      	movs	r3, #0
 800c688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c68c:	e004      	b.n	800c698 <goal_area_search+0x3c8>
 800c68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c692:	3301      	adds	r3, #1
 800c694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c698:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c69c:	f7fb fe7a 	bl	8008394 <__aeabi_i2d>
 800c6a0:	a3b9      	add	r3, pc, #740	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7fc f951 	bl	800894c <__aeabi_dcmplt>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1ee      	bne.n	800c68e <goal_area_search+0x3be>
		}

		break;
 800c6b0:	f000 bd13 	b.w	800d0da <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800c6b4:	f7fe fac4 	bl	800ac40 <Accelerate>
		Decelerate();
 800c6b8:	f7fe fb72 	bl	800ada0 <Decelerate>
		x++;
 800c6bc:	4bb4      	ldr	r3, [pc, #720]	; (800c990 <goal_area_search+0x6c0>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	4bb2      	ldr	r3, [pc, #712]	; (800c990 <goal_area_search+0x6c0>)
 800c6c6:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c6c8:	f7ff fcd4 	bl	800c074 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6d2:	e004      	b.n	800c6de <goal_area_search+0x40e>
 800c6d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c6d8:	3301      	adds	r3, #1
 800c6da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6de:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800c6e2:	f7fb fe57 	bl	8008394 <__aeabi_i2d>
 800c6e6:	a3a8      	add	r3, pc, #672	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	f7fc f92e 	bl	800894c <__aeabi_dcmplt>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1ee      	bne.n	800c6d4 <goal_area_search+0x404>

		//現在の座標 == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800c6f6:	4ba8      	ldr	r3, [pc, #672]	; (800c998 <goal_area_search+0x6c8>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d103      	bne.n	800c706 <goal_area_search+0x436>
			orbit = 'L';
 800c6fe:	234c      	movs	r3, #76	; 0x4c
 800c700:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c704:	e006      	b.n	800c714 <goal_area_search+0x444>
		}
		//yが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800c706:	4ba4      	ldr	r3, [pc, #656]	; (800c998 <goal_area_search+0x6c8>)
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d102      	bne.n	800c714 <goal_area_search+0x444>
			orbit = 'R';
 800c70e:	2352      	movs	r3, #82	; 0x52
 800c710:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800c714:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c718:	2b52      	cmp	r3, #82	; 0x52
 800c71a:	f040 80c9 	bne.w	800c8b0 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800c71e:	f7fe fd55 	bl	800b1cc <turn_right>
			my_direction = south;
 800c722:	4b9c      	ldr	r3, [pc, #624]	; (800c994 <goal_area_search+0x6c4>)
 800c724:	2202      	movs	r2, #2
 800c726:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c728:	2300      	movs	r3, #0
 800c72a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c72e:	e004      	b.n	800c73a <goal_area_search+0x46a>
 800c730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c734:	3301      	adds	r3, #1
 800c736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c73a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c73e:	f7fb fe29 	bl	8008394 <__aeabi_i2d>
 800c742:	a391      	add	r3, pc, #580	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7fc f900 	bl	800894c <__aeabi_dcmplt>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1ee      	bne.n	800c730 <goal_area_search+0x460>
			//直進
			Accelerate();
 800c752:	f7fe fa75 	bl	800ac40 <Accelerate>
			Decelerate();
 800c756:	f7fe fb23 	bl	800ada0 <Decelerate>
			y--;
 800c75a:	4b8f      	ldr	r3, [pc, #572]	; (800c998 <goal_area_search+0x6c8>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	3b01      	subs	r3, #1
 800c760:	b2da      	uxtb	r2, r3
 800c762:	4b8d      	ldr	r3, [pc, #564]	; (800c998 <goal_area_search+0x6c8>)
 800c764:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c766:	f7ff fc85 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c76a:	2300      	movs	r3, #0
 800c76c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c770:	e004      	b.n	800c77c <goal_area_search+0x4ac>
 800c772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c776:	3301      	adds	r3, #1
 800c778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c77c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800c780:	f7fb fe08 	bl	8008394 <__aeabi_i2d>
 800c784:	a380      	add	r3, pc, #512	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7fc f8df 	bl	800894c <__aeabi_dcmplt>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1ee      	bne.n	800c772 <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800c794:	f7fe fd1a 	bl	800b1cc <turn_right>
			my_direction = west;
 800c798:	4b7e      	ldr	r3, [pc, #504]	; (800c994 <goal_area_search+0x6c4>)
 800c79a:	2203      	movs	r2, #3
 800c79c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c7a4:	e004      	b.n	800c7b0 <goal_area_search+0x4e0>
 800c7a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c7b0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c7b4:	f7fb fdee 	bl	8008394 <__aeabi_i2d>
 800c7b8:	a373      	add	r3, pc, #460	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7fc f8c5 	bl	800894c <__aeabi_dcmplt>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ee      	bne.n	800c7a6 <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800c7c8:	f7fe fa3a 	bl	800ac40 <Accelerate>
			Decelerate();
 800c7cc:	f7fe fae8 	bl	800ada0 <Decelerate>
			x--;
 800c7d0:	4b6f      	ldr	r3, [pc, #444]	; (800c990 <goal_area_search+0x6c0>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	4b6d      	ldr	r3, [pc, #436]	; (800c990 <goal_area_search+0x6c0>)
 800c7da:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c7dc:	f7ff fc4a 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c7e6:	e004      	b.n	800c7f2 <goal_area_search+0x522>
 800c7e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c7f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c7f6:	f7fb fdcd 	bl	8008394 <__aeabi_i2d>
 800c7fa:	a363      	add	r3, pc, #396	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7fc f8a4 	bl	800894c <__aeabi_dcmplt>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1ee      	bne.n	800c7e8 <goal_area_search+0x518>

			//右回転
			turn_right();
 800c80a:	f7fe fcdf 	bl	800b1cc <turn_right>
			my_direction = north;
 800c80e:	4b61      	ldr	r3, [pc, #388]	; (800c994 <goal_area_search+0x6c4>)
 800c810:	2200      	movs	r2, #0
 800c812:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c814:	2300      	movs	r3, #0
 800c816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c81a:	e004      	b.n	800c826 <goal_area_search+0x556>
 800c81c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c820:	3301      	adds	r3, #1
 800c822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c826:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c82a:	f7fb fdb3 	bl	8008394 <__aeabi_i2d>
 800c82e:	a356      	add	r3, pc, #344	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7fc f88a 	bl	800894c <__aeabi_dcmplt>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1ee      	bne.n	800c81c <goal_area_search+0x54c>
			//直進
			Accelerate();
 800c83e:	f7fe f9ff 	bl	800ac40 <Accelerate>
			Decelerate();
 800c842:	f7fe faad 	bl	800ada0 <Decelerate>
			y++;
 800c846:	4b54      	ldr	r3, [pc, #336]	; (800c998 <goal_area_search+0x6c8>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	3301      	adds	r3, #1
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	4b52      	ldr	r3, [pc, #328]	; (800c998 <goal_area_search+0x6c8>)
 800c850:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c852:	2300      	movs	r3, #0
 800c854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c858:	e004      	b.n	800c864 <goal_area_search+0x594>
 800c85a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c85e:	3301      	adds	r3, #1
 800c860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c864:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c868:	f7fb fd94 	bl	8008394 <__aeabi_i2d>
 800c86c:	a346      	add	r3, pc, #280	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7fc f86b 	bl	800894c <__aeabi_dcmplt>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1ee      	bne.n	800c85a <goal_area_search+0x58a>
			//左回転
			turn_left();
 800c87c:	f7fe fd10 	bl	800b2a0 <turn_left>
			my_direction = west;
 800c880:	4b44      	ldr	r3, [pc, #272]	; (800c994 <goal_area_search+0x6c4>)
 800c882:	2203      	movs	r2, #3
 800c884:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c886:	2300      	movs	r3, #0
 800c888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c88c:	e004      	b.n	800c898 <goal_area_search+0x5c8>
 800c88e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c892:	3301      	adds	r3, #1
 800c894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c898:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c89c:	f7fb fd7a 	bl	8008394 <__aeabi_i2d>
 800c8a0:	a339      	add	r3, pc, #228	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7fc f851 	bl	800894c <__aeabi_dcmplt>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1ee      	bne.n	800c88e <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800c8b0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c8b4:	2b4c      	cmp	r3, #76	; 0x4c
 800c8b6:	f040 8412 	bne.w	800d0de <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800c8ba:	f7fe fcf1 	bl	800b2a0 <turn_left>
			my_direction = north;
 800c8be:	4b35      	ldr	r3, [pc, #212]	; (800c994 <goal_area_search+0x6c4>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c8ca:	e004      	b.n	800c8d6 <goal_area_search+0x606>
 800c8cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c8d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c8da:	f7fb fd5b 	bl	8008394 <__aeabi_i2d>
 800c8de:	a32a      	add	r3, pc, #168	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f7fc f832 	bl	800894c <__aeabi_dcmplt>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1ee      	bne.n	800c8cc <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800c8ee:	f7fe f9a7 	bl	800ac40 <Accelerate>
			Decelerate();
 800c8f2:	f7fe fa55 	bl	800ada0 <Decelerate>
			y++;
 800c8f6:	4b28      	ldr	r3, [pc, #160]	; (800c998 <goal_area_search+0x6c8>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	4b26      	ldr	r3, [pc, #152]	; (800c998 <goal_area_search+0x6c8>)
 800c900:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c902:	f7ff fbb7 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c906:	2300      	movs	r3, #0
 800c908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c90c:	e004      	b.n	800c918 <goal_area_search+0x648>
 800c90e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c912:	3301      	adds	r3, #1
 800c914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c918:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c91c:	f7fb fd3a 	bl	8008394 <__aeabi_i2d>
 800c920:	a319      	add	r3, pc, #100	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7fc f811 	bl	800894c <__aeabi_dcmplt>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1ee      	bne.n	800c90e <goal_area_search+0x63e>

			turn_left();
 800c930:	f7fe fcb6 	bl	800b2a0 <turn_left>
			my_direction = west;
 800c934:	4b17      	ldr	r3, [pc, #92]	; (800c994 <goal_area_search+0x6c4>)
 800c936:	2203      	movs	r2, #3
 800c938:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c93a:	2300      	movs	r3, #0
 800c93c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c940:	e004      	b.n	800c94c <goal_area_search+0x67c>
 800c942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c946:	3301      	adds	r3, #1
 800c948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c94c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c950:	f7fb fd20 	bl	8008394 <__aeabi_i2d>
 800c954:	a30c      	add	r3, pc, #48	; (adr r3, 800c988 <goal_area_search+0x6b8>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7fb fff7 	bl	800894c <__aeabi_dcmplt>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1ee      	bne.n	800c942 <goal_area_search+0x672>
			//直進
			Accelerate();
 800c964:	f7fe f96c 	bl	800ac40 <Accelerate>
			Decelerate();
 800c968:	f7fe fa1a 	bl	800ada0 <Decelerate>
			x--;
 800c96c:	4b08      	ldr	r3, [pc, #32]	; (800c990 <goal_area_search+0x6c0>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	3b01      	subs	r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	4b06      	ldr	r3, [pc, #24]	; (800c990 <goal_area_search+0x6c0>)
 800c976:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c978:	f7ff fb7c 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c97c:	2300      	movs	r3, #0
 800c97e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c982:	e010      	b.n	800c9a6 <goal_area_search+0x6d6>
 800c984:	f3af 8000 	nop.w
 800c988:	00000000 	.word	0x00000000
 800c98c:	40cd4c00 	.word	0x40cd4c00
 800c990:	20009f84 	.word	0x20009f84
 800c994:	2000e122 	.word	0x2000e122
 800c998:	20009f85 	.word	0x20009f85
 800c99c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c9a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800c9aa:	f7fb fcf3 	bl	8008394 <__aeabi_i2d>
 800c9ae:	a3bc      	add	r3, pc, #752	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7fb ffca 	bl	800894c <__aeabi_dcmplt>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1ee      	bne.n	800c99c <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800c9be:	f7fe fc6f 	bl	800b2a0 <turn_left>
			my_direction = south;
 800c9c2:	4bb9      	ldr	r3, [pc, #740]	; (800cca8 <goal_area_search+0x9d8>)
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9ce:	e004      	b.n	800c9da <goal_area_search+0x70a>
 800c9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9da:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c9de:	f7fb fcd9 	bl	8008394 <__aeabi_i2d>
 800c9e2:	a3af      	add	r3, pc, #700	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7fb ffb0 	bl	800894c <__aeabi_dcmplt>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1ee      	bne.n	800c9d0 <goal_area_search+0x700>
			//直進
			Accelerate();
 800c9f2:	f7fe f925 	bl	800ac40 <Accelerate>
			Decelerate();
 800c9f6:	f7fe f9d3 	bl	800ada0 <Decelerate>
			y--;
 800c9fa:	4bac      	ldr	r3, [pc, #688]	; (800ccac <goal_area_search+0x9dc>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	4baa      	ldr	r3, [pc, #680]	; (800ccac <goal_area_search+0x9dc>)
 800ca04:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca06:	2300      	movs	r3, #0
 800ca08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca0c:	e004      	b.n	800ca18 <goal_area_search+0x748>
 800ca0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca12:	3301      	adds	r3, #1
 800ca14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca18:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ca1c:	f7fb fcba 	bl	8008394 <__aeabi_i2d>
 800ca20:	a39f      	add	r3, pc, #636	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7fb ff91 	bl	800894c <__aeabi_dcmplt>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ee      	bne.n	800ca0e <goal_area_search+0x73e>
			//右回転
			turn_right();
 800ca30:	f7fe fbcc 	bl	800b1cc <turn_right>
			my_direction = west;
 800ca34:	4b9c      	ldr	r3, [pc, #624]	; (800cca8 <goal_area_search+0x9d8>)
 800ca36:	2203      	movs	r2, #3
 800ca38:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca3e:	e002      	b.n	800ca46 <goal_area_search+0x776>
 800ca40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca42:	3301      	adds	r3, #1
 800ca44:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca46:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ca48:	f7fb fca4 	bl	8008394 <__aeabi_i2d>
 800ca4c:	a394      	add	r3, pc, #592	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f7fb ff7b 	bl	800894c <__aeabi_dcmplt>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1f1      	bne.n	800ca40 <goal_area_search+0x770>


		}
		break;
 800ca5c:	e33f      	b.n	800d0de <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800ca5e:	f7fe f8ef 	bl	800ac40 <Accelerate>
		Decelerate();
 800ca62:	f7fe f99d 	bl	800ada0 <Decelerate>
		y--;
 800ca66:	4b91      	ldr	r3, [pc, #580]	; (800ccac <goal_area_search+0x9dc>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	4b8f      	ldr	r3, [pc, #572]	; (800ccac <goal_area_search+0x9dc>)
 800ca70:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800ca72:	f7ff faff 	bl	800c074 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800ca76:	2300      	movs	r3, #0
 800ca78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca7a:	e002      	b.n	800ca82 <goal_area_search+0x7b2>
 800ca7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca7e:	3301      	adds	r3, #1
 800ca80:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca82:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ca84:	f7fb fc86 	bl	8008394 <__aeabi_i2d>
 800ca88:	a385      	add	r3, pc, #532	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7fb ff5d 	bl	800894c <__aeabi_dcmplt>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f1      	bne.n	800ca7c <goal_area_search+0x7ac>

		//現在の座標 == ゴールの上2マス
		if(x == X_GOAL_LESSER){
 800ca98:	4b85      	ldr	r3, [pc, #532]	; (800ccb0 <goal_area_search+0x9e0>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d103      	bne.n	800caa8 <goal_area_search+0x7d8>
			orbit = 'L';
 800caa0:	234c      	movs	r3, #76	; 0x4c
 800caa2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800caa6:	e006      	b.n	800cab6 <goal_area_search+0x7e6>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800caa8:	4b81      	ldr	r3, [pc, #516]	; (800ccb0 <goal_area_search+0x9e0>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b03      	cmp	r3, #3
 800caae:	d102      	bne.n	800cab6 <goal_area_search+0x7e6>
			orbit = 'R';
 800cab0:	2352      	movs	r3, #82	; 0x52
 800cab2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cab6:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800caba:	2b52      	cmp	r3, #82	; 0x52
 800cabc:	f040 80ad 	bne.w	800cc1a <goal_area_search+0x94a>
			//右回り
			turn_right();
 800cac0:	f7fe fb84 	bl	800b1cc <turn_right>
			my_direction = west;
 800cac4:	4b78      	ldr	r3, [pc, #480]	; (800cca8 <goal_area_search+0x9d8>)
 800cac6:	2203      	movs	r2, #3
 800cac8:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800caca:	2300      	movs	r3, #0
 800cacc:	677b      	str	r3, [r7, #116]	; 0x74
 800cace:	e002      	b.n	800cad6 <goal_area_search+0x806>
 800cad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cad2:	3301      	adds	r3, #1
 800cad4:	677b      	str	r3, [r7, #116]	; 0x74
 800cad6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cad8:	f7fb fc5c 	bl	8008394 <__aeabi_i2d>
 800cadc:	a370      	add	r3, pc, #448	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f7fb ff33 	bl	800894c <__aeabi_dcmplt>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1f1      	bne.n	800cad0 <goal_area_search+0x800>
			//直進
			Accelerate();
 800caec:	f7fe f8a8 	bl	800ac40 <Accelerate>
			Decelerate();
 800caf0:	f7fe f956 	bl	800ada0 <Decelerate>
			x--;
 800caf4:	4b6e      	ldr	r3, [pc, #440]	; (800ccb0 <goal_area_search+0x9e0>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	4b6c      	ldr	r3, [pc, #432]	; (800ccb0 <goal_area_search+0x9e0>)
 800cafe:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb00:	f7ff fab8 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb04:	2300      	movs	r3, #0
 800cb06:	673b      	str	r3, [r7, #112]	; 0x70
 800cb08:	e002      	b.n	800cb10 <goal_area_search+0x840>
 800cb0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	673b      	str	r3, [r7, #112]	; 0x70
 800cb10:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cb12:	f7fb fc3f 	bl	8008394 <__aeabi_i2d>
 800cb16:	a362      	add	r3, pc, #392	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7fb ff16 	bl	800894c <__aeabi_dcmplt>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1f1      	bne.n	800cb0a <goal_area_search+0x83a>

			//右回り
			turn_right();
 800cb26:	f7fe fb51 	bl	800b1cc <turn_right>
			my_direction = north;
 800cb2a:	4b5f      	ldr	r3, [pc, #380]	; (800cca8 <goal_area_search+0x9d8>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb30:	2300      	movs	r3, #0
 800cb32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb34:	e002      	b.n	800cb3c <goal_area_search+0x86c>
 800cb36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb38:	3301      	adds	r3, #1
 800cb3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cb3e:	f7fb fc29 	bl	8008394 <__aeabi_i2d>
 800cb42:	a357      	add	r3, pc, #348	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7fb ff00 	bl	800894c <__aeabi_dcmplt>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1f1      	bne.n	800cb36 <goal_area_search+0x866>
			//直進
			Accelerate();
 800cb52:	f7fe f875 	bl	800ac40 <Accelerate>
			Decelerate();
 800cb56:	f7fe f923 	bl	800ada0 <Decelerate>
			y++;
 800cb5a:	4b54      	ldr	r3, [pc, #336]	; (800ccac <goal_area_search+0x9dc>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	4b52      	ldr	r3, [pc, #328]	; (800ccac <goal_area_search+0x9dc>)
 800cb64:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb66:	f7ff fa85 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb6e:	e002      	b.n	800cb76 <goal_area_search+0x8a6>
 800cb70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb72:	3301      	adds	r3, #1
 800cb74:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb76:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cb78:	f7fb fc0c 	bl	8008394 <__aeabi_i2d>
 800cb7c:	a348      	add	r3, pc, #288	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f7fb fee3 	bl	800894c <__aeabi_dcmplt>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1f1      	bne.n	800cb70 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cb8c:	f7fe fb1e 	bl	800b1cc <turn_right>
			my_direction = east;
 800cb90:	4b45      	ldr	r3, [pc, #276]	; (800cca8 <goal_area_search+0x9d8>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cb96:	2300      	movs	r3, #0
 800cb98:	667b      	str	r3, [r7, #100]	; 0x64
 800cb9a:	e002      	b.n	800cba2 <goal_area_search+0x8d2>
 800cb9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb9e:	3301      	adds	r3, #1
 800cba0:	667b      	str	r3, [r7, #100]	; 0x64
 800cba2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cba4:	f7fb fbf6 	bl	8008394 <__aeabi_i2d>
 800cba8:	a33d      	add	r3, pc, #244	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7fb fecd 	bl	800894c <__aeabi_dcmplt>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1f1      	bne.n	800cb9c <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cbb8:	f7fe f842 	bl	800ac40 <Accelerate>
			Decelerate();
 800cbbc:	f7fe f8f0 	bl	800ada0 <Decelerate>
			x++;
 800cbc0:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <goal_area_search+0x9e0>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b39      	ldr	r3, [pc, #228]	; (800ccb0 <goal_area_search+0x9e0>)
 800cbca:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cbcc:	2300      	movs	r3, #0
 800cbce:	663b      	str	r3, [r7, #96]	; 0x60
 800cbd0:	e002      	b.n	800cbd8 <goal_area_search+0x908>
 800cbd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	663b      	str	r3, [r7, #96]	; 0x60
 800cbd8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cbda:	f7fb fbdb 	bl	8008394 <__aeabi_i2d>
 800cbde:	a330      	add	r3, pc, #192	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7fb feb2 	bl	800894c <__aeabi_dcmplt>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1f1      	bne.n	800cbd2 <goal_area_search+0x902>
			//左回転
			turn_left();
 800cbee:	f7fe fb57 	bl	800b2a0 <turn_left>
			my_direction = north;
 800cbf2:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <goal_area_search+0x9d8>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbfc:	e002      	b.n	800cc04 <goal_area_search+0x934>
 800cbfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc00:	3301      	adds	r3, #1
 800cc02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc06:	f7fb fbc5 	bl	8008394 <__aeabi_i2d>
 800cc0a:	a325      	add	r3, pc, #148	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7fb fe9c 	bl	800894c <__aeabi_dcmplt>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1f1      	bne.n	800cbfe <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cc1a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cc1e:	2b4c      	cmp	r3, #76	; 0x4c
 800cc20:	f040 825f 	bne.w	800d0e2 <goal_area_search+0xe12>
			//左回り
			turn_left();
 800cc24:	f7fe fb3c 	bl	800b2a0 <turn_left>
			my_direction = east;
 800cc28:	4b1f      	ldr	r3, [pc, #124]	; (800cca8 <goal_area_search+0x9d8>)
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc2e:	2300      	movs	r3, #0
 800cc30:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc32:	e002      	b.n	800cc3a <goal_area_search+0x96a>
 800cc34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc36:	3301      	adds	r3, #1
 800cc38:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc3c:	f7fb fbaa 	bl	8008394 <__aeabi_i2d>
 800cc40:	a317      	add	r3, pc, #92	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	f7fb fe81 	bl	800894c <__aeabi_dcmplt>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1f1      	bne.n	800cc34 <goal_area_search+0x964>
			//直進
			Accelerate();
 800cc50:	f7fd fff6 	bl	800ac40 <Accelerate>
			Decelerate();
 800cc54:	f7fe f8a4 	bl	800ada0 <Decelerate>
			x++;
 800cc58:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <goal_area_search+0x9e0>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	4b13      	ldr	r3, [pc, #76]	; (800ccb0 <goal_area_search+0x9e0>)
 800cc62:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cc64:	f7ff fa06 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc68:	2300      	movs	r3, #0
 800cc6a:	657b      	str	r3, [r7, #84]	; 0x54
 800cc6c:	e002      	b.n	800cc74 <goal_area_search+0x9a4>
 800cc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc70:	3301      	adds	r3, #1
 800cc72:	657b      	str	r3, [r7, #84]	; 0x54
 800cc74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cc76:	f7fb fb8d 	bl	8008394 <__aeabi_i2d>
 800cc7a:	a309      	add	r3, pc, #36	; (adr r3, 800cca0 <goal_area_search+0x9d0>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7fb fe64 	bl	800894c <__aeabi_dcmplt>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1f1      	bne.n	800cc6e <goal_area_search+0x99e>

			turn_left();
 800cc8a:	f7fe fb09 	bl	800b2a0 <turn_left>
			my_direction = north;
 800cc8e:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <goal_area_search+0x9d8>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc94:	2300      	movs	r3, #0
 800cc96:	653b      	str	r3, [r7, #80]	; 0x50
 800cc98:	e00f      	b.n	800ccba <goal_area_search+0x9ea>
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w
 800cca0:	00000000 	.word	0x00000000
 800cca4:	40cd4c00 	.word	0x40cd4c00
 800cca8:	2000e122 	.word	0x2000e122
 800ccac:	20009f85 	.word	0x20009f85
 800ccb0:	20009f84 	.word	0x20009f84
 800ccb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	653b      	str	r3, [r7, #80]	; 0x50
 800ccba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ccbc:	f7fb fb6a 	bl	8008394 <__aeabi_i2d>
 800ccc0:	a3bb      	add	r3, pc, #748	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7fb fe41 	bl	800894c <__aeabi_dcmplt>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1f1      	bne.n	800ccb4 <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800ccd0:	f7fd ffb6 	bl	800ac40 <Accelerate>
			Decelerate();
 800ccd4:	f7fe f864 	bl	800ada0 <Decelerate>
			y++;
 800ccd8:	4bb7      	ldr	r3, [pc, #732]	; (800cfb8 <goal_area_search+0xce8>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	4bb5      	ldr	r3, [pc, #724]	; (800cfb8 <goal_area_search+0xce8>)
 800cce2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cce4:	f7ff f9c6 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cce8:	2300      	movs	r3, #0
 800ccea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccec:	e002      	b.n	800ccf4 <goal_area_search+0xa24>
 800ccee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ccf6:	f7fb fb4d 	bl	8008394 <__aeabi_i2d>
 800ccfa:	a3ad      	add	r3, pc, #692	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	f7fb fe24 	bl	800894c <__aeabi_dcmplt>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1f1      	bne.n	800ccee <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800cd0a:	f7fe fac9 	bl	800b2a0 <turn_left>
			my_direction = west;
 800cd0e:	4bab      	ldr	r3, [pc, #684]	; (800cfbc <goal_area_search+0xcec>)
 800cd10:	2203      	movs	r2, #3
 800cd12:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd14:	2300      	movs	r3, #0
 800cd16:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd18:	e002      	b.n	800cd20 <goal_area_search+0xa50>
 800cd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd22:	f7fb fb37 	bl	8008394 <__aeabi_i2d>
 800cd26:	a3a2      	add	r3, pc, #648	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	f7fb fe0e 	bl	800894c <__aeabi_dcmplt>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1f1      	bne.n	800cd1a <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800cd36:	f7fd ff83 	bl	800ac40 <Accelerate>
			Decelerate();
 800cd3a:	f7fe f831 	bl	800ada0 <Decelerate>
			x--;
 800cd3e:	4ba0      	ldr	r3, [pc, #640]	; (800cfc0 <goal_area_search+0xcf0>)
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	4b9e      	ldr	r3, [pc, #632]	; (800cfc0 <goal_area_search+0xcf0>)
 800cd48:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	647b      	str	r3, [r7, #68]	; 0x44
 800cd4e:	e002      	b.n	800cd56 <goal_area_search+0xa86>
 800cd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd52:	3301      	adds	r3, #1
 800cd54:	647b      	str	r3, [r7, #68]	; 0x44
 800cd56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd58:	f7fb fb1c 	bl	8008394 <__aeabi_i2d>
 800cd5c:	a394      	add	r3, pc, #592	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	f7fb fdf3 	bl	800894c <__aeabi_dcmplt>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1f1      	bne.n	800cd50 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800cd6c:	f7fe fa2e 	bl	800b1cc <turn_right>
			my_direction = north;
 800cd70:	4b92      	ldr	r3, [pc, #584]	; (800cfbc <goal_area_search+0xcec>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd76:	2300      	movs	r3, #0
 800cd78:	643b      	str	r3, [r7, #64]	; 0x40
 800cd7a:	e002      	b.n	800cd82 <goal_area_search+0xab2>
 800cd7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7e:	3301      	adds	r3, #1
 800cd80:	643b      	str	r3, [r7, #64]	; 0x40
 800cd82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cd84:	f7fb fb06 	bl	8008394 <__aeabi_i2d>
 800cd88:	a389      	add	r3, pc, #548	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7fb fddd 	bl	800894c <__aeabi_dcmplt>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1f1      	bne.n	800cd7c <goal_area_search+0xaac>
		}
		break;
 800cd98:	e1a3      	b.n	800d0e2 <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800cd9a:	f7fd ff51 	bl	800ac40 <Accelerate>
		Decelerate();
 800cd9e:	f7fd ffff 	bl	800ada0 <Decelerate>
		x--;
 800cda2:	4b87      	ldr	r3, [pc, #540]	; (800cfc0 <goal_area_search+0xcf0>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	4b85      	ldr	r3, [pc, #532]	; (800cfc0 <goal_area_search+0xcf0>)
 800cdac:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800cdae:	f7ff f961 	bl	800c074 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb6:	e002      	b.n	800cdbe <goal_area_search+0xaee>
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdba:	3301      	adds	r3, #1
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdc0:	f7fb fae8 	bl	8008394 <__aeabi_i2d>
 800cdc4:	a37a      	add	r3, pc, #488	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	f7fb fdbf 	bl	800894c <__aeabi_dcmplt>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1f1      	bne.n	800cdb8 <goal_area_search+0xae8>

		//現在の座標 == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800cdd4:	4b78      	ldr	r3, [pc, #480]	; (800cfb8 <goal_area_search+0xce8>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d103      	bne.n	800cde4 <goal_area_search+0xb14>
			orbit = 'R';
 800cddc:	2352      	movs	r3, #82	; 0x52
 800cdde:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cde2:	e006      	b.n	800cdf2 <goal_area_search+0xb22>
		}
		//xが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800cde4:	4b74      	ldr	r3, [pc, #464]	; (800cfb8 <goal_area_search+0xce8>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d102      	bne.n	800cdf2 <goal_area_search+0xb22>
			orbit = 'L';
 800cdec:	234c      	movs	r3, #76	; 0x4c
 800cdee:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cdf2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cdf6:	2b52      	cmp	r3, #82	; 0x52
 800cdf8:	f040 80ad 	bne.w	800cf56 <goal_area_search+0xc86>
			//右回り
			turn_right();
 800cdfc:	f7fe f9e6 	bl	800b1cc <turn_right>
			my_direction = north;
 800ce00:	4b6e      	ldr	r3, [pc, #440]	; (800cfbc <goal_area_search+0xcec>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce06:	2300      	movs	r3, #0
 800ce08:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce0a:	e002      	b.n	800ce12 <goal_area_search+0xb42>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	3301      	adds	r3, #1
 800ce10:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce14:	f7fb fabe 	bl	8008394 <__aeabi_i2d>
 800ce18:	a365      	add	r3, pc, #404	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7fb fd95 	bl	800894c <__aeabi_dcmplt>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f1      	bne.n	800ce0c <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800ce28:	f7fd ff0a 	bl	800ac40 <Accelerate>
			Decelerate();
 800ce2c:	f7fd ffb8 	bl	800ada0 <Decelerate>
			y++;
 800ce30:	4b61      	ldr	r3, [pc, #388]	; (800cfb8 <goal_area_search+0xce8>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	4b5f      	ldr	r3, [pc, #380]	; (800cfb8 <goal_area_search+0xce8>)
 800ce3a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ce3c:	f7ff f91a 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce40:	2300      	movs	r3, #0
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34
 800ce44:	e002      	b.n	800ce4c <goal_area_search+0xb7c>
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce48:	3301      	adds	r3, #1
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce4e:	f7fb faa1 	bl	8008394 <__aeabi_i2d>
 800ce52:	a357      	add	r3, pc, #348	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7fb fd78 	bl	800894c <__aeabi_dcmplt>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f1      	bne.n	800ce46 <goal_area_search+0xb76>

			//右回り
			turn_right();
 800ce62:	f7fe f9b3 	bl	800b1cc <turn_right>
			my_direction = east;
 800ce66:	4b55      	ldr	r3, [pc, #340]	; (800cfbc <goal_area_search+0xcec>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ce70:	e002      	b.n	800ce78 <goal_area_search+0xba8>
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	3301      	adds	r3, #1
 800ce76:	633b      	str	r3, [r7, #48]	; 0x30
 800ce78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce7a:	f7fb fa8b 	bl	8008394 <__aeabi_i2d>
 800ce7e:	a34c      	add	r3, pc, #304	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7fb fd62 	bl	800894c <__aeabi_dcmplt>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1f1      	bne.n	800ce72 <goal_area_search+0xba2>
			//直進
			Accelerate();
 800ce8e:	f7fd fed7 	bl	800ac40 <Accelerate>
			Decelerate();
 800ce92:	f7fd ff85 	bl	800ada0 <Decelerate>
			x++;
 800ce96:	4b4a      	ldr	r3, [pc, #296]	; (800cfc0 <goal_area_search+0xcf0>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	4b48      	ldr	r3, [pc, #288]	; (800cfc0 <goal_area_search+0xcf0>)
 800cea0:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cea2:	f7ff f8e7 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cea6:	2300      	movs	r3, #0
 800cea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceaa:	e002      	b.n	800ceb2 <goal_area_search+0xbe2>
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	3301      	adds	r3, #1
 800ceb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ceb4:	f7fb fa6e 	bl	8008394 <__aeabi_i2d>
 800ceb8:	a33d      	add	r3, pc, #244	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7fb fd45 	bl	800894c <__aeabi_dcmplt>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1f1      	bne.n	800ceac <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800cec8:	f7fe f980 	bl	800b1cc <turn_right>
			my_direction = south;
 800cecc:	4b3b      	ldr	r3, [pc, #236]	; (800cfbc <goal_area_search+0xcec>)
 800cece:	2202      	movs	r2, #2
 800ced0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ced2:	2300      	movs	r3, #0
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced6:	e002      	b.n	800cede <goal_area_search+0xc0e>
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	3301      	adds	r3, #1
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cee0:	f7fb fa58 	bl	8008394 <__aeabi_i2d>
 800cee4:	a332      	add	r3, pc, #200	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	f7fb fd2f 	bl	800894c <__aeabi_dcmplt>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1f1      	bne.n	800ced8 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800cef4:	f7fd fea4 	bl	800ac40 <Accelerate>
			Decelerate();
 800cef8:	f7fd ff52 	bl	800ada0 <Decelerate>
			y--;
 800cefc:	4b2e      	ldr	r3, [pc, #184]	; (800cfb8 <goal_area_search+0xce8>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	4b2c      	ldr	r3, [pc, #176]	; (800cfb8 <goal_area_search+0xce8>)
 800cf06:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf08:	2300      	movs	r3, #0
 800cf0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf0c:	e002      	b.n	800cf14 <goal_area_search+0xc44>
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	3301      	adds	r3, #1
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
 800cf14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf16:	f7fb fa3d 	bl	8008394 <__aeabi_i2d>
 800cf1a:	a325      	add	r3, pc, #148	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf20:	f7fb fd14 	bl	800894c <__aeabi_dcmplt>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1f1      	bne.n	800cf0e <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800cf2a:	f7fe f9b9 	bl	800b2a0 <turn_left>
			my_direction = east;
 800cf2e:	4b23      	ldr	r3, [pc, #140]	; (800cfbc <goal_area_search+0xcec>)
 800cf30:	2201      	movs	r2, #1
 800cf32:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf34:	2300      	movs	r3, #0
 800cf36:	623b      	str	r3, [r7, #32]
 800cf38:	e002      	b.n	800cf40 <goal_area_search+0xc70>
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	623b      	str	r3, [r7, #32]
 800cf40:	6a38      	ldr	r0, [r7, #32]
 800cf42:	f7fb fa27 	bl	8008394 <__aeabi_i2d>
 800cf46:	a31a      	add	r3, pc, #104	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7fb fcfe 	bl	800894c <__aeabi_dcmplt>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1f1      	bne.n	800cf3a <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800cf56:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cf5a:	2b4c      	cmp	r3, #76	; 0x4c
 800cf5c:	f040 80c3 	bne.w	800d0e6 <goal_area_search+0xe16>
			//左回り
			turn_left();
 800cf60:	f7fe f99e 	bl	800b2a0 <turn_left>
			my_direction = south;
 800cf64:	4b15      	ldr	r3, [pc, #84]	; (800cfbc <goal_area_search+0xcec>)
 800cf66:	2202      	movs	r2, #2
 800cf68:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e002      	b.n	800cf76 <goal_area_search+0xca6>
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	3301      	adds	r3, #1
 800cf74:	61fb      	str	r3, [r7, #28]
 800cf76:	69f8      	ldr	r0, [r7, #28]
 800cf78:	f7fb fa0c 	bl	8008394 <__aeabi_i2d>
 800cf7c:	a30c      	add	r3, pc, #48	; (adr r3, 800cfb0 <goal_area_search+0xce0>)
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	f7fb fce3 	bl	800894c <__aeabi_dcmplt>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1f1      	bne.n	800cf70 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800cf8c:	f7fd fe58 	bl	800ac40 <Accelerate>
			Decelerate();
 800cf90:	f7fd ff06 	bl	800ada0 <Decelerate>
			y--;
 800cf94:	4b08      	ldr	r3, [pc, #32]	; (800cfb8 <goal_area_search+0xce8>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <goal_area_search+0xce8>)
 800cf9e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cfa0:	f7ff f868 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	61bb      	str	r3, [r7, #24]
 800cfa8:	e00f      	b.n	800cfca <goal_area_search+0xcfa>
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w
 800cfb0:	00000000 	.word	0x00000000
 800cfb4:	40cd4c00 	.word	0x40cd4c00
 800cfb8:	20009f85 	.word	0x20009f85
 800cfbc:	2000e122 	.word	0x2000e122
 800cfc0:	20009f84 	.word	0x20009f84
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	69b8      	ldr	r0, [r7, #24]
 800cfcc:	f7fb f9e2 	bl	8008394 <__aeabi_i2d>
 800cfd0:	a349      	add	r3, pc, #292	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	f7fb fcb9 	bl	800894c <__aeabi_dcmplt>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1f1      	bne.n	800cfc4 <goal_area_search+0xcf4>

			turn_left();
 800cfe0:	f7fe f95e 	bl	800b2a0 <turn_left>
			my_direction = east;
 800cfe4:	4b46      	ldr	r3, [pc, #280]	; (800d100 <goal_area_search+0xe30>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	e002      	b.n	800cff6 <goal_area_search+0xd26>
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	3301      	adds	r3, #1
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	6978      	ldr	r0, [r7, #20]
 800cff8:	f7fb f9cc 	bl	8008394 <__aeabi_i2d>
 800cffc:	a33e      	add	r3, pc, #248	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	f7fb fca3 	bl	800894c <__aeabi_dcmplt>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f1      	bne.n	800cff0 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800d00c:	f7fd fe18 	bl	800ac40 <Accelerate>
			Decelerate();
 800d010:	f7fd fec6 	bl	800ada0 <Decelerate>
			x++;
 800d014:	4b3b      	ldr	r3, [pc, #236]	; (800d104 <goal_area_search+0xe34>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	3301      	adds	r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	4b39      	ldr	r3, [pc, #228]	; (800d104 <goal_area_search+0xe34>)
 800d01e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d020:	f7ff f828 	bl	800c074 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	e002      	b.n	800d030 <goal_area_search+0xd60>
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	3301      	adds	r3, #1
 800d02e:	613b      	str	r3, [r7, #16]
 800d030:	6938      	ldr	r0, [r7, #16]
 800d032:	f7fb f9af 	bl	8008394 <__aeabi_i2d>
 800d036:	a330      	add	r3, pc, #192	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7fb fc86 	bl	800894c <__aeabi_dcmplt>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f1      	bne.n	800d02a <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800d046:	f7fe f92b 	bl	800b2a0 <turn_left>
			my_direction = north;
 800d04a:	4b2d      	ldr	r3, [pc, #180]	; (800d100 <goal_area_search+0xe30>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d050:	2300      	movs	r3, #0
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	e002      	b.n	800d05c <goal_area_search+0xd8c>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3301      	adds	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7fb f999 	bl	8008394 <__aeabi_i2d>
 800d062:	a325      	add	r3, pc, #148	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	f7fb fc70 	bl	800894c <__aeabi_dcmplt>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1f1      	bne.n	800d056 <goal_area_search+0xd86>
			//直進
			Accelerate();
 800d072:	f7fd fde5 	bl	800ac40 <Accelerate>
			Decelerate();
 800d076:	f7fd fe93 	bl	800ada0 <Decelerate>
			y++;
 800d07a:	4b23      	ldr	r3, [pc, #140]	; (800d108 <goal_area_search+0xe38>)
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	3301      	adds	r3, #1
 800d080:	b2da      	uxtb	r2, r3
 800d082:	4b21      	ldr	r3, [pc, #132]	; (800d108 <goal_area_search+0xe38>)
 800d084:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d086:	2300      	movs	r3, #0
 800d088:	60bb      	str	r3, [r7, #8]
 800d08a:	e002      	b.n	800d092 <goal_area_search+0xdc2>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	3301      	adds	r3, #1
 800d090:	60bb      	str	r3, [r7, #8]
 800d092:	68b8      	ldr	r0, [r7, #8]
 800d094:	f7fb f97e 	bl	8008394 <__aeabi_i2d>
 800d098:	a317      	add	r3, pc, #92	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	f7fb fc55 	bl	800894c <__aeabi_dcmplt>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1f1      	bne.n	800d08c <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d0a8:	f7fe f890 	bl	800b1cc <turn_right>
			my_direction = east;
 800d0ac:	4b14      	ldr	r3, [pc, #80]	; (800d100 <goal_area_search+0xe30>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	607b      	str	r3, [r7, #4]
 800d0b6:	e002      	b.n	800d0be <goal_area_search+0xdee>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7fb f968 	bl	8008394 <__aeabi_i2d>
 800d0c4:	a30c      	add	r3, pc, #48	; (adr r3, 800d0f8 <goal_area_search+0xe28>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7fb fc3f 	bl	800894c <__aeabi_dcmplt>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1f1      	bne.n	800d0b8 <goal_area_search+0xde8>
		}
		break;
 800d0d4:	e007      	b.n	800d0e6 <goal_area_search+0xe16>
	default :
		break;
 800d0d6:	bf00      	nop
 800d0d8:	e006      	b.n	800d0e8 <goal_area_search+0xe18>
		break;
 800d0da:	bf00      	nop
 800d0dc:	e004      	b.n	800d0e8 <goal_area_search+0xe18>
		break;
 800d0de:	bf00      	nop
 800d0e0:	e002      	b.n	800d0e8 <goal_area_search+0xe18>
		break;
 800d0e2:	bf00      	nop
 800d0e4:	e000      	b.n	800d0e8 <goal_area_search+0xe18>
		break;
 800d0e6:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d0e8:	f7fe fe54 	bl	800bd94 <Walk_Map_Update>



	//向きが反転して、xもしくはyが変わる

}
 800d0ec:	bf00      	nop
 800d0ee:	37f8      	adds	r7, #248	; 0xf8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	f3af 8000 	nop.w
 800d0f8:	00000000 	.word	0x00000000
 800d0fc:	40cd4c00 	.word	0x40cd4c00
 800d100:	2000e122 	.word	0x2000e122
 800d104:	20009f84 	.word	0x20009f84
 800d108:	20009f85 	.word	0x20009f85
 800d10c:	00000000 	.word	0x00000000

0800d110 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d110:	b598      	push	{r3, r4, r7, lr}
 800d112:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d114:	4baa      	ldr	r3, [pc, #680]	; (800d3c0 <Adachi_judge+0x2b0>)
 800d116:	2200      	movs	r2, #0
 800d118:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d11a:	4baa      	ldr	r3, [pc, #680]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b03      	cmp	r3, #3
 800d120:	f200 8364 	bhi.w	800d7ec <Adachi_judge+0x6dc>
 800d124:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <Adachi_judge+0x1c>)
 800d126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12a:	bf00      	nop
 800d12c:	0800d13d 	.word	0x0800d13d
 800d130:	0800d2d9 	.word	0x0800d2d9
 800d134:	0800d495 	.word	0x0800d495
 800d138:	0800d651 	.word	0x0800d651
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d13c:	4ba2      	ldr	r3, [pc, #648]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4618      	mov	r0, r3
 800d142:	4ba2      	ldr	r3, [pc, #648]	; (800d3cc <Adachi_judge+0x2bc>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	4619      	mov	r1, r3
 800d148:	4aa1      	ldr	r2, [pc, #644]	; (800d3d0 <Adachi_judge+0x2c0>)
 800d14a:	0083      	lsls	r3, r0, #2
 800d14c:	440b      	add	r3, r1
 800d14e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d152:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d127      	bne.n	800d1ac <Adachi_judge+0x9c>
 800d15c:	4b9a      	ldr	r3, [pc, #616]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	461a      	mov	r2, r3
 800d162:	4b9a      	ldr	r3, [pc, #616]	; (800d3cc <Adachi_judge+0x2bc>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	499a      	ldr	r1, [pc, #616]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d16a:	0092      	lsls	r2, r2, #2
 800d16c:	440a      	add	r2, r1
 800d16e:	4413      	add	r3, r2
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	4b95      	ldr	r3, [pc, #596]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	461c      	mov	r4, r3
 800d178:	4b94      	ldr	r3, [pc, #592]	; (800d3cc <Adachi_judge+0x2bc>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	4618      	mov	r0, r3
 800d17e:	4995      	ldr	r1, [pc, #596]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d180:	00a3      	lsls	r3, r4, #2
 800d182:	440b      	add	r3, r1
 800d184:	4403      	add	r3, r0
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d20f      	bcs.n	800d1ac <Adachi_judge+0x9c>
 800d18c:	4b8f      	ldr	r3, [pc, #572]	; (800d3cc <Adachi_judge+0x2bc>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d80b      	bhi.n	800d1ac <Adachi_judge+0x9c>
			  //前北
			  straight();
 800d194:	f7fd feb0 	bl	800aef8 <straight>
			  my_direction = north;
 800d198:	4b8a      	ldr	r3, [pc, #552]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	701a      	strb	r2, [r3, #0]
			  y++;
 800d19e:	4b8b      	ldr	r3, [pc, #556]	; (800d3cc <Adachi_judge+0x2bc>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	4b89      	ldr	r3, [pc, #548]	; (800d3cc <Adachi_judge+0x2bc>)
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	e094      	b.n	800d2d6 <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d1ac:	4b86      	ldr	r3, [pc, #536]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	4b86      	ldr	r3, [pc, #536]	; (800d3cc <Adachi_judge+0x2bc>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4a85      	ldr	r2, [pc, #532]	; (800d3d0 <Adachi_judge+0x2c0>)
 800d1ba:	0083      	lsls	r3, r0, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1c2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d127      	bne.n	800d21c <Adachi_judge+0x10c>
 800d1cc:	4b7e      	ldr	r3, [pc, #504]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	4a7e      	ldr	r2, [pc, #504]	; (800d3cc <Adachi_judge+0x2bc>)
 800d1d4:	7812      	ldrb	r2, [r2, #0]
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	4a7e      	ldr	r2, [pc, #504]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	440b      	add	r3, r1
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	4b79      	ldr	r3, [pc, #484]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	461c      	mov	r4, r3
 800d1e8:	4b78      	ldr	r3, [pc, #480]	; (800d3cc <Adachi_judge+0x2bc>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	4979      	ldr	r1, [pc, #484]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d1f0:	00a3      	lsls	r3, r4, #2
 800d1f2:	440b      	add	r3, r1
 800d1f4:	4403      	add	r3, r0
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d20f      	bcs.n	800d21c <Adachi_judge+0x10c>
 800d1fc:	4b72      	ldr	r3, [pc, #456]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <Adachi_judge+0x10c>
			  //左西
			  L_turn_select();
 800d204:	f7fe fcb4 	bl	800bb70 <L_turn_select>
			  my_direction = west;
 800d208:	4b6e      	ldr	r3, [pc, #440]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d20a:	2203      	movs	r2, #3
 800d20c:	701a      	strb	r2, [r3, #0]
		      x--;
 800d20e:	4b6e      	ldr	r3, [pc, #440]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	3b01      	subs	r3, #1
 800d214:	b2da      	uxtb	r2, r3
 800d216:	4b6c      	ldr	r3, [pc, #432]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	e05c      	b.n	800d2d6 <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d21c:	4b6a      	ldr	r3, [pc, #424]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	4b6a      	ldr	r3, [pc, #424]	; (800d3cc <Adachi_judge+0x2bc>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	4a69      	ldr	r2, [pc, #420]	; (800d3d0 <Adachi_judge+0x2c0>)
 800d22a:	0083      	lsls	r3, r0, #2
 800d22c:	440b      	add	r3, r1
 800d22e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d232:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d127      	bne.n	800d28c <Adachi_judge+0x17c>
 800d23c:	4b62      	ldr	r3, [pc, #392]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	4a62      	ldr	r2, [pc, #392]	; (800d3cc <Adachi_judge+0x2bc>)
 800d244:	7812      	ldrb	r2, [r2, #0]
 800d246:	4611      	mov	r1, r2
 800d248:	4a62      	ldr	r2, [pc, #392]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	440b      	add	r3, r1
 800d250:	781a      	ldrb	r2, [r3, #0]
 800d252:	4b5d      	ldr	r3, [pc, #372]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	461c      	mov	r4, r3
 800d258:	4b5c      	ldr	r3, [pc, #368]	; (800d3cc <Adachi_judge+0x2bc>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	4618      	mov	r0, r3
 800d25e:	495d      	ldr	r1, [pc, #372]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d260:	00a3      	lsls	r3, r4, #2
 800d262:	440b      	add	r3, r1
 800d264:	4403      	add	r3, r0
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d20f      	bcs.n	800d28c <Adachi_judge+0x17c>
 800d26c:	4b56      	ldr	r3, [pc, #344]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d80b      	bhi.n	800d28c <Adachi_judge+0x17c>
			  //右東
			  R_turn_select();
 800d274:	f7fe fc38 	bl	800bae8 <R_turn_select>
	          my_direction = east;
 800d278:	4b52      	ldr	r3, [pc, #328]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	701a      	strb	r2, [r3, #0]
	          x++;
 800d27e:	4b52      	ldr	r3, [pc, #328]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	3301      	adds	r3, #1
 800d284:	b2da      	uxtb	r2, r3
 800d286:	4b50      	ldr	r3, [pc, #320]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d288:	701a      	strb	r2, [r3, #0]
 800d28a:	e024      	b.n	800d2d6 <Adachi_judge+0x1c6>
		  }
		  else {
			  //後南
	          Decelerate();
 800d28c:	f7fd fd88 	bl	800ada0 <Decelerate>
	          wait(0.3);
 800d290:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800d3b8 <Adachi_judge+0x2a8>
 800d294:	f7fd fc56 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800d298:	4b49      	ldr	r3, [pc, #292]	; (800d3c0 <Adachi_judge+0x2b0>)
 800d29a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d101      	bne.n	800d2a6 <Adachi_judge+0x196>
	        	  Motor_PWM_Stop();
 800d2a2:	f7fc ff05 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d2a6:	f7fe fb3d 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800d2aa:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800d3b8 <Adachi_judge+0x2a8>
 800d2ae:	f7fd fc49 	bl	800ab44 <wait>
	  	      back_calib();
 800d2b2:	f7fe fbb1 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800d2b6:	ed9f 0b40 	vldr	d0, [pc, #256]	; 800d3b8 <Adachi_judge+0x2a8>
 800d2ba:	f7fd fc43 	bl	800ab44 <wait>
	       	  Start_Accel();
 800d2be:	f7fd fc67 	bl	800ab90 <Start_Accel>
	       	  my_direction = south;
 800d2c2:	4b40      	ldr	r3, [pc, #256]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d2c8:	4b40      	ldr	r3, [pc, #256]	; (800d3cc <Adachi_judge+0x2bc>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	4b3e      	ldr	r3, [pc, #248]	; (800d3cc <Adachi_judge+0x2bc>)
 800d2d2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d2d4:	e28b      	b.n	800d7ee <Adachi_judge+0x6de>
 800d2d6:	e28a      	b.n	800d7ee <Adachi_judge+0x6de>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d2d8:	4b3b      	ldr	r3, [pc, #236]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	4b3b      	ldr	r3, [pc, #236]	; (800d3cc <Adachi_judge+0x2bc>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4a3a      	ldr	r2, [pc, #232]	; (800d3d0 <Adachi_judge+0x2c0>)
 800d2e6:	0083      	lsls	r3, r0, #2
 800d2e8:	440b      	add	r3, r1
 800d2ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d127      	bne.n	800d348 <Adachi_judge+0x238>
 800d2f8:	4b33      	ldr	r3, [pc, #204]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	4a33      	ldr	r2, [pc, #204]	; (800d3cc <Adachi_judge+0x2bc>)
 800d300:	7812      	ldrb	r2, [r2, #0]
 800d302:	4611      	mov	r1, r2
 800d304:	4a33      	ldr	r2, [pc, #204]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	440b      	add	r3, r1
 800d30c:	781a      	ldrb	r2, [r3, #0]
 800d30e:	4b2e      	ldr	r3, [pc, #184]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	461c      	mov	r4, r3
 800d314:	4b2d      	ldr	r3, [pc, #180]	; (800d3cc <Adachi_judge+0x2bc>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	4618      	mov	r0, r3
 800d31a:	492e      	ldr	r1, [pc, #184]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d31c:	00a3      	lsls	r3, r4, #2
 800d31e:	440b      	add	r3, r1
 800d320:	4403      	add	r3, r0
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	429a      	cmp	r2, r3
 800d326:	d20f      	bcs.n	800d348 <Adachi_judge+0x238>
 800d328:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d80b      	bhi.n	800d348 <Adachi_judge+0x238>
			  //前東
			  straight();
 800d330:	f7fd fde2 	bl	800aef8 <straight>
	       	  my_direction = east;
 800d334:	4b23      	ldr	r3, [pc, #140]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d336:	2201      	movs	r2, #1
 800d338:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d33a:	4b23      	ldr	r3, [pc, #140]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	3301      	adds	r3, #1
 800d340:	b2da      	uxtb	r2, r3
 800d342:	4b21      	ldr	r3, [pc, #132]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	e0a4      	b.n	800d492 <Adachi_judge+0x382>
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d348:	4b1f      	ldr	r3, [pc, #124]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	4b1f      	ldr	r3, [pc, #124]	; (800d3cc <Adachi_judge+0x2bc>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	4619      	mov	r1, r3
 800d354:	4a1e      	ldr	r2, [pc, #120]	; (800d3d0 <Adachi_judge+0x2c0>)
 800d356:	0083      	lsls	r3, r0, #2
 800d358:	440b      	add	r3, r1
 800d35a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d35e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	d137      	bne.n	800d3d8 <Adachi_judge+0x2c8>
 800d368:	4b17      	ldr	r3, [pc, #92]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	461a      	mov	r2, r3
 800d36e:	4b17      	ldr	r3, [pc, #92]	; (800d3cc <Adachi_judge+0x2bc>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	4917      	ldr	r1, [pc, #92]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d376:	0092      	lsls	r2, r2, #2
 800d378:	440a      	add	r2, r1
 800d37a:	4413      	add	r3, r2
 800d37c:	781a      	ldrb	r2, [r3, #0]
 800d37e:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <Adachi_judge+0x2b8>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	461c      	mov	r4, r3
 800d384:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <Adachi_judge+0x2bc>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	4618      	mov	r0, r3
 800d38a:	4912      	ldr	r1, [pc, #72]	; (800d3d4 <Adachi_judge+0x2c4>)
 800d38c:	00a3      	lsls	r3, r4, #2
 800d38e:	440b      	add	r3, r1
 800d390:	4403      	add	r3, r0
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d21f      	bcs.n	800d3d8 <Adachi_judge+0x2c8>
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <Adachi_judge+0x2bc>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d81b      	bhi.n	800d3d8 <Adachi_judge+0x2c8>
			  //左�?
			  L_turn_select();
 800d3a0:	f7fe fbe6 	bl	800bb70 <L_turn_select>
	       	  my_direction = north;
 800d3a4:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <Adachi_judge+0x2b4>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d3aa:	4b08      	ldr	r3, [pc, #32]	; (800d3cc <Adachi_judge+0x2bc>)
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <Adachi_judge+0x2bc>)
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	e06c      	b.n	800d492 <Adachi_judge+0x382>
 800d3b8:	33333333 	.word	0x33333333
 800d3bc:	3fd33333 	.word	0x3fd33333
 800d3c0:	20000074 	.word	0x20000074
 800d3c4:	2000e122 	.word	0x2000e122
 800d3c8:	20009f84 	.word	0x20009f84
 800d3cc:	20009f85 	.word	0x20009f85
 800d3d0:	2001a6d4 	.word	0x2001a6d4
 800d3d4:	2001a268 	.word	0x2001a268
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d3d8:	4b97      	ldr	r3, [pc, #604]	; (800d638 <Adachi_judge+0x528>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	4b97      	ldr	r3, [pc, #604]	; (800d63c <Adachi_judge+0x52c>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4a96      	ldr	r2, [pc, #600]	; (800d640 <Adachi_judge+0x530>)
 800d3e6:	0083      	lsls	r3, r0, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d3ee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d127      	bne.n	800d448 <Adachi_judge+0x338>
 800d3f8:	4b8f      	ldr	r3, [pc, #572]	; (800d638 <Adachi_judge+0x528>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4b8f      	ldr	r3, [pc, #572]	; (800d63c <Adachi_judge+0x52c>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	3b01      	subs	r3, #1
 800d404:	498f      	ldr	r1, [pc, #572]	; (800d644 <Adachi_judge+0x534>)
 800d406:	0092      	lsls	r2, r2, #2
 800d408:	440a      	add	r2, r1
 800d40a:	4413      	add	r3, r2
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	4b8a      	ldr	r3, [pc, #552]	; (800d638 <Adachi_judge+0x528>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	461c      	mov	r4, r3
 800d414:	4b89      	ldr	r3, [pc, #548]	; (800d63c <Adachi_judge+0x52c>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	498a      	ldr	r1, [pc, #552]	; (800d644 <Adachi_judge+0x534>)
 800d41c:	00a3      	lsls	r3, r4, #2
 800d41e:	440b      	add	r3, r1
 800d420:	4403      	add	r3, r0
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d20f      	bcs.n	800d448 <Adachi_judge+0x338>
 800d428:	4b84      	ldr	r3, [pc, #528]	; (800d63c <Adachi_judge+0x52c>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <Adachi_judge+0x338>
			  //右�?
			  R_turn_select();
 800d430:	f7fe fb5a 	bl	800bae8 <R_turn_select>
	       	  my_direction = south;
 800d434:	4b84      	ldr	r3, [pc, #528]	; (800d648 <Adachi_judge+0x538>)
 800d436:	2202      	movs	r2, #2
 800d438:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d43a:	4b80      	ldr	r3, [pc, #512]	; (800d63c <Adachi_judge+0x52c>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	3b01      	subs	r3, #1
 800d440:	b2da      	uxtb	r2, r3
 800d442:	4b7e      	ldr	r3, [pc, #504]	; (800d63c <Adachi_judge+0x52c>)
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e024      	b.n	800d492 <Adachi_judge+0x382>
		  }
		  else {
			  //後西
	          Decelerate();
 800d448:	f7fd fcaa 	bl	800ada0 <Decelerate>
	          wait(0.3);
 800d44c:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800d630 <Adachi_judge+0x520>
 800d450:	f7fd fb78 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800d454:	4b7d      	ldr	r3, [pc, #500]	; (800d64c <Adachi_judge+0x53c>)
 800d456:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d101      	bne.n	800d462 <Adachi_judge+0x352>
	        	  Motor_PWM_Stop();
 800d45e:	f7fc fe27 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d462:	f7fe fa5f 	bl	800b924 <rotate180>
	  	      wait(0.3);
 800d466:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800d630 <Adachi_judge+0x520>
 800d46a:	f7fd fb6b 	bl	800ab44 <wait>
	  	      back_calib();
 800d46e:	f7fe fad3 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800d472:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 800d630 <Adachi_judge+0x520>
 800d476:	f7fd fb65 	bl	800ab44 <wait>
	       	  Start_Accel();
 800d47a:	f7fd fb89 	bl	800ab90 <Start_Accel>

	       	  my_direction = west;
 800d47e:	4b72      	ldr	r3, [pc, #456]	; (800d648 <Adachi_judge+0x538>)
 800d480:	2203      	movs	r2, #3
 800d482:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d484:	4b6c      	ldr	r3, [pc, #432]	; (800d638 <Adachi_judge+0x528>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	3b01      	subs	r3, #1
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	4b6a      	ldr	r3, [pc, #424]	; (800d638 <Adachi_judge+0x528>)
 800d48e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d490:	e1ad      	b.n	800d7ee <Adachi_judge+0x6de>
 800d492:	e1ac      	b.n	800d7ee <Adachi_judge+0x6de>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d494:	4b68      	ldr	r3, [pc, #416]	; (800d638 <Adachi_judge+0x528>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	4b68      	ldr	r3, [pc, #416]	; (800d63c <Adachi_judge+0x52c>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4a67      	ldr	r2, [pc, #412]	; (800d640 <Adachi_judge+0x530>)
 800d4a2:	0083      	lsls	r3, r0, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d4aa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d127      	bne.n	800d504 <Adachi_judge+0x3f4>
 800d4b4:	4b60      	ldr	r3, [pc, #384]	; (800d638 <Adachi_judge+0x528>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b60      	ldr	r3, [pc, #384]	; (800d63c <Adachi_judge+0x52c>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	4960      	ldr	r1, [pc, #384]	; (800d644 <Adachi_judge+0x534>)
 800d4c2:	0092      	lsls	r2, r2, #2
 800d4c4:	440a      	add	r2, r1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	781a      	ldrb	r2, [r3, #0]
 800d4ca:	4b5b      	ldr	r3, [pc, #364]	; (800d638 <Adachi_judge+0x528>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	461c      	mov	r4, r3
 800d4d0:	4b5a      	ldr	r3, [pc, #360]	; (800d63c <Adachi_judge+0x52c>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	495b      	ldr	r1, [pc, #364]	; (800d644 <Adachi_judge+0x534>)
 800d4d8:	00a3      	lsls	r3, r4, #2
 800d4da:	440b      	add	r3, r1
 800d4dc:	4403      	add	r3, r0
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d20f      	bcs.n	800d504 <Adachi_judge+0x3f4>
 800d4e4:	4b55      	ldr	r3, [pc, #340]	; (800d63c <Adachi_judge+0x52c>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <Adachi_judge+0x3f4>
			  //前南
			  straight();
 800d4ec:	f7fd fd04 	bl	800aef8 <straight>
	       	  my_direction = south;
 800d4f0:	4b55      	ldr	r3, [pc, #340]	; (800d648 <Adachi_judge+0x538>)
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d4f6:	4b51      	ldr	r3, [pc, #324]	; (800d63c <Adachi_judge+0x52c>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	4b4f      	ldr	r3, [pc, #316]	; (800d63c <Adachi_judge+0x52c>)
 800d500:	701a      	strb	r2, [r3, #0]
 800d502:	e094      	b.n	800d62e <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d504:	4b4c      	ldr	r3, [pc, #304]	; (800d638 <Adachi_judge+0x528>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	4618      	mov	r0, r3
 800d50a:	4b4c      	ldr	r3, [pc, #304]	; (800d63c <Adachi_judge+0x52c>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	4619      	mov	r1, r3
 800d510:	4a4b      	ldr	r2, [pc, #300]	; (800d640 <Adachi_judge+0x530>)
 800d512:	0083      	lsls	r3, r0, #2
 800d514:	440b      	add	r3, r1
 800d516:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d51a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	d127      	bne.n	800d574 <Adachi_judge+0x464>
 800d524:	4b44      	ldr	r3, [pc, #272]	; (800d638 <Adachi_judge+0x528>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	3301      	adds	r3, #1
 800d52a:	4a44      	ldr	r2, [pc, #272]	; (800d63c <Adachi_judge+0x52c>)
 800d52c:	7812      	ldrb	r2, [r2, #0]
 800d52e:	4611      	mov	r1, r2
 800d530:	4a44      	ldr	r2, [pc, #272]	; (800d644 <Adachi_judge+0x534>)
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	440b      	add	r3, r1
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	4b3f      	ldr	r3, [pc, #252]	; (800d638 <Adachi_judge+0x528>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	461c      	mov	r4, r3
 800d540:	4b3e      	ldr	r3, [pc, #248]	; (800d63c <Adachi_judge+0x52c>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	4618      	mov	r0, r3
 800d546:	493f      	ldr	r1, [pc, #252]	; (800d644 <Adachi_judge+0x534>)
 800d548:	00a3      	lsls	r3, r4, #2
 800d54a:	440b      	add	r3, r1
 800d54c:	4403      	add	r3, r0
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d20f      	bcs.n	800d574 <Adachi_judge+0x464>
 800d554:	4b38      	ldr	r3, [pc, #224]	; (800d638 <Adachi_judge+0x528>)
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d80b      	bhi.n	800d574 <Adachi_judge+0x464>
			  //左東
			  L_turn_select();
 800d55c:	f7fe fb08 	bl	800bb70 <L_turn_select>
	       	  my_direction = east;
 800d560:	4b39      	ldr	r3, [pc, #228]	; (800d648 <Adachi_judge+0x538>)
 800d562:	2201      	movs	r2, #1
 800d564:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d566:	4b34      	ldr	r3, [pc, #208]	; (800d638 <Adachi_judge+0x528>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	3301      	adds	r3, #1
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	4b32      	ldr	r3, [pc, #200]	; (800d638 <Adachi_judge+0x528>)
 800d570:	701a      	strb	r2, [r3, #0]
 800d572:	e05c      	b.n	800d62e <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d574:	4b30      	ldr	r3, [pc, #192]	; (800d638 <Adachi_judge+0x528>)
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	4b30      	ldr	r3, [pc, #192]	; (800d63c <Adachi_judge+0x52c>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	4619      	mov	r1, r3
 800d580:	4a2f      	ldr	r2, [pc, #188]	; (800d640 <Adachi_judge+0x530>)
 800d582:	0083      	lsls	r3, r0, #2
 800d584:	440b      	add	r3, r1
 800d586:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d58a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	d127      	bne.n	800d5e4 <Adachi_judge+0x4d4>
 800d594:	4b28      	ldr	r3, [pc, #160]	; (800d638 <Adachi_judge+0x528>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	3b01      	subs	r3, #1
 800d59a:	4a28      	ldr	r2, [pc, #160]	; (800d63c <Adachi_judge+0x52c>)
 800d59c:	7812      	ldrb	r2, [r2, #0]
 800d59e:	4611      	mov	r1, r2
 800d5a0:	4a28      	ldr	r2, [pc, #160]	; (800d644 <Adachi_judge+0x534>)
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	440b      	add	r3, r1
 800d5a8:	781a      	ldrb	r2, [r3, #0]
 800d5aa:	4b23      	ldr	r3, [pc, #140]	; (800d638 <Adachi_judge+0x528>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	461c      	mov	r4, r3
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <Adachi_judge+0x52c>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	4923      	ldr	r1, [pc, #140]	; (800d644 <Adachi_judge+0x534>)
 800d5b8:	00a3      	lsls	r3, r4, #2
 800d5ba:	440b      	add	r3, r1
 800d5bc:	4403      	add	r3, r0
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d20f      	bcs.n	800d5e4 <Adachi_judge+0x4d4>
 800d5c4:	4b1c      	ldr	r3, [pc, #112]	; (800d638 <Adachi_judge+0x528>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <Adachi_judge+0x4d4>
			  //右西
			  R_turn_select();
 800d5cc:	f7fe fa8c 	bl	800bae8 <R_turn_select>
	       	  my_direction = west;
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <Adachi_judge+0x538>)
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d5d6:	4b18      	ldr	r3, [pc, #96]	; (800d638 <Adachi_judge+0x528>)
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	4b16      	ldr	r3, [pc, #88]	; (800d638 <Adachi_judge+0x528>)
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	e024      	b.n	800d62e <Adachi_judge+0x51e>
		  }
		  else {
			  //後北
	          Decelerate();
 800d5e4:	f7fd fbdc 	bl	800ada0 <Decelerate>
	          wait(0.3);;
 800d5e8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800d630 <Adachi_judge+0x520>
 800d5ec:	f7fd faaa 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800d5f0:	4b16      	ldr	r3, [pc, #88]	; (800d64c <Adachi_judge+0x53c>)
 800d5f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d101      	bne.n	800d5fe <Adachi_judge+0x4ee>
	        	  Motor_PWM_Stop();
 800d5fa:	f7fc fd59 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d5fe:	f7fe f991 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800d602:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d630 <Adachi_judge+0x520>
 800d606:	f7fd fa9d 	bl	800ab44 <wait>
	  	      back_calib();
 800d60a:	f7fe fa05 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800d60e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800d630 <Adachi_judge+0x520>
 800d612:	f7fd fa97 	bl	800ab44 <wait>
	       	  Start_Accel();
 800d616:	f7fd fabb 	bl	800ab90 <Start_Accel>

	       	  my_direction = north;
 800d61a:	4b0b      	ldr	r3, [pc, #44]	; (800d648 <Adachi_judge+0x538>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d620:	4b06      	ldr	r3, [pc, #24]	; (800d63c <Adachi_judge+0x52c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	3301      	adds	r3, #1
 800d626:	b2da      	uxtb	r2, r3
 800d628:	4b04      	ldr	r3, [pc, #16]	; (800d63c <Adachi_judge+0x52c>)
 800d62a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d62c:	e0df      	b.n	800d7ee <Adachi_judge+0x6de>
 800d62e:	e0de      	b.n	800d7ee <Adachi_judge+0x6de>
 800d630:	33333333 	.word	0x33333333
 800d634:	3fd33333 	.word	0x3fd33333
 800d638:	20009f84 	.word	0x20009f84
 800d63c:	20009f85 	.word	0x20009f85
 800d640:	2001a6d4 	.word	0x2001a6d4
 800d644:	2001a268 	.word	0x2001a268
 800d648:	2000e122 	.word	0x2000e122
 800d64c:	20000074 	.word	0x20000074

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d650:	4b6b      	ldr	r3, [pc, #428]	; (800d800 <Adachi_judge+0x6f0>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	4618      	mov	r0, r3
 800d656:	4b6b      	ldr	r3, [pc, #428]	; (800d804 <Adachi_judge+0x6f4>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	4619      	mov	r1, r3
 800d65c:	4a6a      	ldr	r2, [pc, #424]	; (800d808 <Adachi_judge+0x6f8>)
 800d65e:	0083      	lsls	r3, r0, #2
 800d660:	440b      	add	r3, r1
 800d662:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d666:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d127      	bne.n	800d6c0 <Adachi_judge+0x5b0>
 800d670:	4b63      	ldr	r3, [pc, #396]	; (800d800 <Adachi_judge+0x6f0>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	3b01      	subs	r3, #1
 800d676:	4a63      	ldr	r2, [pc, #396]	; (800d804 <Adachi_judge+0x6f4>)
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	4611      	mov	r1, r2
 800d67c:	4a63      	ldr	r2, [pc, #396]	; (800d80c <Adachi_judge+0x6fc>)
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	440b      	add	r3, r1
 800d684:	781a      	ldrb	r2, [r3, #0]
 800d686:	4b5e      	ldr	r3, [pc, #376]	; (800d800 <Adachi_judge+0x6f0>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	461c      	mov	r4, r3
 800d68c:	4b5d      	ldr	r3, [pc, #372]	; (800d804 <Adachi_judge+0x6f4>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	495e      	ldr	r1, [pc, #376]	; (800d80c <Adachi_judge+0x6fc>)
 800d694:	00a3      	lsls	r3, r4, #2
 800d696:	440b      	add	r3, r1
 800d698:	4403      	add	r3, r0
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d20f      	bcs.n	800d6c0 <Adachi_judge+0x5b0>
 800d6a0:	4b57      	ldr	r3, [pc, #348]	; (800d800 <Adachi_judge+0x6f0>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00b      	beq.n	800d6c0 <Adachi_judge+0x5b0>
			  //前西
			  straight();
 800d6a8:	f7fd fc26 	bl	800aef8 <straight>
	       	  my_direction = west;
 800d6ac:	4b58      	ldr	r3, [pc, #352]	; (800d810 <Adachi_judge+0x700>)
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d6b2:	4b53      	ldr	r3, [pc, #332]	; (800d800 <Adachi_judge+0x6f0>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	4b51      	ldr	r3, [pc, #324]	; (800d800 <Adachi_judge+0x6f0>)
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e094      	b.n	800d7ea <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d6c0:	4b4f      	ldr	r3, [pc, #316]	; (800d800 <Adachi_judge+0x6f0>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	4b4f      	ldr	r3, [pc, #316]	; (800d804 <Adachi_judge+0x6f4>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4a4e      	ldr	r2, [pc, #312]	; (800d808 <Adachi_judge+0x6f8>)
 800d6ce:	0083      	lsls	r3, r0, #2
 800d6d0:	440b      	add	r3, r1
 800d6d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d6d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d127      	bne.n	800d730 <Adachi_judge+0x620>
 800d6e0:	4b47      	ldr	r3, [pc, #284]	; (800d800 <Adachi_judge+0x6f0>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4b47      	ldr	r3, [pc, #284]	; (800d804 <Adachi_judge+0x6f4>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	4947      	ldr	r1, [pc, #284]	; (800d80c <Adachi_judge+0x6fc>)
 800d6ee:	0092      	lsls	r2, r2, #2
 800d6f0:	440a      	add	r2, r1
 800d6f2:	4413      	add	r3, r2
 800d6f4:	781a      	ldrb	r2, [r3, #0]
 800d6f6:	4b42      	ldr	r3, [pc, #264]	; (800d800 <Adachi_judge+0x6f0>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	461c      	mov	r4, r3
 800d6fc:	4b41      	ldr	r3, [pc, #260]	; (800d804 <Adachi_judge+0x6f4>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	4942      	ldr	r1, [pc, #264]	; (800d80c <Adachi_judge+0x6fc>)
 800d704:	00a3      	lsls	r3, r4, #2
 800d706:	440b      	add	r3, r1
 800d708:	4403      	add	r3, r0
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d20f      	bcs.n	800d730 <Adachi_judge+0x620>
 800d710:	4b3c      	ldr	r3, [pc, #240]	; (800d804 <Adachi_judge+0x6f4>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00b      	beq.n	800d730 <Adachi_judge+0x620>
			  //左�?
			  L_turn_select();
 800d718:	f7fe fa2a 	bl	800bb70 <L_turn_select>
	       	  my_direction = south;
 800d71c:	4b3c      	ldr	r3, [pc, #240]	; (800d810 <Adachi_judge+0x700>)
 800d71e:	2202      	movs	r2, #2
 800d720:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d722:	4b38      	ldr	r3, [pc, #224]	; (800d804 <Adachi_judge+0x6f4>)
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	3b01      	subs	r3, #1
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	4b36      	ldr	r3, [pc, #216]	; (800d804 <Adachi_judge+0x6f4>)
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	e05c      	b.n	800d7ea <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d730:	4b33      	ldr	r3, [pc, #204]	; (800d800 <Adachi_judge+0x6f0>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	4618      	mov	r0, r3
 800d736:	4b33      	ldr	r3, [pc, #204]	; (800d804 <Adachi_judge+0x6f4>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	4619      	mov	r1, r3
 800d73c:	4a32      	ldr	r2, [pc, #200]	; (800d808 <Adachi_judge+0x6f8>)
 800d73e:	0083      	lsls	r3, r0, #2
 800d740:	440b      	add	r3, r1
 800d742:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d746:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d127      	bne.n	800d7a0 <Adachi_judge+0x690>
 800d750:	4b2b      	ldr	r3, [pc, #172]	; (800d800 <Adachi_judge+0x6f0>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	4b2b      	ldr	r3, [pc, #172]	; (800d804 <Adachi_judge+0x6f4>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	3301      	adds	r3, #1
 800d75c:	492b      	ldr	r1, [pc, #172]	; (800d80c <Adachi_judge+0x6fc>)
 800d75e:	0092      	lsls	r2, r2, #2
 800d760:	440a      	add	r2, r1
 800d762:	4413      	add	r3, r2
 800d764:	781a      	ldrb	r2, [r3, #0]
 800d766:	4b26      	ldr	r3, [pc, #152]	; (800d800 <Adachi_judge+0x6f0>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	461c      	mov	r4, r3
 800d76c:	4b25      	ldr	r3, [pc, #148]	; (800d804 <Adachi_judge+0x6f4>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	4618      	mov	r0, r3
 800d772:	4926      	ldr	r1, [pc, #152]	; (800d80c <Adachi_judge+0x6fc>)
 800d774:	00a3      	lsls	r3, r4, #2
 800d776:	440b      	add	r3, r1
 800d778:	4403      	add	r3, r0
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d20f      	bcs.n	800d7a0 <Adachi_judge+0x690>
 800d780:	4b20      	ldr	r3, [pc, #128]	; (800d804 <Adachi_judge+0x6f4>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b02      	cmp	r3, #2
 800d786:	d80b      	bhi.n	800d7a0 <Adachi_judge+0x690>
			  //右�?
			  R_turn_select();
 800d788:	f7fe f9ae 	bl	800bae8 <R_turn_select>
	       	  my_direction = north;
 800d78c:	4b20      	ldr	r3, [pc, #128]	; (800d810 <Adachi_judge+0x700>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <Adachi_judge+0x6f4>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	3301      	adds	r3, #1
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	4b1a      	ldr	r3, [pc, #104]	; (800d804 <Adachi_judge+0x6f4>)
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	e024      	b.n	800d7ea <Adachi_judge+0x6da>
		  }
		  else {
			  //後東
	          Decelerate();
 800d7a0:	f7fd fafe 	bl	800ada0 <Decelerate>
	          wait(0.3);;
 800d7a4:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800d7f8 <Adachi_judge+0x6e8>
 800d7a8:	f7fd f9cc 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800d7ac:	4b19      	ldr	r3, [pc, #100]	; (800d814 <Adachi_judge+0x704>)
 800d7ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d101      	bne.n	800d7ba <Adachi_judge+0x6aa>
	        	  Motor_PWM_Stop();
 800d7b6:	f7fc fc7b 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d7ba:	f7fe f8b3 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800d7be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d7f8 <Adachi_judge+0x6e8>
 800d7c2:	f7fd f9bf 	bl	800ab44 <wait>
	  	      back_calib();
 800d7c6:	f7fe f927 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800d7ca:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d7f8 <Adachi_judge+0x6e8>
 800d7ce:	f7fd f9b9 	bl	800ab44 <wait>
	       	  Start_Accel();
 800d7d2:	f7fd f9dd 	bl	800ab90 <Start_Accel>

	       	  my_direction = east;
 800d7d6:	4b0e      	ldr	r3, [pc, #56]	; (800d810 <Adachi_judge+0x700>)
 800d7d8:	2201      	movs	r2, #1
 800d7da:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d7dc:	4b08      	ldr	r3, [pc, #32]	; (800d800 <Adachi_judge+0x6f0>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	4b06      	ldr	r3, [pc, #24]	; (800d800 <Adachi_judge+0x6f0>)
 800d7e6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d7e8:	e001      	b.n	800d7ee <Adachi_judge+0x6de>
 800d7ea:	e000      	b.n	800d7ee <Adachi_judge+0x6de>

	  default:
		  break;
 800d7ec:	bf00      	nop
	  }//swtich end
}
 800d7ee:	bf00      	nop
 800d7f0:	bd98      	pop	{r3, r4, r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	f3af 8000 	nop.w
 800d7f8:	33333333 	.word	0x33333333
 800d7fc:	3fd33333 	.word	0x3fd33333
 800d800:	20009f84 	.word	0x20009f84
 800d804:	20009f85 	.word	0x20009f85
 800d808:	2001a6d4 	.word	0x2001a6d4
 800d80c:	2001a268 	.word	0x2001a268
 800d810:	2000e122 	.word	0x2000e122
 800d814:	20000074 	.word	0x20000074

0800d818 <Adachi_go_back>:
void Adachi_go_back(){
 800d818:	b598      	push	{r3, r4, r7, lr}
 800d81a:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d81c:	4baa      	ldr	r3, [pc, #680]	; (800dac8 <Adachi_go_back+0x2b0>)
 800d81e:	2200      	movs	r2, #0
 800d820:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d822:	4baa      	ldr	r3, [pc, #680]	; (800dacc <Adachi_go_back+0x2b4>)
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b03      	cmp	r3, #3
 800d828:	f200 8364 	bhi.w	800def4 <Adachi_go_back+0x6dc>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <Adachi_go_back+0x1c>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d845 	.word	0x0800d845
 800d838:	0800d9e1 	.word	0x0800d9e1
 800d83c:	0800db9d 	.word	0x0800db9d
 800d840:	0800dd59 	.word	0x0800dd59
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d844:	4ba2      	ldr	r3, [pc, #648]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	4ba2      	ldr	r3, [pc, #648]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	4619      	mov	r1, r3
 800d850:	4aa1      	ldr	r2, [pc, #644]	; (800dad8 <Adachi_go_back+0x2c0>)
 800d852:	0083      	lsls	r3, r0, #2
 800d854:	440b      	add	r3, r1
 800d856:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d85a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	d127      	bne.n	800d8b4 <Adachi_go_back+0x9c>
 800d864:	4b9a      	ldr	r3, [pc, #616]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	4b9a      	ldr	r3, [pc, #616]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	3301      	adds	r3, #1
 800d870:	499a      	ldr	r1, [pc, #616]	; (800dadc <Adachi_go_back+0x2c4>)
 800d872:	0092      	lsls	r2, r2, #2
 800d874:	440a      	add	r2, r1
 800d876:	4413      	add	r3, r2
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	4b95      	ldr	r3, [pc, #596]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	461c      	mov	r4, r3
 800d880:	4b94      	ldr	r3, [pc, #592]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	4995      	ldr	r1, [pc, #596]	; (800dadc <Adachi_go_back+0x2c4>)
 800d888:	00a3      	lsls	r3, r4, #2
 800d88a:	440b      	add	r3, r1
 800d88c:	4403      	add	r3, r0
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d90f      	bls.n	800d8b4 <Adachi_go_back+0x9c>
 800d894:	4b8f      	ldr	r3, [pc, #572]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d80b      	bhi.n	800d8b4 <Adachi_go_back+0x9c>
			  //前北
			  straight();
 800d89c:	f7fd fb2c 	bl	800aef8 <straight>
			  my_direction = north;
 800d8a0:	4b8a      	ldr	r3, [pc, #552]	; (800dacc <Adachi_go_back+0x2b4>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	701a      	strb	r2, [r3, #0]
			  y++;
 800d8a6:	4b8b      	ldr	r3, [pc, #556]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	4b89      	ldr	r3, [pc, #548]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	e094      	b.n	800d9de <Adachi_go_back+0x1c6>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800d8b4:	4b86      	ldr	r3, [pc, #536]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	4b86      	ldr	r3, [pc, #536]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4a85      	ldr	r2, [pc, #532]	; (800dad8 <Adachi_go_back+0x2c0>)
 800d8c2:	0083      	lsls	r3, r0, #2
 800d8c4:	440b      	add	r3, r1
 800d8c6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d8ca:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d127      	bne.n	800d924 <Adachi_go_back+0x10c>
 800d8d4:	4b7e      	ldr	r3, [pc, #504]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	4a7e      	ldr	r2, [pc, #504]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d8dc:	7812      	ldrb	r2, [r2, #0]
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4a7e      	ldr	r2, [pc, #504]	; (800dadc <Adachi_go_back+0x2c4>)
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	440b      	add	r3, r1
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	4b79      	ldr	r3, [pc, #484]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	461c      	mov	r4, r3
 800d8f0:	4b78      	ldr	r3, [pc, #480]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	4979      	ldr	r1, [pc, #484]	; (800dadc <Adachi_go_back+0x2c4>)
 800d8f8:	00a3      	lsls	r3, r4, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	4403      	add	r3, r0
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d90f      	bls.n	800d924 <Adachi_go_back+0x10c>
 800d904:	4b72      	ldr	r3, [pc, #456]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00b      	beq.n	800d924 <Adachi_go_back+0x10c>
			  //左西
			  L_turn_select();
 800d90c:	f7fe f930 	bl	800bb70 <L_turn_select>
			  my_direction = west;
 800d910:	4b6e      	ldr	r3, [pc, #440]	; (800dacc <Adachi_go_back+0x2b4>)
 800d912:	2203      	movs	r2, #3
 800d914:	701a      	strb	r2, [r3, #0]
		      x--;
 800d916:	4b6e      	ldr	r3, [pc, #440]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	4b6c      	ldr	r3, [pc, #432]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e05c      	b.n	800d9de <Adachi_go_back+0x1c6>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] > walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d924:	4b6a      	ldr	r3, [pc, #424]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	4b6a      	ldr	r3, [pc, #424]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	4619      	mov	r1, r3
 800d930:	4a69      	ldr	r2, [pc, #420]	; (800dad8 <Adachi_go_back+0x2c0>)
 800d932:	0083      	lsls	r3, r0, #2
 800d934:	440b      	add	r3, r1
 800d936:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d93a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d127      	bne.n	800d994 <Adachi_go_back+0x17c>
 800d944:	4b62      	ldr	r3, [pc, #392]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a62      	ldr	r2, [pc, #392]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d94c:	7812      	ldrb	r2, [r2, #0]
 800d94e:	4611      	mov	r1, r2
 800d950:	4a62      	ldr	r2, [pc, #392]	; (800dadc <Adachi_go_back+0x2c4>)
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	440b      	add	r3, r1
 800d958:	781a      	ldrb	r2, [r3, #0]
 800d95a:	4b5d      	ldr	r3, [pc, #372]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	461c      	mov	r4, r3
 800d960:	4b5c      	ldr	r3, [pc, #368]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	4618      	mov	r0, r3
 800d966:	495d      	ldr	r1, [pc, #372]	; (800dadc <Adachi_go_back+0x2c4>)
 800d968:	00a3      	lsls	r3, r4, #2
 800d96a:	440b      	add	r3, r1
 800d96c:	4403      	add	r3, r0
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d90f      	bls.n	800d994 <Adachi_go_back+0x17c>
 800d974:	4b56      	ldr	r3, [pc, #344]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d80b      	bhi.n	800d994 <Adachi_go_back+0x17c>
			  //右東
			  R_turn_select();
 800d97c:	f7fe f8b4 	bl	800bae8 <R_turn_select>
	          my_direction = east;
 800d980:	4b52      	ldr	r3, [pc, #328]	; (800dacc <Adachi_go_back+0x2b4>)
 800d982:	2201      	movs	r2, #1
 800d984:	701a      	strb	r2, [r3, #0]
	          x++;
 800d986:	4b52      	ldr	r3, [pc, #328]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	3301      	adds	r3, #1
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4b50      	ldr	r3, [pc, #320]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d990:	701a      	strb	r2, [r3, #0]
 800d992:	e024      	b.n	800d9de <Adachi_go_back+0x1c6>
		  }
		  else {
			  //後南
	          Decelerate();
 800d994:	f7fd fa04 	bl	800ada0 <Decelerate>
	          wait(0.3);
 800d998:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800dac0 <Adachi_go_back+0x2a8>
 800d99c:	f7fd f8d2 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800d9a0:	4b49      	ldr	r3, [pc, #292]	; (800dac8 <Adachi_go_back+0x2b0>)
 800d9a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d101      	bne.n	800d9ae <Adachi_go_back+0x196>
	        	  Motor_PWM_Stop();
 800d9aa:	f7fc fb81 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d9ae:	f7fd ffb9 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800d9b2:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800dac0 <Adachi_go_back+0x2a8>
 800d9b6:	f7fd f8c5 	bl	800ab44 <wait>
	  	      back_calib();
 800d9ba:	f7fe f82d 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800d9be:	ed9f 0b40 	vldr	d0, [pc, #256]	; 800dac0 <Adachi_go_back+0x2a8>
 800d9c2:	f7fd f8bf 	bl	800ab44 <wait>
	       	  Start_Accel();
 800d9c6:	f7fd f8e3 	bl	800ab90 <Start_Accel>
	       	  my_direction = south;
 800d9ca:	4b40      	ldr	r3, [pc, #256]	; (800dacc <Adachi_go_back+0x2b4>)
 800d9cc:	2202      	movs	r2, #2
 800d9ce:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d9d0:	4b40      	ldr	r3, [pc, #256]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	4b3e      	ldr	r3, [pc, #248]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d9da:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d9dc:	e28b      	b.n	800def6 <Adachi_go_back+0x6de>
 800d9de:	e28a      	b.n	800def6 <Adachi_go_back+0x6de>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] > walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d9e0:	4b3b      	ldr	r3, [pc, #236]	; (800dad0 <Adachi_go_back+0x2b8>)
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	4b3b      	ldr	r3, [pc, #236]	; (800dad4 <Adachi_go_back+0x2bc>)
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4a3a      	ldr	r2, [pc, #232]	; (800dad8 <Adachi_go_back+0x2c0>)
 800d9ee:	0083      	lsls	r3, r0, #2
 800d9f0:	440b      	add	r3, r1
 800d9f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d9f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d127      	bne.n	800da50 <Adachi_go_back+0x238>
 800da00:	4b33      	ldr	r3, [pc, #204]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	3301      	adds	r3, #1
 800da06:	4a33      	ldr	r2, [pc, #204]	; (800dad4 <Adachi_go_back+0x2bc>)
 800da08:	7812      	ldrb	r2, [r2, #0]
 800da0a:	4611      	mov	r1, r2
 800da0c:	4a33      	ldr	r2, [pc, #204]	; (800dadc <Adachi_go_back+0x2c4>)
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	440b      	add	r3, r1
 800da14:	781a      	ldrb	r2, [r3, #0]
 800da16:	4b2e      	ldr	r3, [pc, #184]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	461c      	mov	r4, r3
 800da1c:	4b2d      	ldr	r3, [pc, #180]	; (800dad4 <Adachi_go_back+0x2bc>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	492e      	ldr	r1, [pc, #184]	; (800dadc <Adachi_go_back+0x2c4>)
 800da24:	00a3      	lsls	r3, r4, #2
 800da26:	440b      	add	r3, r1
 800da28:	4403      	add	r3, r0
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d90f      	bls.n	800da50 <Adachi_go_back+0x238>
 800da30:	4b27      	ldr	r3, [pc, #156]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b02      	cmp	r3, #2
 800da36:	d80b      	bhi.n	800da50 <Adachi_go_back+0x238>
			  //前東
			  straight();
 800da38:	f7fd fa5e 	bl	800aef8 <straight>
	       	  my_direction = east;
 800da3c:	4b23      	ldr	r3, [pc, #140]	; (800dacc <Adachi_go_back+0x2b4>)
 800da3e:	2201      	movs	r2, #1
 800da40:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800da42:	4b23      	ldr	r3, [pc, #140]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	3301      	adds	r3, #1
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	4b21      	ldr	r3, [pc, #132]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da4c:	701a      	strb	r2, [r3, #0]
 800da4e:	e0a4      	b.n	800db9a <Adachi_go_back+0x382>
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800da50:	4b1f      	ldr	r3, [pc, #124]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	4618      	mov	r0, r3
 800da56:	4b1f      	ldr	r3, [pc, #124]	; (800dad4 <Adachi_go_back+0x2bc>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	4619      	mov	r1, r3
 800da5c:	4a1e      	ldr	r2, [pc, #120]	; (800dad8 <Adachi_go_back+0x2c0>)
 800da5e:	0083      	lsls	r3, r0, #2
 800da60:	440b      	add	r3, r1
 800da62:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800da66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d137      	bne.n	800dae0 <Adachi_go_back+0x2c8>
 800da70:	4b17      	ldr	r3, [pc, #92]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	4b17      	ldr	r3, [pc, #92]	; (800dad4 <Adachi_go_back+0x2bc>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	3301      	adds	r3, #1
 800da7c:	4917      	ldr	r1, [pc, #92]	; (800dadc <Adachi_go_back+0x2c4>)
 800da7e:	0092      	lsls	r2, r2, #2
 800da80:	440a      	add	r2, r1
 800da82:	4413      	add	r3, r2
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <Adachi_go_back+0x2b8>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	461c      	mov	r4, r3
 800da8c:	4b11      	ldr	r3, [pc, #68]	; (800dad4 <Adachi_go_back+0x2bc>)
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	4618      	mov	r0, r3
 800da92:	4912      	ldr	r1, [pc, #72]	; (800dadc <Adachi_go_back+0x2c4>)
 800da94:	00a3      	lsls	r3, r4, #2
 800da96:	440b      	add	r3, r1
 800da98:	4403      	add	r3, r0
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d91f      	bls.n	800dae0 <Adachi_go_back+0x2c8>
 800daa0:	4b0c      	ldr	r3, [pc, #48]	; (800dad4 <Adachi_go_back+0x2bc>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d81b      	bhi.n	800dae0 <Adachi_go_back+0x2c8>
			  //左�?
			  L_turn_select();
 800daa8:	f7fe f862 	bl	800bb70 <L_turn_select>
	       	  my_direction = north;
 800daac:	4b07      	ldr	r3, [pc, #28]	; (800dacc <Adachi_go_back+0x2b4>)
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800dab2:	4b08      	ldr	r3, [pc, #32]	; (800dad4 <Adachi_go_back+0x2bc>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	3301      	adds	r3, #1
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	4b06      	ldr	r3, [pc, #24]	; (800dad4 <Adachi_go_back+0x2bc>)
 800dabc:	701a      	strb	r2, [r3, #0]
 800dabe:	e06c      	b.n	800db9a <Adachi_go_back+0x382>
 800dac0:	33333333 	.word	0x33333333
 800dac4:	3fd33333 	.word	0x3fd33333
 800dac8:	20000074 	.word	0x20000074
 800dacc:	2000e122 	.word	0x2000e122
 800dad0:	20009f84 	.word	0x20009f84
 800dad4:	20009f85 	.word	0x20009f85
 800dad8:	2001a6d4 	.word	0x2001a6d4
 800dadc:	2001a268 	.word	0x2001a268
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800dae0:	4b97      	ldr	r3, [pc, #604]	; (800dd40 <Adachi_go_back+0x528>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	4b97      	ldr	r3, [pc, #604]	; (800dd44 <Adachi_go_back+0x52c>)
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	4619      	mov	r1, r3
 800daec:	4a96      	ldr	r2, [pc, #600]	; (800dd48 <Adachi_go_back+0x530>)
 800daee:	0083      	lsls	r3, r0, #2
 800daf0:	440b      	add	r3, r1
 800daf2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800daf6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d127      	bne.n	800db50 <Adachi_go_back+0x338>
 800db00:	4b8f      	ldr	r3, [pc, #572]	; (800dd40 <Adachi_go_back+0x528>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	461a      	mov	r2, r3
 800db06:	4b8f      	ldr	r3, [pc, #572]	; (800dd44 <Adachi_go_back+0x52c>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	498f      	ldr	r1, [pc, #572]	; (800dd4c <Adachi_go_back+0x534>)
 800db0e:	0092      	lsls	r2, r2, #2
 800db10:	440a      	add	r2, r1
 800db12:	4413      	add	r3, r2
 800db14:	781a      	ldrb	r2, [r3, #0]
 800db16:	4b8a      	ldr	r3, [pc, #552]	; (800dd40 <Adachi_go_back+0x528>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	461c      	mov	r4, r3
 800db1c:	4b89      	ldr	r3, [pc, #548]	; (800dd44 <Adachi_go_back+0x52c>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4618      	mov	r0, r3
 800db22:	498a      	ldr	r1, [pc, #552]	; (800dd4c <Adachi_go_back+0x534>)
 800db24:	00a3      	lsls	r3, r4, #2
 800db26:	440b      	add	r3, r1
 800db28:	4403      	add	r3, r0
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d90f      	bls.n	800db50 <Adachi_go_back+0x338>
 800db30:	4b84      	ldr	r3, [pc, #528]	; (800dd44 <Adachi_go_back+0x52c>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00b      	beq.n	800db50 <Adachi_go_back+0x338>
			  //右�?
			  R_turn_select();
 800db38:	f7fd ffd6 	bl	800bae8 <R_turn_select>
	       	  my_direction = south;
 800db3c:	4b84      	ldr	r3, [pc, #528]	; (800dd50 <Adachi_go_back+0x538>)
 800db3e:	2202      	movs	r2, #2
 800db40:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800db42:	4b80      	ldr	r3, [pc, #512]	; (800dd44 <Adachi_go_back+0x52c>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	3b01      	subs	r3, #1
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	4b7e      	ldr	r3, [pc, #504]	; (800dd44 <Adachi_go_back+0x52c>)
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	e024      	b.n	800db9a <Adachi_go_back+0x382>
		  }
		  else {
			  //後西
	          Decelerate();
 800db50:	f7fd f926 	bl	800ada0 <Decelerate>
	          wait(0.3);
 800db54:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800dd38 <Adachi_go_back+0x520>
 800db58:	f7fc fff4 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800db5c:	4b7d      	ldr	r3, [pc, #500]	; (800dd54 <Adachi_go_back+0x53c>)
 800db5e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800db62:	2b01      	cmp	r3, #1
 800db64:	d101      	bne.n	800db6a <Adachi_go_back+0x352>
	        	  Motor_PWM_Stop();
 800db66:	f7fc faa3 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800db6a:	f7fd fedb 	bl	800b924 <rotate180>
	  	      wait(0.3);
 800db6e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800dd38 <Adachi_go_back+0x520>
 800db72:	f7fc ffe7 	bl	800ab44 <wait>
	  	      back_calib();
 800db76:	f7fd ff4f 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800db7a:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 800dd38 <Adachi_go_back+0x520>
 800db7e:	f7fc ffe1 	bl	800ab44 <wait>
	       	  Start_Accel();
 800db82:	f7fd f805 	bl	800ab90 <Start_Accel>

	       	  my_direction = west;
 800db86:	4b72      	ldr	r3, [pc, #456]	; (800dd50 <Adachi_go_back+0x538>)
 800db88:	2203      	movs	r2, #3
 800db8a:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800db8c:	4b6c      	ldr	r3, [pc, #432]	; (800dd40 <Adachi_go_back+0x528>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	3b01      	subs	r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	4b6a      	ldr	r3, [pc, #424]	; (800dd40 <Adachi_go_back+0x528>)
 800db96:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800db98:	e1ad      	b.n	800def6 <Adachi_go_back+0x6de>
 800db9a:	e1ac      	b.n	800def6 <Adachi_go_back+0x6de>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800db9c:	4b68      	ldr	r3, [pc, #416]	; (800dd40 <Adachi_go_back+0x528>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	4618      	mov	r0, r3
 800dba2:	4b68      	ldr	r3, [pc, #416]	; (800dd44 <Adachi_go_back+0x52c>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	4619      	mov	r1, r3
 800dba8:	4a67      	ldr	r2, [pc, #412]	; (800dd48 <Adachi_go_back+0x530>)
 800dbaa:	0083      	lsls	r3, r0, #2
 800dbac:	440b      	add	r3, r1
 800dbae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dbb2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d127      	bne.n	800dc0c <Adachi_go_back+0x3f4>
 800dbbc:	4b60      	ldr	r3, [pc, #384]	; (800dd40 <Adachi_go_back+0x528>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4b60      	ldr	r3, [pc, #384]	; (800dd44 <Adachi_go_back+0x52c>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	4960      	ldr	r1, [pc, #384]	; (800dd4c <Adachi_go_back+0x534>)
 800dbca:	0092      	lsls	r2, r2, #2
 800dbcc:	440a      	add	r2, r1
 800dbce:	4413      	add	r3, r2
 800dbd0:	781a      	ldrb	r2, [r3, #0]
 800dbd2:	4b5b      	ldr	r3, [pc, #364]	; (800dd40 <Adachi_go_back+0x528>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	461c      	mov	r4, r3
 800dbd8:	4b5a      	ldr	r3, [pc, #360]	; (800dd44 <Adachi_go_back+0x52c>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	495b      	ldr	r1, [pc, #364]	; (800dd4c <Adachi_go_back+0x534>)
 800dbe0:	00a3      	lsls	r3, r4, #2
 800dbe2:	440b      	add	r3, r1
 800dbe4:	4403      	add	r3, r0
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d90f      	bls.n	800dc0c <Adachi_go_back+0x3f4>
 800dbec:	4b55      	ldr	r3, [pc, #340]	; (800dd44 <Adachi_go_back+0x52c>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00b      	beq.n	800dc0c <Adachi_go_back+0x3f4>
			  //前南
			  straight();
 800dbf4:	f7fd f980 	bl	800aef8 <straight>
	       	  my_direction = south;
 800dbf8:	4b55      	ldr	r3, [pc, #340]	; (800dd50 <Adachi_go_back+0x538>)
 800dbfa:	2202      	movs	r2, #2
 800dbfc:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dbfe:	4b51      	ldr	r3, [pc, #324]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	4b4f      	ldr	r3, [pc, #316]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	e094      	b.n	800dd36 <Adachi_go_back+0x51e>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] > walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800dc0c:	4b4c      	ldr	r3, [pc, #304]	; (800dd40 <Adachi_go_back+0x528>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	4618      	mov	r0, r3
 800dc12:	4b4c      	ldr	r3, [pc, #304]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	4619      	mov	r1, r3
 800dc18:	4a4b      	ldr	r2, [pc, #300]	; (800dd48 <Adachi_go_back+0x530>)
 800dc1a:	0083      	lsls	r3, r0, #2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc22:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d127      	bne.n	800dc7c <Adachi_go_back+0x464>
 800dc2c:	4b44      	ldr	r3, [pc, #272]	; (800dd40 <Adachi_go_back+0x528>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	3301      	adds	r3, #1
 800dc32:	4a44      	ldr	r2, [pc, #272]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc34:	7812      	ldrb	r2, [r2, #0]
 800dc36:	4611      	mov	r1, r2
 800dc38:	4a44      	ldr	r2, [pc, #272]	; (800dd4c <Adachi_go_back+0x534>)
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	440b      	add	r3, r1
 800dc40:	781a      	ldrb	r2, [r3, #0]
 800dc42:	4b3f      	ldr	r3, [pc, #252]	; (800dd40 <Adachi_go_back+0x528>)
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	461c      	mov	r4, r3
 800dc48:	4b3e      	ldr	r3, [pc, #248]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	493f      	ldr	r1, [pc, #252]	; (800dd4c <Adachi_go_back+0x534>)
 800dc50:	00a3      	lsls	r3, r4, #2
 800dc52:	440b      	add	r3, r1
 800dc54:	4403      	add	r3, r0
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d90f      	bls.n	800dc7c <Adachi_go_back+0x464>
 800dc5c:	4b38      	ldr	r3, [pc, #224]	; (800dd40 <Adachi_go_back+0x528>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d80b      	bhi.n	800dc7c <Adachi_go_back+0x464>
			  //左東
			  L_turn_select();
 800dc64:	f7fd ff84 	bl	800bb70 <L_turn_select>
	       	  my_direction = east;
 800dc68:	4b39      	ldr	r3, [pc, #228]	; (800dd50 <Adachi_go_back+0x538>)
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dc6e:	4b34      	ldr	r3, [pc, #208]	; (800dd40 <Adachi_go_back+0x528>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	4b32      	ldr	r3, [pc, #200]	; (800dd40 <Adachi_go_back+0x528>)
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	e05c      	b.n	800dd36 <Adachi_go_back+0x51e>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800dc7c:	4b30      	ldr	r3, [pc, #192]	; (800dd40 <Adachi_go_back+0x528>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	4618      	mov	r0, r3
 800dc82:	4b30      	ldr	r3, [pc, #192]	; (800dd44 <Adachi_go_back+0x52c>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	4619      	mov	r1, r3
 800dc88:	4a2f      	ldr	r2, [pc, #188]	; (800dd48 <Adachi_go_back+0x530>)
 800dc8a:	0083      	lsls	r3, r0, #2
 800dc8c:	440b      	add	r3, r1
 800dc8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc92:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d127      	bne.n	800dcec <Adachi_go_back+0x4d4>
 800dc9c:	4b28      	ldr	r3, [pc, #160]	; (800dd40 <Adachi_go_back+0x528>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	4a28      	ldr	r2, [pc, #160]	; (800dd44 <Adachi_go_back+0x52c>)
 800dca4:	7812      	ldrb	r2, [r2, #0]
 800dca6:	4611      	mov	r1, r2
 800dca8:	4a28      	ldr	r2, [pc, #160]	; (800dd4c <Adachi_go_back+0x534>)
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	440b      	add	r3, r1
 800dcb0:	781a      	ldrb	r2, [r3, #0]
 800dcb2:	4b23      	ldr	r3, [pc, #140]	; (800dd40 <Adachi_go_back+0x528>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	461c      	mov	r4, r3
 800dcb8:	4b22      	ldr	r3, [pc, #136]	; (800dd44 <Adachi_go_back+0x52c>)
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	4923      	ldr	r1, [pc, #140]	; (800dd4c <Adachi_go_back+0x534>)
 800dcc0:	00a3      	lsls	r3, r4, #2
 800dcc2:	440b      	add	r3, r1
 800dcc4:	4403      	add	r3, r0
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d90f      	bls.n	800dcec <Adachi_go_back+0x4d4>
 800dccc:	4b1c      	ldr	r3, [pc, #112]	; (800dd40 <Adachi_go_back+0x528>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00b      	beq.n	800dcec <Adachi_go_back+0x4d4>
			  //右西
			  R_turn_select();
 800dcd4:	f7fd ff08 	bl	800bae8 <R_turn_select>
	       	  my_direction = west;
 800dcd8:	4b1d      	ldr	r3, [pc, #116]	; (800dd50 <Adachi_go_back+0x538>)
 800dcda:	2203      	movs	r2, #3
 800dcdc:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800dcde:	4b18      	ldr	r3, [pc, #96]	; (800dd40 <Adachi_go_back+0x528>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	3b01      	subs	r3, #1
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <Adachi_go_back+0x528>)
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	e024      	b.n	800dd36 <Adachi_go_back+0x51e>
		  }
		  else {
			  //後北
	          Decelerate();
 800dcec:	f7fd f858 	bl	800ada0 <Decelerate>
	          wait(0.3);;
 800dcf0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800dd38 <Adachi_go_back+0x520>
 800dcf4:	f7fc ff26 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800dcf8:	4b16      	ldr	r3, [pc, #88]	; (800dd54 <Adachi_go_back+0x53c>)
 800dcfa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d101      	bne.n	800dd06 <Adachi_go_back+0x4ee>
	        	  Motor_PWM_Stop();
 800dd02:	f7fc f9d5 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800dd06:	f7fd fe0d 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800dd0a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800dd38 <Adachi_go_back+0x520>
 800dd0e:	f7fc ff19 	bl	800ab44 <wait>
	  	      back_calib();
 800dd12:	f7fd fe81 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800dd16:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800dd38 <Adachi_go_back+0x520>
 800dd1a:	f7fc ff13 	bl	800ab44 <wait>
	       	  Start_Accel();
 800dd1e:	f7fc ff37 	bl	800ab90 <Start_Accel>

	       	  my_direction = north;
 800dd22:	4b0b      	ldr	r3, [pc, #44]	; (800dd50 <Adachi_go_back+0x538>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800dd28:	4b06      	ldr	r3, [pc, #24]	; (800dd44 <Adachi_go_back+0x52c>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <Adachi_go_back+0x52c>)
 800dd32:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800dd34:	e0df      	b.n	800def6 <Adachi_go_back+0x6de>
 800dd36:	e0de      	b.n	800def6 <Adachi_go_back+0x6de>
 800dd38:	33333333 	.word	0x33333333
 800dd3c:	3fd33333 	.word	0x3fd33333
 800dd40:	20009f84 	.word	0x20009f84
 800dd44:	20009f85 	.word	0x20009f85
 800dd48:	2001a6d4 	.word	0x2001a6d4
 800dd4c:	2001a268 	.word	0x2001a268
 800dd50:	2000e122 	.word	0x2000e122
 800dd54:	20000074 	.word	0x20000074

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800dd58:	4b6b      	ldr	r3, [pc, #428]	; (800df08 <Adachi_go_back+0x6f0>)
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	4b6b      	ldr	r3, [pc, #428]	; (800df0c <Adachi_go_back+0x6f4>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	4619      	mov	r1, r3
 800dd64:	4a6a      	ldr	r2, [pc, #424]	; (800df10 <Adachi_go_back+0x6f8>)
 800dd66:	0083      	lsls	r3, r0, #2
 800dd68:	440b      	add	r3, r1
 800dd6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd6e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d127      	bne.n	800ddc8 <Adachi_go_back+0x5b0>
 800dd78:	4b63      	ldr	r3, [pc, #396]	; (800df08 <Adachi_go_back+0x6f0>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	4a63      	ldr	r2, [pc, #396]	; (800df0c <Adachi_go_back+0x6f4>)
 800dd80:	7812      	ldrb	r2, [r2, #0]
 800dd82:	4611      	mov	r1, r2
 800dd84:	4a63      	ldr	r2, [pc, #396]	; (800df14 <Adachi_go_back+0x6fc>)
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	440b      	add	r3, r1
 800dd8c:	781a      	ldrb	r2, [r3, #0]
 800dd8e:	4b5e      	ldr	r3, [pc, #376]	; (800df08 <Adachi_go_back+0x6f0>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	461c      	mov	r4, r3
 800dd94:	4b5d      	ldr	r3, [pc, #372]	; (800df0c <Adachi_go_back+0x6f4>)
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	495e      	ldr	r1, [pc, #376]	; (800df14 <Adachi_go_back+0x6fc>)
 800dd9c:	00a3      	lsls	r3, r4, #2
 800dd9e:	440b      	add	r3, r1
 800dda0:	4403      	add	r3, r0
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d90f      	bls.n	800ddc8 <Adachi_go_back+0x5b0>
 800dda8:	4b57      	ldr	r3, [pc, #348]	; (800df08 <Adachi_go_back+0x6f0>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <Adachi_go_back+0x5b0>
			  //前西
			  straight();
 800ddb0:	f7fd f8a2 	bl	800aef8 <straight>
	       	  my_direction = west;
 800ddb4:	4b58      	ldr	r3, [pc, #352]	; (800df18 <Adachi_go_back+0x700>)
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800ddba:	4b53      	ldr	r3, [pc, #332]	; (800df08 <Adachi_go_back+0x6f0>)
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	4b51      	ldr	r3, [pc, #324]	; (800df08 <Adachi_go_back+0x6f0>)
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	e094      	b.n	800def2 <Adachi_go_back+0x6da>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800ddc8:	4b4f      	ldr	r3, [pc, #316]	; (800df08 <Adachi_go_back+0x6f0>)
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	4b4f      	ldr	r3, [pc, #316]	; (800df0c <Adachi_go_back+0x6f4>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4a4e      	ldr	r2, [pc, #312]	; (800df10 <Adachi_go_back+0x6f8>)
 800ddd6:	0083      	lsls	r3, r0, #2
 800ddd8:	440b      	add	r3, r1
 800ddda:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ddde:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d127      	bne.n	800de38 <Adachi_go_back+0x620>
 800dde8:	4b47      	ldr	r3, [pc, #284]	; (800df08 <Adachi_go_back+0x6f0>)
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	461a      	mov	r2, r3
 800ddee:	4b47      	ldr	r3, [pc, #284]	; (800df0c <Adachi_go_back+0x6f4>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	4947      	ldr	r1, [pc, #284]	; (800df14 <Adachi_go_back+0x6fc>)
 800ddf6:	0092      	lsls	r2, r2, #2
 800ddf8:	440a      	add	r2, r1
 800ddfa:	4413      	add	r3, r2
 800ddfc:	781a      	ldrb	r2, [r3, #0]
 800ddfe:	4b42      	ldr	r3, [pc, #264]	; (800df08 <Adachi_go_back+0x6f0>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	461c      	mov	r4, r3
 800de04:	4b41      	ldr	r3, [pc, #260]	; (800df0c <Adachi_go_back+0x6f4>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	4618      	mov	r0, r3
 800de0a:	4942      	ldr	r1, [pc, #264]	; (800df14 <Adachi_go_back+0x6fc>)
 800de0c:	00a3      	lsls	r3, r4, #2
 800de0e:	440b      	add	r3, r1
 800de10:	4403      	add	r3, r0
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	429a      	cmp	r2, r3
 800de16:	d90f      	bls.n	800de38 <Adachi_go_back+0x620>
 800de18:	4b3c      	ldr	r3, [pc, #240]	; (800df0c <Adachi_go_back+0x6f4>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00b      	beq.n	800de38 <Adachi_go_back+0x620>
			  //左�?
			  L_turn_select();
 800de20:	f7fd fea6 	bl	800bb70 <L_turn_select>
	       	  my_direction = south;
 800de24:	4b3c      	ldr	r3, [pc, #240]	; (800df18 <Adachi_go_back+0x700>)
 800de26:	2202      	movs	r2, #2
 800de28:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800de2a:	4b38      	ldr	r3, [pc, #224]	; (800df0c <Adachi_go_back+0x6f4>)
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	3b01      	subs	r3, #1
 800de30:	b2da      	uxtb	r2, r3
 800de32:	4b36      	ldr	r3, [pc, #216]	; (800df0c <Adachi_go_back+0x6f4>)
 800de34:	701a      	strb	r2, [r3, #0]
 800de36:	e05c      	b.n	800def2 <Adachi_go_back+0x6da>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800de38:	4b33      	ldr	r3, [pc, #204]	; (800df08 <Adachi_go_back+0x6f0>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	4b33      	ldr	r3, [pc, #204]	; (800df0c <Adachi_go_back+0x6f4>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	4a32      	ldr	r2, [pc, #200]	; (800df10 <Adachi_go_back+0x6f8>)
 800de46:	0083      	lsls	r3, r0, #2
 800de48:	440b      	add	r3, r1
 800de4a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d127      	bne.n	800dea8 <Adachi_go_back+0x690>
 800de58:	4b2b      	ldr	r3, [pc, #172]	; (800df08 <Adachi_go_back+0x6f0>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	4b2b      	ldr	r3, [pc, #172]	; (800df0c <Adachi_go_back+0x6f4>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	492b      	ldr	r1, [pc, #172]	; (800df14 <Adachi_go_back+0x6fc>)
 800de66:	0092      	lsls	r2, r2, #2
 800de68:	440a      	add	r2, r1
 800de6a:	4413      	add	r3, r2
 800de6c:	781a      	ldrb	r2, [r3, #0]
 800de6e:	4b26      	ldr	r3, [pc, #152]	; (800df08 <Adachi_go_back+0x6f0>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	461c      	mov	r4, r3
 800de74:	4b25      	ldr	r3, [pc, #148]	; (800df0c <Adachi_go_back+0x6f4>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	4926      	ldr	r1, [pc, #152]	; (800df14 <Adachi_go_back+0x6fc>)
 800de7c:	00a3      	lsls	r3, r4, #2
 800de7e:	440b      	add	r3, r1
 800de80:	4403      	add	r3, r0
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d90f      	bls.n	800dea8 <Adachi_go_back+0x690>
 800de88:	4b20      	ldr	r3, [pc, #128]	; (800df0c <Adachi_go_back+0x6f4>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d80b      	bhi.n	800dea8 <Adachi_go_back+0x690>
			  //右�?
			  R_turn_select();
 800de90:	f7fd fe2a 	bl	800bae8 <R_turn_select>
	       	  my_direction = north;
 800de94:	4b20      	ldr	r3, [pc, #128]	; (800df18 <Adachi_go_back+0x700>)
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800de9a:	4b1c      	ldr	r3, [pc, #112]	; (800df0c <Adachi_go_back+0x6f4>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	3301      	adds	r3, #1
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <Adachi_go_back+0x6f4>)
 800dea4:	701a      	strb	r2, [r3, #0]
 800dea6:	e024      	b.n	800def2 <Adachi_go_back+0x6da>
		  }
		  else {
			  //後東
	          Decelerate();
 800dea8:	f7fc ff7a 	bl	800ada0 <Decelerate>
	          wait(0.3);;
 800deac:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800df00 <Adachi_go_back+0x6e8>
 800deb0:	f7fc fe48 	bl	800ab44 <wait>

	          if(mode.execution == 1)
 800deb4:	4b19      	ldr	r3, [pc, #100]	; (800df1c <Adachi_go_back+0x704>)
 800deb6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d101      	bne.n	800dec2 <Adachi_go_back+0x6aa>
	        	  Motor_PWM_Stop();
 800debe:	f7fc f8f7 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800dec2:	f7fd fd2f 	bl	800b924 <rotate180>
	  	      wait(0.3);;
 800dec6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800df00 <Adachi_go_back+0x6e8>
 800deca:	f7fc fe3b 	bl	800ab44 <wait>
	  	      back_calib();
 800dece:	f7fd fda3 	bl	800ba18 <back_calib>
	  	      wait(0.3);
 800ded2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800df00 <Adachi_go_back+0x6e8>
 800ded6:	f7fc fe35 	bl	800ab44 <wait>
	       	  Start_Accel();
 800deda:	f7fc fe59 	bl	800ab90 <Start_Accel>

	       	  my_direction = east;
 800dede:	4b0e      	ldr	r3, [pc, #56]	; (800df18 <Adachi_go_back+0x700>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dee4:	4b08      	ldr	r3, [pc, #32]	; (800df08 <Adachi_go_back+0x6f0>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	b2da      	uxtb	r2, r3
 800deec:	4b06      	ldr	r3, [pc, #24]	; (800df08 <Adachi_go_back+0x6f0>)
 800deee:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800def0:	e001      	b.n	800def6 <Adachi_go_back+0x6de>
 800def2:	e000      	b.n	800def6 <Adachi_go_back+0x6de>

	  default:
		  break;
 800def4:	bf00      	nop
	  }//swtich end
}
 800def6:	bf00      	nop
 800def8:	bd98      	pop	{r3, r4, r7, pc}
 800defa:	bf00      	nop
 800defc:	f3af 8000 	nop.w
 800df00:	33333333 	.word	0x33333333
 800df04:	3fd33333 	.word	0x3fd33333
 800df08:	20009f84 	.word	0x20009f84
 800df0c:	20009f85 	.word	0x20009f85
 800df10:	2001a6d4 	.word	0x2001a6d4
 800df14:	2001a268 	.word	0x2001a268
 800df18:	2000e122 	.word	0x2000e122
 800df1c:	20000074 	.word	0x20000074

0800df20 <Adachi_search>:
void Adachi_search(){
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�?�初期�?
	map_init();
 800df24:	f7fb fe18 	bl	8009b58 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800df28:	4b41      	ldr	r3, [pc, #260]	; (800e030 <Adachi_search+0x110>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	701a      	strb	r2, [r3, #0]
 800df2e:	4b40      	ldr	r3, [pc, #256]	; (800e030 <Adachi_search+0x110>)
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	4b40      	ldr	r3, [pc, #256]	; (800e034 <Adachi_search+0x114>)
 800df34:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800df36:	4b40      	ldr	r3, [pc, #256]	; (800e038 <Adachi_search+0x118>)
 800df38:	2200      	movs	r2, #0
 800df3a:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800df3c:	f7fe f89a 	bl	800c074 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800df40:	4b3c      	ldr	r3, [pc, #240]	; (800e034 <Adachi_search+0x114>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	4618      	mov	r0, r3
 800df46:	4b3a      	ldr	r3, [pc, #232]	; (800e030 <Adachi_search+0x110>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	461a      	mov	r2, r3
 800df4c:	493b      	ldr	r1, [pc, #236]	; (800e03c <Adachi_search+0x11c>)
 800df4e:	0083      	lsls	r3, r0, #2
 800df50:	441a      	add	r2, r3
 800df52:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800df56:	2001      	movs	r0, #1
 800df58:	f360 1305 	bfi	r3, r0, #4, #2
 800df5c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800df60:	f7fd ff18 	bl	800bd94 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800df64:	f7fc fe14 	bl	800ab90 <Start_Accel>

	x = 0;
 800df68:	4b32      	ldr	r3, [pc, #200]	; (800e034 <Adachi_search+0x114>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800df6e:	4b30      	ldr	r3, [pc, #192]	; (800e030 <Adachi_search+0x110>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	3301      	adds	r3, #1
 800df74:	b2da      	uxtb	r2, r3
 800df76:	4b2e      	ldr	r3, [pc, #184]	; (800e030 <Adachi_search+0x110>)
 800df78:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800df7a:	e005      	b.n	800df88 <Adachi_search+0x68>
		//壁更新
		wall_set();
 800df7c:	f7fe f87a 	bl	800c074 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800df80:	f7fd ff08 	bl	800bd94 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800df84:	f7ff f8c4 	bl	800d110 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800df88:	4b2a      	ldr	r3, [pc, #168]	; (800e034 <Adachi_search+0x114>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d9f5      	bls.n	800df7c <Adachi_search+0x5c>
 800df90:	4b28      	ldr	r3, [pc, #160]	; (800e034 <Adachi_search+0x114>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b03      	cmp	r3, #3
 800df96:	d8f1      	bhi.n	800df7c <Adachi_search+0x5c>
 800df98:	4b25      	ldr	r3, [pc, #148]	; (800e030 <Adachi_search+0x110>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d9ed      	bls.n	800df7c <Adachi_search+0x5c>
 800dfa0:	4b23      	ldr	r3, [pc, #140]	; (800e030 <Adachi_search+0x110>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d8e9      	bhi.n	800df7c <Adachi_search+0x5c>
	}

	//after-gall#2
	      Decelerate();
 800dfa8:	f7fc fefa 	bl	800ada0 <Decelerate>
	      mode.LED = 7;
 800dfac:	4b24      	ldr	r3, [pc, #144]	; (800e040 <Adachi_search+0x120>)
 800dfae:	2207      	movs	r2, #7
 800dfb0:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dfb2:	f7fc fb01 	bl	800a5b8 <LED_Change>
	      HAL_Delay(1000);
 800dfb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dfba:	f002 fe6b 	bl	8010c94 <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <Adachi_search+0x120>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dfc4:	f7fc faf8 	bl	800a5b8 <LED_Change>

	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800dfc8:	f7fe f982 	bl	800c2d0 <goal_area_search>
//	      HAL_Delay(10000);
//
//    	  for(int i=0; i < 10000; i+=5)
//    	  printf("%f, %f, %f, %f, %f\r\n",data_log[i],data_log[i+1],data_log[i+2],data_log[i+3],data_log[i+4]);
//    	  HAL_Delay(100000);
	      Accelerate();
 800dfcc:	f7fc fe38 	bl	800ac40 <Accelerate>
	  	  y = y + 1;
 800dfd0:	4b17      	ldr	r3, [pc, #92]	; (800e030 <Adachi_search+0x110>)
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	4b15      	ldr	r3, [pc, #84]	; (800e030 <Adachi_search+0x110>)
 800dfda:	701a      	strb	r2, [r3, #0]
	      //スタートから一番遠い未探索あり座標に向かう
	      //右ルート左ルートで分けてみる
	      //未探索あり座標を目的地としてひとつずつまわり、最終的にスタート地点を目標にして帰ってくる
	      //最短経路を解く、を、しっかりやらないといけなさそう

	  	while( !(x == 0 && y == 0)){
 800dfdc:	e005      	b.n	800dfea <Adachi_search+0xca>
	  		//壁更新
	  		wall_set();
 800dfde:	f7fe f849 	bl	800c074 <wall_set>

	  		//マップ更新
	  		Walk_Map_Update();
 800dfe2:	f7fd fed7 	bl	800bd94 <Walk_Map_Update>

	  		//次の動きを判定し動く
	  		Adachi_go_back();
 800dfe6:	f7ff fc17 	bl	800d818 <Adachi_go_back>
	  	while( !(x == 0 && y == 0)){
 800dfea:	4b12      	ldr	r3, [pc, #72]	; (800e034 <Adachi_search+0x114>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f5      	bne.n	800dfde <Adachi_search+0xbe>
 800dff2:	4b0f      	ldr	r3, [pc, #60]	; (800e030 <Adachi_search+0x110>)
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1f1      	bne.n	800dfde <Adachi_search+0xbe>
	  	}

	  	  Decelerate();
 800dffa:	f7fc fed1 	bl	800ada0 <Decelerate>
	      rotate180();
 800dffe:	f7fd fc91 	bl	800b924 <rotate180>
	      wait(0.3);
 800e002:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e028 <Adachi_search+0x108>
 800e006:	f7fc fd9d 	bl	800ab44 <wait>
	      back_calib();
 800e00a:	f7fd fd05 	bl	800ba18 <back_calib>
	      wait(0.3);
 800e00e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e028 <Adachi_search+0x108>
 800e012:	f7fc fd97 	bl	800ab44 <wait>
	      mapcopy();
 800e016:	f7fb fe13 	bl	8009c40 <mapcopy>
	      Flash_store();
 800e01a:	f7fb ff85 	bl	8009f28 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800e01e:	f7fc f847 	bl	800a0b0 <Motor_PWM_Stop>
}
 800e022:	bf00      	nop
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	33333333 	.word	0x33333333
 800e02c:	3fd33333 	.word	0x3fd33333
 800e030:	20009f85 	.word	0x20009f85
 800e034:	20009f84 	.word	0x20009f84
 800e038:	2000e122 	.word	0x2000e122
 800e03c:	2001a6d4 	.word	0x2001a6d4
 800e040:	20000074 	.word	0x20000074

0800e044 <Map_Load>:
void Map_Load(){
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0
	//ROMの迷路�?ータをRAMに入れる
	Flash_load();
 800e048:	f7fb ff5c 	bl	8009f04 <Flash_load>

	//work_ram[]の�?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <Map_Load+0x14c>)
 800e04e:	2203      	movs	r2, #3
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	e069      	b.n	800e128 <Map_Load+0xe4>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e054:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <Map_Load+0x150>)
 800e056:	2200      	movs	r2, #0
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	e05c      	b.n	800e116 <Map_Load+0xd2>
			wall[i][j].north = work_ram[k];
 800e05c:	4b4e      	ldr	r3, [pc, #312]	; (800e198 <Map_Load+0x154>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a4e      	ldr	r2, [pc, #312]	; (800e19c <Map_Load+0x158>)
 800e062:	5cd1      	ldrb	r1, [r2, r3]
 800e064:	4b4b      	ldr	r3, [pc, #300]	; (800e194 <Map_Load+0x150>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	4b49      	ldr	r3, [pc, #292]	; (800e190 <Map_Load+0x14c>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f001 0103 	and.w	r1, r1, #3
 800e070:	b2c8      	uxtb	r0, r1
 800e072:	494b      	ldr	r1, [pc, #300]	; (800e1a0 <Map_Load+0x15c>)
 800e074:	0092      	lsls	r2, r2, #2
 800e076:	441a      	add	r2, r3
 800e078:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e07c:	f360 0301 	bfi	r3, r0, #0, #2
 800e080:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800e084:	4b44      	ldr	r3, [pc, #272]	; (800e198 <Map_Load+0x154>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	4a44      	ldr	r2, [pc, #272]	; (800e19c <Map_Load+0x158>)
 800e08c:	5cd1      	ldrb	r1, [r2, r3]
 800e08e:	4b41      	ldr	r3, [pc, #260]	; (800e194 <Map_Load+0x150>)
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	4b3f      	ldr	r3, [pc, #252]	; (800e190 <Map_Load+0x14c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f001 0103 	and.w	r1, r1, #3
 800e09a:	b2c8      	uxtb	r0, r1
 800e09c:	4940      	ldr	r1, [pc, #256]	; (800e1a0 <Map_Load+0x15c>)
 800e09e:	0092      	lsls	r2, r2, #2
 800e0a0:	441a      	add	r2, r3
 800e0a2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e0a6:	f360 0383 	bfi	r3, r0, #2, #2
 800e0aa:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800e0ae:	4b3a      	ldr	r3, [pc, #232]	; (800e198 <Map_Load+0x154>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3302      	adds	r3, #2
 800e0b4:	4a39      	ldr	r2, [pc, #228]	; (800e19c <Map_Load+0x158>)
 800e0b6:	5cd1      	ldrb	r1, [r2, r3]
 800e0b8:	4b36      	ldr	r3, [pc, #216]	; (800e194 <Map_Load+0x150>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	4b34      	ldr	r3, [pc, #208]	; (800e190 <Map_Load+0x14c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f001 0103 	and.w	r1, r1, #3
 800e0c4:	b2c8      	uxtb	r0, r1
 800e0c6:	4936      	ldr	r1, [pc, #216]	; (800e1a0 <Map_Load+0x15c>)
 800e0c8:	0092      	lsls	r2, r2, #2
 800e0ca:	441a      	add	r2, r3
 800e0cc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e0d0:	f360 1305 	bfi	r3, r0, #4, #2
 800e0d4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800e0d8:	4b2f      	ldr	r3, [pc, #188]	; (800e198 <Map_Load+0x154>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	3303      	adds	r3, #3
 800e0de:	4a2f      	ldr	r2, [pc, #188]	; (800e19c <Map_Load+0x158>)
 800e0e0:	5cd1      	ldrb	r1, [r2, r3]
 800e0e2:	4b2c      	ldr	r3, [pc, #176]	; (800e194 <Map_Load+0x150>)
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4b2a      	ldr	r3, [pc, #168]	; (800e190 <Map_Load+0x14c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f001 0103 	and.w	r1, r1, #3
 800e0ee:	b2c8      	uxtb	r0, r1
 800e0f0:	492b      	ldr	r1, [pc, #172]	; (800e1a0 <Map_Load+0x15c>)
 800e0f2:	0092      	lsls	r2, r2, #2
 800e0f4:	441a      	add	r2, r3
 800e0f6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e0fa:	f360 1387 	bfi	r3, r0, #6, #2
 800e0fe:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800e102:	4b25      	ldr	r3, [pc, #148]	; (800e198 <Map_Load+0x154>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3304      	adds	r3, #4
 800e108:	4a23      	ldr	r2, [pc, #140]	; (800e198 <Map_Load+0x154>)
 800e10a:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e10c:	4b21      	ldr	r3, [pc, #132]	; (800e194 <Map_Load+0x150>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3301      	adds	r3, #1
 800e112:	4a20      	ldr	r2, [pc, #128]	; (800e194 <Map_Load+0x150>)
 800e114:	6013      	str	r3, [r2, #0]
 800e116:	4b1f      	ldr	r3, [pc, #124]	; (800e194 <Map_Load+0x150>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	dd9e      	ble.n	800e05c <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e11e:	4b1c      	ldr	r3, [pc, #112]	; (800e190 <Map_Load+0x14c>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3b01      	subs	r3, #1
 800e124:	4a1a      	ldr	r2, [pc, #104]	; (800e190 <Map_Load+0x14c>)
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	4b19      	ldr	r3, [pc, #100]	; (800e190 <Map_Load+0x14c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	da91      	bge.n	800e054 <Map_Load+0x10>
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	//歩数マッ�?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e130:	4b17      	ldr	r3, [pc, #92]	; (800e190 <Map_Load+0x14c>)
 800e132:	2203      	movs	r2, #3
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	e024      	b.n	800e182 <Map_Load+0x13e>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e138:	4b16      	ldr	r3, [pc, #88]	; (800e194 <Map_Load+0x150>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e017      	b.n	800e170 <Map_Load+0x12c>
			walk_map[i][j] = work_ram[k];
 800e140:	4b15      	ldr	r3, [pc, #84]	; (800e198 <Map_Load+0x154>)
 800e142:	6819      	ldr	r1, [r3, #0]
 800e144:	4b13      	ldr	r3, [pc, #76]	; (800e194 <Map_Load+0x150>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	4b11      	ldr	r3, [pc, #68]	; (800e190 <Map_Load+0x14c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4813      	ldr	r0, [pc, #76]	; (800e19c <Map_Load+0x158>)
 800e14e:	5c40      	ldrb	r0, [r0, r1]
 800e150:	4914      	ldr	r1, [pc, #80]	; (800e1a4 <Map_Load+0x160>)
 800e152:	0092      	lsls	r2, r2, #2
 800e154:	440a      	add	r2, r1
 800e156:	4413      	add	r3, r2
 800e158:	4602      	mov	r2, r0
 800e15a:	701a      	strb	r2, [r3, #0]
			k+=1;
 800e15c:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <Map_Load+0x154>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3301      	adds	r3, #1
 800e162:	4a0d      	ldr	r2, [pc, #52]	; (800e198 <Map_Load+0x154>)
 800e164:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <Map_Load+0x150>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3301      	adds	r3, #1
 800e16c:	4a09      	ldr	r2, [pc, #36]	; (800e194 <Map_Load+0x150>)
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <Map_Load+0x150>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b03      	cmp	r3, #3
 800e176:	dde3      	ble.n	800e140 <Map_Load+0xfc>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <Map_Load+0x14c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	4a04      	ldr	r2, [pc, #16]	; (800e190 <Map_Load+0x14c>)
 800e180:	6013      	str	r3, [r2, #0]
 800e182:	4b03      	ldr	r3, [pc, #12]	; (800e190 <Map_Load+0x14c>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	dad6      	bge.n	800e138 <Map_Load+0xf4>
		}
	}

}
 800e18a:	bf00      	nop
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2000dfe4 	.word	0x2000dfe4
 800e194:	2000dfe8 	.word	0x2000dfe8
 800e198:	2000dfec 	.word	0x2000dfec
 800e19c:	20009f90 	.word	0x20009f90
 800e1a0:	2001a6d4 	.word	0x2001a6d4
 800e1a4:	2001a268 	.word	0x2001a268

0800e1a8 <Adachi_search2>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search2(){
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	Map_Load();
 800e1ac:	f7ff ff4a 	bl	800e044 <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800e1b0:	4b41      	ldr	r3, [pc, #260]	; (800e2b8 <Adachi_search2+0x110>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	701a      	strb	r2, [r3, #0]
 800e1b6:	4b40      	ldr	r3, [pc, #256]	; (800e2b8 <Adachi_search2+0x110>)
 800e1b8:	781a      	ldrb	r2, [r3, #0]
 800e1ba:	4b40      	ldr	r3, [pc, #256]	; (800e2bc <Adachi_search2+0x114>)
 800e1bc:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800e1be:	4b40      	ldr	r3, [pc, #256]	; (800e2c0 <Adachi_search2+0x118>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800e1c4:	f7fd ff56 	bl	800c074 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800e1c8:	4b3c      	ldr	r3, [pc, #240]	; (800e2bc <Adachi_search2+0x114>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	4b3a      	ldr	r3, [pc, #232]	; (800e2b8 <Adachi_search2+0x110>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	493b      	ldr	r1, [pc, #236]	; (800e2c4 <Adachi_search2+0x11c>)
 800e1d6:	0083      	lsls	r3, r0, #2
 800e1d8:	441a      	add	r2, r3
 800e1da:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e1de:	2001      	movs	r0, #1
 800e1e0:	f360 1305 	bfi	r3, r0, #4, #2
 800e1e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800e1e8:	f7fd fdd4 	bl	800bd94 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800e1ec:	f7fc fcd0 	bl	800ab90 <Start_Accel>

	x = 0;
 800e1f0:	4b32      	ldr	r3, [pc, #200]	; (800e2bc <Adachi_search2+0x114>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e1f6:	4b30      	ldr	r3, [pc, #192]	; (800e2b8 <Adachi_search2+0x110>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	4b2e      	ldr	r3, [pc, #184]	; (800e2b8 <Adachi_search2+0x110>)
 800e200:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e202:	e005      	b.n	800e210 <Adachi_search2+0x68>
		//壁更新
		wall_set();
 800e204:	f7fd ff36 	bl	800c074 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800e208:	f7fd fdc4 	bl	800bd94 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800e20c:	f7fe ff80 	bl	800d110 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e210:	4b2a      	ldr	r3, [pc, #168]	; (800e2bc <Adachi_search2+0x114>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d9f5      	bls.n	800e204 <Adachi_search2+0x5c>
 800e218:	4b28      	ldr	r3, [pc, #160]	; (800e2bc <Adachi_search2+0x114>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b03      	cmp	r3, #3
 800e21e:	d8f1      	bhi.n	800e204 <Adachi_search2+0x5c>
 800e220:	4b25      	ldr	r3, [pc, #148]	; (800e2b8 <Adachi_search2+0x110>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d9ed      	bls.n	800e204 <Adachi_search2+0x5c>
 800e228:	4b23      	ldr	r3, [pc, #140]	; (800e2b8 <Adachi_search2+0x110>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b03      	cmp	r3, #3
 800e22e:	d8e9      	bhi.n	800e204 <Adachi_search2+0x5c>
	}

	//after-gall#2
	      Decelerate();
 800e230:	f7fc fdb6 	bl	800ada0 <Decelerate>
	      mode.LED = 7;
 800e234:	4b24      	ldr	r3, [pc, #144]	; (800e2c8 <Adachi_search2+0x120>)
 800e236:	2207      	movs	r2, #7
 800e238:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e23a:	f7fc f9bd 	bl	800a5b8 <LED_Change>
	      HAL_Delay(1000);
 800e23e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e242:	f002 fd27 	bl	8010c94 <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800e246:	4b20      	ldr	r3, [pc, #128]	; (800e2c8 <Adachi_search2+0x120>)
 800e248:	2200      	movs	r2, #0
 800e24a:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e24c:	f7fc f9b4 	bl	800a5b8 <LED_Change>

	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800e250:	f7fe f83e 	bl	800c2d0 <goal_area_search>
//	      HAL_Delay(10000);
//
//    	  for(int i=0; i < 10000; i+=5)
//    	  printf("%f, %f, %f, %f, %f\r\n",data_log[i],data_log[i+1],data_log[i+2],data_log[i+3],data_log[i+4]);
//    	  HAL_Delay(100000);
	      Accelerate();
 800e254:	f7fc fcf4 	bl	800ac40 <Accelerate>
	  	  y = y + 1;
 800e258:	4b17      	ldr	r3, [pc, #92]	; (800e2b8 <Adachi_search2+0x110>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	3301      	adds	r3, #1
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	4b15      	ldr	r3, [pc, #84]	; (800e2b8 <Adachi_search2+0x110>)
 800e262:	701a      	strb	r2, [r3, #0]
	      //スタートから一番遠い未探索あり座標に向かう
	      //右ルート左ルートで分けてみる
	      //未探索あり座標を目的地としてひとつずつまわり、最終的にスタート地点を目標にして帰ってくる
	      //最短経路を解く、を、しっかりやらないといけなさそう

	  	while( !(x == 0 && y == 0)){
 800e264:	e005      	b.n	800e272 <Adachi_search2+0xca>
	  		//壁更新
	  		wall_set();
 800e266:	f7fd ff05 	bl	800c074 <wall_set>

	  		//マップ更新
	  		Walk_Map_Update();
 800e26a:	f7fd fd93 	bl	800bd94 <Walk_Map_Update>

	  		//次の動きを判定し動く
	  		Adachi_go_back();
 800e26e:	f7ff fad3 	bl	800d818 <Adachi_go_back>
	  	while( !(x == 0 && y == 0)){
 800e272:	4b12      	ldr	r3, [pc, #72]	; (800e2bc <Adachi_search2+0x114>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1f5      	bne.n	800e266 <Adachi_search2+0xbe>
 800e27a:	4b0f      	ldr	r3, [pc, #60]	; (800e2b8 <Adachi_search2+0x110>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1f1      	bne.n	800e266 <Adachi_search2+0xbe>
	  	}

	  	  Decelerate();
 800e282:	f7fc fd8d 	bl	800ada0 <Decelerate>
	      rotate180();
 800e286:	f7fd fb4d 	bl	800b924 <rotate180>
	      wait(0.3);
 800e28a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e2b0 <Adachi_search2+0x108>
 800e28e:	f7fc fc59 	bl	800ab44 <wait>
	      back_calib();
 800e292:	f7fd fbc1 	bl	800ba18 <back_calib>
	      wait(0.3);
 800e296:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e2b0 <Adachi_search2+0x108>
 800e29a:	f7fc fc53 	bl	800ab44 <wait>
	      mapcopy();
 800e29e:	f7fb fccf 	bl	8009c40 <mapcopy>
	      Flash_store();
 800e2a2:	f7fb fe41 	bl	8009f28 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800e2a6:	f7fb ff03 	bl	800a0b0 <Motor_PWM_Stop>
}
 800e2aa:	bf00      	nop
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	33333333 	.word	0x33333333
 800e2b4:	3fd33333 	.word	0x3fd33333
 800e2b8:	20009f85 	.word	0x20009f85
 800e2bc:	20009f84 	.word	0x20009f84
 800e2c0:	2000e122 	.word	0x2000e122
 800e2c4:	2001a6d4 	.word	0x2001a6d4
 800e2c8:	20000074 	.word	0x20000074
 800e2cc:	00000000 	.word	0x00000000

0800e2d0 <Shortest_Run_Judge>:


void Shortest_Run_Judge(){
 800e2d0:	b598      	push	{r3, r4, r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
	/*------旋回モード選択-----*/
	mode.turn = 1;
 800e2d4:	4ba8      	ldr	r3, [pc, #672]	; (800e578 <Shortest_Run_Judge+0x2a8>)
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	725a      	strb	r2, [r3, #9]
	// 2 : 片輪旋回                  //
	// 3 : IMUで超信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800e2da:	4ba8      	ldr	r3, [pc, #672]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b03      	cmp	r3, #3
 800e2e0:	f200 834e 	bhi.w	800e980 <Shortest_Run_Judge+0x6b0>
 800e2e4:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <Shortest_Run_Judge+0x1c>)
 800e2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ea:	bf00      	nop
 800e2ec:	0800e2fd 	.word	0x0800e2fd
 800e2f0:	0800e48d 	.word	0x0800e48d
 800e2f4:	0800e641 	.word	0x0800e641
 800e2f8:	0800e7f1 	.word	0x0800e7f1
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e2fc:	4ba0      	ldr	r3, [pc, #640]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	4618      	mov	r0, r3
 800e302:	4ba0      	ldr	r3, [pc, #640]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	4619      	mov	r1, r3
 800e308:	4a9f      	ldr	r2, [pc, #636]	; (800e588 <Shortest_Run_Judge+0x2b8>)
 800e30a:	0083      	lsls	r3, r0, #2
 800e30c:	440b      	add	r3, r1
 800e30e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e312:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d127      	bne.n	800e36c <Shortest_Run_Judge+0x9c>
 800e31c:	4b98      	ldr	r3, [pc, #608]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	461a      	mov	r2, r3
 800e322:	4b98      	ldr	r3, [pc, #608]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	3301      	adds	r3, #1
 800e328:	4998      	ldr	r1, [pc, #608]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e32a:	0092      	lsls	r2, r2, #2
 800e32c:	440a      	add	r2, r1
 800e32e:	4413      	add	r3, r2
 800e330:	781a      	ldrb	r2, [r3, #0]
 800e332:	4b93      	ldr	r3, [pc, #588]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	461c      	mov	r4, r3
 800e338:	4b92      	ldr	r3, [pc, #584]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	4993      	ldr	r1, [pc, #588]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e340:	00a3      	lsls	r3, r4, #2
 800e342:	440b      	add	r3, r1
 800e344:	4403      	add	r3, r0
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d20f      	bcs.n	800e36c <Shortest_Run_Judge+0x9c>
 800e34c:	4b8d      	ldr	r3, [pc, #564]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b02      	cmp	r3, #2
 800e352:	d80b      	bhi.n	800e36c <Shortest_Run_Judge+0x9c>
	  				  //前北
	  				  straight();
 800e354:	f7fc fdd0 	bl	800aef8 <straight>
	  				  my_direction = north;
 800e358:	4b88      	ldr	r3, [pc, #544]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800e35e:	4b89      	ldr	r3, [pc, #548]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	b2da      	uxtb	r2, r3
 800e366:	4b87      	ldr	r3, [pc, #540]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e368:	701a      	strb	r2, [r3, #0]
 800e36a:	e08e      	b.n	800e48a <Shortest_Run_Judge+0x1ba>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e36c:	4b84      	ldr	r3, [pc, #528]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	4618      	mov	r0, r3
 800e372:	4b84      	ldr	r3, [pc, #528]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	4619      	mov	r1, r3
 800e378:	4a83      	ldr	r2, [pc, #524]	; (800e588 <Shortest_Run_Judge+0x2b8>)
 800e37a:	0083      	lsls	r3, r0, #2
 800e37c:	440b      	add	r3, r1
 800e37e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e382:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d127      	bne.n	800e3dc <Shortest_Run_Judge+0x10c>
 800e38c:	4b7c      	ldr	r3, [pc, #496]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	3b01      	subs	r3, #1
 800e392:	4a7c      	ldr	r2, [pc, #496]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e394:	7812      	ldrb	r2, [r2, #0]
 800e396:	4611      	mov	r1, r2
 800e398:	4a7c      	ldr	r2, [pc, #496]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	440b      	add	r3, r1
 800e3a0:	781a      	ldrb	r2, [r3, #0]
 800e3a2:	4b77      	ldr	r3, [pc, #476]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	461c      	mov	r4, r3
 800e3a8:	4b76      	ldr	r3, [pc, #472]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	4977      	ldr	r1, [pc, #476]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e3b0:	00a3      	lsls	r3, r4, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	4403      	add	r3, r0
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d20f      	bcs.n	800e3dc <Shortest_Run_Judge+0x10c>
 800e3bc:	4b70      	ldr	r3, [pc, #448]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00b      	beq.n	800e3dc <Shortest_Run_Judge+0x10c>
	  				  //左西
	  				  L_turn_select();
 800e3c4:	f7fd fbd4 	bl	800bb70 <L_turn_select>
	  				  my_direction = west;
 800e3c8:	4b6c      	ldr	r3, [pc, #432]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e3ca:	2203      	movs	r2, #3
 800e3cc:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800e3ce:	4b6c      	ldr	r3, [pc, #432]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	4b6a      	ldr	r3, [pc, #424]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3d8:	701a      	strb	r2, [r3, #0]
 800e3da:	e056      	b.n	800e48a <Shortest_Run_Judge+0x1ba>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800e3dc:	4b68      	ldr	r3, [pc, #416]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	4b68      	ldr	r3, [pc, #416]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	4a67      	ldr	r2, [pc, #412]	; (800e588 <Shortest_Run_Judge+0x2b8>)
 800e3ea:	0083      	lsls	r3, r0, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e3f2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d127      	bne.n	800e44c <Shortest_Run_Judge+0x17c>
 800e3fc:	4b60      	ldr	r3, [pc, #384]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	3301      	adds	r3, #1
 800e402:	4a60      	ldr	r2, [pc, #384]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e404:	7812      	ldrb	r2, [r2, #0]
 800e406:	4611      	mov	r1, r2
 800e408:	4a60      	ldr	r2, [pc, #384]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	440b      	add	r3, r1
 800e410:	781a      	ldrb	r2, [r3, #0]
 800e412:	4b5b      	ldr	r3, [pc, #364]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	461c      	mov	r4, r3
 800e418:	4b5a      	ldr	r3, [pc, #360]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	4618      	mov	r0, r3
 800e41e:	495b      	ldr	r1, [pc, #364]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e420:	00a3      	lsls	r3, r4, #2
 800e422:	440b      	add	r3, r1
 800e424:	4403      	add	r3, r0
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d20f      	bcs.n	800e44c <Shortest_Run_Judge+0x17c>
 800e42c:	4b54      	ldr	r3, [pc, #336]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b02      	cmp	r3, #2
 800e432:	d80b      	bhi.n	800e44c <Shortest_Run_Judge+0x17c>
	  				  //右東
	  				  R_turn_select();
 800e434:	f7fd fb58 	bl	800bae8 <R_turn_select>
	  		          my_direction = east;
 800e438:	4b50      	ldr	r3, [pc, #320]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e43a:	2201      	movs	r2, #1
 800e43c:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800e43e:	4b50      	ldr	r3, [pc, #320]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	3301      	adds	r3, #1
 800e444:	b2da      	uxtb	r2, r3
 800e446:	4b4e      	ldr	r3, [pc, #312]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e448:	701a      	strb	r2, [r3, #0]
 800e44a:	e01e      	b.n	800e48a <Shortest_Run_Judge+0x1ba>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800e44c:	f7fc fca8 	bl	800ada0 <Decelerate>
	  		          wait(0.3);;
 800e450:	ed9f 0b47 	vldr	d0, [pc, #284]	; 800e570 <Shortest_Run_Judge+0x2a0>
 800e454:	f7fc fb76 	bl	800ab44 <wait>

	  		          if(mode.execution == 1)
 800e458:	4b47      	ldr	r3, [pc, #284]	; (800e578 <Shortest_Run_Judge+0x2a8>)
 800e45a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d101      	bne.n	800e466 <Shortest_Run_Judge+0x196>
	  		        	  Motor_PWM_Stop();
 800e462:	f7fb fe25 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e466:	f7fd fa5d 	bl	800b924 <rotate180>
	  		  	      wait(0.3);;
 800e46a:	ed9f 0b41 	vldr	d0, [pc, #260]	; 800e570 <Shortest_Run_Judge+0x2a0>
 800e46e:	f7fc fb69 	bl	800ab44 <wait>
	  		       	  Accelerate();
 800e472:	f7fc fbe5 	bl	800ac40 <Accelerate>
	  		       	  my_direction = south;
 800e476:	4b41      	ldr	r3, [pc, #260]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e478:	2202      	movs	r2, #2
 800e47a:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e47c:	4b41      	ldr	r3, [pc, #260]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	3b01      	subs	r3, #1
 800e482:	b2da      	uxtb	r2, r3
 800e484:	4b3f      	ldr	r3, [pc, #252]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e486:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e488:	e27b      	b.n	800e982 <Shortest_Run_Judge+0x6b2>
 800e48a:	e27a      	b.n	800e982 <Shortest_Run_Judge+0x6b2>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e48c:	4b3c      	ldr	r3, [pc, #240]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	4b3c      	ldr	r3, [pc, #240]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	4619      	mov	r1, r3
 800e498:	4a3b      	ldr	r2, [pc, #236]	; (800e588 <Shortest_Run_Judge+0x2b8>)
 800e49a:	0083      	lsls	r3, r0, #2
 800e49c:	440b      	add	r3, r1
 800e49e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e4a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d127      	bne.n	800e4fc <Shortest_Run_Judge+0x22c>
 800e4ac:	4b34      	ldr	r3, [pc, #208]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	4a34      	ldr	r2, [pc, #208]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4a34      	ldr	r2, [pc, #208]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4413      	add	r3, r2
 800e4be:	440b      	add	r3, r1
 800e4c0:	781a      	ldrb	r2, [r3, #0]
 800e4c2:	4b2f      	ldr	r3, [pc, #188]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	461c      	mov	r4, r3
 800e4c8:	4b2e      	ldr	r3, [pc, #184]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	492f      	ldr	r1, [pc, #188]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e4d0:	00a3      	lsls	r3, r4, #2
 800e4d2:	440b      	add	r3, r1
 800e4d4:	4403      	add	r3, r0
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d20f      	bcs.n	800e4fc <Shortest_Run_Judge+0x22c>
 800e4dc:	4b28      	ldr	r3, [pc, #160]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d80b      	bhi.n	800e4fc <Shortest_Run_Judge+0x22c>
	  				  //前東
	  				  straight();
 800e4e4:	f7fc fd08 	bl	800aef8 <straight>
	  		       	  my_direction = east;
 800e4e8:	4b24      	ldr	r3, [pc, #144]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e4ee:	4b24      	ldr	r3, [pc, #144]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	4b22      	ldr	r3, [pc, #136]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	e0a0      	b.n	800e63e <Shortest_Run_Judge+0x36e>
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e4fc:	4b20      	ldr	r3, [pc, #128]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	4618      	mov	r0, r3
 800e502:	4b20      	ldr	r3, [pc, #128]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	4619      	mov	r1, r3
 800e508:	4a1f      	ldr	r2, [pc, #124]	; (800e588 <Shortest_Run_Judge+0x2b8>)
 800e50a:	0083      	lsls	r3, r0, #2
 800e50c:	440b      	add	r3, r1
 800e50e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e512:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d139      	bne.n	800e590 <Shortest_Run_Judge+0x2c0>
 800e51c:	4b18      	ldr	r3, [pc, #96]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	461a      	mov	r2, r3
 800e522:	4b18      	ldr	r3, [pc, #96]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	3301      	adds	r3, #1
 800e528:	4918      	ldr	r1, [pc, #96]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e52a:	0092      	lsls	r2, r2, #2
 800e52c:	440a      	add	r2, r1
 800e52e:	4413      	add	r3, r2
 800e530:	781a      	ldrb	r2, [r3, #0]
 800e532:	4b13      	ldr	r3, [pc, #76]	; (800e580 <Shortest_Run_Judge+0x2b0>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	461c      	mov	r4, r3
 800e538:	4b12      	ldr	r3, [pc, #72]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	4618      	mov	r0, r3
 800e53e:	4913      	ldr	r1, [pc, #76]	; (800e58c <Shortest_Run_Judge+0x2bc>)
 800e540:	00a3      	lsls	r3, r4, #2
 800e542:	440b      	add	r3, r1
 800e544:	4403      	add	r3, r0
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d221      	bcs.n	800e590 <Shortest_Run_Judge+0x2c0>
 800e54c:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d81d      	bhi.n	800e590 <Shortest_Run_Judge+0x2c0>
	  				  //左�?
	  				  L_turn_select();
 800e554:	f7fd fb0c 	bl	800bb70 <L_turn_select>
	  		       	  my_direction = north;
 800e558:	4b08      	ldr	r3, [pc, #32]	; (800e57c <Shortest_Run_Judge+0x2ac>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	b2da      	uxtb	r2, r3
 800e566:	4b07      	ldr	r3, [pc, #28]	; (800e584 <Shortest_Run_Judge+0x2b4>)
 800e568:	701a      	strb	r2, [r3, #0]
 800e56a:	e068      	b.n	800e63e <Shortest_Run_Judge+0x36e>
 800e56c:	f3af 8000 	nop.w
 800e570:	33333333 	.word	0x33333333
 800e574:	3fd33333 	.word	0x3fd33333
 800e578:	20000074 	.word	0x20000074
 800e57c:	2000e122 	.word	0x2000e122
 800e580:	20009f84 	.word	0x20009f84
 800e584:	20009f85 	.word	0x20009f85
 800e588:	2001a6d4 	.word	0x2001a6d4
 800e58c:	2001a268 	.word	0x2001a268
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e590:	4b91      	ldr	r3, [pc, #580]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	4618      	mov	r0, r3
 800e596:	4b91      	ldr	r3, [pc, #580]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	4a90      	ldr	r2, [pc, #576]	; (800e7e0 <Shortest_Run_Judge+0x510>)
 800e59e:	0083      	lsls	r3, r0, #2
 800e5a0:	440b      	add	r3, r1
 800e5a2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e5a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d127      	bne.n	800e600 <Shortest_Run_Judge+0x330>
 800e5b0:	4b89      	ldr	r3, [pc, #548]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4b89      	ldr	r3, [pc, #548]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	4989      	ldr	r1, [pc, #548]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	440a      	add	r2, r1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	4b84      	ldr	r3, [pc, #528]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	4b83      	ldr	r3, [pc, #524]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	4984      	ldr	r1, [pc, #528]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e5d4:	00a3      	lsls	r3, r4, #2
 800e5d6:	440b      	add	r3, r1
 800e5d8:	4403      	add	r3, r0
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d20f      	bcs.n	800e600 <Shortest_Run_Judge+0x330>
 800e5e0:	4b7e      	ldr	r3, [pc, #504]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00b      	beq.n	800e600 <Shortest_Run_Judge+0x330>
	  				  //右�?
	  				  R_turn_select();
 800e5e8:	f7fd fa7e 	bl	800bae8 <R_turn_select>
	  		       	  my_direction = south;
 800e5ec:	4b7e      	ldr	r3, [pc, #504]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e5ee:	2202      	movs	r2, #2
 800e5f0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e5f2:	4b7a      	ldr	r3, [pc, #488]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b78      	ldr	r3, [pc, #480]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	e01e      	b.n	800e63e <Shortest_Run_Judge+0x36e>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800e600:	f7fc fbce 	bl	800ada0 <Decelerate>
	  		          wait(0.3);;
 800e604:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800e7d0 <Shortest_Run_Judge+0x500>
 800e608:	f7fc fa9c 	bl	800ab44 <wait>

	  		          if(mode.execution == 1)
 800e60c:	4b77      	ldr	r3, [pc, #476]	; (800e7ec <Shortest_Run_Judge+0x51c>)
 800e60e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d101      	bne.n	800e61a <Shortest_Run_Judge+0x34a>
	  		        	  Motor_PWM_Stop();
 800e616:	f7fb fd4b 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e61a:	f7fd f983 	bl	800b924 <rotate180>
	  		  	      wait(0.3);;
 800e61e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800e7d0 <Shortest_Run_Judge+0x500>
 800e622:	f7fc fa8f 	bl	800ab44 <wait>
	  		       	  Accelerate();
 800e626:	f7fc fb0b 	bl	800ac40 <Accelerate>

	  		       	  my_direction = west;
 800e62a:	4b6f      	ldr	r3, [pc, #444]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e62c:	2203      	movs	r2, #3
 800e62e:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e630:	4b69      	ldr	r3, [pc, #420]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	3b01      	subs	r3, #1
 800e636:	b2da      	uxtb	r2, r3
 800e638:	4b67      	ldr	r3, [pc, #412]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e63a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e63c:	e1a1      	b.n	800e982 <Shortest_Run_Judge+0x6b2>
 800e63e:	e1a0      	b.n	800e982 <Shortest_Run_Judge+0x6b2>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e640:	4b65      	ldr	r3, [pc, #404]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4618      	mov	r0, r3
 800e646:	4b65      	ldr	r3, [pc, #404]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	4619      	mov	r1, r3
 800e64c:	4a64      	ldr	r2, [pc, #400]	; (800e7e0 <Shortest_Run_Judge+0x510>)
 800e64e:	0083      	lsls	r3, r0, #2
 800e650:	440b      	add	r3, r1
 800e652:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e656:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d127      	bne.n	800e6b0 <Shortest_Run_Judge+0x3e0>
 800e660:	4b5d      	ldr	r3, [pc, #372]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	4b5d      	ldr	r3, [pc, #372]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	3b01      	subs	r3, #1
 800e66c:	495d      	ldr	r1, [pc, #372]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e66e:	0092      	lsls	r2, r2, #2
 800e670:	440a      	add	r2, r1
 800e672:	4413      	add	r3, r2
 800e674:	781a      	ldrb	r2, [r3, #0]
 800e676:	4b58      	ldr	r3, [pc, #352]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	461c      	mov	r4, r3
 800e67c:	4b57      	ldr	r3, [pc, #348]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	4618      	mov	r0, r3
 800e682:	4958      	ldr	r1, [pc, #352]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e684:	00a3      	lsls	r3, r4, #2
 800e686:	440b      	add	r3, r1
 800e688:	4403      	add	r3, r0
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d20f      	bcs.n	800e6b0 <Shortest_Run_Judge+0x3e0>
 800e690:	4b52      	ldr	r3, [pc, #328]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00b      	beq.n	800e6b0 <Shortest_Run_Judge+0x3e0>
	  				  //前南
	  				  straight();
 800e698:	f7fc fc2e 	bl	800aef8 <straight>
	  		       	  my_direction = south;
 800e69c:	4b52      	ldr	r3, [pc, #328]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e69e:	2202      	movs	r2, #2
 800e6a0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e6a2:	4b4e      	ldr	r3, [pc, #312]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	4b4c      	ldr	r3, [pc, #304]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e6ac:	701a      	strb	r2, [r3, #0]
 800e6ae:	e08e      	b.n	800e7ce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e6b0:	4b49      	ldr	r3, [pc, #292]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	4b49      	ldr	r3, [pc, #292]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4a48      	ldr	r2, [pc, #288]	; (800e7e0 <Shortest_Run_Judge+0x510>)
 800e6be:	0083      	lsls	r3, r0, #2
 800e6c0:	440b      	add	r3, r1
 800e6c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e6c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d127      	bne.n	800e720 <Shortest_Run_Judge+0x450>
 800e6d0:	4b41      	ldr	r3, [pc, #260]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	4a41      	ldr	r2, [pc, #260]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e6d8:	7812      	ldrb	r2, [r2, #0]
 800e6da:	4611      	mov	r1, r2
 800e6dc:	4a41      	ldr	r2, [pc, #260]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4413      	add	r3, r2
 800e6e2:	440b      	add	r3, r1
 800e6e4:	781a      	ldrb	r2, [r3, #0]
 800e6e6:	4b3c      	ldr	r3, [pc, #240]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	4b3b      	ldr	r3, [pc, #236]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	493c      	ldr	r1, [pc, #240]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e6f4:	00a3      	lsls	r3, r4, #2
 800e6f6:	440b      	add	r3, r1
 800e6f8:	4403      	add	r3, r0
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d20f      	bcs.n	800e720 <Shortest_Run_Judge+0x450>
 800e700:	4b35      	ldr	r3, [pc, #212]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b02      	cmp	r3, #2
 800e706:	d80b      	bhi.n	800e720 <Shortest_Run_Judge+0x450>
	  				  //左東
	  				  L_turn_select();
 800e708:	f7fd fa32 	bl	800bb70 <L_turn_select>
	  		       	  my_direction = east;
 800e70c:	4b36      	ldr	r3, [pc, #216]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e70e:	2201      	movs	r2, #1
 800e710:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e712:	4b31      	ldr	r3, [pc, #196]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	3301      	adds	r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	4b2f      	ldr	r3, [pc, #188]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e71c:	701a      	strb	r2, [r3, #0]
 800e71e:	e056      	b.n	800e7ce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e720:	4b2d      	ldr	r3, [pc, #180]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	4618      	mov	r0, r3
 800e726:	4b2d      	ldr	r3, [pc, #180]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	4619      	mov	r1, r3
 800e72c:	4a2c      	ldr	r2, [pc, #176]	; (800e7e0 <Shortest_Run_Judge+0x510>)
 800e72e:	0083      	lsls	r3, r0, #2
 800e730:	440b      	add	r3, r1
 800e732:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e736:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d127      	bne.n	800e790 <Shortest_Run_Judge+0x4c0>
 800e740:	4b25      	ldr	r3, [pc, #148]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	3b01      	subs	r3, #1
 800e746:	4a25      	ldr	r2, [pc, #148]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e748:	7812      	ldrb	r2, [r2, #0]
 800e74a:	4611      	mov	r1, r2
 800e74c:	4a25      	ldr	r2, [pc, #148]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	440b      	add	r3, r1
 800e754:	781a      	ldrb	r2, [r3, #0]
 800e756:	4b20      	ldr	r3, [pc, #128]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	461c      	mov	r4, r3
 800e75c:	4b1f      	ldr	r3, [pc, #124]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	4618      	mov	r0, r3
 800e762:	4920      	ldr	r1, [pc, #128]	; (800e7e4 <Shortest_Run_Judge+0x514>)
 800e764:	00a3      	lsls	r3, r4, #2
 800e766:	440b      	add	r3, r1
 800e768:	4403      	add	r3, r0
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d20f      	bcs.n	800e790 <Shortest_Run_Judge+0x4c0>
 800e770:	4b19      	ldr	r3, [pc, #100]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <Shortest_Run_Judge+0x4c0>
	  				  //右西
	  				  R_turn_select();
 800e778:	f7fd f9b6 	bl	800bae8 <R_turn_select>
	  		       	  my_direction = west;
 800e77c:	4b1a      	ldr	r3, [pc, #104]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e77e:	2203      	movs	r2, #3
 800e780:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	3b01      	subs	r3, #1
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	4b13      	ldr	r3, [pc, #76]	; (800e7d8 <Shortest_Run_Judge+0x508>)
 800e78c:	701a      	strb	r2, [r3, #0]
 800e78e:	e01e      	b.n	800e7ce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800e790:	f7fc fb06 	bl	800ada0 <Decelerate>
	  		          wait(0.3);;
 800e794:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e7d0 <Shortest_Run_Judge+0x500>
 800e798:	f7fc f9d4 	bl	800ab44 <wait>

	  		          if(mode.execution == 1)
 800e79c:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <Shortest_Run_Judge+0x51c>)
 800e79e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d101      	bne.n	800e7aa <Shortest_Run_Judge+0x4da>
	  		        	  Motor_PWM_Stop();
 800e7a6:	f7fb fc83 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e7aa:	f7fd f8bb 	bl	800b924 <rotate180>
	  		  	      wait(0.3);;
 800e7ae:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800e7d0 <Shortest_Run_Judge+0x500>
 800e7b2:	f7fc f9c7 	bl	800ab44 <wait>
	  		       	  Accelerate();
 800e7b6:	f7fc fa43 	bl	800ac40 <Accelerate>

	  		       	  my_direction = north;
 800e7ba:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <Shortest_Run_Judge+0x518>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e7c0:	4b06      	ldr	r3, [pc, #24]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	4b04      	ldr	r3, [pc, #16]	; (800e7dc <Shortest_Run_Judge+0x50c>)
 800e7ca:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e7cc:	e0d9      	b.n	800e982 <Shortest_Run_Judge+0x6b2>
 800e7ce:	e0d8      	b.n	800e982 <Shortest_Run_Judge+0x6b2>
 800e7d0:	33333333 	.word	0x33333333
 800e7d4:	3fd33333 	.word	0x3fd33333
 800e7d8:	20009f84 	.word	0x20009f84
 800e7dc:	20009f85 	.word	0x20009f85
 800e7e0:	2001a6d4 	.word	0x2001a6d4
 800e7e4:	2001a268 	.word	0x2001a268
 800e7e8:	2000e122 	.word	0x2000e122
 800e7ec:	20000074 	.word	0x20000074

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e7f0:	4b67      	ldr	r3, [pc, #412]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	4b67      	ldr	r3, [pc, #412]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4a66      	ldr	r2, [pc, #408]	; (800e998 <Shortest_Run_Judge+0x6c8>)
 800e7fe:	0083      	lsls	r3, r0, #2
 800e800:	440b      	add	r3, r1
 800e802:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e806:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d127      	bne.n	800e860 <Shortest_Run_Judge+0x590>
 800e810:	4b5f      	ldr	r3, [pc, #380]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	3b01      	subs	r3, #1
 800e816:	4a5f      	ldr	r2, [pc, #380]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e818:	7812      	ldrb	r2, [r2, #0]
 800e81a:	4611      	mov	r1, r2
 800e81c:	4a5f      	ldr	r2, [pc, #380]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	440b      	add	r3, r1
 800e824:	781a      	ldrb	r2, [r3, #0]
 800e826:	4b5a      	ldr	r3, [pc, #360]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	461c      	mov	r4, r3
 800e82c:	4b59      	ldr	r3, [pc, #356]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	4618      	mov	r0, r3
 800e832:	495a      	ldr	r1, [pc, #360]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e834:	00a3      	lsls	r3, r4, #2
 800e836:	440b      	add	r3, r1
 800e838:	4403      	add	r3, r0
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d20f      	bcs.n	800e860 <Shortest_Run_Judge+0x590>
 800e840:	4b53      	ldr	r3, [pc, #332]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <Shortest_Run_Judge+0x590>
	  				  //前西
	  				  straight();
 800e848:	f7fc fb56 	bl	800aef8 <straight>
	  		       	  my_direction = west;
 800e84c:	4b54      	ldr	r3, [pc, #336]	; (800e9a0 <Shortest_Run_Judge+0x6d0>)
 800e84e:	2203      	movs	r2, #3
 800e850:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e852:	4b4f      	ldr	r3, [pc, #316]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	3b01      	subs	r3, #1
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	4b4d      	ldr	r3, [pc, #308]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	e08e      	b.n	800e97e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e860:	4b4b      	ldr	r3, [pc, #300]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	4b4b      	ldr	r3, [pc, #300]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4a4a      	ldr	r2, [pc, #296]	; (800e998 <Shortest_Run_Judge+0x6c8>)
 800e86e:	0083      	lsls	r3, r0, #2
 800e870:	440b      	add	r3, r1
 800e872:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e876:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d127      	bne.n	800e8d0 <Shortest_Run_Judge+0x600>
 800e880:	4b43      	ldr	r3, [pc, #268]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	4b43      	ldr	r3, [pc, #268]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	4943      	ldr	r1, [pc, #268]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e88e:	0092      	lsls	r2, r2, #2
 800e890:	440a      	add	r2, r1
 800e892:	4413      	add	r3, r2
 800e894:	781a      	ldrb	r2, [r3, #0]
 800e896:	4b3e      	ldr	r3, [pc, #248]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	461c      	mov	r4, r3
 800e89c:	4b3d      	ldr	r3, [pc, #244]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	493e      	ldr	r1, [pc, #248]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e8a4:	00a3      	lsls	r3, r4, #2
 800e8a6:	440b      	add	r3, r1
 800e8a8:	4403      	add	r3, r0
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d20f      	bcs.n	800e8d0 <Shortest_Run_Judge+0x600>
 800e8b0:	4b38      	ldr	r3, [pc, #224]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00b      	beq.n	800e8d0 <Shortest_Run_Judge+0x600>
	  				  //左�?
	  				  L_turn_select();
 800e8b8:	f7fd f95a 	bl	800bb70 <L_turn_select>
	  		       	  my_direction = south;
 800e8bc:	4b38      	ldr	r3, [pc, #224]	; (800e9a0 <Shortest_Run_Judge+0x6d0>)
 800e8be:	2202      	movs	r2, #2
 800e8c0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e8c2:	4b34      	ldr	r3, [pc, #208]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	4b32      	ldr	r3, [pc, #200]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e8cc:	701a      	strb	r2, [r3, #0]
 800e8ce:	e056      	b.n	800e97e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e8d0:	4b2f      	ldr	r3, [pc, #188]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	4b2f      	ldr	r3, [pc, #188]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	4a2e      	ldr	r2, [pc, #184]	; (800e998 <Shortest_Run_Judge+0x6c8>)
 800e8de:	0083      	lsls	r3, r0, #2
 800e8e0:	440b      	add	r3, r1
 800e8e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e8e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d127      	bne.n	800e940 <Shortest_Run_Judge+0x670>
 800e8f0:	4b27      	ldr	r3, [pc, #156]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4b27      	ldr	r3, [pc, #156]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	4927      	ldr	r1, [pc, #156]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e8fe:	0092      	lsls	r2, r2, #2
 800e900:	440a      	add	r2, r1
 800e902:	4413      	add	r3, r2
 800e904:	781a      	ldrb	r2, [r3, #0]
 800e906:	4b22      	ldr	r3, [pc, #136]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	461c      	mov	r4, r3
 800e90c:	4b21      	ldr	r3, [pc, #132]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	4618      	mov	r0, r3
 800e912:	4922      	ldr	r1, [pc, #136]	; (800e99c <Shortest_Run_Judge+0x6cc>)
 800e914:	00a3      	lsls	r3, r4, #2
 800e916:	440b      	add	r3, r1
 800e918:	4403      	add	r3, r0
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d20f      	bcs.n	800e940 <Shortest_Run_Judge+0x670>
 800e920:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b02      	cmp	r3, #2
 800e926:	d80b      	bhi.n	800e940 <Shortest_Run_Judge+0x670>
	  				  //右�?
	  				  R_turn_select();
 800e928:	f7fd f8de 	bl	800bae8 <R_turn_select>
	  		       	  my_direction = north;
 800e92c:	4b1c      	ldr	r3, [pc, #112]	; (800e9a0 <Shortest_Run_Judge+0x6d0>)
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e932:	4b18      	ldr	r3, [pc, #96]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	3301      	adds	r3, #1
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4b16      	ldr	r3, [pc, #88]	; (800e994 <Shortest_Run_Judge+0x6c4>)
 800e93c:	701a      	strb	r2, [r3, #0]
 800e93e:	e01e      	b.n	800e97e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800e940:	f7fc fa2e 	bl	800ada0 <Decelerate>
	  		          wait(0.3);;
 800e944:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800e988 <Shortest_Run_Judge+0x6b8>
 800e948:	f7fc f8fc 	bl	800ab44 <wait>

	  		          if(mode.execution == 1)
 800e94c:	4b15      	ldr	r3, [pc, #84]	; (800e9a4 <Shortest_Run_Judge+0x6d4>)
 800e94e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d101      	bne.n	800e95a <Shortest_Run_Judge+0x68a>
	  		        	  Motor_PWM_Stop();
 800e956:	f7fb fbab 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e95a:	f7fc ffe3 	bl	800b924 <rotate180>
	  		  	      wait(0.3);;
 800e95e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 800e988 <Shortest_Run_Judge+0x6b8>
 800e962:	f7fc f8ef 	bl	800ab44 <wait>
	  		       	  Accelerate();
 800e966:	f7fc f96b 	bl	800ac40 <Accelerate>

	  		       	  my_direction = east;
 800e96a:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <Shortest_Run_Judge+0x6d0>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e970:	4b07      	ldr	r3, [pc, #28]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	3301      	adds	r3, #1
 800e976:	b2da      	uxtb	r2, r3
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <Shortest_Run_Judge+0x6c0>)
 800e97a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e97c:	e001      	b.n	800e982 <Shortest_Run_Judge+0x6b2>
 800e97e:	e000      	b.n	800e982 <Shortest_Run_Judge+0x6b2>

	  		  default:
	  			  break;
 800e980:	bf00      	nop
	  		  }//swtich end
}
 800e982:	bf00      	nop
 800e984:	bd98      	pop	{r3, r4, r7, pc}
 800e986:	bf00      	nop
 800e988:	33333333 	.word	0x33333333
 800e98c:	3fd33333 	.word	0x3fd33333
 800e990:	20009f84 	.word	0x20009f84
 800e994:	20009f85 	.word	0x20009f85
 800e998:	2001a6d4 	.word	0x2001a6d4
 800e99c:	2001a268 	.word	0x2001a268
 800e9a0:	2000e122 	.word	0x2000e122
 800e9a4:	20000074 	.word	0x20000074

0800e9a8 <Shortest_Run>:
void Shortest_Run(){
 800e9a8:	b598      	push	{r3, r4, r7, lr}
 800e9aa:	af00      	add	r7, sp, #0

	//ROMの迷路�?ータをRAMに入れる
	Map_Load();
 800e9ac:	f7ff fb4a 	bl	800e044 <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800e9b0:	4b35      	ldr	r3, [pc, #212]	; (800ea88 <Shortest_Run+0xe0>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	4b34      	ldr	r3, [pc, #208]	; (800ea88 <Shortest_Run+0xe0>)
 800e9b8:	781a      	ldrb	r2, [r3, #0]
 800e9ba:	4b34      	ldr	r3, [pc, #208]	; (800ea8c <Shortest_Run+0xe4>)
 800e9bc:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800e9be:	4b34      	ldr	r3, [pc, #208]	; (800ea90 <Shortest_Run+0xe8>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	701a      	strb	r2, [r3, #0]

	//�?初�?�直進
	Start_Accel();
 800e9c4:	f7fc f8e4 	bl	800ab90 <Start_Accel>

	x = 0;
 800e9c8:	4b30      	ldr	r3, [pc, #192]	; (800ea8c <Shortest_Run+0xe4>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e9ce:	4b2e      	ldr	r3, [pc, #184]	; (800ea88 <Shortest_Run+0xe0>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	b2da      	uxtb	r2, r3
 800e9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ea88 <Shortest_Run+0xe0>)
 800e9d8:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e9da:	e001      	b.n	800e9e0 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800e9dc:	f7ff fc78 	bl	800e2d0 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ea8c <Shortest_Run+0xe4>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d9f9      	bls.n	800e9dc <Shortest_Run+0x34>
 800e9e8:	4b28      	ldr	r3, [pc, #160]	; (800ea8c <Shortest_Run+0xe4>)
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	d8f5      	bhi.n	800e9dc <Shortest_Run+0x34>
 800e9f0:	4b25      	ldr	r3, [pc, #148]	; (800ea88 <Shortest_Run+0xe0>)
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d9f1      	bls.n	800e9dc <Shortest_Run+0x34>
 800e9f8:	4b23      	ldr	r3, [pc, #140]	; (800ea88 <Shortest_Run+0xe0>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d8ed      	bhi.n	800e9dc <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800ea00:	4b24      	ldr	r3, [pc, #144]	; (800ea94 <Shortest_Run+0xec>)
 800ea02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea06:	a31e      	add	r3, pc, #120	; (adr r3, 800ea80 <Shortest_Run+0xd8>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f9 fd2c 	bl	8008468 <__aeabi_dmul>
 800ea10:	4603      	mov	r3, r0
 800ea12:	460c      	mov	r4, r1
 800ea14:	4a20      	ldr	r2, [pc, #128]	; (800ea98 <Shortest_Run+0xf0>)
 800ea16:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800ea1a:	4b20      	ldr	r3, [pc, #128]	; (800ea9c <Shortest_Run+0xf4>)
 800ea1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea20:	4a1d      	ldr	r2, [pc, #116]	; (800ea98 <Shortest_Run+0xf0>)
 800ea22:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800ea26:	f7fc f9bb 	bl	800ada0 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800ea2a:	f7fb fb41 	bl	800a0b0 <Motor_PWM_Stop>
	      mode.LED = 7;
 800ea2e:	4b1c      	ldr	r3, [pc, #112]	; (800eaa0 <Shortest_Run+0xf8>)
 800ea30:	2207      	movs	r2, #7
 800ea32:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800ea34:	f7fb fdc0 	bl	800a5b8 <LED_Change>
	      HAL_Delay(1000);
 800ea38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ea3c:	f002 f92a 	bl	8010c94 <HAL_Delay>
	      mapcopy();
 800ea40:	f7fb f8fe 	bl	8009c40 <mapcopy>
	      Flash_store();
 800ea44:	f7fb fa70 	bl	8009f28 <Flash_store>
	      mode.LED = 0;
 800ea48:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <Shortest_Run+0xf8>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800ea4e:	f7fb fdb3 	bl	800a5b8 <LED_Change>
	      while(1){
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800ea52:	4b11      	ldr	r3, [pc, #68]	; (800ea98 <Shortest_Run+0xf0>)
 800ea54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	4811      	ldr	r0, [pc, #68]	; (800eaa4 <Shortest_Run+0xfc>)
 800ea5e:	f007 ffa3 	bl	80169a8 <iprintf>
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
 800ea62:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <Shortest_Run+0xf0>)
 800ea64:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	480e      	ldr	r0, [pc, #56]	; (800eaa8 <Shortest_Run+0x100>)
 800ea6e:	f007 ff9b 	bl	80169a8 <iprintf>
	    	  printf("\r\n");
 800ea72:	480e      	ldr	r0, [pc, #56]	; (800eaac <Shortest_Run+0x104>)
 800ea74:	f008 f80c 	bl	8016a90 <puts>
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800ea78:	e7eb      	b.n	800ea52 <Shortest_Run+0xaa>
 800ea7a:	bf00      	nop
 800ea7c:	f3af 8000 	nop.w
 800ea80:	d2f1a9fc 	.word	0xd2f1a9fc
 800ea84:	3f50624d 	.word	0x3f50624d
 800ea88:	20009f85 	.word	0x20009f85
 800ea8c:	20009f84 	.word	0x20009f84
 800ea90:	2000e122 	.word	0x2000e122
 800ea94:	20000320 	.word	0x20000320
 800ea98:	2001a280 	.word	0x2001a280
 800ea9c:	20000318 	.word	0x20000318
 800eaa0:	20000074 	.word	0x20000074
 800eaa4:	08018908 	.word	0x08018908
 800eaa8:	08018924 	.word	0x08018924
 800eaac:	08018810 	.word	0x08018810

0800eab0 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	0000      	movs	r0, r0
	...

0800eac8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800eac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eacc:	ed2d 8b02 	vpush	{d8}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int i=0,k=0,z=0;
  if(htim == &htim1){
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4ab1      	ldr	r2, [pc, #708]	; (800eda0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	f040 8530 	bne.w	800f540 <HAL_TIM_PeriodElapsedCallback+0xa78>
	  elapsed_time += T1;
 800eae0:	4bb0      	ldr	r3, [pc, #704]	; (800eda4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800eae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eae6:	a3aa      	add	r3, pc, #680	; (adr r3, 800ed90 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800eae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaec:	f7f9 fb06 	bl	80080fc <__adddf3>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4aab      	ldr	r2, [pc, #684]	; (800eda4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800eaf6:	e9c2 3400 	strd	r3, r4, [r2]
	  switch(mode.interrupt){
 800eafa:	4bab      	ldr	r3, [pc, #684]	; (800eda8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800eafc:	7a1b      	ldrb	r3, [r3, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d004      	beq.n	800eb0c <HAL_TIM_PeriodElapsedCallback+0x44>
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	f000 848a 	beq.w	800f41c <HAL_TIM_PeriodElapsedCallback+0x954>
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800eb08:	f000 bd1b 	b.w	800f542 <HAL_TIM_PeriodElapsedCallback+0xa7a>
	  Tim_Count();
 800eb0c:	f7fa ffe4 	bl	8009ad8 <Tim_Count>
      	EN3_L.count = TIM3 -> CNT;
 800eb10:	4ba6      	ldr	r3, [pc, #664]	; (800edac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800eb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb14:	461a      	mov	r2, r3
 800eb16:	4ba6      	ldr	r3, [pc, #664]	; (800edb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800eb18:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800eb1a:	4ba6      	ldr	r3, [pc, #664]	; (800edb4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1e:	461a      	mov	r2, r3
 800eb20:	4ba5      	ldr	r3, [pc, #660]	; (800edb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800eb22:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800eb24:	4ba2      	ldr	r3, [pc, #648]	; (800edb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800eb2c:	332f      	adds	r3, #47	; 0x2f
 800eb2e:	4aa0      	ldr	r2, [pc, #640]	; (800edb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800eb30:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800eb32:	4ba1      	ldr	r3, [pc, #644]	; (800edb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800eb3a:	332f      	adds	r3, #47	; 0x2f
 800eb3c:	4a9e      	ldr	r2, [pc, #632]	; (800edb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800eb3e:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800eb40:	4b99      	ldr	r3, [pc, #612]	; (800eda8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800eb42:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800eb46:	b21b      	sxth	r3, r3
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fb ffad 	bl	800aaa8 <Encoder_Count>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	b25a      	sxtb	r2, r3
 800eb52:	4b95      	ldr	r3, [pc, #596]	; (800eda8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800eb54:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800eb56:	4b98      	ldr	r3, [pc, #608]	; (800edb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	4b95      	ldr	r3, [pc, #596]	; (800edb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	441a      	add	r2, r3
 800eb60:	4b96      	ldr	r3, [pc, #600]	; (800edbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4413      	add	r3, r2
 800eb66:	4a95      	ldr	r2, [pc, #596]	; (800edbc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800eb68:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800eb6a:	f7fb ff89 	bl	800aa80 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800eb6e:	4b90      	ldr	r3, [pc, #576]	; (800edb0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	ee07 3a90 	vmov	s15, r3
 800eb76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb7a:	eddf 0a91 	vldr	s1, [pc, #580]	; 800edc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 800eb7e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb82:	f7fb ff55 	bl	800aa30 <Velocity_Get>
 800eb86:	eef0 7a40 	vmov.f32	s15, s0
 800eb8a:	4b8e      	ldr	r3, [pc, #568]	; (800edc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800eb8c:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800eb90:	4b89      	ldr	r3, [pc, #548]	; (800edb8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	ee07 3a90 	vmov	s15, r3
 800eb98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb9c:	eddf 0a88 	vldr	s1, [pc, #544]	; 800edc0 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 800eba0:	eeb0 0a67 	vmov.f32	s0, s15
 800eba4:	f7fb ff44 	bl	800aa30 <Velocity_Get>
 800eba8:	eef0 7a40 	vmov.f32	s15, s0
 800ebac:	4b86      	ldr	r3, [pc, #536]	; (800edc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ebae:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800ebb2:	4b84      	ldr	r3, [pc, #528]	; (800edc4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800ebb4:	ed93 7a00 	vldr	s14, [r3]
 800ebb8:	4b83      	ldr	r3, [pc, #524]	; (800edc8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ebba:	edd3 7a00 	vldr	s15, [r3]
 800ebbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ebc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebca:	4b80      	ldr	r3, [pc, #512]	; (800edcc <HAL_TIM_PeriodElapsedCallback+0x304>)
 800ebcc:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800ebd0:	f7fb fa96 	bl	800a100 <IMU_Get_Data>
 800ebd4:	eeb0 7a40 	vmov.f32	s14, s0
 800ebd8:	eef0 7a60 	vmov.f32	s15, s1
 800ebdc:	4b7c      	ldr	r3, [pc, #496]	; (800edd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ebde:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800ebe2:	4b71      	ldr	r3, [pc, #452]	; (800eda8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800ebe4:	795b      	ldrb	r3, [r3, #5]
 800ebe6:	2b06      	cmp	r3, #6
 800ebe8:	f200 81af 	bhi.w	800ef4a <HAL_TIM_PeriodElapsedCallback+0x482>
 800ebec:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800ebee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf2:	bf00      	nop
 800ebf4:	0800ec11 	.word	0x0800ec11
 800ebf8:	0800ec8f 	.word	0x0800ec8f
 800ebfc:	0800ed0d 	.word	0x0800ed0d
 800ec00:	0800edf1 	.word	0x0800edf1
 800ec04:	0800ee51 	.word	0x0800ee51
 800ec08:	0800eec9 	.word	0x0800eec9
 800ec0c:	0800eed5 	.word	0x0800eed5
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800ec10:	4b70      	ldr	r3, [pc, #448]	; (800edd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800ec12:	edd3 7a00 	vldr	s15, [r3]
 800ec16:	4b70      	ldr	r3, [pc, #448]	; (800edd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800ec18:	ed93 7a00 	vldr	s14, [r3]
 800ec1c:	4b6f      	ldr	r3, [pc, #444]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ec1e:	edd3 6a00 	vldr	s13, [r3]
 800ec22:	4b6e      	ldr	r3, [pc, #440]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ec24:	ed93 6a01 	vldr	s12, [r3, #4]
 800ec28:	4b6c      	ldr	r3, [pc, #432]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ec2a:	edd3 5a02 	vldr	s11, [r3, #8]
 800ec2e:	eef0 2a65 	vmov.f32	s5, s11
 800ec32:	eeb0 2a46 	vmov.f32	s4, s12
 800ec36:	eef0 1a66 	vmov.f32	s3, s13
 800ec3a:	ed9f 1a69 	vldr	s2, [pc, #420]	; 800ede0 <HAL_TIM_PeriodElapsedCallback+0x318>
 800ec3e:	eef0 0a47 	vmov.f32	s1, s14
 800ec42:	eeb0 0a67 	vmov.f32	s0, s15
 800ec46:	f7fa f8b7 	bl	8008db8 <Side_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800ec4a:	4b61      	ldr	r3, [pc, #388]	; (800edd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ec4c:	ed93 8b00 	vldr	d8, [r3]
 800ec50:	4b64      	ldr	r3, [pc, #400]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7f9 fbaf 	bl	80083b8 <__aeabi_f2d>
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	4b61      	ldr	r3, [pc, #388]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f9 fba8 	bl	80083b8 <__aeabi_f2d>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ec70:	ec43 2b14 	vmov	d4, r2, r3
 800ec74:	ec45 4b13 	vmov	d3, r4, r5
 800ec78:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ed90 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800ec7c:	eeb0 1a48 	vmov.f32	s2, s16
 800ec80:	eef0 1a68 	vmov.f32	s3, s17
 800ec84:	ed9f 0b44 	vldr	d0, [pc, #272]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ec88:	f7fb fafe 	bl	800a288 <IMU_Control>
	    	   break;
 800ec8c:	e15e      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ec8e:	4b56      	ldr	r3, [pc, #344]	; (800ede8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800ec90:	edd3 7a00 	vldr	s15, [r3]
 800ec94:	4b50      	ldr	r3, [pc, #320]	; (800edd8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800ec96:	ed93 7a00 	vldr	s14, [r3]
 800ec9a:	4b50      	ldr	r3, [pc, #320]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ec9c:	edd3 6a00 	vldr	s13, [r3]
 800eca0:	4b4e      	ldr	r3, [pc, #312]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800eca2:	ed93 6a01 	vldr	s12, [r3, #4]
 800eca6:	4b4d      	ldr	r3, [pc, #308]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800eca8:	edd3 5a02 	vldr	s11, [r3, #8]
 800ecac:	eef0 2a65 	vmov.f32	s5, s11
 800ecb0:	eeb0 2a46 	vmov.f32	s4, s12
 800ecb4:	eef0 1a66 	vmov.f32	s3, s13
 800ecb8:	ed9f 1a49 	vldr	s2, [pc, #292]	; 800ede0 <HAL_TIM_PeriodElapsedCallback+0x318>
 800ecbc:	eef0 0a47 	vmov.f32	s1, s14
 800ecc0:	eeb0 0a67 	vmov.f32	s0, s15
 800ecc4:	f7fa f940 	bl	8008f48 <Left_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800ecc8:	4b41      	ldr	r3, [pc, #260]	; (800edd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ecca:	ed93 8b00 	vldr	d8, [r3]
 800ecce:	4b45      	ldr	r3, [pc, #276]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7f9 fb70 	bl	80083b8 <__aeabi_f2d>
 800ecd8:	4604      	mov	r4, r0
 800ecda:	460d      	mov	r5, r1
 800ecdc:	4b41      	ldr	r3, [pc, #260]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7f9 fb69 	bl	80083b8 <__aeabi_f2d>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ecee:	ec43 2b14 	vmov	d4, r2, r3
 800ecf2:	ec45 4b13 	vmov	d3, r4, r5
 800ecf6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 800ed90 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800ecfa:	eeb0 1a48 	vmov.f32	s2, s16
 800ecfe:	eef0 1a68 	vmov.f32	s3, s17
 800ed02:	ed9f 0b25 	vldr	d0, [pc, #148]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ed06:	f7fb fabf 	bl	800a288 <IMU_Control>
	    	   break;
 800ed0a:	e11f      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ed0c:	4b37      	ldr	r3, [pc, #220]	; (800edec <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ed0e:	edd3 7a00 	vldr	s15, [r3]
 800ed12:	4b30      	ldr	r3, [pc, #192]	; (800edd4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800ed14:	ed93 7a00 	vldr	s14, [r3]
 800ed18:	4b30      	ldr	r3, [pc, #192]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ed1a:	edd3 6a00 	vldr	s13, [r3]
 800ed1e:	4b2f      	ldr	r3, [pc, #188]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ed20:	ed93 6a01 	vldr	s12, [r3, #4]
 800ed24:	4b2d      	ldr	r3, [pc, #180]	; (800eddc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ed26:	edd3 5a02 	vldr	s11, [r3, #8]
 800ed2a:	eef0 2a65 	vmov.f32	s5, s11
 800ed2e:	eeb0 2a46 	vmov.f32	s4, s12
 800ed32:	eef0 1a66 	vmov.f32	s3, s13
 800ed36:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800ede0 <HAL_TIM_PeriodElapsedCallback+0x318>
 800ed3a:	eef0 0a47 	vmov.f32	s1, s14
 800ed3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed42:	f7fa f9d3 	bl	80090ec <Right_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800ed46:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ed48:	ed93 8b00 	vldr	d8, [r3]
 800ed4c:	4b25      	ldr	r3, [pc, #148]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f9 fb31 	bl	80083b8 <__aeabi_f2d>
 800ed56:	4604      	mov	r4, r0
 800ed58:	460d      	mov	r5, r1
 800ed5a:	4b22      	ldr	r3, [pc, #136]	; (800ede4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f9 fb2a 	bl	80083b8 <__aeabi_f2d>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ed6c:	ec43 2b14 	vmov	d4, r2, r3
 800ed70:	ec45 4b13 	vmov	d3, r4, r5
 800ed74:	ed9f 2b06 	vldr	d2, [pc, #24]	; 800ed90 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800ed78:	eeb0 1a48 	vmov.f32	s2, s16
 800ed7c:	eef0 1a68 	vmov.f32	s3, s17
 800ed80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800ed98 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800ed84:	f7fb fa80 	bl	800a288 <IMU_Control>
	    	   break;
 800ed88:	e0e0      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
 800ed8a:	bf00      	nop
 800ed8c:	f3af 8000 	nop.w
 800ed90:	d2f1a9fc 	.word	0xd2f1a9fc
 800ed94:	3f50624d 	.word	0x3f50624d
	...
 800eda0:	2001a2a8 	.word	0x2001a2a8
 800eda4:	20000328 	.word	0x20000328
 800eda8:	20000074 	.word	0x20000074
 800edac:	40000400 	.word	0x40000400
 800edb0:	20000050 	.word	0x20000050
 800edb4:	40000800 	.word	0x40000800
 800edb8:	2000005c 	.word	0x2000005c
 800edbc:	20000334 	.word	0x20000334
 800edc0:	3a83126f 	.word	0x3a83126f
 800edc4:	2000e028 	.word	0x2000e028
 800edc8:	2000e034 	.word	0x2000e034
 800edcc:	2000e090 	.word	0x2000e090
 800edd0:	20000308 	.word	0x20000308
 800edd4:	2001a6d0 	.word	0x2001a6d0
 800edd8:	2000e04c 	.word	0x2000e04c
 800eddc:	2000002c 	.word	0x2000002c
 800ede0:	3851b717 	.word	0x3851b717
 800ede4:	20000044 	.word	0x20000044
 800ede8:	20000024 	.word	0x20000024
 800edec:	20000020 	.word	0x20000020
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800edf0:	4bc3      	ldr	r3, [pc, #780]	; (800f100 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7f9 fadf 	bl	80083b8 <__aeabi_f2d>
 800edfa:	4604      	mov	r4, r0
 800edfc:	460d      	mov	r5, r1
 800edfe:	4bc1      	ldr	r3, [pc, #772]	; (800f104 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800ee00:	ed93 8b00 	vldr	d8, [r3]
 800ee04:	4bc0      	ldr	r3, [pc, #768]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f9 fad5 	bl	80083b8 <__aeabi_f2d>
 800ee0e:	4680      	mov	r8, r0
 800ee10:	4689      	mov	r9, r1
 800ee12:	4bbd      	ldr	r3, [pc, #756]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7f9 face 	bl	80083b8 <__aeabi_f2d>
 800ee1c:	4682      	mov	sl, r0
 800ee1e:	468b      	mov	fp, r1
 800ee20:	4bb9      	ldr	r3, [pc, #740]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f9 fac7 	bl	80083b8 <__aeabi_f2d>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	ec43 2b15 	vmov	d5, r2, r3
 800ee32:	ec4b ab14 	vmov	d4, sl, fp
 800ee36:	ec49 8b13 	vmov	d3, r8, r9
 800ee3a:	ed9f 2bab 	vldr	d2, [pc, #684]	; 800f0e8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800ee3e:	eeb0 1a48 	vmov.f32	s2, s16
 800ee42:	eef0 1a68 	vmov.f32	s3, s17
 800ee46:	ec45 4b10 	vmov	d0, r4, r5
 800ee4a:	f7fb fa1d 	bl	800a288 <IMU_Control>
	    	   break;
 800ee4e:	e07d      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ee50:	4bae      	ldr	r3, [pc, #696]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ee52:	edd3 7a00 	vldr	s15, [r3]
 800ee56:	4bad      	ldr	r3, [pc, #692]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ee58:	ed93 7a01 	vldr	s14, [r3, #4]
 800ee5c:	4bab      	ldr	r3, [pc, #684]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ee5e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ee62:	eef0 1a66 	vmov.f32	s3, s13
 800ee66:	eeb0 1a47 	vmov.f32	s2, s14
 800ee6a:	eef0 0a67 	vmov.f32	s1, s15
 800ee6e:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800f110 <HAL_TIM_PeriodElapsedCallback+0x648>
 800ee72:	f7fa fbe7 	bl	8009644 <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800ee76:	4ba3      	ldr	r3, [pc, #652]	; (800f104 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800ee78:	ed93 8b00 	vldr	d8, [r3]
 800ee7c:	4ba2      	ldr	r3, [pc, #648]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7f9 fa99 	bl	80083b8 <__aeabi_f2d>
 800ee86:	4604      	mov	r4, r0
 800ee88:	460d      	mov	r5, r1
 800ee8a:	4b9f      	ldr	r3, [pc, #636]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7f9 fa92 	bl	80083b8 <__aeabi_f2d>
 800ee94:	4680      	mov	r8, r0
 800ee96:	4689      	mov	r9, r1
 800ee98:	4b9b      	ldr	r3, [pc, #620]	; (800f108 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f9 fa8b 	bl	80083b8 <__aeabi_f2d>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	ec43 2b15 	vmov	d5, r2, r3
 800eeaa:	ec49 8b14 	vmov	d4, r8, r9
 800eeae:	ec45 4b13 	vmov	d3, r4, r5
 800eeb2:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 800f0e8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800eeb6:	eeb0 1a48 	vmov.f32	s2, s16
 800eeba:	eef0 1a68 	vmov.f32	s3, s17
 800eebe:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 800f0f0 <HAL_TIM_PeriodElapsedCallback+0x628>
 800eec2:	f7fb f9e1 	bl	800a288 <IMU_Control>
	    	   break;
 800eec6:	e041      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   mode.imu = 0;
 800eec8:	4a92      	ldr	r2, [pc, #584]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800eeca:	7993      	ldrb	r3, [r2, #6]
 800eecc:	f36f 0300 	bfc	r3, #0, #1
 800eed0:	7193      	strb	r3, [r2, #6]
	    	   break;
 800eed2:	e03b      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800eed4:	4b90      	ldr	r3, [pc, #576]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800eed6:	edd3 7a00 	vldr	s15, [r3]
 800eeda:	4b90      	ldr	r3, [pc, #576]	; (800f11c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800eedc:	ed93 7a00 	vldr	s14, [r3]
 800eee0:	4b8a      	ldr	r3, [pc, #552]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800eee2:	edd3 6a00 	vldr	s13, [r3]
 800eee6:	4b89      	ldr	r3, [pc, #548]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800eee8:	ed93 6a01 	vldr	s12, [r3, #4]
 800eeec:	4b87      	ldr	r3, [pc, #540]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800eeee:	edd3 5a02 	vldr	s11, [r3, #8]
 800eef2:	eef0 2a65 	vmov.f32	s5, s11
 800eef6:	eeb0 2a46 	vmov.f32	s4, s12
 800eefa:	eef0 1a66 	vmov.f32	s3, s13
 800eefe:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800f110 <HAL_TIM_PeriodElapsedCallback+0x648>
 800ef02:	eef0 0a47 	vmov.f32	s1, s14
 800ef06:	eeb0 0a67 	vmov.f32	s0, s15
 800ef0a:	f7fa fa7f 	bl	800940c <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800ef0e:	4b84      	ldr	r3, [pc, #528]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800ef10:	edd3 7a00 	vldr	s15, [r3]
 800ef14:	4b83      	ldr	r3, [pc, #524]	; (800f124 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800ef16:	ed93 7a00 	vldr	s14, [r3]
 800ef1a:	4b7c      	ldr	r3, [pc, #496]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ef1c:	edd3 6a00 	vldr	s13, [r3]
 800ef20:	4b7a      	ldr	r3, [pc, #488]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ef22:	ed93 6a01 	vldr	s12, [r3, #4]
 800ef26:	4b79      	ldr	r3, [pc, #484]	; (800f10c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800ef28:	edd3 5a02 	vldr	s11, [r3, #8]
 800ef2c:	eef0 2a65 	vmov.f32	s5, s11
 800ef30:	eeb0 2a46 	vmov.f32	s4, s12
 800ef34:	eef0 1a66 	vmov.f32	s3, s13
 800ef38:	ed9f 1a75 	vldr	s2, [pc, #468]	; 800f110 <HAL_TIM_PeriodElapsedCallback+0x648>
 800ef3c:	eef0 0a47 	vmov.f32	s1, s14
 800ef40:	eeb0 0a67 	vmov.f32	s0, s15
 800ef44:	f7fa faf0 	bl	8009528 <Left_Velo_Control>
	    	   break;
 800ef48:	e000      	b.n	800ef4c <HAL_TIM_PeriodElapsedCallback+0x484>
	    	   break;
 800ef4a:	bf00      	nop
	    if( mode.accel == 1 ){
 800ef4c:	4b71      	ldr	r3, [pc, #452]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800ef4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d116      	bne.n	800ef84 <HAL_TIM_PeriodElapsedCallback+0x4bc>
		  if(Target_velocity < SEARCH_SPEED){
 800ef56:	4b74      	ldr	r3, [pc, #464]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800ef58:	edd3 7a00 	vldr	s15, [r3]
 800ef5c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f12c <HAL_TIM_PeriodElapsedCallback+0x664>
 800ef60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	f140 810d 	bpl.w	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
			Target_velocity += a_start;
 800ef6c:	4b6e      	ldr	r3, [pc, #440]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800ef6e:	ed93 7a00 	vldr	s14, [r3]
 800ef72:	4b6f      	ldr	r3, [pc, #444]	; (800f130 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800ef74:	edd3 7a00 	vldr	s15, [r3]
 800ef78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef7c:	4b6a      	ldr	r3, [pc, #424]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800ef7e:	edc3 7a00 	vstr	s15, [r3]
 800ef82:	e100      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    else if( mode.accel == 2 ){
 800ef84:	4b63      	ldr	r3, [pc, #396]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800ef86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d116      	bne.n	800efbc <HAL_TIM_PeriodElapsedCallback+0x4f4>
		  if(Target_velocity < SEARCH_SPEED){
 800ef8e:	4b66      	ldr	r3, [pc, #408]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800ef90:	edd3 7a00 	vldr	s15, [r3]
 800ef94:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f12c <HAL_TIM_PeriodElapsedCallback+0x664>
 800ef98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	f140 80f1 	bpl.w	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
			Target_velocity += a;
 800efa4:	4b60      	ldr	r3, [pc, #384]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800efa6:	ed93 7a00 	vldr	s14, [r3]
 800efaa:	4b62      	ldr	r3, [pc, #392]	; (800f134 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800efac:	edd3 7a00 	vldr	s15, [r3]
 800efb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efb4:	4b5c      	ldr	r3, [pc, #368]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800efb6:	edc3 7a00 	vstr	s15, [r3]
 800efba:	e0e4      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    else if( mode.accel == 3 ){
 800efbc:	4b55      	ldr	r3, [pc, #340]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800efbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d116      	bne.n	800eff4 <HAL_TIM_PeriodElapsedCallback+0x52c>
		  if(Target_velocity > 5){
 800efc6:	4b58      	ldr	r3, [pc, #352]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800efc8:	edd3 7a00 	vldr	s15, [r3]
 800efcc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800efd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd8:	f340 80d5 	ble.w	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
			Target_velocity -= a;
 800efdc:	4b52      	ldr	r3, [pc, #328]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800efde:	ed93 7a00 	vldr	s14, [r3]
 800efe2:	4b54      	ldr	r3, [pc, #336]	; (800f134 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800efe4:	edd3 7a00 	vldr	s15, [r3]
 800efe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efec:	4b4e      	ldr	r3, [pc, #312]	; (800f128 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800efee:	edc3 7a00 	vstr	s15, [r3]
 800eff2:	e0c8      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800eff4:	4b47      	ldr	r3, [pc, #284]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800eff6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800effa:	2b04      	cmp	r3, #4
 800effc:	d124      	bne.n	800f048 <HAL_TIM_PeriodElapsedCallback+0x580>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800effe:	4b46      	ldr	r3, [pc, #280]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4618      	mov	r0, r3
 800f004:	f7f9 f9d8 	bl	80083b8 <__aeabi_f2d>
 800f008:	a33b      	add	r3, pc, #236	; (adr r3, 800f0f8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	f7f9 fc9d 	bl	800894c <__aeabi_dcmplt>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	f000 80b6 	beq.w	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    	Target_R_velo += a_curve;
 800f01a:	4b3f      	ldr	r3, [pc, #252]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f01c:	ed93 7a00 	vldr	s14, [r3]
 800f020:	4b45      	ldr	r3, [pc, #276]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f022:	edd3 7a00 	vldr	s15, [r3]
 800f026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f02a:	4b3b      	ldr	r3, [pc, #236]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f02c:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f030:	4b3b      	ldr	r3, [pc, #236]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f032:	ed93 7a00 	vldr	s14, [r3]
 800f036:	4b40      	ldr	r3, [pc, #256]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f038:	edd3 7a00 	vldr	s15, [r3]
 800f03c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f040:	4b37      	ldr	r3, [pc, #220]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f042:	edc3 7a00 	vstr	s15, [r3]
 800f046:	e09e      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800f048:	4b32      	ldr	r3, [pc, #200]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f04a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f04e:	2b05      	cmp	r3, #5
 800f050:	d121      	bne.n	800f096 <HAL_TIM_PeriodElapsedCallback+0x5ce>
		      if(Target_R_velo > SEARCH_SPEED){
 800f052:	4b31      	ldr	r3, [pc, #196]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f054:	edd3 7a00 	vldr	s15, [r3]
 800f058:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f12c <HAL_TIM_PeriodElapsedCallback+0x664>
 800f05c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f064:	f340 808f 	ble.w	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
		    	Target_R_velo -= a_curve;
 800f068:	4b2b      	ldr	r3, [pc, #172]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f06a:	ed93 7a00 	vldr	s14, [r3]
 800f06e:	4b32      	ldr	r3, [pc, #200]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f070:	edd3 7a00 	vldr	s15, [r3]
 800f074:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f078:	4b27      	ldr	r3, [pc, #156]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f07a:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800f07e:	4b28      	ldr	r3, [pc, #160]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f080:	ed93 7a00 	vldr	s14, [r3]
 800f084:	4b2c      	ldr	r3, [pc, #176]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f086:	edd3 7a00 	vldr	s15, [r3]
 800f08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f08e:	4b24      	ldr	r3, [pc, #144]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f090:	edc3 7a00 	vstr	s15, [r3]
 800f094:	e077      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800f096:	4b1f      	ldr	r3, [pc, #124]	; (800f114 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f098:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f09c:	2b06      	cmp	r3, #6
 800f09e:	d14d      	bne.n	800f13c <HAL_TIM_PeriodElapsedCallback+0x674>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800f0a0:	4b1f      	ldr	r3, [pc, #124]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f9 f987 	bl	80083b8 <__aeabi_f2d>
 800f0aa:	a313      	add	r3, pc, #76	; (adr r3, 800f0f8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	f7f9 fc4c 	bl	800894c <__aeabi_dcmplt>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d065      	beq.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    	Target_R_velo -= a_curve;
 800f0ba:	4b17      	ldr	r3, [pc, #92]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f0bc:	ed93 7a00 	vldr	s14, [r3]
 800f0c0:	4b1d      	ldr	r3, [pc, #116]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f0c2:	edd3 7a00 	vldr	s15, [r3]
 800f0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ca:	4b13      	ldr	r3, [pc, #76]	; (800f118 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800f0cc:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800f0d0:	4b13      	ldr	r3, [pc, #76]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f0d2:	ed93 7a00 	vldr	s14, [r3]
 800f0d6:	4b18      	ldr	r3, [pc, #96]	; (800f138 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800f0d8:	edd3 7a00 	vldr	s15, [r3]
 800f0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0e0:	4b0f      	ldr	r3, [pc, #60]	; (800f120 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f0e2:	edc3 7a00 	vstr	s15, [r3]
 800f0e6:	e04e      	b.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
 800f0e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f0ec:	3f50624d 	.word	0x3f50624d
	...
 800f0f8:	cccccccd 	.word	0xcccccccd
 800f0fc:	40775ccc 	.word	0x40775ccc
 800f100:	200002f4 	.word	0x200002f4
 800f104:	20000308 	.word	0x20000308
 800f108:	20000044 	.word	0x20000044
 800f10c:	20000038 	.word	0x20000038
 800f110:	3a83126f 	.word	0x3a83126f
 800f114:	20000074 	.word	0x20000074
 800f118:	2000e010 	.word	0x2000e010
 800f11c:	2000e034 	.word	0x2000e034
 800f120:	2000e030 	.word	0x2000e030
 800f124:	2000e028 	.word	0x2000e028
 800f128:	200002f0 	.word	0x200002f0
 800f12c:	43870000 	.word	0x43870000
 800f130:	20000008 	.word	0x20000008
 800f134:	2000000c 	.word	0x2000000c
 800f138:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800f13c:	4b90      	ldr	r3, [pc, #576]	; (800f380 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800f13e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f142:	2b07      	cmp	r3, #7
 800f144:	d11f      	bne.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	      if(Target_L_velo > SEARCH_SPEED){
 800f146:	4b8f      	ldr	r3, [pc, #572]	; (800f384 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800f148:	edd3 7a00 	vldr	s15, [r3]
 800f14c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800f388 <HAL_TIM_PeriodElapsedCallback+0x8c0>
 800f150:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f158:	dd15      	ble.n	800f186 <HAL_TIM_PeriodElapsedCallback+0x6be>
	    	Target_R_velo += a_curve;
 800f15a:	4b8c      	ldr	r3, [pc, #560]	; (800f38c <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 800f15c:	ed93 7a00 	vldr	s14, [r3]
 800f160:	4b8b      	ldr	r3, [pc, #556]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800f162:	edd3 7a00 	vldr	s15, [r3]
 800f166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f16a:	4b88      	ldr	r3, [pc, #544]	; (800f38c <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 800f16c:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f170:	4b84      	ldr	r3, [pc, #528]	; (800f384 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800f172:	ed93 7a00 	vldr	s14, [r3]
 800f176:	4b86      	ldr	r3, [pc, #536]	; (800f390 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800f178:	edd3 7a00 	vldr	s15, [r3]
 800f17c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f180:	4b80      	ldr	r3, [pc, #512]	; (800f384 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800f182:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800f186:	4b83      	ldr	r3, [pc, #524]	; (800f394 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800f188:	edd3 7a00 	vldr	s15, [r3]
 800f18c:	4b82      	ldr	r3, [pc, #520]	; (800f398 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800f18e:	ed93 7a00 	vldr	s14, [r3]
 800f192:	4b82      	ldr	r3, [pc, #520]	; (800f39c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800f194:	edd3 6a00 	vldr	s13, [r3]
 800f198:	4b80      	ldr	r3, [pc, #512]	; (800f39c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800f19a:	ed93 6a01 	vldr	s12, [r3, #4]
 800f19e:	4b7f      	ldr	r3, [pc, #508]	; (800f39c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800f1a0:	edd3 5a02 	vldr	s11, [r3, #8]
 800f1a4:	eef0 2a65 	vmov.f32	s5, s11
 800f1a8:	eeb0 2a46 	vmov.f32	s4, s12
 800f1ac:	eef0 1a66 	vmov.f32	s3, s13
 800f1b0:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 800f3a0 <HAL_TIM_PeriodElapsedCallback+0x8d8>
 800f1b4:	eef0 0a47 	vmov.f32	s1, s14
 800f1b8:	eeb0 0a67 	vmov.f32	s0, s15
 800f1bc:	f7fa f868 	bl	8009290 <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800f1c0:	4b78      	ldr	r3, [pc, #480]	; (800f3a4 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800f1c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	4b77      	ldr	r3, [pc, #476]	; (800f3a8 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800f1ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	4413      	add	r3, r2
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	4b75      	ldr	r3, [pc, #468]	; (800f3ac <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800f1d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	4413      	add	r3, r2
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	4b73      	ldr	r3, [pc, #460]	; (800f3b0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800f1e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	4b71      	ldr	r3, [pc, #452]	; (800f3b4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800f1ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4413      	add	r3, r2
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	4b6f      	ldr	r3, [pc, #444]	; (800f3b8 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800f1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	4413      	add	r3, r2
 800f202:	b29a      	uxth	r2, r3
 800f204:	4b6d      	ldr	r3, [pc, #436]	; (800f3bc <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800f206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	4413      	add	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b6b      	ldr	r3, [pc, #428]	; (800f3c0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f212:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f216:	b29b      	uxth	r3, r3
 800f218:	4413      	add	r3, r2
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	b21a      	sxth	r2, r3
 800f21e:	4b69      	ldr	r3, [pc, #420]	; (800f3c4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f220:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800f222:	4b69      	ldr	r3, [pc, #420]	; (800f3c8 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800f224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f228:	b29a      	uxth	r2, r3
 800f22a:	4b68      	ldr	r3, [pc, #416]	; (800f3cc <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f22c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f230:	b29b      	uxth	r3, r3
 800f232:	4413      	add	r3, r2
 800f234:	b29a      	uxth	r2, r3
 800f236:	4b66      	ldr	r3, [pc, #408]	; (800f3d0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4413      	add	r3, r2
 800f240:	b29a      	uxth	r2, r3
 800f242:	4b64      	ldr	r3, [pc, #400]	; (800f3d4 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800f244:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f248:	b29b      	uxth	r3, r3
 800f24a:	4413      	add	r3, r2
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	4b62      	ldr	r3, [pc, #392]	; (800f3d8 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800f250:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f254:	b29b      	uxth	r3, r3
 800f256:	4413      	add	r3, r2
 800f258:	b29a      	uxth	r2, r3
 800f25a:	4b60      	ldr	r3, [pc, #384]	; (800f3dc <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f25c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f260:	b29b      	uxth	r3, r3
 800f262:	4413      	add	r3, r2
 800f264:	b29a      	uxth	r2, r3
 800f266:	4b5e      	ldr	r3, [pc, #376]	; (800f3e0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800f268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	4413      	add	r3, r2
 800f270:	b29a      	uxth	r2, r3
 800f272:	4b5c      	ldr	r3, [pc, #368]	; (800f3e4 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800f274:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	4413      	add	r3, r2
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	b21a      	sxth	r2, r3
 800f280:	4b59      	ldr	r3, [pc, #356]	; (800f3e8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f282:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800f284:	4b59      	ldr	r3, [pc, #356]	; (800f3ec <HAL_TIM_PeriodElapsedCallback+0x924>)
 800f286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f28a:	f04f 0200 	mov.w	r2, #0
 800f28e:	4b58      	ldr	r3, [pc, #352]	; (800f3f0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800f290:	f7f9 fb66 	bl	8008960 <__aeabi_dcmple>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d018      	beq.n	800f2cc <HAL_TIM_PeriodElapsedCallback+0x804>
			if((int)timer % 5== 0){
 800f29a:	4b54      	ldr	r3, [pc, #336]	; (800f3ec <HAL_TIM_PeriodElapsedCallback+0x924>)
 800f29c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f7f9 fb90 	bl	80089c8 <__aeabi_d2iz>
 800f2a8:	4601      	mov	r1, r0
 800f2aa:	4b52      	ldr	r3, [pc, #328]	; (800f3f4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f2ac:	fb83 2301 	smull	r2, r3, r3, r1
 800f2b0:	105a      	asrs	r2, r3, #1
 800f2b2:	17cb      	asrs	r3, r1, #31
 800f2b4:	1ad2      	subs	r2, r2, r3
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	4413      	add	r3, r2
 800f2bc:	1aca      	subs	r2, r1, r3
 800f2be:	2a00      	cmp	r2, #0
 800f2c0:	d104      	bne.n	800f2cc <HAL_TIM_PeriodElapsedCallback+0x804>
		     k++;
 800f2c2:	4b4d      	ldr	r3, [pc, #308]	; (800f3f8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	4a4b      	ldr	r2, [pc, #300]	; (800f3f8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800f2ca:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800f2cc:	4b3d      	ldr	r3, [pc, #244]	; (800f3c4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f2ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f2d2:	4b45      	ldr	r3, [pc, #276]	; (800f3e8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fb fa2a 	bl	800a734 <Motor_Switch>
		if(i%100==0 && i < 100000){
 800f2e0:	4b46      	ldr	r3, [pc, #280]	; (800f3fc <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	4b46      	ldr	r3, [pc, #280]	; (800f400 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800f2e6:	fb83 1302 	smull	r1, r3, r3, r2
 800f2ea:	1159      	asrs	r1, r3, #5
 800f2ec:	17d3      	asrs	r3, r2, #31
 800f2ee:	1acb      	subs	r3, r1, r3
 800f2f0:	2164      	movs	r1, #100	; 0x64
 800f2f2:	fb01 f303 	mul.w	r3, r1, r3
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d13b      	bne.n	800f374 <HAL_TIM_PeriodElapsedCallback+0x8ac>
 800f2fc:	4b3f      	ldr	r3, [pc, #252]	; (800f3fc <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a40      	ldr	r2, [pc, #256]	; (800f404 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f302:	4293      	cmp	r3, r2
 800f304:	dc36      	bgt.n	800f374 <HAL_TIM_PeriodElapsedCallback+0x8ac>
			data_log[z] = L_velocity;
 800f306:	4b40      	ldr	r3, [pc, #256]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a40      	ldr	r2, [pc, #256]	; (800f40c <HAL_TIM_PeriodElapsedCallback+0x944>)
 800f30c:	6812      	ldr	r2, [r2, #0]
 800f30e:	4940      	ldr	r1, [pc, #256]	; (800f410 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	440b      	add	r3, r1
 800f314:	601a      	str	r2, [r3, #0]
			data_log[z+1] = R_velocity;
 800f316:	4b3c      	ldr	r3, [pc, #240]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3301      	adds	r3, #1
 800f31c:	4a3d      	ldr	r2, [pc, #244]	; (800f414 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800f31e:	6812      	ldr	r2, [r2, #0]
 800f320:	493b      	ldr	r1, [pc, #236]	; (800f410 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	440b      	add	r3, r1
 800f326:	601a      	str	r2, [r3, #0]
			data_log[z+2] = (float)imu_data;
 800f328:	4b3b      	ldr	r3, [pc, #236]	; (800f418 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800f32a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f32e:	4a36      	ldr	r2, [pc, #216]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f330:	6812      	ldr	r2, [r2, #0]
 800f332:	1c95      	adds	r5, r2, #2
 800f334:	4618      	mov	r0, r3
 800f336:	4621      	mov	r1, r4
 800f338:	f7f9 fb6e 	bl	8008a18 <__aeabi_d2f>
 800f33c:	4601      	mov	r1, r0
 800f33e:	4a34      	ldr	r2, [pc, #208]	; (800f410 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f340:	00ab      	lsls	r3, r5, #2
 800f342:	4413      	add	r3, r2
 800f344:	6019      	str	r1, [r3, #0]
			data_log[z+3] = Body_velocity;
 800f346:	4b30      	ldr	r3, [pc, #192]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	3303      	adds	r3, #3
 800f34c:	4a12      	ldr	r2, [pc, #72]	; (800f398 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800f34e:	6812      	ldr	r2, [r2, #0]
 800f350:	492f      	ldr	r1, [pc, #188]	; (800f410 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	440b      	add	r3, r1
 800f356:	601a      	str	r2, [r3, #0]
			data_log[z+4] = Target_velocity;
 800f358:	4b2b      	ldr	r3, [pc, #172]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3304      	adds	r3, #4
 800f35e:	4a0d      	ldr	r2, [pc, #52]	; (800f394 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800f360:	6812      	ldr	r2, [r2, #0]
 800f362:	492b      	ldr	r1, [pc, #172]	; (800f410 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	440b      	add	r3, r1
 800f368:	601a      	str	r2, [r3, #0]
			z+=5;
 800f36a:	4b27      	ldr	r3, [pc, #156]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3305      	adds	r3, #5
 800f370:	4a25      	ldr	r2, [pc, #148]	; (800f408 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f372:	6013      	str	r3, [r2, #0]
		i++;
 800f374:	4b21      	ldr	r3, [pc, #132]	; (800f3fc <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3301      	adds	r3, #1
 800f37a:	4a20      	ldr	r2, [pc, #128]	; (800f3fc <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f37c:	6013      	str	r3, [r2, #0]
		break;
 800f37e:	e0e0      	b.n	800f542 <HAL_TIM_PeriodElapsedCallback+0xa7a>
 800f380:	20000074 	.word	0x20000074
 800f384:	2000e030 	.word	0x2000e030
 800f388:	43870000 	.word	0x43870000
 800f38c:	2000e010 	.word	0x2000e010
 800f390:	20000010 	.word	0x20000010
 800f394:	200002f0 	.word	0x200002f0
 800f398:	2000e090 	.word	0x2000e090
 800f39c:	20000038 	.word	0x20000038
 800f3a0:	3a83126f 	.word	0x3a83126f
 800f3a4:	2000e014 	.word	0x2000e014
 800f3a8:	2000e02c 	.word	0x2000e02c
 800f3ac:	2000e016 	.word	0x2000e016
 800f3b0:	2000e008 	.word	0x2000e008
 800f3b4:	2000e024 	.word	0x2000e024
 800f3b8:	2000e01e 	.word	0x2000e01e
 800f3bc:	2000e00a 	.word	0x2000e00a
 800f3c0:	2000e02e 	.word	0x2000e02e
 800f3c4:	2001a734 	.word	0x2001a734
 800f3c8:	2000e01c 	.word	0x2000e01c
 800f3cc:	2000e01a 	.word	0x2000e01a
 800f3d0:	2000e038 	.word	0x2000e038
 800f3d4:	2000e020 	.word	0x2000e020
 800f3d8:	2000e026 	.word	0x2000e026
 800f3dc:	2000e022 	.word	0x2000e022
 800f3e0:	2000e018 	.word	0x2000e018
 800f3e4:	2000e00c 	.word	0x2000e00c
 800f3e8:	20019ca4 	.word	0x20019ca4
 800f3ec:	20000320 	.word	0x20000320
 800f3f0:	409f4000 	.word	0x409f4000
 800f3f4:	66666667 	.word	0x66666667
 800f3f8:	2000dff0 	.word	0x2000dff0
 800f3fc:	2000dff4 	.word	0x2000dff4
 800f400:	51eb851f 	.word	0x51eb851f
 800f404:	0001869f 	.word	0x0001869f
 800f408:	2000dff8 	.word	0x2000dff8
 800f40c:	2000e028 	.word	0x2000e028
 800f410:	20000338 	.word	0x20000338
 800f414:	2000e034 	.word	0x2000e034
 800f418:	20000308 	.word	0x20000308
			Tim_Count();
 800f41c:	f7fa fb5c 	bl	8009ad8 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800f420:	4b51      	ldr	r3, [pc, #324]	; (800f568 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 800f422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f424:	461a      	mov	r2, r3
 800f426:	4b51      	ldr	r3, [pc, #324]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f428:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800f42a:	4b51      	ldr	r3, [pc, #324]	; (800f570 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 800f42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42e:	461a      	mov	r2, r3
 800f430:	4b50      	ldr	r3, [pc, #320]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f432:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800f434:	4b4d      	ldr	r3, [pc, #308]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f43c:	332f      	adds	r3, #47	; 0x2f
 800f43e:	4a4b      	ldr	r2, [pc, #300]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f440:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800f442:	4b4c      	ldr	r3, [pc, #304]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f44a:	332f      	adds	r3, #47	; 0x2f
 800f44c:	4a49      	ldr	r2, [pc, #292]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f44e:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800f450:	4b49      	ldr	r3, [pc, #292]	; (800f578 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 800f452:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f456:	b21b      	sxth	r3, r3
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fb fb25 	bl	800aaa8 <Encoder_Count>
 800f45e:	4603      	mov	r3, r0
 800f460:	b25a      	sxtb	r2, r3
 800f462:	4b45      	ldr	r3, [pc, #276]	; (800f578 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 800f464:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800f466:	4b43      	ldr	r3, [pc, #268]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	4b40      	ldr	r3, [pc, #256]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	441a      	add	r2, r3
 800f470:	4b42      	ldr	r3, [pc, #264]	; (800f57c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4413      	add	r3, r2
 800f476:	4a41      	ldr	r2, [pc, #260]	; (800f57c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 800f478:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800f47a:	f7fb fb01 	bl	800aa80 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800f47e:	4b3b      	ldr	r3, [pc, #236]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	ee07 3a90 	vmov	s15, r3
 800f486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f48a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800f580 <HAL_TIM_PeriodElapsedCallback+0xab8>
 800f48e:	eeb0 0a67 	vmov.f32	s0, s15
 800f492:	f7fb facd 	bl	800aa30 <Velocity_Get>
 800f496:	eef0 7a40 	vmov.f32	s15, s0
 800f49a:	4b3a      	ldr	r3, [pc, #232]	; (800f584 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 800f49c:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800f4a0:	4b34      	ldr	r3, [pc, #208]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	ee07 3a90 	vmov	s15, r3
 800f4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4ac:	eddf 0a34 	vldr	s1, [pc, #208]	; 800f580 <HAL_TIM_PeriodElapsedCallback+0xab8>
 800f4b0:	eeb0 0a67 	vmov.f32	s0, s15
 800f4b4:	f7fb fabc 	bl	800aa30 <Velocity_Get>
 800f4b8:	eef0 7a40 	vmov.f32	s15, s0
 800f4bc:	4b32      	ldr	r3, [pc, #200]	; (800f588 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 800f4be:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800f4c2:	f7fa fe1d 	bl	800a100 <IMU_Get_Data>
 800f4c6:	eeb0 7a40 	vmov.f32	s14, s0
 800f4ca:	eef0 7a60 	vmov.f32	s15, s1
 800f4ce:	4b2f      	ldr	r3, [pc, #188]	; (800f58c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800f4d0:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800f4d4:	4b2e      	ldr	r3, [pc, #184]	; (800f590 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800f4d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4da:	a321      	add	r3, pc, #132	; (adr r3, 800f560 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	f7f9 fa3e 	bl	8008960 <__aeabi_dcmple>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01f      	beq.n	800f52a <HAL_TIM_PeriodElapsedCallback+0xa62>
				if((int)timer % 60 == 0){
 800f4ea:	4b29      	ldr	r3, [pc, #164]	; (800f590 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800f4ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	f7f9 fa68 	bl	80089c8 <__aeabi_d2iz>
 800f4f8:	4601      	mov	r1, r0
 800f4fa:	4b26      	ldr	r3, [pc, #152]	; (800f594 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 800f4fc:	fb83 2301 	smull	r2, r3, r3, r1
 800f500:	440b      	add	r3, r1
 800f502:	115a      	asrs	r2, r3, #5
 800f504:	17cb      	asrs	r3, r1, #31
 800f506:	1ad2      	subs	r2, r2, r3
 800f508:	4613      	mov	r3, r2
 800f50a:	011b      	lsls	r3, r3, #4
 800f50c:	1a9b      	subs	r3, r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	1aca      	subs	r2, r1, r3
 800f512:	2a00      	cmp	r2, #0
 800f514:	d104      	bne.n	800f520 <HAL_TIM_PeriodElapsedCallback+0xa58>
			     k++;
 800f516:	4b20      	ldr	r3, [pc, #128]	; (800f598 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3301      	adds	r3, #1
 800f51c:	4a1e      	ldr	r2, [pc, #120]	; (800f598 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 800f51e:	6013      	str	r3, [r2, #0]
			i++;
 800f520:	4b1e      	ldr	r3, [pc, #120]	; (800f59c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3301      	adds	r3, #1
 800f526:	4a1d      	ldr	r2, [pc, #116]	; (800f59c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 800f528:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800f52a:	4b1d      	ldr	r3, [pc, #116]	; (800f5a0 <HAL_TIM_PeriodElapsedCallback+0xad8>)
 800f52c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f530:	4b1c      	ldr	r3, [pc, #112]	; (800f5a4 <HAL_TIM_PeriodElapsedCallback+0xadc>)
 800f532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f536:	4619      	mov	r1, r3
 800f538:	4610      	mov	r0, r2
 800f53a:	f7fb f8fb 	bl	800a734 <Motor_Switch>
			break;
 800f53e:	e000      	b.n	800f542 <HAL_TIM_PeriodElapsedCallback+0xa7a>
	  }

  }
 800f540:	bf00      	nop

  if(htim == &htim8){
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a18      	ldr	r2, [pc, #96]	; (800f5a8 <HAL_TIM_PeriodElapsedCallback+0xae0>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d101      	bne.n	800f54e <HAL_TIM_PeriodElapsedCallback+0xa86>


	  ADC_Get_Data();
 800f54a:	f7fb f93d 	bl	800a7c8 <ADC_Get_Data>


  }
}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	ecbd 8b02 	vpop	{d8}
 800f558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f55c:	f3af 8000 	nop.w
 800f560:	00000000 	.word	0x00000000
 800f564:	40e77000 	.word	0x40e77000
 800f568:	40000400 	.word	0x40000400
 800f56c:	20000050 	.word	0x20000050
 800f570:	40000800 	.word	0x40000800
 800f574:	2000005c 	.word	0x2000005c
 800f578:	20000074 	.word	0x20000074
 800f57c:	20000334 	.word	0x20000334
 800f580:	3a83126f 	.word	0x3a83126f
 800f584:	2000e028 	.word	0x2000e028
 800f588:	2000e034 	.word	0x2000e034
 800f58c:	20000308 	.word	0x20000308
 800f590:	20000320 	.word	0x20000320
 800f594:	88888889 	.word	0x88888889
 800f598:	2000dff0 	.word	0x2000dff0
 800f59c:	2000dff4 	.word	0x2000dff4
 800f5a0:	2001a734 	.word	0x2001a734
 800f5a4:	20019ca4 	.word	0x20019ca4
 800f5a8:	2000e050 	.word	0x2000e050

0800f5ac <Exe_num0>:


/*---- DEFINING FUNCTION ----*/

//実行時に切り替えるモード
void Exe_num0(){
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	af00      	add	r7, sp, #0
//	mode.control = 0;
//	Target_velocity=SEARCH_SPEED;
//
//	Target_Rad_velo=0;

	Adachi_search();
 800f5b0:	f7fe fcb6 	bl	800df20 <Adachi_search>

}
 800f5b4:	bf00      	nop
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <Exe_num1>:
void Exe_num1(){
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	af00      	add	r7, sp, #0
	Adachi_search2();
 800f5bc:	f7fe fdf4 	bl	800e1a8 <Adachi_search2>

}
 800f5c0:	bf00      	nop
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <Exe_num2>:
void Exe_num2(){
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
//        	  if(timer == 10)
//        		  printf("小数のほう : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほう : %lf \r\n",self_timer/1000);

	Shortest_Run();
 800f5c8:	f7ff f9ee 	bl	800e9a8 <Shortest_Run>
        	  //start_calib();

}
 800f5cc:	bf00      	nop
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <Exe_num3>:
void Exe_num3(){
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
	  //printf("helloあいうえお\r\n");


        	  Flash_load();
 800f5d4:	f7fa fc96 	bl	8009f04 <Flash_load>
          	  HAL_Delay(2000);
 800f5d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f5dc:	f001 fb5a 	bl	8010c94 <HAL_Delay>

          	  mapprint();
 800f5e0:	f7fa fbd4 	bl	8009d8c <mapprint>
          	  while(1);
 800f5e4:	e7fe      	b.n	800f5e4 <Exe_num3+0x14>

0800f5e6 <Exe_num4>:
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
void Exe_num4(){
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	af00      	add	r7, sp, #0
	Tire_Maintenance();
 800f5ea:	f7fc fd0f 	bl	800c00c <Tire_Maintenance>
//       	  mode.enc = 1;
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
 800f5ee:	bf00      	nop
 800f5f0:	bd80      	pop	{r7, pc}
	...

0800f5f4 <Exe_num5>:
void Exe_num5(){
 800f5f4:	b598      	push	{r3, r4, r7, lr}
 800f5f6:	af00      	add	r7, sp, #0
	  }
#else
	  //mode.control = 0; //0 side_wall
	  //Target_velocity = test_velo_5;
#if 1
    printf("左 : %f\r\n",fl_average);
 800f5f8:	4b1a      	ldr	r3, [pc, #104]	; (800f664 <Exe_num5+0x70>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f8 fedb 	bl	80083b8 <__aeabi_f2d>
 800f602:	4603      	mov	r3, r0
 800f604:	460c      	mov	r4, r1
 800f606:	461a      	mov	r2, r3
 800f608:	4623      	mov	r3, r4
 800f60a:	4817      	ldr	r0, [pc, #92]	; (800f668 <Exe_num5+0x74>)
 800f60c:	f007 f9cc 	bl	80169a8 <iprintf>
    printf("右 : %f\r\n",fr_average);
 800f610:	4b16      	ldr	r3, [pc, #88]	; (800f66c <Exe_num5+0x78>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f7f8 fecf 	bl	80083b8 <__aeabi_f2d>
 800f61a:	4603      	mov	r3, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	461a      	mov	r2, r3
 800f620:	4623      	mov	r3, r4
 800f622:	4813      	ldr	r0, [pc, #76]	; (800f670 <Exe_num5+0x7c>)
 800f624:	f007 f9c0 	bl	80169a8 <iprintf>
    printf("前左 : %f\r\n",sl_average);
 800f628:	4b12      	ldr	r3, [pc, #72]	; (800f674 <Exe_num5+0x80>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f8 fec3 	bl	80083b8 <__aeabi_f2d>
 800f632:	4603      	mov	r3, r0
 800f634:	460c      	mov	r4, r1
 800f636:	461a      	mov	r2, r3
 800f638:	4623      	mov	r3, r4
 800f63a:	480f      	ldr	r0, [pc, #60]	; (800f678 <Exe_num5+0x84>)
 800f63c:	f007 f9b4 	bl	80169a8 <iprintf>
    printf("前右 : %f\r\n",sr_average);
 800f640:	4b0e      	ldr	r3, [pc, #56]	; (800f67c <Exe_num5+0x88>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4618      	mov	r0, r3
 800f646:	f7f8 feb7 	bl	80083b8 <__aeabi_f2d>
 800f64a:	4603      	mov	r3, r0
 800f64c:	460c      	mov	r4, r1
 800f64e:	461a      	mov	r2, r3
 800f650:	4623      	mov	r3, r4
 800f652:	480b      	ldr	r0, [pc, #44]	; (800f680 <Exe_num5+0x8c>)
 800f654:	f007 f9a8 	bl	80169a8 <iprintf>
    printf("\r\n");
 800f658:	480a      	ldr	r0, [pc, #40]	; (800f684 <Exe_num5+0x90>)
 800f65a:	f007 fa19 	bl	8016a90 <puts>
#endif

#endif
}
 800f65e:	bf00      	nop
 800f660:	bd98      	pop	{r3, r4, r7, pc}
 800f662:	bf00      	nop
 800f664:	2000e04c 	.word	0x2000e04c
 800f668:	08018940 	.word	0x08018940
 800f66c:	2001a6d0 	.word	0x2001a6d0
 800f670:	0801894c 	.word	0x0801894c
 800f674:	2001a798 	.word	0x2001a798
 800f678:	08018958 	.word	0x08018958
 800f67c:	20019ca8 	.word	0x20019ca8
 800f680:	08018968 	.word	0x08018968
 800f684:	08018810 	.word	0x08018810

0800f688 <Exe_num6>:
void Exe_num6(){
 800f688:	b480      	push	{r7}
 800f68a:	af00      	add	r7, sp, #0

#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
 800f68c:	bf00      	nop
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <Exe_num7>:
void Exe_num7(){
 800f696:	b480      	push	{r7}
 800f698:	af00      	add	r7, sp, #0
//        		      printf("右 : %f\r\n",fr_average);
//        		  }
		  mode.control = 2;
		  Target_velocity = test_velo_7;
#endif
}
 800f69a:	bf00      	nop
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f6a8:	f001 fa82 	bl	8010bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f6ac:	f000 f866 	bl	800f77c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f6b0:	f000 fcb0 	bl	8010014 <MX_GPIO_Init>
  MX_DMA_Init();
 800f6b4:	f000 fc86 	bl	800ffc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800f6b8:	f000 f8ca 	bl	800f850 <MX_ADC1_Init>
  MX_ADC2_Init();
 800f6bc:	f000 f936 	bl	800f92c <MX_ADC2_Init>
  MX_TIM3_Init();
 800f6c0:	f000 fa90 	bl	800fbe4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800f6c4:	f000 fa18 	bl	800faf8 <MX_TIM2_Init>
  MX_SPI3_Init();
 800f6c8:	f000 f990 	bl	800f9ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800f6cc:	f000 fc50 	bl	800ff70 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800f6d0:	f000 fb30 	bl	800fd34 <MX_TIM5_Init>
  MX_TIM4_Init();
 800f6d4:	f000 fada 	bl	800fc8c <MX_TIM4_Init>
  MX_TIM8_Init();
 800f6d8:	f000 fba2 	bl	800fe20 <MX_TIM8_Init>
  MX_TIM1_Init();
 800f6dc:	f000 f9bc 	bl	800fa58 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
 800f6e0:	f7fa fcbc 	bl	800a05c <Encoder_Start>
  Encoder_Reset();
 800f6e4:	f7fb f9cc 	bl	800aa80 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f6ee:	4821      	ldr	r0, [pc, #132]	; (800f774 <main+0xd0>)
 800f6f0:	f003 faa6 	bl	8012c40 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f6f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f6f8:	f001 facc 	bl	8010c94 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f702:	481c      	ldr	r0, [pc, #112]	; (800f774 <main+0xd0>)
 800f704:	f003 fa9c 	bl	8012c40 <HAL_GPIO_WritePin>

  while (1)
  {
	  Execution_Select();
 800f708:	f7fc fa74 	bl	800bbf4 <Execution_Select>

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセット値決定
	  IMU_Calib();
 800f70c:	f7fa fed6 	bl	800a4bc <IMU_Calib>

	  while(1){


switch(mode.execution){
 800f710:	4b19      	ldr	r3, [pc, #100]	; (800f778 <main+0xd4>)
 800f712:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f716:	2b07      	cmp	r3, #7
 800f718:	d82a      	bhi.n	800f770 <main+0xcc>
 800f71a:	a201      	add	r2, pc, #4	; (adr r2, 800f720 <main+0x7c>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f741 	.word	0x0800f741
 800f724:	0800f747 	.word	0x0800f747
 800f728:	0800f74d 	.word	0x0800f74d
 800f72c:	0800f753 	.word	0x0800f753
 800f730:	0800f759 	.word	0x0800f759
 800f734:	0800f75f 	.word	0x0800f75f
 800f738:	0800f765 	.word	0x0800f765
 800f73c:	0800f76b 	.word	0x0800f76b
          case 0:
        	  Exe_num0();
 800f740:	f7ff ff34 	bl	800f5ac <Exe_num0>
        	  break;
 800f744:	e015      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800f746:	f7ff ff37 	bl	800f5b8 <Exe_num1>
              break;
 800f74a:	e012      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800f74c:	f7ff ff3a 	bl	800f5c4 <Exe_num2>
	          break;
 800f750:	e00f      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800f752:	f7ff ff3d 	bl	800f5d0 <Exe_num3>
              break;
 800f756:	e00c      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800f758:	f7ff ff45 	bl	800f5e6 <Exe_num4>
        	  break;
 800f75c:	e009      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800f75e:	f7ff ff49 	bl	800f5f4 <Exe_num5>
	          break;
 800f762:	e006      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800f764:	f7ff ff90 	bl	800f688 <Exe_num6>
		    break;
 800f768:	e003      	b.n	800f772 <main+0xce>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800f76a:	f7ff ff94 	bl	800f696 <Exe_num7>
	  	      break;
 800f76e:	e000      	b.n	800f772 <main+0xce>
          default:
        	  break;
 800f770:	bf00      	nop
switch(mode.execution){
 800f772:	e7cd      	b.n	800f710 <main+0x6c>
 800f774:	40020800 	.word	0x40020800
 800f778:	20000074 	.word	0x20000074

0800f77c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b094      	sub	sp, #80	; 0x50
 800f780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f782:	f107 0320 	add.w	r3, r7, #32
 800f786:	2230      	movs	r2, #48	; 0x30
 800f788:	2100      	movs	r1, #0
 800f78a:	4618      	mov	r0, r3
 800f78c:	f006 fca7 	bl	80160de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f790:	f107 030c 	add.w	r3, r7, #12
 800f794:	2200      	movs	r2, #0
 800f796:	601a      	str	r2, [r3, #0]
 800f798:	605a      	str	r2, [r3, #4]
 800f79a:	609a      	str	r2, [r3, #8]
 800f79c:	60da      	str	r2, [r3, #12]
 800f79e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	60bb      	str	r3, [r7, #8]
 800f7a4:	4b28      	ldr	r3, [pc, #160]	; (800f848 <SystemClock_Config+0xcc>)
 800f7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a8:	4a27      	ldr	r2, [pc, #156]	; (800f848 <SystemClock_Config+0xcc>)
 800f7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7ae:	6413      	str	r3, [r2, #64]	; 0x40
 800f7b0:	4b25      	ldr	r3, [pc, #148]	; (800f848 <SystemClock_Config+0xcc>)
 800f7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7b8:	60bb      	str	r3, [r7, #8]
 800f7ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f7bc:	2300      	movs	r3, #0
 800f7be:	607b      	str	r3, [r7, #4]
 800f7c0:	4b22      	ldr	r3, [pc, #136]	; (800f84c <SystemClock_Config+0xd0>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a21      	ldr	r2, [pc, #132]	; (800f84c <SystemClock_Config+0xd0>)
 800f7c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7ca:	6013      	str	r3, [r2, #0]
 800f7cc:	4b1f      	ldr	r3, [pc, #124]	; (800f84c <SystemClock_Config+0xd0>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7d4:	607b      	str	r3, [r7, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f7dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f7e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f7e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f7f0:	23a8      	movs	r3, #168	; 0xa8
 800f7f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f7f8:	2304      	movs	r3, #4
 800f7fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f7fc:	f107 0320 	add.w	r3, r7, #32
 800f800:	4618      	mov	r0, r3
 800f802:	f003 fa37 	bl	8012c74 <HAL_RCC_OscConfig>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f80c:	f000 fcbe 	bl	801018c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f810:	230f      	movs	r3, #15
 800f812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f814:	2302      	movs	r3, #2
 800f816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f818:	2300      	movs	r3, #0
 800f81a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f81c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f828:	f107 030c 	add.w	r3, r7, #12
 800f82c:	2105      	movs	r1, #5
 800f82e:	4618      	mov	r0, r3
 800f830:	f003 fc90 	bl	8013154 <HAL_RCC_ClockConfig>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d001      	beq.n	800f83e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f83a:	f000 fca7 	bl	801018c <Error_Handler>
  }
}
 800f83e:	bf00      	nop
 800f840:	3750      	adds	r7, #80	; 0x50
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	40023800 	.word	0x40023800
 800f84c:	40007000 	.word	0x40007000

0800f850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f856:	463b      	mov	r3, r7
 800f858:	2200      	movs	r2, #0
 800f85a:	601a      	str	r2, [r3, #0]
 800f85c:	605a      	str	r2, [r3, #4]
 800f85e:	609a      	str	r2, [r3, #8]
 800f860:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f862:	4b2f      	ldr	r3, [pc, #188]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f864:	4a2f      	ldr	r2, [pc, #188]	; (800f924 <MX_ADC1_Init+0xd4>)
 800f866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f868:	4b2d      	ldr	r3, [pc, #180]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f86a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f86e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f870:	4b2b      	ldr	r3, [pc, #172]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f872:	2200      	movs	r2, #0
 800f874:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f876:	4b2a      	ldr	r3, [pc, #168]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f878:	2201      	movs	r2, #1
 800f87a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800f87c:	4b28      	ldr	r3, [pc, #160]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f87e:	2201      	movs	r2, #1
 800f880:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f882:	4b27      	ldr	r3, [pc, #156]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f884:	2200      	movs	r2, #0
 800f886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f88a:	4b25      	ldr	r3, [pc, #148]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f88c:	2200      	movs	r2, #0
 800f88e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f890:	4b23      	ldr	r3, [pc, #140]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f892:	4a25      	ldr	r2, [pc, #148]	; (800f928 <MX_ADC1_Init+0xd8>)
 800f894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f896:	4b22      	ldr	r3, [pc, #136]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f898:	2200      	movs	r2, #0
 800f89a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800f89c:	4b20      	ldr	r3, [pc, #128]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f89e:	2203      	movs	r2, #3
 800f8a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f8a2:	4b1f      	ldr	r3, [pc, #124]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f8aa:	4b1d      	ldr	r3, [pc, #116]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f8b0:	481b      	ldr	r0, [pc, #108]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f8b2:	f001 fa11 	bl	8010cd8 <HAL_ADC_Init>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800f8bc:	f000 fc66 	bl	801018c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800f8c0:	230a      	movs	r3, #10
 800f8c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f8cc:	463b      	mov	r3, r7
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4813      	ldr	r0, [pc, #76]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f8d2:	f001 fcdf 	bl	8011294 <HAL_ADC_ConfigChannel>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f8dc:	f000 fc56 	bl	801018c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f8e0:	230e      	movs	r3, #14
 800f8e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f8e8:	463b      	mov	r3, r7
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	480c      	ldr	r0, [pc, #48]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f8ee:	f001 fcd1 	bl	8011294 <HAL_ADC_ConfigChannel>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f8f8:	f000 fc48 	bl	801018c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800f8fc:	2309      	movs	r3, #9
 800f8fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f900:	2303      	movs	r3, #3
 800f902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f904:	463b      	mov	r3, r7
 800f906:	4619      	mov	r1, r3
 800f908:	4805      	ldr	r0, [pc, #20]	; (800f920 <MX_ADC1_Init+0xd0>)
 800f90a:	f001 fcc3 	bl	8011294 <HAL_ADC_ConfigChannel>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f914:	f000 fc3a 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f918:	bf00      	nop
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20019d90 	.word	0x20019d90
 800f924:	40012000 	.word	0x40012000
 800f928:	0f000001 	.word	0x0f000001

0800f92c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f932:	463b      	mov	r3, r7
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	605a      	str	r2, [r3, #4]
 800f93a:	609a      	str	r2, [r3, #8]
 800f93c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f93e:	4b28      	ldr	r3, [pc, #160]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f940:	4a28      	ldr	r2, [pc, #160]	; (800f9e4 <MX_ADC2_Init+0xb8>)
 800f942:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f944:	4b26      	ldr	r3, [pc, #152]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f94a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f94c:	4b24      	ldr	r3, [pc, #144]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f94e:	2200      	movs	r2, #0
 800f950:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f952:	4b23      	ldr	r3, [pc, #140]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f954:	2201      	movs	r2, #1
 800f956:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800f958:	4b21      	ldr	r3, [pc, #132]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f95e:	4b20      	ldr	r3, [pc, #128]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f966:	4b1e      	ldr	r3, [pc, #120]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f968:	2200      	movs	r2, #0
 800f96a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f96c:	4b1c      	ldr	r3, [pc, #112]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f96e:	4a1e      	ldr	r2, [pc, #120]	; (800f9e8 <MX_ADC2_Init+0xbc>)
 800f970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f972:	4b1b      	ldr	r3, [pc, #108]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f974:	2200      	movs	r2, #0
 800f976:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800f978:	4b19      	ldr	r3, [pc, #100]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f97a:	2202      	movs	r2, #2
 800f97c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f97e:	4b18      	ldr	r3, [pc, #96]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f980:	2201      	movs	r2, #1
 800f982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f986:	4b16      	ldr	r3, [pc, #88]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f988:	2201      	movs	r2, #1
 800f98a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f98c:	4814      	ldr	r0, [pc, #80]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f98e:	f001 f9a3 	bl	8010cd8 <HAL_ADC_Init>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800f998:	f000 fbf8 	bl	801018c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800f99c:	230b      	movs	r3, #11
 800f99e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f9a8:	463b      	mov	r3, r7
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	480c      	ldr	r0, [pc, #48]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f9ae:	f001 fc71 	bl	8011294 <HAL_ADC_ConfigChannel>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800f9b8:	f000 fbe8 	bl	801018c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800f9bc:	230f      	movs	r3, #15
 800f9be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f9c4:	463b      	mov	r3, r7
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	4805      	ldr	r0, [pc, #20]	; (800f9e0 <MX_ADC2_Init+0xb4>)
 800f9ca:	f001 fc63 	bl	8011294 <HAL_ADC_ConfigChannel>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800f9d4:	f000 fbda 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	2000e0d4 	.word	0x2000e0d4
 800f9e4:	40012100 	.word	0x40012100
 800f9e8:	0f000001 	.word	0x0f000001

0800f9ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800f9f0:	4b17      	ldr	r3, [pc, #92]	; (800fa50 <MX_SPI3_Init+0x64>)
 800f9f2:	4a18      	ldr	r2, [pc, #96]	; (800fa54 <MX_SPI3_Init+0x68>)
 800f9f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f9f6:	4b16      	ldr	r3, [pc, #88]	; (800fa50 <MX_SPI3_Init+0x64>)
 800f9f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f9fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f9fe:	4b14      	ldr	r3, [pc, #80]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800fa04:	4b12      	ldr	r3, [pc, #72]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800fa0a:	4b11      	ldr	r3, [pc, #68]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fa10:	4b0f      	ldr	r3, [pc, #60]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800fa16:	4b0e      	ldr	r3, [pc, #56]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800fa1e:	4b0c      	ldr	r3, [pc, #48]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa20:	2228      	movs	r2, #40	; 0x28
 800fa22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fa24:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800fa2a:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa30:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800fa36:	4b06      	ldr	r3, [pc, #24]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa38:	220a      	movs	r2, #10
 800fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800fa3c:	4804      	ldr	r0, [pc, #16]	; (800fa50 <MX_SPI3_Init+0x64>)
 800fa3e:	f003 fd7b 	bl	8013538 <HAL_SPI_Init>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d001      	beq.n	800fa4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800fa48:	f000 fba0 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800fa4c:	bf00      	nop
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20019d34 	.word	0x20019d34
 800fa54:	40003c00 	.word	0x40003c00

0800fa58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b086      	sub	sp, #24
 800fa5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa5e:	f107 0308 	add.w	r3, r7, #8
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	605a      	str	r2, [r3, #4]
 800fa68:	609a      	str	r2, [r3, #8]
 800fa6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa6c:	463b      	mov	r3, r7
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800fa74:	4b1e      	ldr	r3, [pc, #120]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa76:	4a1f      	ldr	r2, [pc, #124]	; (800faf4 <MX_TIM1_Init+0x9c>)
 800fa78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800fa7a:	4b1d      	ldr	r3, [pc, #116]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa7c:	22a7      	movs	r2, #167	; 0xa7
 800fa7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa80:	4b1b      	ldr	r3, [pc, #108]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800fa86:	4b1a      	ldr	r3, [pc, #104]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa88:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fa8e:	4b18      	ldr	r3, [pc, #96]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800fa94:	4b16      	ldr	r3, [pc, #88]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fa9a:	4b15      	ldr	r3, [pc, #84]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800faa0:	4813      	ldr	r0, [pc, #76]	; (800faf0 <MX_TIM1_Init+0x98>)
 800faa2:	f004 fa9d 	bl	8013fe0 <HAL_TIM_Base_Init>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800faac:	f000 fb6e 	bl	801018c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	4619      	mov	r1, r3
 800fabc:	480c      	ldr	r0, [pc, #48]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fabe:	f005 f821 	bl	8014b04 <HAL_TIM_ConfigClockSource>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800fac8:	f000 fb60 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800facc:	2300      	movs	r3, #0
 800face:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fad0:	2300      	movs	r3, #0
 800fad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fad4:	463b      	mov	r3, r7
 800fad6:	4619      	mov	r1, r3
 800fad8:	4805      	ldr	r0, [pc, #20]	; (800faf0 <MX_TIM1_Init+0x98>)
 800fada:	f005 fccd 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800fae4:	f000 fb52 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800fae8:	bf00      	nop
 800faea:	3718      	adds	r7, #24
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	2001a2a8 	.word	0x2001a2a8
 800faf4:	40010000 	.word	0x40010000

0800faf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08e      	sub	sp, #56	; 0x38
 800fafc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fafe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	605a      	str	r2, [r3, #4]
 800fb08:	609a      	str	r2, [r3, #8]
 800fb0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fb0c:	f107 0320 	add.w	r3, r7, #32
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]
 800fb14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fb16:	1d3b      	adds	r3, r7, #4
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	605a      	str	r2, [r3, #4]
 800fb1e:	609a      	str	r2, [r3, #8]
 800fb20:	60da      	str	r2, [r3, #12]
 800fb22:	611a      	str	r2, [r3, #16]
 800fb24:	615a      	str	r2, [r3, #20]
 800fb26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800fb28:	4b2d      	ldr	r3, [pc, #180]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fb2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800fb30:	4b2b      	ldr	r3, [pc, #172]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fb36:	4b2a      	ldr	r3, [pc, #168]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800fb3c:	4b28      	ldr	r3, [pc, #160]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb3e:	f241 0267 	movw	r2, #4199	; 0x1067
 800fb42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fb44:	4b26      	ldr	r3, [pc, #152]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fb4a:	4b25      	ldr	r3, [pc, #148]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fb50:	4823      	ldr	r0, [pc, #140]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb52:	f004 fa45 	bl	8013fe0 <HAL_TIM_Base_Init>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800fb5c:	f000 fb16 	bl	801018c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fb60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fb66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	481c      	ldr	r0, [pc, #112]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb6e:	f004 ffc9 	bl	8014b04 <HAL_TIM_ConfigClockSource>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d001      	beq.n	800fb7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800fb78:	f000 fb08 	bl	801018c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fb7c:	4818      	ldr	r0, [pc, #96]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb7e:	f004 fbfd 	bl	801437c <HAL_TIM_PWM_Init>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d001      	beq.n	800fb8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800fb88:	f000 fb00 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb90:	2300      	movs	r3, #0
 800fb92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fb94:	f107 0320 	add.w	r3, r7, #32
 800fb98:	4619      	mov	r1, r3
 800fb9a:	4811      	ldr	r0, [pc, #68]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fb9c:	f005 fc6c 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800fba6:	f000 faf1 	bl	801018c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fbaa:	2360      	movs	r3, #96	; 0x60
 800fbac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fbba:	1d3b      	adds	r3, r7, #4
 800fbbc:	220c      	movs	r2, #12
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	4807      	ldr	r0, [pc, #28]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fbc2:	f004 fed9 	bl	8014978 <HAL_TIM_PWM_ConfigChannel>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800fbcc:	f000 fade 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800fbd0:	4803      	ldr	r0, [pc, #12]	; (800fbe0 <MX_TIM2_Init+0xe8>)
 800fbd2:	f000 fd7b 	bl	80106cc <HAL_TIM_MspPostInit>

}
 800fbd6:	bf00      	nop
 800fbd8:	3738      	adds	r7, #56	; 0x38
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	2001a6f4 	.word	0x2001a6f4

0800fbe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08c      	sub	sp, #48	; 0x30
 800fbe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800fbea:	f107 030c 	add.w	r3, r7, #12
 800fbee:	2224      	movs	r2, #36	; 0x24
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f006 fa73 	bl	80160de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fbf8:	1d3b      	adds	r3, r7, #4
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800fc00:	4b20      	ldr	r3, [pc, #128]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc02:	4a21      	ldr	r2, [pc, #132]	; (800fc88 <MX_TIM3_Init+0xa4>)
 800fc04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800fc06:	4b1f      	ldr	r3, [pc, #124]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc0c:	4b1d      	ldr	r3, [pc, #116]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800fc12:	4b1c      	ldr	r3, [pc, #112]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc14:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fc18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc1a:	4b1a      	ldr	r3, [pc, #104]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc20:	4b18      	ldr	r3, [pc, #96]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fc26:	2301      	movs	r3, #1
 800fc28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fc32:	2300      	movs	r3, #0
 800fc34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fc42:	2300      	movs	r3, #0
 800fc44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800fc4a:	f107 030c 	add.w	r3, r7, #12
 800fc4e:	4619      	mov	r1, r3
 800fc50:	480c      	ldr	r0, [pc, #48]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc52:	f004 fc5f 	bl	8014514 <HAL_TIM_Encoder_Init>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d001      	beq.n	800fc60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800fc5c:	f000 fa96 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc60:	2300      	movs	r3, #0
 800fc62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc64:	2300      	movs	r3, #0
 800fc66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fc68:	1d3b      	adds	r3, r7, #4
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4805      	ldr	r0, [pc, #20]	; (800fc84 <MX_TIM3_Init+0xa0>)
 800fc6e:	f005 fc03 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800fc78:	f000 fa88 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800fc7c:	bf00      	nop
 800fc7e:	3730      	adds	r7, #48	; 0x30
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20019cf0 	.word	0x20019cf0
 800fc88:	40000400 	.word	0x40000400

0800fc8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b08c      	sub	sp, #48	; 0x30
 800fc90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800fc92:	f107 030c 	add.w	r3, r7, #12
 800fc96:	2224      	movs	r2, #36	; 0x24
 800fc98:	2100      	movs	r1, #0
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f006 fa1f 	bl	80160de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fca0:	1d3b      	adds	r3, r7, #4
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800fca8:	4b20      	ldr	r3, [pc, #128]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcaa:	4a21      	ldr	r2, [pc, #132]	; (800fd30 <MX_TIM4_Init+0xa4>)
 800fcac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800fcae:	4b1f      	ldr	r3, [pc, #124]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fcb4:	4b1d      	ldr	r3, [pc, #116]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800fcba:	4b1c      	ldr	r3, [pc, #112]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcbc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fcc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fcc2:	4b1a      	ldr	r3, [pc, #104]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fcc8:	4b18      	ldr	r3, [pc, #96]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fce2:	2300      	movs	r3, #0
 800fce4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fce6:	2301      	movs	r3, #1
 800fce8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fcea:	2300      	movs	r3, #0
 800fcec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800fcf2:	f107 030c 	add.w	r3, r7, #12
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	480c      	ldr	r0, [pc, #48]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fcfa:	f004 fc0b 	bl	8014514 <HAL_TIM_Encoder_Init>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800fd04:	f000 fa42 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800fd10:	1d3b      	adds	r3, r7, #4
 800fd12:	4619      	mov	r1, r3
 800fd14:	4805      	ldr	r0, [pc, #20]	; (800fd2c <MX_TIM4_Init+0xa0>)
 800fd16:	f005 fbaf 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d001      	beq.n	800fd24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800fd20:	f000 fa34 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800fd24:	bf00      	nop
 800fd26:	3730      	adds	r7, #48	; 0x30
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	2000e094 	.word	0x2000e094
 800fd30:	40000800 	.word	0x40000800

0800fd34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08e      	sub	sp, #56	; 0x38
 800fd38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fd3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	605a      	str	r2, [r3, #4]
 800fd44:	609a      	str	r2, [r3, #8]
 800fd46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fd48:	f107 0320 	add.w	r3, r7, #32
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fd52:	1d3b      	adds	r3, r7, #4
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	605a      	str	r2, [r3, #4]
 800fd5a:	609a      	str	r2, [r3, #8]
 800fd5c:	60da      	str	r2, [r3, #12]
 800fd5e:	611a      	str	r2, [r3, #16]
 800fd60:	615a      	str	r2, [r3, #20]
 800fd62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800fd64:	4b2c      	ldr	r3, [pc, #176]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd66:	4a2d      	ldr	r2, [pc, #180]	; (800fe1c <MX_TIM5_Init+0xe8>)
 800fd68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800fd6a:	4b2b      	ldr	r3, [pc, #172]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd70:	4b29      	ldr	r3, [pc, #164]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800fd76:	4b28      	ldr	r3, [pc, #160]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd78:	f241 0267 	movw	r2, #4199	; 0x1067
 800fd7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd7e:	4b26      	ldr	r3, [pc, #152]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fd84:	4b24      	ldr	r3, [pc, #144]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd86:	2200      	movs	r2, #0
 800fd88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800fd8a:	4823      	ldr	r0, [pc, #140]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fd8c:	f004 f928 	bl	8013fe0 <HAL_TIM_Base_Init>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800fd96:	f000 f9f9 	bl	801018c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800fda0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fda4:	4619      	mov	r1, r3
 800fda6:	481c      	ldr	r0, [pc, #112]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fda8:	f004 feac 	bl	8014b04 <HAL_TIM_ConfigClockSource>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800fdb2:	f000 f9eb 	bl	801018c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800fdb6:	4818      	ldr	r0, [pc, #96]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fdb8:	f004 fae0 	bl	801437c <HAL_TIM_PWM_Init>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800fdc2:	f000 f9e3 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800fdce:	f107 0320 	add.w	r3, r7, #32
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	4810      	ldr	r0, [pc, #64]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fdd6:	f005 fb4f 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800fde0:	f000 f9d4 	bl	801018c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fde4:	2360      	movs	r3, #96	; 0x60
 800fde6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fde8:	2300      	movs	r3, #0
 800fdea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fdec:	2300      	movs	r3, #0
 800fdee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fdf4:	1d3b      	adds	r3, r7, #4
 800fdf6:	2204      	movs	r2, #4
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	4807      	ldr	r0, [pc, #28]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fdfc:	f004 fdbc 	bl	8014978 <HAL_TIM_PWM_ConfigChannel>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d001      	beq.n	800fe0a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800fe06:	f000 f9c1 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800fe0a:	4803      	ldr	r0, [pc, #12]	; (800fe18 <MX_TIM5_Init+0xe4>)
 800fe0c:	f000 fc5e 	bl	80106cc <HAL_TIM_MspPostInit>

}
 800fe10:	bf00      	nop
 800fe12:	3738      	adds	r7, #56	; 0x38
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	20019cac 	.word	0x20019cac
 800fe1c:	40000c00 	.word	0x40000c00

0800fe20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b096      	sub	sp, #88	; 0x58
 800fe24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fe26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	605a      	str	r2, [r3, #4]
 800fe30:	609a      	str	r2, [r3, #8]
 800fe32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fe34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fe38:	2200      	movs	r2, #0
 800fe3a:	601a      	str	r2, [r3, #0]
 800fe3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fe3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	605a      	str	r2, [r3, #4]
 800fe48:	609a      	str	r2, [r3, #8]
 800fe4a:	60da      	str	r2, [r3, #12]
 800fe4c:	611a      	str	r2, [r3, #16]
 800fe4e:	615a      	str	r2, [r3, #20]
 800fe50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800fe52:	1d3b      	adds	r3, r7, #4
 800fe54:	2220      	movs	r2, #32
 800fe56:	2100      	movs	r1, #0
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f006 f940 	bl	80160de <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800fe5e:	4b42      	ldr	r3, [pc, #264]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe60:	4a42      	ldr	r2, [pc, #264]	; (800ff6c <MX_TIM8_Init+0x14c>)
 800fe62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800fe64:	4b40      	ldr	r3, [pc, #256]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe66:	22a7      	movs	r2, #167	; 0xa7
 800fe68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe6a:	4b3f      	ldr	r3, [pc, #252]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800fe70:	4b3d      	ldr	r3, [pc, #244]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe72:	2231      	movs	r2, #49	; 0x31
 800fe74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe76:	4b3c      	ldr	r3, [pc, #240]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800fe7c:	4b3a      	ldr	r3, [pc, #232]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fe82:	4b39      	ldr	r3, [pc, #228]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe84:	2280      	movs	r2, #128	; 0x80
 800fe86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800fe88:	4837      	ldr	r0, [pc, #220]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fe8a:	f004 f8a9 	bl	8013fe0 <HAL_TIM_Base_Init>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d001      	beq.n	800fe98 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800fe94:	f000 f97a 	bl	801018c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800fe9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fea2:	4619      	mov	r1, r3
 800fea4:	4830      	ldr	r0, [pc, #192]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fea6:	f004 fe2d 	bl	8014b04 <HAL_TIM_ConfigClockSource>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800feb0:	f000 f96c 	bl	801018c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800feb4:	482c      	ldr	r0, [pc, #176]	; (800ff68 <MX_TIM8_Init+0x148>)
 800feb6:	f004 f90d 	bl	80140d4 <HAL_TIM_OC_Init>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d001      	beq.n	800fec4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800fec0:	f000 f964 	bl	801018c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fec4:	2300      	movs	r3, #0
 800fec6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fec8:	2300      	movs	r3, #0
 800feca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800fecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fed0:	4619      	mov	r1, r3
 800fed2:	4825      	ldr	r0, [pc, #148]	; (800ff68 <MX_TIM8_Init+0x148>)
 800fed4:	f005 fad0 	bl	8015478 <HAL_TIMEx_MasterConfigSynchronization>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d001      	beq.n	800fee2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800fede:	f000 f955 	bl	801018c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800fee2:	2330      	movs	r3, #48	; 0x30
 800fee4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800fee6:	2318      	movs	r3, #24
 800fee8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800feea:	2300      	movs	r3, #0
 800feec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800feee:	2300      	movs	r3, #0
 800fef0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fef2:	2300      	movs	r3, #0
 800fef4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800fef6:	2300      	movs	r3, #0
 800fef8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800fefa:	2300      	movs	r3, #0
 800fefc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fefe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff02:	2200      	movs	r2, #0
 800ff04:	4619      	mov	r1, r3
 800ff06:	4818      	ldr	r0, [pc, #96]	; (800ff68 <MX_TIM8_Init+0x148>)
 800ff08:	f004 fcd6 	bl	80148b8 <HAL_TIM_OC_ConfigChannel>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d001      	beq.n	800ff16 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800ff12:	f000 f93b 	bl	801018c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <MX_TIM8_Init+0x148>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	699a      	ldr	r2, [r3, #24]
 800ff1c:	4b12      	ldr	r3, [pc, #72]	; (800ff68 <MX_TIM8_Init+0x148>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f042 0208 	orr.w	r2, r2, #8
 800ff24:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ff26:	2300      	movs	r3, #0
 800ff28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ff36:	2300      	movs	r3, #0
 800ff38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ff3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ff40:	2300      	movs	r3, #0
 800ff42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ff44:	1d3b      	adds	r3, r7, #4
 800ff46:	4619      	mov	r1, r3
 800ff48:	4807      	ldr	r0, [pc, #28]	; (800ff68 <MX_TIM8_Init+0x148>)
 800ff4a:	f005 fb11 	bl	8015570 <HAL_TIMEx_ConfigBreakDeadTime>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800ff54:	f000 f91a 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ff58:	4803      	ldr	r0, [pc, #12]	; (800ff68 <MX_TIM8_Init+0x148>)
 800ff5a:	f000 fbb7 	bl	80106cc <HAL_TIM_MspPostInit>

}
 800ff5e:	bf00      	nop
 800ff60:	3758      	adds	r7, #88	; 0x58
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	2000e050 	.word	0x2000e050
 800ff6c:	40010400 	.word	0x40010400

0800ff70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ff74:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff76:	4a12      	ldr	r2, [pc, #72]	; (800ffc0 <MX_USART1_UART_Init+0x50>)
 800ff78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800ff7a:	4b10      	ldr	r3, [pc, #64]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ff80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ff82:	4b0e      	ldr	r3, [pc, #56]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ff88:	4b0c      	ldr	r3, [pc, #48]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ff94:	4b09      	ldr	r3, [pc, #36]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff96:	220c      	movs	r2, #12
 800ff98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ff9a:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ffa0:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ffa6:	4805      	ldr	r0, [pc, #20]	; (800ffbc <MX_USART1_UART_Init+0x4c>)
 800ffa8:	f005 fb6d 	bl	8015686 <HAL_UART_Init>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ffb2:	f000 f8eb 	bl	801018c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ffb6:	bf00      	nop
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	20019ddc 	.word	0x20019ddc
 800ffc0:	40011000 	.word	0x40011000

0800ffc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ffca:	2300      	movs	r3, #0
 800ffcc:	607b      	str	r3, [r7, #4]
 800ffce:	4b10      	ldr	r3, [pc, #64]	; (8010010 <MX_DMA_Init+0x4c>)
 800ffd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd2:	4a0f      	ldr	r2, [pc, #60]	; (8010010 <MX_DMA_Init+0x4c>)
 800ffd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ffd8:	6313      	str	r3, [r2, #48]	; 0x30
 800ffda:	4b0d      	ldr	r3, [pc, #52]	; (8010010 <MX_DMA_Init+0x4c>)
 800ffdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffe2:	607b      	str	r3, [r7, #4]
 800ffe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2100      	movs	r1, #0
 800ffea:	2038      	movs	r0, #56	; 0x38
 800ffec:	f001 fcd7 	bl	801199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fff0:	2038      	movs	r0, #56	; 0x38
 800fff2:	f001 fcf0 	bl	80119d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800fff6:	2200      	movs	r2, #0
 800fff8:	2100      	movs	r1, #0
 800fffa:	203a      	movs	r0, #58	; 0x3a
 800fffc:	f001 fccf 	bl	801199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8010000:	203a      	movs	r0, #58	; 0x3a
 8010002:	f001 fce8 	bl	80119d6 <HAL_NVIC_EnableIRQ>

}
 8010006:	bf00      	nop
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	40023800 	.word	0x40023800

08010014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b08a      	sub	sp, #40	; 0x28
 8010018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801001a:	f107 0314 	add.w	r3, r7, #20
 801001e:	2200      	movs	r2, #0
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	605a      	str	r2, [r3, #4]
 8010024:	609a      	str	r2, [r3, #8]
 8010026:	60da      	str	r2, [r3, #12]
 8010028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801002a:	2300      	movs	r3, #0
 801002c:	613b      	str	r3, [r7, #16]
 801002e:	4b52      	ldr	r3, [pc, #328]	; (8010178 <MX_GPIO_Init+0x164>)
 8010030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010032:	4a51      	ldr	r2, [pc, #324]	; (8010178 <MX_GPIO_Init+0x164>)
 8010034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010038:	6313      	str	r3, [r2, #48]	; 0x30
 801003a:	4b4f      	ldr	r3, [pc, #316]	; (8010178 <MX_GPIO_Init+0x164>)
 801003c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801003e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010042:	613b      	str	r3, [r7, #16]
 8010044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010046:	2300      	movs	r3, #0
 8010048:	60fb      	str	r3, [r7, #12]
 801004a:	4b4b      	ldr	r3, [pc, #300]	; (8010178 <MX_GPIO_Init+0x164>)
 801004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004e:	4a4a      	ldr	r2, [pc, #296]	; (8010178 <MX_GPIO_Init+0x164>)
 8010050:	f043 0304 	orr.w	r3, r3, #4
 8010054:	6313      	str	r3, [r2, #48]	; 0x30
 8010056:	4b48      	ldr	r3, [pc, #288]	; (8010178 <MX_GPIO_Init+0x164>)
 8010058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005a:	f003 0304 	and.w	r3, r3, #4
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010062:	2300      	movs	r3, #0
 8010064:	60bb      	str	r3, [r7, #8]
 8010066:	4b44      	ldr	r3, [pc, #272]	; (8010178 <MX_GPIO_Init+0x164>)
 8010068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006a:	4a43      	ldr	r2, [pc, #268]	; (8010178 <MX_GPIO_Init+0x164>)
 801006c:	f043 0301 	orr.w	r3, r3, #1
 8010070:	6313      	str	r3, [r2, #48]	; 0x30
 8010072:	4b41      	ldr	r3, [pc, #260]	; (8010178 <MX_GPIO_Init+0x164>)
 8010074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	60bb      	str	r3, [r7, #8]
 801007c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801007e:	2300      	movs	r3, #0
 8010080:	607b      	str	r3, [r7, #4]
 8010082:	4b3d      	ldr	r3, [pc, #244]	; (8010178 <MX_GPIO_Init+0x164>)
 8010084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010086:	4a3c      	ldr	r2, [pc, #240]	; (8010178 <MX_GPIO_Init+0x164>)
 8010088:	f043 0302 	orr.w	r3, r3, #2
 801008c:	6313      	str	r3, [r2, #48]	; 0x30
 801008e:	4b3a      	ldr	r3, [pc, #232]	; (8010178 <MX_GPIO_Init+0x164>)
 8010090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010092:	f003 0302 	and.w	r3, r3, #2
 8010096:	607b      	str	r3, [r7, #4]
 8010098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801009a:	2300      	movs	r3, #0
 801009c:	603b      	str	r3, [r7, #0]
 801009e:	4b36      	ldr	r3, [pc, #216]	; (8010178 <MX_GPIO_Init+0x164>)
 80100a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a2:	4a35      	ldr	r2, [pc, #212]	; (8010178 <MX_GPIO_Init+0x164>)
 80100a4:	f043 0308 	orr.w	r3, r3, #8
 80100a8:	6313      	str	r3, [r2, #48]	; 0x30
 80100aa:	4b33      	ldr	r3, [pc, #204]	; (8010178 <MX_GPIO_Init+0x164>)
 80100ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ae:	f003 0308 	and.w	r3, r3, #8
 80100b2:	603b      	str	r3, [r7, #0]
 80100b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80100b6:	2200      	movs	r2, #0
 80100b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80100bc:	482f      	ldr	r0, [pc, #188]	; (801017c <MX_GPIO_Init+0x168>)
 80100be:	f002 fdbf 	bl	8012c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80100c2:	2200      	movs	r2, #0
 80100c4:	2105      	movs	r1, #5
 80100c6:	482e      	ldr	r0, [pc, #184]	; (8010180 <MX_GPIO_Init+0x16c>)
 80100c8:	f002 fdba 	bl	8012c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80100cc:	2200      	movs	r2, #0
 80100ce:	2104      	movs	r1, #4
 80100d0:	482c      	ldr	r0, [pc, #176]	; (8010184 <MX_GPIO_Init+0x170>)
 80100d2:	f002 fdb5 	bl	8012c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80100d6:	2200      	movs	r2, #0
 80100d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80100dc:	482a      	ldr	r0, [pc, #168]	; (8010188 <MX_GPIO_Init+0x174>)
 80100de:	f002 fdaf 	bl	8012c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 80100e2:	f44f 7341 	mov.w	r3, #772	; 0x304
 80100e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80100e8:	2301      	movs	r3, #1
 80100ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100ec:	2300      	movs	r3, #0
 80100ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80100f0:	2300      	movs	r3, #0
 80100f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80100f4:	f107 0314 	add.w	r3, r7, #20
 80100f8:	4619      	mov	r1, r3
 80100fa:	4820      	ldr	r0, [pc, #128]	; (801017c <MX_GPIO_Init+0x168>)
 80100fc:	f002 fbee 	bl	80128dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8010100:	2305      	movs	r3, #5
 8010102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010104:	2301      	movs	r3, #1
 8010106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010108:	2300      	movs	r3, #0
 801010a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801010c:	2300      	movs	r3, #0
 801010e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010110:	f107 0314 	add.w	r3, r7, #20
 8010114:	4619      	mov	r1, r3
 8010116:	481a      	ldr	r0, [pc, #104]	; (8010180 <MX_GPIO_Init+0x16c>)
 8010118:	f002 fbe0 	bl	80128dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 801011c:	f241 0304 	movw	r3, #4100	; 0x1004
 8010120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010122:	2300      	movs	r3, #0
 8010124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010126:	2300      	movs	r3, #0
 8010128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801012a:	f107 0314 	add.w	r3, r7, #20
 801012e:	4619      	mov	r1, r3
 8010130:	4815      	ldr	r0, [pc, #84]	; (8010188 <MX_GPIO_Init+0x174>)
 8010132:	f002 fbd3 	bl	80128dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010136:	2304      	movs	r3, #4
 8010138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801013a:	2301      	movs	r3, #1
 801013c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801013e:	2300      	movs	r3, #0
 8010140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010142:	2300      	movs	r3, #0
 8010144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010146:	f107 0314 	add.w	r3, r7, #20
 801014a:	4619      	mov	r1, r3
 801014c:	480d      	ldr	r0, [pc, #52]	; (8010184 <MX_GPIO_Init+0x170>)
 801014e:	f002 fbc5 	bl	80128dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010158:	2301      	movs	r3, #1
 801015a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801015c:	2300      	movs	r3, #0
 801015e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010160:	2300      	movs	r3, #0
 8010162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010164:	f107 0314 	add.w	r3, r7, #20
 8010168:	4619      	mov	r1, r3
 801016a:	4807      	ldr	r0, [pc, #28]	; (8010188 <MX_GPIO_Init+0x174>)
 801016c:	f002 fbb6 	bl	80128dc <HAL_GPIO_Init>

}
 8010170:	bf00      	nop
 8010172:	3728      	adds	r7, #40	; 0x28
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	40023800 	.word	0x40023800
 801017c:	40020800 	.word	0x40020800
 8010180:	40020000 	.word	0x40020000
 8010184:	40020c00 	.word	0x40020c00
 8010188:	40020400 	.word	0x40020400

0801018c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801018c:	b480      	push	{r7}
 801018e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010190:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010192:	e7fe      	b.n	8010192 <Error_Handler+0x6>

08010194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801019a:	2300      	movs	r3, #0
 801019c:	607b      	str	r3, [r7, #4]
 801019e:	4b13      	ldr	r3, [pc, #76]	; (80101ec <HAL_MspInit+0x58>)
 80101a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a2:	4a12      	ldr	r2, [pc, #72]	; (80101ec <HAL_MspInit+0x58>)
 80101a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101a8:	6453      	str	r3, [r2, #68]	; 0x44
 80101aa:	4b10      	ldr	r3, [pc, #64]	; (80101ec <HAL_MspInit+0x58>)
 80101ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80101b6:	2300      	movs	r3, #0
 80101b8:	603b      	str	r3, [r7, #0]
 80101ba:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <HAL_MspInit+0x58>)
 80101bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101be:	4a0b      	ldr	r2, [pc, #44]	; (80101ec <HAL_MspInit+0x58>)
 80101c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101c4:	6413      	str	r3, [r2, #64]	; 0x40
 80101c6:	4b09      	ldr	r3, [pc, #36]	; (80101ec <HAL_MspInit+0x58>)
 80101c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80101d2:	2200      	movs	r2, #0
 80101d4:	2100      	movs	r1, #0
 80101d6:	2004      	movs	r0, #4
 80101d8:	f001 fbe1 	bl	801199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80101dc:	2004      	movs	r0, #4
 80101de:	f001 fbfa 	bl	80119d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80101e2:	bf00      	nop
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	40023800 	.word	0x40023800

080101f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08c      	sub	sp, #48	; 0x30
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101f8:	f107 031c 	add.w	r3, r7, #28
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	605a      	str	r2, [r3, #4]
 8010202:	609a      	str	r2, [r3, #8]
 8010204:	60da      	str	r2, [r3, #12]
 8010206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4a73      	ldr	r2, [pc, #460]	; (80103dc <HAL_ADC_MspInit+0x1ec>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d17a      	bne.n	8010308 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8010212:	2300      	movs	r3, #0
 8010214:	61bb      	str	r3, [r7, #24]
 8010216:	4b72      	ldr	r3, [pc, #456]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021a:	4a71      	ldr	r2, [pc, #452]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 801021c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010220:	6453      	str	r3, [r2, #68]	; 0x44
 8010222:	4b6f      	ldr	r3, [pc, #444]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801022e:	2300      	movs	r3, #0
 8010230:	617b      	str	r3, [r7, #20]
 8010232:	4b6b      	ldr	r3, [pc, #428]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010236:	4a6a      	ldr	r2, [pc, #424]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010238:	f043 0304 	orr.w	r3, r3, #4
 801023c:	6313      	str	r3, [r2, #48]	; 0x30
 801023e:	4b68      	ldr	r3, [pc, #416]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010242:	f003 0304 	and.w	r3, r3, #4
 8010246:	617b      	str	r3, [r7, #20]
 8010248:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801024a:	2300      	movs	r3, #0
 801024c:	613b      	str	r3, [r7, #16]
 801024e:	4b64      	ldr	r3, [pc, #400]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010252:	4a63      	ldr	r2, [pc, #396]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010254:	f043 0302 	orr.w	r3, r3, #2
 8010258:	6313      	str	r3, [r2, #48]	; 0x30
 801025a:	4b61      	ldr	r3, [pc, #388]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 801025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025e:	f003 0302 	and.w	r3, r3, #2
 8010262:	613b      	str	r3, [r7, #16]
 8010264:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8010266:	2311      	movs	r3, #17
 8010268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801026a:	2303      	movs	r3, #3
 801026c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801026e:	2300      	movs	r3, #0
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010272:	f107 031c 	add.w	r3, r7, #28
 8010276:	4619      	mov	r1, r3
 8010278:	485a      	ldr	r0, [pc, #360]	; (80103e4 <HAL_ADC_MspInit+0x1f4>)
 801027a:	f002 fb2f 	bl	80128dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801027e:	2302      	movs	r3, #2
 8010280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010282:	2303      	movs	r3, #3
 8010284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010286:	2300      	movs	r3, #0
 8010288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801028a:	f107 031c 	add.w	r3, r7, #28
 801028e:	4619      	mov	r1, r3
 8010290:	4855      	ldr	r0, [pc, #340]	; (80103e8 <HAL_ADC_MspInit+0x1f8>)
 8010292:	f002 fb23 	bl	80128dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8010296:	4b55      	ldr	r3, [pc, #340]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 8010298:	4a55      	ldr	r2, [pc, #340]	; (80103f0 <HAL_ADC_MspInit+0x200>)
 801029a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 801029c:	4b53      	ldr	r3, [pc, #332]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 801029e:	2200      	movs	r2, #0
 80102a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80102a2:	4b52      	ldr	r3, [pc, #328]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80102a8:	4b50      	ldr	r3, [pc, #320]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80102ae:	4b4f      	ldr	r3, [pc, #316]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80102b6:	4b4d      	ldr	r3, [pc, #308]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80102be:	4b4b      	ldr	r3, [pc, #300]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80102c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80102c6:	4b49      	ldr	r3, [pc, #292]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80102ce:	4b47      	ldr	r3, [pc, #284]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80102d4:	4b45      	ldr	r3, [pc, #276]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80102da:	4844      	ldr	r0, [pc, #272]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102dc:	f001 fb96 	bl	8011a0c <HAL_DMA_Init>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d001      	beq.n	80102ea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80102e6:	f7ff ff51 	bl	801018c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a3f      	ldr	r2, [pc, #252]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102ee:	639a      	str	r2, [r3, #56]	; 0x38
 80102f0:	4a3e      	ldr	r2, [pc, #248]	; (80103ec <HAL_ADC_MspInit+0x1fc>)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80102f6:	2200      	movs	r2, #0
 80102f8:	2100      	movs	r1, #0
 80102fa:	2012      	movs	r0, #18
 80102fc:	f001 fb4f 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8010300:	2012      	movs	r0, #18
 8010302:	f001 fb68 	bl	80119d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8010306:	e065      	b.n	80103d4 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a39      	ldr	r2, [pc, #228]	; (80103f4 <HAL_ADC_MspInit+0x204>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d160      	bne.n	80103d4 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8010312:	2300      	movs	r3, #0
 8010314:	60fb      	str	r3, [r7, #12]
 8010316:	4b32      	ldr	r3, [pc, #200]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801031a:	4a31      	ldr	r2, [pc, #196]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 801031c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010320:	6453      	str	r3, [r2, #68]	; 0x44
 8010322:	4b2f      	ldr	r3, [pc, #188]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801032e:	2300      	movs	r3, #0
 8010330:	60bb      	str	r3, [r7, #8]
 8010332:	4b2b      	ldr	r3, [pc, #172]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010336:	4a2a      	ldr	r2, [pc, #168]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010338:	f043 0304 	orr.w	r3, r3, #4
 801033c:	6313      	str	r3, [r2, #48]	; 0x30
 801033e:	4b28      	ldr	r3, [pc, #160]	; (80103e0 <HAL_ADC_MspInit+0x1f0>)
 8010340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010342:	f003 0304 	and.w	r3, r3, #4
 8010346:	60bb      	str	r3, [r7, #8]
 8010348:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 801034a:	2322      	movs	r3, #34	; 0x22
 801034c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801034e:	2303      	movs	r3, #3
 8010350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010352:	2300      	movs	r3, #0
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010356:	f107 031c 	add.w	r3, r7, #28
 801035a:	4619      	mov	r1, r3
 801035c:	4821      	ldr	r0, [pc, #132]	; (80103e4 <HAL_ADC_MspInit+0x1f4>)
 801035e:	f002 fabd 	bl	80128dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8010362:	4b25      	ldr	r3, [pc, #148]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 8010364:	4a25      	ldr	r2, [pc, #148]	; (80103fc <HAL_ADC_MspInit+0x20c>)
 8010366:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8010368:	4b23      	ldr	r3, [pc, #140]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 801036a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801036e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010370:	4b21      	ldr	r3, [pc, #132]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 8010372:	2200      	movs	r2, #0
 8010374:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8010376:	4b20      	ldr	r3, [pc, #128]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 8010378:	2200      	movs	r2, #0
 801037a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 801037c:	4b1e      	ldr	r3, [pc, #120]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 801037e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010382:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010384:	4b1c      	ldr	r3, [pc, #112]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 8010386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801038a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801038c:	4b1a      	ldr	r3, [pc, #104]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 801038e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010392:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8010394:	4b18      	ldr	r3, [pc, #96]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 8010396:	f44f 7280 	mov.w	r2, #256	; 0x100
 801039a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 801039c:	4b16      	ldr	r3, [pc, #88]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 801039e:	2200      	movs	r2, #0
 80103a0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80103a2:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80103a8:	4813      	ldr	r0, [pc, #76]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 80103aa:	f001 fb2f 	bl	8011a0c <HAL_DMA_Init>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 80103b4:	f7ff feea 	bl	801018c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a0f      	ldr	r2, [pc, #60]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 80103bc:	639a      	str	r2, [r3, #56]	; 0x38
 80103be:	4a0e      	ldr	r2, [pc, #56]	; (80103f8 <HAL_ADC_MspInit+0x208>)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80103c4:	2200      	movs	r2, #0
 80103c6:	2100      	movs	r1, #0
 80103c8:	2012      	movs	r0, #18
 80103ca:	f001 fae8 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80103ce:	2012      	movs	r0, #18
 80103d0:	f001 fb01 	bl	80119d6 <HAL_NVIC_EnableIRQ>
}
 80103d4:	bf00      	nop
 80103d6:	3730      	adds	r7, #48	; 0x30
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	40012000 	.word	0x40012000
 80103e0:	40023800 	.word	0x40023800
 80103e4:	40020800 	.word	0x40020800
 80103e8:	40020400 	.word	0x40020400
 80103ec:	2001a208 	.word	0x2001a208
 80103f0:	40026410 	.word	0x40026410
 80103f4:	40012100 	.word	0x40012100
 80103f8:	2001a738 	.word	0x2001a738
 80103fc:	40026440 	.word	0x40026440

08010400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b08a      	sub	sp, #40	; 0x28
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010408:	f107 0314 	add.w	r3, r7, #20
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	605a      	str	r2, [r3, #4]
 8010412:	609a      	str	r2, [r3, #8]
 8010414:	60da      	str	r2, [r3, #12]
 8010416:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a19      	ldr	r2, [pc, #100]	; (8010484 <HAL_SPI_MspInit+0x84>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d12c      	bne.n	801047c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010422:	2300      	movs	r3, #0
 8010424:	613b      	str	r3, [r7, #16]
 8010426:	4b18      	ldr	r3, [pc, #96]	; (8010488 <HAL_SPI_MspInit+0x88>)
 8010428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042a:	4a17      	ldr	r2, [pc, #92]	; (8010488 <HAL_SPI_MspInit+0x88>)
 801042c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010430:	6413      	str	r3, [r2, #64]	; 0x40
 8010432:	4b15      	ldr	r3, [pc, #84]	; (8010488 <HAL_SPI_MspInit+0x88>)
 8010434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801043a:	613b      	str	r3, [r7, #16]
 801043c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801043e:	2300      	movs	r3, #0
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	4b11      	ldr	r3, [pc, #68]	; (8010488 <HAL_SPI_MspInit+0x88>)
 8010444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010446:	4a10      	ldr	r2, [pc, #64]	; (8010488 <HAL_SPI_MspInit+0x88>)
 8010448:	f043 0304 	orr.w	r3, r3, #4
 801044c:	6313      	str	r3, [r2, #48]	; 0x30
 801044e:	4b0e      	ldr	r3, [pc, #56]	; (8010488 <HAL_SPI_MspInit+0x88>)
 8010450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010452:	f003 0304 	and.w	r3, r3, #4
 8010456:	60fb      	str	r3, [r7, #12]
 8010458:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 801045a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010460:	2302      	movs	r3, #2
 8010462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010464:	2300      	movs	r3, #0
 8010466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010468:	2303      	movs	r3, #3
 801046a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801046c:	2306      	movs	r3, #6
 801046e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	4619      	mov	r1, r3
 8010476:	4805      	ldr	r0, [pc, #20]	; (801048c <HAL_SPI_MspInit+0x8c>)
 8010478:	f002 fa30 	bl	80128dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 801047c:	bf00      	nop
 801047e:	3728      	adds	r7, #40	; 0x28
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	40003c00 	.word	0x40003c00
 8010488:	40023800 	.word	0x40023800
 801048c:	40020800 	.word	0x40020800

08010490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a40      	ldr	r2, [pc, #256]	; (80105a0 <HAL_TIM_Base_MspInit+0x110>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d116      	bne.n	80104d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
 80104a6:	4b3f      	ldr	r3, [pc, #252]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104aa:	4a3e      	ldr	r2, [pc, #248]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104ac:	f043 0301 	orr.w	r3, r3, #1
 80104b0:	6453      	str	r3, [r2, #68]	; 0x44
 80104b2:	4b3c      	ldr	r3, [pc, #240]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b6:	f003 0301 	and.w	r3, r3, #1
 80104ba:	617b      	str	r3, [r7, #20]
 80104bc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80104be:	2200      	movs	r2, #0
 80104c0:	2101      	movs	r1, #1
 80104c2:	2019      	movs	r0, #25
 80104c4:	f001 fa6b 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80104c8:	2019      	movs	r0, #25
 80104ca:	f001 fa84 	bl	80119d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80104ce:	e062      	b.n	8010596 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104d8:	d116      	bne.n	8010508 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80104da:	2300      	movs	r3, #0
 80104dc:	613b      	str	r3, [r7, #16]
 80104de:	4b31      	ldr	r3, [pc, #196]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e2:	4a30      	ldr	r2, [pc, #192]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104e4:	f043 0301 	orr.w	r3, r3, #1
 80104e8:	6413      	str	r3, [r2, #64]	; 0x40
 80104ea:	4b2e      	ldr	r3, [pc, #184]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 80104ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ee:	f003 0301 	and.w	r3, r3, #1
 80104f2:	613b      	str	r3, [r7, #16]
 80104f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80104f6:	2200      	movs	r2, #0
 80104f8:	2100      	movs	r1, #0
 80104fa:	201c      	movs	r0, #28
 80104fc:	f001 fa4f 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010500:	201c      	movs	r0, #28
 8010502:	f001 fa68 	bl	80119d6 <HAL_NVIC_EnableIRQ>
}
 8010506:	e046      	b.n	8010596 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a26      	ldr	r2, [pc, #152]	; (80105a8 <HAL_TIM_Base_MspInit+0x118>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d116      	bne.n	8010540 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]
 8010516:	4b23      	ldr	r3, [pc, #140]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 8010518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051a:	4a22      	ldr	r2, [pc, #136]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 801051c:	f043 0308 	orr.w	r3, r3, #8
 8010520:	6413      	str	r3, [r2, #64]	; 0x40
 8010522:	4b20      	ldr	r3, [pc, #128]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 8010524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010526:	f003 0308 	and.w	r3, r3, #8
 801052a:	60fb      	str	r3, [r7, #12]
 801052c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801052e:	2200      	movs	r2, #0
 8010530:	2100      	movs	r1, #0
 8010532:	2032      	movs	r0, #50	; 0x32
 8010534:	f001 fa33 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8010538:	2032      	movs	r0, #50	; 0x32
 801053a:	f001 fa4c 	bl	80119d6 <HAL_NVIC_EnableIRQ>
}
 801053e:	e02a      	b.n	8010596 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a19      	ldr	r2, [pc, #100]	; (80105ac <HAL_TIM_Base_MspInit+0x11c>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d125      	bne.n	8010596 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801054a:	2300      	movs	r3, #0
 801054c:	60bb      	str	r3, [r7, #8]
 801054e:	4b15      	ldr	r3, [pc, #84]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 8010550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010552:	4a14      	ldr	r2, [pc, #80]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 8010554:	f043 0302 	orr.w	r3, r3, #2
 8010558:	6453      	str	r3, [r2, #68]	; 0x44
 801055a:	4b12      	ldr	r3, [pc, #72]	; (80105a4 <HAL_TIM_Base_MspInit+0x114>)
 801055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801055e:	f003 0302 	and.w	r3, r3, #2
 8010562:	60bb      	str	r3, [r7, #8]
 8010564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8010566:	2200      	movs	r2, #0
 8010568:	2102      	movs	r1, #2
 801056a:	202c      	movs	r0, #44	; 0x2c
 801056c:	f001 fa17 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8010570:	202c      	movs	r0, #44	; 0x2c
 8010572:	f001 fa30 	bl	80119d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8010576:	2200      	movs	r2, #0
 8010578:	2100      	movs	r1, #0
 801057a:	202d      	movs	r0, #45	; 0x2d
 801057c:	f001 fa0f 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8010580:	202d      	movs	r0, #45	; 0x2d
 8010582:	f001 fa28 	bl	80119d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8010586:	2200      	movs	r2, #0
 8010588:	2100      	movs	r1, #0
 801058a:	202e      	movs	r0, #46	; 0x2e
 801058c:	f001 fa07 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8010590:	202e      	movs	r0, #46	; 0x2e
 8010592:	f001 fa20 	bl	80119d6 <HAL_NVIC_EnableIRQ>
}
 8010596:	bf00      	nop
 8010598:	3718      	adds	r7, #24
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	40010000 	.word	0x40010000
 80105a4:	40023800 	.word	0x40023800
 80105a8:	40000c00 	.word	0x40000c00
 80105ac:	40010400 	.word	0x40010400

080105b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b08c      	sub	sp, #48	; 0x30
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105b8:	f107 031c 	add.w	r3, r7, #28
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]
 80105c0:	605a      	str	r2, [r3, #4]
 80105c2:	609a      	str	r2, [r3, #8]
 80105c4:	60da      	str	r2, [r3, #12]
 80105c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a3a      	ldr	r2, [pc, #232]	; (80106b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d134      	bne.n	801063c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80105d2:	2300      	movs	r3, #0
 80105d4:	61bb      	str	r3, [r7, #24]
 80105d6:	4b39      	ldr	r3, [pc, #228]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80105d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105da:	4a38      	ldr	r2, [pc, #224]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80105dc:	f043 0302 	orr.w	r3, r3, #2
 80105e0:	6413      	str	r3, [r2, #64]	; 0x40
 80105e2:	4b36      	ldr	r3, [pc, #216]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80105e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e6:	f003 0302 	and.w	r3, r3, #2
 80105ea:	61bb      	str	r3, [r7, #24]
 80105ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105ee:	2300      	movs	r3, #0
 80105f0:	617b      	str	r3, [r7, #20]
 80105f2:	4b32      	ldr	r3, [pc, #200]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80105f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f6:	4a31      	ldr	r2, [pc, #196]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80105f8:	f043 0301 	orr.w	r3, r3, #1
 80105fc:	6313      	str	r3, [r2, #48]	; 0x30
 80105fe:	4b2f      	ldr	r3, [pc, #188]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8010600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801060a:	23c0      	movs	r3, #192	; 0xc0
 801060c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801060e:	2302      	movs	r3, #2
 8010610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010612:	2300      	movs	r3, #0
 8010614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010616:	2300      	movs	r3, #0
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801061a:	2302      	movs	r3, #2
 801061c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801061e:	f107 031c 	add.w	r3, r7, #28
 8010622:	4619      	mov	r1, r3
 8010624:	4826      	ldr	r0, [pc, #152]	; (80106c0 <HAL_TIM_Encoder_MspInit+0x110>)
 8010626:	f002 f959 	bl	80128dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801062a:	2200      	movs	r2, #0
 801062c:	2100      	movs	r1, #0
 801062e:	201d      	movs	r0, #29
 8010630:	f001 f9b5 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8010634:	201d      	movs	r0, #29
 8010636:	f001 f9ce 	bl	80119d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 801063a:	e038      	b.n	80106ae <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a20      	ldr	r2, [pc, #128]	; (80106c4 <HAL_TIM_Encoder_MspInit+0x114>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d133      	bne.n	80106ae <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010646:	2300      	movs	r3, #0
 8010648:	613b      	str	r3, [r7, #16]
 801064a:	4b1c      	ldr	r3, [pc, #112]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 801064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064e:	4a1b      	ldr	r2, [pc, #108]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8010650:	f043 0304 	orr.w	r3, r3, #4
 8010654:	6413      	str	r3, [r2, #64]	; 0x40
 8010656:	4b19      	ldr	r3, [pc, #100]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8010658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801065a:	f003 0304 	and.w	r3, r3, #4
 801065e:	613b      	str	r3, [r7, #16]
 8010660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010662:	2300      	movs	r3, #0
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	4b15      	ldr	r3, [pc, #84]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8010668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066a:	4a14      	ldr	r2, [pc, #80]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 801066c:	f043 0302 	orr.w	r3, r3, #2
 8010670:	6313      	str	r3, [r2, #48]	; 0x30
 8010672:	4b12      	ldr	r3, [pc, #72]	; (80106bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8010674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010676:	f003 0302 	and.w	r3, r3, #2
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801067e:	23c0      	movs	r3, #192	; 0xc0
 8010680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010682:	2302      	movs	r3, #2
 8010684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010686:	2300      	movs	r3, #0
 8010688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801068a:	2300      	movs	r3, #0
 801068c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801068e:	2302      	movs	r3, #2
 8010690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010692:	f107 031c 	add.w	r3, r7, #28
 8010696:	4619      	mov	r1, r3
 8010698:	480b      	ldr	r0, [pc, #44]	; (80106c8 <HAL_TIM_Encoder_MspInit+0x118>)
 801069a:	f002 f91f 	bl	80128dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801069e:	2200      	movs	r2, #0
 80106a0:	2100      	movs	r1, #0
 80106a2:	201e      	movs	r0, #30
 80106a4:	f001 f97b 	bl	801199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80106a8:	201e      	movs	r0, #30
 80106aa:	f001 f994 	bl	80119d6 <HAL_NVIC_EnableIRQ>
}
 80106ae:	bf00      	nop
 80106b0:	3730      	adds	r7, #48	; 0x30
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	40000400 	.word	0x40000400
 80106bc:	40023800 	.word	0x40023800
 80106c0:	40020000 	.word	0x40020000
 80106c4:	40000800 	.word	0x40000800
 80106c8:	40020400 	.word	0x40020400

080106cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08c      	sub	sp, #48	; 0x30
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106d4:	f107 031c 	add.w	r3, r7, #28
 80106d8:	2200      	movs	r2, #0
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	605a      	str	r2, [r3, #4]
 80106de:	609a      	str	r2, [r3, #8]
 80106e0:	60da      	str	r2, [r3, #12]
 80106e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106ec:	d11e      	bne.n	801072c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106ee:	2300      	movs	r3, #0
 80106f0:	61bb      	str	r3, [r7, #24]
 80106f2:	4b43      	ldr	r3, [pc, #268]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 80106f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f6:	4a42      	ldr	r2, [pc, #264]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 80106f8:	f043 0301 	orr.w	r3, r3, #1
 80106fc:	6313      	str	r3, [r2, #48]	; 0x30
 80106fe:	4b40      	ldr	r3, [pc, #256]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	61bb      	str	r3, [r7, #24]
 8010708:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801070a:	2308      	movs	r3, #8
 801070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801070e:	2302      	movs	r3, #2
 8010710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010712:	2300      	movs	r3, #0
 8010714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010716:	2303      	movs	r3, #3
 8010718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801071a:	2301      	movs	r3, #1
 801071c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801071e:	f107 031c 	add.w	r3, r7, #28
 8010722:	4619      	mov	r1, r3
 8010724:	4837      	ldr	r0, [pc, #220]	; (8010804 <HAL_TIM_MspPostInit+0x138>)
 8010726:	f002 f8d9 	bl	80128dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 801072a:	e064      	b.n	80107f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a35      	ldr	r2, [pc, #212]	; (8010808 <HAL_TIM_MspPostInit+0x13c>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d11e      	bne.n	8010774 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010736:	2300      	movs	r3, #0
 8010738:	617b      	str	r3, [r7, #20]
 801073a:	4b31      	ldr	r3, [pc, #196]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 801073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073e:	4a30      	ldr	r2, [pc, #192]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010740:	f043 0301 	orr.w	r3, r3, #1
 8010744:	6313      	str	r3, [r2, #48]	; 0x30
 8010746:	4b2e      	ldr	r3, [pc, #184]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	617b      	str	r3, [r7, #20]
 8010750:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010752:	2302      	movs	r3, #2
 8010754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010756:	2302      	movs	r3, #2
 8010758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801075a:	2300      	movs	r3, #0
 801075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801075e:	2300      	movs	r3, #0
 8010760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8010762:	2302      	movs	r3, #2
 8010764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010766:	f107 031c 	add.w	r3, r7, #28
 801076a:	4619      	mov	r1, r3
 801076c:	4825      	ldr	r0, [pc, #148]	; (8010804 <HAL_TIM_MspPostInit+0x138>)
 801076e:	f002 f8b5 	bl	80128dc <HAL_GPIO_Init>
}
 8010772:	e040      	b.n	80107f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a24      	ldr	r2, [pc, #144]	; (801080c <HAL_TIM_MspPostInit+0x140>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d13b      	bne.n	80107f6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801077e:	2300      	movs	r3, #0
 8010780:	613b      	str	r3, [r7, #16]
 8010782:	4b1f      	ldr	r3, [pc, #124]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010786:	4a1e      	ldr	r2, [pc, #120]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010788:	f043 0301 	orr.w	r3, r3, #1
 801078c:	6313      	str	r3, [r2, #48]	; 0x30
 801078e:	4b1c      	ldr	r3, [pc, #112]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 8010790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010792:	f003 0301 	and.w	r3, r3, #1
 8010796:	613b      	str	r3, [r7, #16]
 8010798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801079a:	2300      	movs	r3, #0
 801079c:	60fb      	str	r3, [r7, #12]
 801079e:	4b18      	ldr	r3, [pc, #96]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 80107a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a2:	4a17      	ldr	r2, [pc, #92]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 80107a4:	f043 0304 	orr.w	r3, r3, #4
 80107a8:	6313      	str	r3, [r2, #48]	; 0x30
 80107aa:	4b15      	ldr	r3, [pc, #84]	; (8010800 <HAL_TIM_MspPostInit+0x134>)
 80107ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ae:	f003 0304 	and.w	r3, r3, #4
 80107b2:	60fb      	str	r3, [r7, #12]
 80107b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80107b6:	2320      	movs	r3, #32
 80107b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107ba:	2302      	movs	r3, #2
 80107bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107be:	2300      	movs	r3, #0
 80107c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107c2:	2300      	movs	r3, #0
 80107c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80107c6:	2303      	movs	r3, #3
 80107c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107ca:	f107 031c 	add.w	r3, r7, #28
 80107ce:	4619      	mov	r1, r3
 80107d0:	480c      	ldr	r0, [pc, #48]	; (8010804 <HAL_TIM_MspPostInit+0x138>)
 80107d2:	f002 f883 	bl	80128dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80107d6:	2340      	movs	r3, #64	; 0x40
 80107d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107da:	2302      	movs	r3, #2
 80107dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107de:	2300      	movs	r3, #0
 80107e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107e2:	2300      	movs	r3, #0
 80107e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80107e6:	2303      	movs	r3, #3
 80107e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107ea:	f107 031c 	add.w	r3, r7, #28
 80107ee:	4619      	mov	r1, r3
 80107f0:	4807      	ldr	r0, [pc, #28]	; (8010810 <HAL_TIM_MspPostInit+0x144>)
 80107f2:	f002 f873 	bl	80128dc <HAL_GPIO_Init>
}
 80107f6:	bf00      	nop
 80107f8:	3730      	adds	r7, #48	; 0x30
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	40023800 	.word	0x40023800
 8010804:	40020000 	.word	0x40020000
 8010808:	40000c00 	.word	0x40000c00
 801080c:	40010400 	.word	0x40010400
 8010810:	40020800 	.word	0x40020800

08010814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b08a      	sub	sp, #40	; 0x28
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801081c:	f107 0314 	add.w	r3, r7, #20
 8010820:	2200      	movs	r2, #0
 8010822:	601a      	str	r2, [r3, #0]
 8010824:	605a      	str	r2, [r3, #4]
 8010826:	609a      	str	r2, [r3, #8]
 8010828:	60da      	str	r2, [r3, #12]
 801082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4a19      	ldr	r2, [pc, #100]	; (8010898 <HAL_UART_MspInit+0x84>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d12c      	bne.n	8010890 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010836:	2300      	movs	r3, #0
 8010838:	613b      	str	r3, [r7, #16]
 801083a:	4b18      	ldr	r3, [pc, #96]	; (801089c <HAL_UART_MspInit+0x88>)
 801083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801083e:	4a17      	ldr	r2, [pc, #92]	; (801089c <HAL_UART_MspInit+0x88>)
 8010840:	f043 0310 	orr.w	r3, r3, #16
 8010844:	6453      	str	r3, [r2, #68]	; 0x44
 8010846:	4b15      	ldr	r3, [pc, #84]	; (801089c <HAL_UART_MspInit+0x88>)
 8010848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801084a:	f003 0310 	and.w	r3, r3, #16
 801084e:	613b      	str	r3, [r7, #16]
 8010850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010852:	2300      	movs	r3, #0
 8010854:	60fb      	str	r3, [r7, #12]
 8010856:	4b11      	ldr	r3, [pc, #68]	; (801089c <HAL_UART_MspInit+0x88>)
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	4a10      	ldr	r2, [pc, #64]	; (801089c <HAL_UART_MspInit+0x88>)
 801085c:	f043 0301 	orr.w	r3, r3, #1
 8010860:	6313      	str	r3, [r2, #48]	; 0x30
 8010862:	4b0e      	ldr	r3, [pc, #56]	; (801089c <HAL_UART_MspInit+0x88>)
 8010864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	60fb      	str	r3, [r7, #12]
 801086c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801086e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010874:	2302      	movs	r3, #2
 8010876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010878:	2300      	movs	r3, #0
 801087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801087c:	2303      	movs	r3, #3
 801087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010880:	2307      	movs	r3, #7
 8010882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010884:	f107 0314 	add.w	r3, r7, #20
 8010888:	4619      	mov	r1, r3
 801088a:	4805      	ldr	r0, [pc, #20]	; (80108a0 <HAL_UART_MspInit+0x8c>)
 801088c:	f002 f826 	bl	80128dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8010890:	bf00      	nop
 8010892:	3728      	adds	r7, #40	; 0x28
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	40011000 	.word	0x40011000
 801089c:	40023800 	.word	0x40023800
 80108a0:	40020000 	.word	0x40020000

080108a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80108a4:	b480      	push	{r7}
 80108a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80108a8:	e7fe      	b.n	80108a8 <NMI_Handler+0x4>

080108aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80108aa:	b480      	push	{r7}
 80108ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80108ae:	e7fe      	b.n	80108ae <HardFault_Handler+0x4>

080108b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80108b0:	b480      	push	{r7}
 80108b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80108b4:	e7fe      	b.n	80108b4 <MemManage_Handler+0x4>

080108b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80108b6:	b480      	push	{r7}
 80108b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80108ba:	e7fe      	b.n	80108ba <BusFault_Handler+0x4>

080108bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80108bc:	b480      	push	{r7}
 80108be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80108c0:	e7fe      	b.n	80108c0 <UsageFault_Handler+0x4>

080108c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80108c2:	b480      	push	{r7}
 80108c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80108c6:	bf00      	nop
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80108d0:	b480      	push	{r7}
 80108d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80108d4:	bf00      	nop
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80108de:	b480      	push	{r7}
 80108e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80108e2:	bf00      	nop
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80108f0:	f000 f9b0 	bl	8010c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80108f4:	bf00      	nop
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80108fc:	f001 fcb8 	bl	8012270 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8010900:	bf00      	nop
 8010902:	bd80      	pop	{r7, pc}

08010904 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8010908:	4803      	ldr	r0, [pc, #12]	; (8010918 <ADC_IRQHandler+0x14>)
 801090a:	f000 fa28 	bl	8010d5e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 801090e:	4803      	ldr	r0, [pc, #12]	; (801091c <ADC_IRQHandler+0x18>)
 8010910:	f000 fa25 	bl	8010d5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8010914:	bf00      	nop
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20019d90 	.word	0x20019d90
 801091c:	2000e0d4 	.word	0x2000e0d4

08010920 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010924:	4802      	ldr	r0, [pc, #8]	; (8010930 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010926:	f003 febe 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801092a:	bf00      	nop
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	2001a2a8 	.word	0x2001a2a8

08010934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010938:	4802      	ldr	r0, [pc, #8]	; (8010944 <TIM2_IRQHandler+0x10>)
 801093a:	f003 feb4 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801093e:	bf00      	nop
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	2001a6f4 	.word	0x2001a6f4

08010948 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 801094c:	4802      	ldr	r0, [pc, #8]	; (8010958 <TIM3_IRQHandler+0x10>)
 801094e:	f003 feaa 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8010952:	bf00      	nop
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	20019cf0 	.word	0x20019cf0

0801095c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010960:	4802      	ldr	r0, [pc, #8]	; (801096c <TIM4_IRQHandler+0x10>)
 8010962:	f003 fea0 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8010966:	bf00      	nop
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	2000e094 	.word	0x2000e094

08010970 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010974:	4802      	ldr	r0, [pc, #8]	; (8010980 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8010976:	f003 fe96 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 801097a:	bf00      	nop
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	2000e050 	.word	0x2000e050

08010984 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010988:	4802      	ldr	r0, [pc, #8]	; (8010994 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 801098a:	f003 fe8c 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 801098e:	bf00      	nop
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	2000e050 	.word	0x2000e050

08010998 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801099c:	4802      	ldr	r0, [pc, #8]	; (80109a8 <TIM8_CC_IRQHandler+0x10>)
 801099e:	f003 fe82 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80109a2:	bf00      	nop
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	2000e050 	.word	0x2000e050

080109ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80109b0:	4802      	ldr	r0, [pc, #8]	; (80109bc <TIM5_IRQHandler+0x10>)
 80109b2:	f003 fe78 	bl	80146a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80109b6:	bf00      	nop
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20019cac 	.word	0x20019cac

080109c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80109c4:	4802      	ldr	r0, [pc, #8]	; (80109d0 <DMA2_Stream0_IRQHandler+0x10>)
 80109c6:	f001 f997 	bl	8011cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80109ca:	bf00      	nop
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	2001a208 	.word	0x2001a208

080109d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80109d8:	4802      	ldr	r0, [pc, #8]	; (80109e4 <DMA2_Stream2_IRQHandler+0x10>)
 80109da:	f001 f98d 	bl	8011cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80109de:	bf00      	nop
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	2001a738 	.word	0x2001a738

080109e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109f4:	2300      	movs	r3, #0
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	e00a      	b.n	8010a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80109fa:	f3af 8000 	nop.w
 80109fe:	4601      	mov	r1, r0
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	60ba      	str	r2, [r7, #8]
 8010a06:	b2ca      	uxtb	r2, r1
 8010a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	617b      	str	r3, [r7, #20]
 8010a10:	697a      	ldr	r2, [r7, #20]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	dbf0      	blt.n	80109fa <_read+0x12>
	}

return len;
 8010a18:	687b      	ldr	r3, [r7, #4]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3718      	adds	r7, #24
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b086      	sub	sp, #24
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	60f8      	str	r0, [r7, #12]
 8010a2a:	60b9      	str	r1, [r7, #8]
 8010a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a2e:	2300      	movs	r3, #0
 8010a30:	617b      	str	r3, [r7, #20]
 8010a32:	e009      	b.n	8010a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	60ba      	str	r2, [r7, #8]
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f8 ffb7 	bl	80099b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	3301      	adds	r3, #1
 8010a46:	617b      	str	r3, [r7, #20]
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	dbf1      	blt.n	8010a34 <_write+0x12>
	}
	return len;
 8010a50:	687b      	ldr	r3, [r7, #4]
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <_close>:

int _close(int file)
{
 8010a5a:	b480      	push	{r7}
 8010a5c:	b083      	sub	sp, #12
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
	return -1;
 8010a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	370c      	adds	r7, #12
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr

08010a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010a72:	b480      	push	{r7}
 8010a74:	b083      	sub	sp, #12
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010a82:	605a      	str	r2, [r3, #4]
	return 0;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <_isatty>:

int _isatty(int file)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
	return 1;
 8010a9a:	2301      	movs	r3, #1
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
	...

08010ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010acc:	4a14      	ldr	r2, [pc, #80]	; (8010b20 <_sbrk+0x5c>)
 8010ace:	4b15      	ldr	r3, [pc, #84]	; (8010b24 <_sbrk+0x60>)
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010ad8:	4b13      	ldr	r3, [pc, #76]	; (8010b28 <_sbrk+0x64>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d102      	bne.n	8010ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010ae0:	4b11      	ldr	r3, [pc, #68]	; (8010b28 <_sbrk+0x64>)
 8010ae2:	4a12      	ldr	r2, [pc, #72]	; (8010b2c <_sbrk+0x68>)
 8010ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010ae6:	4b10      	ldr	r3, [pc, #64]	; (8010b28 <_sbrk+0x64>)
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4413      	add	r3, r2
 8010aee:	693a      	ldr	r2, [r7, #16]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d207      	bcs.n	8010b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010af4:	f005 fabe 	bl	8016074 <__errno>
 8010af8:	4602      	mov	r2, r0
 8010afa:	230c      	movs	r3, #12
 8010afc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010afe:	f04f 33ff 	mov.w	r3, #4294967295
 8010b02:	e009      	b.n	8010b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010b04:	4b08      	ldr	r3, [pc, #32]	; (8010b28 <_sbrk+0x64>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010b0a:	4b07      	ldr	r3, [pc, #28]	; (8010b28 <_sbrk+0x64>)
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4413      	add	r3, r2
 8010b12:	4a05      	ldr	r2, [pc, #20]	; (8010b28 <_sbrk+0x64>)
 8010b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010b16:	68fb      	ldr	r3, [r7, #12]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3718      	adds	r7, #24
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20020000 	.word	0x20020000
 8010b24:	00000400 	.word	0x00000400
 8010b28:	2000dffc 	.word	0x2000dffc
 8010b2c:	2001a7c8 	.word	0x2001a7c8

08010b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010b30:	b480      	push	{r7}
 8010b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010b34:	4b08      	ldr	r3, [pc, #32]	; (8010b58 <SystemInit+0x28>)
 8010b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b3a:	4a07      	ldr	r2, [pc, #28]	; (8010b58 <SystemInit+0x28>)
 8010b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010b44:	4b04      	ldr	r3, [pc, #16]	; (8010b58 <SystemInit+0x28>)
 8010b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8010b4c:	bf00      	nop
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	e000ed00 	.word	0xe000ed00

08010b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010b62:	e003      	b.n	8010b6c <LoopCopyDataInit>

08010b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010b64:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010b6a:	3104      	adds	r1, #4

08010b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010b6c:	480b      	ldr	r0, [pc, #44]	; (8010b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010b6e:	4b0c      	ldr	r3, [pc, #48]	; (8010ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010b74:	d3f6      	bcc.n	8010b64 <CopyDataInit>
  ldr  r2, =_sbss
 8010b76:	4a0b      	ldr	r2, [pc, #44]	; (8010ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010b78:	e002      	b.n	8010b80 <LoopFillZerobss>

08010b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010b7c:	f842 3b04 	str.w	r3, [r2], #4

08010b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010b80:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010b84:	d3f9      	bcc.n	8010b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010b86:	f7ff ffd3 	bl	8010b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010b8a:	f005 fa79 	bl	8016080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010b8e:	f7fe fd89 	bl	800f6a4 <main>
  bx  lr    
 8010b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010b98:	08018c68 	.word	0x08018c68
  ldr  r0, =_sdata
 8010b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010ba0:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8010ba4:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8010ba8:	2001a7c8 	.word	0x2001a7c8

08010bac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010bac:	e7fe      	b.n	8010bac <CAN1_RX0_IRQHandler>
	...

08010bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010bb4:	4b0e      	ldr	r3, [pc, #56]	; (8010bf0 <HAL_Init+0x40>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a0d      	ldr	r2, [pc, #52]	; (8010bf0 <HAL_Init+0x40>)
 8010bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <HAL_Init+0x40>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a0a      	ldr	r2, [pc, #40]	; (8010bf0 <HAL_Init+0x40>)
 8010bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010bcc:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <HAL_Init+0x40>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a07      	ldr	r2, [pc, #28]	; (8010bf0 <HAL_Init+0x40>)
 8010bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010bd8:	2003      	movs	r0, #3
 8010bda:	f000 fed5 	bl	8011988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010bde:	2000      	movs	r0, #0
 8010be0:	f000 f808 	bl	8010bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010be4:	f7ff fad6 	bl	8010194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	40023c00 	.word	0x40023c00

08010bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010bfc:	4b12      	ldr	r3, [pc, #72]	; (8010c48 <HAL_InitTick+0x54>)
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	4b12      	ldr	r3, [pc, #72]	; (8010c4c <HAL_InitTick+0x58>)
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	4619      	mov	r1, r3
 8010c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c12:	4618      	mov	r0, r3
 8010c14:	f000 feed 	bl	80119f2 <HAL_SYSTICK_Config>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e00e      	b.n	8010c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b0f      	cmp	r3, #15
 8010c26:	d80a      	bhi.n	8010c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010c28:	2200      	movs	r2, #0
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c30:	f000 feb5 	bl	801199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010c34:	4a06      	ldr	r2, [pc, #24]	; (8010c50 <HAL_InitTick+0x5c>)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e000      	b.n	8010c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010c3e:	2301      	movs	r3, #1
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	20000080 	.word	0x20000080
 8010c4c:	20000088 	.word	0x20000088
 8010c50:	20000084 	.word	0x20000084

08010c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010c54:	b480      	push	{r7}
 8010c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010c58:	4b06      	ldr	r3, [pc, #24]	; (8010c74 <HAL_IncTick+0x20>)
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	4b06      	ldr	r3, [pc, #24]	; (8010c78 <HAL_IncTick+0x24>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4413      	add	r3, r2
 8010c64:	4a04      	ldr	r2, [pc, #16]	; (8010c78 <HAL_IncTick+0x24>)
 8010c66:	6013      	str	r3, [r2, #0]
}
 8010c68:	bf00      	nop
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	20000088 	.word	0x20000088
 8010c78:	2001a7a0 	.word	0x2001a7a0

08010c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8010c80:	4b03      	ldr	r3, [pc, #12]	; (8010c90 <HAL_GetTick+0x14>)
 8010c82:	681b      	ldr	r3, [r3, #0]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	2001a7a0 	.word	0x2001a7a0

08010c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010c9c:	f7ff ffee 	bl	8010c7c <HAL_GetTick>
 8010ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cac:	d005      	beq.n	8010cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010cae:	4b09      	ldr	r3, [pc, #36]	; (8010cd4 <HAL_Delay+0x40>)
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010cba:	bf00      	nop
 8010cbc:	f7ff ffde 	bl	8010c7c <HAL_GetTick>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d8f7      	bhi.n	8010cbc <HAL_Delay+0x28>
  {
  }
}
 8010ccc:	bf00      	nop
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20000088 	.word	0x20000088

08010cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010cea:	2301      	movs	r3, #1
 8010cec:	e033      	b.n	8010d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d109      	bne.n	8010d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7ff fa7a 	bl	80101f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d0e:	f003 0310 	and.w	r3, r3, #16
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d118      	bne.n	8010d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010d1e:	f023 0302 	bic.w	r3, r3, #2
 8010d22:	f043 0202 	orr.w	r2, r3, #2
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 fbd4 	bl	80114d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3a:	f023 0303 	bic.w	r3, r3, #3
 8010d3e:	f043 0201 	orr.w	r2, r3, #1
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	641a      	str	r2, [r3, #64]	; 0x40
 8010d46:	e001      	b.n	8010d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b084      	sub	sp, #16
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8010d66:	2300      	movs	r3, #0
 8010d68:	60fb      	str	r3, [r7, #12]
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f003 0302 	and.w	r3, r3, #2
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	bf0c      	ite	eq
 8010d7c:	2301      	moveq	r3, #1
 8010d7e:	2300      	movne	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	f003 0320 	and.w	r3, r3, #32
 8010d8e:	2b20      	cmp	r3, #32
 8010d90:	bf0c      	ite	eq
 8010d92:	2301      	moveq	r3, #1
 8010d94:	2300      	movne	r3, #0
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d049      	beq.n	8010e34 <HAL_ADC_IRQHandler+0xd6>
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d046      	beq.n	8010e34 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010daa:	f003 0310 	and.w	r3, r3, #16
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d105      	bne.n	8010dbe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d12b      	bne.n	8010e24 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d127      	bne.n	8010e24 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d006      	beq.n	8010df0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d119      	bne.n	8010e24 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	685a      	ldr	r2, [r3, #4]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f022 0220 	bic.w	r2, r2, #32
 8010dfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d105      	bne.n	8010e24 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e1c:	f043 0201 	orr.w	r2, r3, #1
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7fd fe43 	bl	800eab0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f06f 0212 	mvn.w	r2, #18
 8010e32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0304 	and.w	r3, r3, #4
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	bf0c      	ite	eq
 8010e42:	2301      	moveq	r3, #1
 8010e44:	2300      	movne	r3, #0
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e54:	2b80      	cmp	r3, #128	; 0x80
 8010e56:	bf0c      	ite	eq
 8010e58:	2301      	moveq	r3, #1
 8010e5a:	2300      	movne	r3, #0
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d057      	beq.n	8010f16 <HAL_ADC_IRQHandler+0x1b8>
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d054      	beq.n	8010f16 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e70:	f003 0310 	and.w	r3, r3, #16
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d105      	bne.n	8010e84 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d139      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d006      	beq.n	8010eae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	689b      	ldr	r3, [r3, #8]
 8010ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d12b      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d124      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d11d      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d119      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	685a      	ldr	r2, [r3, #4]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ee0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d105      	bne.n	8010f06 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efe:	f043 0201 	orr.w	r2, r3, #1
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 fc64 	bl	80117d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f06f 020c 	mvn.w	r2, #12
 8010f14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	bf0c      	ite	eq
 8010f24:	2301      	moveq	r3, #1
 8010f26:	2300      	movne	r3, #0
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f36:	2b40      	cmp	r3, #64	; 0x40
 8010f38:	bf0c      	ite	eq
 8010f3a:	2301      	moveq	r3, #1
 8010f3c:	2300      	movne	r3, #0
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d017      	beq.n	8010f78 <HAL_ADC_IRQHandler+0x21a>
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d014      	beq.n	8010f78 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d10d      	bne.n	8010f78 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 f97f 	bl	801126c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f06f 0201 	mvn.w	r2, #1
 8010f76:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f003 0320 	and.w	r3, r3, #32
 8010f82:	2b20      	cmp	r3, #32
 8010f84:	bf0c      	ite	eq
 8010f86:	2301      	moveq	r3, #1
 8010f88:	2300      	movne	r3, #0
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010f9c:	bf0c      	ite	eq
 8010f9e:	2301      	moveq	r3, #1
 8010fa0:	2300      	movne	r3, #0
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d015      	beq.n	8010fd8 <HAL_ADC_IRQHandler+0x27a>
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d012      	beq.n	8010fd8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fb6:	f043 0202 	orr.w	r2, r3, #2
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f06f 0220 	mvn.w	r2, #32
 8010fc6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f000 f959 	bl	8011280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f06f 0220 	mvn.w	r2, #32
 8010fd6:	601a      	str	r2, [r3, #0]
  }
}
 8010fd8:	bf00      	nop
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010fec:	2300      	movs	r3, #0
 8010fee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d101      	bne.n	8010ffe <HAL_ADC_Start_DMA+0x1e>
 8010ffa:	2302      	movs	r3, #2
 8010ffc:	e0cc      	b.n	8011198 <HAL_ADC_Start_DMA+0x1b8>
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2201      	movs	r2, #1
 8011002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	f003 0301 	and.w	r3, r3, #1
 8011010:	2b01      	cmp	r3, #1
 8011012:	d018      	beq.n	8011046 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	689a      	ldr	r2, [r3, #8]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f042 0201 	orr.w	r2, r2, #1
 8011022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011024:	4b5e      	ldr	r3, [pc, #376]	; (80111a0 <HAL_ADC_Start_DMA+0x1c0>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a5e      	ldr	r2, [pc, #376]	; (80111a4 <HAL_ADC_Start_DMA+0x1c4>)
 801102a:	fba2 2303 	umull	r2, r3, r2, r3
 801102e:	0c9a      	lsrs	r2, r3, #18
 8011030:	4613      	mov	r3, r2
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011038:	e002      	b.n	8011040 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	3b01      	subs	r3, #1
 801103e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1f9      	bne.n	801103a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	f003 0301 	and.w	r3, r3, #1
 8011050:	2b01      	cmp	r3, #1
 8011052:	f040 80a0 	bne.w	8011196 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801105e:	f023 0301 	bic.w	r3, r3, #1
 8011062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011074:	2b00      	cmp	r3, #0
 8011076:	d007      	beq.n	8011088 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011094:	d106      	bne.n	80110a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801109a:	f023 0206 	bic.w	r2, r3, #6
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	645a      	str	r2, [r3, #68]	; 0x44
 80110a2:	e002      	b.n	80110aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2200      	movs	r2, #0
 80110a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80110b2:	4b3d      	ldr	r3, [pc, #244]	; (80111a8 <HAL_ADC_Start_DMA+0x1c8>)
 80110b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ba:	4a3c      	ldr	r2, [pc, #240]	; (80111ac <HAL_ADC_Start_DMA+0x1cc>)
 80110bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110c2:	4a3b      	ldr	r2, [pc, #236]	; (80111b0 <HAL_ADC_Start_DMA+0x1d0>)
 80110c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ca:	4a3a      	ldr	r2, [pc, #232]	; (80111b4 <HAL_ADC_Start_DMA+0x1d4>)
 80110cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80110d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	685a      	ldr	r2, [r3, #4]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80110e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	689a      	ldr	r2, [r3, #8]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80110f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	334c      	adds	r3, #76	; 0x4c
 8011102:	4619      	mov	r1, r3
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f000 fd2e 	bl	8011b68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	f003 031f 	and.w	r3, r3, #31
 8011114:	2b00      	cmp	r3, #0
 8011116:	d12a      	bne.n	801116e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a26      	ldr	r2, [pc, #152]	; (80111b8 <HAL_ADC_Start_DMA+0x1d8>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d015      	beq.n	801114e <HAL_ADC_Start_DMA+0x16e>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a25      	ldr	r2, [pc, #148]	; (80111bc <HAL_ADC_Start_DMA+0x1dc>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d105      	bne.n	8011138 <HAL_ADC_Start_DMA+0x158>
 801112c:	4b1e      	ldr	r3, [pc, #120]	; (80111a8 <HAL_ADC_Start_DMA+0x1c8>)
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	f003 031f 	and.w	r3, r3, #31
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00a      	beq.n	801114e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a20      	ldr	r2, [pc, #128]	; (80111c0 <HAL_ADC_Start_DMA+0x1e0>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d129      	bne.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
 8011142:	4b19      	ldr	r3, [pc, #100]	; (80111a8 <HAL_ADC_Start_DMA+0x1c8>)
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	f003 031f 	and.w	r3, r3, #31
 801114a:	2b0f      	cmp	r3, #15
 801114c:	d823      	bhi.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011158:	2b00      	cmp	r3, #0
 801115a:	d11c      	bne.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	689a      	ldr	r2, [r3, #8]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801116a:	609a      	str	r2, [r3, #8]
 801116c:	e013      	b.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a11      	ldr	r2, [pc, #68]	; (80111b8 <HAL_ADC_Start_DMA+0x1d8>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d10e      	bne.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011182:	2b00      	cmp	r3, #0
 8011184:	d107      	bne.n	8011196 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	689a      	ldr	r2, [r3, #8]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011194:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3718      	adds	r7, #24
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	20000080 	.word	0x20000080
 80111a4:	431bde83 	.word	0x431bde83
 80111a8:	40012300 	.word	0x40012300
 80111ac:	080116d1 	.word	0x080116d1
 80111b0:	0801178b 	.word	0x0801178b
 80111b4:	080117a7 	.word	0x080117a7
 80111b8:	40012000 	.word	0x40012000
 80111bc:	40012100 	.word	0x40012100
 80111c0:	40012200 	.word	0x40012200

080111c4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d101      	bne.n	80111de <HAL_ADC_Stop_DMA+0x1a>
 80111da:	2302      	movs	r3, #2
 80111dc:	e038      	b.n	8011250 <HAL_ADC_Stop_DMA+0x8c>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2201      	movs	r2, #1
 80111e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	689a      	ldr	r2, [r3, #8]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f022 0201 	bic.w	r2, r2, #1
 80111f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	f003 0301 	and.w	r3, r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	d120      	bne.n	8011246 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	689a      	ldr	r2, [r3, #8]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011212:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011218:	4618      	mov	r0, r3
 801121a:	f000 fcfd 	bl	8011c18 <HAL_DMA_Abort>
 801121e:	4603      	mov	r3, r0
 8011220:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	685a      	ldr	r2, [r3, #4]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8011230:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011236:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801123a:	f023 0301 	bic.w	r3, r3, #1
 801123e:	f043 0201 	orr.w	r2, r3, #1
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 801124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8011260:	bf00      	nop
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8011274:	bf00      	nop
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801129e:	2300      	movs	r3, #0
 80112a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d101      	bne.n	80112b0 <HAL_ADC_ConfigChannel+0x1c>
 80112ac:	2302      	movs	r3, #2
 80112ae:	e105      	b.n	80114bc <HAL_ADC_ConfigChannel+0x228>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2201      	movs	r2, #1
 80112b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2b09      	cmp	r3, #9
 80112be:	d925      	bls.n	801130c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68d9      	ldr	r1, [r3, #12]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	4613      	mov	r3, r2
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	3b1e      	subs	r3, #30
 80112d6:	2207      	movs	r2, #7
 80112d8:	fa02 f303 	lsl.w	r3, r2, r3
 80112dc:	43da      	mvns	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	400a      	ands	r2, r1
 80112e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	68d9      	ldr	r1, [r3, #12]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	689a      	ldr	r2, [r3, #8]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	4618      	mov	r0, r3
 80112f8:	4603      	mov	r3, r0
 80112fa:	005b      	lsls	r3, r3, #1
 80112fc:	4403      	add	r3, r0
 80112fe:	3b1e      	subs	r3, #30
 8011300:	409a      	lsls	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	430a      	orrs	r2, r1
 8011308:	60da      	str	r2, [r3, #12]
 801130a:	e022      	b.n	8011352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	6919      	ldr	r1, [r3, #16]
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	b29b      	uxth	r3, r3
 8011318:	461a      	mov	r2, r3
 801131a:	4613      	mov	r3, r2
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	2207      	movs	r2, #7
 8011322:	fa02 f303 	lsl.w	r3, r2, r3
 8011326:	43da      	mvns	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	400a      	ands	r2, r1
 801132e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	6919      	ldr	r1, [r3, #16]
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	689a      	ldr	r2, [r3, #8]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	b29b      	uxth	r3, r3
 8011340:	4618      	mov	r0, r3
 8011342:	4603      	mov	r3, r0
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	4403      	add	r3, r0
 8011348:	409a      	lsls	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	430a      	orrs	r2, r1
 8011350:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	2b06      	cmp	r3, #6
 8011358:	d824      	bhi.n	80113a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	685a      	ldr	r2, [r3, #4]
 8011364:	4613      	mov	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	3b05      	subs	r3, #5
 801136c:	221f      	movs	r2, #31
 801136e:	fa02 f303 	lsl.w	r3, r2, r3
 8011372:	43da      	mvns	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	400a      	ands	r2, r1
 801137a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	b29b      	uxth	r3, r3
 8011388:	4618      	mov	r0, r3
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	685a      	ldr	r2, [r3, #4]
 801138e:	4613      	mov	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	3b05      	subs	r3, #5
 8011396:	fa00 f203 	lsl.w	r2, r0, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	430a      	orrs	r2, r1
 80113a0:	635a      	str	r2, [r3, #52]	; 0x34
 80113a2:	e04c      	b.n	801143e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	2b0c      	cmp	r3, #12
 80113aa:	d824      	bhi.n	80113f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	685a      	ldr	r2, [r3, #4]
 80113b6:	4613      	mov	r3, r2
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	3b23      	subs	r3, #35	; 0x23
 80113be:	221f      	movs	r2, #31
 80113c0:	fa02 f303 	lsl.w	r3, r2, r3
 80113c4:	43da      	mvns	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	400a      	ands	r2, r1
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	4618      	mov	r0, r3
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	4613      	mov	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4413      	add	r3, r2
 80113e6:	3b23      	subs	r3, #35	; 0x23
 80113e8:	fa00 f203 	lsl.w	r2, r0, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	430a      	orrs	r2, r1
 80113f2:	631a      	str	r2, [r3, #48]	; 0x30
 80113f4:	e023      	b.n	801143e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	4613      	mov	r3, r2
 8011402:	009b      	lsls	r3, r3, #2
 8011404:	4413      	add	r3, r2
 8011406:	3b41      	subs	r3, #65	; 0x41
 8011408:	221f      	movs	r2, #31
 801140a:	fa02 f303 	lsl.w	r3, r2, r3
 801140e:	43da      	mvns	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	400a      	ands	r2, r1
 8011416:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	b29b      	uxth	r3, r3
 8011424:	4618      	mov	r0, r3
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	685a      	ldr	r2, [r3, #4]
 801142a:	4613      	mov	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	4413      	add	r3, r2
 8011430:	3b41      	subs	r3, #65	; 0x41
 8011432:	fa00 f203 	lsl.w	r2, r0, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	430a      	orrs	r2, r1
 801143c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801143e:	4b22      	ldr	r3, [pc, #136]	; (80114c8 <HAL_ADC_ConfigChannel+0x234>)
 8011440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4a21      	ldr	r2, [pc, #132]	; (80114cc <HAL_ADC_ConfigChannel+0x238>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d109      	bne.n	8011460 <HAL_ADC_ConfigChannel+0x1cc>
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b12      	cmp	r3, #18
 8011452:	d105      	bne.n	8011460 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a19      	ldr	r2, [pc, #100]	; (80114cc <HAL_ADC_ConfigChannel+0x238>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d123      	bne.n	80114b2 <HAL_ADC_ConfigChannel+0x21e>
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b10      	cmp	r3, #16
 8011470:	d003      	beq.n	801147a <HAL_ADC_ConfigChannel+0x1e6>
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b11      	cmp	r3, #17
 8011478:	d11b      	bne.n	80114b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2b10      	cmp	r3, #16
 801148c:	d111      	bne.n	80114b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801148e:	4b10      	ldr	r3, [pc, #64]	; (80114d0 <HAL_ADC_ConfigChannel+0x23c>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4a10      	ldr	r2, [pc, #64]	; (80114d4 <HAL_ADC_ConfigChannel+0x240>)
 8011494:	fba2 2303 	umull	r2, r3, r2, r3
 8011498:	0c9a      	lsrs	r2, r3, #18
 801149a:	4613      	mov	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80114a4:	e002      	b.n	80114ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	3b01      	subs	r3, #1
 80114aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1f9      	bne.n	80114a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3714      	adds	r7, #20
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr
 80114c8:	40012300 	.word	0x40012300
 80114cc:	40012000 	.word	0x40012000
 80114d0:	20000080 	.word	0x20000080
 80114d4:	431bde83 	.word	0x431bde83

080114d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80114e0:	4b79      	ldr	r3, [pc, #484]	; (80116c8 <ADC_Init+0x1f0>)
 80114e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	431a      	orrs	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801150c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	6859      	ldr	r1, [r3, #4]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	691b      	ldr	r3, [r3, #16]
 8011518:	021a      	lsls	r2, r3, #8
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	430a      	orrs	r2, r1
 8011520:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	685a      	ldr	r2, [r3, #4]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	6859      	ldr	r1, [r3, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	689a      	ldr	r2, [r3, #8]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	430a      	orrs	r2, r1
 8011542:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	689a      	ldr	r2, [r3, #8]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	6899      	ldr	r1, [r3, #8]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	430a      	orrs	r2, r1
 8011564:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156a:	4a58      	ldr	r2, [pc, #352]	; (80116cc <ADC_Init+0x1f4>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d022      	beq.n	80115b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	689a      	ldr	r2, [r3, #8]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801157e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	6899      	ldr	r1, [r3, #8]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	430a      	orrs	r2, r1
 8011590:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	689a      	ldr	r2, [r3, #8]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80115a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6899      	ldr	r1, [r3, #8]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	430a      	orrs	r2, r1
 80115b2:	609a      	str	r2, [r3, #8]
 80115b4:	e00f      	b.n	80115d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	689a      	ldr	r2, [r3, #8]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80115c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	689a      	ldr	r2, [r3, #8]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80115d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	689a      	ldr	r2, [r3, #8]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f022 0202 	bic.w	r2, r2, #2
 80115e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6899      	ldr	r1, [r3, #8]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7e1b      	ldrb	r3, [r3, #24]
 80115f0:	005a      	lsls	r2, r3, #1
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	430a      	orrs	r2, r1
 80115f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d01b      	beq.n	801163c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	685a      	ldr	r2, [r3, #4]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011612:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011622:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6859      	ldr	r1, [r3, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801162e:	3b01      	subs	r3, #1
 8011630:	035a      	lsls	r2, r3, #13
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	430a      	orrs	r2, r1
 8011638:	605a      	str	r2, [r3, #4]
 801163a:	e007      	b.n	801164c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801164a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801165a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	69db      	ldr	r3, [r3, #28]
 8011666:	3b01      	subs	r3, #1
 8011668:	051a      	lsls	r2, r3, #20
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	430a      	orrs	r2, r1
 8011670:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	689a      	ldr	r2, [r3, #8]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	6899      	ldr	r1, [r3, #8]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801168e:	025a      	lsls	r2, r3, #9
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	430a      	orrs	r2, r1
 8011696:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	689a      	ldr	r2, [r3, #8]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	6899      	ldr	r1, [r3, #8]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	695b      	ldr	r3, [r3, #20]
 80116b2:	029a      	lsls	r2, r3, #10
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	430a      	orrs	r2, r1
 80116ba:	609a      	str	r2, [r3, #8]
}
 80116bc:	bf00      	nop
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	40012300 	.word	0x40012300
 80116cc:	0f000001 	.word	0x0f000001

080116d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d13c      	bne.n	8011764 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011700:	2b00      	cmp	r3, #0
 8011702:	d12b      	bne.n	801175c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011708:	2b00      	cmp	r3, #0
 801170a:	d127      	bne.n	801175c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011712:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011716:	2b00      	cmp	r3, #0
 8011718:	d006      	beq.n	8011728 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011724:	2b00      	cmp	r3, #0
 8011726:	d119      	bne.n	801175c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	685a      	ldr	r2, [r3, #4]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f022 0220 	bic.w	r2, r2, #32
 8011736:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801173c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801174c:	2b00      	cmp	r3, #0
 801174e:	d105      	bne.n	801175c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011754:	f043 0201 	orr.w	r2, r3, #1
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f7fd f9a7 	bl	800eab0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011762:	e00e      	b.n	8011782 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011768:	f003 0310 	and.w	r3, r3, #16
 801176c:	2b00      	cmp	r3, #0
 801176e:	d003      	beq.n	8011778 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f7ff fd85 	bl	8011280 <HAL_ADC_ErrorCallback>
}
 8011776:	e004      	b.n	8011782 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	4798      	blx	r3
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b084      	sub	sp, #16
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011796:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7ff fd5d 	bl	8011258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801179e:	bf00      	nop
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2240      	movs	r2, #64	; 0x40
 80117b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117be:	f043 0204 	orr.w	r2, r3, #4
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f7ff fd5a 	bl	8011280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80117cc:	bf00      	nop
 80117ce:	3710      	adds	r7, #16
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f003 0307 	and.w	r3, r3, #7
 80117f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80117f8:	4b0c      	ldr	r3, [pc, #48]	; (801182c <__NVIC_SetPriorityGrouping+0x44>)
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011804:	4013      	ands	r3, r2
 8011806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801181a:	4a04      	ldr	r2, [pc, #16]	; (801182c <__NVIC_SetPriorityGrouping+0x44>)
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	60d3      	str	r3, [r2, #12]
}
 8011820:	bf00      	nop
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	e000ed00 	.word	0xe000ed00

08011830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011830:	b480      	push	{r7}
 8011832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011834:	4b04      	ldr	r3, [pc, #16]	; (8011848 <__NVIC_GetPriorityGrouping+0x18>)
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	0a1b      	lsrs	r3, r3, #8
 801183a:	f003 0307 	and.w	r3, r3, #7
}
 801183e:	4618      	mov	r0, r3
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	e000ed00 	.word	0xe000ed00

0801184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801185a:	2b00      	cmp	r3, #0
 801185c:	db0b      	blt.n	8011876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	f003 021f 	and.w	r2, r3, #31
 8011864:	4907      	ldr	r1, [pc, #28]	; (8011884 <__NVIC_EnableIRQ+0x38>)
 8011866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801186a:	095b      	lsrs	r3, r3, #5
 801186c:	2001      	movs	r0, #1
 801186e:	fa00 f202 	lsl.w	r2, r0, r2
 8011872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011876:	bf00      	nop
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	e000e100 	.word	0xe000e100

08011888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011898:	2b00      	cmp	r3, #0
 801189a:	db0a      	blt.n	80118b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	490c      	ldr	r1, [pc, #48]	; (80118d4 <__NVIC_SetPriority+0x4c>)
 80118a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118a6:	0112      	lsls	r2, r2, #4
 80118a8:	b2d2      	uxtb	r2, r2
 80118aa:	440b      	add	r3, r1
 80118ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80118b0:	e00a      	b.n	80118c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	b2da      	uxtb	r2, r3
 80118b6:	4908      	ldr	r1, [pc, #32]	; (80118d8 <__NVIC_SetPriority+0x50>)
 80118b8:	79fb      	ldrb	r3, [r7, #7]
 80118ba:	f003 030f 	and.w	r3, r3, #15
 80118be:	3b04      	subs	r3, #4
 80118c0:	0112      	lsls	r2, r2, #4
 80118c2:	b2d2      	uxtb	r2, r2
 80118c4:	440b      	add	r3, r1
 80118c6:	761a      	strb	r2, [r3, #24]
}
 80118c8:	bf00      	nop
 80118ca:	370c      	adds	r7, #12
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr
 80118d4:	e000e100 	.word	0xe000e100
 80118d8:	e000ed00 	.word	0xe000ed00

080118dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80118dc:	b480      	push	{r7}
 80118de:	b089      	sub	sp, #36	; 0x24
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f003 0307 	and.w	r3, r3, #7
 80118ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	f1c3 0307 	rsb	r3, r3, #7
 80118f6:	2b04      	cmp	r3, #4
 80118f8:	bf28      	it	cs
 80118fa:	2304      	movcs	r3, #4
 80118fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	3304      	adds	r3, #4
 8011902:	2b06      	cmp	r3, #6
 8011904:	d902      	bls.n	801190c <NVIC_EncodePriority+0x30>
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	3b03      	subs	r3, #3
 801190a:	e000      	b.n	801190e <NVIC_EncodePriority+0x32>
 801190c:	2300      	movs	r3, #0
 801190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011910:	f04f 32ff 	mov.w	r2, #4294967295
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	fa02 f303 	lsl.w	r3, r2, r3
 801191a:	43da      	mvns	r2, r3
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	401a      	ands	r2, r3
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011924:	f04f 31ff 	mov.w	r1, #4294967295
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	fa01 f303 	lsl.w	r3, r1, r3
 801192e:	43d9      	mvns	r1, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011934:	4313      	orrs	r3, r2
         );
}
 8011936:	4618      	mov	r0, r3
 8011938:	3724      	adds	r7, #36	; 0x24
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
	...

08011944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3b01      	subs	r3, #1
 8011950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011954:	d301      	bcc.n	801195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011956:	2301      	movs	r3, #1
 8011958:	e00f      	b.n	801197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801195a:	4a0a      	ldr	r2, [pc, #40]	; (8011984 <SysTick_Config+0x40>)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3b01      	subs	r3, #1
 8011960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011962:	210f      	movs	r1, #15
 8011964:	f04f 30ff 	mov.w	r0, #4294967295
 8011968:	f7ff ff8e 	bl	8011888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801196c:	4b05      	ldr	r3, [pc, #20]	; (8011984 <SysTick_Config+0x40>)
 801196e:	2200      	movs	r2, #0
 8011970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011972:	4b04      	ldr	r3, [pc, #16]	; (8011984 <SysTick_Config+0x40>)
 8011974:	2207      	movs	r2, #7
 8011976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	e000e010 	.word	0xe000e010

08011988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff ff29 	bl	80117e8 <__NVIC_SetPriorityGrouping>
}
 8011996:	bf00      	nop
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801199e:	b580      	push	{r7, lr}
 80119a0:	b086      	sub	sp, #24
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	4603      	mov	r3, r0
 80119a6:	60b9      	str	r1, [r7, #8]
 80119a8:	607a      	str	r2, [r7, #4]
 80119aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80119ac:	2300      	movs	r3, #0
 80119ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80119b0:	f7ff ff3e 	bl	8011830 <__NVIC_GetPriorityGrouping>
 80119b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	68b9      	ldr	r1, [r7, #8]
 80119ba:	6978      	ldr	r0, [r7, #20]
 80119bc:	f7ff ff8e 	bl	80118dc <NVIC_EncodePriority>
 80119c0:	4602      	mov	r2, r0
 80119c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119c6:	4611      	mov	r1, r2
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ff ff5d 	bl	8011888 <__NVIC_SetPriority>
}
 80119ce:	bf00      	nop
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b082      	sub	sp, #8
 80119da:	af00      	add	r7, sp, #0
 80119dc:	4603      	mov	r3, r0
 80119de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80119e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff ff31 	bl	801184c <__NVIC_EnableIRQ>
}
 80119ea:	bf00      	nop
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff ffa2 	bl	8011944 <SysTick_Config>
 8011a00:	4603      	mov	r3, r0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3708      	adds	r7, #8
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
	...

08011a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011a14:	2300      	movs	r3, #0
 8011a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011a18:	f7ff f930 	bl	8010c7c <HAL_GetTick>
 8011a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	e099      	b.n	8011b5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2202      	movs	r2, #2
 8011a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f022 0201 	bic.w	r2, r2, #1
 8011a46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011a48:	e00f      	b.n	8011a6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011a4a:	f7ff f917 	bl	8010c7c <HAL_GetTick>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	1ad3      	subs	r3, r2, r3
 8011a54:	2b05      	cmp	r3, #5
 8011a56:	d908      	bls.n	8011a6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2220      	movs	r2, #32
 8011a5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2203      	movs	r2, #3
 8011a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011a66:	2303      	movs	r3, #3
 8011a68:	e078      	b.n	8011b5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e8      	bne.n	8011a4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	4b38      	ldr	r3, [pc, #224]	; (8011b64 <HAL_DMA_Init+0x158>)
 8011a84:	4013      	ands	r3, r2
 8011a86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6a1b      	ldr	r3, [r3, #32]
 8011ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011ab6:	697a      	ldr	r2, [r7, #20]
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac0:	2b04      	cmp	r3, #4
 8011ac2:	d107      	bne.n	8011ad4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011acc:	4313      	orrs	r3, r2
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	697a      	ldr	r2, [r7, #20]
 8011ada:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	695b      	ldr	r3, [r3, #20]
 8011ae2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f023 0307 	bic.w	r3, r3, #7
 8011aea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af0:	697a      	ldr	r2, [r7, #20]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afa:	2b04      	cmp	r3, #4
 8011afc:	d117      	bne.n	8011b2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b02:	697a      	ldr	r2, [r7, #20]
 8011b04:	4313      	orrs	r3, r2
 8011b06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00e      	beq.n	8011b2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 fadf 	bl	80120d4 <DMA_CheckFifoParam>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d008      	beq.n	8011b2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2240      	movs	r2, #64	; 0x40
 8011b20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2201      	movs	r2, #1
 8011b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e016      	b.n	8011b5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	697a      	ldr	r2, [r7, #20]
 8011b34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 fa96 	bl	8012068 <DMA_CalcBaseAndBitshift>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b44:	223f      	movs	r2, #63	; 0x3f
 8011b46:	409a      	lsls	r2, r3
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2201      	movs	r2, #1
 8011b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3718      	adds	r7, #24
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	f010803f 	.word	0xf010803f

08011b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b086      	sub	sp, #24
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
 8011b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d101      	bne.n	8011b8e <HAL_DMA_Start_IT+0x26>
 8011b8a:	2302      	movs	r3, #2
 8011b8c:	e040      	b.n	8011c10 <HAL_DMA_Start_IT+0xa8>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2201      	movs	r2, #1
 8011b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d12f      	bne.n	8011c02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2200      	movs	r2, #0
 8011bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	68b9      	ldr	r1, [r7, #8]
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f000 fa28 	bl	801200c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bc0:	223f      	movs	r2, #63	; 0x3f
 8011bc2:	409a      	lsls	r2, r3
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f042 0216 	orr.w	r2, r2, #22
 8011bd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d007      	beq.n	8011bf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f042 0208 	orr.w	r2, r2, #8
 8011bee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f042 0201 	orr.w	r2, r2, #1
 8011bfe:	601a      	str	r2, [r3, #0]
 8011c00:	e005      	b.n	8011c0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2200      	movs	r2, #0
 8011c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011c0a:	2302      	movs	r3, #2
 8011c0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8011c26:	f7ff f829 	bl	8010c7c <HAL_GetTick>
 8011c2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d008      	beq.n	8011c4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2280      	movs	r2, #128	; 0x80
 8011c3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011c46:	2301      	movs	r3, #1
 8011c48:	e052      	b.n	8011cf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f022 0216 	bic.w	r2, r2, #22
 8011c58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	695a      	ldr	r2, [r3, #20]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011c68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d103      	bne.n	8011c7a <HAL_DMA_Abort+0x62>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d007      	beq.n	8011c8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f022 0208 	bic.w	r2, r2, #8
 8011c88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f022 0201 	bic.w	r2, r2, #1
 8011c98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c9a:	e013      	b.n	8011cc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011c9c:	f7fe ffee 	bl	8010c7c <HAL_GetTick>
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	2b05      	cmp	r3, #5
 8011ca8:	d90c      	bls.n	8011cc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2220      	movs	r2, #32
 8011cae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2203      	movs	r2, #3
 8011cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8011cc0:	2303      	movs	r3, #3
 8011cc2:	e015      	b.n	8011cf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f003 0301 	and.w	r3, r3, #1
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1e4      	bne.n	8011c9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cd6:	223f      	movs	r2, #63	; 0x3f
 8011cd8:	409a      	lsls	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011cee:	2300      	movs	r3, #0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011d00:	2300      	movs	r3, #0
 8011d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011d04:	4b92      	ldr	r3, [pc, #584]	; (8011f50 <HAL_DMA_IRQHandler+0x258>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4a92      	ldr	r2, [pc, #584]	; (8011f54 <HAL_DMA_IRQHandler+0x25c>)
 8011d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8011d0e:	0a9b      	lsrs	r3, r3, #10
 8011d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d22:	2208      	movs	r2, #8
 8011d24:	409a      	lsls	r2, r3
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	4013      	ands	r3, r2
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d01a      	beq.n	8011d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f003 0304 	and.w	r3, r3, #4
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d013      	beq.n	8011d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f022 0204 	bic.w	r2, r2, #4
 8011d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d50:	2208      	movs	r2, #8
 8011d52:	409a      	lsls	r2, r3
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d5c:	f043 0201 	orr.w	r2, r3, #1
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d68:	2201      	movs	r2, #1
 8011d6a:	409a      	lsls	r2, r3
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	4013      	ands	r3, r2
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d012      	beq.n	8011d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	695b      	ldr	r3, [r3, #20]
 8011d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00b      	beq.n	8011d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d86:	2201      	movs	r2, #1
 8011d88:	409a      	lsls	r2, r3
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d92:	f043 0202 	orr.w	r2, r3, #2
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d9e:	2204      	movs	r2, #4
 8011da0:	409a      	lsls	r2, r3
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	4013      	ands	r3, r2
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d012      	beq.n	8011dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f003 0302 	and.w	r3, r3, #2
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00b      	beq.n	8011dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dbc:	2204      	movs	r2, #4
 8011dbe:	409a      	lsls	r2, r3
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dc8:	f043 0204 	orr.w	r2, r3, #4
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dd4:	2210      	movs	r2, #16
 8011dd6:	409a      	lsls	r2, r3
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4013      	ands	r3, r2
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d043      	beq.n	8011e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f003 0308 	and.w	r3, r3, #8
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d03c      	beq.n	8011e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011df2:	2210      	movs	r2, #16
 8011df4:	409a      	lsls	r2, r3
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d018      	beq.n	8011e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d108      	bne.n	8011e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d024      	beq.n	8011e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	4798      	blx	r3
 8011e26:	e01f      	b.n	8011e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01b      	beq.n	8011e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	4798      	blx	r3
 8011e38:	e016      	b.n	8011e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d107      	bne.n	8011e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f022 0208 	bic.w	r2, r2, #8
 8011e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d003      	beq.n	8011e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e6c:	2220      	movs	r2, #32
 8011e6e:	409a      	lsls	r2, r3
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	4013      	ands	r3, r2
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f000 808e 	beq.w	8011f96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f003 0310 	and.w	r3, r3, #16
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f000 8086 	beq.w	8011f96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e8e:	2220      	movs	r2, #32
 8011e90:	409a      	lsls	r2, r3
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	2b05      	cmp	r3, #5
 8011ea0:	d136      	bne.n	8011f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f022 0216 	bic.w	r2, r2, #22
 8011eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	695a      	ldr	r2, [r3, #20]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d103      	bne.n	8011ed2 <HAL_DMA_IRQHandler+0x1da>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d007      	beq.n	8011ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f022 0208 	bic.w	r2, r2, #8
 8011ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ee6:	223f      	movs	r2, #63	; 0x3f
 8011ee8:	409a      	lsls	r2, r3
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d07d      	beq.n	8012002 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	4798      	blx	r3
        }
        return;
 8011f0e:	e078      	b.n	8012002 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d01c      	beq.n	8011f58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d108      	bne.n	8011f3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d030      	beq.n	8011f96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	4798      	blx	r3
 8011f3c:	e02b      	b.n	8011f96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d027      	beq.n	8011f96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	4798      	blx	r3
 8011f4e:	e022      	b.n	8011f96 <HAL_DMA_IRQHandler+0x29e>
 8011f50:	20000080 	.word	0x20000080
 8011f54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d10f      	bne.n	8011f86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f022 0210 	bic.w	r2, r2, #16
 8011f74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2201      	movs	r2, #1
 8011f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d003      	beq.n	8011f96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d032      	beq.n	8012004 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d022      	beq.n	8011ff0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2205      	movs	r2, #5
 8011fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f022 0201 	bic.w	r2, r2, #1
 8011fc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	60bb      	str	r3, [r7, #8]
 8011fc8:	697a      	ldr	r2, [r7, #20]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d307      	bcc.n	8011fde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f003 0301 	and.w	r3, r3, #1
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1f2      	bne.n	8011fc2 <HAL_DMA_IRQHandler+0x2ca>
 8011fdc:	e000      	b.n	8011fe0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011fde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d005      	beq.n	8012004 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	4798      	blx	r3
 8012000:	e000      	b.n	8012004 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012002:	bf00      	nop
    }
  }
}
 8012004:	3718      	adds	r7, #24
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop

0801200c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
 8012018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	2b40      	cmp	r3, #64	; 0x40
 8012038:	d108      	bne.n	801204c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801204a:	e007      	b.n	801205c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	60da      	str	r2, [r3, #12]
}
 801205c:	bf00      	nop
 801205e:	3714      	adds	r7, #20
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012068:	b480      	push	{r7}
 801206a:	b085      	sub	sp, #20
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	b2db      	uxtb	r3, r3
 8012076:	3b10      	subs	r3, #16
 8012078:	4a14      	ldr	r2, [pc, #80]	; (80120cc <DMA_CalcBaseAndBitshift+0x64>)
 801207a:	fba2 2303 	umull	r2, r3, r2, r3
 801207e:	091b      	lsrs	r3, r3, #4
 8012080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012082:	4a13      	ldr	r2, [pc, #76]	; (80120d0 <DMA_CalcBaseAndBitshift+0x68>)
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	4413      	add	r3, r2
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	461a      	mov	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b03      	cmp	r3, #3
 8012094:	d909      	bls.n	80120aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801209e:	f023 0303 	bic.w	r3, r3, #3
 80120a2:	1d1a      	adds	r2, r3, #4
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	659a      	str	r2, [r3, #88]	; 0x58
 80120a8:	e007      	b.n	80120ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80120b2:	f023 0303 	bic.w	r3, r3, #3
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3714      	adds	r7, #20
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop
 80120cc:	aaaaaaab 	.word	0xaaaaaaab
 80120d0:	08018990 	.word	0x08018990

080120d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	699b      	ldr	r3, [r3, #24]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d11f      	bne.n	801212e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	2b03      	cmp	r3, #3
 80120f2:	d855      	bhi.n	80121a0 <DMA_CheckFifoParam+0xcc>
 80120f4:	a201      	add	r2, pc, #4	; (adr r2, 80120fc <DMA_CheckFifoParam+0x28>)
 80120f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fa:	bf00      	nop
 80120fc:	0801210d 	.word	0x0801210d
 8012100:	0801211f 	.word	0x0801211f
 8012104:	0801210d 	.word	0x0801210d
 8012108:	080121a1 	.word	0x080121a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012114:	2b00      	cmp	r3, #0
 8012116:	d045      	beq.n	80121a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8012118:	2301      	movs	r3, #1
 801211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801211c:	e042      	b.n	80121a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012126:	d13f      	bne.n	80121a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8012128:	2301      	movs	r3, #1
 801212a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801212c:	e03c      	b.n	80121a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	699b      	ldr	r3, [r3, #24]
 8012132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012136:	d121      	bne.n	801217c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2b03      	cmp	r3, #3
 801213c:	d836      	bhi.n	80121ac <DMA_CheckFifoParam+0xd8>
 801213e:	a201      	add	r2, pc, #4	; (adr r2, 8012144 <DMA_CheckFifoParam+0x70>)
 8012140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012144:	08012155 	.word	0x08012155
 8012148:	0801215b 	.word	0x0801215b
 801214c:	08012155 	.word	0x08012155
 8012150:	0801216d 	.word	0x0801216d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012154:	2301      	movs	r3, #1
 8012156:	73fb      	strb	r3, [r7, #15]
      break;
 8012158:	e02f      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801215e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012162:	2b00      	cmp	r3, #0
 8012164:	d024      	beq.n	80121b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801216a:	e021      	b.n	80121b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012174:	d11e      	bne.n	80121b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801217a:	e01b      	b.n	80121b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	2b02      	cmp	r3, #2
 8012180:	d902      	bls.n	8012188 <DMA_CheckFifoParam+0xb4>
 8012182:	2b03      	cmp	r3, #3
 8012184:	d003      	beq.n	801218e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012186:	e018      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012188:	2301      	movs	r3, #1
 801218a:	73fb      	strb	r3, [r7, #15]
      break;
 801218c:	e015      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00e      	beq.n	80121b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801219a:	2301      	movs	r3, #1
 801219c:	73fb      	strb	r3, [r7, #15]
      break;
 801219e:	e00b      	b.n	80121b8 <DMA_CheckFifoParam+0xe4>
      break;
 80121a0:	bf00      	nop
 80121a2:	e00a      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;
 80121a4:	bf00      	nop
 80121a6:	e008      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;
 80121a8:	bf00      	nop
 80121aa:	e006      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;
 80121ac:	bf00      	nop
 80121ae:	e004      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;
 80121b0:	bf00      	nop
 80121b2:	e002      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;   
 80121b4:	bf00      	nop
 80121b6:	e000      	b.n	80121ba <DMA_CheckFifoParam+0xe6>
      break;
 80121b8:	bf00      	nop
    }
  } 
  
  return status; 
 80121ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3714      	adds	r7, #20
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr

080121c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80121d6:	2301      	movs	r3, #1
 80121d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80121da:	4b23      	ldr	r3, [pc, #140]	; (8012268 <HAL_FLASH_Program+0xa0>)
 80121dc:	7e1b      	ldrb	r3, [r3, #24]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d101      	bne.n	80121e6 <HAL_FLASH_Program+0x1e>
 80121e2:	2302      	movs	r3, #2
 80121e4:	e03b      	b.n	801225e <HAL_FLASH_Program+0x96>
 80121e6:	4b20      	ldr	r3, [pc, #128]	; (8012268 <HAL_FLASH_Program+0xa0>)
 80121e8:	2201      	movs	r2, #1
 80121ea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121f0:	f000 f924 	bl	801243c <FLASH_WaitForLastOperation>
 80121f4:	4603      	mov	r3, r0
 80121f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80121f8:	7dfb      	ldrb	r3, [r7, #23]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d12b      	bne.n	8012256 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d105      	bne.n	8012210 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012204:	783b      	ldrb	r3, [r7, #0]
 8012206:	4619      	mov	r1, r3
 8012208:	68b8      	ldr	r0, [r7, #8]
 801220a:	f000 f9cd 	bl	80125a8 <FLASH_Program_Byte>
 801220e:	e016      	b.n	801223e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d105      	bne.n	8012222 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8012216:	883b      	ldrh	r3, [r7, #0]
 8012218:	4619      	mov	r1, r3
 801221a:	68b8      	ldr	r0, [r7, #8]
 801221c:	f000 f9a0 	bl	8012560 <FLASH_Program_HalfWord>
 8012220:	e00d      	b.n	801223e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2b02      	cmp	r3, #2
 8012226:	d105      	bne.n	8012234 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	4619      	mov	r1, r3
 801222c:	68b8      	ldr	r0, [r7, #8]
 801222e:	f000 f975 	bl	801251c <FLASH_Program_Word>
 8012232:	e004      	b.n	801223e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8012234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012238:	68b8      	ldr	r0, [r7, #8]
 801223a:	f000 f93f 	bl	80124bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801223e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012242:	f000 f8fb 	bl	801243c <FLASH_WaitForLastOperation>
 8012246:	4603      	mov	r3, r0
 8012248:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801224a:	4b08      	ldr	r3, [pc, #32]	; (801226c <HAL_FLASH_Program+0xa4>)
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	4a07      	ldr	r2, [pc, #28]	; (801226c <HAL_FLASH_Program+0xa4>)
 8012250:	f023 0301 	bic.w	r3, r3, #1
 8012254:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012256:	4b04      	ldr	r3, [pc, #16]	; (8012268 <HAL_FLASH_Program+0xa0>)
 8012258:	2200      	movs	r2, #0
 801225a:	761a      	strb	r2, [r3, #24]
  
  return status;
 801225c:	7dfb      	ldrb	r3, [r7, #23]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	2001a7a4 	.word	0x2001a7a4
 801226c:	40023c00 	.word	0x40023c00

08012270 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8012276:	2300      	movs	r3, #0
 8012278:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801227a:	4b4b      	ldr	r3, [pc, #300]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 801227c:	68db      	ldr	r3, [r3, #12]
 801227e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8012282:	2b00      	cmp	r3, #0
 8012284:	d020      	beq.n	80122c8 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012286:	4b49      	ldr	r3, [pc, #292]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b01      	cmp	r3, #1
 801228e:	d107      	bne.n	80122a0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8012290:	4b46      	ldr	r3, [pc, #280]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8012296:	4b45      	ldr	r3, [pc, #276]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012298:	f04f 32ff 	mov.w	r2, #4294967295
 801229c:	60da      	str	r2, [r3, #12]
 801229e:	e00b      	b.n	80122b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80122a0:	4b42      	ldr	r3, [pc, #264]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	d103      	bne.n	80122b2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80122aa:	4b40      	ldr	r3, [pc, #256]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	607b      	str	r3, [r7, #4]
 80122b0:	e002      	b.n	80122b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80122b2:	4b3e      	ldr	r3, [pc, #248]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122b4:	695b      	ldr	r3, [r3, #20]
 80122b6:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80122b8:	f000 f998 	bl	80125ec <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 f881 	bl	80123c4 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80122c2:	4b3a      	ldr	r3, [pc, #232]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122c4:	2200      	movs	r2, #0
 80122c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80122c8:	4b37      	ldr	r3, [pc, #220]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	f003 0301 	and.w	r3, r3, #1
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d04a      	beq.n	801236a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80122d4:	4b34      	ldr	r3, [pc, #208]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 80122d6:	2201      	movs	r2, #1
 80122d8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80122da:	4b34      	ldr	r3, [pc, #208]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d12d      	bne.n	8012340 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80122e4:	4b31      	ldr	r3, [pc, #196]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	3b01      	subs	r3, #1
 80122ea:	4a30      	ldr	r2, [pc, #192]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122ec:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80122ee:	4b2f      	ldr	r3, [pc, #188]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d015      	beq.n	8012322 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80122f6:	4b2d      	ldr	r3, [pc, #180]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f857 	bl	80123b0 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8012302:	4b2a      	ldr	r3, [pc, #168]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	3301      	adds	r3, #1
 8012308:	4a28      	ldr	r2, [pc, #160]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801230a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 801230c:	4b27      	ldr	r3, [pc, #156]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8012312:	4b26      	ldr	r3, [pc, #152]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012314:	7a1b      	ldrb	r3, [r3, #8]
 8012316:	b2db      	uxtb	r3, r3
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 fa50 	bl	80127c0 <FLASH_Erase_Sector>
 8012320:	e023      	b.n	801236a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8012322:	f04f 33ff 	mov.w	r3, #4294967295
 8012326:	607b      	str	r3, [r7, #4]
 8012328:	4a20      	ldr	r2, [pc, #128]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 801232e:	4b1f      	ldr	r3, [pc, #124]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012330:	2200      	movs	r2, #0
 8012332:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8012334:	f000 fa8c 	bl	8012850 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 f839 	bl	80123b0 <HAL_FLASH_EndOfOperationCallback>
 801233e:	e014      	b.n	801236a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8012340:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	b2db      	uxtb	r3, r3
 8012346:	2b02      	cmp	r3, #2
 8012348:	d107      	bne.n	801235a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 801234a:	f000 fa81 	bl	8012850 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 801234e:	4b17      	ldr	r3, [pc, #92]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012350:	691b      	ldr	r3, [r3, #16]
 8012352:	4618      	mov	r0, r3
 8012354:	f000 f82c 	bl	80123b0 <HAL_FLASH_EndOfOperationCallback>
 8012358:	e004      	b.n	8012364 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 801235a:	4b14      	ldr	r3, [pc, #80]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801235c:	695b      	ldr	r3, [r3, #20]
 801235e:	4618      	mov	r0, r3
 8012360:	f000 f826 	bl	80123b0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012364:	4b11      	ldr	r3, [pc, #68]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 8012366:	2200      	movs	r2, #0
 8012368:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 801236a:	4b10      	ldr	r3, [pc, #64]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	b2db      	uxtb	r3, r3
 8012370:	2b00      	cmp	r3, #0
 8012372:	d114      	bne.n	801239e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8012374:	4b0c      	ldr	r3, [pc, #48]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 8012376:	691b      	ldr	r3, [r3, #16]
 8012378:	4a0b      	ldr	r2, [pc, #44]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 801237a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801237e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8012380:	4b09      	ldr	r3, [pc, #36]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 8012382:	691b      	ldr	r3, [r3, #16]
 8012384:	4a08      	ldr	r2, [pc, #32]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 8012386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801238a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 801238c:	4b06      	ldr	r3, [pc, #24]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	4a05      	ldr	r2, [pc, #20]	; (80123a8 <HAL_FLASH_IRQHandler+0x138>)
 8012392:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012396:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8012398:	4b04      	ldr	r3, [pc, #16]	; (80123ac <HAL_FLASH_IRQHandler+0x13c>)
 801239a:	2200      	movs	r2, #0
 801239c:	761a      	strb	r2, [r3, #24]
  }
}
 801239e:	bf00      	nop
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	40023c00 	.word	0x40023c00
 80123ac:	2001a7a4 	.word	0x2001a7a4

080123b0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80123b8:	bf00      	nop
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr

080123c4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80123c4:	b480      	push	{r7}
 80123c6:	b083      	sub	sp, #12
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80123cc:	bf00      	nop
 80123ce:	370c      	adds	r7, #12
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr

080123d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80123e2:	4b0b      	ldr	r3, [pc, #44]	; (8012410 <HAL_FLASH_Unlock+0x38>)
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	da0b      	bge.n	8012402 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80123ea:	4b09      	ldr	r3, [pc, #36]	; (8012410 <HAL_FLASH_Unlock+0x38>)
 80123ec:	4a09      	ldr	r2, [pc, #36]	; (8012414 <HAL_FLASH_Unlock+0x3c>)
 80123ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80123f0:	4b07      	ldr	r3, [pc, #28]	; (8012410 <HAL_FLASH_Unlock+0x38>)
 80123f2:	4a09      	ldr	r2, [pc, #36]	; (8012418 <HAL_FLASH_Unlock+0x40>)
 80123f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80123f6:	4b06      	ldr	r3, [pc, #24]	; (8012410 <HAL_FLASH_Unlock+0x38>)
 80123f8:	691b      	ldr	r3, [r3, #16]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	da01      	bge.n	8012402 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80123fe:	2301      	movs	r3, #1
 8012400:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8012402:	79fb      	ldrb	r3, [r7, #7]
}
 8012404:	4618      	mov	r0, r3
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr
 8012410:	40023c00 	.word	0x40023c00
 8012414:	45670123 	.word	0x45670123
 8012418:	cdef89ab 	.word	0xcdef89ab

0801241c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801241c:	b480      	push	{r7}
 801241e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8012420:	4b05      	ldr	r3, [pc, #20]	; (8012438 <HAL_FLASH_Lock+0x1c>)
 8012422:	691b      	ldr	r3, [r3, #16]
 8012424:	4a04      	ldr	r2, [pc, #16]	; (8012438 <HAL_FLASH_Lock+0x1c>)
 8012426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801242a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801242c:	2300      	movs	r3, #0
}
 801242e:	4618      	mov	r0, r3
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr
 8012438:	40023c00 	.word	0x40023c00

0801243c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012444:	2300      	movs	r3, #0
 8012446:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012448:	4b1a      	ldr	r3, [pc, #104]	; (80124b4 <FLASH_WaitForLastOperation+0x78>)
 801244a:	2200      	movs	r2, #0
 801244c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801244e:	f7fe fc15 	bl	8010c7c <HAL_GetTick>
 8012452:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012454:	e010      	b.n	8012478 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245c:	d00c      	beq.n	8012478 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d007      	beq.n	8012474 <FLASH_WaitForLastOperation+0x38>
 8012464:	f7fe fc0a 	bl	8010c7c <HAL_GetTick>
 8012468:	4602      	mov	r2, r0
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	429a      	cmp	r2, r3
 8012472:	d201      	bcs.n	8012478 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012474:	2303      	movs	r3, #3
 8012476:	e019      	b.n	80124ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012478:	4b0f      	ldr	r3, [pc, #60]	; (80124b8 <FLASH_WaitForLastOperation+0x7c>)
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1e8      	bne.n	8012456 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012484:	4b0c      	ldr	r3, [pc, #48]	; (80124b8 <FLASH_WaitForLastOperation+0x7c>)
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	f003 0301 	and.w	r3, r3, #1
 801248c:	2b00      	cmp	r3, #0
 801248e:	d002      	beq.n	8012496 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012490:	4b09      	ldr	r3, [pc, #36]	; (80124b8 <FLASH_WaitForLastOperation+0x7c>)
 8012492:	2201      	movs	r2, #1
 8012494:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012496:	4b08      	ldr	r3, [pc, #32]	; (80124b8 <FLASH_WaitForLastOperation+0x7c>)
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d003      	beq.n	80124aa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80124a2:	f000 f8a3 	bl	80125ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80124a6:	2301      	movs	r3, #1
 80124a8:	e000      	b.n	80124ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80124aa:	2300      	movs	r3, #0
  
}  
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	2001a7a4 	.word	0x2001a7a4
 80124b8:	40023c00 	.word	0x40023c00

080124bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80124bc:	b490      	push	{r4, r7}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80124c8:	4b13      	ldr	r3, [pc, #76]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	4a12      	ldr	r2, [pc, #72]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80124d4:	4b10      	ldr	r3, [pc, #64]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124d6:	691b      	ldr	r3, [r3, #16]
 80124d8:	4a0f      	ldr	r2, [pc, #60]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80124de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80124e0:	4b0d      	ldr	r3, [pc, #52]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124e2:	691b      	ldr	r3, [r3, #16]
 80124e4:	4a0c      	ldr	r2, [pc, #48]	; (8012518 <FLASH_Program_DoubleWord+0x5c>)
 80124e6:	f043 0301 	orr.w	r3, r3, #1
 80124ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80124f2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80124f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80124fa:	f04f 0300 	mov.w	r3, #0
 80124fe:	f04f 0400 	mov.w	r4, #0
 8012502:	0013      	movs	r3, r2
 8012504:	2400      	movs	r4, #0
 8012506:	68fa      	ldr	r2, [r7, #12]
 8012508:	3204      	adds	r2, #4
 801250a:	6013      	str	r3, [r2, #0]
}
 801250c:	bf00      	nop
 801250e:	3710      	adds	r7, #16
 8012510:	46bd      	mov	sp, r7
 8012512:	bc90      	pop	{r4, r7}
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop
 8012518:	40023c00 	.word	0x40023c00

0801251c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012526:	4b0d      	ldr	r3, [pc, #52]	; (801255c <FLASH_Program_Word+0x40>)
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	4a0c      	ldr	r2, [pc, #48]	; (801255c <FLASH_Program_Word+0x40>)
 801252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012530:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012532:	4b0a      	ldr	r3, [pc, #40]	; (801255c <FLASH_Program_Word+0x40>)
 8012534:	691b      	ldr	r3, [r3, #16]
 8012536:	4a09      	ldr	r2, [pc, #36]	; (801255c <FLASH_Program_Word+0x40>)
 8012538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801253c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801253e:	4b07      	ldr	r3, [pc, #28]	; (801255c <FLASH_Program_Word+0x40>)
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	4a06      	ldr	r2, [pc, #24]	; (801255c <FLASH_Program_Word+0x40>)
 8012544:	f043 0301 	orr.w	r3, r3, #1
 8012548:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	683a      	ldr	r2, [r7, #0]
 801254e:	601a      	str	r2, [r3, #0]
}
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr
 801255c:	40023c00 	.word	0x40023c00

08012560 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	460b      	mov	r3, r1
 801256a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801256c:	4b0d      	ldr	r3, [pc, #52]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 801256e:	691b      	ldr	r3, [r3, #16]
 8012570:	4a0c      	ldr	r2, [pc, #48]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 8012572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012578:	4b0a      	ldr	r3, [pc, #40]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 801257a:	691b      	ldr	r3, [r3, #16]
 801257c:	4a09      	ldr	r2, [pc, #36]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 801257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012582:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012584:	4b07      	ldr	r3, [pc, #28]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 8012586:	691b      	ldr	r3, [r3, #16]
 8012588:	4a06      	ldr	r2, [pc, #24]	; (80125a4 <FLASH_Program_HalfWord+0x44>)
 801258a:	f043 0301 	orr.w	r3, r3, #1
 801258e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	887a      	ldrh	r2, [r7, #2]
 8012594:	801a      	strh	r2, [r3, #0]
}
 8012596:	bf00      	nop
 8012598:	370c      	adds	r7, #12
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	40023c00 	.word	0x40023c00

080125a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80125b4:	4b0c      	ldr	r3, [pc, #48]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125b6:	691b      	ldr	r3, [r3, #16]
 80125b8:	4a0b      	ldr	r2, [pc, #44]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80125c0:	4b09      	ldr	r3, [pc, #36]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125c2:	4a09      	ldr	r2, [pc, #36]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80125c8:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125ca:	691b      	ldr	r3, [r3, #16]
 80125cc:	4a06      	ldr	r2, [pc, #24]	; (80125e8 <FLASH_Program_Byte+0x40>)
 80125ce:	f043 0301 	orr.w	r3, r3, #1
 80125d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	701a      	strb	r2, [r3, #0]
}
 80125da:	bf00      	nop
 80125dc:	370c      	adds	r7, #12
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	40023c00 	.word	0x40023c00

080125ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80125ec:	b480      	push	{r7}
 80125ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80125f0:	4b27      	ldr	r3, [pc, #156]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	f003 0310 	and.w	r3, r3, #16
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d008      	beq.n	801260e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80125fc:	4b25      	ldr	r3, [pc, #148]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 80125fe:	69db      	ldr	r3, [r3, #28]
 8012600:	f043 0310 	orr.w	r3, r3, #16
 8012604:	4a23      	ldr	r2, [pc, #140]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012606:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012608:	4b21      	ldr	r3, [pc, #132]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 801260a:	2210      	movs	r2, #16
 801260c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801260e:	4b20      	ldr	r3, [pc, #128]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	f003 0320 	and.w	r3, r3, #32
 8012616:	2b00      	cmp	r3, #0
 8012618:	d008      	beq.n	801262c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801261a:	4b1e      	ldr	r3, [pc, #120]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	f043 0308 	orr.w	r3, r3, #8
 8012622:	4a1c      	ldr	r2, [pc, #112]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012624:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8012626:	4b1a      	ldr	r3, [pc, #104]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 8012628:	2220      	movs	r2, #32
 801262a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801262c:	4b18      	ldr	r3, [pc, #96]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012634:	2b00      	cmp	r3, #0
 8012636:	d008      	beq.n	801264a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012638:	4b16      	ldr	r3, [pc, #88]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 801263a:	69db      	ldr	r3, [r3, #28]
 801263c:	f043 0304 	orr.w	r3, r3, #4
 8012640:	4a14      	ldr	r2, [pc, #80]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012642:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012644:	4b12      	ldr	r3, [pc, #72]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 8012646:	2240      	movs	r2, #64	; 0x40
 8012648:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801264a:	4b11      	ldr	r3, [pc, #68]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012652:	2b00      	cmp	r3, #0
 8012654:	d008      	beq.n	8012668 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012656:	4b0f      	ldr	r3, [pc, #60]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012658:	69db      	ldr	r3, [r3, #28]
 801265a:	f043 0302 	orr.w	r3, r3, #2
 801265e:	4a0d      	ldr	r2, [pc, #52]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012660:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012662:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 8012664:	2280      	movs	r2, #128	; 0x80
 8012666:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012668:	4b09      	ldr	r3, [pc, #36]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	f003 0302 	and.w	r3, r3, #2
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012674:	4b07      	ldr	r3, [pc, #28]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 8012676:	69db      	ldr	r3, [r3, #28]
 8012678:	f043 0320 	orr.w	r3, r3, #32
 801267c:	4a05      	ldr	r2, [pc, #20]	; (8012694 <FLASH_SetErrorCode+0xa8>)
 801267e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012680:	4b03      	ldr	r3, [pc, #12]	; (8012690 <FLASH_SetErrorCode+0xa4>)
 8012682:	2202      	movs	r2, #2
 8012684:	60da      	str	r2, [r3, #12]
  }
}
 8012686:	bf00      	nop
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	40023c00 	.word	0x40023c00
 8012694:	2001a7a4 	.word	0x2001a7a4

08012698 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80126a2:	2301      	movs	r3, #1
 80126a4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80126a6:	2300      	movs	r3, #0
 80126a8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80126aa:	4b31      	ldr	r3, [pc, #196]	; (8012770 <HAL_FLASHEx_Erase+0xd8>)
 80126ac:	7e1b      	ldrb	r3, [r3, #24]
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d101      	bne.n	80126b6 <HAL_FLASHEx_Erase+0x1e>
 80126b2:	2302      	movs	r3, #2
 80126b4:	e058      	b.n	8012768 <HAL_FLASHEx_Erase+0xd0>
 80126b6:	4b2e      	ldr	r3, [pc, #184]	; (8012770 <HAL_FLASHEx_Erase+0xd8>)
 80126b8:	2201      	movs	r2, #1
 80126ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80126bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80126c0:	f7ff febc 	bl	801243c <FLASH_WaitForLastOperation>
 80126c4:	4603      	mov	r3, r0
 80126c6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80126c8:	7bfb      	ldrb	r3, [r7, #15]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d148      	bne.n	8012760 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	f04f 32ff 	mov.w	r2, #4294967295
 80126d4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d115      	bne.n	801270a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	4619      	mov	r1, r3
 80126ea:	4610      	mov	r0, r2
 80126ec:	f000 f844 	bl	8012778 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80126f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80126f4:	f7ff fea2 	bl	801243c <FLASH_WaitForLastOperation>
 80126f8:	4603      	mov	r3, r0
 80126fa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80126fc:	4b1d      	ldr	r3, [pc, #116]	; (8012774 <HAL_FLASHEx_Erase+0xdc>)
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	4a1c      	ldr	r2, [pc, #112]	; (8012774 <HAL_FLASHEx_Erase+0xdc>)
 8012702:	f023 0304 	bic.w	r3, r3, #4
 8012706:	6113      	str	r3, [r2, #16]
 8012708:	e028      	b.n	801275c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	60bb      	str	r3, [r7, #8]
 8012710:	e01c      	b.n	801274c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	691b      	ldr	r3, [r3, #16]
 8012716:	b2db      	uxtb	r3, r3
 8012718:	4619      	mov	r1, r3
 801271a:	68b8      	ldr	r0, [r7, #8]
 801271c:	f000 f850 	bl	80127c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012720:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012724:	f7ff fe8a 	bl	801243c <FLASH_WaitForLastOperation>
 8012728:	4603      	mov	r3, r0
 801272a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801272c:	4b11      	ldr	r3, [pc, #68]	; (8012774 <HAL_FLASHEx_Erase+0xdc>)
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	4a10      	ldr	r2, [pc, #64]	; (8012774 <HAL_FLASHEx_Erase+0xdc>)
 8012732:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8012736:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8012738:	7bfb      	ldrb	r3, [r7, #15]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d003      	beq.n	8012746 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	68ba      	ldr	r2, [r7, #8]
 8012742:	601a      	str	r2, [r3, #0]
          break;
 8012744:	e00a      	b.n	801275c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	3301      	adds	r3, #1
 801274a:	60bb      	str	r3, [r7, #8]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	68da      	ldr	r2, [r3, #12]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	4413      	add	r3, r2
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	429a      	cmp	r2, r3
 801275a:	d3da      	bcc.n	8012712 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 801275c:	f000 f878 	bl	8012850 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012760:	4b03      	ldr	r3, [pc, #12]	; (8012770 <HAL_FLASHEx_Erase+0xd8>)
 8012762:	2200      	movs	r2, #0
 8012764:	761a      	strb	r2, [r3, #24]

  return status;
 8012766:	7bfb      	ldrb	r3, [r7, #15]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3710      	adds	r7, #16
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	2001a7a4 	.word	0x2001a7a4
 8012774:	40023c00 	.word	0x40023c00

08012778 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	4603      	mov	r3, r0
 8012780:	6039      	str	r1, [r7, #0]
 8012782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012784:	4b0d      	ldr	r3, [pc, #52]	; (80127bc <FLASH_MassErase+0x44>)
 8012786:	691b      	ldr	r3, [r3, #16]
 8012788:	4a0c      	ldr	r2, [pc, #48]	; (80127bc <FLASH_MassErase+0x44>)
 801278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801278e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012790:	4b0a      	ldr	r3, [pc, #40]	; (80127bc <FLASH_MassErase+0x44>)
 8012792:	691b      	ldr	r3, [r3, #16]
 8012794:	4a09      	ldr	r2, [pc, #36]	; (80127bc <FLASH_MassErase+0x44>)
 8012796:	f043 0304 	orr.w	r3, r3, #4
 801279a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801279c:	4b07      	ldr	r3, [pc, #28]	; (80127bc <FLASH_MassErase+0x44>)
 801279e:	691a      	ldr	r2, [r3, #16]
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	021b      	lsls	r3, r3, #8
 80127a4:	4313      	orrs	r3, r2
 80127a6:	4a05      	ldr	r2, [pc, #20]	; (80127bc <FLASH_MassErase+0x44>)
 80127a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127ac:	6113      	str	r3, [r2, #16]
}
 80127ae:	bf00      	nop
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	40023c00 	.word	0x40023c00

080127c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80127cc:	2300      	movs	r3, #0
 80127ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80127d0:	78fb      	ldrb	r3, [r7, #3]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d102      	bne.n	80127dc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80127d6:	2300      	movs	r3, #0
 80127d8:	60fb      	str	r3, [r7, #12]
 80127da:	e010      	b.n	80127fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80127dc:	78fb      	ldrb	r3, [r7, #3]
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d103      	bne.n	80127ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80127e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	e009      	b.n	80127fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80127ea:	78fb      	ldrb	r3, [r7, #3]
 80127ec:	2b02      	cmp	r3, #2
 80127ee:	d103      	bne.n	80127f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80127f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127f4:	60fb      	str	r3, [r7, #12]
 80127f6:	e002      	b.n	80127fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80127f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80127fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80127fe:	4b13      	ldr	r3, [pc, #76]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	4a12      	ldr	r2, [pc, #72]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012808:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801280a:	4b10      	ldr	r3, [pc, #64]	; (801284c <FLASH_Erase_Sector+0x8c>)
 801280c:	691a      	ldr	r2, [r3, #16]
 801280e:	490f      	ldr	r1, [pc, #60]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	4313      	orrs	r3, r2
 8012814:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8012816:	4b0d      	ldr	r3, [pc, #52]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	4a0c      	ldr	r2, [pc, #48]	; (801284c <FLASH_Erase_Sector+0x8c>)
 801281c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8012822:	4b0a      	ldr	r3, [pc, #40]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012824:	691a      	ldr	r2, [r3, #16]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	4313      	orrs	r3, r2
 801282c:	4a07      	ldr	r2, [pc, #28]	; (801284c <FLASH_Erase_Sector+0x8c>)
 801282e:	f043 0302 	orr.w	r3, r3, #2
 8012832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012834:	4b05      	ldr	r3, [pc, #20]	; (801284c <FLASH_Erase_Sector+0x8c>)
 8012836:	691b      	ldr	r3, [r3, #16]
 8012838:	4a04      	ldr	r2, [pc, #16]	; (801284c <FLASH_Erase_Sector+0x8c>)
 801283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801283e:	6113      	str	r3, [r2, #16]
}
 8012840:	bf00      	nop
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	40023c00 	.word	0x40023c00

08012850 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012850:	b480      	push	{r7}
 8012852:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012854:	4b20      	ldr	r3, [pc, #128]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801285c:	2b00      	cmp	r3, #0
 801285e:	d017      	beq.n	8012890 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012860:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a1c      	ldr	r2, [pc, #112]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012866:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801286a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801286c:	4b1a      	ldr	r3, [pc, #104]	; (80128d8 <FLASH_FlushCaches+0x88>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4a19      	ldr	r2, [pc, #100]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012876:	6013      	str	r3, [r2, #0]
 8012878:	4b17      	ldr	r3, [pc, #92]	; (80128d8 <FLASH_FlushCaches+0x88>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4a16      	ldr	r2, [pc, #88]	; (80128d8 <FLASH_FlushCaches+0x88>)
 801287e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012882:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012884:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a13      	ldr	r2, [pc, #76]	; (80128d8 <FLASH_FlushCaches+0x88>)
 801288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801288e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012890:	4b11      	ldr	r3, [pc, #68]	; (80128d8 <FLASH_FlushCaches+0x88>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012898:	2b00      	cmp	r3, #0
 801289a:	d017      	beq.n	80128cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801289c:	4b0e      	ldr	r3, [pc, #56]	; (80128d8 <FLASH_FlushCaches+0x88>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4a0d      	ldr	r2, [pc, #52]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80128a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80128a8:	4b0b      	ldr	r3, [pc, #44]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a0a      	ldr	r2, [pc, #40]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80128b2:	6013      	str	r3, [r2, #0]
 80128b4:	4b08      	ldr	r3, [pc, #32]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	4a07      	ldr	r2, [pc, #28]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80128c0:	4b05      	ldr	r3, [pc, #20]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4a04      	ldr	r2, [pc, #16]	; (80128d8 <FLASH_FlushCaches+0x88>)
 80128c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80128ca:	6013      	str	r3, [r2, #0]
  }
}
 80128cc:	bf00      	nop
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	40023c00 	.word	0x40023c00

080128dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80128dc:	b480      	push	{r7}
 80128de:	b089      	sub	sp, #36	; 0x24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80128e6:	2300      	movs	r3, #0
 80128e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80128ea:	2300      	movs	r3, #0
 80128ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80128ee:	2300      	movs	r3, #0
 80128f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80128f2:	2300      	movs	r3, #0
 80128f4:	61fb      	str	r3, [r7, #28]
 80128f6:	e16b      	b.n	8012bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80128f8:	2201      	movs	r2, #1
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	697a      	ldr	r2, [r7, #20]
 8012908:	4013      	ands	r3, r2
 801290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	429a      	cmp	r2, r3
 8012912:	f040 815a 	bne.w	8012bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	2b01      	cmp	r3, #1
 801291c:	d00b      	beq.n	8012936 <HAL_GPIO_Init+0x5a>
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	2b02      	cmp	r3, #2
 8012924:	d007      	beq.n	8012936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801292a:	2b11      	cmp	r3, #17
 801292c:	d003      	beq.n	8012936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	2b12      	cmp	r3, #18
 8012934:	d130      	bne.n	8012998 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	005b      	lsls	r3, r3, #1
 8012940:	2203      	movs	r2, #3
 8012942:	fa02 f303 	lsl.w	r3, r2, r3
 8012946:	43db      	mvns	r3, r3
 8012948:	69ba      	ldr	r2, [r7, #24]
 801294a:	4013      	ands	r3, r2
 801294c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	68da      	ldr	r2, [r3, #12]
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	fa02 f303 	lsl.w	r3, r2, r3
 801295a:	69ba      	ldr	r2, [r7, #24]
 801295c:	4313      	orrs	r3, r2
 801295e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	69ba      	ldr	r2, [r7, #24]
 8012964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801296c:	2201      	movs	r2, #1
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	fa02 f303 	lsl.w	r3, r2, r3
 8012974:	43db      	mvns	r3, r3
 8012976:	69ba      	ldr	r2, [r7, #24]
 8012978:	4013      	ands	r3, r2
 801297a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	091b      	lsrs	r3, r3, #4
 8012982:	f003 0201 	and.w	r2, r3, #1
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	fa02 f303 	lsl.w	r3, r2, r3
 801298c:	69ba      	ldr	r2, [r7, #24]
 801298e:	4313      	orrs	r3, r2
 8012990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	69ba      	ldr	r2, [r7, #24]
 8012996:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	2203      	movs	r2, #3
 80129a4:	fa02 f303 	lsl.w	r3, r2, r3
 80129a8:	43db      	mvns	r3, r3
 80129aa:	69ba      	ldr	r2, [r7, #24]
 80129ac:	4013      	ands	r3, r2
 80129ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	689a      	ldr	r2, [r3, #8]
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	fa02 f303 	lsl.w	r3, r2, r3
 80129bc:	69ba      	ldr	r2, [r7, #24]
 80129be:	4313      	orrs	r3, r2
 80129c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	69ba      	ldr	r2, [r7, #24]
 80129c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	2b02      	cmp	r3, #2
 80129ce:	d003      	beq.n	80129d8 <HAL_GPIO_Init+0xfc>
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	2b12      	cmp	r3, #18
 80129d6:	d123      	bne.n	8012a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	08da      	lsrs	r2, r3, #3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3208      	adds	r2, #8
 80129e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	f003 0307 	and.w	r3, r3, #7
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	220f      	movs	r2, #15
 80129f0:	fa02 f303 	lsl.w	r3, r2, r3
 80129f4:	43db      	mvns	r3, r3
 80129f6:	69ba      	ldr	r2, [r7, #24]
 80129f8:	4013      	ands	r3, r2
 80129fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	691a      	ldr	r2, [r3, #16]
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	f003 0307 	and.w	r3, r3, #7
 8012a06:	009b      	lsls	r3, r3, #2
 8012a08:	fa02 f303 	lsl.w	r3, r2, r3
 8012a0c:	69ba      	ldr	r2, [r7, #24]
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	08da      	lsrs	r2, r3, #3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	3208      	adds	r2, #8
 8012a1a:	69b9      	ldr	r1, [r7, #24]
 8012a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	2203      	movs	r2, #3
 8012a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a30:	43db      	mvns	r3, r3
 8012a32:	69ba      	ldr	r2, [r7, #24]
 8012a34:	4013      	ands	r3, r2
 8012a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	f003 0203 	and.w	r2, r3, #3
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	fa02 f303 	lsl.w	r3, r2, r3
 8012a48:	69ba      	ldr	r2, [r7, #24]
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	69ba      	ldr	r2, [r7, #24]
 8012a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 80b4 	beq.w	8012bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012a62:	2300      	movs	r3, #0
 8012a64:	60fb      	str	r3, [r7, #12]
 8012a66:	4b5f      	ldr	r3, [pc, #380]	; (8012be4 <HAL_GPIO_Init+0x308>)
 8012a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a6a:	4a5e      	ldr	r2, [pc, #376]	; (8012be4 <HAL_GPIO_Init+0x308>)
 8012a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012a70:	6453      	str	r3, [r2, #68]	; 0x44
 8012a72:	4b5c      	ldr	r3, [pc, #368]	; (8012be4 <HAL_GPIO_Init+0x308>)
 8012a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a7a:	60fb      	str	r3, [r7, #12]
 8012a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012a7e:	4a5a      	ldr	r2, [pc, #360]	; (8012be8 <HAL_GPIO_Init+0x30c>)
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	089b      	lsrs	r3, r3, #2
 8012a84:	3302      	adds	r3, #2
 8012a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	f003 0303 	and.w	r3, r3, #3
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	220f      	movs	r2, #15
 8012a96:	fa02 f303 	lsl.w	r3, r2, r3
 8012a9a:	43db      	mvns	r3, r3
 8012a9c:	69ba      	ldr	r2, [r7, #24]
 8012a9e:	4013      	ands	r3, r2
 8012aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4a51      	ldr	r2, [pc, #324]	; (8012bec <HAL_GPIO_Init+0x310>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d02b      	beq.n	8012b02 <HAL_GPIO_Init+0x226>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4a50      	ldr	r2, [pc, #320]	; (8012bf0 <HAL_GPIO_Init+0x314>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d025      	beq.n	8012afe <HAL_GPIO_Init+0x222>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4a4f      	ldr	r2, [pc, #316]	; (8012bf4 <HAL_GPIO_Init+0x318>)
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d01f      	beq.n	8012afa <HAL_GPIO_Init+0x21e>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4a4e      	ldr	r2, [pc, #312]	; (8012bf8 <HAL_GPIO_Init+0x31c>)
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d019      	beq.n	8012af6 <HAL_GPIO_Init+0x21a>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	4a4d      	ldr	r2, [pc, #308]	; (8012bfc <HAL_GPIO_Init+0x320>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d013      	beq.n	8012af2 <HAL_GPIO_Init+0x216>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	4a4c      	ldr	r2, [pc, #304]	; (8012c00 <HAL_GPIO_Init+0x324>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d00d      	beq.n	8012aee <HAL_GPIO_Init+0x212>
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4a4b      	ldr	r2, [pc, #300]	; (8012c04 <HAL_GPIO_Init+0x328>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d007      	beq.n	8012aea <HAL_GPIO_Init+0x20e>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4a4a      	ldr	r2, [pc, #296]	; (8012c08 <HAL_GPIO_Init+0x32c>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d101      	bne.n	8012ae6 <HAL_GPIO_Init+0x20a>
 8012ae2:	2307      	movs	r3, #7
 8012ae4:	e00e      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012ae6:	2308      	movs	r3, #8
 8012ae8:	e00c      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012aea:	2306      	movs	r3, #6
 8012aec:	e00a      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012aee:	2305      	movs	r3, #5
 8012af0:	e008      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012af2:	2304      	movs	r3, #4
 8012af4:	e006      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012af6:	2303      	movs	r3, #3
 8012af8:	e004      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012afa:	2302      	movs	r3, #2
 8012afc:	e002      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012afe:	2301      	movs	r3, #1
 8012b00:	e000      	b.n	8012b04 <HAL_GPIO_Init+0x228>
 8012b02:	2300      	movs	r3, #0
 8012b04:	69fa      	ldr	r2, [r7, #28]
 8012b06:	f002 0203 	and.w	r2, r2, #3
 8012b0a:	0092      	lsls	r2, r2, #2
 8012b0c:	4093      	lsls	r3, r2
 8012b0e:	69ba      	ldr	r2, [r7, #24]
 8012b10:	4313      	orrs	r3, r2
 8012b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012b14:	4934      	ldr	r1, [pc, #208]	; (8012be8 <HAL_GPIO_Init+0x30c>)
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	089b      	lsrs	r3, r3, #2
 8012b1a:	3302      	adds	r3, #2
 8012b1c:	69ba      	ldr	r2, [r7, #24]
 8012b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012b22:	4b3a      	ldr	r3, [pc, #232]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	43db      	mvns	r3, r3
 8012b2c:	69ba      	ldr	r2, [r7, #24]
 8012b2e:	4013      	ands	r3, r2
 8012b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012b3e:	69ba      	ldr	r2, [r7, #24]
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	4313      	orrs	r3, r2
 8012b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012b46:	4a31      	ldr	r2, [pc, #196]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012b4c:	4b2f      	ldr	r3, [pc, #188]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	43db      	mvns	r3, r3
 8012b56:	69ba      	ldr	r2, [r7, #24]
 8012b58:	4013      	ands	r3, r2
 8012b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d003      	beq.n	8012b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012b68:	69ba      	ldr	r2, [r7, #24]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012b70:	4a26      	ldr	r2, [pc, #152]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012b76:	4b25      	ldr	r3, [pc, #148]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b78:	689b      	ldr	r3, [r3, #8]
 8012b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	43db      	mvns	r3, r3
 8012b80:	69ba      	ldr	r2, [r7, #24]
 8012b82:	4013      	ands	r3, r2
 8012b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d003      	beq.n	8012b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012b92:	69ba      	ldr	r2, [r7, #24]
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012b9a:	4a1c      	ldr	r2, [pc, #112]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012ba0:	4b1a      	ldr	r3, [pc, #104]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	43db      	mvns	r3, r3
 8012baa:	69ba      	ldr	r2, [r7, #24]
 8012bac:	4013      	ands	r3, r2
 8012bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d003      	beq.n	8012bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012bbc:	69ba      	ldr	r2, [r7, #24]
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	4313      	orrs	r3, r2
 8012bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012bc4:	4a11      	ldr	r2, [pc, #68]	; (8012c0c <HAL_GPIO_Init+0x330>)
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	61fb      	str	r3, [r7, #28]
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	2b0f      	cmp	r3, #15
 8012bd4:	f67f ae90 	bls.w	80128f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012bd8:	bf00      	nop
 8012bda:	3724      	adds	r7, #36	; 0x24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr
 8012be4:	40023800 	.word	0x40023800
 8012be8:	40013800 	.word	0x40013800
 8012bec:	40020000 	.word	0x40020000
 8012bf0:	40020400 	.word	0x40020400
 8012bf4:	40020800 	.word	0x40020800
 8012bf8:	40020c00 	.word	0x40020c00
 8012bfc:	40021000 	.word	0x40021000
 8012c00:	40021400 	.word	0x40021400
 8012c04:	40021800 	.word	0x40021800
 8012c08:	40021c00 	.word	0x40021c00
 8012c0c:	40013c00 	.word	0x40013c00

08012c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	460b      	mov	r3, r1
 8012c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	691a      	ldr	r2, [r3, #16]
 8012c20:	887b      	ldrh	r3, [r7, #2]
 8012c22:	4013      	ands	r3, r2
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d002      	beq.n	8012c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	73fb      	strb	r3, [r7, #15]
 8012c2c:	e001      	b.n	8012c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3714      	adds	r7, #20
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012c50:	787b      	ldrb	r3, [r7, #1]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d003      	beq.n	8012c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012c56:	887a      	ldrh	r2, [r7, #2]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012c5c:	e003      	b.n	8012c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012c5e:	887b      	ldrh	r3, [r7, #2]
 8012c60:	041a      	lsls	r2, r3, #16
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	619a      	str	r2, [r3, #24]
}
 8012c66:	bf00      	nop
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
	...

08012c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b086      	sub	sp, #24
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d101      	bne.n	8012c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012c82:	2301      	movs	r3, #1
 8012c84:	e25b      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f003 0301 	and.w	r3, r3, #1
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d075      	beq.n	8012d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012c92:	4ba3      	ldr	r3, [pc, #652]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012c94:	689b      	ldr	r3, [r3, #8]
 8012c96:	f003 030c 	and.w	r3, r3, #12
 8012c9a:	2b04      	cmp	r3, #4
 8012c9c:	d00c      	beq.n	8012cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012c9e:	4ba0      	ldr	r3, [pc, #640]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ca0:	689b      	ldr	r3, [r3, #8]
 8012ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012ca6:	2b08      	cmp	r3, #8
 8012ca8:	d112      	bne.n	8012cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012caa:	4b9d      	ldr	r3, [pc, #628]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012cb6:	d10b      	bne.n	8012cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012cb8:	4b99      	ldr	r3, [pc, #612]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d05b      	beq.n	8012d7c <HAL_RCC_OscConfig+0x108>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d157      	bne.n	8012d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	e236      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cd8:	d106      	bne.n	8012ce8 <HAL_RCC_OscConfig+0x74>
 8012cda:	4b91      	ldr	r3, [pc, #580]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a90      	ldr	r2, [pc, #576]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012ce4:	6013      	str	r3, [r2, #0]
 8012ce6:	e01d      	b.n	8012d24 <HAL_RCC_OscConfig+0xb0>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012cf0:	d10c      	bne.n	8012d0c <HAL_RCC_OscConfig+0x98>
 8012cf2:	4b8b      	ldr	r3, [pc, #556]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4a8a      	ldr	r2, [pc, #552]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cfc:	6013      	str	r3, [r2, #0]
 8012cfe:	4b88      	ldr	r3, [pc, #544]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4a87      	ldr	r2, [pc, #540]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	e00b      	b.n	8012d24 <HAL_RCC_OscConfig+0xb0>
 8012d0c:	4b84      	ldr	r3, [pc, #528]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4a83      	ldr	r2, [pc, #524]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d16:	6013      	str	r3, [r2, #0]
 8012d18:	4b81      	ldr	r3, [pc, #516]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a80      	ldr	r2, [pc, #512]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d013      	beq.n	8012d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d2c:	f7fd ffa6 	bl	8010c7c <HAL_GetTick>
 8012d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d32:	e008      	b.n	8012d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012d34:	f7fd ffa2 	bl	8010c7c <HAL_GetTick>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	2b64      	cmp	r3, #100	; 0x64
 8012d40:	d901      	bls.n	8012d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012d42:	2303      	movs	r3, #3
 8012d44:	e1fb      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d46:	4b76      	ldr	r3, [pc, #472]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0f0      	beq.n	8012d34 <HAL_RCC_OscConfig+0xc0>
 8012d52:	e014      	b.n	8012d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d54:	f7fd ff92 	bl	8010c7c <HAL_GetTick>
 8012d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012d5a:	e008      	b.n	8012d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012d5c:	f7fd ff8e 	bl	8010c7c <HAL_GetTick>
 8012d60:	4602      	mov	r2, r0
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	2b64      	cmp	r3, #100	; 0x64
 8012d68:	d901      	bls.n	8012d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012d6a:	2303      	movs	r3, #3
 8012d6c:	e1e7      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012d6e:	4b6c      	ldr	r3, [pc, #432]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d1f0      	bne.n	8012d5c <HAL_RCC_OscConfig+0xe8>
 8012d7a:	e000      	b.n	8012d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	f003 0302 	and.w	r3, r3, #2
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d063      	beq.n	8012e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012d8a:	4b65      	ldr	r3, [pc, #404]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	f003 030c 	and.w	r3, r3, #12
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00b      	beq.n	8012dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012d96:	4b62      	ldr	r3, [pc, #392]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012d98:	689b      	ldr	r3, [r3, #8]
 8012d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012d9e:	2b08      	cmp	r3, #8
 8012da0:	d11c      	bne.n	8012ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012da2:	4b5f      	ldr	r3, [pc, #380]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d116      	bne.n	8012ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012dae:	4b5c      	ldr	r3, [pc, #368]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f003 0302 	and.w	r3, r3, #2
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d005      	beq.n	8012dc6 <HAL_RCC_OscConfig+0x152>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d001      	beq.n	8012dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	e1bb      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012dc6:	4b56      	ldr	r3, [pc, #344]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	691b      	ldr	r3, [r3, #16]
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	4952      	ldr	r1, [pc, #328]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012dda:	e03a      	b.n	8012e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d020      	beq.n	8012e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012de4:	4b4f      	ldr	r3, [pc, #316]	; (8012f24 <HAL_RCC_OscConfig+0x2b0>)
 8012de6:	2201      	movs	r2, #1
 8012de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dea:	f7fd ff47 	bl	8010c7c <HAL_GetTick>
 8012dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012df0:	e008      	b.n	8012e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012df2:	f7fd ff43 	bl	8010c7c <HAL_GetTick>
 8012df6:	4602      	mov	r2, r0
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d901      	bls.n	8012e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012e00:	2303      	movs	r3, #3
 8012e02:	e19c      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e04:	4b46      	ldr	r3, [pc, #280]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	f003 0302 	and.w	r3, r3, #2
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d0f0      	beq.n	8012df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e10:	4b43      	ldr	r3, [pc, #268]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	4940      	ldr	r1, [pc, #256]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012e20:	4313      	orrs	r3, r2
 8012e22:	600b      	str	r3, [r1, #0]
 8012e24:	e015      	b.n	8012e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012e26:	4b3f      	ldr	r3, [pc, #252]	; (8012f24 <HAL_RCC_OscConfig+0x2b0>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e2c:	f7fd ff26 	bl	8010c7c <HAL_GetTick>
 8012e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e32:	e008      	b.n	8012e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012e34:	f7fd ff22 	bl	8010c7c <HAL_GetTick>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	1ad3      	subs	r3, r2, r3
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d901      	bls.n	8012e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012e42:	2303      	movs	r3, #3
 8012e44:	e17b      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e46:	4b36      	ldr	r3, [pc, #216]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f003 0302 	and.w	r3, r3, #2
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d1f0      	bne.n	8012e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f003 0308 	and.w	r3, r3, #8
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d030      	beq.n	8012ec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d016      	beq.n	8012e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012e66:	4b30      	ldr	r3, [pc, #192]	; (8012f28 <HAL_RCC_OscConfig+0x2b4>)
 8012e68:	2201      	movs	r2, #1
 8012e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e6c:	f7fd ff06 	bl	8010c7c <HAL_GetTick>
 8012e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e72:	e008      	b.n	8012e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012e74:	f7fd ff02 	bl	8010c7c <HAL_GetTick>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	2b02      	cmp	r3, #2
 8012e80:	d901      	bls.n	8012e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012e82:	2303      	movs	r3, #3
 8012e84:	e15b      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e86:	4b26      	ldr	r3, [pc, #152]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d0f0      	beq.n	8012e74 <HAL_RCC_OscConfig+0x200>
 8012e92:	e015      	b.n	8012ec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012e94:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <HAL_RCC_OscConfig+0x2b4>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012e9a:	f7fd feef 	bl	8010c7c <HAL_GetTick>
 8012e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012ea0:	e008      	b.n	8012eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012ea2:	f7fd feeb 	bl	8010c7c <HAL_GetTick>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	2b02      	cmp	r3, #2
 8012eae:	d901      	bls.n	8012eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012eb0:	2303      	movs	r3, #3
 8012eb2:	e144      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012eb4:	4b1a      	ldr	r3, [pc, #104]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012eb8:	f003 0302 	and.w	r3, r3, #2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d1f0      	bne.n	8012ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f003 0304 	and.w	r3, r3, #4
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f000 80a0 	beq.w	801300e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012ed2:	4b13      	ldr	r3, [pc, #76]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10f      	bne.n	8012efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012ede:	2300      	movs	r3, #0
 8012ee0:	60bb      	str	r3, [r7, #8]
 8012ee2:	4b0f      	ldr	r3, [pc, #60]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee6:	4a0e      	ldr	r2, [pc, #56]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012eec:	6413      	str	r3, [r2, #64]	; 0x40
 8012eee:	4b0c      	ldr	r3, [pc, #48]	; (8012f20 <HAL_RCC_OscConfig+0x2ac>)
 8012ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ef6:	60bb      	str	r3, [r7, #8]
 8012ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012efa:	2301      	movs	r3, #1
 8012efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012efe:	4b0b      	ldr	r3, [pc, #44]	; (8012f2c <HAL_RCC_OscConfig+0x2b8>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d121      	bne.n	8012f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012f0a:	4b08      	ldr	r3, [pc, #32]	; (8012f2c <HAL_RCC_OscConfig+0x2b8>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a07      	ldr	r2, [pc, #28]	; (8012f2c <HAL_RCC_OscConfig+0x2b8>)
 8012f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012f16:	f7fd feb1 	bl	8010c7c <HAL_GetTick>
 8012f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f1c:	e011      	b.n	8012f42 <HAL_RCC_OscConfig+0x2ce>
 8012f1e:	bf00      	nop
 8012f20:	40023800 	.word	0x40023800
 8012f24:	42470000 	.word	0x42470000
 8012f28:	42470e80 	.word	0x42470e80
 8012f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f30:	f7fd fea4 	bl	8010c7c <HAL_GetTick>
 8012f34:	4602      	mov	r2, r0
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	1ad3      	subs	r3, r2, r3
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d901      	bls.n	8012f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012f3e:	2303      	movs	r3, #3
 8012f40:	e0fd      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f42:	4b81      	ldr	r3, [pc, #516]	; (8013148 <HAL_RCC_OscConfig+0x4d4>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d0f0      	beq.n	8012f30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d106      	bne.n	8012f64 <HAL_RCC_OscConfig+0x2f0>
 8012f56:	4b7d      	ldr	r3, [pc, #500]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f5a:	4a7c      	ldr	r2, [pc, #496]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f5c:	f043 0301 	orr.w	r3, r3, #1
 8012f60:	6713      	str	r3, [r2, #112]	; 0x70
 8012f62:	e01c      	b.n	8012f9e <HAL_RCC_OscConfig+0x32a>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	2b05      	cmp	r3, #5
 8012f6a:	d10c      	bne.n	8012f86 <HAL_RCC_OscConfig+0x312>
 8012f6c:	4b77      	ldr	r3, [pc, #476]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f70:	4a76      	ldr	r2, [pc, #472]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f72:	f043 0304 	orr.w	r3, r3, #4
 8012f76:	6713      	str	r3, [r2, #112]	; 0x70
 8012f78:	4b74      	ldr	r3, [pc, #464]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7c:	4a73      	ldr	r2, [pc, #460]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f7e:	f043 0301 	orr.w	r3, r3, #1
 8012f82:	6713      	str	r3, [r2, #112]	; 0x70
 8012f84:	e00b      	b.n	8012f9e <HAL_RCC_OscConfig+0x32a>
 8012f86:	4b71      	ldr	r3, [pc, #452]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8a:	4a70      	ldr	r2, [pc, #448]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f8c:	f023 0301 	bic.w	r3, r3, #1
 8012f90:	6713      	str	r3, [r2, #112]	; 0x70
 8012f92:	4b6e      	ldr	r3, [pc, #440]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f96:	4a6d      	ldr	r2, [pc, #436]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012f98:	f023 0304 	bic.w	r3, r3, #4
 8012f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	689b      	ldr	r3, [r3, #8]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d015      	beq.n	8012fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fa6:	f7fd fe69 	bl	8010c7c <HAL_GetTick>
 8012faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012fac:	e00a      	b.n	8012fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012fae:	f7fd fe65 	bl	8010c7c <HAL_GetTick>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	1ad3      	subs	r3, r2, r3
 8012fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fbc:	4293      	cmp	r3, r2
 8012fbe:	d901      	bls.n	8012fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012fc0:	2303      	movs	r3, #3
 8012fc2:	e0bc      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012fc4:	4b61      	ldr	r3, [pc, #388]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fc8:	f003 0302 	and.w	r3, r3, #2
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d0ee      	beq.n	8012fae <HAL_RCC_OscConfig+0x33a>
 8012fd0:	e014      	b.n	8012ffc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012fd2:	f7fd fe53 	bl	8010c7c <HAL_GetTick>
 8012fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012fd8:	e00a      	b.n	8012ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012fda:	f7fd fe4f 	bl	8010c7c <HAL_GetTick>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d901      	bls.n	8012ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012fec:	2303      	movs	r3, #3
 8012fee:	e0a6      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012ff0:	4b56      	ldr	r3, [pc, #344]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8012ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ff4:	f003 0302 	and.w	r3, r3, #2
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1ee      	bne.n	8012fda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d105      	bne.n	801300e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013002:	4b52      	ldr	r3, [pc, #328]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8013004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013006:	4a51      	ldr	r2, [pc, #324]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 8013008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801300c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	699b      	ldr	r3, [r3, #24]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f000 8092 	beq.w	801313c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013018:	4b4c      	ldr	r3, [pc, #304]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 801301a:	689b      	ldr	r3, [r3, #8]
 801301c:	f003 030c 	and.w	r3, r3, #12
 8013020:	2b08      	cmp	r3, #8
 8013022:	d05c      	beq.n	80130de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	699b      	ldr	r3, [r3, #24]
 8013028:	2b02      	cmp	r3, #2
 801302a:	d141      	bne.n	80130b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801302c:	4b48      	ldr	r3, [pc, #288]	; (8013150 <HAL_RCC_OscConfig+0x4dc>)
 801302e:	2200      	movs	r2, #0
 8013030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013032:	f7fd fe23 	bl	8010c7c <HAL_GetTick>
 8013036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013038:	e008      	b.n	801304c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801303a:	f7fd fe1f 	bl	8010c7c <HAL_GetTick>
 801303e:	4602      	mov	r2, r0
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	2b02      	cmp	r3, #2
 8013046:	d901      	bls.n	801304c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013048:	2303      	movs	r3, #3
 801304a:	e078      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801304c:	4b3f      	ldr	r3, [pc, #252]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1f0      	bne.n	801303a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	69da      	ldr	r2, [r3, #28]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6a1b      	ldr	r3, [r3, #32]
 8013060:	431a      	orrs	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013066:	019b      	lsls	r3, r3, #6
 8013068:	431a      	orrs	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801306e:	085b      	lsrs	r3, r3, #1
 8013070:	3b01      	subs	r3, #1
 8013072:	041b      	lsls	r3, r3, #16
 8013074:	431a      	orrs	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307a:	061b      	lsls	r3, r3, #24
 801307c:	4933      	ldr	r1, [pc, #204]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 801307e:	4313      	orrs	r3, r2
 8013080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013082:	4b33      	ldr	r3, [pc, #204]	; (8013150 <HAL_RCC_OscConfig+0x4dc>)
 8013084:	2201      	movs	r2, #1
 8013086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013088:	f7fd fdf8 	bl	8010c7c <HAL_GetTick>
 801308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801308e:	e008      	b.n	80130a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013090:	f7fd fdf4 	bl	8010c7c <HAL_GetTick>
 8013094:	4602      	mov	r2, r0
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	1ad3      	subs	r3, r2, r3
 801309a:	2b02      	cmp	r3, #2
 801309c:	d901      	bls.n	80130a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801309e:	2303      	movs	r3, #3
 80130a0:	e04d      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130a2:	4b2a      	ldr	r3, [pc, #168]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d0f0      	beq.n	8013090 <HAL_RCC_OscConfig+0x41c>
 80130ae:	e045      	b.n	801313c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80130b0:	4b27      	ldr	r3, [pc, #156]	; (8013150 <HAL_RCC_OscConfig+0x4dc>)
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130b6:	f7fd fde1 	bl	8010c7c <HAL_GetTick>
 80130ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80130bc:	e008      	b.n	80130d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80130be:	f7fd fddd 	bl	8010c7c <HAL_GetTick>
 80130c2:	4602      	mov	r2, r0
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	1ad3      	subs	r3, r2, r3
 80130c8:	2b02      	cmp	r3, #2
 80130ca:	d901      	bls.n	80130d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80130cc:	2303      	movs	r3, #3
 80130ce:	e036      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80130d0:	4b1e      	ldr	r3, [pc, #120]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1f0      	bne.n	80130be <HAL_RCC_OscConfig+0x44a>
 80130dc:	e02e      	b.n	801313c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	699b      	ldr	r3, [r3, #24]
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d101      	bne.n	80130ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80130e6:	2301      	movs	r3, #1
 80130e8:	e029      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80130ea:	4b18      	ldr	r3, [pc, #96]	; (801314c <HAL_RCC_OscConfig+0x4d8>)
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	69db      	ldr	r3, [r3, #28]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d11c      	bne.n	8013138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013108:	429a      	cmp	r2, r3
 801310a:	d115      	bne.n	8013138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013112:	4013      	ands	r3, r2
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013118:	4293      	cmp	r3, r2
 801311a:	d10d      	bne.n	8013138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013126:	429a      	cmp	r2, r3
 8013128:	d106      	bne.n	8013138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013134:	429a      	cmp	r2, r3
 8013136:	d001      	beq.n	801313c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013138:	2301      	movs	r3, #1
 801313a:	e000      	b.n	801313e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801313c:	2300      	movs	r3, #0
}
 801313e:	4618      	mov	r0, r3
 8013140:	3718      	adds	r7, #24
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	40007000 	.word	0x40007000
 801314c:	40023800 	.word	0x40023800
 8013150:	42470060 	.word	0x42470060

08013154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d101      	bne.n	8013168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013164:	2301      	movs	r3, #1
 8013166:	e0cc      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013168:	4b68      	ldr	r3, [pc, #416]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f003 030f 	and.w	r3, r3, #15
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	429a      	cmp	r2, r3
 8013174:	d90c      	bls.n	8013190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013176:	4b65      	ldr	r3, [pc, #404]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	b2d2      	uxtb	r2, r2
 801317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801317e:	4b63      	ldr	r3, [pc, #396]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f003 030f 	and.w	r3, r3, #15
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	429a      	cmp	r2, r3
 801318a:	d001      	beq.n	8013190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801318c:	2301      	movs	r3, #1
 801318e:	e0b8      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f003 0302 	and.w	r3, r3, #2
 8013198:	2b00      	cmp	r3, #0
 801319a:	d020      	beq.n	80131de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f003 0304 	and.w	r3, r3, #4
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d005      	beq.n	80131b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80131a8:	4b59      	ldr	r3, [pc, #356]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	4a58      	ldr	r2, [pc, #352]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80131b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f003 0308 	and.w	r3, r3, #8
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d005      	beq.n	80131cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80131c0:	4b53      	ldr	r3, [pc, #332]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	4a52      	ldr	r2, [pc, #328]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80131ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80131cc:	4b50      	ldr	r3, [pc, #320]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	494d      	ldr	r1, [pc, #308]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131da:	4313      	orrs	r3, r2
 80131dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f003 0301 	and.w	r3, r3, #1
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d044      	beq.n	8013274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	2b01      	cmp	r3, #1
 80131f0:	d107      	bne.n	8013202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80131f2:	4b47      	ldr	r3, [pc, #284]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d119      	bne.n	8013232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80131fe:	2301      	movs	r3, #1
 8013200:	e07f      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	2b02      	cmp	r3, #2
 8013208:	d003      	beq.n	8013212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801320e:	2b03      	cmp	r3, #3
 8013210:	d107      	bne.n	8013222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013212:	4b3f      	ldr	r3, [pc, #252]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801321a:	2b00      	cmp	r3, #0
 801321c:	d109      	bne.n	8013232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801321e:	2301      	movs	r3, #1
 8013220:	e06f      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013222:	4b3b      	ldr	r3, [pc, #236]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f003 0302 	and.w	r3, r3, #2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d101      	bne.n	8013232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801322e:	2301      	movs	r3, #1
 8013230:	e067      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013232:	4b37      	ldr	r3, [pc, #220]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	f023 0203 	bic.w	r2, r3, #3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	4934      	ldr	r1, [pc, #208]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 8013240:	4313      	orrs	r3, r2
 8013242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013244:	f7fd fd1a 	bl	8010c7c <HAL_GetTick>
 8013248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801324a:	e00a      	b.n	8013262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801324c:	f7fd fd16 	bl	8010c7c <HAL_GetTick>
 8013250:	4602      	mov	r2, r0
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	1ad3      	subs	r3, r2, r3
 8013256:	f241 3288 	movw	r2, #5000	; 0x1388
 801325a:	4293      	cmp	r3, r2
 801325c:	d901      	bls.n	8013262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801325e:	2303      	movs	r3, #3
 8013260:	e04f      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013262:	4b2b      	ldr	r3, [pc, #172]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 8013264:	689b      	ldr	r3, [r3, #8]
 8013266:	f003 020c 	and.w	r2, r3, #12
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	009b      	lsls	r3, r3, #2
 8013270:	429a      	cmp	r2, r3
 8013272:	d1eb      	bne.n	801324c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013274:	4b25      	ldr	r3, [pc, #148]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f003 030f 	and.w	r3, r3, #15
 801327c:	683a      	ldr	r2, [r7, #0]
 801327e:	429a      	cmp	r2, r3
 8013280:	d20c      	bcs.n	801329c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013282:	4b22      	ldr	r3, [pc, #136]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	b2d2      	uxtb	r2, r2
 8013288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801328a:	4b20      	ldr	r3, [pc, #128]	; (801330c <HAL_RCC_ClockConfig+0x1b8>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f003 030f 	and.w	r3, r3, #15
 8013292:	683a      	ldr	r2, [r7, #0]
 8013294:	429a      	cmp	r2, r3
 8013296:	d001      	beq.n	801329c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013298:	2301      	movs	r3, #1
 801329a:	e032      	b.n	8013302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f003 0304 	and.w	r3, r3, #4
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d008      	beq.n	80132ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80132a8:	4b19      	ldr	r3, [pc, #100]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80132aa:	689b      	ldr	r3, [r3, #8]
 80132ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	4916      	ldr	r1, [pc, #88]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80132b6:	4313      	orrs	r3, r2
 80132b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f003 0308 	and.w	r3, r3, #8
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d009      	beq.n	80132da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80132c6:	4b12      	ldr	r3, [pc, #72]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	691b      	ldr	r3, [r3, #16]
 80132d2:	00db      	lsls	r3, r3, #3
 80132d4:	490e      	ldr	r1, [pc, #56]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80132d6:	4313      	orrs	r3, r2
 80132d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80132da:	f000 f821 	bl	8013320 <HAL_RCC_GetSysClockFreq>
 80132de:	4601      	mov	r1, r0
 80132e0:	4b0b      	ldr	r3, [pc, #44]	; (8013310 <HAL_RCC_ClockConfig+0x1bc>)
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	091b      	lsrs	r3, r3, #4
 80132e6:	f003 030f 	and.w	r3, r3, #15
 80132ea:	4a0a      	ldr	r2, [pc, #40]	; (8013314 <HAL_RCC_ClockConfig+0x1c0>)
 80132ec:	5cd3      	ldrb	r3, [r2, r3]
 80132ee:	fa21 f303 	lsr.w	r3, r1, r3
 80132f2:	4a09      	ldr	r2, [pc, #36]	; (8013318 <HAL_RCC_ClockConfig+0x1c4>)
 80132f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80132f6:	4b09      	ldr	r3, [pc, #36]	; (801331c <HAL_RCC_ClockConfig+0x1c8>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7fd fc7a 	bl	8010bf4 <HAL_InitTick>

  return HAL_OK;
 8013300:	2300      	movs	r3, #0
}
 8013302:	4618      	mov	r0, r3
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	40023c00 	.word	0x40023c00
 8013310:	40023800 	.word	0x40023800
 8013314:	08018978 	.word	0x08018978
 8013318:	20000080 	.word	0x20000080
 801331c:	20000084 	.word	0x20000084

08013320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013322:	b085      	sub	sp, #20
 8013324:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013326:	2300      	movs	r3, #0
 8013328:	607b      	str	r3, [r7, #4]
 801332a:	2300      	movs	r3, #0
 801332c:	60fb      	str	r3, [r7, #12]
 801332e:	2300      	movs	r3, #0
 8013330:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013332:	2300      	movs	r3, #0
 8013334:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013336:	4b63      	ldr	r3, [pc, #396]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013338:	689b      	ldr	r3, [r3, #8]
 801333a:	f003 030c 	and.w	r3, r3, #12
 801333e:	2b04      	cmp	r3, #4
 8013340:	d007      	beq.n	8013352 <HAL_RCC_GetSysClockFreq+0x32>
 8013342:	2b08      	cmp	r3, #8
 8013344:	d008      	beq.n	8013358 <HAL_RCC_GetSysClockFreq+0x38>
 8013346:	2b00      	cmp	r3, #0
 8013348:	f040 80b4 	bne.w	80134b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801334c:	4b5e      	ldr	r3, [pc, #376]	; (80134c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801334e:	60bb      	str	r3, [r7, #8]
       break;
 8013350:	e0b3      	b.n	80134ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013352:	4b5e      	ldr	r3, [pc, #376]	; (80134cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8013354:	60bb      	str	r3, [r7, #8]
      break;
 8013356:	e0b0      	b.n	80134ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013358:	4b5a      	ldr	r3, [pc, #360]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013360:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013362:	4b58      	ldr	r3, [pc, #352]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801336a:	2b00      	cmp	r3, #0
 801336c:	d04a      	beq.n	8013404 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801336e:	4b55      	ldr	r3, [pc, #340]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	099b      	lsrs	r3, r3, #6
 8013374:	f04f 0400 	mov.w	r4, #0
 8013378:	f240 11ff 	movw	r1, #511	; 0x1ff
 801337c:	f04f 0200 	mov.w	r2, #0
 8013380:	ea03 0501 	and.w	r5, r3, r1
 8013384:	ea04 0602 	and.w	r6, r4, r2
 8013388:	4629      	mov	r1, r5
 801338a:	4632      	mov	r2, r6
 801338c:	f04f 0300 	mov.w	r3, #0
 8013390:	f04f 0400 	mov.w	r4, #0
 8013394:	0154      	lsls	r4, r2, #5
 8013396:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801339a:	014b      	lsls	r3, r1, #5
 801339c:	4619      	mov	r1, r3
 801339e:	4622      	mov	r2, r4
 80133a0:	1b49      	subs	r1, r1, r5
 80133a2:	eb62 0206 	sbc.w	r2, r2, r6
 80133a6:	f04f 0300 	mov.w	r3, #0
 80133aa:	f04f 0400 	mov.w	r4, #0
 80133ae:	0194      	lsls	r4, r2, #6
 80133b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80133b4:	018b      	lsls	r3, r1, #6
 80133b6:	1a5b      	subs	r3, r3, r1
 80133b8:	eb64 0402 	sbc.w	r4, r4, r2
 80133bc:	f04f 0100 	mov.w	r1, #0
 80133c0:	f04f 0200 	mov.w	r2, #0
 80133c4:	00e2      	lsls	r2, r4, #3
 80133c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80133ca:	00d9      	lsls	r1, r3, #3
 80133cc:	460b      	mov	r3, r1
 80133ce:	4614      	mov	r4, r2
 80133d0:	195b      	adds	r3, r3, r5
 80133d2:	eb44 0406 	adc.w	r4, r4, r6
 80133d6:	f04f 0100 	mov.w	r1, #0
 80133da:	f04f 0200 	mov.w	r2, #0
 80133de:	0262      	lsls	r2, r4, #9
 80133e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80133e4:	0259      	lsls	r1, r3, #9
 80133e6:	460b      	mov	r3, r1
 80133e8:	4614      	mov	r4, r2
 80133ea:	4618      	mov	r0, r3
 80133ec:	4621      	mov	r1, r4
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f04f 0400 	mov.w	r4, #0
 80133f4:	461a      	mov	r2, r3
 80133f6:	4623      	mov	r3, r4
 80133f8:	f7f5 fb5e 	bl	8008ab8 <__aeabi_uldivmod>
 80133fc:	4603      	mov	r3, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	60fb      	str	r3, [r7, #12]
 8013402:	e049      	b.n	8013498 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013404:	4b2f      	ldr	r3, [pc, #188]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	099b      	lsrs	r3, r3, #6
 801340a:	f04f 0400 	mov.w	r4, #0
 801340e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013412:	f04f 0200 	mov.w	r2, #0
 8013416:	ea03 0501 	and.w	r5, r3, r1
 801341a:	ea04 0602 	and.w	r6, r4, r2
 801341e:	4629      	mov	r1, r5
 8013420:	4632      	mov	r2, r6
 8013422:	f04f 0300 	mov.w	r3, #0
 8013426:	f04f 0400 	mov.w	r4, #0
 801342a:	0154      	lsls	r4, r2, #5
 801342c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013430:	014b      	lsls	r3, r1, #5
 8013432:	4619      	mov	r1, r3
 8013434:	4622      	mov	r2, r4
 8013436:	1b49      	subs	r1, r1, r5
 8013438:	eb62 0206 	sbc.w	r2, r2, r6
 801343c:	f04f 0300 	mov.w	r3, #0
 8013440:	f04f 0400 	mov.w	r4, #0
 8013444:	0194      	lsls	r4, r2, #6
 8013446:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801344a:	018b      	lsls	r3, r1, #6
 801344c:	1a5b      	subs	r3, r3, r1
 801344e:	eb64 0402 	sbc.w	r4, r4, r2
 8013452:	f04f 0100 	mov.w	r1, #0
 8013456:	f04f 0200 	mov.w	r2, #0
 801345a:	00e2      	lsls	r2, r4, #3
 801345c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013460:	00d9      	lsls	r1, r3, #3
 8013462:	460b      	mov	r3, r1
 8013464:	4614      	mov	r4, r2
 8013466:	195b      	adds	r3, r3, r5
 8013468:	eb44 0406 	adc.w	r4, r4, r6
 801346c:	f04f 0100 	mov.w	r1, #0
 8013470:	f04f 0200 	mov.w	r2, #0
 8013474:	02a2      	lsls	r2, r4, #10
 8013476:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801347a:	0299      	lsls	r1, r3, #10
 801347c:	460b      	mov	r3, r1
 801347e:	4614      	mov	r4, r2
 8013480:	4618      	mov	r0, r3
 8013482:	4621      	mov	r1, r4
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f04f 0400 	mov.w	r4, #0
 801348a:	461a      	mov	r2, r3
 801348c:	4623      	mov	r3, r4
 801348e:	f7f5 fb13 	bl	8008ab8 <__aeabi_uldivmod>
 8013492:	4603      	mov	r3, r0
 8013494:	460c      	mov	r4, r1
 8013496:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013498:	4b0a      	ldr	r3, [pc, #40]	; (80134c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	0c1b      	lsrs	r3, r3, #16
 801349e:	f003 0303 	and.w	r3, r3, #3
 80134a2:	3301      	adds	r3, #1
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80134b0:	60bb      	str	r3, [r7, #8]
      break;
 80134b2:	e002      	b.n	80134ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80134b4:	4b04      	ldr	r3, [pc, #16]	; (80134c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80134b6:	60bb      	str	r3, [r7, #8]
      break;
 80134b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80134ba:	68bb      	ldr	r3, [r7, #8]
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3714      	adds	r7, #20
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134c4:	40023800 	.word	0x40023800
 80134c8:	00f42400 	.word	0x00f42400
 80134cc:	007a1200 	.word	0x007a1200

080134d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80134d0:	b480      	push	{r7}
 80134d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80134d4:	4b03      	ldr	r3, [pc, #12]	; (80134e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80134d6:	681b      	ldr	r3, [r3, #0]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop
 80134e4:	20000080 	.word	0x20000080

080134e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80134ec:	f7ff fff0 	bl	80134d0 <HAL_RCC_GetHCLKFreq>
 80134f0:	4601      	mov	r1, r0
 80134f2:	4b05      	ldr	r3, [pc, #20]	; (8013508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	0a9b      	lsrs	r3, r3, #10
 80134f8:	f003 0307 	and.w	r3, r3, #7
 80134fc:	4a03      	ldr	r2, [pc, #12]	; (801350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80134fe:	5cd3      	ldrb	r3, [r2, r3]
 8013500:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013504:	4618      	mov	r0, r3
 8013506:	bd80      	pop	{r7, pc}
 8013508:	40023800 	.word	0x40023800
 801350c:	08018988 	.word	0x08018988

08013510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013514:	f7ff ffdc 	bl	80134d0 <HAL_RCC_GetHCLKFreq>
 8013518:	4601      	mov	r1, r0
 801351a:	4b05      	ldr	r3, [pc, #20]	; (8013530 <HAL_RCC_GetPCLK2Freq+0x20>)
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	0b5b      	lsrs	r3, r3, #13
 8013520:	f003 0307 	and.w	r3, r3, #7
 8013524:	4a03      	ldr	r2, [pc, #12]	; (8013534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013526:	5cd3      	ldrb	r3, [r2, r3]
 8013528:	fa21 f303 	lsr.w	r3, r1, r3
}
 801352c:	4618      	mov	r0, r3
 801352e:	bd80      	pop	{r7, pc}
 8013530:	40023800 	.word	0x40023800
 8013534:	08018988 	.word	0x08018988

08013538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b082      	sub	sp, #8
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d101      	bne.n	801354a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013546:	2301      	movs	r3, #1
 8013548:	e056      	b.n	80135f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2200      	movs	r2, #0
 801354e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013556:	b2db      	uxtb	r3, r3
 8013558:	2b00      	cmp	r3, #0
 801355a:	d106      	bne.n	801356a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7fc ff4b 	bl	8010400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2202      	movs	r2, #2
 801356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013580:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	685a      	ldr	r2, [r3, #4]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	689b      	ldr	r3, [r3, #8]
 801358a:	431a      	orrs	r2, r3
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	431a      	orrs	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	691b      	ldr	r3, [r3, #16]
 8013596:	431a      	orrs	r2, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	695b      	ldr	r3, [r3, #20]
 801359c:	431a      	orrs	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	699b      	ldr	r3, [r3, #24]
 80135a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80135a6:	431a      	orrs	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	69db      	ldr	r3, [r3, #28]
 80135ac:	431a      	orrs	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6a1b      	ldr	r3, [r3, #32]
 80135b2:	ea42 0103 	orr.w	r1, r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	430a      	orrs	r2, r1
 80135c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	699b      	ldr	r3, [r3, #24]
 80135c6:	0c1b      	lsrs	r3, r3, #16
 80135c8:	f003 0104 	and.w	r1, r3, #4
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	430a      	orrs	r2, r1
 80135d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	69da      	ldr	r2, [r3, #28]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80135e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2200      	movs	r2, #0
 80135ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2201      	movs	r2, #1
 80135f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80135f6:	2300      	movs	r3, #0
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3708      	adds	r7, #8
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b088      	sub	sp, #32
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	603b      	str	r3, [r7, #0]
 801360c:	4613      	mov	r3, r2
 801360e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013610:	2300      	movs	r3, #0
 8013612:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801361a:	2b01      	cmp	r3, #1
 801361c:	d101      	bne.n	8013622 <HAL_SPI_Transmit+0x22>
 801361e:	2302      	movs	r3, #2
 8013620:	e11e      	b.n	8013860 <HAL_SPI_Transmit+0x260>
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2201      	movs	r2, #1
 8013626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801362a:	f7fd fb27 	bl	8010c7c <HAL_GetTick>
 801362e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013630:	88fb      	ldrh	r3, [r7, #6]
 8013632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2b01      	cmp	r3, #1
 801363e:	d002      	beq.n	8013646 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013640:	2302      	movs	r3, #2
 8013642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013644:	e103      	b.n	801384e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d002      	beq.n	8013652 <HAL_SPI_Transmit+0x52>
 801364c:	88fb      	ldrh	r3, [r7, #6]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d102      	bne.n	8013658 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013652:	2301      	movs	r3, #1
 8013654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013656:	e0fa      	b.n	801384e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	2203      	movs	r2, #3
 801365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2200      	movs	r2, #0
 8013664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	88fa      	ldrh	r2, [r7, #6]
 8013670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	88fa      	ldrh	r2, [r7, #6]
 8013676:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2200      	movs	r2, #0
 801367c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2200      	movs	r2, #0
 8013682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2200      	movs	r2, #0
 801368e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2200      	movs	r2, #0
 8013694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801369e:	d107      	bne.n	80136b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80136ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ba:	2b40      	cmp	r3, #64	; 0x40
 80136bc:	d007      	beq.n	80136ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80136d6:	d14b      	bne.n	8013770 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d002      	beq.n	80136e6 <HAL_SPI_Transmit+0xe6>
 80136e0:	8afb      	ldrh	r3, [r7, #22]
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d13e      	bne.n	8013764 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ea:	881a      	ldrh	r2, [r3, #0]
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f6:	1c9a      	adds	r2, r3, #2
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013700:	b29b      	uxth	r3, r3
 8013702:	3b01      	subs	r3, #1
 8013704:	b29a      	uxth	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801370a:	e02b      	b.n	8013764 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	f003 0302 	and.w	r3, r3, #2
 8013716:	2b02      	cmp	r3, #2
 8013718:	d112      	bne.n	8013740 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371e:	881a      	ldrh	r2, [r3, #0]
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801372a:	1c9a      	adds	r2, r3, #2
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013734:	b29b      	uxth	r3, r3
 8013736:	3b01      	subs	r3, #1
 8013738:	b29a      	uxth	r2, r3
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	86da      	strh	r2, [r3, #54]	; 0x36
 801373e:	e011      	b.n	8013764 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013740:	f7fd fa9c 	bl	8010c7c <HAL_GetTick>
 8013744:	4602      	mov	r2, r0
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	683a      	ldr	r2, [r7, #0]
 801374c:	429a      	cmp	r2, r3
 801374e:	d803      	bhi.n	8013758 <HAL_SPI_Transmit+0x158>
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013756:	d102      	bne.n	801375e <HAL_SPI_Transmit+0x15e>
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d102      	bne.n	8013764 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801375e:	2303      	movs	r3, #3
 8013760:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013762:	e074      	b.n	801384e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013768:	b29b      	uxth	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d1ce      	bne.n	801370c <HAL_SPI_Transmit+0x10c>
 801376e:	e04c      	b.n	801380a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <HAL_SPI_Transmit+0x17e>
 8013778:	8afb      	ldrh	r3, [r7, #22]
 801377a:	2b01      	cmp	r3, #1
 801377c:	d140      	bne.n	8013800 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	330c      	adds	r3, #12
 8013788:	7812      	ldrb	r2, [r2, #0]
 801378a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013790:	1c5a      	adds	r2, r3, #1
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801379a:	b29b      	uxth	r3, r3
 801379c:	3b01      	subs	r3, #1
 801379e:	b29a      	uxth	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80137a4:	e02c      	b.n	8013800 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	f003 0302 	and.w	r3, r3, #2
 80137b0:	2b02      	cmp	r3, #2
 80137b2:	d113      	bne.n	80137dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	330c      	adds	r3, #12
 80137be:	7812      	ldrb	r2, [r2, #0]
 80137c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c6:	1c5a      	adds	r2, r3, #1
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137d0:	b29b      	uxth	r3, r3
 80137d2:	3b01      	subs	r3, #1
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80137da:	e011      	b.n	8013800 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80137dc:	f7fd fa4e 	bl	8010c7c <HAL_GetTick>
 80137e0:	4602      	mov	r2, r0
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d803      	bhi.n	80137f4 <HAL_SPI_Transmit+0x1f4>
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137f2:	d102      	bne.n	80137fa <HAL_SPI_Transmit+0x1fa>
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d102      	bne.n	8013800 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80137fa:	2303      	movs	r3, #3
 80137fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80137fe:	e026      	b.n	801384e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013804:	b29b      	uxth	r3, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1cd      	bne.n	80137a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801380a:	69ba      	ldr	r2, [r7, #24]
 801380c:	6839      	ldr	r1, [r7, #0]
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f000 fba4 	bl	8013f5c <SPI_EndRxTxTransaction>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d002      	beq.n	8013820 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2220      	movs	r2, #32
 801381e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d10a      	bne.n	801383e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013828:	2300      	movs	r3, #0
 801382a:	613b      	str	r3, [r7, #16]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	613b      	str	r3, [r7, #16]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	689b      	ldr	r3, [r3, #8]
 801383a:	613b      	str	r3, [r7, #16]
 801383c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013842:	2b00      	cmp	r3, #0
 8013844:	d002      	beq.n	801384c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8013846:	2301      	movs	r3, #1
 8013848:	77fb      	strb	r3, [r7, #31]
 801384a:	e000      	b.n	801384e <HAL_SPI_Transmit+0x24e>
  }

error:
 801384c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2201      	movs	r2, #1
 8013852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2200      	movs	r2, #0
 801385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801385e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3720      	adds	r7, #32
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b088      	sub	sp, #32
 801386c:	af02      	add	r7, sp, #8
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	603b      	str	r3, [r7, #0]
 8013874:	4613      	mov	r3, r2
 8013876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013878:	2300      	movs	r3, #0
 801387a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013884:	d112      	bne.n	80138ac <HAL_SPI_Receive+0x44>
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d10e      	bne.n	80138ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2204      	movs	r2, #4
 8013892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013896:	88fa      	ldrh	r2, [r7, #6]
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	4613      	mov	r3, r2
 801389e:	68ba      	ldr	r2, [r7, #8]
 80138a0:	68b9      	ldr	r1, [r7, #8]
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f000 f8e9 	bl	8013a7a <HAL_SPI_TransmitReceive>
 80138a8:	4603      	mov	r3, r0
 80138aa:	e0e2      	b.n	8013a72 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d101      	bne.n	80138ba <HAL_SPI_Receive+0x52>
 80138b6:	2302      	movs	r3, #2
 80138b8:	e0db      	b.n	8013a72 <HAL_SPI_Receive+0x20a>
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	2201      	movs	r2, #1
 80138be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80138c2:	f7fd f9db 	bl	8010c7c <HAL_GetTick>
 80138c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138ce:	b2db      	uxtb	r3, r3
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d002      	beq.n	80138da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80138d4:	2302      	movs	r3, #2
 80138d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138d8:	e0c2      	b.n	8013a60 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d002      	beq.n	80138e6 <HAL_SPI_Receive+0x7e>
 80138e0:	88fb      	ldrh	r3, [r7, #6]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d102      	bne.n	80138ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80138e6:	2301      	movs	r3, #1
 80138e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138ea:	e0b9      	b.n	8013a60 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2204      	movs	r2, #4
 80138f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	68ba      	ldr	r2, [r7, #8]
 80138fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	88fa      	ldrh	r2, [r7, #6]
 8013904:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	88fa      	ldrh	r2, [r7, #6]
 801390a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2200      	movs	r2, #0
 8013910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2200      	movs	r2, #0
 801391c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2200      	movs	r2, #0
 8013928:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	689b      	ldr	r3, [r3, #8]
 801392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013932:	d107      	bne.n	8013944 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013942:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801394e:	2b40      	cmp	r3, #64	; 0x40
 8013950:	d007      	beq.n	8013962 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013960:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d162      	bne.n	8013a30 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801396a:	e02e      	b.n	80139ca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	f003 0301 	and.w	r3, r3, #1
 8013976:	2b01      	cmp	r3, #1
 8013978:	d115      	bne.n	80139a6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f103 020c 	add.w	r2, r3, #12
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013986:	7812      	ldrb	r2, [r2, #0]
 8013988:	b2d2      	uxtb	r2, r2
 801398a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013990:	1c5a      	adds	r2, r3, #1
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801399a:	b29b      	uxth	r3, r3
 801399c:	3b01      	subs	r3, #1
 801399e:	b29a      	uxth	r2, r3
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80139a4:	e011      	b.n	80139ca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80139a6:	f7fd f969 	bl	8010c7c <HAL_GetTick>
 80139aa:	4602      	mov	r2, r0
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d803      	bhi.n	80139be <HAL_SPI_Receive+0x156>
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139bc:	d102      	bne.n	80139c4 <HAL_SPI_Receive+0x15c>
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d102      	bne.n	80139ca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80139c4:	2303      	movs	r3, #3
 80139c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80139c8:	e04a      	b.n	8013a60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d1cb      	bne.n	801396c <HAL_SPI_Receive+0x104>
 80139d4:	e031      	b.n	8013a3a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	689b      	ldr	r3, [r3, #8]
 80139dc:	f003 0301 	and.w	r3, r3, #1
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d113      	bne.n	8013a0c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	68da      	ldr	r2, [r3, #12]
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ee:	b292      	uxth	r2, r2
 80139f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139f6:	1c9a      	adds	r2, r3, #2
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	3b01      	subs	r3, #1
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013a0a:	e011      	b.n	8013a30 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013a0c:	f7fd f936 	bl	8010c7c <HAL_GetTick>
 8013a10:	4602      	mov	r2, r0
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	1ad3      	subs	r3, r2, r3
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d803      	bhi.n	8013a24 <HAL_SPI_Receive+0x1bc>
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a22:	d102      	bne.n	8013a2a <HAL_SPI_Receive+0x1c2>
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d102      	bne.n	8013a30 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013a2a:	2303      	movs	r3, #3
 8013a2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013a2e:	e017      	b.n	8013a60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d1cd      	bne.n	80139d6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013a3a:	693a      	ldr	r2, [r7, #16]
 8013a3c:	6839      	ldr	r1, [r7, #0]
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f000 fa27 	bl	8013e92 <SPI_EndRxTransaction>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d002      	beq.n	8013a50 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2220      	movs	r2, #32
 8013a4e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d002      	beq.n	8013a5e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	75fb      	strb	r3, [r7, #23]
 8013a5c:	e000      	b.n	8013a60 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2201      	movs	r2, #1
 8013a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3718      	adds	r7, #24
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}

08013a7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b08c      	sub	sp, #48	; 0x30
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	60f8      	str	r0, [r7, #12]
 8013a82:	60b9      	str	r1, [r7, #8]
 8013a84:	607a      	str	r2, [r7, #4]
 8013a86:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d101      	bne.n	8013aa0 <HAL_SPI_TransmitReceive+0x26>
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e18a      	b.n	8013db6 <HAL_SPI_TransmitReceive+0x33c>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013aa8:	f7fd f8e8 	bl	8010c7c <HAL_GetTick>
 8013aac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013abe:	887b      	ldrh	r3, [r7, #2]
 8013ac0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d00f      	beq.n	8013aea <HAL_SPI_TransmitReceive+0x70>
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ad0:	d107      	bne.n	8013ae2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d103      	bne.n	8013ae2 <HAL_SPI_TransmitReceive+0x68>
 8013ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ade:	2b04      	cmp	r3, #4
 8013ae0:	d003      	beq.n	8013aea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013ae2:	2302      	movs	r3, #2
 8013ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013ae8:	e15b      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d005      	beq.n	8013afc <HAL_SPI_TransmitReceive+0x82>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d002      	beq.n	8013afc <HAL_SPI_TransmitReceive+0x82>
 8013af6:	887b      	ldrh	r3, [r7, #2]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d103      	bne.n	8013b04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013afc:	2301      	movs	r3, #1
 8013afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013b02:	e14e      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	2b04      	cmp	r3, #4
 8013b0e:	d003      	beq.n	8013b18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2205      	movs	r2, #5
 8013b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	887a      	ldrh	r2, [r7, #2]
 8013b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	887a      	ldrh	r2, [r7, #2]
 8013b2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	68ba      	ldr	r2, [r7, #8]
 8013b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	887a      	ldrh	r2, [r7, #2]
 8013b3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	887a      	ldrh	r2, [r7, #2]
 8013b40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2200      	movs	r2, #0
 8013b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b58:	2b40      	cmp	r3, #64	; 0x40
 8013b5a:	d007      	beq.n	8013b6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b74:	d178      	bne.n	8013c68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d002      	beq.n	8013b84 <HAL_SPI_TransmitReceive+0x10a>
 8013b7e:	8b7b      	ldrh	r3, [r7, #26]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d166      	bne.n	8013c52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b88:	881a      	ldrh	r2, [r3, #0]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b94:	1c9a      	adds	r2, r3, #2
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013ba8:	e053      	b.n	8013c52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	689b      	ldr	r3, [r3, #8]
 8013bb0:	f003 0302 	and.w	r3, r3, #2
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d11b      	bne.n	8013bf0 <HAL_SPI_TransmitReceive+0x176>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d016      	beq.n	8013bf0 <HAL_SPI_TransmitReceive+0x176>
 8013bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d113      	bne.n	8013bf0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bcc:	881a      	ldrh	r2, [r3, #0]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bd8:	1c9a      	adds	r2, r3, #2
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	3b01      	subs	r3, #1
 8013be6:	b29a      	uxth	r2, r3
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013bec:	2300      	movs	r3, #0
 8013bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	689b      	ldr	r3, [r3, #8]
 8013bf6:	f003 0301 	and.w	r3, r3, #1
 8013bfa:	2b01      	cmp	r3, #1
 8013bfc:	d119      	bne.n	8013c32 <HAL_SPI_TransmitReceive+0x1b8>
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d014      	beq.n	8013c32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	68da      	ldr	r2, [r3, #12]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c12:	b292      	uxth	r2, r2
 8013c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c1a:	1c9a      	adds	r2, r3, #2
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	3b01      	subs	r3, #1
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013c32:	f7fd f823 	bl	8010c7c <HAL_GetTick>
 8013c36:	4602      	mov	r2, r0
 8013c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d807      	bhi.n	8013c52 <HAL_SPI_TransmitReceive+0x1d8>
 8013c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c48:	d003      	beq.n	8013c52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013c4a:	2303      	movs	r3, #3
 8013c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013c50:	e0a7      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d1a6      	bne.n	8013baa <HAL_SPI_TransmitReceive+0x130>
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1a1      	bne.n	8013baa <HAL_SPI_TransmitReceive+0x130>
 8013c66:	e07c      	b.n	8013d62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d002      	beq.n	8013c76 <HAL_SPI_TransmitReceive+0x1fc>
 8013c70:	8b7b      	ldrh	r3, [r7, #26]
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d16b      	bne.n	8013d4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	330c      	adds	r3, #12
 8013c80:	7812      	ldrb	r2, [r2, #0]
 8013c82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c88:	1c5a      	adds	r2, r3, #1
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	3b01      	subs	r3, #1
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013c9c:	e057      	b.n	8013d4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	689b      	ldr	r3, [r3, #8]
 8013ca4:	f003 0302 	and.w	r3, r3, #2
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d11c      	bne.n	8013ce6 <HAL_SPI_TransmitReceive+0x26c>
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d017      	beq.n	8013ce6 <HAL_SPI_TransmitReceive+0x26c>
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb8:	2b01      	cmp	r3, #1
 8013cba:	d114      	bne.n	8013ce6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	330c      	adds	r3, #12
 8013cc6:	7812      	ldrb	r2, [r2, #0]
 8013cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cce:	1c5a      	adds	r2, r3, #1
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	3b01      	subs	r3, #1
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	f003 0301 	and.w	r3, r3, #1
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d119      	bne.n	8013d28 <HAL_SPI_TransmitReceive+0x2ae>
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d014      	beq.n	8013d28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	68da      	ldr	r2, [r3, #12]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d08:	b2d2      	uxtb	r2, r2
 8013d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d10:	1c5a      	adds	r2, r3, #1
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	3b01      	subs	r3, #1
 8013d1e:	b29a      	uxth	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013d24:	2301      	movs	r3, #1
 8013d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013d28:	f7fc ffa8 	bl	8010c7c <HAL_GetTick>
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d30:	1ad3      	subs	r3, r2, r3
 8013d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d803      	bhi.n	8013d40 <HAL_SPI_TransmitReceive+0x2c6>
 8013d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3e:	d102      	bne.n	8013d46 <HAL_SPI_TransmitReceive+0x2cc>
 8013d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d103      	bne.n	8013d4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013d46:	2303      	movs	r3, #3
 8013d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013d4c:	e029      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d1a2      	bne.n	8013c9e <HAL_SPI_TransmitReceive+0x224>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d19d      	bne.n	8013c9e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d66:	68f8      	ldr	r0, [r7, #12]
 8013d68:	f000 f8f8 	bl	8013f5c <SPI_EndRxTxTransaction>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d006      	beq.n	8013d80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2220      	movs	r2, #32
 8013d7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013d7e:	e010      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d10b      	bne.n	8013da0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013d88:	2300      	movs	r3, #0
 8013d8a:	617b      	str	r3, [r7, #20]
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	68db      	ldr	r3, [r3, #12]
 8013d92:	617b      	str	r3, [r7, #20]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	617b      	str	r3, [r7, #20]
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	e000      	b.n	8013da2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2201      	movs	r2, #1
 8013da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2200      	movs	r2, #0
 8013dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3730      	adds	r7, #48	; 0x30
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b084      	sub	sp, #16
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	60f8      	str	r0, [r7, #12]
 8013dc6:	60b9      	str	r1, [r7, #8]
 8013dc8:	603b      	str	r3, [r7, #0]
 8013dca:	4613      	mov	r3, r2
 8013dcc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013dce:	e04c      	b.n	8013e6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd6:	d048      	beq.n	8013e6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013dd8:	f7fc ff50 	bl	8010c7c <HAL_GetTick>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	1ad3      	subs	r3, r2, r3
 8013de2:	683a      	ldr	r2, [r7, #0]
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d902      	bls.n	8013dee <SPI_WaitFlagStateUntilTimeout+0x30>
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d13d      	bne.n	8013e6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	685a      	ldr	r2, [r3, #4]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e06:	d111      	bne.n	8013e2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e10:	d004      	beq.n	8013e1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	689b      	ldr	r3, [r3, #8]
 8013e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e1a:	d107      	bne.n	8013e2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013e34:	d10f      	bne.n	8013e56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013e44:	601a      	str	r2, [r3, #0]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2201      	movs	r2, #1
 8013e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2200      	movs	r2, #0
 8013e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013e66:	2303      	movs	r3, #3
 8013e68:	e00f      	b.n	8013e8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	689a      	ldr	r2, [r3, #8]
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	4013      	ands	r3, r2
 8013e74:	68ba      	ldr	r2, [r7, #8]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	bf0c      	ite	eq
 8013e7a:	2301      	moveq	r3, #1
 8013e7c:	2300      	movne	r3, #0
 8013e7e:	b2db      	uxtb	r3, r3
 8013e80:	461a      	mov	r2, r3
 8013e82:	79fb      	ldrb	r3, [r7, #7]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d1a3      	bne.n	8013dd0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3710      	adds	r7, #16
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b086      	sub	sp, #24
 8013e96:	af02      	add	r7, sp, #8
 8013e98:	60f8      	str	r0, [r7, #12]
 8013e9a:	60b9      	str	r1, [r7, #8]
 8013e9c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ea6:	d111      	bne.n	8013ecc <SPI_EndRxTransaction+0x3a>
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	689b      	ldr	r3, [r3, #8]
 8013eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013eb0:	d004      	beq.n	8013ebc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	689b      	ldr	r3, [r3, #8]
 8013eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013eba:	d107      	bne.n	8013ecc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ed4:	d12a      	bne.n	8013f2c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ede:	d012      	beq.n	8013f06 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	2180      	movs	r1, #128	; 0x80
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f7ff ff67 	bl	8013dbe <SPI_WaitFlagStateUntilTimeout>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d02d      	beq.n	8013f52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013efa:	f043 0220 	orr.w	r2, r3, #32
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013f02:	2303      	movs	r3, #3
 8013f04:	e026      	b.n	8013f54 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	2101      	movs	r1, #1
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	f7ff ff54 	bl	8013dbe <SPI_WaitFlagStateUntilTimeout>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d01a      	beq.n	8013f52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f20:	f043 0220 	orr.w	r2, r3, #32
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013f28:	2303      	movs	r3, #3
 8013f2a:	e013      	b.n	8013f54 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	9300      	str	r3, [sp, #0]
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2200      	movs	r2, #0
 8013f34:	2101      	movs	r1, #1
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f7ff ff41 	bl	8013dbe <SPI_WaitFlagStateUntilTimeout>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d007      	beq.n	8013f52 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f46:	f043 0220 	orr.w	r2, r3, #32
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013f4e:	2303      	movs	r3, #3
 8013f50:	e000      	b.n	8013f54 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b088      	sub	sp, #32
 8013f60:	af02      	add	r7, sp, #8
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013f68:	4b1b      	ldr	r3, [pc, #108]	; (8013fd8 <SPI_EndRxTxTransaction+0x7c>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a1b      	ldr	r2, [pc, #108]	; (8013fdc <SPI_EndRxTxTransaction+0x80>)
 8013f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8013f72:	0d5b      	lsrs	r3, r3, #21
 8013f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f78:	fb02 f303 	mul.w	r3, r2, r3
 8013f7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f86:	d112      	bne.n	8013fae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	2180      	movs	r1, #128	; 0x80
 8013f92:	68f8      	ldr	r0, [r7, #12]
 8013f94:	f7ff ff13 	bl	8013dbe <SPI_WaitFlagStateUntilTimeout>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d016      	beq.n	8013fcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fa2:	f043 0220 	orr.w	r2, r3, #32
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013faa:	2303      	movs	r3, #3
 8013fac:	e00f      	b.n	8013fce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00a      	beq.n	8013fca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	689b      	ldr	r3, [r3, #8]
 8013fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fc4:	2b80      	cmp	r3, #128	; 0x80
 8013fc6:	d0f2      	beq.n	8013fae <SPI_EndRxTxTransaction+0x52>
 8013fc8:	e000      	b.n	8013fcc <SPI_EndRxTxTransaction+0x70>
        break;
 8013fca:	bf00      	nop
  }

  return HAL_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20000080 	.word	0x20000080
 8013fdc:	165e9f81 	.word	0x165e9f81

08013fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d101      	bne.n	8013ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e01d      	b.n	801402e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2200      	movs	r2, #0
 8014002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7fc fa42 	bl	8010490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2202      	movs	r2, #2
 8014010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	3304      	adds	r3, #4
 801401c:	4619      	mov	r1, r3
 801401e:	4610      	mov	r0, r2
 8014020:	f000 fe50 	bl	8014cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2201      	movs	r2, #1
 8014028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014036:	b480      	push	{r7}
 8014038:	b085      	sub	sp, #20
 801403a:	af00      	add	r7, sp, #0
 801403c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	68da      	ldr	r2, [r3, #12]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f042 0201 	orr.w	r2, r2, #1
 801404c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	f003 0307 	and.w	r3, r3, #7
 8014058:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2b06      	cmp	r3, #6
 801405e:	d007      	beq.n	8014070 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f042 0201 	orr.w	r2, r2, #1
 801406e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3714      	adds	r7, #20
 8014076:	46bd      	mov	sp, r7
 8014078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407c:	4770      	bx	lr

0801407e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801407e:	b480      	push	{r7}
 8014080:	b083      	sub	sp, #12
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	68da      	ldr	r2, [r3, #12]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f022 0201 	bic.w	r2, r2, #1
 8014094:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	6a1a      	ldr	r2, [r3, #32]
 801409c:	f241 1311 	movw	r3, #4369	; 0x1111
 80140a0:	4013      	ands	r3, r2
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d10f      	bne.n	80140c6 <HAL_TIM_Base_Stop_IT+0x48>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	6a1a      	ldr	r2, [r3, #32]
 80140ac:	f240 4344 	movw	r3, #1092	; 0x444
 80140b0:	4013      	ands	r3, r2
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d107      	bne.n	80140c6 <HAL_TIM_Base_Stop_IT+0x48>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f022 0201 	bic.w	r2, r2, #1
 80140c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80140c6:	2300      	movs	r3, #0
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	370c      	adds	r7, #12
 80140cc:	46bd      	mov	sp, r7
 80140ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d2:	4770      	bx	lr

080140d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d101      	bne.n	80140e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80140e2:	2301      	movs	r3, #1
 80140e4:	e01d      	b.n	8014122 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d106      	bne.n	8014100 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 f815 	bl	801412a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2202      	movs	r2, #2
 8014104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	3304      	adds	r3, #4
 8014110:	4619      	mov	r1, r3
 8014112:	4610      	mov	r0, r2
 8014114:	f000 fdd6 	bl	8014cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2201      	movs	r2, #1
 801411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801412a:	b480      	push	{r7}
 801412c:	b083      	sub	sp, #12
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8014132:	bf00      	nop
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr
	...

08014140 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	2b0c      	cmp	r3, #12
 801414e:	d841      	bhi.n	80141d4 <HAL_TIM_OC_Start_IT+0x94>
 8014150:	a201      	add	r2, pc, #4	; (adr r2, 8014158 <HAL_TIM_OC_Start_IT+0x18>)
 8014152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014156:	bf00      	nop
 8014158:	0801418d 	.word	0x0801418d
 801415c:	080141d5 	.word	0x080141d5
 8014160:	080141d5 	.word	0x080141d5
 8014164:	080141d5 	.word	0x080141d5
 8014168:	0801419f 	.word	0x0801419f
 801416c:	080141d5 	.word	0x080141d5
 8014170:	080141d5 	.word	0x080141d5
 8014174:	080141d5 	.word	0x080141d5
 8014178:	080141b1 	.word	0x080141b1
 801417c:	080141d5 	.word	0x080141d5
 8014180:	080141d5 	.word	0x080141d5
 8014184:	080141d5 	.word	0x080141d5
 8014188:	080141c3 	.word	0x080141c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	68da      	ldr	r2, [r3, #12]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f042 0202 	orr.w	r2, r2, #2
 801419a:	60da      	str	r2, [r3, #12]
      break;
 801419c:	e01b      	b.n	80141d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	68da      	ldr	r2, [r3, #12]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f042 0204 	orr.w	r2, r2, #4
 80141ac:	60da      	str	r2, [r3, #12]
      break;
 80141ae:	e012      	b.n	80141d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	68da      	ldr	r2, [r3, #12]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f042 0208 	orr.w	r2, r2, #8
 80141be:	60da      	str	r2, [r3, #12]
      break;
 80141c0:	e009      	b.n	80141d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	68da      	ldr	r2, [r3, #12]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	f042 0210 	orr.w	r2, r2, #16
 80141d0:	60da      	str	r2, [r3, #12]
      break;
 80141d2:	e000      	b.n	80141d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80141d4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2201      	movs	r2, #1
 80141dc:	6839      	ldr	r1, [r7, #0]
 80141de:	4618      	mov	r0, r3
 80141e0:	f001 f85a 	bl	8015298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a15      	ldr	r2, [pc, #84]	; (8014240 <HAL_TIM_OC_Start_IT+0x100>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d004      	beq.n	80141f8 <HAL_TIM_OC_Start_IT+0xb8>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a14      	ldr	r2, [pc, #80]	; (8014244 <HAL_TIM_OC_Start_IT+0x104>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d101      	bne.n	80141fc <HAL_TIM_OC_Start_IT+0xbc>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e000      	b.n	80141fe <HAL_TIM_OC_Start_IT+0xbe>
 80141fc:	2300      	movs	r3, #0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d007      	beq.n	8014212 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	689b      	ldr	r3, [r3, #8]
 8014218:	f003 0307 	and.w	r3, r3, #7
 801421c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	2b06      	cmp	r3, #6
 8014222:	d007      	beq.n	8014234 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f042 0201 	orr.w	r2, r2, #1
 8014232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014234:	2300      	movs	r3, #0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	40010000 	.word	0x40010000
 8014244:	40010400 	.word	0x40010400

08014248 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	2b0c      	cmp	r3, #12
 8014256:	d841      	bhi.n	80142dc <HAL_TIM_OC_Stop_IT+0x94>
 8014258:	a201      	add	r2, pc, #4	; (adr r2, 8014260 <HAL_TIM_OC_Stop_IT+0x18>)
 801425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801425e:	bf00      	nop
 8014260:	08014295 	.word	0x08014295
 8014264:	080142dd 	.word	0x080142dd
 8014268:	080142dd 	.word	0x080142dd
 801426c:	080142dd 	.word	0x080142dd
 8014270:	080142a7 	.word	0x080142a7
 8014274:	080142dd 	.word	0x080142dd
 8014278:	080142dd 	.word	0x080142dd
 801427c:	080142dd 	.word	0x080142dd
 8014280:	080142b9 	.word	0x080142b9
 8014284:	080142dd 	.word	0x080142dd
 8014288:	080142dd 	.word	0x080142dd
 801428c:	080142dd 	.word	0x080142dd
 8014290:	080142cb 	.word	0x080142cb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	68da      	ldr	r2, [r3, #12]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	f022 0202 	bic.w	r2, r2, #2
 80142a2:	60da      	str	r2, [r3, #12]
      break;
 80142a4:	e01b      	b.n	80142de <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	68da      	ldr	r2, [r3, #12]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	f022 0204 	bic.w	r2, r2, #4
 80142b4:	60da      	str	r2, [r3, #12]
      break;
 80142b6:	e012      	b.n	80142de <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	68da      	ldr	r2, [r3, #12]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f022 0208 	bic.w	r2, r2, #8
 80142c6:	60da      	str	r2, [r3, #12]
      break;
 80142c8:	e009      	b.n	80142de <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	68da      	ldr	r2, [r3, #12]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f022 0210 	bic.w	r2, r2, #16
 80142d8:	60da      	str	r2, [r3, #12]
      break;
 80142da:	e000      	b.n	80142de <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80142dc:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2200      	movs	r2, #0
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f000 ffd6 	bl	8015298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	4a20      	ldr	r2, [pc, #128]	; (8014374 <HAL_TIM_OC_Stop_IT+0x12c>)
 80142f2:	4293      	cmp	r3, r2
 80142f4:	d004      	beq.n	8014300 <HAL_TIM_OC_Stop_IT+0xb8>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4a1f      	ldr	r2, [pc, #124]	; (8014378 <HAL_TIM_OC_Stop_IT+0x130>)
 80142fc:	4293      	cmp	r3, r2
 80142fe:	d101      	bne.n	8014304 <HAL_TIM_OC_Stop_IT+0xbc>
 8014300:	2301      	movs	r3, #1
 8014302:	e000      	b.n	8014306 <HAL_TIM_OC_Stop_IT+0xbe>
 8014304:	2300      	movs	r3, #0
 8014306:	2b00      	cmp	r3, #0
 8014308:	d017      	beq.n	801433a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	6a1a      	ldr	r2, [r3, #32]
 8014310:	f241 1311 	movw	r3, #4369	; 0x1111
 8014314:	4013      	ands	r3, r2
 8014316:	2b00      	cmp	r3, #0
 8014318:	d10f      	bne.n	801433a <HAL_TIM_OC_Stop_IT+0xf2>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	6a1a      	ldr	r2, [r3, #32]
 8014320:	f240 4344 	movw	r3, #1092	; 0x444
 8014324:	4013      	ands	r3, r2
 8014326:	2b00      	cmp	r3, #0
 8014328:	d107      	bne.n	801433a <HAL_TIM_OC_Stop_IT+0xf2>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	6a1a      	ldr	r2, [r3, #32]
 8014340:	f241 1311 	movw	r3, #4369	; 0x1111
 8014344:	4013      	ands	r3, r2
 8014346:	2b00      	cmp	r3, #0
 8014348:	d10f      	bne.n	801436a <HAL_TIM_OC_Stop_IT+0x122>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	6a1a      	ldr	r2, [r3, #32]
 8014350:	f240 4344 	movw	r3, #1092	; 0x444
 8014354:	4013      	ands	r3, r2
 8014356:	2b00      	cmp	r3, #0
 8014358:	d107      	bne.n	801436a <HAL_TIM_OC_Stop_IT+0x122>
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f022 0201 	bic.w	r2, r2, #1
 8014368:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801436a:	2300      	movs	r3, #0
}
 801436c:	4618      	mov	r0, r3
 801436e:	3708      	adds	r7, #8
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	40010000 	.word	0x40010000
 8014378:	40010400 	.word	0x40010400

0801437c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d101      	bne.n	801438e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801438a:	2301      	movs	r3, #1
 801438c:	e01d      	b.n	80143ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014394:	b2db      	uxtb	r3, r3
 8014396:	2b00      	cmp	r3, #0
 8014398:	d106      	bne.n	80143a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	2200      	movs	r2, #0
 801439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 f815 	bl	80143d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2202      	movs	r2, #2
 80143ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	3304      	adds	r3, #4
 80143b8:	4619      	mov	r1, r3
 80143ba:	4610      	mov	r0, r2
 80143bc:	f000 fc82 	bl	8014cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80143da:	bf00      	nop
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr
	...

080143e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2201      	movs	r2, #1
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f000 ff4c 	bl	8015298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	4a15      	ldr	r2, [pc, #84]	; (801445c <HAL_TIM_PWM_Start+0x74>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d004      	beq.n	8014414 <HAL_TIM_PWM_Start+0x2c>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4a14      	ldr	r2, [pc, #80]	; (8014460 <HAL_TIM_PWM_Start+0x78>)
 8014410:	4293      	cmp	r3, r2
 8014412:	d101      	bne.n	8014418 <HAL_TIM_PWM_Start+0x30>
 8014414:	2301      	movs	r3, #1
 8014416:	e000      	b.n	801441a <HAL_TIM_PWM_Start+0x32>
 8014418:	2300      	movs	r3, #0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d007      	beq.n	801442e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801442c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	f003 0307 	and.w	r3, r3, #7
 8014438:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	2b06      	cmp	r3, #6
 801443e:	d007      	beq.n	8014450 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f042 0201 	orr.w	r2, r2, #1
 801444e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	40010000 	.word	0x40010000
 8014460:	40010400 	.word	0x40010400

08014464 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2200      	movs	r2, #0
 8014474:	6839      	ldr	r1, [r7, #0]
 8014476:	4618      	mov	r0, r3
 8014478:	f000 ff0e 	bl	8015298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4a22      	ldr	r2, [pc, #136]	; (801450c <HAL_TIM_PWM_Stop+0xa8>)
 8014482:	4293      	cmp	r3, r2
 8014484:	d004      	beq.n	8014490 <HAL_TIM_PWM_Stop+0x2c>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	4a21      	ldr	r2, [pc, #132]	; (8014510 <HAL_TIM_PWM_Stop+0xac>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d101      	bne.n	8014494 <HAL_TIM_PWM_Stop+0x30>
 8014490:	2301      	movs	r3, #1
 8014492:	e000      	b.n	8014496 <HAL_TIM_PWM_Stop+0x32>
 8014494:	2300      	movs	r3, #0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d017      	beq.n	80144ca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	6a1a      	ldr	r2, [r3, #32]
 80144a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80144a4:	4013      	ands	r3, r2
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d10f      	bne.n	80144ca <HAL_TIM_PWM_Stop+0x66>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	6a1a      	ldr	r2, [r3, #32]
 80144b0:	f240 4344 	movw	r3, #1092	; 0x444
 80144b4:	4013      	ands	r3, r2
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d107      	bne.n	80144ca <HAL_TIM_PWM_Stop+0x66>
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80144c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	6a1a      	ldr	r2, [r3, #32]
 80144d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80144d4:	4013      	ands	r3, r2
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d10f      	bne.n	80144fa <HAL_TIM_PWM_Stop+0x96>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	6a1a      	ldr	r2, [r3, #32]
 80144e0:	f240 4344 	movw	r3, #1092	; 0x444
 80144e4:	4013      	ands	r3, r2
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d107      	bne.n	80144fa <HAL_TIM_PWM_Stop+0x96>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	f022 0201 	bic.w	r2, r2, #1
 80144f8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2201      	movs	r2, #1
 80144fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8014502:	2300      	movs	r3, #0
}
 8014504:	4618      	mov	r0, r3
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	40010000 	.word	0x40010000
 8014510:	40010400 	.word	0x40010400

08014514 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b086      	sub	sp, #24
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8014524:	2301      	movs	r3, #1
 8014526:	e083      	b.n	8014630 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801452e:	b2db      	uxtb	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d106      	bne.n	8014542 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2200      	movs	r2, #0
 8014538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7fc f837 	bl	80105b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2202      	movs	r2, #2
 8014546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	6812      	ldr	r2, [r2, #0]
 8014554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014558:	f023 0307 	bic.w	r3, r3, #7
 801455c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	3304      	adds	r3, #4
 8014566:	4619      	mov	r1, r3
 8014568:	4610      	mov	r0, r2
 801456a:	f000 fbab 	bl	8014cc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	689b      	ldr	r3, [r3, #8]
 8014574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	699b      	ldr	r3, [r3, #24]
 801457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	6a1b      	ldr	r3, [r3, #32]
 8014584:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	697a      	ldr	r2, [r7, #20]
 801458c:	4313      	orrs	r3, r2
 801458e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014596:	f023 0303 	bic.w	r3, r3, #3
 801459a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	689a      	ldr	r2, [r3, #8]
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	699b      	ldr	r3, [r3, #24]
 80145a4:	021b      	lsls	r3, r3, #8
 80145a6:	4313      	orrs	r3, r2
 80145a8:	693a      	ldr	r2, [r7, #16]
 80145aa:	4313      	orrs	r3, r2
 80145ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80145b4:	f023 030c 	bic.w	r3, r3, #12
 80145b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80145ba:	693b      	ldr	r3, [r7, #16]
 80145bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80145c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80145c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	68da      	ldr	r2, [r3, #12]
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	69db      	ldr	r3, [r3, #28]
 80145ce:	021b      	lsls	r3, r3, #8
 80145d0:	4313      	orrs	r3, r2
 80145d2:	693a      	ldr	r2, [r7, #16]
 80145d4:	4313      	orrs	r3, r2
 80145d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	691b      	ldr	r3, [r3, #16]
 80145dc:	011a      	lsls	r2, r3, #4
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	6a1b      	ldr	r3, [r3, #32]
 80145e2:	031b      	lsls	r3, r3, #12
 80145e4:	4313      	orrs	r3, r2
 80145e6:	693a      	ldr	r2, [r7, #16]
 80145e8:	4313      	orrs	r3, r2
 80145ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80145f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80145fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	685a      	ldr	r2, [r3, #4]
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	695b      	ldr	r3, [r3, #20]
 8014604:	011b      	lsls	r3, r3, #4
 8014606:	4313      	orrs	r3, r2
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	4313      	orrs	r3, r2
 801460c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	697a      	ldr	r2, [r7, #20]
 8014614:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	68fa      	ldr	r2, [r7, #12]
 8014624:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2201      	movs	r2, #1
 801462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801462e:	2300      	movs	r3, #0
}
 8014630:	4618      	mov	r0, r3
 8014632:	3718      	adds	r7, #24
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d002      	beq.n	801464e <HAL_TIM_Encoder_Start+0x16>
 8014648:	2b04      	cmp	r3, #4
 801464a:	d008      	beq.n	801465e <HAL_TIM_Encoder_Start+0x26>
 801464c:	e00f      	b.n	801466e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2201      	movs	r2, #1
 8014654:	2100      	movs	r1, #0
 8014656:	4618      	mov	r0, r3
 8014658:	f000 fe1e 	bl	8015298 <TIM_CCxChannelCmd>
      break;
 801465c:	e016      	b.n	801468c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	2201      	movs	r2, #1
 8014664:	2104      	movs	r1, #4
 8014666:	4618      	mov	r0, r3
 8014668:	f000 fe16 	bl	8015298 <TIM_CCxChannelCmd>
      break;
 801466c:	e00e      	b.n	801468c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2201      	movs	r2, #1
 8014674:	2100      	movs	r1, #0
 8014676:	4618      	mov	r0, r3
 8014678:	f000 fe0e 	bl	8015298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2201      	movs	r2, #1
 8014682:	2104      	movs	r1, #4
 8014684:	4618      	mov	r0, r3
 8014686:	f000 fe07 	bl	8015298 <TIM_CCxChannelCmd>
      break;
 801468a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	681a      	ldr	r2, [r3, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f042 0201 	orr.w	r2, r2, #1
 801469a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3708      	adds	r7, #8
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b082      	sub	sp, #8
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	691b      	ldr	r3, [r3, #16]
 80146b4:	f003 0302 	and.w	r3, r3, #2
 80146b8:	2b02      	cmp	r3, #2
 80146ba:	d122      	bne.n	8014702 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	f003 0302 	and.w	r3, r3, #2
 80146c6:	2b02      	cmp	r3, #2
 80146c8:	d11b      	bne.n	8014702 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	f06f 0202 	mvn.w	r2, #2
 80146d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2201      	movs	r2, #1
 80146d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	699b      	ldr	r3, [r3, #24]
 80146e0:	f003 0303 	and.w	r3, r3, #3
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d003      	beq.n	80146f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 facc 	bl	8014c86 <HAL_TIM_IC_CaptureCallback>
 80146ee:	e005      	b.n	80146fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f000 fabe 	bl	8014c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 facf 	bl	8014c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	f003 0304 	and.w	r3, r3, #4
 801470c:	2b04      	cmp	r3, #4
 801470e:	d122      	bne.n	8014756 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	f003 0304 	and.w	r3, r3, #4
 801471a:	2b04      	cmp	r3, #4
 801471c:	d11b      	bne.n	8014756 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f06f 0204 	mvn.w	r2, #4
 8014726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2202      	movs	r2, #2
 801472c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014738:	2b00      	cmp	r3, #0
 801473a:	d003      	beq.n	8014744 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 faa2 	bl	8014c86 <HAL_TIM_IC_CaptureCallback>
 8014742:	e005      	b.n	8014750 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 fa94 	bl	8014c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f000 faa5 	bl	8014c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2200      	movs	r2, #0
 8014754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	691b      	ldr	r3, [r3, #16]
 801475c:	f003 0308 	and.w	r3, r3, #8
 8014760:	2b08      	cmp	r3, #8
 8014762:	d122      	bne.n	80147aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	68db      	ldr	r3, [r3, #12]
 801476a:	f003 0308 	and.w	r3, r3, #8
 801476e:	2b08      	cmp	r3, #8
 8014770:	d11b      	bne.n	80147aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f06f 0208 	mvn.w	r2, #8
 801477a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2204      	movs	r2, #4
 8014780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	69db      	ldr	r3, [r3, #28]
 8014788:	f003 0303 	and.w	r3, r3, #3
 801478c:	2b00      	cmp	r3, #0
 801478e:	d003      	beq.n	8014798 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f000 fa78 	bl	8014c86 <HAL_TIM_IC_CaptureCallback>
 8014796:	e005      	b.n	80147a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 fa6a 	bl	8014c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 fa7b 	bl	8014c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	691b      	ldr	r3, [r3, #16]
 80147b0:	f003 0310 	and.w	r3, r3, #16
 80147b4:	2b10      	cmp	r3, #16
 80147b6:	d122      	bne.n	80147fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	f003 0310 	and.w	r3, r3, #16
 80147c2:	2b10      	cmp	r3, #16
 80147c4:	d11b      	bne.n	80147fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f06f 0210 	mvn.w	r2, #16
 80147ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2208      	movs	r2, #8
 80147d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	69db      	ldr	r3, [r3, #28]
 80147dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d003      	beq.n	80147ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 fa4e 	bl	8014c86 <HAL_TIM_IC_CaptureCallback>
 80147ea:	e005      	b.n	80147f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 fa40 	bl	8014c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 fa51 	bl	8014c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	691b      	ldr	r3, [r3, #16]
 8014804:	f003 0301 	and.w	r3, r3, #1
 8014808:	2b01      	cmp	r3, #1
 801480a:	d10e      	bne.n	801482a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	f003 0301 	and.w	r3, r3, #1
 8014816:	2b01      	cmp	r3, #1
 8014818:	d107      	bne.n	801482a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f06f 0201 	mvn.w	r2, #1
 8014822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7fa f94f 	bl	800eac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	691b      	ldr	r3, [r3, #16]
 8014830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014834:	2b80      	cmp	r3, #128	; 0x80
 8014836:	d10e      	bne.n	8014856 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014842:	2b80      	cmp	r3, #128	; 0x80
 8014844:	d107      	bne.n	8014856 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fee9 	bl	8015628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	691b      	ldr	r3, [r3, #16]
 801485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014860:	2b40      	cmp	r3, #64	; 0x40
 8014862:	d10e      	bne.n	8014882 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	68db      	ldr	r3, [r3, #12]
 801486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801486e:	2b40      	cmp	r3, #64	; 0x40
 8014870:	d107      	bne.n	8014882 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 fa16 	bl	8014cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	691b      	ldr	r3, [r3, #16]
 8014888:	f003 0320 	and.w	r3, r3, #32
 801488c:	2b20      	cmp	r3, #32
 801488e:	d10e      	bne.n	80148ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	f003 0320 	and.w	r3, r3, #32
 801489a:	2b20      	cmp	r3, #32
 801489c:	d107      	bne.n	80148ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f06f 0220 	mvn.w	r2, #32
 80148a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 feb3 	bl	8015614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80148ae:	bf00      	nop
 80148b0:	3708      	adds	r7, #8
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
	...

080148b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	d101      	bne.n	80148d2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80148ce:	2302      	movs	r3, #2
 80148d0:	e04e      	b.n	8014970 <HAL_TIM_OC_ConfigChannel+0xb8>
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2201      	movs	r2, #1
 80148d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2202      	movs	r2, #2
 80148de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2b0c      	cmp	r3, #12
 80148e6:	d839      	bhi.n	801495c <HAL_TIM_OC_ConfigChannel+0xa4>
 80148e8:	a201      	add	r2, pc, #4	; (adr r2, 80148f0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80148ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ee:	bf00      	nop
 80148f0:	08014925 	.word	0x08014925
 80148f4:	0801495d 	.word	0x0801495d
 80148f8:	0801495d 	.word	0x0801495d
 80148fc:	0801495d 	.word	0x0801495d
 8014900:	08014933 	.word	0x08014933
 8014904:	0801495d 	.word	0x0801495d
 8014908:	0801495d 	.word	0x0801495d
 801490c:	0801495d 	.word	0x0801495d
 8014910:	08014941 	.word	0x08014941
 8014914:	0801495d 	.word	0x0801495d
 8014918:	0801495d 	.word	0x0801495d
 801491c:	0801495d 	.word	0x0801495d
 8014920:	0801494f 	.word	0x0801494f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	68b9      	ldr	r1, [r7, #8]
 801492a:	4618      	mov	r0, r3
 801492c:	f000 fa6a 	bl	8014e04 <TIM_OC1_SetConfig>
      break;
 8014930:	e015      	b.n	801495e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	68b9      	ldr	r1, [r7, #8]
 8014938:	4618      	mov	r0, r3
 801493a:	f000 fad3 	bl	8014ee4 <TIM_OC2_SetConfig>
      break;
 801493e:	e00e      	b.n	801495e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	68b9      	ldr	r1, [r7, #8]
 8014946:	4618      	mov	r0, r3
 8014948:	f000 fb42 	bl	8014fd0 <TIM_OC3_SetConfig>
      break;
 801494c:	e007      	b.n	801495e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	68b9      	ldr	r1, [r7, #8]
 8014954:	4618      	mov	r0, r3
 8014956:	f000 fbaf 	bl	80150b8 <TIM_OC4_SetConfig>
      break;
 801495a:	e000      	b.n	801495e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 801495c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2201      	movs	r2, #1
 8014962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2200      	movs	r2, #0
 801496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801496e:	2300      	movs	r3, #0
}
 8014970:	4618      	mov	r0, r3
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	60b9      	str	r1, [r7, #8]
 8014982:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801498a:	2b01      	cmp	r3, #1
 801498c:	d101      	bne.n	8014992 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801498e:	2302      	movs	r3, #2
 8014990:	e0b4      	b.n	8014afc <HAL_TIM_PWM_ConfigChannel+0x184>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2201      	movs	r2, #1
 8014996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2202      	movs	r2, #2
 801499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2b0c      	cmp	r3, #12
 80149a6:	f200 809f 	bhi.w	8014ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80149aa:	a201      	add	r2, pc, #4	; (adr r2, 80149b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80149ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b0:	080149e5 	.word	0x080149e5
 80149b4:	08014ae9 	.word	0x08014ae9
 80149b8:	08014ae9 	.word	0x08014ae9
 80149bc:	08014ae9 	.word	0x08014ae9
 80149c0:	08014a25 	.word	0x08014a25
 80149c4:	08014ae9 	.word	0x08014ae9
 80149c8:	08014ae9 	.word	0x08014ae9
 80149cc:	08014ae9 	.word	0x08014ae9
 80149d0:	08014a67 	.word	0x08014a67
 80149d4:	08014ae9 	.word	0x08014ae9
 80149d8:	08014ae9 	.word	0x08014ae9
 80149dc:	08014ae9 	.word	0x08014ae9
 80149e0:	08014aa7 	.word	0x08014aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68b9      	ldr	r1, [r7, #8]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f000 fa0a 	bl	8014e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	699a      	ldr	r2, [r3, #24]
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	f042 0208 	orr.w	r2, r2, #8
 80149fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	699a      	ldr	r2, [r3, #24]
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f022 0204 	bic.w	r2, r2, #4
 8014a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	6999      	ldr	r1, [r3, #24]
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	691a      	ldr	r2, [r3, #16]
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	430a      	orrs	r2, r1
 8014a20:	619a      	str	r2, [r3, #24]
      break;
 8014a22:	e062      	b.n	8014aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	68b9      	ldr	r1, [r7, #8]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f000 fa5a 	bl	8014ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	699a      	ldr	r2, [r3, #24]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	699a      	ldr	r2, [r3, #24]
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	6999      	ldr	r1, [r3, #24]
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	691b      	ldr	r3, [r3, #16]
 8014a5a:	021a      	lsls	r2, r3, #8
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	430a      	orrs	r2, r1
 8014a62:	619a      	str	r2, [r3, #24]
      break;
 8014a64:	e041      	b.n	8014aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	68b9      	ldr	r1, [r7, #8]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f000 faaf 	bl	8014fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	69da      	ldr	r2, [r3, #28]
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f042 0208 	orr.w	r2, r2, #8
 8014a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	69da      	ldr	r2, [r3, #28]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f022 0204 	bic.w	r2, r2, #4
 8014a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	69d9      	ldr	r1, [r3, #28]
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	691a      	ldr	r2, [r3, #16]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	430a      	orrs	r2, r1
 8014aa2:	61da      	str	r2, [r3, #28]
      break;
 8014aa4:	e021      	b.n	8014aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	68b9      	ldr	r1, [r7, #8]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f000 fb03 	bl	80150b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	69da      	ldr	r2, [r3, #28]
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	69da      	ldr	r2, [r3, #28]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	69d9      	ldr	r1, [r3, #28]
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	691b      	ldr	r3, [r3, #16]
 8014adc:	021a      	lsls	r2, r3, #8
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	430a      	orrs	r2, r1
 8014ae4:	61da      	str	r2, [r3, #28]
      break;
 8014ae6:	e000      	b.n	8014aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014ae8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2201      	movs	r2, #1
 8014aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2200      	movs	r2, #0
 8014af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014afa:	2300      	movs	r3, #0
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3710      	adds	r7, #16
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d101      	bne.n	8014b1c <HAL_TIM_ConfigClockSource+0x18>
 8014b18:	2302      	movs	r3, #2
 8014b1a:	e0a6      	b.n	8014c6a <HAL_TIM_ConfigClockSource+0x166>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2201      	movs	r2, #1
 8014b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2202      	movs	r2, #2
 8014b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	689b      	ldr	r3, [r3, #8]
 8014b32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014b42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	68fa      	ldr	r2, [r7, #12]
 8014b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b40      	cmp	r3, #64	; 0x40
 8014b52:	d067      	beq.n	8014c24 <HAL_TIM_ConfigClockSource+0x120>
 8014b54:	2b40      	cmp	r3, #64	; 0x40
 8014b56:	d80b      	bhi.n	8014b70 <HAL_TIM_ConfigClockSource+0x6c>
 8014b58:	2b10      	cmp	r3, #16
 8014b5a:	d073      	beq.n	8014c44 <HAL_TIM_ConfigClockSource+0x140>
 8014b5c:	2b10      	cmp	r3, #16
 8014b5e:	d802      	bhi.n	8014b66 <HAL_TIM_ConfigClockSource+0x62>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d06f      	beq.n	8014c44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014b64:	e078      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014b66:	2b20      	cmp	r3, #32
 8014b68:	d06c      	beq.n	8014c44 <HAL_TIM_ConfigClockSource+0x140>
 8014b6a:	2b30      	cmp	r3, #48	; 0x30
 8014b6c:	d06a      	beq.n	8014c44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014b6e:	e073      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014b70:	2b70      	cmp	r3, #112	; 0x70
 8014b72:	d00d      	beq.n	8014b90 <HAL_TIM_ConfigClockSource+0x8c>
 8014b74:	2b70      	cmp	r3, #112	; 0x70
 8014b76:	d804      	bhi.n	8014b82 <HAL_TIM_ConfigClockSource+0x7e>
 8014b78:	2b50      	cmp	r3, #80	; 0x50
 8014b7a:	d033      	beq.n	8014be4 <HAL_TIM_ConfigClockSource+0xe0>
 8014b7c:	2b60      	cmp	r3, #96	; 0x60
 8014b7e:	d041      	beq.n	8014c04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014b80:	e06a      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b86:	d066      	beq.n	8014c56 <HAL_TIM_ConfigClockSource+0x152>
 8014b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b8c:	d017      	beq.n	8014bbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014b8e:	e063      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6818      	ldr	r0, [r3, #0]
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	6899      	ldr	r1, [r3, #8]
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	685a      	ldr	r2, [r3, #4]
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	f000 fb5a 	bl	8015258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	689b      	ldr	r3, [r3, #8]
 8014baa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014bb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68fa      	ldr	r2, [r7, #12]
 8014bba:	609a      	str	r2, [r3, #8]
      break;
 8014bbc:	e04c      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6818      	ldr	r0, [r3, #0]
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	6899      	ldr	r1, [r3, #8]
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	685a      	ldr	r2, [r3, #4]
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	f000 fb43 	bl	8015258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	689a      	ldr	r2, [r3, #8]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014be0:	609a      	str	r2, [r3, #8]
      break;
 8014be2:	e039      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6818      	ldr	r0, [r3, #0]
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	6859      	ldr	r1, [r3, #4]
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	f000 fab7 	bl	8015164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	2150      	movs	r1, #80	; 0x50
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f000 fb10 	bl	8015222 <TIM_ITRx_SetConfig>
      break;
 8014c02:	e029      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6818      	ldr	r0, [r3, #0]
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	6859      	ldr	r1, [r3, #4]
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	461a      	mov	r2, r3
 8014c12:	f000 fad6 	bl	80151c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2160      	movs	r1, #96	; 0x60
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f000 fb00 	bl	8015222 <TIM_ITRx_SetConfig>
      break;
 8014c22:	e019      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6818      	ldr	r0, [r3, #0]
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	6859      	ldr	r1, [r3, #4]
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	461a      	mov	r2, r3
 8014c32:	f000 fa97 	bl	8015164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2140      	movs	r1, #64	; 0x40
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f000 faf0 	bl	8015222 <TIM_ITRx_SetConfig>
      break;
 8014c42:	e009      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f000 fae7 	bl	8015222 <TIM_ITRx_SetConfig>
      break;
 8014c54:	e000      	b.n	8014c58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2200      	movs	r2, #0
 8014c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014c68:	2300      	movs	r3, #0
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014c72:	b480      	push	{r7}
 8014c74:	b083      	sub	sp, #12
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014c7a:	bf00      	nop
 8014c7c:	370c      	adds	r7, #12
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr

08014c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014c86:	b480      	push	{r7}
 8014c88:	b083      	sub	sp, #12
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014c8e:	bf00      	nop
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr

08014c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014c9a:	b480      	push	{r7}
 8014c9c:	b083      	sub	sp, #12
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014ca2:	bf00      	nop
 8014ca4:	370c      	adds	r7, #12
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr

08014cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014cae:	b480      	push	{r7}
 8014cb0:	b083      	sub	sp, #12
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014cb6:	bf00      	nop
 8014cb8:	370c      	adds	r7, #12
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc0:	4770      	bx	lr
	...

08014cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	4a40      	ldr	r2, [pc, #256]	; (8014dd8 <TIM_Base_SetConfig+0x114>)
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	d013      	beq.n	8014d04 <TIM_Base_SetConfig+0x40>
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ce2:	d00f      	beq.n	8014d04 <TIM_Base_SetConfig+0x40>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	4a3d      	ldr	r2, [pc, #244]	; (8014ddc <TIM_Base_SetConfig+0x118>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d00b      	beq.n	8014d04 <TIM_Base_SetConfig+0x40>
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4a3c      	ldr	r2, [pc, #240]	; (8014de0 <TIM_Base_SetConfig+0x11c>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d007      	beq.n	8014d04 <TIM_Base_SetConfig+0x40>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	4a3b      	ldr	r2, [pc, #236]	; (8014de4 <TIM_Base_SetConfig+0x120>)
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	d003      	beq.n	8014d04 <TIM_Base_SetConfig+0x40>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	4a3a      	ldr	r2, [pc, #232]	; (8014de8 <TIM_Base_SetConfig+0x124>)
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d108      	bne.n	8014d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	685b      	ldr	r3, [r3, #4]
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	4313      	orrs	r3, r2
 8014d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	4a2f      	ldr	r2, [pc, #188]	; (8014dd8 <TIM_Base_SetConfig+0x114>)
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	d02b      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d24:	d027      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	4a2c      	ldr	r2, [pc, #176]	; (8014ddc <TIM_Base_SetConfig+0x118>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d023      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	4a2b      	ldr	r2, [pc, #172]	; (8014de0 <TIM_Base_SetConfig+0x11c>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d01f      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	4a2a      	ldr	r2, [pc, #168]	; (8014de4 <TIM_Base_SetConfig+0x120>)
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	d01b      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	4a29      	ldr	r2, [pc, #164]	; (8014de8 <TIM_Base_SetConfig+0x124>)
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d017      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	4a28      	ldr	r2, [pc, #160]	; (8014dec <TIM_Base_SetConfig+0x128>)
 8014d4a:	4293      	cmp	r3, r2
 8014d4c:	d013      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4a27      	ldr	r2, [pc, #156]	; (8014df0 <TIM_Base_SetConfig+0x12c>)
 8014d52:	4293      	cmp	r3, r2
 8014d54:	d00f      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	4a26      	ldr	r2, [pc, #152]	; (8014df4 <TIM_Base_SetConfig+0x130>)
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	d00b      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	4a25      	ldr	r2, [pc, #148]	; (8014df8 <TIM_Base_SetConfig+0x134>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d007      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4a24      	ldr	r2, [pc, #144]	; (8014dfc <TIM_Base_SetConfig+0x138>)
 8014d6a:	4293      	cmp	r3, r2
 8014d6c:	d003      	beq.n	8014d76 <TIM_Base_SetConfig+0xb2>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4a23      	ldr	r2, [pc, #140]	; (8014e00 <TIM_Base_SetConfig+0x13c>)
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d108      	bne.n	8014d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	68db      	ldr	r3, [r3, #12]
 8014d82:	68fa      	ldr	r2, [r7, #12]
 8014d84:	4313      	orrs	r3, r2
 8014d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	695b      	ldr	r3, [r3, #20]
 8014d92:	4313      	orrs	r3, r2
 8014d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	68fa      	ldr	r2, [r7, #12]
 8014d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	689a      	ldr	r2, [r3, #8]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	4a0a      	ldr	r2, [pc, #40]	; (8014dd8 <TIM_Base_SetConfig+0x114>)
 8014db0:	4293      	cmp	r3, r2
 8014db2:	d003      	beq.n	8014dbc <TIM_Base_SetConfig+0xf8>
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	4a0c      	ldr	r2, [pc, #48]	; (8014de8 <TIM_Base_SetConfig+0x124>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d103      	bne.n	8014dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	691a      	ldr	r2, [r3, #16]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	615a      	str	r2, [r3, #20]
}
 8014dca:	bf00      	nop
 8014dcc:	3714      	adds	r7, #20
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop
 8014dd8:	40010000 	.word	0x40010000
 8014ddc:	40000400 	.word	0x40000400
 8014de0:	40000800 	.word	0x40000800
 8014de4:	40000c00 	.word	0x40000c00
 8014de8:	40010400 	.word	0x40010400
 8014dec:	40014000 	.word	0x40014000
 8014df0:	40014400 	.word	0x40014400
 8014df4:	40014800 	.word	0x40014800
 8014df8:	40001800 	.word	0x40001800
 8014dfc:	40001c00 	.word	0x40001c00
 8014e00:	40002000 	.word	0x40002000

08014e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6a1b      	ldr	r3, [r3, #32]
 8014e12:	f023 0201 	bic.w	r2, r3, #1
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6a1b      	ldr	r3, [r3, #32]
 8014e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f023 0303 	bic.w	r3, r3, #3
 8014e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	68fa      	ldr	r2, [r7, #12]
 8014e42:	4313      	orrs	r3, r2
 8014e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f023 0302 	bic.w	r3, r3, #2
 8014e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	697a      	ldr	r2, [r7, #20]
 8014e54:	4313      	orrs	r3, r2
 8014e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	4a20      	ldr	r2, [pc, #128]	; (8014edc <TIM_OC1_SetConfig+0xd8>)
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d003      	beq.n	8014e68 <TIM_OC1_SetConfig+0x64>
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	4a1f      	ldr	r2, [pc, #124]	; (8014ee0 <TIM_OC1_SetConfig+0xdc>)
 8014e64:	4293      	cmp	r3, r2
 8014e66:	d10c      	bne.n	8014e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	f023 0308 	bic.w	r3, r3, #8
 8014e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	697a      	ldr	r2, [r7, #20]
 8014e76:	4313      	orrs	r3, r2
 8014e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	f023 0304 	bic.w	r3, r3, #4
 8014e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	4a15      	ldr	r2, [pc, #84]	; (8014edc <TIM_OC1_SetConfig+0xd8>)
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d003      	beq.n	8014e92 <TIM_OC1_SetConfig+0x8e>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4a14      	ldr	r2, [pc, #80]	; (8014ee0 <TIM_OC1_SetConfig+0xdc>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d111      	bne.n	8014eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	695b      	ldr	r3, [r3, #20]
 8014ea6:	693a      	ldr	r2, [r7, #16]
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	699b      	ldr	r3, [r3, #24]
 8014eb0:	693a      	ldr	r2, [r7, #16]
 8014eb2:	4313      	orrs	r3, r2
 8014eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	693a      	ldr	r2, [r7, #16]
 8014eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	68fa      	ldr	r2, [r7, #12]
 8014ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	697a      	ldr	r2, [r7, #20]
 8014ece:	621a      	str	r2, [r3, #32]
}
 8014ed0:	bf00      	nop
 8014ed2:	371c      	adds	r7, #28
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	40010000 	.word	0x40010000
 8014ee0:	40010400 	.word	0x40010400

08014ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b087      	sub	sp, #28
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6a1b      	ldr	r3, [r3, #32]
 8014ef2:	f023 0210 	bic.w	r2, r3, #16
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6a1b      	ldr	r3, [r3, #32]
 8014efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	699b      	ldr	r3, [r3, #24]
 8014f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	021b      	lsls	r3, r3, #8
 8014f22:	68fa      	ldr	r2, [r7, #12]
 8014f24:	4313      	orrs	r3, r2
 8014f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	f023 0320 	bic.w	r3, r3, #32
 8014f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	011b      	lsls	r3, r3, #4
 8014f36:	697a      	ldr	r2, [r7, #20]
 8014f38:	4313      	orrs	r3, r2
 8014f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	4a22      	ldr	r2, [pc, #136]	; (8014fc8 <TIM_OC2_SetConfig+0xe4>)
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d003      	beq.n	8014f4c <TIM_OC2_SetConfig+0x68>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	4a21      	ldr	r2, [pc, #132]	; (8014fcc <TIM_OC2_SetConfig+0xe8>)
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	d10d      	bne.n	8014f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	011b      	lsls	r3, r3, #4
 8014f5a:	697a      	ldr	r2, [r7, #20]
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	4a17      	ldr	r2, [pc, #92]	; (8014fc8 <TIM_OC2_SetConfig+0xe4>)
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d003      	beq.n	8014f78 <TIM_OC2_SetConfig+0x94>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4a16      	ldr	r2, [pc, #88]	; (8014fcc <TIM_OC2_SetConfig+0xe8>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d113      	bne.n	8014fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	695b      	ldr	r3, [r3, #20]
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	693a      	ldr	r2, [r7, #16]
 8014f90:	4313      	orrs	r3, r2
 8014f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	693a      	ldr	r2, [r7, #16]
 8014f9c:	4313      	orrs	r3, r2
 8014f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	693a      	ldr	r2, [r7, #16]
 8014fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	697a      	ldr	r2, [r7, #20]
 8014fb8:	621a      	str	r2, [r3, #32]
}
 8014fba:	bf00      	nop
 8014fbc:	371c      	adds	r7, #28
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	40010000 	.word	0x40010000
 8014fcc:	40010400 	.word	0x40010400

08014fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	b087      	sub	sp, #28
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6a1b      	ldr	r3, [r3, #32]
 8014fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6a1b      	ldr	r3, [r3, #32]
 8014fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	69db      	ldr	r3, [r3, #28]
 8014ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f023 0303 	bic.w	r3, r3, #3
 8015006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	4313      	orrs	r3, r2
 8015010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	689b      	ldr	r3, [r3, #8]
 801501e:	021b      	lsls	r3, r3, #8
 8015020:	697a      	ldr	r2, [r7, #20]
 8015022:	4313      	orrs	r3, r2
 8015024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4a21      	ldr	r2, [pc, #132]	; (80150b0 <TIM_OC3_SetConfig+0xe0>)
 801502a:	4293      	cmp	r3, r2
 801502c:	d003      	beq.n	8015036 <TIM_OC3_SetConfig+0x66>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4a20      	ldr	r2, [pc, #128]	; (80150b4 <TIM_OC3_SetConfig+0xe4>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d10d      	bne.n	8015052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801503c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	021b      	lsls	r3, r3, #8
 8015044:	697a      	ldr	r2, [r7, #20]
 8015046:	4313      	orrs	r3, r2
 8015048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4a16      	ldr	r2, [pc, #88]	; (80150b0 <TIM_OC3_SetConfig+0xe0>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d003      	beq.n	8015062 <TIM_OC3_SetConfig+0x92>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4a15      	ldr	r2, [pc, #84]	; (80150b4 <TIM_OC3_SetConfig+0xe4>)
 801505e:	4293      	cmp	r3, r2
 8015060:	d113      	bne.n	801508a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	695b      	ldr	r3, [r3, #20]
 8015076:	011b      	lsls	r3, r3, #4
 8015078:	693a      	ldr	r2, [r7, #16]
 801507a:	4313      	orrs	r3, r2
 801507c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	699b      	ldr	r3, [r3, #24]
 8015082:	011b      	lsls	r3, r3, #4
 8015084:	693a      	ldr	r2, [r7, #16]
 8015086:	4313      	orrs	r3, r2
 8015088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	693a      	ldr	r2, [r7, #16]
 801508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	685a      	ldr	r2, [r3, #4]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	621a      	str	r2, [r3, #32]
}
 80150a4:	bf00      	nop
 80150a6:	371c      	adds	r7, #28
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr
 80150b0:	40010000 	.word	0x40010000
 80150b4:	40010400 	.word	0x40010400

080150b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80150b8:	b480      	push	{r7}
 80150ba:	b087      	sub	sp, #28
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6a1b      	ldr	r3, [r3, #32]
 80150c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6a1b      	ldr	r3, [r3, #32]
 80150d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	69db      	ldr	r3, [r3, #28]
 80150de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80150ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	021b      	lsls	r3, r3, #8
 80150f6:	68fa      	ldr	r2, [r7, #12]
 80150f8:	4313      	orrs	r3, r2
 80150fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	031b      	lsls	r3, r3, #12
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	4313      	orrs	r3, r2
 801510e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	4a12      	ldr	r2, [pc, #72]	; (801515c <TIM_OC4_SetConfig+0xa4>)
 8015114:	4293      	cmp	r3, r2
 8015116:	d003      	beq.n	8015120 <TIM_OC4_SetConfig+0x68>
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	4a11      	ldr	r2, [pc, #68]	; (8015160 <TIM_OC4_SetConfig+0xa8>)
 801511c:	4293      	cmp	r3, r2
 801511e:	d109      	bne.n	8015134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	695b      	ldr	r3, [r3, #20]
 801512c:	019b      	lsls	r3, r3, #6
 801512e:	697a      	ldr	r2, [r7, #20]
 8015130:	4313      	orrs	r3, r2
 8015132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	685a      	ldr	r2, [r3, #4]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	693a      	ldr	r2, [r7, #16]
 801514c:	621a      	str	r2, [r3, #32]
}
 801514e:	bf00      	nop
 8015150:	371c      	adds	r7, #28
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	40010000 	.word	0x40010000
 8015160:	40010400 	.word	0x40010400

08015164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015164:	b480      	push	{r7}
 8015166:	b087      	sub	sp, #28
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	6a1b      	ldr	r3, [r3, #32]
 8015174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6a1b      	ldr	r3, [r3, #32]
 801517a:	f023 0201 	bic.w	r2, r3, #1
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	699b      	ldr	r3, [r3, #24]
 8015186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	011b      	lsls	r3, r3, #4
 8015194:	693a      	ldr	r2, [r7, #16]
 8015196:	4313      	orrs	r3, r2
 8015198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	f023 030a 	bic.w	r3, r3, #10
 80151a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80151a2:	697a      	ldr	r2, [r7, #20]
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	4313      	orrs	r3, r2
 80151a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	693a      	ldr	r2, [r7, #16]
 80151ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	697a      	ldr	r2, [r7, #20]
 80151b4:	621a      	str	r2, [r3, #32]
}
 80151b6:	bf00      	nop
 80151b8:	371c      	adds	r7, #28
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr

080151c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80151c2:	b480      	push	{r7}
 80151c4:	b087      	sub	sp, #28
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	60f8      	str	r0, [r7, #12]
 80151ca:	60b9      	str	r1, [r7, #8]
 80151cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6a1b      	ldr	r3, [r3, #32]
 80151d2:	f023 0210 	bic.w	r2, r3, #16
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	699b      	ldr	r3, [r3, #24]
 80151de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	6a1b      	ldr	r3, [r3, #32]
 80151e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80151ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	031b      	lsls	r3, r3, #12
 80151f2:	697a      	ldr	r2, [r7, #20]
 80151f4:	4313      	orrs	r3, r2
 80151f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80151fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	011b      	lsls	r3, r3, #4
 8015204:	693a      	ldr	r2, [r7, #16]
 8015206:	4313      	orrs	r3, r2
 8015208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	697a      	ldr	r2, [r7, #20]
 801520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	693a      	ldr	r2, [r7, #16]
 8015214:	621a      	str	r2, [r3, #32]
}
 8015216:	bf00      	nop
 8015218:	371c      	adds	r7, #28
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr

08015222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015222:	b480      	push	{r7}
 8015224:	b085      	sub	sp, #20
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	689b      	ldr	r3, [r3, #8]
 8015230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	4313      	orrs	r3, r2
 8015240:	f043 0307 	orr.w	r3, r3, #7
 8015244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	609a      	str	r2, [r3, #8]
}
 801524c:	bf00      	nop
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015258:	b480      	push	{r7}
 801525a:	b087      	sub	sp, #28
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
 8015264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	689b      	ldr	r3, [r3, #8]
 801526a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	021a      	lsls	r2, r3, #8
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	431a      	orrs	r2, r3
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	4313      	orrs	r3, r2
 8015280:	697a      	ldr	r2, [r7, #20]
 8015282:	4313      	orrs	r3, r2
 8015284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	697a      	ldr	r2, [r7, #20]
 801528a:	609a      	str	r2, [r3, #8]
}
 801528c:	bf00      	nop
 801528e:	371c      	adds	r7, #28
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr

08015298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015298:	b480      	push	{r7}
 801529a:	b087      	sub	sp, #28
 801529c:	af00      	add	r7, sp, #0
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	60b9      	str	r1, [r7, #8]
 80152a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	f003 031f 	and.w	r3, r3, #31
 80152aa:	2201      	movs	r2, #1
 80152ac:	fa02 f303 	lsl.w	r3, r2, r3
 80152b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6a1a      	ldr	r2, [r3, #32]
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	43db      	mvns	r3, r3
 80152ba:	401a      	ands	r2, r3
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6a1a      	ldr	r2, [r3, #32]
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	f003 031f 	and.w	r3, r3, #31
 80152ca:	6879      	ldr	r1, [r7, #4]
 80152cc:	fa01 f303 	lsl.w	r3, r1, r3
 80152d0:	431a      	orrs	r2, r3
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	621a      	str	r2, [r3, #32]
}
 80152d6:	bf00      	nop
 80152d8:	371c      	adds	r7, #28
 80152da:	46bd      	mov	sp, r7
 80152dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e0:	4770      	bx	lr

080152e2 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b084      	sub	sp, #16
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b04      	cmp	r3, #4
 80152f0:	d00d      	beq.n	801530e <HAL_TIMEx_OCN_Start_IT+0x2c>
 80152f2:	2b08      	cmp	r3, #8
 80152f4:	d014      	beq.n	8015320 <HAL_TIMEx_OCN_Start_IT+0x3e>
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d000      	beq.n	80152fc <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 80152fa:	e01a      	b.n	8015332 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	68da      	ldr	r2, [r3, #12]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f042 0202 	orr.w	r2, r2, #2
 801530a:	60da      	str	r2, [r3, #12]
      break;
 801530c:	e011      	b.n	8015332 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	68da      	ldr	r2, [r3, #12]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	f042 0204 	orr.w	r2, r2, #4
 801531c:	60da      	str	r2, [r3, #12]
      break;
 801531e:	e008      	b.n	8015332 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	68da      	ldr	r2, [r3, #12]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	f042 0208 	orr.w	r2, r2, #8
 801532e:	60da      	str	r2, [r3, #12]
      break;
 8015330:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	68da      	ldr	r2, [r3, #12]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015340:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2204      	movs	r2, #4
 8015348:	6839      	ldr	r1, [r7, #0]
 801534a:	4618      	mov	r0, r3
 801534c:	f000 f976 	bl	801563c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801535e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	689b      	ldr	r3, [r3, #8]
 8015366:	f003 0307 	and.w	r3, r3, #7
 801536a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2b06      	cmp	r3, #6
 8015370:	d007      	beq.n	8015382 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f042 0201 	orr.w	r2, r2, #1
 8015380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015382:	2300      	movs	r3, #0
}
 8015384:	4618      	mov	r0, r3
 8015386:	3710      	adds	r7, #16
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	2b04      	cmp	r3, #4
 801539a:	d00d      	beq.n	80153b8 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 801539c:	2b08      	cmp	r3, #8
 801539e:	d014      	beq.n	80153ca <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d000      	beq.n	80153a6 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80153a4:	e01a      	b.n	80153dc <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	68da      	ldr	r2, [r3, #12]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	f022 0202 	bic.w	r2, r2, #2
 80153b4:	60da      	str	r2, [r3, #12]
      break;
 80153b6:	e011      	b.n	80153dc <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	68da      	ldr	r2, [r3, #12]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f022 0204 	bic.w	r2, r2, #4
 80153c6:	60da      	str	r2, [r3, #12]
      break;
 80153c8:	e008      	b.n	80153dc <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	68da      	ldr	r2, [r3, #12]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f022 0208 	bic.w	r2, r2, #8
 80153d8:	60da      	str	r2, [r3, #12]
      break;
 80153da:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2200      	movs	r2, #0
 80153e2:	6839      	ldr	r1, [r7, #0]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 f929 	bl	801563c <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	6a1b      	ldr	r3, [r3, #32]
 80153f0:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 80153f2:	68fa      	ldr	r2, [r7, #12]
 80153f4:	f240 4344 	movw	r3, #1092	; 0x444
 80153f8:	4013      	ands	r3, r2
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d107      	bne.n	801540e <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	68da      	ldr	r2, [r3, #12]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801540c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	6a1a      	ldr	r2, [r3, #32]
 8015414:	f241 1311 	movw	r3, #4369	; 0x1111
 8015418:	4013      	ands	r3, r2
 801541a:	2b00      	cmp	r3, #0
 801541c:	d10f      	bne.n	801543e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	6a1a      	ldr	r2, [r3, #32]
 8015424:	f240 4344 	movw	r3, #1092	; 0x444
 8015428:	4013      	ands	r3, r2
 801542a:	2b00      	cmp	r3, #0
 801542c:	d107      	bne.n	801543e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801543c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	6a1a      	ldr	r2, [r3, #32]
 8015444:	f241 1311 	movw	r3, #4369	; 0x1111
 8015448:	4013      	ands	r3, r2
 801544a:	2b00      	cmp	r3, #0
 801544c:	d10f      	bne.n	801546e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	6a1a      	ldr	r2, [r3, #32]
 8015454:	f240 4344 	movw	r3, #1092	; 0x444
 8015458:	4013      	ands	r3, r2
 801545a:	2b00      	cmp	r3, #0
 801545c:	d107      	bne.n	801546e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f022 0201 	bic.w	r2, r2, #1
 801546c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801546e:	2300      	movs	r3, #0
}
 8015470:	4618      	mov	r0, r3
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015478:	b480      	push	{r7}
 801547a:	b085      	sub	sp, #20
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015488:	2b01      	cmp	r3, #1
 801548a:	d101      	bne.n	8015490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801548c:	2302      	movs	r3, #2
 801548e:	e05a      	b.n	8015546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2201      	movs	r2, #1
 8015494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2202      	movs	r2, #2
 801549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	689b      	ldr	r3, [r3, #8]
 80154ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80154b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	4313      	orrs	r3, r2
 80154c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	68fa      	ldr	r2, [r7, #12]
 80154c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	4a21      	ldr	r2, [pc, #132]	; (8015554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d022      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154dc:	d01d      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4a1d      	ldr	r2, [pc, #116]	; (8015558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80154e4:	4293      	cmp	r3, r2
 80154e6:	d018      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	4a1b      	ldr	r2, [pc, #108]	; (801555c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80154ee:	4293      	cmp	r3, r2
 80154f0:	d013      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	4a1a      	ldr	r2, [pc, #104]	; (8015560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80154f8:	4293      	cmp	r3, r2
 80154fa:	d00e      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a18      	ldr	r2, [pc, #96]	; (8015564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015502:	4293      	cmp	r3, r2
 8015504:	d009      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	4a17      	ldr	r2, [pc, #92]	; (8015568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801550c:	4293      	cmp	r3, r2
 801550e:	d004      	beq.n	801551a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a15      	ldr	r2, [pc, #84]	; (801556c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015516:	4293      	cmp	r3, r2
 8015518:	d10c      	bne.n	8015534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	68ba      	ldr	r2, [r7, #8]
 8015528:	4313      	orrs	r3, r2
 801552a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	68ba      	ldr	r2, [r7, #8]
 8015532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2201      	movs	r2, #1
 8015538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2200      	movs	r2, #0
 8015540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015544:	2300      	movs	r3, #0
}
 8015546:	4618      	mov	r0, r3
 8015548:	3714      	adds	r7, #20
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop
 8015554:	40010000 	.word	0x40010000
 8015558:	40000400 	.word	0x40000400
 801555c:	40000800 	.word	0x40000800
 8015560:	40000c00 	.word	0x40000c00
 8015564:	40010400 	.word	0x40010400
 8015568:	40014000 	.word	0x40014000
 801556c:	40001800 	.word	0x40001800

08015570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015570:	b480      	push	{r7}
 8015572:	b085      	sub	sp, #20
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801557a:	2300      	movs	r3, #0
 801557c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015584:	2b01      	cmp	r3, #1
 8015586:	d101      	bne.n	801558c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015588:	2302      	movs	r3, #2
 801558a:	e03d      	b.n	8015608 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2201      	movs	r2, #1
 8015590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	4313      	orrs	r3, r2
 80155a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	689b      	ldr	r3, [r3, #8]
 80155ac:	4313      	orrs	r3, r2
 80155ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	4313      	orrs	r3, r2
 80155bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	4313      	orrs	r3, r2
 80155ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	691b      	ldr	r3, [r3, #16]
 80155d6:	4313      	orrs	r3, r2
 80155d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	4313      	orrs	r3, r2
 80155e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	69db      	ldr	r3, [r3, #28]
 80155f2:	4313      	orrs	r3, r2
 80155f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2200      	movs	r2, #0
 8015602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015606:	2300      	movs	r3, #0
}
 8015608:	4618      	mov	r0, r3
 801560a:	3714      	adds	r7, #20
 801560c:	46bd      	mov	sp, r7
 801560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015612:	4770      	bx	lr

08015614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801561c:	bf00      	nop
 801561e:	370c      	adds	r7, #12
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr

08015628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015628:	b480      	push	{r7}
 801562a:	b083      	sub	sp, #12
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015630:	bf00      	nop
 8015632:	370c      	adds	r7, #12
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr

0801563c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 801563c:	b480      	push	{r7}
 801563e:	b087      	sub	sp, #28
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	f003 031f 	and.w	r3, r3, #31
 801564e:	2204      	movs	r2, #4
 8015650:	fa02 f303 	lsl.w	r3, r2, r3
 8015654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	6a1a      	ldr	r2, [r3, #32]
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	43db      	mvns	r3, r3
 801565e:	401a      	ands	r2, r3
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	6a1a      	ldr	r2, [r3, #32]
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	f003 031f 	and.w	r3, r3, #31
 801566e:	6879      	ldr	r1, [r7, #4]
 8015670:	fa01 f303 	lsl.w	r3, r1, r3
 8015674:	431a      	orrs	r2, r3
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	621a      	str	r2, [r3, #32]
}
 801567a:	bf00      	nop
 801567c:	371c      	adds	r7, #28
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr

08015686 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015686:	b580      	push	{r7, lr}
 8015688:	b082      	sub	sp, #8
 801568a:	af00      	add	r7, sp, #0
 801568c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015694:	2301      	movs	r3, #1
 8015696:	e03f      	b.n	8015718 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d106      	bne.n	80156b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7fb f8b1 	bl	8010814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2224      	movs	r2, #36	; 0x24
 80156b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80156c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 f90c 	bl	80158e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	691a      	ldr	r2, [r3, #16]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80156de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	695a      	ldr	r2, [r3, #20]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80156ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	68da      	ldr	r2, [r3, #12]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80156fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2200      	movs	r2, #0
 8015704:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2220      	movs	r2, #32
 801570a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2220      	movs	r2, #32
 8015712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8015716:	2300      	movs	r3, #0
}
 8015718:	4618      	mov	r0, r3
 801571a:	3708      	adds	r7, #8
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b088      	sub	sp, #32
 8015724:	af02      	add	r7, sp, #8
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	603b      	str	r3, [r7, #0]
 801572c:	4613      	mov	r3, r2
 801572e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015730:	2300      	movs	r3, #0
 8015732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801573a:	b2db      	uxtb	r3, r3
 801573c:	2b20      	cmp	r3, #32
 801573e:	f040 8083 	bne.w	8015848 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d002      	beq.n	801574e <HAL_UART_Transmit+0x2e>
 8015748:	88fb      	ldrh	r3, [r7, #6]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d101      	bne.n	8015752 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801574e:	2301      	movs	r3, #1
 8015750:	e07b      	b.n	801584a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015758:	2b01      	cmp	r3, #1
 801575a:	d101      	bne.n	8015760 <HAL_UART_Transmit+0x40>
 801575c:	2302      	movs	r3, #2
 801575e:	e074      	b.n	801584a <HAL_UART_Transmit+0x12a>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2201      	movs	r2, #1
 8015764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2200      	movs	r2, #0
 801576c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2221      	movs	r2, #33	; 0x21
 8015772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015776:	f7fb fa81 	bl	8010c7c <HAL_GetTick>
 801577a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	88fa      	ldrh	r2, [r7, #6]
 8015780:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	88fa      	ldrh	r2, [r7, #6]
 8015786:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2200      	movs	r2, #0
 801578c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8015790:	e042      	b.n	8015818 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015796:	b29b      	uxth	r3, r3
 8015798:	3b01      	subs	r3, #1
 801579a:	b29a      	uxth	r2, r3
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157a8:	d122      	bne.n	80157f0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	2200      	movs	r2, #0
 80157b2:	2180      	movs	r1, #128	; 0x80
 80157b4:	68f8      	ldr	r0, [r7, #12]
 80157b6:	f000 f84c 	bl	8015852 <UART_WaitOnFlagUntilTimeout>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d001      	beq.n	80157c4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80157c0:	2303      	movs	r3, #3
 80157c2:	e042      	b.n	801584a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	881b      	ldrh	r3, [r3, #0]
 80157cc:	461a      	mov	r2, r3
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80157d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	691b      	ldr	r3, [r3, #16]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d103      	bne.n	80157e8 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	3302      	adds	r3, #2
 80157e4:	60bb      	str	r3, [r7, #8]
 80157e6:	e017      	b.n	8015818 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	3301      	adds	r3, #1
 80157ec:	60bb      	str	r3, [r7, #8]
 80157ee:	e013      	b.n	8015818 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	2200      	movs	r2, #0
 80157f8:	2180      	movs	r1, #128	; 0x80
 80157fa:	68f8      	ldr	r0, [r7, #12]
 80157fc:	f000 f829 	bl	8015852 <UART_WaitOnFlagUntilTimeout>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d001      	beq.n	801580a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8015806:	2303      	movs	r3, #3
 8015808:	e01f      	b.n	801584a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	1c5a      	adds	r2, r3, #1
 801580e:	60ba      	str	r2, [r7, #8]
 8015810:	781a      	ldrb	r2, [r3, #0]
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801581c:	b29b      	uxth	r3, r3
 801581e:	2b00      	cmp	r3, #0
 8015820:	d1b7      	bne.n	8015792 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	2200      	movs	r2, #0
 801582a:	2140      	movs	r1, #64	; 0x40
 801582c:	68f8      	ldr	r0, [r7, #12]
 801582e:	f000 f810 	bl	8015852 <UART_WaitOnFlagUntilTimeout>
 8015832:	4603      	mov	r3, r0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d001      	beq.n	801583c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8015838:	2303      	movs	r3, #3
 801583a:	e006      	b.n	801584a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2220      	movs	r2, #32
 8015840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8015844:	2300      	movs	r3, #0
 8015846:	e000      	b.n	801584a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8015848:	2302      	movs	r3, #2
  }
}
 801584a:	4618      	mov	r0, r3
 801584c:	3718      	adds	r7, #24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b084      	sub	sp, #16
 8015856:	af00      	add	r7, sp, #0
 8015858:	60f8      	str	r0, [r7, #12]
 801585a:	60b9      	str	r1, [r7, #8]
 801585c:	603b      	str	r3, [r7, #0]
 801585e:	4613      	mov	r3, r2
 8015860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015862:	e02c      	b.n	80158be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801586a:	d028      	beq.n	80158be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d007      	beq.n	8015882 <UART_WaitOnFlagUntilTimeout+0x30>
 8015872:	f7fb fa03 	bl	8010c7c <HAL_GetTick>
 8015876:	4602      	mov	r2, r0
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	69ba      	ldr	r2, [r7, #24]
 801587e:	429a      	cmp	r2, r3
 8015880:	d21d      	bcs.n	80158be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	68da      	ldr	r2, [r3, #12]
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015890:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	695a      	ldr	r2, [r3, #20]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	f022 0201 	bic.w	r2, r2, #1
 80158a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2220      	movs	r2, #32
 80158a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	2220      	movs	r2, #32
 80158ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	2200      	movs	r2, #0
 80158b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80158ba:	2303      	movs	r3, #3
 80158bc:	e00f      	b.n	80158de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	4013      	ands	r3, r2
 80158c8:	68ba      	ldr	r2, [r7, #8]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	bf0c      	ite	eq
 80158ce:	2301      	moveq	r3, #1
 80158d0:	2300      	movne	r3, #0
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	461a      	mov	r2, r3
 80158d6:	79fb      	ldrb	r3, [r7, #7]
 80158d8:	429a      	cmp	r2, r3
 80158da:	d0c3      	beq.n	8015864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
	...

080158e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80158e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ec:	b085      	sub	sp, #20
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	68da      	ldr	r2, [r3, #12]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	430a      	orrs	r2, r1
 8015906:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	689a      	ldr	r2, [r3, #8]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	691b      	ldr	r3, [r3, #16]
 8015910:	431a      	orrs	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	695b      	ldr	r3, [r3, #20]
 8015916:	431a      	orrs	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	69db      	ldr	r3, [r3, #28]
 801591c:	4313      	orrs	r3, r2
 801591e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	68db      	ldr	r3, [r3, #12]
 8015926:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801592a:	f023 030c 	bic.w	r3, r3, #12
 801592e:	687a      	ldr	r2, [r7, #4]
 8015930:	6812      	ldr	r2, [r2, #0]
 8015932:	68f9      	ldr	r1, [r7, #12]
 8015934:	430b      	orrs	r3, r1
 8015936:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	695b      	ldr	r3, [r3, #20]
 801593e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	699a      	ldr	r2, [r3, #24]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	430a      	orrs	r2, r1
 801594c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	69db      	ldr	r3, [r3, #28]
 8015952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015956:	f040 818b 	bne.w	8015c70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	4ac1      	ldr	r2, [pc, #772]	; (8015c64 <UART_SetConfig+0x37c>)
 8015960:	4293      	cmp	r3, r2
 8015962:	d005      	beq.n	8015970 <UART_SetConfig+0x88>
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	4abf      	ldr	r2, [pc, #764]	; (8015c68 <UART_SetConfig+0x380>)
 801596a:	4293      	cmp	r3, r2
 801596c:	f040 80bd 	bne.w	8015aea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015970:	f7fd fdce 	bl	8013510 <HAL_RCC_GetPCLK2Freq>
 8015974:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	461d      	mov	r5, r3
 801597a:	f04f 0600 	mov.w	r6, #0
 801597e:	46a8      	mov	r8, r5
 8015980:	46b1      	mov	r9, r6
 8015982:	eb18 0308 	adds.w	r3, r8, r8
 8015986:	eb49 0409 	adc.w	r4, r9, r9
 801598a:	4698      	mov	r8, r3
 801598c:	46a1      	mov	r9, r4
 801598e:	eb18 0805 	adds.w	r8, r8, r5
 8015992:	eb49 0906 	adc.w	r9, r9, r6
 8015996:	f04f 0100 	mov.w	r1, #0
 801599a:	f04f 0200 	mov.w	r2, #0
 801599e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80159a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80159a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80159aa:	4688      	mov	r8, r1
 80159ac:	4691      	mov	r9, r2
 80159ae:	eb18 0005 	adds.w	r0, r8, r5
 80159b2:	eb49 0106 	adc.w	r1, r9, r6
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	461d      	mov	r5, r3
 80159bc:	f04f 0600 	mov.w	r6, #0
 80159c0:	196b      	adds	r3, r5, r5
 80159c2:	eb46 0406 	adc.w	r4, r6, r6
 80159c6:	461a      	mov	r2, r3
 80159c8:	4623      	mov	r3, r4
 80159ca:	f7f3 f875 	bl	8008ab8 <__aeabi_uldivmod>
 80159ce:	4603      	mov	r3, r0
 80159d0:	460c      	mov	r4, r1
 80159d2:	461a      	mov	r2, r3
 80159d4:	4ba5      	ldr	r3, [pc, #660]	; (8015c6c <UART_SetConfig+0x384>)
 80159d6:	fba3 2302 	umull	r2, r3, r3, r2
 80159da:	095b      	lsrs	r3, r3, #5
 80159dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	461d      	mov	r5, r3
 80159e4:	f04f 0600 	mov.w	r6, #0
 80159e8:	46a9      	mov	r9, r5
 80159ea:	46b2      	mov	sl, r6
 80159ec:	eb19 0309 	adds.w	r3, r9, r9
 80159f0:	eb4a 040a 	adc.w	r4, sl, sl
 80159f4:	4699      	mov	r9, r3
 80159f6:	46a2      	mov	sl, r4
 80159f8:	eb19 0905 	adds.w	r9, r9, r5
 80159fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8015a00:	f04f 0100 	mov.w	r1, #0
 8015a04:	f04f 0200 	mov.w	r2, #0
 8015a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015a0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015a10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015a14:	4689      	mov	r9, r1
 8015a16:	4692      	mov	sl, r2
 8015a18:	eb19 0005 	adds.w	r0, r9, r5
 8015a1c:	eb4a 0106 	adc.w	r1, sl, r6
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	461d      	mov	r5, r3
 8015a26:	f04f 0600 	mov.w	r6, #0
 8015a2a:	196b      	adds	r3, r5, r5
 8015a2c:	eb46 0406 	adc.w	r4, r6, r6
 8015a30:	461a      	mov	r2, r3
 8015a32:	4623      	mov	r3, r4
 8015a34:	f7f3 f840 	bl	8008ab8 <__aeabi_uldivmod>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	460c      	mov	r4, r1
 8015a3c:	461a      	mov	r2, r3
 8015a3e:	4b8b      	ldr	r3, [pc, #556]	; (8015c6c <UART_SetConfig+0x384>)
 8015a40:	fba3 1302 	umull	r1, r3, r3, r2
 8015a44:	095b      	lsrs	r3, r3, #5
 8015a46:	2164      	movs	r1, #100	; 0x64
 8015a48:	fb01 f303 	mul.w	r3, r1, r3
 8015a4c:	1ad3      	subs	r3, r2, r3
 8015a4e:	00db      	lsls	r3, r3, #3
 8015a50:	3332      	adds	r3, #50	; 0x32
 8015a52:	4a86      	ldr	r2, [pc, #536]	; (8015c6c <UART_SetConfig+0x384>)
 8015a54:	fba2 2303 	umull	r2, r3, r2, r3
 8015a58:	095b      	lsrs	r3, r3, #5
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015a60:	4498      	add	r8, r3
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	461d      	mov	r5, r3
 8015a66:	f04f 0600 	mov.w	r6, #0
 8015a6a:	46a9      	mov	r9, r5
 8015a6c:	46b2      	mov	sl, r6
 8015a6e:	eb19 0309 	adds.w	r3, r9, r9
 8015a72:	eb4a 040a 	adc.w	r4, sl, sl
 8015a76:	4699      	mov	r9, r3
 8015a78:	46a2      	mov	sl, r4
 8015a7a:	eb19 0905 	adds.w	r9, r9, r5
 8015a7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8015a82:	f04f 0100 	mov.w	r1, #0
 8015a86:	f04f 0200 	mov.w	r2, #0
 8015a8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015a8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015a92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015a96:	4689      	mov	r9, r1
 8015a98:	4692      	mov	sl, r2
 8015a9a:	eb19 0005 	adds.w	r0, r9, r5
 8015a9e:	eb4a 0106 	adc.w	r1, sl, r6
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	461d      	mov	r5, r3
 8015aa8:	f04f 0600 	mov.w	r6, #0
 8015aac:	196b      	adds	r3, r5, r5
 8015aae:	eb46 0406 	adc.w	r4, r6, r6
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	4623      	mov	r3, r4
 8015ab6:	f7f2 ffff 	bl	8008ab8 <__aeabi_uldivmod>
 8015aba:	4603      	mov	r3, r0
 8015abc:	460c      	mov	r4, r1
 8015abe:	461a      	mov	r2, r3
 8015ac0:	4b6a      	ldr	r3, [pc, #424]	; (8015c6c <UART_SetConfig+0x384>)
 8015ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8015ac6:	095b      	lsrs	r3, r3, #5
 8015ac8:	2164      	movs	r1, #100	; 0x64
 8015aca:	fb01 f303 	mul.w	r3, r1, r3
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	00db      	lsls	r3, r3, #3
 8015ad2:	3332      	adds	r3, #50	; 0x32
 8015ad4:	4a65      	ldr	r2, [pc, #404]	; (8015c6c <UART_SetConfig+0x384>)
 8015ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8015ada:	095b      	lsrs	r3, r3, #5
 8015adc:	f003 0207 	and.w	r2, r3, #7
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	4442      	add	r2, r8
 8015ae6:	609a      	str	r2, [r3, #8]
 8015ae8:	e26f      	b.n	8015fca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015aea:	f7fd fcfd 	bl	80134e8 <HAL_RCC_GetPCLK1Freq>
 8015aee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	461d      	mov	r5, r3
 8015af4:	f04f 0600 	mov.w	r6, #0
 8015af8:	46a8      	mov	r8, r5
 8015afa:	46b1      	mov	r9, r6
 8015afc:	eb18 0308 	adds.w	r3, r8, r8
 8015b00:	eb49 0409 	adc.w	r4, r9, r9
 8015b04:	4698      	mov	r8, r3
 8015b06:	46a1      	mov	r9, r4
 8015b08:	eb18 0805 	adds.w	r8, r8, r5
 8015b0c:	eb49 0906 	adc.w	r9, r9, r6
 8015b10:	f04f 0100 	mov.w	r1, #0
 8015b14:	f04f 0200 	mov.w	r2, #0
 8015b18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015b1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015b20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015b24:	4688      	mov	r8, r1
 8015b26:	4691      	mov	r9, r2
 8015b28:	eb18 0005 	adds.w	r0, r8, r5
 8015b2c:	eb49 0106 	adc.w	r1, r9, r6
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	461d      	mov	r5, r3
 8015b36:	f04f 0600 	mov.w	r6, #0
 8015b3a:	196b      	adds	r3, r5, r5
 8015b3c:	eb46 0406 	adc.w	r4, r6, r6
 8015b40:	461a      	mov	r2, r3
 8015b42:	4623      	mov	r3, r4
 8015b44:	f7f2 ffb8 	bl	8008ab8 <__aeabi_uldivmod>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	460c      	mov	r4, r1
 8015b4c:	461a      	mov	r2, r3
 8015b4e:	4b47      	ldr	r3, [pc, #284]	; (8015c6c <UART_SetConfig+0x384>)
 8015b50:	fba3 2302 	umull	r2, r3, r3, r2
 8015b54:	095b      	lsrs	r3, r3, #5
 8015b56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	461d      	mov	r5, r3
 8015b5e:	f04f 0600 	mov.w	r6, #0
 8015b62:	46a9      	mov	r9, r5
 8015b64:	46b2      	mov	sl, r6
 8015b66:	eb19 0309 	adds.w	r3, r9, r9
 8015b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8015b6e:	4699      	mov	r9, r3
 8015b70:	46a2      	mov	sl, r4
 8015b72:	eb19 0905 	adds.w	r9, r9, r5
 8015b76:	eb4a 0a06 	adc.w	sl, sl, r6
 8015b7a:	f04f 0100 	mov.w	r1, #0
 8015b7e:	f04f 0200 	mov.w	r2, #0
 8015b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b8e:	4689      	mov	r9, r1
 8015b90:	4692      	mov	sl, r2
 8015b92:	eb19 0005 	adds.w	r0, r9, r5
 8015b96:	eb4a 0106 	adc.w	r1, sl, r6
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	461d      	mov	r5, r3
 8015ba0:	f04f 0600 	mov.w	r6, #0
 8015ba4:	196b      	adds	r3, r5, r5
 8015ba6:	eb46 0406 	adc.w	r4, r6, r6
 8015baa:	461a      	mov	r2, r3
 8015bac:	4623      	mov	r3, r4
 8015bae:	f7f2 ff83 	bl	8008ab8 <__aeabi_uldivmod>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	460c      	mov	r4, r1
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	4b2c      	ldr	r3, [pc, #176]	; (8015c6c <UART_SetConfig+0x384>)
 8015bba:	fba3 1302 	umull	r1, r3, r3, r2
 8015bbe:	095b      	lsrs	r3, r3, #5
 8015bc0:	2164      	movs	r1, #100	; 0x64
 8015bc2:	fb01 f303 	mul.w	r3, r1, r3
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	00db      	lsls	r3, r3, #3
 8015bca:	3332      	adds	r3, #50	; 0x32
 8015bcc:	4a27      	ldr	r2, [pc, #156]	; (8015c6c <UART_SetConfig+0x384>)
 8015bce:	fba2 2303 	umull	r2, r3, r2, r3
 8015bd2:	095b      	lsrs	r3, r3, #5
 8015bd4:	005b      	lsls	r3, r3, #1
 8015bd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015bda:	4498      	add	r8, r3
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	461d      	mov	r5, r3
 8015be0:	f04f 0600 	mov.w	r6, #0
 8015be4:	46a9      	mov	r9, r5
 8015be6:	46b2      	mov	sl, r6
 8015be8:	eb19 0309 	adds.w	r3, r9, r9
 8015bec:	eb4a 040a 	adc.w	r4, sl, sl
 8015bf0:	4699      	mov	r9, r3
 8015bf2:	46a2      	mov	sl, r4
 8015bf4:	eb19 0905 	adds.w	r9, r9, r5
 8015bf8:	eb4a 0a06 	adc.w	sl, sl, r6
 8015bfc:	f04f 0100 	mov.w	r1, #0
 8015c00:	f04f 0200 	mov.w	r2, #0
 8015c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015c10:	4689      	mov	r9, r1
 8015c12:	4692      	mov	sl, r2
 8015c14:	eb19 0005 	adds.w	r0, r9, r5
 8015c18:	eb4a 0106 	adc.w	r1, sl, r6
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	461d      	mov	r5, r3
 8015c22:	f04f 0600 	mov.w	r6, #0
 8015c26:	196b      	adds	r3, r5, r5
 8015c28:	eb46 0406 	adc.w	r4, r6, r6
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	4623      	mov	r3, r4
 8015c30:	f7f2 ff42 	bl	8008ab8 <__aeabi_uldivmod>
 8015c34:	4603      	mov	r3, r0
 8015c36:	460c      	mov	r4, r1
 8015c38:	461a      	mov	r2, r3
 8015c3a:	4b0c      	ldr	r3, [pc, #48]	; (8015c6c <UART_SetConfig+0x384>)
 8015c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8015c40:	095b      	lsrs	r3, r3, #5
 8015c42:	2164      	movs	r1, #100	; 0x64
 8015c44:	fb01 f303 	mul.w	r3, r1, r3
 8015c48:	1ad3      	subs	r3, r2, r3
 8015c4a:	00db      	lsls	r3, r3, #3
 8015c4c:	3332      	adds	r3, #50	; 0x32
 8015c4e:	4a07      	ldr	r2, [pc, #28]	; (8015c6c <UART_SetConfig+0x384>)
 8015c50:	fba2 2303 	umull	r2, r3, r2, r3
 8015c54:	095b      	lsrs	r3, r3, #5
 8015c56:	f003 0207 	and.w	r2, r3, #7
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	4442      	add	r2, r8
 8015c60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8015c62:	e1b2      	b.n	8015fca <UART_SetConfig+0x6e2>
 8015c64:	40011000 	.word	0x40011000
 8015c68:	40011400 	.word	0x40011400
 8015c6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4ad7      	ldr	r2, [pc, #860]	; (8015fd4 <UART_SetConfig+0x6ec>)
 8015c76:	4293      	cmp	r3, r2
 8015c78:	d005      	beq.n	8015c86 <UART_SetConfig+0x39e>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	4ad6      	ldr	r2, [pc, #856]	; (8015fd8 <UART_SetConfig+0x6f0>)
 8015c80:	4293      	cmp	r3, r2
 8015c82:	f040 80d1 	bne.w	8015e28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015c86:	f7fd fc43 	bl	8013510 <HAL_RCC_GetPCLK2Freq>
 8015c8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	469a      	mov	sl, r3
 8015c90:	f04f 0b00 	mov.w	fp, #0
 8015c94:	46d0      	mov	r8, sl
 8015c96:	46d9      	mov	r9, fp
 8015c98:	eb18 0308 	adds.w	r3, r8, r8
 8015c9c:	eb49 0409 	adc.w	r4, r9, r9
 8015ca0:	4698      	mov	r8, r3
 8015ca2:	46a1      	mov	r9, r4
 8015ca4:	eb18 080a 	adds.w	r8, r8, sl
 8015ca8:	eb49 090b 	adc.w	r9, r9, fp
 8015cac:	f04f 0100 	mov.w	r1, #0
 8015cb0:	f04f 0200 	mov.w	r2, #0
 8015cb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015cb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015cbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015cc0:	4688      	mov	r8, r1
 8015cc2:	4691      	mov	r9, r2
 8015cc4:	eb1a 0508 	adds.w	r5, sl, r8
 8015cc8:	eb4b 0609 	adc.w	r6, fp, r9
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	f04f 0200 	mov.w	r2, #0
 8015cd6:	f04f 0300 	mov.w	r3, #0
 8015cda:	f04f 0400 	mov.w	r4, #0
 8015cde:	0094      	lsls	r4, r2, #2
 8015ce0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015ce4:	008b      	lsls	r3, r1, #2
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	4623      	mov	r3, r4
 8015cea:	4628      	mov	r0, r5
 8015cec:	4631      	mov	r1, r6
 8015cee:	f7f2 fee3 	bl	8008ab8 <__aeabi_uldivmod>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	4bb8      	ldr	r3, [pc, #736]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8015cfe:	095b      	lsrs	r3, r3, #5
 8015d00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	469b      	mov	fp, r3
 8015d08:	f04f 0c00 	mov.w	ip, #0
 8015d0c:	46d9      	mov	r9, fp
 8015d0e:	46e2      	mov	sl, ip
 8015d10:	eb19 0309 	adds.w	r3, r9, r9
 8015d14:	eb4a 040a 	adc.w	r4, sl, sl
 8015d18:	4699      	mov	r9, r3
 8015d1a:	46a2      	mov	sl, r4
 8015d1c:	eb19 090b 	adds.w	r9, r9, fp
 8015d20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015d24:	f04f 0100 	mov.w	r1, #0
 8015d28:	f04f 0200 	mov.w	r2, #0
 8015d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015d30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015d34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015d38:	4689      	mov	r9, r1
 8015d3a:	4692      	mov	sl, r2
 8015d3c:	eb1b 0509 	adds.w	r5, fp, r9
 8015d40:	eb4c 060a 	adc.w	r6, ip, sl
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	f04f 0200 	mov.w	r2, #0
 8015d4e:	f04f 0300 	mov.w	r3, #0
 8015d52:	f04f 0400 	mov.w	r4, #0
 8015d56:	0094      	lsls	r4, r2, #2
 8015d58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015d5c:	008b      	lsls	r3, r1, #2
 8015d5e:	461a      	mov	r2, r3
 8015d60:	4623      	mov	r3, r4
 8015d62:	4628      	mov	r0, r5
 8015d64:	4631      	mov	r1, r6
 8015d66:	f7f2 fea7 	bl	8008ab8 <__aeabi_uldivmod>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	461a      	mov	r2, r3
 8015d70:	4b9a      	ldr	r3, [pc, #616]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015d72:	fba3 1302 	umull	r1, r3, r3, r2
 8015d76:	095b      	lsrs	r3, r3, #5
 8015d78:	2164      	movs	r1, #100	; 0x64
 8015d7a:	fb01 f303 	mul.w	r3, r1, r3
 8015d7e:	1ad3      	subs	r3, r2, r3
 8015d80:	011b      	lsls	r3, r3, #4
 8015d82:	3332      	adds	r3, #50	; 0x32
 8015d84:	4a95      	ldr	r2, [pc, #596]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015d86:	fba2 2303 	umull	r2, r3, r2, r3
 8015d8a:	095b      	lsrs	r3, r3, #5
 8015d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d90:	4498      	add	r8, r3
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	469b      	mov	fp, r3
 8015d96:	f04f 0c00 	mov.w	ip, #0
 8015d9a:	46d9      	mov	r9, fp
 8015d9c:	46e2      	mov	sl, ip
 8015d9e:	eb19 0309 	adds.w	r3, r9, r9
 8015da2:	eb4a 040a 	adc.w	r4, sl, sl
 8015da6:	4699      	mov	r9, r3
 8015da8:	46a2      	mov	sl, r4
 8015daa:	eb19 090b 	adds.w	r9, r9, fp
 8015dae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015db2:	f04f 0100 	mov.w	r1, #0
 8015db6:	f04f 0200 	mov.w	r2, #0
 8015dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015dc6:	4689      	mov	r9, r1
 8015dc8:	4692      	mov	sl, r2
 8015dca:	eb1b 0509 	adds.w	r5, fp, r9
 8015dce:	eb4c 060a 	adc.w	r6, ip, sl
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	f04f 0200 	mov.w	r2, #0
 8015ddc:	f04f 0300 	mov.w	r3, #0
 8015de0:	f04f 0400 	mov.w	r4, #0
 8015de4:	0094      	lsls	r4, r2, #2
 8015de6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015dea:	008b      	lsls	r3, r1, #2
 8015dec:	461a      	mov	r2, r3
 8015dee:	4623      	mov	r3, r4
 8015df0:	4628      	mov	r0, r5
 8015df2:	4631      	mov	r1, r6
 8015df4:	f7f2 fe60 	bl	8008ab8 <__aeabi_uldivmod>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	4b77      	ldr	r3, [pc, #476]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015e00:	fba3 1302 	umull	r1, r3, r3, r2
 8015e04:	095b      	lsrs	r3, r3, #5
 8015e06:	2164      	movs	r1, #100	; 0x64
 8015e08:	fb01 f303 	mul.w	r3, r1, r3
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	011b      	lsls	r3, r3, #4
 8015e10:	3332      	adds	r3, #50	; 0x32
 8015e12:	4a72      	ldr	r2, [pc, #456]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015e14:	fba2 2303 	umull	r2, r3, r2, r3
 8015e18:	095b      	lsrs	r3, r3, #5
 8015e1a:	f003 020f 	and.w	r2, r3, #15
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	4442      	add	r2, r8
 8015e24:	609a      	str	r2, [r3, #8]
 8015e26:	e0d0      	b.n	8015fca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015e28:	f7fd fb5e 	bl	80134e8 <HAL_RCC_GetPCLK1Freq>
 8015e2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	469a      	mov	sl, r3
 8015e32:	f04f 0b00 	mov.w	fp, #0
 8015e36:	46d0      	mov	r8, sl
 8015e38:	46d9      	mov	r9, fp
 8015e3a:	eb18 0308 	adds.w	r3, r8, r8
 8015e3e:	eb49 0409 	adc.w	r4, r9, r9
 8015e42:	4698      	mov	r8, r3
 8015e44:	46a1      	mov	r9, r4
 8015e46:	eb18 080a 	adds.w	r8, r8, sl
 8015e4a:	eb49 090b 	adc.w	r9, r9, fp
 8015e4e:	f04f 0100 	mov.w	r1, #0
 8015e52:	f04f 0200 	mov.w	r2, #0
 8015e56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015e5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015e5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015e62:	4688      	mov	r8, r1
 8015e64:	4691      	mov	r9, r2
 8015e66:	eb1a 0508 	adds.w	r5, sl, r8
 8015e6a:	eb4b 0609 	adc.w	r6, fp, r9
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	4619      	mov	r1, r3
 8015e74:	f04f 0200 	mov.w	r2, #0
 8015e78:	f04f 0300 	mov.w	r3, #0
 8015e7c:	f04f 0400 	mov.w	r4, #0
 8015e80:	0094      	lsls	r4, r2, #2
 8015e82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e86:	008b      	lsls	r3, r1, #2
 8015e88:	461a      	mov	r2, r3
 8015e8a:	4623      	mov	r3, r4
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	4631      	mov	r1, r6
 8015e90:	f7f2 fe12 	bl	8008ab8 <__aeabi_uldivmod>
 8015e94:	4603      	mov	r3, r0
 8015e96:	460c      	mov	r4, r1
 8015e98:	461a      	mov	r2, r3
 8015e9a:	4b50      	ldr	r3, [pc, #320]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8015ea0:	095b      	lsrs	r3, r3, #5
 8015ea2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	469b      	mov	fp, r3
 8015eaa:	f04f 0c00 	mov.w	ip, #0
 8015eae:	46d9      	mov	r9, fp
 8015eb0:	46e2      	mov	sl, ip
 8015eb2:	eb19 0309 	adds.w	r3, r9, r9
 8015eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8015eba:	4699      	mov	r9, r3
 8015ebc:	46a2      	mov	sl, r4
 8015ebe:	eb19 090b 	adds.w	r9, r9, fp
 8015ec2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ec6:	f04f 0100 	mov.w	r1, #0
 8015eca:	f04f 0200 	mov.w	r2, #0
 8015ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015eda:	4689      	mov	r9, r1
 8015edc:	4692      	mov	sl, r2
 8015ede:	eb1b 0509 	adds.w	r5, fp, r9
 8015ee2:	eb4c 060a 	adc.w	r6, ip, sl
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	4619      	mov	r1, r3
 8015eec:	f04f 0200 	mov.w	r2, #0
 8015ef0:	f04f 0300 	mov.w	r3, #0
 8015ef4:	f04f 0400 	mov.w	r4, #0
 8015ef8:	0094      	lsls	r4, r2, #2
 8015efa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015efe:	008b      	lsls	r3, r1, #2
 8015f00:	461a      	mov	r2, r3
 8015f02:	4623      	mov	r3, r4
 8015f04:	4628      	mov	r0, r5
 8015f06:	4631      	mov	r1, r6
 8015f08:	f7f2 fdd6 	bl	8008ab8 <__aeabi_uldivmod>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	460c      	mov	r4, r1
 8015f10:	461a      	mov	r2, r3
 8015f12:	4b32      	ldr	r3, [pc, #200]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015f14:	fba3 1302 	umull	r1, r3, r3, r2
 8015f18:	095b      	lsrs	r3, r3, #5
 8015f1a:	2164      	movs	r1, #100	; 0x64
 8015f1c:	fb01 f303 	mul.w	r3, r1, r3
 8015f20:	1ad3      	subs	r3, r2, r3
 8015f22:	011b      	lsls	r3, r3, #4
 8015f24:	3332      	adds	r3, #50	; 0x32
 8015f26:	4a2d      	ldr	r2, [pc, #180]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015f28:	fba2 2303 	umull	r2, r3, r2, r3
 8015f2c:	095b      	lsrs	r3, r3, #5
 8015f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f32:	4498      	add	r8, r3
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	469b      	mov	fp, r3
 8015f38:	f04f 0c00 	mov.w	ip, #0
 8015f3c:	46d9      	mov	r9, fp
 8015f3e:	46e2      	mov	sl, ip
 8015f40:	eb19 0309 	adds.w	r3, r9, r9
 8015f44:	eb4a 040a 	adc.w	r4, sl, sl
 8015f48:	4699      	mov	r9, r3
 8015f4a:	46a2      	mov	sl, r4
 8015f4c:	eb19 090b 	adds.w	r9, r9, fp
 8015f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015f54:	f04f 0100 	mov.w	r1, #0
 8015f58:	f04f 0200 	mov.w	r2, #0
 8015f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015f68:	4689      	mov	r9, r1
 8015f6a:	4692      	mov	sl, r2
 8015f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8015f70:	eb4c 060a 	adc.w	r6, ip, sl
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	4619      	mov	r1, r3
 8015f7a:	f04f 0200 	mov.w	r2, #0
 8015f7e:	f04f 0300 	mov.w	r3, #0
 8015f82:	f04f 0400 	mov.w	r4, #0
 8015f86:	0094      	lsls	r4, r2, #2
 8015f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f8c:	008b      	lsls	r3, r1, #2
 8015f8e:	461a      	mov	r2, r3
 8015f90:	4623      	mov	r3, r4
 8015f92:	4628      	mov	r0, r5
 8015f94:	4631      	mov	r1, r6
 8015f96:	f7f2 fd8f 	bl	8008ab8 <__aeabi_uldivmod>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	460c      	mov	r4, r1
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	4b0e      	ldr	r3, [pc, #56]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8015fa6:	095b      	lsrs	r3, r3, #5
 8015fa8:	2164      	movs	r1, #100	; 0x64
 8015faa:	fb01 f303 	mul.w	r3, r1, r3
 8015fae:	1ad3      	subs	r3, r2, r3
 8015fb0:	011b      	lsls	r3, r3, #4
 8015fb2:	3332      	adds	r3, #50	; 0x32
 8015fb4:	4a09      	ldr	r2, [pc, #36]	; (8015fdc <UART_SetConfig+0x6f4>)
 8015fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8015fba:	095b      	lsrs	r3, r3, #5
 8015fbc:	f003 020f 	and.w	r2, r3, #15
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4442      	add	r2, r8
 8015fc6:	609a      	str	r2, [r3, #8]
}
 8015fc8:	e7ff      	b.n	8015fca <UART_SetConfig+0x6e2>
 8015fca:	bf00      	nop
 8015fcc:	3714      	adds	r7, #20
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd4:	40011000 	.word	0x40011000
 8015fd8:	40011400 	.word	0x40011400
 8015fdc:	51eb851f 	.word	0x51eb851f

08015fe0 <round>:
 8015fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe2:	ec57 6b10 	vmov	r6, r7, d0
 8015fe6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015fea:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015fee:	2c13      	cmp	r4, #19
 8015ff0:	463b      	mov	r3, r7
 8015ff2:	463d      	mov	r5, r7
 8015ff4:	dc17      	bgt.n	8016026 <round+0x46>
 8015ff6:	2c00      	cmp	r4, #0
 8015ff8:	da09      	bge.n	801600e <round+0x2e>
 8015ffa:	3401      	adds	r4, #1
 8015ffc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016000:	d103      	bne.n	801600a <round+0x2a>
 8016002:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016006:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801600a:	2100      	movs	r1, #0
 801600c:	e02c      	b.n	8016068 <round+0x88>
 801600e:	4a18      	ldr	r2, [pc, #96]	; (8016070 <round+0x90>)
 8016010:	4122      	asrs	r2, r4
 8016012:	4217      	tst	r7, r2
 8016014:	d100      	bne.n	8016018 <round+0x38>
 8016016:	b19e      	cbz	r6, 8016040 <round+0x60>
 8016018:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801601c:	4123      	asrs	r3, r4
 801601e:	442b      	add	r3, r5
 8016020:	ea23 0302 	bic.w	r3, r3, r2
 8016024:	e7f1      	b.n	801600a <round+0x2a>
 8016026:	2c33      	cmp	r4, #51	; 0x33
 8016028:	dd0d      	ble.n	8016046 <round+0x66>
 801602a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801602e:	d107      	bne.n	8016040 <round+0x60>
 8016030:	4630      	mov	r0, r6
 8016032:	4639      	mov	r1, r7
 8016034:	ee10 2a10 	vmov	r2, s0
 8016038:	f7f2 f860 	bl	80080fc <__adddf3>
 801603c:	4606      	mov	r6, r0
 801603e:	460f      	mov	r7, r1
 8016040:	ec47 6b10 	vmov	d0, r6, r7
 8016044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016046:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801604a:	f04f 30ff 	mov.w	r0, #4294967295
 801604e:	40d0      	lsrs	r0, r2
 8016050:	4206      	tst	r6, r0
 8016052:	d0f5      	beq.n	8016040 <round+0x60>
 8016054:	2201      	movs	r2, #1
 8016056:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801605a:	fa02 f404 	lsl.w	r4, r2, r4
 801605e:	1931      	adds	r1, r6, r4
 8016060:	bf28      	it	cs
 8016062:	189b      	addcs	r3, r3, r2
 8016064:	ea21 0100 	bic.w	r1, r1, r0
 8016068:	461f      	mov	r7, r3
 801606a:	460e      	mov	r6, r1
 801606c:	e7e8      	b.n	8016040 <round+0x60>
 801606e:	bf00      	nop
 8016070:	000fffff 	.word	0x000fffff

08016074 <__errno>:
 8016074:	4b01      	ldr	r3, [pc, #4]	; (801607c <__errno+0x8>)
 8016076:	6818      	ldr	r0, [r3, #0]
 8016078:	4770      	bx	lr
 801607a:	bf00      	nop
 801607c:	2000008c 	.word	0x2000008c

08016080 <__libc_init_array>:
 8016080:	b570      	push	{r4, r5, r6, lr}
 8016082:	4e0d      	ldr	r6, [pc, #52]	; (80160b8 <__libc_init_array+0x38>)
 8016084:	4c0d      	ldr	r4, [pc, #52]	; (80160bc <__libc_init_array+0x3c>)
 8016086:	1ba4      	subs	r4, r4, r6
 8016088:	10a4      	asrs	r4, r4, #2
 801608a:	2500      	movs	r5, #0
 801608c:	42a5      	cmp	r5, r4
 801608e:	d109      	bne.n	80160a4 <__libc_init_array+0x24>
 8016090:	4e0b      	ldr	r6, [pc, #44]	; (80160c0 <__libc_init_array+0x40>)
 8016092:	4c0c      	ldr	r4, [pc, #48]	; (80160c4 <__libc_init_array+0x44>)
 8016094:	f002 fbac 	bl	80187f0 <_init>
 8016098:	1ba4      	subs	r4, r4, r6
 801609a:	10a4      	asrs	r4, r4, #2
 801609c:	2500      	movs	r5, #0
 801609e:	42a5      	cmp	r5, r4
 80160a0:	d105      	bne.n	80160ae <__libc_init_array+0x2e>
 80160a2:	bd70      	pop	{r4, r5, r6, pc}
 80160a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80160a8:	4798      	blx	r3
 80160aa:	3501      	adds	r5, #1
 80160ac:	e7ee      	b.n	801608c <__libc_init_array+0xc>
 80160ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80160b2:	4798      	blx	r3
 80160b4:	3501      	adds	r5, #1
 80160b6:	e7f2      	b.n	801609e <__libc_init_array+0x1e>
 80160b8:	08018c60 	.word	0x08018c60
 80160bc:	08018c60 	.word	0x08018c60
 80160c0:	08018c60 	.word	0x08018c60
 80160c4:	08018c64 	.word	0x08018c64

080160c8 <memcpy>:
 80160c8:	b510      	push	{r4, lr}
 80160ca:	1e43      	subs	r3, r0, #1
 80160cc:	440a      	add	r2, r1
 80160ce:	4291      	cmp	r1, r2
 80160d0:	d100      	bne.n	80160d4 <memcpy+0xc>
 80160d2:	bd10      	pop	{r4, pc}
 80160d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160dc:	e7f7      	b.n	80160ce <memcpy+0x6>

080160de <memset>:
 80160de:	4402      	add	r2, r0
 80160e0:	4603      	mov	r3, r0
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d100      	bne.n	80160e8 <memset+0xa>
 80160e6:	4770      	bx	lr
 80160e8:	f803 1b01 	strb.w	r1, [r3], #1
 80160ec:	e7f9      	b.n	80160e2 <memset+0x4>

080160ee <__cvt>:
 80160ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160f2:	ec55 4b10 	vmov	r4, r5, d0
 80160f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80160f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80160fc:	2d00      	cmp	r5, #0
 80160fe:	460e      	mov	r6, r1
 8016100:	4691      	mov	r9, r2
 8016102:	4619      	mov	r1, r3
 8016104:	bfb8      	it	lt
 8016106:	4622      	movlt	r2, r4
 8016108:	462b      	mov	r3, r5
 801610a:	f027 0720 	bic.w	r7, r7, #32
 801610e:	bfbb      	ittet	lt
 8016110:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016114:	461d      	movlt	r5, r3
 8016116:	2300      	movge	r3, #0
 8016118:	232d      	movlt	r3, #45	; 0x2d
 801611a:	bfb8      	it	lt
 801611c:	4614      	movlt	r4, r2
 801611e:	2f46      	cmp	r7, #70	; 0x46
 8016120:	700b      	strb	r3, [r1, #0]
 8016122:	d004      	beq.n	801612e <__cvt+0x40>
 8016124:	2f45      	cmp	r7, #69	; 0x45
 8016126:	d100      	bne.n	801612a <__cvt+0x3c>
 8016128:	3601      	adds	r6, #1
 801612a:	2102      	movs	r1, #2
 801612c:	e000      	b.n	8016130 <__cvt+0x42>
 801612e:	2103      	movs	r1, #3
 8016130:	ab03      	add	r3, sp, #12
 8016132:	9301      	str	r3, [sp, #4]
 8016134:	ab02      	add	r3, sp, #8
 8016136:	9300      	str	r3, [sp, #0]
 8016138:	4632      	mov	r2, r6
 801613a:	4653      	mov	r3, sl
 801613c:	ec45 4b10 	vmov	d0, r4, r5
 8016140:	f000 fdfa 	bl	8016d38 <_dtoa_r>
 8016144:	2f47      	cmp	r7, #71	; 0x47
 8016146:	4680      	mov	r8, r0
 8016148:	d102      	bne.n	8016150 <__cvt+0x62>
 801614a:	f019 0f01 	tst.w	r9, #1
 801614e:	d026      	beq.n	801619e <__cvt+0xb0>
 8016150:	2f46      	cmp	r7, #70	; 0x46
 8016152:	eb08 0906 	add.w	r9, r8, r6
 8016156:	d111      	bne.n	801617c <__cvt+0x8e>
 8016158:	f898 3000 	ldrb.w	r3, [r8]
 801615c:	2b30      	cmp	r3, #48	; 0x30
 801615e:	d10a      	bne.n	8016176 <__cvt+0x88>
 8016160:	2200      	movs	r2, #0
 8016162:	2300      	movs	r3, #0
 8016164:	4620      	mov	r0, r4
 8016166:	4629      	mov	r1, r5
 8016168:	f7f2 fbe6 	bl	8008938 <__aeabi_dcmpeq>
 801616c:	b918      	cbnz	r0, 8016176 <__cvt+0x88>
 801616e:	f1c6 0601 	rsb	r6, r6, #1
 8016172:	f8ca 6000 	str.w	r6, [sl]
 8016176:	f8da 3000 	ldr.w	r3, [sl]
 801617a:	4499      	add	r9, r3
 801617c:	2200      	movs	r2, #0
 801617e:	2300      	movs	r3, #0
 8016180:	4620      	mov	r0, r4
 8016182:	4629      	mov	r1, r5
 8016184:	f7f2 fbd8 	bl	8008938 <__aeabi_dcmpeq>
 8016188:	b938      	cbnz	r0, 801619a <__cvt+0xac>
 801618a:	2230      	movs	r2, #48	; 0x30
 801618c:	9b03      	ldr	r3, [sp, #12]
 801618e:	454b      	cmp	r3, r9
 8016190:	d205      	bcs.n	801619e <__cvt+0xb0>
 8016192:	1c59      	adds	r1, r3, #1
 8016194:	9103      	str	r1, [sp, #12]
 8016196:	701a      	strb	r2, [r3, #0]
 8016198:	e7f8      	b.n	801618c <__cvt+0x9e>
 801619a:	f8cd 900c 	str.w	r9, [sp, #12]
 801619e:	9b03      	ldr	r3, [sp, #12]
 80161a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161a2:	eba3 0308 	sub.w	r3, r3, r8
 80161a6:	4640      	mov	r0, r8
 80161a8:	6013      	str	r3, [r2, #0]
 80161aa:	b004      	add	sp, #16
 80161ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080161b0 <__exponent>:
 80161b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161b2:	2900      	cmp	r1, #0
 80161b4:	4604      	mov	r4, r0
 80161b6:	bfba      	itte	lt
 80161b8:	4249      	neglt	r1, r1
 80161ba:	232d      	movlt	r3, #45	; 0x2d
 80161bc:	232b      	movge	r3, #43	; 0x2b
 80161be:	2909      	cmp	r1, #9
 80161c0:	f804 2b02 	strb.w	r2, [r4], #2
 80161c4:	7043      	strb	r3, [r0, #1]
 80161c6:	dd20      	ble.n	801620a <__exponent+0x5a>
 80161c8:	f10d 0307 	add.w	r3, sp, #7
 80161cc:	461f      	mov	r7, r3
 80161ce:	260a      	movs	r6, #10
 80161d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80161d4:	fb06 1115 	mls	r1, r6, r5, r1
 80161d8:	3130      	adds	r1, #48	; 0x30
 80161da:	2d09      	cmp	r5, #9
 80161dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80161e0:	f103 32ff 	add.w	r2, r3, #4294967295
 80161e4:	4629      	mov	r1, r5
 80161e6:	dc09      	bgt.n	80161fc <__exponent+0x4c>
 80161e8:	3130      	adds	r1, #48	; 0x30
 80161ea:	3b02      	subs	r3, #2
 80161ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80161f0:	42bb      	cmp	r3, r7
 80161f2:	4622      	mov	r2, r4
 80161f4:	d304      	bcc.n	8016200 <__exponent+0x50>
 80161f6:	1a10      	subs	r0, r2, r0
 80161f8:	b003      	add	sp, #12
 80161fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161fc:	4613      	mov	r3, r2
 80161fe:	e7e7      	b.n	80161d0 <__exponent+0x20>
 8016200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016204:	f804 2b01 	strb.w	r2, [r4], #1
 8016208:	e7f2      	b.n	80161f0 <__exponent+0x40>
 801620a:	2330      	movs	r3, #48	; 0x30
 801620c:	4419      	add	r1, r3
 801620e:	7083      	strb	r3, [r0, #2]
 8016210:	1d02      	adds	r2, r0, #4
 8016212:	70c1      	strb	r1, [r0, #3]
 8016214:	e7ef      	b.n	80161f6 <__exponent+0x46>
	...

08016218 <_printf_float>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	b08d      	sub	sp, #52	; 0x34
 801621e:	460c      	mov	r4, r1
 8016220:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016224:	4616      	mov	r6, r2
 8016226:	461f      	mov	r7, r3
 8016228:	4605      	mov	r5, r0
 801622a:	f001 fcb7 	bl	8017b9c <_localeconv_r>
 801622e:	6803      	ldr	r3, [r0, #0]
 8016230:	9304      	str	r3, [sp, #16]
 8016232:	4618      	mov	r0, r3
 8016234:	f7f1 ff04 	bl	8008040 <strlen>
 8016238:	2300      	movs	r3, #0
 801623a:	930a      	str	r3, [sp, #40]	; 0x28
 801623c:	f8d8 3000 	ldr.w	r3, [r8]
 8016240:	9005      	str	r0, [sp, #20]
 8016242:	3307      	adds	r3, #7
 8016244:	f023 0307 	bic.w	r3, r3, #7
 8016248:	f103 0208 	add.w	r2, r3, #8
 801624c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016250:	f8d4 b000 	ldr.w	fp, [r4]
 8016254:	f8c8 2000 	str.w	r2, [r8]
 8016258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801625c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016260:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016264:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016268:	9307      	str	r3, [sp, #28]
 801626a:	f8cd 8018 	str.w	r8, [sp, #24]
 801626e:	f04f 32ff 	mov.w	r2, #4294967295
 8016272:	4ba7      	ldr	r3, [pc, #668]	; (8016510 <_printf_float+0x2f8>)
 8016274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016278:	f7f2 fb90 	bl	800899c <__aeabi_dcmpun>
 801627c:	bb70      	cbnz	r0, 80162dc <_printf_float+0xc4>
 801627e:	f04f 32ff 	mov.w	r2, #4294967295
 8016282:	4ba3      	ldr	r3, [pc, #652]	; (8016510 <_printf_float+0x2f8>)
 8016284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016288:	f7f2 fb6a 	bl	8008960 <__aeabi_dcmple>
 801628c:	bb30      	cbnz	r0, 80162dc <_printf_float+0xc4>
 801628e:	2200      	movs	r2, #0
 8016290:	2300      	movs	r3, #0
 8016292:	4640      	mov	r0, r8
 8016294:	4649      	mov	r1, r9
 8016296:	f7f2 fb59 	bl	800894c <__aeabi_dcmplt>
 801629a:	b110      	cbz	r0, 80162a2 <_printf_float+0x8a>
 801629c:	232d      	movs	r3, #45	; 0x2d
 801629e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162a2:	4a9c      	ldr	r2, [pc, #624]	; (8016514 <_printf_float+0x2fc>)
 80162a4:	4b9c      	ldr	r3, [pc, #624]	; (8016518 <_printf_float+0x300>)
 80162a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80162aa:	bf8c      	ite	hi
 80162ac:	4690      	movhi	r8, r2
 80162ae:	4698      	movls	r8, r3
 80162b0:	2303      	movs	r3, #3
 80162b2:	f02b 0204 	bic.w	r2, fp, #4
 80162b6:	6123      	str	r3, [r4, #16]
 80162b8:	6022      	str	r2, [r4, #0]
 80162ba:	f04f 0900 	mov.w	r9, #0
 80162be:	9700      	str	r7, [sp, #0]
 80162c0:	4633      	mov	r3, r6
 80162c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80162c4:	4621      	mov	r1, r4
 80162c6:	4628      	mov	r0, r5
 80162c8:	f000 f9e6 	bl	8016698 <_printf_common>
 80162cc:	3001      	adds	r0, #1
 80162ce:	f040 808d 	bne.w	80163ec <_printf_float+0x1d4>
 80162d2:	f04f 30ff 	mov.w	r0, #4294967295
 80162d6:	b00d      	add	sp, #52	; 0x34
 80162d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162dc:	4642      	mov	r2, r8
 80162de:	464b      	mov	r3, r9
 80162e0:	4640      	mov	r0, r8
 80162e2:	4649      	mov	r1, r9
 80162e4:	f7f2 fb5a 	bl	800899c <__aeabi_dcmpun>
 80162e8:	b110      	cbz	r0, 80162f0 <_printf_float+0xd8>
 80162ea:	4a8c      	ldr	r2, [pc, #560]	; (801651c <_printf_float+0x304>)
 80162ec:	4b8c      	ldr	r3, [pc, #560]	; (8016520 <_printf_float+0x308>)
 80162ee:	e7da      	b.n	80162a6 <_printf_float+0x8e>
 80162f0:	6861      	ldr	r1, [r4, #4]
 80162f2:	1c4b      	adds	r3, r1, #1
 80162f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80162f8:	a80a      	add	r0, sp, #40	; 0x28
 80162fa:	d13e      	bne.n	801637a <_printf_float+0x162>
 80162fc:	2306      	movs	r3, #6
 80162fe:	6063      	str	r3, [r4, #4]
 8016300:	2300      	movs	r3, #0
 8016302:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016306:	ab09      	add	r3, sp, #36	; 0x24
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	ec49 8b10 	vmov	d0, r8, r9
 801630e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016312:	6022      	str	r2, [r4, #0]
 8016314:	f8cd a004 	str.w	sl, [sp, #4]
 8016318:	6861      	ldr	r1, [r4, #4]
 801631a:	4628      	mov	r0, r5
 801631c:	f7ff fee7 	bl	80160ee <__cvt>
 8016320:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016324:	2b47      	cmp	r3, #71	; 0x47
 8016326:	4680      	mov	r8, r0
 8016328:	d109      	bne.n	801633e <_printf_float+0x126>
 801632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632c:	1cd8      	adds	r0, r3, #3
 801632e:	db02      	blt.n	8016336 <_printf_float+0x11e>
 8016330:	6862      	ldr	r2, [r4, #4]
 8016332:	4293      	cmp	r3, r2
 8016334:	dd47      	ble.n	80163c6 <_printf_float+0x1ae>
 8016336:	f1aa 0a02 	sub.w	sl, sl, #2
 801633a:	fa5f fa8a 	uxtb.w	sl, sl
 801633e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016342:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016344:	d824      	bhi.n	8016390 <_printf_float+0x178>
 8016346:	3901      	subs	r1, #1
 8016348:	4652      	mov	r2, sl
 801634a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801634e:	9109      	str	r1, [sp, #36]	; 0x24
 8016350:	f7ff ff2e 	bl	80161b0 <__exponent>
 8016354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016356:	1813      	adds	r3, r2, r0
 8016358:	2a01      	cmp	r2, #1
 801635a:	4681      	mov	r9, r0
 801635c:	6123      	str	r3, [r4, #16]
 801635e:	dc02      	bgt.n	8016366 <_printf_float+0x14e>
 8016360:	6822      	ldr	r2, [r4, #0]
 8016362:	07d1      	lsls	r1, r2, #31
 8016364:	d501      	bpl.n	801636a <_printf_float+0x152>
 8016366:	3301      	adds	r3, #1
 8016368:	6123      	str	r3, [r4, #16]
 801636a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801636e:	2b00      	cmp	r3, #0
 8016370:	d0a5      	beq.n	80162be <_printf_float+0xa6>
 8016372:	232d      	movs	r3, #45	; 0x2d
 8016374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016378:	e7a1      	b.n	80162be <_printf_float+0xa6>
 801637a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801637e:	f000 8177 	beq.w	8016670 <_printf_float+0x458>
 8016382:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016386:	d1bb      	bne.n	8016300 <_printf_float+0xe8>
 8016388:	2900      	cmp	r1, #0
 801638a:	d1b9      	bne.n	8016300 <_printf_float+0xe8>
 801638c:	2301      	movs	r3, #1
 801638e:	e7b6      	b.n	80162fe <_printf_float+0xe6>
 8016390:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016394:	d119      	bne.n	80163ca <_printf_float+0x1b2>
 8016396:	2900      	cmp	r1, #0
 8016398:	6863      	ldr	r3, [r4, #4]
 801639a:	dd0c      	ble.n	80163b6 <_printf_float+0x19e>
 801639c:	6121      	str	r1, [r4, #16]
 801639e:	b913      	cbnz	r3, 80163a6 <_printf_float+0x18e>
 80163a0:	6822      	ldr	r2, [r4, #0]
 80163a2:	07d2      	lsls	r2, r2, #31
 80163a4:	d502      	bpl.n	80163ac <_printf_float+0x194>
 80163a6:	3301      	adds	r3, #1
 80163a8:	440b      	add	r3, r1
 80163aa:	6123      	str	r3, [r4, #16]
 80163ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80163b0:	f04f 0900 	mov.w	r9, #0
 80163b4:	e7d9      	b.n	801636a <_printf_float+0x152>
 80163b6:	b913      	cbnz	r3, 80163be <_printf_float+0x1a6>
 80163b8:	6822      	ldr	r2, [r4, #0]
 80163ba:	07d0      	lsls	r0, r2, #31
 80163bc:	d501      	bpl.n	80163c2 <_printf_float+0x1aa>
 80163be:	3302      	adds	r3, #2
 80163c0:	e7f3      	b.n	80163aa <_printf_float+0x192>
 80163c2:	2301      	movs	r3, #1
 80163c4:	e7f1      	b.n	80163aa <_printf_float+0x192>
 80163c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80163ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80163ce:	4293      	cmp	r3, r2
 80163d0:	db05      	blt.n	80163de <_printf_float+0x1c6>
 80163d2:	6822      	ldr	r2, [r4, #0]
 80163d4:	6123      	str	r3, [r4, #16]
 80163d6:	07d1      	lsls	r1, r2, #31
 80163d8:	d5e8      	bpl.n	80163ac <_printf_float+0x194>
 80163da:	3301      	adds	r3, #1
 80163dc:	e7e5      	b.n	80163aa <_printf_float+0x192>
 80163de:	2b00      	cmp	r3, #0
 80163e0:	bfd4      	ite	le
 80163e2:	f1c3 0302 	rsble	r3, r3, #2
 80163e6:	2301      	movgt	r3, #1
 80163e8:	4413      	add	r3, r2
 80163ea:	e7de      	b.n	80163aa <_printf_float+0x192>
 80163ec:	6823      	ldr	r3, [r4, #0]
 80163ee:	055a      	lsls	r2, r3, #21
 80163f0:	d407      	bmi.n	8016402 <_printf_float+0x1ea>
 80163f2:	6923      	ldr	r3, [r4, #16]
 80163f4:	4642      	mov	r2, r8
 80163f6:	4631      	mov	r1, r6
 80163f8:	4628      	mov	r0, r5
 80163fa:	47b8      	blx	r7
 80163fc:	3001      	adds	r0, #1
 80163fe:	d12b      	bne.n	8016458 <_printf_float+0x240>
 8016400:	e767      	b.n	80162d2 <_printf_float+0xba>
 8016402:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016406:	f240 80dc 	bls.w	80165c2 <_printf_float+0x3aa>
 801640a:	2200      	movs	r2, #0
 801640c:	2300      	movs	r3, #0
 801640e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016412:	f7f2 fa91 	bl	8008938 <__aeabi_dcmpeq>
 8016416:	2800      	cmp	r0, #0
 8016418:	d033      	beq.n	8016482 <_printf_float+0x26a>
 801641a:	2301      	movs	r3, #1
 801641c:	4a41      	ldr	r2, [pc, #260]	; (8016524 <_printf_float+0x30c>)
 801641e:	4631      	mov	r1, r6
 8016420:	4628      	mov	r0, r5
 8016422:	47b8      	blx	r7
 8016424:	3001      	adds	r0, #1
 8016426:	f43f af54 	beq.w	80162d2 <_printf_float+0xba>
 801642a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801642e:	429a      	cmp	r2, r3
 8016430:	db02      	blt.n	8016438 <_printf_float+0x220>
 8016432:	6823      	ldr	r3, [r4, #0]
 8016434:	07d8      	lsls	r0, r3, #31
 8016436:	d50f      	bpl.n	8016458 <_printf_float+0x240>
 8016438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801643c:	4631      	mov	r1, r6
 801643e:	4628      	mov	r0, r5
 8016440:	47b8      	blx	r7
 8016442:	3001      	adds	r0, #1
 8016444:	f43f af45 	beq.w	80162d2 <_printf_float+0xba>
 8016448:	f04f 0800 	mov.w	r8, #0
 801644c:	f104 091a 	add.w	r9, r4, #26
 8016450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016452:	3b01      	subs	r3, #1
 8016454:	4543      	cmp	r3, r8
 8016456:	dc09      	bgt.n	801646c <_printf_float+0x254>
 8016458:	6823      	ldr	r3, [r4, #0]
 801645a:	079b      	lsls	r3, r3, #30
 801645c:	f100 8103 	bmi.w	8016666 <_printf_float+0x44e>
 8016460:	68e0      	ldr	r0, [r4, #12]
 8016462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016464:	4298      	cmp	r0, r3
 8016466:	bfb8      	it	lt
 8016468:	4618      	movlt	r0, r3
 801646a:	e734      	b.n	80162d6 <_printf_float+0xbe>
 801646c:	2301      	movs	r3, #1
 801646e:	464a      	mov	r2, r9
 8016470:	4631      	mov	r1, r6
 8016472:	4628      	mov	r0, r5
 8016474:	47b8      	blx	r7
 8016476:	3001      	adds	r0, #1
 8016478:	f43f af2b 	beq.w	80162d2 <_printf_float+0xba>
 801647c:	f108 0801 	add.w	r8, r8, #1
 8016480:	e7e6      	b.n	8016450 <_printf_float+0x238>
 8016482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016484:	2b00      	cmp	r3, #0
 8016486:	dc2b      	bgt.n	80164e0 <_printf_float+0x2c8>
 8016488:	2301      	movs	r3, #1
 801648a:	4a26      	ldr	r2, [pc, #152]	; (8016524 <_printf_float+0x30c>)
 801648c:	4631      	mov	r1, r6
 801648e:	4628      	mov	r0, r5
 8016490:	47b8      	blx	r7
 8016492:	3001      	adds	r0, #1
 8016494:	f43f af1d 	beq.w	80162d2 <_printf_float+0xba>
 8016498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801649a:	b923      	cbnz	r3, 80164a6 <_printf_float+0x28e>
 801649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801649e:	b913      	cbnz	r3, 80164a6 <_printf_float+0x28e>
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	07d9      	lsls	r1, r3, #31
 80164a4:	d5d8      	bpl.n	8016458 <_printf_float+0x240>
 80164a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164aa:	4631      	mov	r1, r6
 80164ac:	4628      	mov	r0, r5
 80164ae:	47b8      	blx	r7
 80164b0:	3001      	adds	r0, #1
 80164b2:	f43f af0e 	beq.w	80162d2 <_printf_float+0xba>
 80164b6:	f04f 0900 	mov.w	r9, #0
 80164ba:	f104 0a1a 	add.w	sl, r4, #26
 80164be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c0:	425b      	negs	r3, r3
 80164c2:	454b      	cmp	r3, r9
 80164c4:	dc01      	bgt.n	80164ca <_printf_float+0x2b2>
 80164c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164c8:	e794      	b.n	80163f4 <_printf_float+0x1dc>
 80164ca:	2301      	movs	r3, #1
 80164cc:	4652      	mov	r2, sl
 80164ce:	4631      	mov	r1, r6
 80164d0:	4628      	mov	r0, r5
 80164d2:	47b8      	blx	r7
 80164d4:	3001      	adds	r0, #1
 80164d6:	f43f aefc 	beq.w	80162d2 <_printf_float+0xba>
 80164da:	f109 0901 	add.w	r9, r9, #1
 80164de:	e7ee      	b.n	80164be <_printf_float+0x2a6>
 80164e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164e4:	429a      	cmp	r2, r3
 80164e6:	bfa8      	it	ge
 80164e8:	461a      	movge	r2, r3
 80164ea:	2a00      	cmp	r2, #0
 80164ec:	4691      	mov	r9, r2
 80164ee:	dd07      	ble.n	8016500 <_printf_float+0x2e8>
 80164f0:	4613      	mov	r3, r2
 80164f2:	4631      	mov	r1, r6
 80164f4:	4642      	mov	r2, r8
 80164f6:	4628      	mov	r0, r5
 80164f8:	47b8      	blx	r7
 80164fa:	3001      	adds	r0, #1
 80164fc:	f43f aee9 	beq.w	80162d2 <_printf_float+0xba>
 8016500:	f104 031a 	add.w	r3, r4, #26
 8016504:	f04f 0b00 	mov.w	fp, #0
 8016508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801650c:	9306      	str	r3, [sp, #24]
 801650e:	e015      	b.n	801653c <_printf_float+0x324>
 8016510:	7fefffff 	.word	0x7fefffff
 8016514:	080189a0 	.word	0x080189a0
 8016518:	0801899c 	.word	0x0801899c
 801651c:	080189a8 	.word	0x080189a8
 8016520:	080189a4 	.word	0x080189a4
 8016524:	080189ac 	.word	0x080189ac
 8016528:	2301      	movs	r3, #1
 801652a:	9a06      	ldr	r2, [sp, #24]
 801652c:	4631      	mov	r1, r6
 801652e:	4628      	mov	r0, r5
 8016530:	47b8      	blx	r7
 8016532:	3001      	adds	r0, #1
 8016534:	f43f aecd 	beq.w	80162d2 <_printf_float+0xba>
 8016538:	f10b 0b01 	add.w	fp, fp, #1
 801653c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016540:	ebaa 0309 	sub.w	r3, sl, r9
 8016544:	455b      	cmp	r3, fp
 8016546:	dcef      	bgt.n	8016528 <_printf_float+0x310>
 8016548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801654c:	429a      	cmp	r2, r3
 801654e:	44d0      	add	r8, sl
 8016550:	db15      	blt.n	801657e <_printf_float+0x366>
 8016552:	6823      	ldr	r3, [r4, #0]
 8016554:	07da      	lsls	r2, r3, #31
 8016556:	d412      	bmi.n	801657e <_printf_float+0x366>
 8016558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801655a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801655c:	eba3 020a 	sub.w	r2, r3, sl
 8016560:	eba3 0a01 	sub.w	sl, r3, r1
 8016564:	4592      	cmp	sl, r2
 8016566:	bfa8      	it	ge
 8016568:	4692      	movge	sl, r2
 801656a:	f1ba 0f00 	cmp.w	sl, #0
 801656e:	dc0e      	bgt.n	801658e <_printf_float+0x376>
 8016570:	f04f 0800 	mov.w	r8, #0
 8016574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016578:	f104 091a 	add.w	r9, r4, #26
 801657c:	e019      	b.n	80165b2 <_printf_float+0x39a>
 801657e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016582:	4631      	mov	r1, r6
 8016584:	4628      	mov	r0, r5
 8016586:	47b8      	blx	r7
 8016588:	3001      	adds	r0, #1
 801658a:	d1e5      	bne.n	8016558 <_printf_float+0x340>
 801658c:	e6a1      	b.n	80162d2 <_printf_float+0xba>
 801658e:	4653      	mov	r3, sl
 8016590:	4642      	mov	r2, r8
 8016592:	4631      	mov	r1, r6
 8016594:	4628      	mov	r0, r5
 8016596:	47b8      	blx	r7
 8016598:	3001      	adds	r0, #1
 801659a:	d1e9      	bne.n	8016570 <_printf_float+0x358>
 801659c:	e699      	b.n	80162d2 <_printf_float+0xba>
 801659e:	2301      	movs	r3, #1
 80165a0:	464a      	mov	r2, r9
 80165a2:	4631      	mov	r1, r6
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b8      	blx	r7
 80165a8:	3001      	adds	r0, #1
 80165aa:	f43f ae92 	beq.w	80162d2 <_printf_float+0xba>
 80165ae:	f108 0801 	add.w	r8, r8, #1
 80165b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165b6:	1a9b      	subs	r3, r3, r2
 80165b8:	eba3 030a 	sub.w	r3, r3, sl
 80165bc:	4543      	cmp	r3, r8
 80165be:	dcee      	bgt.n	801659e <_printf_float+0x386>
 80165c0:	e74a      	b.n	8016458 <_printf_float+0x240>
 80165c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165c4:	2a01      	cmp	r2, #1
 80165c6:	dc01      	bgt.n	80165cc <_printf_float+0x3b4>
 80165c8:	07db      	lsls	r3, r3, #31
 80165ca:	d53a      	bpl.n	8016642 <_printf_float+0x42a>
 80165cc:	2301      	movs	r3, #1
 80165ce:	4642      	mov	r2, r8
 80165d0:	4631      	mov	r1, r6
 80165d2:	4628      	mov	r0, r5
 80165d4:	47b8      	blx	r7
 80165d6:	3001      	adds	r0, #1
 80165d8:	f43f ae7b 	beq.w	80162d2 <_printf_float+0xba>
 80165dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165e0:	4631      	mov	r1, r6
 80165e2:	4628      	mov	r0, r5
 80165e4:	47b8      	blx	r7
 80165e6:	3001      	adds	r0, #1
 80165e8:	f108 0801 	add.w	r8, r8, #1
 80165ec:	f43f ae71 	beq.w	80162d2 <_printf_float+0xba>
 80165f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165f2:	2200      	movs	r2, #0
 80165f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80165f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80165fc:	2300      	movs	r3, #0
 80165fe:	f7f2 f99b 	bl	8008938 <__aeabi_dcmpeq>
 8016602:	b9c8      	cbnz	r0, 8016638 <_printf_float+0x420>
 8016604:	4653      	mov	r3, sl
 8016606:	4642      	mov	r2, r8
 8016608:	4631      	mov	r1, r6
 801660a:	4628      	mov	r0, r5
 801660c:	47b8      	blx	r7
 801660e:	3001      	adds	r0, #1
 8016610:	d10e      	bne.n	8016630 <_printf_float+0x418>
 8016612:	e65e      	b.n	80162d2 <_printf_float+0xba>
 8016614:	2301      	movs	r3, #1
 8016616:	4652      	mov	r2, sl
 8016618:	4631      	mov	r1, r6
 801661a:	4628      	mov	r0, r5
 801661c:	47b8      	blx	r7
 801661e:	3001      	adds	r0, #1
 8016620:	f43f ae57 	beq.w	80162d2 <_printf_float+0xba>
 8016624:	f108 0801 	add.w	r8, r8, #1
 8016628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801662a:	3b01      	subs	r3, #1
 801662c:	4543      	cmp	r3, r8
 801662e:	dcf1      	bgt.n	8016614 <_printf_float+0x3fc>
 8016630:	464b      	mov	r3, r9
 8016632:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016636:	e6de      	b.n	80163f6 <_printf_float+0x1de>
 8016638:	f04f 0800 	mov.w	r8, #0
 801663c:	f104 0a1a 	add.w	sl, r4, #26
 8016640:	e7f2      	b.n	8016628 <_printf_float+0x410>
 8016642:	2301      	movs	r3, #1
 8016644:	e7df      	b.n	8016606 <_printf_float+0x3ee>
 8016646:	2301      	movs	r3, #1
 8016648:	464a      	mov	r2, r9
 801664a:	4631      	mov	r1, r6
 801664c:	4628      	mov	r0, r5
 801664e:	47b8      	blx	r7
 8016650:	3001      	adds	r0, #1
 8016652:	f43f ae3e 	beq.w	80162d2 <_printf_float+0xba>
 8016656:	f108 0801 	add.w	r8, r8, #1
 801665a:	68e3      	ldr	r3, [r4, #12]
 801665c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801665e:	1a9b      	subs	r3, r3, r2
 8016660:	4543      	cmp	r3, r8
 8016662:	dcf0      	bgt.n	8016646 <_printf_float+0x42e>
 8016664:	e6fc      	b.n	8016460 <_printf_float+0x248>
 8016666:	f04f 0800 	mov.w	r8, #0
 801666a:	f104 0919 	add.w	r9, r4, #25
 801666e:	e7f4      	b.n	801665a <_printf_float+0x442>
 8016670:	2900      	cmp	r1, #0
 8016672:	f43f ae8b 	beq.w	801638c <_printf_float+0x174>
 8016676:	2300      	movs	r3, #0
 8016678:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801667c:	ab09      	add	r3, sp, #36	; 0x24
 801667e:	9300      	str	r3, [sp, #0]
 8016680:	ec49 8b10 	vmov	d0, r8, r9
 8016684:	6022      	str	r2, [r4, #0]
 8016686:	f8cd a004 	str.w	sl, [sp, #4]
 801668a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801668e:	4628      	mov	r0, r5
 8016690:	f7ff fd2d 	bl	80160ee <__cvt>
 8016694:	4680      	mov	r8, r0
 8016696:	e648      	b.n	801632a <_printf_float+0x112>

08016698 <_printf_common>:
 8016698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801669c:	4691      	mov	r9, r2
 801669e:	461f      	mov	r7, r3
 80166a0:	688a      	ldr	r2, [r1, #8]
 80166a2:	690b      	ldr	r3, [r1, #16]
 80166a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166a8:	4293      	cmp	r3, r2
 80166aa:	bfb8      	it	lt
 80166ac:	4613      	movlt	r3, r2
 80166ae:	f8c9 3000 	str.w	r3, [r9]
 80166b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166b6:	4606      	mov	r6, r0
 80166b8:	460c      	mov	r4, r1
 80166ba:	b112      	cbz	r2, 80166c2 <_printf_common+0x2a>
 80166bc:	3301      	adds	r3, #1
 80166be:	f8c9 3000 	str.w	r3, [r9]
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	0699      	lsls	r1, r3, #26
 80166c6:	bf42      	ittt	mi
 80166c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80166cc:	3302      	addmi	r3, #2
 80166ce:	f8c9 3000 	strmi.w	r3, [r9]
 80166d2:	6825      	ldr	r5, [r4, #0]
 80166d4:	f015 0506 	ands.w	r5, r5, #6
 80166d8:	d107      	bne.n	80166ea <_printf_common+0x52>
 80166da:	f104 0a19 	add.w	sl, r4, #25
 80166de:	68e3      	ldr	r3, [r4, #12]
 80166e0:	f8d9 2000 	ldr.w	r2, [r9]
 80166e4:	1a9b      	subs	r3, r3, r2
 80166e6:	42ab      	cmp	r3, r5
 80166e8:	dc28      	bgt.n	801673c <_printf_common+0xa4>
 80166ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80166ee:	6822      	ldr	r2, [r4, #0]
 80166f0:	3300      	adds	r3, #0
 80166f2:	bf18      	it	ne
 80166f4:	2301      	movne	r3, #1
 80166f6:	0692      	lsls	r2, r2, #26
 80166f8:	d42d      	bmi.n	8016756 <_printf_common+0xbe>
 80166fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166fe:	4639      	mov	r1, r7
 8016700:	4630      	mov	r0, r6
 8016702:	47c0      	blx	r8
 8016704:	3001      	adds	r0, #1
 8016706:	d020      	beq.n	801674a <_printf_common+0xb2>
 8016708:	6823      	ldr	r3, [r4, #0]
 801670a:	68e5      	ldr	r5, [r4, #12]
 801670c:	f8d9 2000 	ldr.w	r2, [r9]
 8016710:	f003 0306 	and.w	r3, r3, #6
 8016714:	2b04      	cmp	r3, #4
 8016716:	bf08      	it	eq
 8016718:	1aad      	subeq	r5, r5, r2
 801671a:	68a3      	ldr	r3, [r4, #8]
 801671c:	6922      	ldr	r2, [r4, #16]
 801671e:	bf0c      	ite	eq
 8016720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016724:	2500      	movne	r5, #0
 8016726:	4293      	cmp	r3, r2
 8016728:	bfc4      	itt	gt
 801672a:	1a9b      	subgt	r3, r3, r2
 801672c:	18ed      	addgt	r5, r5, r3
 801672e:	f04f 0900 	mov.w	r9, #0
 8016732:	341a      	adds	r4, #26
 8016734:	454d      	cmp	r5, r9
 8016736:	d11a      	bne.n	801676e <_printf_common+0xd6>
 8016738:	2000      	movs	r0, #0
 801673a:	e008      	b.n	801674e <_printf_common+0xb6>
 801673c:	2301      	movs	r3, #1
 801673e:	4652      	mov	r2, sl
 8016740:	4639      	mov	r1, r7
 8016742:	4630      	mov	r0, r6
 8016744:	47c0      	blx	r8
 8016746:	3001      	adds	r0, #1
 8016748:	d103      	bne.n	8016752 <_printf_common+0xba>
 801674a:	f04f 30ff 	mov.w	r0, #4294967295
 801674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016752:	3501      	adds	r5, #1
 8016754:	e7c3      	b.n	80166de <_printf_common+0x46>
 8016756:	18e1      	adds	r1, r4, r3
 8016758:	1c5a      	adds	r2, r3, #1
 801675a:	2030      	movs	r0, #48	; 0x30
 801675c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016760:	4422      	add	r2, r4
 8016762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801676a:	3302      	adds	r3, #2
 801676c:	e7c5      	b.n	80166fa <_printf_common+0x62>
 801676e:	2301      	movs	r3, #1
 8016770:	4622      	mov	r2, r4
 8016772:	4639      	mov	r1, r7
 8016774:	4630      	mov	r0, r6
 8016776:	47c0      	blx	r8
 8016778:	3001      	adds	r0, #1
 801677a:	d0e6      	beq.n	801674a <_printf_common+0xb2>
 801677c:	f109 0901 	add.w	r9, r9, #1
 8016780:	e7d8      	b.n	8016734 <_printf_common+0x9c>
	...

08016784 <_printf_i>:
 8016784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016788:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801678c:	460c      	mov	r4, r1
 801678e:	7e09      	ldrb	r1, [r1, #24]
 8016790:	b085      	sub	sp, #20
 8016792:	296e      	cmp	r1, #110	; 0x6e
 8016794:	4617      	mov	r7, r2
 8016796:	4606      	mov	r6, r0
 8016798:	4698      	mov	r8, r3
 801679a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801679c:	f000 80b3 	beq.w	8016906 <_printf_i+0x182>
 80167a0:	d822      	bhi.n	80167e8 <_printf_i+0x64>
 80167a2:	2963      	cmp	r1, #99	; 0x63
 80167a4:	d036      	beq.n	8016814 <_printf_i+0x90>
 80167a6:	d80a      	bhi.n	80167be <_printf_i+0x3a>
 80167a8:	2900      	cmp	r1, #0
 80167aa:	f000 80b9 	beq.w	8016920 <_printf_i+0x19c>
 80167ae:	2958      	cmp	r1, #88	; 0x58
 80167b0:	f000 8083 	beq.w	80168ba <_printf_i+0x136>
 80167b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80167bc:	e032      	b.n	8016824 <_printf_i+0xa0>
 80167be:	2964      	cmp	r1, #100	; 0x64
 80167c0:	d001      	beq.n	80167c6 <_printf_i+0x42>
 80167c2:	2969      	cmp	r1, #105	; 0x69
 80167c4:	d1f6      	bne.n	80167b4 <_printf_i+0x30>
 80167c6:	6820      	ldr	r0, [r4, #0]
 80167c8:	6813      	ldr	r3, [r2, #0]
 80167ca:	0605      	lsls	r5, r0, #24
 80167cc:	f103 0104 	add.w	r1, r3, #4
 80167d0:	d52a      	bpl.n	8016828 <_printf_i+0xa4>
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	6011      	str	r1, [r2, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	da03      	bge.n	80167e2 <_printf_i+0x5e>
 80167da:	222d      	movs	r2, #45	; 0x2d
 80167dc:	425b      	negs	r3, r3
 80167de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80167e2:	486f      	ldr	r0, [pc, #444]	; (80169a0 <_printf_i+0x21c>)
 80167e4:	220a      	movs	r2, #10
 80167e6:	e039      	b.n	801685c <_printf_i+0xd8>
 80167e8:	2973      	cmp	r1, #115	; 0x73
 80167ea:	f000 809d 	beq.w	8016928 <_printf_i+0x1a4>
 80167ee:	d808      	bhi.n	8016802 <_printf_i+0x7e>
 80167f0:	296f      	cmp	r1, #111	; 0x6f
 80167f2:	d020      	beq.n	8016836 <_printf_i+0xb2>
 80167f4:	2970      	cmp	r1, #112	; 0x70
 80167f6:	d1dd      	bne.n	80167b4 <_printf_i+0x30>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	f043 0320 	orr.w	r3, r3, #32
 80167fe:	6023      	str	r3, [r4, #0]
 8016800:	e003      	b.n	801680a <_printf_i+0x86>
 8016802:	2975      	cmp	r1, #117	; 0x75
 8016804:	d017      	beq.n	8016836 <_printf_i+0xb2>
 8016806:	2978      	cmp	r1, #120	; 0x78
 8016808:	d1d4      	bne.n	80167b4 <_printf_i+0x30>
 801680a:	2378      	movs	r3, #120	; 0x78
 801680c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016810:	4864      	ldr	r0, [pc, #400]	; (80169a4 <_printf_i+0x220>)
 8016812:	e055      	b.n	80168c0 <_printf_i+0x13c>
 8016814:	6813      	ldr	r3, [r2, #0]
 8016816:	1d19      	adds	r1, r3, #4
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	6011      	str	r1, [r2, #0]
 801681c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016824:	2301      	movs	r3, #1
 8016826:	e08c      	b.n	8016942 <_printf_i+0x1be>
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	6011      	str	r1, [r2, #0]
 801682c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016830:	bf18      	it	ne
 8016832:	b21b      	sxthne	r3, r3
 8016834:	e7cf      	b.n	80167d6 <_printf_i+0x52>
 8016836:	6813      	ldr	r3, [r2, #0]
 8016838:	6825      	ldr	r5, [r4, #0]
 801683a:	1d18      	adds	r0, r3, #4
 801683c:	6010      	str	r0, [r2, #0]
 801683e:	0628      	lsls	r0, r5, #24
 8016840:	d501      	bpl.n	8016846 <_printf_i+0xc2>
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	e002      	b.n	801684c <_printf_i+0xc8>
 8016846:	0668      	lsls	r0, r5, #25
 8016848:	d5fb      	bpl.n	8016842 <_printf_i+0xbe>
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	4854      	ldr	r0, [pc, #336]	; (80169a0 <_printf_i+0x21c>)
 801684e:	296f      	cmp	r1, #111	; 0x6f
 8016850:	bf14      	ite	ne
 8016852:	220a      	movne	r2, #10
 8016854:	2208      	moveq	r2, #8
 8016856:	2100      	movs	r1, #0
 8016858:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801685c:	6865      	ldr	r5, [r4, #4]
 801685e:	60a5      	str	r5, [r4, #8]
 8016860:	2d00      	cmp	r5, #0
 8016862:	f2c0 8095 	blt.w	8016990 <_printf_i+0x20c>
 8016866:	6821      	ldr	r1, [r4, #0]
 8016868:	f021 0104 	bic.w	r1, r1, #4
 801686c:	6021      	str	r1, [r4, #0]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d13d      	bne.n	80168ee <_printf_i+0x16a>
 8016872:	2d00      	cmp	r5, #0
 8016874:	f040 808e 	bne.w	8016994 <_printf_i+0x210>
 8016878:	4665      	mov	r5, ip
 801687a:	2a08      	cmp	r2, #8
 801687c:	d10b      	bne.n	8016896 <_printf_i+0x112>
 801687e:	6823      	ldr	r3, [r4, #0]
 8016880:	07db      	lsls	r3, r3, #31
 8016882:	d508      	bpl.n	8016896 <_printf_i+0x112>
 8016884:	6923      	ldr	r3, [r4, #16]
 8016886:	6862      	ldr	r2, [r4, #4]
 8016888:	429a      	cmp	r2, r3
 801688a:	bfde      	ittt	le
 801688c:	2330      	movle	r3, #48	; 0x30
 801688e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016896:	ebac 0305 	sub.w	r3, ip, r5
 801689a:	6123      	str	r3, [r4, #16]
 801689c:	f8cd 8000 	str.w	r8, [sp]
 80168a0:	463b      	mov	r3, r7
 80168a2:	aa03      	add	r2, sp, #12
 80168a4:	4621      	mov	r1, r4
 80168a6:	4630      	mov	r0, r6
 80168a8:	f7ff fef6 	bl	8016698 <_printf_common>
 80168ac:	3001      	adds	r0, #1
 80168ae:	d14d      	bne.n	801694c <_printf_i+0x1c8>
 80168b0:	f04f 30ff 	mov.w	r0, #4294967295
 80168b4:	b005      	add	sp, #20
 80168b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168ba:	4839      	ldr	r0, [pc, #228]	; (80169a0 <_printf_i+0x21c>)
 80168bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80168c0:	6813      	ldr	r3, [r2, #0]
 80168c2:	6821      	ldr	r1, [r4, #0]
 80168c4:	1d1d      	adds	r5, r3, #4
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	6015      	str	r5, [r2, #0]
 80168ca:	060a      	lsls	r2, r1, #24
 80168cc:	d50b      	bpl.n	80168e6 <_printf_i+0x162>
 80168ce:	07ca      	lsls	r2, r1, #31
 80168d0:	bf44      	itt	mi
 80168d2:	f041 0120 	orrmi.w	r1, r1, #32
 80168d6:	6021      	strmi	r1, [r4, #0]
 80168d8:	b91b      	cbnz	r3, 80168e2 <_printf_i+0x15e>
 80168da:	6822      	ldr	r2, [r4, #0]
 80168dc:	f022 0220 	bic.w	r2, r2, #32
 80168e0:	6022      	str	r2, [r4, #0]
 80168e2:	2210      	movs	r2, #16
 80168e4:	e7b7      	b.n	8016856 <_printf_i+0xd2>
 80168e6:	064d      	lsls	r5, r1, #25
 80168e8:	bf48      	it	mi
 80168ea:	b29b      	uxthmi	r3, r3
 80168ec:	e7ef      	b.n	80168ce <_printf_i+0x14a>
 80168ee:	4665      	mov	r5, ip
 80168f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80168f4:	fb02 3311 	mls	r3, r2, r1, r3
 80168f8:	5cc3      	ldrb	r3, [r0, r3]
 80168fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80168fe:	460b      	mov	r3, r1
 8016900:	2900      	cmp	r1, #0
 8016902:	d1f5      	bne.n	80168f0 <_printf_i+0x16c>
 8016904:	e7b9      	b.n	801687a <_printf_i+0xf6>
 8016906:	6813      	ldr	r3, [r2, #0]
 8016908:	6825      	ldr	r5, [r4, #0]
 801690a:	6961      	ldr	r1, [r4, #20]
 801690c:	1d18      	adds	r0, r3, #4
 801690e:	6010      	str	r0, [r2, #0]
 8016910:	0628      	lsls	r0, r5, #24
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	d501      	bpl.n	801691a <_printf_i+0x196>
 8016916:	6019      	str	r1, [r3, #0]
 8016918:	e002      	b.n	8016920 <_printf_i+0x19c>
 801691a:	066a      	lsls	r2, r5, #25
 801691c:	d5fb      	bpl.n	8016916 <_printf_i+0x192>
 801691e:	8019      	strh	r1, [r3, #0]
 8016920:	2300      	movs	r3, #0
 8016922:	6123      	str	r3, [r4, #16]
 8016924:	4665      	mov	r5, ip
 8016926:	e7b9      	b.n	801689c <_printf_i+0x118>
 8016928:	6813      	ldr	r3, [r2, #0]
 801692a:	1d19      	adds	r1, r3, #4
 801692c:	6011      	str	r1, [r2, #0]
 801692e:	681d      	ldr	r5, [r3, #0]
 8016930:	6862      	ldr	r2, [r4, #4]
 8016932:	2100      	movs	r1, #0
 8016934:	4628      	mov	r0, r5
 8016936:	f7f1 fb8b 	bl	8008050 <memchr>
 801693a:	b108      	cbz	r0, 8016940 <_printf_i+0x1bc>
 801693c:	1b40      	subs	r0, r0, r5
 801693e:	6060      	str	r0, [r4, #4]
 8016940:	6863      	ldr	r3, [r4, #4]
 8016942:	6123      	str	r3, [r4, #16]
 8016944:	2300      	movs	r3, #0
 8016946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801694a:	e7a7      	b.n	801689c <_printf_i+0x118>
 801694c:	6923      	ldr	r3, [r4, #16]
 801694e:	462a      	mov	r2, r5
 8016950:	4639      	mov	r1, r7
 8016952:	4630      	mov	r0, r6
 8016954:	47c0      	blx	r8
 8016956:	3001      	adds	r0, #1
 8016958:	d0aa      	beq.n	80168b0 <_printf_i+0x12c>
 801695a:	6823      	ldr	r3, [r4, #0]
 801695c:	079b      	lsls	r3, r3, #30
 801695e:	d413      	bmi.n	8016988 <_printf_i+0x204>
 8016960:	68e0      	ldr	r0, [r4, #12]
 8016962:	9b03      	ldr	r3, [sp, #12]
 8016964:	4298      	cmp	r0, r3
 8016966:	bfb8      	it	lt
 8016968:	4618      	movlt	r0, r3
 801696a:	e7a3      	b.n	80168b4 <_printf_i+0x130>
 801696c:	2301      	movs	r3, #1
 801696e:	464a      	mov	r2, r9
 8016970:	4639      	mov	r1, r7
 8016972:	4630      	mov	r0, r6
 8016974:	47c0      	blx	r8
 8016976:	3001      	adds	r0, #1
 8016978:	d09a      	beq.n	80168b0 <_printf_i+0x12c>
 801697a:	3501      	adds	r5, #1
 801697c:	68e3      	ldr	r3, [r4, #12]
 801697e:	9a03      	ldr	r2, [sp, #12]
 8016980:	1a9b      	subs	r3, r3, r2
 8016982:	42ab      	cmp	r3, r5
 8016984:	dcf2      	bgt.n	801696c <_printf_i+0x1e8>
 8016986:	e7eb      	b.n	8016960 <_printf_i+0x1dc>
 8016988:	2500      	movs	r5, #0
 801698a:	f104 0919 	add.w	r9, r4, #25
 801698e:	e7f5      	b.n	801697c <_printf_i+0x1f8>
 8016990:	2b00      	cmp	r3, #0
 8016992:	d1ac      	bne.n	80168ee <_printf_i+0x16a>
 8016994:	7803      	ldrb	r3, [r0, #0]
 8016996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801699a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801699e:	e76c      	b.n	801687a <_printf_i+0xf6>
 80169a0:	080189ae 	.word	0x080189ae
 80169a4:	080189bf 	.word	0x080189bf

080169a8 <iprintf>:
 80169a8:	b40f      	push	{r0, r1, r2, r3}
 80169aa:	4b0a      	ldr	r3, [pc, #40]	; (80169d4 <iprintf+0x2c>)
 80169ac:	b513      	push	{r0, r1, r4, lr}
 80169ae:	681c      	ldr	r4, [r3, #0]
 80169b0:	b124      	cbz	r4, 80169bc <iprintf+0x14>
 80169b2:	69a3      	ldr	r3, [r4, #24]
 80169b4:	b913      	cbnz	r3, 80169bc <iprintf+0x14>
 80169b6:	4620      	mov	r0, r4
 80169b8:	f001 f866 	bl	8017a88 <__sinit>
 80169bc:	ab05      	add	r3, sp, #20
 80169be:	9a04      	ldr	r2, [sp, #16]
 80169c0:	68a1      	ldr	r1, [r4, #8]
 80169c2:	9301      	str	r3, [sp, #4]
 80169c4:	4620      	mov	r0, r4
 80169c6:	f001 fd1f 	bl	8018408 <_vfiprintf_r>
 80169ca:	b002      	add	sp, #8
 80169cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169d0:	b004      	add	sp, #16
 80169d2:	4770      	bx	lr
 80169d4:	2000008c 	.word	0x2000008c

080169d8 <_puts_r>:
 80169d8:	b570      	push	{r4, r5, r6, lr}
 80169da:	460e      	mov	r6, r1
 80169dc:	4605      	mov	r5, r0
 80169de:	b118      	cbz	r0, 80169e8 <_puts_r+0x10>
 80169e0:	6983      	ldr	r3, [r0, #24]
 80169e2:	b90b      	cbnz	r3, 80169e8 <_puts_r+0x10>
 80169e4:	f001 f850 	bl	8017a88 <__sinit>
 80169e8:	69ab      	ldr	r3, [r5, #24]
 80169ea:	68ac      	ldr	r4, [r5, #8]
 80169ec:	b913      	cbnz	r3, 80169f4 <_puts_r+0x1c>
 80169ee:	4628      	mov	r0, r5
 80169f0:	f001 f84a 	bl	8017a88 <__sinit>
 80169f4:	4b23      	ldr	r3, [pc, #140]	; (8016a84 <_puts_r+0xac>)
 80169f6:	429c      	cmp	r4, r3
 80169f8:	d117      	bne.n	8016a2a <_puts_r+0x52>
 80169fa:	686c      	ldr	r4, [r5, #4]
 80169fc:	89a3      	ldrh	r3, [r4, #12]
 80169fe:	071b      	lsls	r3, r3, #28
 8016a00:	d51d      	bpl.n	8016a3e <_puts_r+0x66>
 8016a02:	6923      	ldr	r3, [r4, #16]
 8016a04:	b1db      	cbz	r3, 8016a3e <_puts_r+0x66>
 8016a06:	3e01      	subs	r6, #1
 8016a08:	68a3      	ldr	r3, [r4, #8]
 8016a0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a0e:	3b01      	subs	r3, #1
 8016a10:	60a3      	str	r3, [r4, #8]
 8016a12:	b9e9      	cbnz	r1, 8016a50 <_puts_r+0x78>
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	da2e      	bge.n	8016a76 <_puts_r+0x9e>
 8016a18:	4622      	mov	r2, r4
 8016a1a:	210a      	movs	r1, #10
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	f000 f83f 	bl	8016aa0 <__swbuf_r>
 8016a22:	3001      	adds	r0, #1
 8016a24:	d011      	beq.n	8016a4a <_puts_r+0x72>
 8016a26:	200a      	movs	r0, #10
 8016a28:	e011      	b.n	8016a4e <_puts_r+0x76>
 8016a2a:	4b17      	ldr	r3, [pc, #92]	; (8016a88 <_puts_r+0xb0>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	d101      	bne.n	8016a34 <_puts_r+0x5c>
 8016a30:	68ac      	ldr	r4, [r5, #8]
 8016a32:	e7e3      	b.n	80169fc <_puts_r+0x24>
 8016a34:	4b15      	ldr	r3, [pc, #84]	; (8016a8c <_puts_r+0xb4>)
 8016a36:	429c      	cmp	r4, r3
 8016a38:	bf08      	it	eq
 8016a3a:	68ec      	ldreq	r4, [r5, #12]
 8016a3c:	e7de      	b.n	80169fc <_puts_r+0x24>
 8016a3e:	4621      	mov	r1, r4
 8016a40:	4628      	mov	r0, r5
 8016a42:	f000 f87f 	bl	8016b44 <__swsetup_r>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d0dd      	beq.n	8016a06 <_puts_r+0x2e>
 8016a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	da04      	bge.n	8016a5e <_puts_r+0x86>
 8016a54:	69a2      	ldr	r2, [r4, #24]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	dc06      	bgt.n	8016a68 <_puts_r+0x90>
 8016a5a:	290a      	cmp	r1, #10
 8016a5c:	d004      	beq.n	8016a68 <_puts_r+0x90>
 8016a5e:	6823      	ldr	r3, [r4, #0]
 8016a60:	1c5a      	adds	r2, r3, #1
 8016a62:	6022      	str	r2, [r4, #0]
 8016a64:	7019      	strb	r1, [r3, #0]
 8016a66:	e7cf      	b.n	8016a08 <_puts_r+0x30>
 8016a68:	4622      	mov	r2, r4
 8016a6a:	4628      	mov	r0, r5
 8016a6c:	f000 f818 	bl	8016aa0 <__swbuf_r>
 8016a70:	3001      	adds	r0, #1
 8016a72:	d1c9      	bne.n	8016a08 <_puts_r+0x30>
 8016a74:	e7e9      	b.n	8016a4a <_puts_r+0x72>
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	200a      	movs	r0, #10
 8016a7a:	1c5a      	adds	r2, r3, #1
 8016a7c:	6022      	str	r2, [r4, #0]
 8016a7e:	7018      	strb	r0, [r3, #0]
 8016a80:	e7e5      	b.n	8016a4e <_puts_r+0x76>
 8016a82:	bf00      	nop
 8016a84:	08018a00 	.word	0x08018a00
 8016a88:	08018a20 	.word	0x08018a20
 8016a8c:	080189e0 	.word	0x080189e0

08016a90 <puts>:
 8016a90:	4b02      	ldr	r3, [pc, #8]	; (8016a9c <puts+0xc>)
 8016a92:	4601      	mov	r1, r0
 8016a94:	6818      	ldr	r0, [r3, #0]
 8016a96:	f7ff bf9f 	b.w	80169d8 <_puts_r>
 8016a9a:	bf00      	nop
 8016a9c:	2000008c 	.word	0x2000008c

08016aa0 <__swbuf_r>:
 8016aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aa2:	460e      	mov	r6, r1
 8016aa4:	4614      	mov	r4, r2
 8016aa6:	4605      	mov	r5, r0
 8016aa8:	b118      	cbz	r0, 8016ab2 <__swbuf_r+0x12>
 8016aaa:	6983      	ldr	r3, [r0, #24]
 8016aac:	b90b      	cbnz	r3, 8016ab2 <__swbuf_r+0x12>
 8016aae:	f000 ffeb 	bl	8017a88 <__sinit>
 8016ab2:	4b21      	ldr	r3, [pc, #132]	; (8016b38 <__swbuf_r+0x98>)
 8016ab4:	429c      	cmp	r4, r3
 8016ab6:	d12a      	bne.n	8016b0e <__swbuf_r+0x6e>
 8016ab8:	686c      	ldr	r4, [r5, #4]
 8016aba:	69a3      	ldr	r3, [r4, #24]
 8016abc:	60a3      	str	r3, [r4, #8]
 8016abe:	89a3      	ldrh	r3, [r4, #12]
 8016ac0:	071a      	lsls	r2, r3, #28
 8016ac2:	d52e      	bpl.n	8016b22 <__swbuf_r+0x82>
 8016ac4:	6923      	ldr	r3, [r4, #16]
 8016ac6:	b363      	cbz	r3, 8016b22 <__swbuf_r+0x82>
 8016ac8:	6923      	ldr	r3, [r4, #16]
 8016aca:	6820      	ldr	r0, [r4, #0]
 8016acc:	1ac0      	subs	r0, r0, r3
 8016ace:	6963      	ldr	r3, [r4, #20]
 8016ad0:	b2f6      	uxtb	r6, r6
 8016ad2:	4283      	cmp	r3, r0
 8016ad4:	4637      	mov	r7, r6
 8016ad6:	dc04      	bgt.n	8016ae2 <__swbuf_r+0x42>
 8016ad8:	4621      	mov	r1, r4
 8016ada:	4628      	mov	r0, r5
 8016adc:	f000 ff6a 	bl	80179b4 <_fflush_r>
 8016ae0:	bb28      	cbnz	r0, 8016b2e <__swbuf_r+0x8e>
 8016ae2:	68a3      	ldr	r3, [r4, #8]
 8016ae4:	3b01      	subs	r3, #1
 8016ae6:	60a3      	str	r3, [r4, #8]
 8016ae8:	6823      	ldr	r3, [r4, #0]
 8016aea:	1c5a      	adds	r2, r3, #1
 8016aec:	6022      	str	r2, [r4, #0]
 8016aee:	701e      	strb	r6, [r3, #0]
 8016af0:	6963      	ldr	r3, [r4, #20]
 8016af2:	3001      	adds	r0, #1
 8016af4:	4283      	cmp	r3, r0
 8016af6:	d004      	beq.n	8016b02 <__swbuf_r+0x62>
 8016af8:	89a3      	ldrh	r3, [r4, #12]
 8016afa:	07db      	lsls	r3, r3, #31
 8016afc:	d519      	bpl.n	8016b32 <__swbuf_r+0x92>
 8016afe:	2e0a      	cmp	r6, #10
 8016b00:	d117      	bne.n	8016b32 <__swbuf_r+0x92>
 8016b02:	4621      	mov	r1, r4
 8016b04:	4628      	mov	r0, r5
 8016b06:	f000 ff55 	bl	80179b4 <_fflush_r>
 8016b0a:	b190      	cbz	r0, 8016b32 <__swbuf_r+0x92>
 8016b0c:	e00f      	b.n	8016b2e <__swbuf_r+0x8e>
 8016b0e:	4b0b      	ldr	r3, [pc, #44]	; (8016b3c <__swbuf_r+0x9c>)
 8016b10:	429c      	cmp	r4, r3
 8016b12:	d101      	bne.n	8016b18 <__swbuf_r+0x78>
 8016b14:	68ac      	ldr	r4, [r5, #8]
 8016b16:	e7d0      	b.n	8016aba <__swbuf_r+0x1a>
 8016b18:	4b09      	ldr	r3, [pc, #36]	; (8016b40 <__swbuf_r+0xa0>)
 8016b1a:	429c      	cmp	r4, r3
 8016b1c:	bf08      	it	eq
 8016b1e:	68ec      	ldreq	r4, [r5, #12]
 8016b20:	e7cb      	b.n	8016aba <__swbuf_r+0x1a>
 8016b22:	4621      	mov	r1, r4
 8016b24:	4628      	mov	r0, r5
 8016b26:	f000 f80d 	bl	8016b44 <__swsetup_r>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	d0cc      	beq.n	8016ac8 <__swbuf_r+0x28>
 8016b2e:	f04f 37ff 	mov.w	r7, #4294967295
 8016b32:	4638      	mov	r0, r7
 8016b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b36:	bf00      	nop
 8016b38:	08018a00 	.word	0x08018a00
 8016b3c:	08018a20 	.word	0x08018a20
 8016b40:	080189e0 	.word	0x080189e0

08016b44 <__swsetup_r>:
 8016b44:	4b32      	ldr	r3, [pc, #200]	; (8016c10 <__swsetup_r+0xcc>)
 8016b46:	b570      	push	{r4, r5, r6, lr}
 8016b48:	681d      	ldr	r5, [r3, #0]
 8016b4a:	4606      	mov	r6, r0
 8016b4c:	460c      	mov	r4, r1
 8016b4e:	b125      	cbz	r5, 8016b5a <__swsetup_r+0x16>
 8016b50:	69ab      	ldr	r3, [r5, #24]
 8016b52:	b913      	cbnz	r3, 8016b5a <__swsetup_r+0x16>
 8016b54:	4628      	mov	r0, r5
 8016b56:	f000 ff97 	bl	8017a88 <__sinit>
 8016b5a:	4b2e      	ldr	r3, [pc, #184]	; (8016c14 <__swsetup_r+0xd0>)
 8016b5c:	429c      	cmp	r4, r3
 8016b5e:	d10f      	bne.n	8016b80 <__swsetup_r+0x3c>
 8016b60:	686c      	ldr	r4, [r5, #4]
 8016b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	0715      	lsls	r5, r2, #28
 8016b6a:	d42c      	bmi.n	8016bc6 <__swsetup_r+0x82>
 8016b6c:	06d0      	lsls	r0, r2, #27
 8016b6e:	d411      	bmi.n	8016b94 <__swsetup_r+0x50>
 8016b70:	2209      	movs	r2, #9
 8016b72:	6032      	str	r2, [r6, #0]
 8016b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b78:	81a3      	strh	r3, [r4, #12]
 8016b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b7e:	e03e      	b.n	8016bfe <__swsetup_r+0xba>
 8016b80:	4b25      	ldr	r3, [pc, #148]	; (8016c18 <__swsetup_r+0xd4>)
 8016b82:	429c      	cmp	r4, r3
 8016b84:	d101      	bne.n	8016b8a <__swsetup_r+0x46>
 8016b86:	68ac      	ldr	r4, [r5, #8]
 8016b88:	e7eb      	b.n	8016b62 <__swsetup_r+0x1e>
 8016b8a:	4b24      	ldr	r3, [pc, #144]	; (8016c1c <__swsetup_r+0xd8>)
 8016b8c:	429c      	cmp	r4, r3
 8016b8e:	bf08      	it	eq
 8016b90:	68ec      	ldreq	r4, [r5, #12]
 8016b92:	e7e6      	b.n	8016b62 <__swsetup_r+0x1e>
 8016b94:	0751      	lsls	r1, r2, #29
 8016b96:	d512      	bpl.n	8016bbe <__swsetup_r+0x7a>
 8016b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b9a:	b141      	cbz	r1, 8016bae <__swsetup_r+0x6a>
 8016b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ba0:	4299      	cmp	r1, r3
 8016ba2:	d002      	beq.n	8016baa <__swsetup_r+0x66>
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f001 fb5d 	bl	8018264 <_free_r>
 8016baa:	2300      	movs	r3, #0
 8016bac:	6363      	str	r3, [r4, #52]	; 0x34
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016bb4:	81a3      	strh	r3, [r4, #12]
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	6063      	str	r3, [r4, #4]
 8016bba:	6923      	ldr	r3, [r4, #16]
 8016bbc:	6023      	str	r3, [r4, #0]
 8016bbe:	89a3      	ldrh	r3, [r4, #12]
 8016bc0:	f043 0308 	orr.w	r3, r3, #8
 8016bc4:	81a3      	strh	r3, [r4, #12]
 8016bc6:	6923      	ldr	r3, [r4, #16]
 8016bc8:	b94b      	cbnz	r3, 8016bde <__swsetup_r+0x9a>
 8016bca:	89a3      	ldrh	r3, [r4, #12]
 8016bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bd4:	d003      	beq.n	8016bde <__swsetup_r+0x9a>
 8016bd6:	4621      	mov	r1, r4
 8016bd8:	4630      	mov	r0, r6
 8016bda:	f001 f811 	bl	8017c00 <__smakebuf_r>
 8016bde:	89a2      	ldrh	r2, [r4, #12]
 8016be0:	f012 0301 	ands.w	r3, r2, #1
 8016be4:	d00c      	beq.n	8016c00 <__swsetup_r+0xbc>
 8016be6:	2300      	movs	r3, #0
 8016be8:	60a3      	str	r3, [r4, #8]
 8016bea:	6963      	ldr	r3, [r4, #20]
 8016bec:	425b      	negs	r3, r3
 8016bee:	61a3      	str	r3, [r4, #24]
 8016bf0:	6923      	ldr	r3, [r4, #16]
 8016bf2:	b953      	cbnz	r3, 8016c0a <__swsetup_r+0xc6>
 8016bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bf8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016bfc:	d1ba      	bne.n	8016b74 <__swsetup_r+0x30>
 8016bfe:	bd70      	pop	{r4, r5, r6, pc}
 8016c00:	0792      	lsls	r2, r2, #30
 8016c02:	bf58      	it	pl
 8016c04:	6963      	ldrpl	r3, [r4, #20]
 8016c06:	60a3      	str	r3, [r4, #8]
 8016c08:	e7f2      	b.n	8016bf0 <__swsetup_r+0xac>
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	e7f7      	b.n	8016bfe <__swsetup_r+0xba>
 8016c0e:	bf00      	nop
 8016c10:	2000008c 	.word	0x2000008c
 8016c14:	08018a00 	.word	0x08018a00
 8016c18:	08018a20 	.word	0x08018a20
 8016c1c:	080189e0 	.word	0x080189e0

08016c20 <quorem>:
 8016c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c24:	6903      	ldr	r3, [r0, #16]
 8016c26:	690c      	ldr	r4, [r1, #16]
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	4680      	mov	r8, r0
 8016c2c:	f2c0 8082 	blt.w	8016d34 <quorem+0x114>
 8016c30:	3c01      	subs	r4, #1
 8016c32:	f101 0714 	add.w	r7, r1, #20
 8016c36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016c3a:	f100 0614 	add.w	r6, r0, #20
 8016c3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016c42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016c46:	eb06 030c 	add.w	r3, r6, ip
 8016c4a:	3501      	adds	r5, #1
 8016c4c:	eb07 090c 	add.w	r9, r7, ip
 8016c50:	9301      	str	r3, [sp, #4]
 8016c52:	fbb0 f5f5 	udiv	r5, r0, r5
 8016c56:	b395      	cbz	r5, 8016cbe <quorem+0x9e>
 8016c58:	f04f 0a00 	mov.w	sl, #0
 8016c5c:	4638      	mov	r0, r7
 8016c5e:	46b6      	mov	lr, r6
 8016c60:	46d3      	mov	fp, sl
 8016c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c66:	b293      	uxth	r3, r2
 8016c68:	fb05 a303 	mla	r3, r5, r3, sl
 8016c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	ebab 0303 	sub.w	r3, fp, r3
 8016c76:	0c12      	lsrs	r2, r2, #16
 8016c78:	f8de b000 	ldr.w	fp, [lr]
 8016c7c:	fb05 a202 	mla	r2, r5, r2, sl
 8016c80:	fa13 f38b 	uxtah	r3, r3, fp
 8016c84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016c88:	fa1f fb82 	uxth.w	fp, r2
 8016c8c:	f8de 2000 	ldr.w	r2, [lr]
 8016c90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c9e:	4581      	cmp	r9, r0
 8016ca0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016ca4:	f84e 3b04 	str.w	r3, [lr], #4
 8016ca8:	d2db      	bcs.n	8016c62 <quorem+0x42>
 8016caa:	f856 300c 	ldr.w	r3, [r6, ip]
 8016cae:	b933      	cbnz	r3, 8016cbe <quorem+0x9e>
 8016cb0:	9b01      	ldr	r3, [sp, #4]
 8016cb2:	3b04      	subs	r3, #4
 8016cb4:	429e      	cmp	r6, r3
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	d330      	bcc.n	8016d1c <quorem+0xfc>
 8016cba:	f8c8 4010 	str.w	r4, [r8, #16]
 8016cbe:	4640      	mov	r0, r8
 8016cc0:	f001 f9fc 	bl	80180bc <__mcmp>
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	db25      	blt.n	8016d14 <quorem+0xf4>
 8016cc8:	3501      	adds	r5, #1
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f04f 0c00 	mov.w	ip, #0
 8016cd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8016cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8016cd8:	b293      	uxth	r3, r2
 8016cda:	ebac 0303 	sub.w	r3, ip, r3
 8016cde:	0c12      	lsrs	r2, r2, #16
 8016ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8016ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cf2:	45b9      	cmp	r9, r7
 8016cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016cf8:	f840 3b04 	str.w	r3, [r0], #4
 8016cfc:	d2e8      	bcs.n	8016cd0 <quorem+0xb0>
 8016cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016d06:	b92a      	cbnz	r2, 8016d14 <quorem+0xf4>
 8016d08:	3b04      	subs	r3, #4
 8016d0a:	429e      	cmp	r6, r3
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	d30b      	bcc.n	8016d28 <quorem+0x108>
 8016d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8016d14:	4628      	mov	r0, r5
 8016d16:	b003      	add	sp, #12
 8016d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d1c:	6812      	ldr	r2, [r2, #0]
 8016d1e:	3b04      	subs	r3, #4
 8016d20:	2a00      	cmp	r2, #0
 8016d22:	d1ca      	bne.n	8016cba <quorem+0x9a>
 8016d24:	3c01      	subs	r4, #1
 8016d26:	e7c5      	b.n	8016cb4 <quorem+0x94>
 8016d28:	6812      	ldr	r2, [r2, #0]
 8016d2a:	3b04      	subs	r3, #4
 8016d2c:	2a00      	cmp	r2, #0
 8016d2e:	d1ef      	bne.n	8016d10 <quorem+0xf0>
 8016d30:	3c01      	subs	r4, #1
 8016d32:	e7ea      	b.n	8016d0a <quorem+0xea>
 8016d34:	2000      	movs	r0, #0
 8016d36:	e7ee      	b.n	8016d16 <quorem+0xf6>

08016d38 <_dtoa_r>:
 8016d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3c:	ec57 6b10 	vmov	r6, r7, d0
 8016d40:	b097      	sub	sp, #92	; 0x5c
 8016d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d44:	9106      	str	r1, [sp, #24]
 8016d46:	4604      	mov	r4, r0
 8016d48:	920b      	str	r2, [sp, #44]	; 0x2c
 8016d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8016d4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d50:	e9cd 6700 	strd	r6, r7, [sp]
 8016d54:	b93d      	cbnz	r5, 8016d66 <_dtoa_r+0x2e>
 8016d56:	2010      	movs	r0, #16
 8016d58:	f000 ff92 	bl	8017c80 <malloc>
 8016d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8016d5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d62:	6005      	str	r5, [r0, #0]
 8016d64:	60c5      	str	r5, [r0, #12]
 8016d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d68:	6819      	ldr	r1, [r3, #0]
 8016d6a:	b151      	cbz	r1, 8016d82 <_dtoa_r+0x4a>
 8016d6c:	685a      	ldr	r2, [r3, #4]
 8016d6e:	604a      	str	r2, [r1, #4]
 8016d70:	2301      	movs	r3, #1
 8016d72:	4093      	lsls	r3, r2
 8016d74:	608b      	str	r3, [r1, #8]
 8016d76:	4620      	mov	r0, r4
 8016d78:	f000 ffbe 	bl	8017cf8 <_Bfree>
 8016d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d7e:	2200      	movs	r2, #0
 8016d80:	601a      	str	r2, [r3, #0]
 8016d82:	1e3b      	subs	r3, r7, #0
 8016d84:	bfbb      	ittet	lt
 8016d86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d8a:	9301      	strlt	r3, [sp, #4]
 8016d8c:	2300      	movge	r3, #0
 8016d8e:	2201      	movlt	r2, #1
 8016d90:	bfac      	ite	ge
 8016d92:	f8c8 3000 	strge.w	r3, [r8]
 8016d96:	f8c8 2000 	strlt.w	r2, [r8]
 8016d9a:	4baf      	ldr	r3, [pc, #700]	; (8017058 <_dtoa_r+0x320>)
 8016d9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016da0:	ea33 0308 	bics.w	r3, r3, r8
 8016da4:	d114      	bne.n	8016dd0 <_dtoa_r+0x98>
 8016da6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016dac:	6013      	str	r3, [r2, #0]
 8016dae:	9b00      	ldr	r3, [sp, #0]
 8016db0:	b923      	cbnz	r3, 8016dbc <_dtoa_r+0x84>
 8016db2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016db6:	2800      	cmp	r0, #0
 8016db8:	f000 8542 	beq.w	8017840 <_dtoa_r+0xb08>
 8016dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801706c <_dtoa_r+0x334>
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f000 8544 	beq.w	8017850 <_dtoa_r+0xb18>
 8016dc8:	f10b 0303 	add.w	r3, fp, #3
 8016dcc:	f000 bd3e 	b.w	801784c <_dtoa_r+0xb14>
 8016dd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	4630      	mov	r0, r6
 8016dda:	4639      	mov	r1, r7
 8016ddc:	f7f1 fdac 	bl	8008938 <__aeabi_dcmpeq>
 8016de0:	4681      	mov	r9, r0
 8016de2:	b168      	cbz	r0, 8016e00 <_dtoa_r+0xc8>
 8016de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016de6:	2301      	movs	r3, #1
 8016de8:	6013      	str	r3, [r2, #0]
 8016dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	f000 8524 	beq.w	801783a <_dtoa_r+0xb02>
 8016df2:	4b9a      	ldr	r3, [pc, #616]	; (801705c <_dtoa_r+0x324>)
 8016df4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016df6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016dfa:	6013      	str	r3, [r2, #0]
 8016dfc:	f000 bd28 	b.w	8017850 <_dtoa_r+0xb18>
 8016e00:	aa14      	add	r2, sp, #80	; 0x50
 8016e02:	a915      	add	r1, sp, #84	; 0x54
 8016e04:	ec47 6b10 	vmov	d0, r6, r7
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f001 f9ce 	bl	80181aa <__d2b>
 8016e0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016e12:	9004      	str	r0, [sp, #16]
 8016e14:	2d00      	cmp	r5, #0
 8016e16:	d07c      	beq.n	8016f12 <_dtoa_r+0x1da>
 8016e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016e20:	46b2      	mov	sl, r6
 8016e22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016e2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016e2e:	2200      	movs	r2, #0
 8016e30:	4b8b      	ldr	r3, [pc, #556]	; (8017060 <_dtoa_r+0x328>)
 8016e32:	4650      	mov	r0, sl
 8016e34:	4659      	mov	r1, fp
 8016e36:	f7f1 f95f 	bl	80080f8 <__aeabi_dsub>
 8016e3a:	a381      	add	r3, pc, #516	; (adr r3, 8017040 <_dtoa_r+0x308>)
 8016e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e40:	f7f1 fb12 	bl	8008468 <__aeabi_dmul>
 8016e44:	a380      	add	r3, pc, #512	; (adr r3, 8017048 <_dtoa_r+0x310>)
 8016e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4a:	f7f1 f957 	bl	80080fc <__adddf3>
 8016e4e:	4606      	mov	r6, r0
 8016e50:	4628      	mov	r0, r5
 8016e52:	460f      	mov	r7, r1
 8016e54:	f7f1 fa9e 	bl	8008394 <__aeabi_i2d>
 8016e58:	a37d      	add	r3, pc, #500	; (adr r3, 8017050 <_dtoa_r+0x318>)
 8016e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e5e:	f7f1 fb03 	bl	8008468 <__aeabi_dmul>
 8016e62:	4602      	mov	r2, r0
 8016e64:	460b      	mov	r3, r1
 8016e66:	4630      	mov	r0, r6
 8016e68:	4639      	mov	r1, r7
 8016e6a:	f7f1 f947 	bl	80080fc <__adddf3>
 8016e6e:	4606      	mov	r6, r0
 8016e70:	460f      	mov	r7, r1
 8016e72:	f7f1 fda9 	bl	80089c8 <__aeabi_d2iz>
 8016e76:	2200      	movs	r2, #0
 8016e78:	4682      	mov	sl, r0
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	4639      	mov	r1, r7
 8016e80:	f7f1 fd64 	bl	800894c <__aeabi_dcmplt>
 8016e84:	b148      	cbz	r0, 8016e9a <_dtoa_r+0x162>
 8016e86:	4650      	mov	r0, sl
 8016e88:	f7f1 fa84 	bl	8008394 <__aeabi_i2d>
 8016e8c:	4632      	mov	r2, r6
 8016e8e:	463b      	mov	r3, r7
 8016e90:	f7f1 fd52 	bl	8008938 <__aeabi_dcmpeq>
 8016e94:	b908      	cbnz	r0, 8016e9a <_dtoa_r+0x162>
 8016e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e9a:	f1ba 0f16 	cmp.w	sl, #22
 8016e9e:	d859      	bhi.n	8016f54 <_dtoa_r+0x21c>
 8016ea0:	4970      	ldr	r1, [pc, #448]	; (8017064 <_dtoa_r+0x32c>)
 8016ea2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016eae:	f7f1 fd6b 	bl	8008988 <__aeabi_dcmpgt>
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	d050      	beq.n	8016f58 <_dtoa_r+0x220>
 8016eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016eba:	2300      	movs	r3, #0
 8016ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ec0:	1b5d      	subs	r5, r3, r5
 8016ec2:	f1b5 0801 	subs.w	r8, r5, #1
 8016ec6:	bf49      	itett	mi
 8016ec8:	f1c5 0301 	rsbmi	r3, r5, #1
 8016ecc:	2300      	movpl	r3, #0
 8016ece:	9305      	strmi	r3, [sp, #20]
 8016ed0:	f04f 0800 	movmi.w	r8, #0
 8016ed4:	bf58      	it	pl
 8016ed6:	9305      	strpl	r3, [sp, #20]
 8016ed8:	f1ba 0f00 	cmp.w	sl, #0
 8016edc:	db3e      	blt.n	8016f5c <_dtoa_r+0x224>
 8016ede:	2300      	movs	r3, #0
 8016ee0:	44d0      	add	r8, sl
 8016ee2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016ee6:	9307      	str	r3, [sp, #28]
 8016ee8:	9b06      	ldr	r3, [sp, #24]
 8016eea:	2b09      	cmp	r3, #9
 8016eec:	f200 8090 	bhi.w	8017010 <_dtoa_r+0x2d8>
 8016ef0:	2b05      	cmp	r3, #5
 8016ef2:	bfc4      	itt	gt
 8016ef4:	3b04      	subgt	r3, #4
 8016ef6:	9306      	strgt	r3, [sp, #24]
 8016ef8:	9b06      	ldr	r3, [sp, #24]
 8016efa:	f1a3 0302 	sub.w	r3, r3, #2
 8016efe:	bfcc      	ite	gt
 8016f00:	2500      	movgt	r5, #0
 8016f02:	2501      	movle	r5, #1
 8016f04:	2b03      	cmp	r3, #3
 8016f06:	f200 808f 	bhi.w	8017028 <_dtoa_r+0x2f0>
 8016f0a:	e8df f003 	tbb	[pc, r3]
 8016f0e:	7f7d      	.short	0x7f7d
 8016f10:	7131      	.short	0x7131
 8016f12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016f16:	441d      	add	r5, r3
 8016f18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016f1c:	2820      	cmp	r0, #32
 8016f1e:	dd13      	ble.n	8016f48 <_dtoa_r+0x210>
 8016f20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016f24:	9b00      	ldr	r3, [sp, #0]
 8016f26:	fa08 f800 	lsl.w	r8, r8, r0
 8016f2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016f2e:	fa23 f000 	lsr.w	r0, r3, r0
 8016f32:	ea48 0000 	orr.w	r0, r8, r0
 8016f36:	f7f1 fa1d 	bl	8008374 <__aeabi_ui2d>
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	4682      	mov	sl, r0
 8016f3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016f42:	3d01      	subs	r5, #1
 8016f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f46:	e772      	b.n	8016e2e <_dtoa_r+0xf6>
 8016f48:	9b00      	ldr	r3, [sp, #0]
 8016f4a:	f1c0 0020 	rsb	r0, r0, #32
 8016f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8016f52:	e7f0      	b.n	8016f36 <_dtoa_r+0x1fe>
 8016f54:	2301      	movs	r3, #1
 8016f56:	e7b1      	b.n	8016ebc <_dtoa_r+0x184>
 8016f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f5a:	e7b0      	b.n	8016ebe <_dtoa_r+0x186>
 8016f5c:	9b05      	ldr	r3, [sp, #20]
 8016f5e:	eba3 030a 	sub.w	r3, r3, sl
 8016f62:	9305      	str	r3, [sp, #20]
 8016f64:	f1ca 0300 	rsb	r3, sl, #0
 8016f68:	9307      	str	r3, [sp, #28]
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8016f6e:	e7bb      	b.n	8016ee8 <_dtoa_r+0x1b0>
 8016f70:	2301      	movs	r3, #1
 8016f72:	930a      	str	r3, [sp, #40]	; 0x28
 8016f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	dd59      	ble.n	801702e <_dtoa_r+0x2f6>
 8016f7a:	9302      	str	r3, [sp, #8]
 8016f7c:	4699      	mov	r9, r3
 8016f7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016f80:	2200      	movs	r2, #0
 8016f82:	6072      	str	r2, [r6, #4]
 8016f84:	2204      	movs	r2, #4
 8016f86:	f102 0014 	add.w	r0, r2, #20
 8016f8a:	4298      	cmp	r0, r3
 8016f8c:	6871      	ldr	r1, [r6, #4]
 8016f8e:	d953      	bls.n	8017038 <_dtoa_r+0x300>
 8016f90:	4620      	mov	r0, r4
 8016f92:	f000 fe7d 	bl	8017c90 <_Balloc>
 8016f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f98:	6030      	str	r0, [r6, #0]
 8016f9a:	f1b9 0f0e 	cmp.w	r9, #14
 8016f9e:	f8d3 b000 	ldr.w	fp, [r3]
 8016fa2:	f200 80e6 	bhi.w	8017172 <_dtoa_r+0x43a>
 8016fa6:	2d00      	cmp	r5, #0
 8016fa8:	f000 80e3 	beq.w	8017172 <_dtoa_r+0x43a>
 8016fac:	ed9d 7b00 	vldr	d7, [sp]
 8016fb0:	f1ba 0f00 	cmp.w	sl, #0
 8016fb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016fb8:	dd74      	ble.n	80170a4 <_dtoa_r+0x36c>
 8016fba:	4a2a      	ldr	r2, [pc, #168]	; (8017064 <_dtoa_r+0x32c>)
 8016fbc:	f00a 030f 	and.w	r3, sl, #15
 8016fc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016fc4:	ed93 7b00 	vldr	d7, [r3]
 8016fc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016fcc:	06f0      	lsls	r0, r6, #27
 8016fce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016fd2:	d565      	bpl.n	80170a0 <_dtoa_r+0x368>
 8016fd4:	4b24      	ldr	r3, [pc, #144]	; (8017068 <_dtoa_r+0x330>)
 8016fd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016fda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016fde:	f7f1 fb6d 	bl	80086bc <__aeabi_ddiv>
 8016fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8016fe6:	f006 060f 	and.w	r6, r6, #15
 8016fea:	2503      	movs	r5, #3
 8016fec:	4f1e      	ldr	r7, [pc, #120]	; (8017068 <_dtoa_r+0x330>)
 8016fee:	e04c      	b.n	801708a <_dtoa_r+0x352>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ff6:	4453      	add	r3, sl
 8016ff8:	f103 0901 	add.w	r9, r3, #1
 8016ffc:	9302      	str	r3, [sp, #8]
 8016ffe:	464b      	mov	r3, r9
 8017000:	2b01      	cmp	r3, #1
 8017002:	bfb8      	it	lt
 8017004:	2301      	movlt	r3, #1
 8017006:	e7ba      	b.n	8016f7e <_dtoa_r+0x246>
 8017008:	2300      	movs	r3, #0
 801700a:	e7b2      	b.n	8016f72 <_dtoa_r+0x23a>
 801700c:	2300      	movs	r3, #0
 801700e:	e7f0      	b.n	8016ff2 <_dtoa_r+0x2ba>
 8017010:	2501      	movs	r5, #1
 8017012:	2300      	movs	r3, #0
 8017014:	9306      	str	r3, [sp, #24]
 8017016:	950a      	str	r5, [sp, #40]	; 0x28
 8017018:	f04f 33ff 	mov.w	r3, #4294967295
 801701c:	9302      	str	r3, [sp, #8]
 801701e:	4699      	mov	r9, r3
 8017020:	2200      	movs	r2, #0
 8017022:	2312      	movs	r3, #18
 8017024:	920b      	str	r2, [sp, #44]	; 0x2c
 8017026:	e7aa      	b.n	8016f7e <_dtoa_r+0x246>
 8017028:	2301      	movs	r3, #1
 801702a:	930a      	str	r3, [sp, #40]	; 0x28
 801702c:	e7f4      	b.n	8017018 <_dtoa_r+0x2e0>
 801702e:	2301      	movs	r3, #1
 8017030:	9302      	str	r3, [sp, #8]
 8017032:	4699      	mov	r9, r3
 8017034:	461a      	mov	r2, r3
 8017036:	e7f5      	b.n	8017024 <_dtoa_r+0x2ec>
 8017038:	3101      	adds	r1, #1
 801703a:	6071      	str	r1, [r6, #4]
 801703c:	0052      	lsls	r2, r2, #1
 801703e:	e7a2      	b.n	8016f86 <_dtoa_r+0x24e>
 8017040:	636f4361 	.word	0x636f4361
 8017044:	3fd287a7 	.word	0x3fd287a7
 8017048:	8b60c8b3 	.word	0x8b60c8b3
 801704c:	3fc68a28 	.word	0x3fc68a28
 8017050:	509f79fb 	.word	0x509f79fb
 8017054:	3fd34413 	.word	0x3fd34413
 8017058:	7ff00000 	.word	0x7ff00000
 801705c:	080189ad 	.word	0x080189ad
 8017060:	3ff80000 	.word	0x3ff80000
 8017064:	08018a68 	.word	0x08018a68
 8017068:	08018a40 	.word	0x08018a40
 801706c:	080189d9 	.word	0x080189d9
 8017070:	07f1      	lsls	r1, r6, #31
 8017072:	d508      	bpl.n	8017086 <_dtoa_r+0x34e>
 8017074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801707c:	f7f1 f9f4 	bl	8008468 <__aeabi_dmul>
 8017080:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017084:	3501      	adds	r5, #1
 8017086:	1076      	asrs	r6, r6, #1
 8017088:	3708      	adds	r7, #8
 801708a:	2e00      	cmp	r6, #0
 801708c:	d1f0      	bne.n	8017070 <_dtoa_r+0x338>
 801708e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017096:	f7f1 fb11 	bl	80086bc <__aeabi_ddiv>
 801709a:	e9cd 0100 	strd	r0, r1, [sp]
 801709e:	e01a      	b.n	80170d6 <_dtoa_r+0x39e>
 80170a0:	2502      	movs	r5, #2
 80170a2:	e7a3      	b.n	8016fec <_dtoa_r+0x2b4>
 80170a4:	f000 80a0 	beq.w	80171e8 <_dtoa_r+0x4b0>
 80170a8:	f1ca 0600 	rsb	r6, sl, #0
 80170ac:	4b9f      	ldr	r3, [pc, #636]	; (801732c <_dtoa_r+0x5f4>)
 80170ae:	4fa0      	ldr	r7, [pc, #640]	; (8017330 <_dtoa_r+0x5f8>)
 80170b0:	f006 020f 	and.w	r2, r6, #15
 80170b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80170c0:	f7f1 f9d2 	bl	8008468 <__aeabi_dmul>
 80170c4:	e9cd 0100 	strd	r0, r1, [sp]
 80170c8:	1136      	asrs	r6, r6, #4
 80170ca:	2300      	movs	r3, #0
 80170cc:	2502      	movs	r5, #2
 80170ce:	2e00      	cmp	r6, #0
 80170d0:	d17f      	bne.n	80171d2 <_dtoa_r+0x49a>
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d1e1      	bne.n	801709a <_dtoa_r+0x362>
 80170d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f000 8087 	beq.w	80171ec <_dtoa_r+0x4b4>
 80170de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80170e2:	2200      	movs	r2, #0
 80170e4:	4b93      	ldr	r3, [pc, #588]	; (8017334 <_dtoa_r+0x5fc>)
 80170e6:	4630      	mov	r0, r6
 80170e8:	4639      	mov	r1, r7
 80170ea:	f7f1 fc2f 	bl	800894c <__aeabi_dcmplt>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d07c      	beq.n	80171ec <_dtoa_r+0x4b4>
 80170f2:	f1b9 0f00 	cmp.w	r9, #0
 80170f6:	d079      	beq.n	80171ec <_dtoa_r+0x4b4>
 80170f8:	9b02      	ldr	r3, [sp, #8]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	dd35      	ble.n	801716a <_dtoa_r+0x432>
 80170fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017102:	9308      	str	r3, [sp, #32]
 8017104:	4639      	mov	r1, r7
 8017106:	2200      	movs	r2, #0
 8017108:	4b8b      	ldr	r3, [pc, #556]	; (8017338 <_dtoa_r+0x600>)
 801710a:	4630      	mov	r0, r6
 801710c:	f7f1 f9ac 	bl	8008468 <__aeabi_dmul>
 8017110:	e9cd 0100 	strd	r0, r1, [sp]
 8017114:	9f02      	ldr	r7, [sp, #8]
 8017116:	3501      	adds	r5, #1
 8017118:	4628      	mov	r0, r5
 801711a:	f7f1 f93b 	bl	8008394 <__aeabi_i2d>
 801711e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017122:	f7f1 f9a1 	bl	8008468 <__aeabi_dmul>
 8017126:	2200      	movs	r2, #0
 8017128:	4b84      	ldr	r3, [pc, #528]	; (801733c <_dtoa_r+0x604>)
 801712a:	f7f0 ffe7 	bl	80080fc <__adddf3>
 801712e:	4605      	mov	r5, r0
 8017130:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017134:	2f00      	cmp	r7, #0
 8017136:	d15d      	bne.n	80171f4 <_dtoa_r+0x4bc>
 8017138:	2200      	movs	r2, #0
 801713a:	4b81      	ldr	r3, [pc, #516]	; (8017340 <_dtoa_r+0x608>)
 801713c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017140:	f7f0 ffda 	bl	80080f8 <__aeabi_dsub>
 8017144:	462a      	mov	r2, r5
 8017146:	4633      	mov	r3, r6
 8017148:	e9cd 0100 	strd	r0, r1, [sp]
 801714c:	f7f1 fc1c 	bl	8008988 <__aeabi_dcmpgt>
 8017150:	2800      	cmp	r0, #0
 8017152:	f040 8288 	bne.w	8017666 <_dtoa_r+0x92e>
 8017156:	462a      	mov	r2, r5
 8017158:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801715c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017160:	f7f1 fbf4 	bl	800894c <__aeabi_dcmplt>
 8017164:	2800      	cmp	r0, #0
 8017166:	f040 827c 	bne.w	8017662 <_dtoa_r+0x92a>
 801716a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801716e:	e9cd 2300 	strd	r2, r3, [sp]
 8017172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017174:	2b00      	cmp	r3, #0
 8017176:	f2c0 8150 	blt.w	801741a <_dtoa_r+0x6e2>
 801717a:	f1ba 0f0e 	cmp.w	sl, #14
 801717e:	f300 814c 	bgt.w	801741a <_dtoa_r+0x6e2>
 8017182:	4b6a      	ldr	r3, [pc, #424]	; (801732c <_dtoa_r+0x5f4>)
 8017184:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017188:	ed93 7b00 	vldr	d7, [r3]
 801718c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801718e:	2b00      	cmp	r3, #0
 8017190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017194:	f280 80d8 	bge.w	8017348 <_dtoa_r+0x610>
 8017198:	f1b9 0f00 	cmp.w	r9, #0
 801719c:	f300 80d4 	bgt.w	8017348 <_dtoa_r+0x610>
 80171a0:	f040 825e 	bne.w	8017660 <_dtoa_r+0x928>
 80171a4:	2200      	movs	r2, #0
 80171a6:	4b66      	ldr	r3, [pc, #408]	; (8017340 <_dtoa_r+0x608>)
 80171a8:	ec51 0b17 	vmov	r0, r1, d7
 80171ac:	f7f1 f95c 	bl	8008468 <__aeabi_dmul>
 80171b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171b4:	f7f1 fbde 	bl	8008974 <__aeabi_dcmpge>
 80171b8:	464f      	mov	r7, r9
 80171ba:	464e      	mov	r6, r9
 80171bc:	2800      	cmp	r0, #0
 80171be:	f040 8234 	bne.w	801762a <_dtoa_r+0x8f2>
 80171c2:	2331      	movs	r3, #49	; 0x31
 80171c4:	f10b 0501 	add.w	r5, fp, #1
 80171c8:	f88b 3000 	strb.w	r3, [fp]
 80171cc:	f10a 0a01 	add.w	sl, sl, #1
 80171d0:	e22f      	b.n	8017632 <_dtoa_r+0x8fa>
 80171d2:	07f2      	lsls	r2, r6, #31
 80171d4:	d505      	bpl.n	80171e2 <_dtoa_r+0x4aa>
 80171d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171da:	f7f1 f945 	bl	8008468 <__aeabi_dmul>
 80171de:	3501      	adds	r5, #1
 80171e0:	2301      	movs	r3, #1
 80171e2:	1076      	asrs	r6, r6, #1
 80171e4:	3708      	adds	r7, #8
 80171e6:	e772      	b.n	80170ce <_dtoa_r+0x396>
 80171e8:	2502      	movs	r5, #2
 80171ea:	e774      	b.n	80170d6 <_dtoa_r+0x39e>
 80171ec:	f8cd a020 	str.w	sl, [sp, #32]
 80171f0:	464f      	mov	r7, r9
 80171f2:	e791      	b.n	8017118 <_dtoa_r+0x3e0>
 80171f4:	4b4d      	ldr	r3, [pc, #308]	; (801732c <_dtoa_r+0x5f4>)
 80171f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80171fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017200:	2b00      	cmp	r3, #0
 8017202:	d047      	beq.n	8017294 <_dtoa_r+0x55c>
 8017204:	4602      	mov	r2, r0
 8017206:	460b      	mov	r3, r1
 8017208:	2000      	movs	r0, #0
 801720a:	494e      	ldr	r1, [pc, #312]	; (8017344 <_dtoa_r+0x60c>)
 801720c:	f7f1 fa56 	bl	80086bc <__aeabi_ddiv>
 8017210:	462a      	mov	r2, r5
 8017212:	4633      	mov	r3, r6
 8017214:	f7f0 ff70 	bl	80080f8 <__aeabi_dsub>
 8017218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801721c:	465d      	mov	r5, fp
 801721e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017222:	f7f1 fbd1 	bl	80089c8 <__aeabi_d2iz>
 8017226:	4606      	mov	r6, r0
 8017228:	f7f1 f8b4 	bl	8008394 <__aeabi_i2d>
 801722c:	4602      	mov	r2, r0
 801722e:	460b      	mov	r3, r1
 8017230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017234:	f7f0 ff60 	bl	80080f8 <__aeabi_dsub>
 8017238:	3630      	adds	r6, #48	; 0x30
 801723a:	f805 6b01 	strb.w	r6, [r5], #1
 801723e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017242:	e9cd 0100 	strd	r0, r1, [sp]
 8017246:	f7f1 fb81 	bl	800894c <__aeabi_dcmplt>
 801724a:	2800      	cmp	r0, #0
 801724c:	d163      	bne.n	8017316 <_dtoa_r+0x5de>
 801724e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017252:	2000      	movs	r0, #0
 8017254:	4937      	ldr	r1, [pc, #220]	; (8017334 <_dtoa_r+0x5fc>)
 8017256:	f7f0 ff4f 	bl	80080f8 <__aeabi_dsub>
 801725a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801725e:	f7f1 fb75 	bl	800894c <__aeabi_dcmplt>
 8017262:	2800      	cmp	r0, #0
 8017264:	f040 80b7 	bne.w	80173d6 <_dtoa_r+0x69e>
 8017268:	eba5 030b 	sub.w	r3, r5, fp
 801726c:	429f      	cmp	r7, r3
 801726e:	f77f af7c 	ble.w	801716a <_dtoa_r+0x432>
 8017272:	2200      	movs	r2, #0
 8017274:	4b30      	ldr	r3, [pc, #192]	; (8017338 <_dtoa_r+0x600>)
 8017276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801727a:	f7f1 f8f5 	bl	8008468 <__aeabi_dmul>
 801727e:	2200      	movs	r2, #0
 8017280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017284:	4b2c      	ldr	r3, [pc, #176]	; (8017338 <_dtoa_r+0x600>)
 8017286:	e9dd 0100 	ldrd	r0, r1, [sp]
 801728a:	f7f1 f8ed 	bl	8008468 <__aeabi_dmul>
 801728e:	e9cd 0100 	strd	r0, r1, [sp]
 8017292:	e7c4      	b.n	801721e <_dtoa_r+0x4e6>
 8017294:	462a      	mov	r2, r5
 8017296:	4633      	mov	r3, r6
 8017298:	f7f1 f8e6 	bl	8008468 <__aeabi_dmul>
 801729c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80172a0:	eb0b 0507 	add.w	r5, fp, r7
 80172a4:	465e      	mov	r6, fp
 80172a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172aa:	f7f1 fb8d 	bl	80089c8 <__aeabi_d2iz>
 80172ae:	4607      	mov	r7, r0
 80172b0:	f7f1 f870 	bl	8008394 <__aeabi_i2d>
 80172b4:	3730      	adds	r7, #48	; 0x30
 80172b6:	4602      	mov	r2, r0
 80172b8:	460b      	mov	r3, r1
 80172ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172be:	f7f0 ff1b 	bl	80080f8 <__aeabi_dsub>
 80172c2:	f806 7b01 	strb.w	r7, [r6], #1
 80172c6:	42ae      	cmp	r6, r5
 80172c8:	e9cd 0100 	strd	r0, r1, [sp]
 80172cc:	f04f 0200 	mov.w	r2, #0
 80172d0:	d126      	bne.n	8017320 <_dtoa_r+0x5e8>
 80172d2:	4b1c      	ldr	r3, [pc, #112]	; (8017344 <_dtoa_r+0x60c>)
 80172d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80172d8:	f7f0 ff10 	bl	80080fc <__adddf3>
 80172dc:	4602      	mov	r2, r0
 80172de:	460b      	mov	r3, r1
 80172e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172e4:	f7f1 fb50 	bl	8008988 <__aeabi_dcmpgt>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d174      	bne.n	80173d6 <_dtoa_r+0x69e>
 80172ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172f0:	2000      	movs	r0, #0
 80172f2:	4914      	ldr	r1, [pc, #80]	; (8017344 <_dtoa_r+0x60c>)
 80172f4:	f7f0 ff00 	bl	80080f8 <__aeabi_dsub>
 80172f8:	4602      	mov	r2, r0
 80172fa:	460b      	mov	r3, r1
 80172fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017300:	f7f1 fb24 	bl	800894c <__aeabi_dcmplt>
 8017304:	2800      	cmp	r0, #0
 8017306:	f43f af30 	beq.w	801716a <_dtoa_r+0x432>
 801730a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801730e:	2b30      	cmp	r3, #48	; 0x30
 8017310:	f105 32ff 	add.w	r2, r5, #4294967295
 8017314:	d002      	beq.n	801731c <_dtoa_r+0x5e4>
 8017316:	f8dd a020 	ldr.w	sl, [sp, #32]
 801731a:	e04a      	b.n	80173b2 <_dtoa_r+0x67a>
 801731c:	4615      	mov	r5, r2
 801731e:	e7f4      	b.n	801730a <_dtoa_r+0x5d2>
 8017320:	4b05      	ldr	r3, [pc, #20]	; (8017338 <_dtoa_r+0x600>)
 8017322:	f7f1 f8a1 	bl	8008468 <__aeabi_dmul>
 8017326:	e9cd 0100 	strd	r0, r1, [sp]
 801732a:	e7bc      	b.n	80172a6 <_dtoa_r+0x56e>
 801732c:	08018a68 	.word	0x08018a68
 8017330:	08018a40 	.word	0x08018a40
 8017334:	3ff00000 	.word	0x3ff00000
 8017338:	40240000 	.word	0x40240000
 801733c:	401c0000 	.word	0x401c0000
 8017340:	40140000 	.word	0x40140000
 8017344:	3fe00000 	.word	0x3fe00000
 8017348:	e9dd 6700 	ldrd	r6, r7, [sp]
 801734c:	465d      	mov	r5, fp
 801734e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017352:	4630      	mov	r0, r6
 8017354:	4639      	mov	r1, r7
 8017356:	f7f1 f9b1 	bl	80086bc <__aeabi_ddiv>
 801735a:	f7f1 fb35 	bl	80089c8 <__aeabi_d2iz>
 801735e:	4680      	mov	r8, r0
 8017360:	f7f1 f818 	bl	8008394 <__aeabi_i2d>
 8017364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017368:	f7f1 f87e 	bl	8008468 <__aeabi_dmul>
 801736c:	4602      	mov	r2, r0
 801736e:	460b      	mov	r3, r1
 8017370:	4630      	mov	r0, r6
 8017372:	4639      	mov	r1, r7
 8017374:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017378:	f7f0 febe 	bl	80080f8 <__aeabi_dsub>
 801737c:	f805 6b01 	strb.w	r6, [r5], #1
 8017380:	eba5 060b 	sub.w	r6, r5, fp
 8017384:	45b1      	cmp	r9, r6
 8017386:	4602      	mov	r2, r0
 8017388:	460b      	mov	r3, r1
 801738a:	d139      	bne.n	8017400 <_dtoa_r+0x6c8>
 801738c:	f7f0 feb6 	bl	80080fc <__adddf3>
 8017390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017394:	4606      	mov	r6, r0
 8017396:	460f      	mov	r7, r1
 8017398:	f7f1 faf6 	bl	8008988 <__aeabi_dcmpgt>
 801739c:	b9c8      	cbnz	r0, 80173d2 <_dtoa_r+0x69a>
 801739e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173a2:	4630      	mov	r0, r6
 80173a4:	4639      	mov	r1, r7
 80173a6:	f7f1 fac7 	bl	8008938 <__aeabi_dcmpeq>
 80173aa:	b110      	cbz	r0, 80173b2 <_dtoa_r+0x67a>
 80173ac:	f018 0f01 	tst.w	r8, #1
 80173b0:	d10f      	bne.n	80173d2 <_dtoa_r+0x69a>
 80173b2:	9904      	ldr	r1, [sp, #16]
 80173b4:	4620      	mov	r0, r4
 80173b6:	f000 fc9f 	bl	8017cf8 <_Bfree>
 80173ba:	2300      	movs	r3, #0
 80173bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80173be:	702b      	strb	r3, [r5, #0]
 80173c0:	f10a 0301 	add.w	r3, sl, #1
 80173c4:	6013      	str	r3, [r2, #0]
 80173c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	f000 8241 	beq.w	8017850 <_dtoa_r+0xb18>
 80173ce:	601d      	str	r5, [r3, #0]
 80173d0:	e23e      	b.n	8017850 <_dtoa_r+0xb18>
 80173d2:	f8cd a020 	str.w	sl, [sp, #32]
 80173d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80173da:	2a39      	cmp	r2, #57	; 0x39
 80173dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80173e0:	d108      	bne.n	80173f4 <_dtoa_r+0x6bc>
 80173e2:	459b      	cmp	fp, r3
 80173e4:	d10a      	bne.n	80173fc <_dtoa_r+0x6c4>
 80173e6:	9b08      	ldr	r3, [sp, #32]
 80173e8:	3301      	adds	r3, #1
 80173ea:	9308      	str	r3, [sp, #32]
 80173ec:	2330      	movs	r3, #48	; 0x30
 80173ee:	f88b 3000 	strb.w	r3, [fp]
 80173f2:	465b      	mov	r3, fp
 80173f4:	781a      	ldrb	r2, [r3, #0]
 80173f6:	3201      	adds	r2, #1
 80173f8:	701a      	strb	r2, [r3, #0]
 80173fa:	e78c      	b.n	8017316 <_dtoa_r+0x5de>
 80173fc:	461d      	mov	r5, r3
 80173fe:	e7ea      	b.n	80173d6 <_dtoa_r+0x69e>
 8017400:	2200      	movs	r2, #0
 8017402:	4b9b      	ldr	r3, [pc, #620]	; (8017670 <_dtoa_r+0x938>)
 8017404:	f7f1 f830 	bl	8008468 <__aeabi_dmul>
 8017408:	2200      	movs	r2, #0
 801740a:	2300      	movs	r3, #0
 801740c:	4606      	mov	r6, r0
 801740e:	460f      	mov	r7, r1
 8017410:	f7f1 fa92 	bl	8008938 <__aeabi_dcmpeq>
 8017414:	2800      	cmp	r0, #0
 8017416:	d09a      	beq.n	801734e <_dtoa_r+0x616>
 8017418:	e7cb      	b.n	80173b2 <_dtoa_r+0x67a>
 801741a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801741c:	2a00      	cmp	r2, #0
 801741e:	f000 808b 	beq.w	8017538 <_dtoa_r+0x800>
 8017422:	9a06      	ldr	r2, [sp, #24]
 8017424:	2a01      	cmp	r2, #1
 8017426:	dc6e      	bgt.n	8017506 <_dtoa_r+0x7ce>
 8017428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801742a:	2a00      	cmp	r2, #0
 801742c:	d067      	beq.n	80174fe <_dtoa_r+0x7c6>
 801742e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017432:	9f07      	ldr	r7, [sp, #28]
 8017434:	9d05      	ldr	r5, [sp, #20]
 8017436:	9a05      	ldr	r2, [sp, #20]
 8017438:	2101      	movs	r1, #1
 801743a:	441a      	add	r2, r3
 801743c:	4620      	mov	r0, r4
 801743e:	9205      	str	r2, [sp, #20]
 8017440:	4498      	add	r8, r3
 8017442:	f000 fcf9 	bl	8017e38 <__i2b>
 8017446:	4606      	mov	r6, r0
 8017448:	2d00      	cmp	r5, #0
 801744a:	dd0c      	ble.n	8017466 <_dtoa_r+0x72e>
 801744c:	f1b8 0f00 	cmp.w	r8, #0
 8017450:	dd09      	ble.n	8017466 <_dtoa_r+0x72e>
 8017452:	4545      	cmp	r5, r8
 8017454:	9a05      	ldr	r2, [sp, #20]
 8017456:	462b      	mov	r3, r5
 8017458:	bfa8      	it	ge
 801745a:	4643      	movge	r3, r8
 801745c:	1ad2      	subs	r2, r2, r3
 801745e:	9205      	str	r2, [sp, #20]
 8017460:	1aed      	subs	r5, r5, r3
 8017462:	eba8 0803 	sub.w	r8, r8, r3
 8017466:	9b07      	ldr	r3, [sp, #28]
 8017468:	b1eb      	cbz	r3, 80174a6 <_dtoa_r+0x76e>
 801746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801746c:	2b00      	cmp	r3, #0
 801746e:	d067      	beq.n	8017540 <_dtoa_r+0x808>
 8017470:	b18f      	cbz	r7, 8017496 <_dtoa_r+0x75e>
 8017472:	4631      	mov	r1, r6
 8017474:	463a      	mov	r2, r7
 8017476:	4620      	mov	r0, r4
 8017478:	f000 fd7e 	bl	8017f78 <__pow5mult>
 801747c:	9a04      	ldr	r2, [sp, #16]
 801747e:	4601      	mov	r1, r0
 8017480:	4606      	mov	r6, r0
 8017482:	4620      	mov	r0, r4
 8017484:	f000 fce1 	bl	8017e4a <__multiply>
 8017488:	9904      	ldr	r1, [sp, #16]
 801748a:	9008      	str	r0, [sp, #32]
 801748c:	4620      	mov	r0, r4
 801748e:	f000 fc33 	bl	8017cf8 <_Bfree>
 8017492:	9b08      	ldr	r3, [sp, #32]
 8017494:	9304      	str	r3, [sp, #16]
 8017496:	9b07      	ldr	r3, [sp, #28]
 8017498:	1bda      	subs	r2, r3, r7
 801749a:	d004      	beq.n	80174a6 <_dtoa_r+0x76e>
 801749c:	9904      	ldr	r1, [sp, #16]
 801749e:	4620      	mov	r0, r4
 80174a0:	f000 fd6a 	bl	8017f78 <__pow5mult>
 80174a4:	9004      	str	r0, [sp, #16]
 80174a6:	2101      	movs	r1, #1
 80174a8:	4620      	mov	r0, r4
 80174aa:	f000 fcc5 	bl	8017e38 <__i2b>
 80174ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174b0:	4607      	mov	r7, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 81d0 	beq.w	8017858 <_dtoa_r+0xb20>
 80174b8:	461a      	mov	r2, r3
 80174ba:	4601      	mov	r1, r0
 80174bc:	4620      	mov	r0, r4
 80174be:	f000 fd5b 	bl	8017f78 <__pow5mult>
 80174c2:	9b06      	ldr	r3, [sp, #24]
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	4607      	mov	r7, r0
 80174c8:	dc40      	bgt.n	801754c <_dtoa_r+0x814>
 80174ca:	9b00      	ldr	r3, [sp, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d139      	bne.n	8017544 <_dtoa_r+0x80c>
 80174d0:	9b01      	ldr	r3, [sp, #4]
 80174d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d136      	bne.n	8017548 <_dtoa_r+0x810>
 80174da:	9b01      	ldr	r3, [sp, #4]
 80174dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174e0:	0d1b      	lsrs	r3, r3, #20
 80174e2:	051b      	lsls	r3, r3, #20
 80174e4:	b12b      	cbz	r3, 80174f2 <_dtoa_r+0x7ba>
 80174e6:	9b05      	ldr	r3, [sp, #20]
 80174e8:	3301      	adds	r3, #1
 80174ea:	9305      	str	r3, [sp, #20]
 80174ec:	f108 0801 	add.w	r8, r8, #1
 80174f0:	2301      	movs	r3, #1
 80174f2:	9307      	str	r3, [sp, #28]
 80174f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d12a      	bne.n	8017550 <_dtoa_r+0x818>
 80174fa:	2001      	movs	r0, #1
 80174fc:	e030      	b.n	8017560 <_dtoa_r+0x828>
 80174fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017500:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017504:	e795      	b.n	8017432 <_dtoa_r+0x6fa>
 8017506:	9b07      	ldr	r3, [sp, #28]
 8017508:	f109 37ff 	add.w	r7, r9, #4294967295
 801750c:	42bb      	cmp	r3, r7
 801750e:	bfbf      	itttt	lt
 8017510:	9b07      	ldrlt	r3, [sp, #28]
 8017512:	9707      	strlt	r7, [sp, #28]
 8017514:	1afa      	sublt	r2, r7, r3
 8017516:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017518:	bfbb      	ittet	lt
 801751a:	189b      	addlt	r3, r3, r2
 801751c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801751e:	1bdf      	subge	r7, r3, r7
 8017520:	2700      	movlt	r7, #0
 8017522:	f1b9 0f00 	cmp.w	r9, #0
 8017526:	bfb5      	itete	lt
 8017528:	9b05      	ldrlt	r3, [sp, #20]
 801752a:	9d05      	ldrge	r5, [sp, #20]
 801752c:	eba3 0509 	sublt.w	r5, r3, r9
 8017530:	464b      	movge	r3, r9
 8017532:	bfb8      	it	lt
 8017534:	2300      	movlt	r3, #0
 8017536:	e77e      	b.n	8017436 <_dtoa_r+0x6fe>
 8017538:	9f07      	ldr	r7, [sp, #28]
 801753a:	9d05      	ldr	r5, [sp, #20]
 801753c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801753e:	e783      	b.n	8017448 <_dtoa_r+0x710>
 8017540:	9a07      	ldr	r2, [sp, #28]
 8017542:	e7ab      	b.n	801749c <_dtoa_r+0x764>
 8017544:	2300      	movs	r3, #0
 8017546:	e7d4      	b.n	80174f2 <_dtoa_r+0x7ba>
 8017548:	9b00      	ldr	r3, [sp, #0]
 801754a:	e7d2      	b.n	80174f2 <_dtoa_r+0x7ba>
 801754c:	2300      	movs	r3, #0
 801754e:	9307      	str	r3, [sp, #28]
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017556:	6918      	ldr	r0, [r3, #16]
 8017558:	f000 fc20 	bl	8017d9c <__hi0bits>
 801755c:	f1c0 0020 	rsb	r0, r0, #32
 8017560:	4440      	add	r0, r8
 8017562:	f010 001f 	ands.w	r0, r0, #31
 8017566:	d047      	beq.n	80175f8 <_dtoa_r+0x8c0>
 8017568:	f1c0 0320 	rsb	r3, r0, #32
 801756c:	2b04      	cmp	r3, #4
 801756e:	dd3b      	ble.n	80175e8 <_dtoa_r+0x8b0>
 8017570:	9b05      	ldr	r3, [sp, #20]
 8017572:	f1c0 001c 	rsb	r0, r0, #28
 8017576:	4403      	add	r3, r0
 8017578:	9305      	str	r3, [sp, #20]
 801757a:	4405      	add	r5, r0
 801757c:	4480      	add	r8, r0
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	2b00      	cmp	r3, #0
 8017582:	dd05      	ble.n	8017590 <_dtoa_r+0x858>
 8017584:	461a      	mov	r2, r3
 8017586:	9904      	ldr	r1, [sp, #16]
 8017588:	4620      	mov	r0, r4
 801758a:	f000 fd43 	bl	8018014 <__lshift>
 801758e:	9004      	str	r0, [sp, #16]
 8017590:	f1b8 0f00 	cmp.w	r8, #0
 8017594:	dd05      	ble.n	80175a2 <_dtoa_r+0x86a>
 8017596:	4639      	mov	r1, r7
 8017598:	4642      	mov	r2, r8
 801759a:	4620      	mov	r0, r4
 801759c:	f000 fd3a 	bl	8018014 <__lshift>
 80175a0:	4607      	mov	r7, r0
 80175a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175a4:	b353      	cbz	r3, 80175fc <_dtoa_r+0x8c4>
 80175a6:	4639      	mov	r1, r7
 80175a8:	9804      	ldr	r0, [sp, #16]
 80175aa:	f000 fd87 	bl	80180bc <__mcmp>
 80175ae:	2800      	cmp	r0, #0
 80175b0:	da24      	bge.n	80175fc <_dtoa_r+0x8c4>
 80175b2:	2300      	movs	r3, #0
 80175b4:	220a      	movs	r2, #10
 80175b6:	9904      	ldr	r1, [sp, #16]
 80175b8:	4620      	mov	r0, r4
 80175ba:	f000 fbb4 	bl	8017d26 <__multadd>
 80175be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175c0:	9004      	str	r0, [sp, #16]
 80175c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	f000 814d 	beq.w	8017866 <_dtoa_r+0xb2e>
 80175cc:	2300      	movs	r3, #0
 80175ce:	4631      	mov	r1, r6
 80175d0:	220a      	movs	r2, #10
 80175d2:	4620      	mov	r0, r4
 80175d4:	f000 fba7 	bl	8017d26 <__multadd>
 80175d8:	9b02      	ldr	r3, [sp, #8]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	4606      	mov	r6, r0
 80175de:	dc4f      	bgt.n	8017680 <_dtoa_r+0x948>
 80175e0:	9b06      	ldr	r3, [sp, #24]
 80175e2:	2b02      	cmp	r3, #2
 80175e4:	dd4c      	ble.n	8017680 <_dtoa_r+0x948>
 80175e6:	e011      	b.n	801760c <_dtoa_r+0x8d4>
 80175e8:	d0c9      	beq.n	801757e <_dtoa_r+0x846>
 80175ea:	9a05      	ldr	r2, [sp, #20]
 80175ec:	331c      	adds	r3, #28
 80175ee:	441a      	add	r2, r3
 80175f0:	9205      	str	r2, [sp, #20]
 80175f2:	441d      	add	r5, r3
 80175f4:	4498      	add	r8, r3
 80175f6:	e7c2      	b.n	801757e <_dtoa_r+0x846>
 80175f8:	4603      	mov	r3, r0
 80175fa:	e7f6      	b.n	80175ea <_dtoa_r+0x8b2>
 80175fc:	f1b9 0f00 	cmp.w	r9, #0
 8017600:	dc38      	bgt.n	8017674 <_dtoa_r+0x93c>
 8017602:	9b06      	ldr	r3, [sp, #24]
 8017604:	2b02      	cmp	r3, #2
 8017606:	dd35      	ble.n	8017674 <_dtoa_r+0x93c>
 8017608:	f8cd 9008 	str.w	r9, [sp, #8]
 801760c:	9b02      	ldr	r3, [sp, #8]
 801760e:	b963      	cbnz	r3, 801762a <_dtoa_r+0x8f2>
 8017610:	4639      	mov	r1, r7
 8017612:	2205      	movs	r2, #5
 8017614:	4620      	mov	r0, r4
 8017616:	f000 fb86 	bl	8017d26 <__multadd>
 801761a:	4601      	mov	r1, r0
 801761c:	4607      	mov	r7, r0
 801761e:	9804      	ldr	r0, [sp, #16]
 8017620:	f000 fd4c 	bl	80180bc <__mcmp>
 8017624:	2800      	cmp	r0, #0
 8017626:	f73f adcc 	bgt.w	80171c2 <_dtoa_r+0x48a>
 801762a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801762c:	465d      	mov	r5, fp
 801762e:	ea6f 0a03 	mvn.w	sl, r3
 8017632:	f04f 0900 	mov.w	r9, #0
 8017636:	4639      	mov	r1, r7
 8017638:	4620      	mov	r0, r4
 801763a:	f000 fb5d 	bl	8017cf8 <_Bfree>
 801763e:	2e00      	cmp	r6, #0
 8017640:	f43f aeb7 	beq.w	80173b2 <_dtoa_r+0x67a>
 8017644:	f1b9 0f00 	cmp.w	r9, #0
 8017648:	d005      	beq.n	8017656 <_dtoa_r+0x91e>
 801764a:	45b1      	cmp	r9, r6
 801764c:	d003      	beq.n	8017656 <_dtoa_r+0x91e>
 801764e:	4649      	mov	r1, r9
 8017650:	4620      	mov	r0, r4
 8017652:	f000 fb51 	bl	8017cf8 <_Bfree>
 8017656:	4631      	mov	r1, r6
 8017658:	4620      	mov	r0, r4
 801765a:	f000 fb4d 	bl	8017cf8 <_Bfree>
 801765e:	e6a8      	b.n	80173b2 <_dtoa_r+0x67a>
 8017660:	2700      	movs	r7, #0
 8017662:	463e      	mov	r6, r7
 8017664:	e7e1      	b.n	801762a <_dtoa_r+0x8f2>
 8017666:	f8dd a020 	ldr.w	sl, [sp, #32]
 801766a:	463e      	mov	r6, r7
 801766c:	e5a9      	b.n	80171c2 <_dtoa_r+0x48a>
 801766e:	bf00      	nop
 8017670:	40240000 	.word	0x40240000
 8017674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017676:	f8cd 9008 	str.w	r9, [sp, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	f000 80fa 	beq.w	8017874 <_dtoa_r+0xb3c>
 8017680:	2d00      	cmp	r5, #0
 8017682:	dd05      	ble.n	8017690 <_dtoa_r+0x958>
 8017684:	4631      	mov	r1, r6
 8017686:	462a      	mov	r2, r5
 8017688:	4620      	mov	r0, r4
 801768a:	f000 fcc3 	bl	8018014 <__lshift>
 801768e:	4606      	mov	r6, r0
 8017690:	9b07      	ldr	r3, [sp, #28]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d04c      	beq.n	8017730 <_dtoa_r+0x9f8>
 8017696:	6871      	ldr	r1, [r6, #4]
 8017698:	4620      	mov	r0, r4
 801769a:	f000 faf9 	bl	8017c90 <_Balloc>
 801769e:	6932      	ldr	r2, [r6, #16]
 80176a0:	3202      	adds	r2, #2
 80176a2:	4605      	mov	r5, r0
 80176a4:	0092      	lsls	r2, r2, #2
 80176a6:	f106 010c 	add.w	r1, r6, #12
 80176aa:	300c      	adds	r0, #12
 80176ac:	f7fe fd0c 	bl	80160c8 <memcpy>
 80176b0:	2201      	movs	r2, #1
 80176b2:	4629      	mov	r1, r5
 80176b4:	4620      	mov	r0, r4
 80176b6:	f000 fcad 	bl	8018014 <__lshift>
 80176ba:	9b00      	ldr	r3, [sp, #0]
 80176bc:	f8cd b014 	str.w	fp, [sp, #20]
 80176c0:	f003 0301 	and.w	r3, r3, #1
 80176c4:	46b1      	mov	r9, r6
 80176c6:	9307      	str	r3, [sp, #28]
 80176c8:	4606      	mov	r6, r0
 80176ca:	4639      	mov	r1, r7
 80176cc:	9804      	ldr	r0, [sp, #16]
 80176ce:	f7ff faa7 	bl	8016c20 <quorem>
 80176d2:	4649      	mov	r1, r9
 80176d4:	4605      	mov	r5, r0
 80176d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80176da:	9804      	ldr	r0, [sp, #16]
 80176dc:	f000 fcee 	bl	80180bc <__mcmp>
 80176e0:	4632      	mov	r2, r6
 80176e2:	9000      	str	r0, [sp, #0]
 80176e4:	4639      	mov	r1, r7
 80176e6:	4620      	mov	r0, r4
 80176e8:	f000 fd02 	bl	80180f0 <__mdiff>
 80176ec:	68c3      	ldr	r3, [r0, #12]
 80176ee:	4602      	mov	r2, r0
 80176f0:	bb03      	cbnz	r3, 8017734 <_dtoa_r+0x9fc>
 80176f2:	4601      	mov	r1, r0
 80176f4:	9008      	str	r0, [sp, #32]
 80176f6:	9804      	ldr	r0, [sp, #16]
 80176f8:	f000 fce0 	bl	80180bc <__mcmp>
 80176fc:	9a08      	ldr	r2, [sp, #32]
 80176fe:	4603      	mov	r3, r0
 8017700:	4611      	mov	r1, r2
 8017702:	4620      	mov	r0, r4
 8017704:	9308      	str	r3, [sp, #32]
 8017706:	f000 faf7 	bl	8017cf8 <_Bfree>
 801770a:	9b08      	ldr	r3, [sp, #32]
 801770c:	b9a3      	cbnz	r3, 8017738 <_dtoa_r+0xa00>
 801770e:	9a06      	ldr	r2, [sp, #24]
 8017710:	b992      	cbnz	r2, 8017738 <_dtoa_r+0xa00>
 8017712:	9a07      	ldr	r2, [sp, #28]
 8017714:	b982      	cbnz	r2, 8017738 <_dtoa_r+0xa00>
 8017716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801771a:	d029      	beq.n	8017770 <_dtoa_r+0xa38>
 801771c:	9b00      	ldr	r3, [sp, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	dd01      	ble.n	8017726 <_dtoa_r+0x9ee>
 8017722:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017726:	9b05      	ldr	r3, [sp, #20]
 8017728:	1c5d      	adds	r5, r3, #1
 801772a:	f883 8000 	strb.w	r8, [r3]
 801772e:	e782      	b.n	8017636 <_dtoa_r+0x8fe>
 8017730:	4630      	mov	r0, r6
 8017732:	e7c2      	b.n	80176ba <_dtoa_r+0x982>
 8017734:	2301      	movs	r3, #1
 8017736:	e7e3      	b.n	8017700 <_dtoa_r+0x9c8>
 8017738:	9a00      	ldr	r2, [sp, #0]
 801773a:	2a00      	cmp	r2, #0
 801773c:	db04      	blt.n	8017748 <_dtoa_r+0xa10>
 801773e:	d125      	bne.n	801778c <_dtoa_r+0xa54>
 8017740:	9a06      	ldr	r2, [sp, #24]
 8017742:	bb1a      	cbnz	r2, 801778c <_dtoa_r+0xa54>
 8017744:	9a07      	ldr	r2, [sp, #28]
 8017746:	bb0a      	cbnz	r2, 801778c <_dtoa_r+0xa54>
 8017748:	2b00      	cmp	r3, #0
 801774a:	ddec      	ble.n	8017726 <_dtoa_r+0x9ee>
 801774c:	2201      	movs	r2, #1
 801774e:	9904      	ldr	r1, [sp, #16]
 8017750:	4620      	mov	r0, r4
 8017752:	f000 fc5f 	bl	8018014 <__lshift>
 8017756:	4639      	mov	r1, r7
 8017758:	9004      	str	r0, [sp, #16]
 801775a:	f000 fcaf 	bl	80180bc <__mcmp>
 801775e:	2800      	cmp	r0, #0
 8017760:	dc03      	bgt.n	801776a <_dtoa_r+0xa32>
 8017762:	d1e0      	bne.n	8017726 <_dtoa_r+0x9ee>
 8017764:	f018 0f01 	tst.w	r8, #1
 8017768:	d0dd      	beq.n	8017726 <_dtoa_r+0x9ee>
 801776a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801776e:	d1d8      	bne.n	8017722 <_dtoa_r+0x9ea>
 8017770:	9b05      	ldr	r3, [sp, #20]
 8017772:	9a05      	ldr	r2, [sp, #20]
 8017774:	1c5d      	adds	r5, r3, #1
 8017776:	2339      	movs	r3, #57	; 0x39
 8017778:	7013      	strb	r3, [r2, #0]
 801777a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801777e:	2b39      	cmp	r3, #57	; 0x39
 8017780:	f105 32ff 	add.w	r2, r5, #4294967295
 8017784:	d04f      	beq.n	8017826 <_dtoa_r+0xaee>
 8017786:	3301      	adds	r3, #1
 8017788:	7013      	strb	r3, [r2, #0]
 801778a:	e754      	b.n	8017636 <_dtoa_r+0x8fe>
 801778c:	9a05      	ldr	r2, [sp, #20]
 801778e:	2b00      	cmp	r3, #0
 8017790:	f102 0501 	add.w	r5, r2, #1
 8017794:	dd06      	ble.n	80177a4 <_dtoa_r+0xa6c>
 8017796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801779a:	d0e9      	beq.n	8017770 <_dtoa_r+0xa38>
 801779c:	f108 0801 	add.w	r8, r8, #1
 80177a0:	9b05      	ldr	r3, [sp, #20]
 80177a2:	e7c2      	b.n	801772a <_dtoa_r+0x9f2>
 80177a4:	9a02      	ldr	r2, [sp, #8]
 80177a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80177aa:	eba5 030b 	sub.w	r3, r5, fp
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d021      	beq.n	80177f6 <_dtoa_r+0xabe>
 80177b2:	2300      	movs	r3, #0
 80177b4:	220a      	movs	r2, #10
 80177b6:	9904      	ldr	r1, [sp, #16]
 80177b8:	4620      	mov	r0, r4
 80177ba:	f000 fab4 	bl	8017d26 <__multadd>
 80177be:	45b1      	cmp	r9, r6
 80177c0:	9004      	str	r0, [sp, #16]
 80177c2:	f04f 0300 	mov.w	r3, #0
 80177c6:	f04f 020a 	mov.w	r2, #10
 80177ca:	4649      	mov	r1, r9
 80177cc:	4620      	mov	r0, r4
 80177ce:	d105      	bne.n	80177dc <_dtoa_r+0xaa4>
 80177d0:	f000 faa9 	bl	8017d26 <__multadd>
 80177d4:	4681      	mov	r9, r0
 80177d6:	4606      	mov	r6, r0
 80177d8:	9505      	str	r5, [sp, #20]
 80177da:	e776      	b.n	80176ca <_dtoa_r+0x992>
 80177dc:	f000 faa3 	bl	8017d26 <__multadd>
 80177e0:	4631      	mov	r1, r6
 80177e2:	4681      	mov	r9, r0
 80177e4:	2300      	movs	r3, #0
 80177e6:	220a      	movs	r2, #10
 80177e8:	4620      	mov	r0, r4
 80177ea:	f000 fa9c 	bl	8017d26 <__multadd>
 80177ee:	4606      	mov	r6, r0
 80177f0:	e7f2      	b.n	80177d8 <_dtoa_r+0xaa0>
 80177f2:	f04f 0900 	mov.w	r9, #0
 80177f6:	2201      	movs	r2, #1
 80177f8:	9904      	ldr	r1, [sp, #16]
 80177fa:	4620      	mov	r0, r4
 80177fc:	f000 fc0a 	bl	8018014 <__lshift>
 8017800:	4639      	mov	r1, r7
 8017802:	9004      	str	r0, [sp, #16]
 8017804:	f000 fc5a 	bl	80180bc <__mcmp>
 8017808:	2800      	cmp	r0, #0
 801780a:	dcb6      	bgt.n	801777a <_dtoa_r+0xa42>
 801780c:	d102      	bne.n	8017814 <_dtoa_r+0xadc>
 801780e:	f018 0f01 	tst.w	r8, #1
 8017812:	d1b2      	bne.n	801777a <_dtoa_r+0xa42>
 8017814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017818:	2b30      	cmp	r3, #48	; 0x30
 801781a:	f105 32ff 	add.w	r2, r5, #4294967295
 801781e:	f47f af0a 	bne.w	8017636 <_dtoa_r+0x8fe>
 8017822:	4615      	mov	r5, r2
 8017824:	e7f6      	b.n	8017814 <_dtoa_r+0xadc>
 8017826:	4593      	cmp	fp, r2
 8017828:	d105      	bne.n	8017836 <_dtoa_r+0xafe>
 801782a:	2331      	movs	r3, #49	; 0x31
 801782c:	f10a 0a01 	add.w	sl, sl, #1
 8017830:	f88b 3000 	strb.w	r3, [fp]
 8017834:	e6ff      	b.n	8017636 <_dtoa_r+0x8fe>
 8017836:	4615      	mov	r5, r2
 8017838:	e79f      	b.n	801777a <_dtoa_r+0xa42>
 801783a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80178a0 <_dtoa_r+0xb68>
 801783e:	e007      	b.n	8017850 <_dtoa_r+0xb18>
 8017840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017842:	f8df b060 	ldr.w	fp, [pc, #96]	; 80178a4 <_dtoa_r+0xb6c>
 8017846:	b11b      	cbz	r3, 8017850 <_dtoa_r+0xb18>
 8017848:	f10b 0308 	add.w	r3, fp, #8
 801784c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	4658      	mov	r0, fp
 8017852:	b017      	add	sp, #92	; 0x5c
 8017854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	9b06      	ldr	r3, [sp, #24]
 801785a:	2b01      	cmp	r3, #1
 801785c:	f77f ae35 	ble.w	80174ca <_dtoa_r+0x792>
 8017860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017862:	9307      	str	r3, [sp, #28]
 8017864:	e649      	b.n	80174fa <_dtoa_r+0x7c2>
 8017866:	9b02      	ldr	r3, [sp, #8]
 8017868:	2b00      	cmp	r3, #0
 801786a:	dc03      	bgt.n	8017874 <_dtoa_r+0xb3c>
 801786c:	9b06      	ldr	r3, [sp, #24]
 801786e:	2b02      	cmp	r3, #2
 8017870:	f73f aecc 	bgt.w	801760c <_dtoa_r+0x8d4>
 8017874:	465d      	mov	r5, fp
 8017876:	4639      	mov	r1, r7
 8017878:	9804      	ldr	r0, [sp, #16]
 801787a:	f7ff f9d1 	bl	8016c20 <quorem>
 801787e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017882:	f805 8b01 	strb.w	r8, [r5], #1
 8017886:	9a02      	ldr	r2, [sp, #8]
 8017888:	eba5 030b 	sub.w	r3, r5, fp
 801788c:	429a      	cmp	r2, r3
 801788e:	ddb0      	ble.n	80177f2 <_dtoa_r+0xaba>
 8017890:	2300      	movs	r3, #0
 8017892:	220a      	movs	r2, #10
 8017894:	9904      	ldr	r1, [sp, #16]
 8017896:	4620      	mov	r0, r4
 8017898:	f000 fa45 	bl	8017d26 <__multadd>
 801789c:	9004      	str	r0, [sp, #16]
 801789e:	e7ea      	b.n	8017876 <_dtoa_r+0xb3e>
 80178a0:	080189ac 	.word	0x080189ac
 80178a4:	080189d0 	.word	0x080189d0

080178a8 <__sflush_r>:
 80178a8:	898a      	ldrh	r2, [r1, #12]
 80178aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ae:	4605      	mov	r5, r0
 80178b0:	0710      	lsls	r0, r2, #28
 80178b2:	460c      	mov	r4, r1
 80178b4:	d458      	bmi.n	8017968 <__sflush_r+0xc0>
 80178b6:	684b      	ldr	r3, [r1, #4]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	dc05      	bgt.n	80178c8 <__sflush_r+0x20>
 80178bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dc02      	bgt.n	80178c8 <__sflush_r+0x20>
 80178c2:	2000      	movs	r0, #0
 80178c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178ca:	2e00      	cmp	r6, #0
 80178cc:	d0f9      	beq.n	80178c2 <__sflush_r+0x1a>
 80178ce:	2300      	movs	r3, #0
 80178d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80178d4:	682f      	ldr	r7, [r5, #0]
 80178d6:	6a21      	ldr	r1, [r4, #32]
 80178d8:	602b      	str	r3, [r5, #0]
 80178da:	d032      	beq.n	8017942 <__sflush_r+0x9a>
 80178dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80178de:	89a3      	ldrh	r3, [r4, #12]
 80178e0:	075a      	lsls	r2, r3, #29
 80178e2:	d505      	bpl.n	80178f0 <__sflush_r+0x48>
 80178e4:	6863      	ldr	r3, [r4, #4]
 80178e6:	1ac0      	subs	r0, r0, r3
 80178e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178ea:	b10b      	cbz	r3, 80178f0 <__sflush_r+0x48>
 80178ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80178ee:	1ac0      	subs	r0, r0, r3
 80178f0:	2300      	movs	r3, #0
 80178f2:	4602      	mov	r2, r0
 80178f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178f6:	6a21      	ldr	r1, [r4, #32]
 80178f8:	4628      	mov	r0, r5
 80178fa:	47b0      	blx	r6
 80178fc:	1c43      	adds	r3, r0, #1
 80178fe:	89a3      	ldrh	r3, [r4, #12]
 8017900:	d106      	bne.n	8017910 <__sflush_r+0x68>
 8017902:	6829      	ldr	r1, [r5, #0]
 8017904:	291d      	cmp	r1, #29
 8017906:	d848      	bhi.n	801799a <__sflush_r+0xf2>
 8017908:	4a29      	ldr	r2, [pc, #164]	; (80179b0 <__sflush_r+0x108>)
 801790a:	40ca      	lsrs	r2, r1
 801790c:	07d6      	lsls	r6, r2, #31
 801790e:	d544      	bpl.n	801799a <__sflush_r+0xf2>
 8017910:	2200      	movs	r2, #0
 8017912:	6062      	str	r2, [r4, #4]
 8017914:	04d9      	lsls	r1, r3, #19
 8017916:	6922      	ldr	r2, [r4, #16]
 8017918:	6022      	str	r2, [r4, #0]
 801791a:	d504      	bpl.n	8017926 <__sflush_r+0x7e>
 801791c:	1c42      	adds	r2, r0, #1
 801791e:	d101      	bne.n	8017924 <__sflush_r+0x7c>
 8017920:	682b      	ldr	r3, [r5, #0]
 8017922:	b903      	cbnz	r3, 8017926 <__sflush_r+0x7e>
 8017924:	6560      	str	r0, [r4, #84]	; 0x54
 8017926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017928:	602f      	str	r7, [r5, #0]
 801792a:	2900      	cmp	r1, #0
 801792c:	d0c9      	beq.n	80178c2 <__sflush_r+0x1a>
 801792e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017932:	4299      	cmp	r1, r3
 8017934:	d002      	beq.n	801793c <__sflush_r+0x94>
 8017936:	4628      	mov	r0, r5
 8017938:	f000 fc94 	bl	8018264 <_free_r>
 801793c:	2000      	movs	r0, #0
 801793e:	6360      	str	r0, [r4, #52]	; 0x34
 8017940:	e7c0      	b.n	80178c4 <__sflush_r+0x1c>
 8017942:	2301      	movs	r3, #1
 8017944:	4628      	mov	r0, r5
 8017946:	47b0      	blx	r6
 8017948:	1c41      	adds	r1, r0, #1
 801794a:	d1c8      	bne.n	80178de <__sflush_r+0x36>
 801794c:	682b      	ldr	r3, [r5, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d0c5      	beq.n	80178de <__sflush_r+0x36>
 8017952:	2b1d      	cmp	r3, #29
 8017954:	d001      	beq.n	801795a <__sflush_r+0xb2>
 8017956:	2b16      	cmp	r3, #22
 8017958:	d101      	bne.n	801795e <__sflush_r+0xb6>
 801795a:	602f      	str	r7, [r5, #0]
 801795c:	e7b1      	b.n	80178c2 <__sflush_r+0x1a>
 801795e:	89a3      	ldrh	r3, [r4, #12]
 8017960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017964:	81a3      	strh	r3, [r4, #12]
 8017966:	e7ad      	b.n	80178c4 <__sflush_r+0x1c>
 8017968:	690f      	ldr	r7, [r1, #16]
 801796a:	2f00      	cmp	r7, #0
 801796c:	d0a9      	beq.n	80178c2 <__sflush_r+0x1a>
 801796e:	0793      	lsls	r3, r2, #30
 8017970:	680e      	ldr	r6, [r1, #0]
 8017972:	bf08      	it	eq
 8017974:	694b      	ldreq	r3, [r1, #20]
 8017976:	600f      	str	r7, [r1, #0]
 8017978:	bf18      	it	ne
 801797a:	2300      	movne	r3, #0
 801797c:	eba6 0807 	sub.w	r8, r6, r7
 8017980:	608b      	str	r3, [r1, #8]
 8017982:	f1b8 0f00 	cmp.w	r8, #0
 8017986:	dd9c      	ble.n	80178c2 <__sflush_r+0x1a>
 8017988:	4643      	mov	r3, r8
 801798a:	463a      	mov	r2, r7
 801798c:	6a21      	ldr	r1, [r4, #32]
 801798e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017990:	4628      	mov	r0, r5
 8017992:	47b0      	blx	r6
 8017994:	2800      	cmp	r0, #0
 8017996:	dc06      	bgt.n	80179a6 <__sflush_r+0xfe>
 8017998:	89a3      	ldrh	r3, [r4, #12]
 801799a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801799e:	81a3      	strh	r3, [r4, #12]
 80179a0:	f04f 30ff 	mov.w	r0, #4294967295
 80179a4:	e78e      	b.n	80178c4 <__sflush_r+0x1c>
 80179a6:	4407      	add	r7, r0
 80179a8:	eba8 0800 	sub.w	r8, r8, r0
 80179ac:	e7e9      	b.n	8017982 <__sflush_r+0xda>
 80179ae:	bf00      	nop
 80179b0:	20400001 	.word	0x20400001

080179b4 <_fflush_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	690b      	ldr	r3, [r1, #16]
 80179b8:	4605      	mov	r5, r0
 80179ba:	460c      	mov	r4, r1
 80179bc:	b1db      	cbz	r3, 80179f6 <_fflush_r+0x42>
 80179be:	b118      	cbz	r0, 80179c8 <_fflush_r+0x14>
 80179c0:	6983      	ldr	r3, [r0, #24]
 80179c2:	b90b      	cbnz	r3, 80179c8 <_fflush_r+0x14>
 80179c4:	f000 f860 	bl	8017a88 <__sinit>
 80179c8:	4b0c      	ldr	r3, [pc, #48]	; (80179fc <_fflush_r+0x48>)
 80179ca:	429c      	cmp	r4, r3
 80179cc:	d109      	bne.n	80179e2 <_fflush_r+0x2e>
 80179ce:	686c      	ldr	r4, [r5, #4]
 80179d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d4:	b17b      	cbz	r3, 80179f6 <_fflush_r+0x42>
 80179d6:	4621      	mov	r1, r4
 80179d8:	4628      	mov	r0, r5
 80179da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179de:	f7ff bf63 	b.w	80178a8 <__sflush_r>
 80179e2:	4b07      	ldr	r3, [pc, #28]	; (8017a00 <_fflush_r+0x4c>)
 80179e4:	429c      	cmp	r4, r3
 80179e6:	d101      	bne.n	80179ec <_fflush_r+0x38>
 80179e8:	68ac      	ldr	r4, [r5, #8]
 80179ea:	e7f1      	b.n	80179d0 <_fflush_r+0x1c>
 80179ec:	4b05      	ldr	r3, [pc, #20]	; (8017a04 <_fflush_r+0x50>)
 80179ee:	429c      	cmp	r4, r3
 80179f0:	bf08      	it	eq
 80179f2:	68ec      	ldreq	r4, [r5, #12]
 80179f4:	e7ec      	b.n	80179d0 <_fflush_r+0x1c>
 80179f6:	2000      	movs	r0, #0
 80179f8:	bd38      	pop	{r3, r4, r5, pc}
 80179fa:	bf00      	nop
 80179fc:	08018a00 	.word	0x08018a00
 8017a00:	08018a20 	.word	0x08018a20
 8017a04:	080189e0 	.word	0x080189e0

08017a08 <std>:
 8017a08:	2300      	movs	r3, #0
 8017a0a:	b510      	push	{r4, lr}
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8017a12:	6083      	str	r3, [r0, #8]
 8017a14:	8181      	strh	r1, [r0, #12]
 8017a16:	6643      	str	r3, [r0, #100]	; 0x64
 8017a18:	81c2      	strh	r2, [r0, #14]
 8017a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a1e:	6183      	str	r3, [r0, #24]
 8017a20:	4619      	mov	r1, r3
 8017a22:	2208      	movs	r2, #8
 8017a24:	305c      	adds	r0, #92	; 0x5c
 8017a26:	f7fe fb5a 	bl	80160de <memset>
 8017a2a:	4b05      	ldr	r3, [pc, #20]	; (8017a40 <std+0x38>)
 8017a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8017a2e:	4b05      	ldr	r3, [pc, #20]	; (8017a44 <std+0x3c>)
 8017a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a32:	4b05      	ldr	r3, [pc, #20]	; (8017a48 <std+0x40>)
 8017a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a36:	4b05      	ldr	r3, [pc, #20]	; (8017a4c <std+0x44>)
 8017a38:	6224      	str	r4, [r4, #32]
 8017a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8017a3c:	bd10      	pop	{r4, pc}
 8017a3e:	bf00      	nop
 8017a40:	08018655 	.word	0x08018655
 8017a44:	08018677 	.word	0x08018677
 8017a48:	080186af 	.word	0x080186af
 8017a4c:	080186d3 	.word	0x080186d3

08017a50 <_cleanup_r>:
 8017a50:	4901      	ldr	r1, [pc, #4]	; (8017a58 <_cleanup_r+0x8>)
 8017a52:	f000 b885 	b.w	8017b60 <_fwalk_reent>
 8017a56:	bf00      	nop
 8017a58:	080179b5 	.word	0x080179b5

08017a5c <__sfmoreglue>:
 8017a5c:	b570      	push	{r4, r5, r6, lr}
 8017a5e:	1e4a      	subs	r2, r1, #1
 8017a60:	2568      	movs	r5, #104	; 0x68
 8017a62:	4355      	muls	r5, r2
 8017a64:	460e      	mov	r6, r1
 8017a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a6a:	f000 fc49 	bl	8018300 <_malloc_r>
 8017a6e:	4604      	mov	r4, r0
 8017a70:	b140      	cbz	r0, 8017a84 <__sfmoreglue+0x28>
 8017a72:	2100      	movs	r1, #0
 8017a74:	e9c0 1600 	strd	r1, r6, [r0]
 8017a78:	300c      	adds	r0, #12
 8017a7a:	60a0      	str	r0, [r4, #8]
 8017a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a80:	f7fe fb2d 	bl	80160de <memset>
 8017a84:	4620      	mov	r0, r4
 8017a86:	bd70      	pop	{r4, r5, r6, pc}

08017a88 <__sinit>:
 8017a88:	6983      	ldr	r3, [r0, #24]
 8017a8a:	b510      	push	{r4, lr}
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	bb33      	cbnz	r3, 8017ade <__sinit+0x56>
 8017a90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017a94:	6503      	str	r3, [r0, #80]	; 0x50
 8017a96:	4b12      	ldr	r3, [pc, #72]	; (8017ae0 <__sinit+0x58>)
 8017a98:	4a12      	ldr	r2, [pc, #72]	; (8017ae4 <__sinit+0x5c>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	6282      	str	r2, [r0, #40]	; 0x28
 8017a9e:	4298      	cmp	r0, r3
 8017aa0:	bf04      	itt	eq
 8017aa2:	2301      	moveq	r3, #1
 8017aa4:	6183      	streq	r3, [r0, #24]
 8017aa6:	f000 f81f 	bl	8017ae8 <__sfp>
 8017aaa:	6060      	str	r0, [r4, #4]
 8017aac:	4620      	mov	r0, r4
 8017aae:	f000 f81b 	bl	8017ae8 <__sfp>
 8017ab2:	60a0      	str	r0, [r4, #8]
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f000 f817 	bl	8017ae8 <__sfp>
 8017aba:	2200      	movs	r2, #0
 8017abc:	60e0      	str	r0, [r4, #12]
 8017abe:	2104      	movs	r1, #4
 8017ac0:	6860      	ldr	r0, [r4, #4]
 8017ac2:	f7ff ffa1 	bl	8017a08 <std>
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	2109      	movs	r1, #9
 8017aca:	68a0      	ldr	r0, [r4, #8]
 8017acc:	f7ff ff9c 	bl	8017a08 <std>
 8017ad0:	2202      	movs	r2, #2
 8017ad2:	2112      	movs	r1, #18
 8017ad4:	68e0      	ldr	r0, [r4, #12]
 8017ad6:	f7ff ff97 	bl	8017a08 <std>
 8017ada:	2301      	movs	r3, #1
 8017adc:	61a3      	str	r3, [r4, #24]
 8017ade:	bd10      	pop	{r4, pc}
 8017ae0:	08018998 	.word	0x08018998
 8017ae4:	08017a51 	.word	0x08017a51

08017ae8 <__sfp>:
 8017ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aea:	4b1b      	ldr	r3, [pc, #108]	; (8017b58 <__sfp+0x70>)
 8017aec:	681e      	ldr	r6, [r3, #0]
 8017aee:	69b3      	ldr	r3, [r6, #24]
 8017af0:	4607      	mov	r7, r0
 8017af2:	b913      	cbnz	r3, 8017afa <__sfp+0x12>
 8017af4:	4630      	mov	r0, r6
 8017af6:	f7ff ffc7 	bl	8017a88 <__sinit>
 8017afa:	3648      	adds	r6, #72	; 0x48
 8017afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b00:	3b01      	subs	r3, #1
 8017b02:	d503      	bpl.n	8017b0c <__sfp+0x24>
 8017b04:	6833      	ldr	r3, [r6, #0]
 8017b06:	b133      	cbz	r3, 8017b16 <__sfp+0x2e>
 8017b08:	6836      	ldr	r6, [r6, #0]
 8017b0a:	e7f7      	b.n	8017afc <__sfp+0x14>
 8017b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b10:	b16d      	cbz	r5, 8017b2e <__sfp+0x46>
 8017b12:	3468      	adds	r4, #104	; 0x68
 8017b14:	e7f4      	b.n	8017b00 <__sfp+0x18>
 8017b16:	2104      	movs	r1, #4
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f7ff ff9f 	bl	8017a5c <__sfmoreglue>
 8017b1e:	6030      	str	r0, [r6, #0]
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d1f1      	bne.n	8017b08 <__sfp+0x20>
 8017b24:	230c      	movs	r3, #12
 8017b26:	603b      	str	r3, [r7, #0]
 8017b28:	4604      	mov	r4, r0
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b2e:	4b0b      	ldr	r3, [pc, #44]	; (8017b5c <__sfp+0x74>)
 8017b30:	6665      	str	r5, [r4, #100]	; 0x64
 8017b32:	e9c4 5500 	strd	r5, r5, [r4]
 8017b36:	60a5      	str	r5, [r4, #8]
 8017b38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017b3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017b40:	2208      	movs	r2, #8
 8017b42:	4629      	mov	r1, r5
 8017b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b48:	f7fe fac9 	bl	80160de <memset>
 8017b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b54:	e7e9      	b.n	8017b2a <__sfp+0x42>
 8017b56:	bf00      	nop
 8017b58:	08018998 	.word	0x08018998
 8017b5c:	ffff0001 	.word	0xffff0001

08017b60 <_fwalk_reent>:
 8017b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b64:	4680      	mov	r8, r0
 8017b66:	4689      	mov	r9, r1
 8017b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b6c:	2600      	movs	r6, #0
 8017b6e:	b914      	cbnz	r4, 8017b76 <_fwalk_reent+0x16>
 8017b70:	4630      	mov	r0, r6
 8017b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017b7a:	3f01      	subs	r7, #1
 8017b7c:	d501      	bpl.n	8017b82 <_fwalk_reent+0x22>
 8017b7e:	6824      	ldr	r4, [r4, #0]
 8017b80:	e7f5      	b.n	8017b6e <_fwalk_reent+0xe>
 8017b82:	89ab      	ldrh	r3, [r5, #12]
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d907      	bls.n	8017b98 <_fwalk_reent+0x38>
 8017b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b8c:	3301      	adds	r3, #1
 8017b8e:	d003      	beq.n	8017b98 <_fwalk_reent+0x38>
 8017b90:	4629      	mov	r1, r5
 8017b92:	4640      	mov	r0, r8
 8017b94:	47c8      	blx	r9
 8017b96:	4306      	orrs	r6, r0
 8017b98:	3568      	adds	r5, #104	; 0x68
 8017b9a:	e7ee      	b.n	8017b7a <_fwalk_reent+0x1a>

08017b9c <_localeconv_r>:
 8017b9c:	4b04      	ldr	r3, [pc, #16]	; (8017bb0 <_localeconv_r+0x14>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	6a18      	ldr	r0, [r3, #32]
 8017ba2:	4b04      	ldr	r3, [pc, #16]	; (8017bb4 <_localeconv_r+0x18>)
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	bf08      	it	eq
 8017ba8:	4618      	moveq	r0, r3
 8017baa:	30f0      	adds	r0, #240	; 0xf0
 8017bac:	4770      	bx	lr
 8017bae:	bf00      	nop
 8017bb0:	2000008c 	.word	0x2000008c
 8017bb4:	200000f0 	.word	0x200000f0

08017bb8 <__swhatbuf_r>:
 8017bb8:	b570      	push	{r4, r5, r6, lr}
 8017bba:	460e      	mov	r6, r1
 8017bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bc0:	2900      	cmp	r1, #0
 8017bc2:	b096      	sub	sp, #88	; 0x58
 8017bc4:	4614      	mov	r4, r2
 8017bc6:	461d      	mov	r5, r3
 8017bc8:	da07      	bge.n	8017bda <__swhatbuf_r+0x22>
 8017bca:	2300      	movs	r3, #0
 8017bcc:	602b      	str	r3, [r5, #0]
 8017bce:	89b3      	ldrh	r3, [r6, #12]
 8017bd0:	061a      	lsls	r2, r3, #24
 8017bd2:	d410      	bmi.n	8017bf6 <__swhatbuf_r+0x3e>
 8017bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017bd8:	e00e      	b.n	8017bf8 <__swhatbuf_r+0x40>
 8017bda:	466a      	mov	r2, sp
 8017bdc:	f000 fda0 	bl	8018720 <_fstat_r>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	dbf2      	blt.n	8017bca <__swhatbuf_r+0x12>
 8017be4:	9a01      	ldr	r2, [sp, #4]
 8017be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017bee:	425a      	negs	r2, r3
 8017bf0:	415a      	adcs	r2, r3
 8017bf2:	602a      	str	r2, [r5, #0]
 8017bf4:	e7ee      	b.n	8017bd4 <__swhatbuf_r+0x1c>
 8017bf6:	2340      	movs	r3, #64	; 0x40
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	6023      	str	r3, [r4, #0]
 8017bfc:	b016      	add	sp, #88	; 0x58
 8017bfe:	bd70      	pop	{r4, r5, r6, pc}

08017c00 <__smakebuf_r>:
 8017c00:	898b      	ldrh	r3, [r1, #12]
 8017c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c04:	079d      	lsls	r5, r3, #30
 8017c06:	4606      	mov	r6, r0
 8017c08:	460c      	mov	r4, r1
 8017c0a:	d507      	bpl.n	8017c1c <__smakebuf_r+0x1c>
 8017c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c10:	6023      	str	r3, [r4, #0]
 8017c12:	6123      	str	r3, [r4, #16]
 8017c14:	2301      	movs	r3, #1
 8017c16:	6163      	str	r3, [r4, #20]
 8017c18:	b002      	add	sp, #8
 8017c1a:	bd70      	pop	{r4, r5, r6, pc}
 8017c1c:	ab01      	add	r3, sp, #4
 8017c1e:	466a      	mov	r2, sp
 8017c20:	f7ff ffca 	bl	8017bb8 <__swhatbuf_r>
 8017c24:	9900      	ldr	r1, [sp, #0]
 8017c26:	4605      	mov	r5, r0
 8017c28:	4630      	mov	r0, r6
 8017c2a:	f000 fb69 	bl	8018300 <_malloc_r>
 8017c2e:	b948      	cbnz	r0, 8017c44 <__smakebuf_r+0x44>
 8017c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c34:	059a      	lsls	r2, r3, #22
 8017c36:	d4ef      	bmi.n	8017c18 <__smakebuf_r+0x18>
 8017c38:	f023 0303 	bic.w	r3, r3, #3
 8017c3c:	f043 0302 	orr.w	r3, r3, #2
 8017c40:	81a3      	strh	r3, [r4, #12]
 8017c42:	e7e3      	b.n	8017c0c <__smakebuf_r+0xc>
 8017c44:	4b0d      	ldr	r3, [pc, #52]	; (8017c7c <__smakebuf_r+0x7c>)
 8017c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c48:	89a3      	ldrh	r3, [r4, #12]
 8017c4a:	6020      	str	r0, [r4, #0]
 8017c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c50:	81a3      	strh	r3, [r4, #12]
 8017c52:	9b00      	ldr	r3, [sp, #0]
 8017c54:	6163      	str	r3, [r4, #20]
 8017c56:	9b01      	ldr	r3, [sp, #4]
 8017c58:	6120      	str	r0, [r4, #16]
 8017c5a:	b15b      	cbz	r3, 8017c74 <__smakebuf_r+0x74>
 8017c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c60:	4630      	mov	r0, r6
 8017c62:	f000 fd6f 	bl	8018744 <_isatty_r>
 8017c66:	b128      	cbz	r0, 8017c74 <__smakebuf_r+0x74>
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	f023 0303 	bic.w	r3, r3, #3
 8017c6e:	f043 0301 	orr.w	r3, r3, #1
 8017c72:	81a3      	strh	r3, [r4, #12]
 8017c74:	89a3      	ldrh	r3, [r4, #12]
 8017c76:	431d      	orrs	r5, r3
 8017c78:	81a5      	strh	r5, [r4, #12]
 8017c7a:	e7cd      	b.n	8017c18 <__smakebuf_r+0x18>
 8017c7c:	08017a51 	.word	0x08017a51

08017c80 <malloc>:
 8017c80:	4b02      	ldr	r3, [pc, #8]	; (8017c8c <malloc+0xc>)
 8017c82:	4601      	mov	r1, r0
 8017c84:	6818      	ldr	r0, [r3, #0]
 8017c86:	f000 bb3b 	b.w	8018300 <_malloc_r>
 8017c8a:	bf00      	nop
 8017c8c:	2000008c 	.word	0x2000008c

08017c90 <_Balloc>:
 8017c90:	b570      	push	{r4, r5, r6, lr}
 8017c92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017c94:	4604      	mov	r4, r0
 8017c96:	460e      	mov	r6, r1
 8017c98:	b93d      	cbnz	r5, 8017caa <_Balloc+0x1a>
 8017c9a:	2010      	movs	r0, #16
 8017c9c:	f7ff fff0 	bl	8017c80 <malloc>
 8017ca0:	6260      	str	r0, [r4, #36]	; 0x24
 8017ca2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ca6:	6005      	str	r5, [r0, #0]
 8017ca8:	60c5      	str	r5, [r0, #12]
 8017caa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017cac:	68eb      	ldr	r3, [r5, #12]
 8017cae:	b183      	cbz	r3, 8017cd2 <_Balloc+0x42>
 8017cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017cb8:	b9b8      	cbnz	r0, 8017cea <_Balloc+0x5a>
 8017cba:	2101      	movs	r1, #1
 8017cbc:	fa01 f506 	lsl.w	r5, r1, r6
 8017cc0:	1d6a      	adds	r2, r5, #5
 8017cc2:	0092      	lsls	r2, r2, #2
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f000 fabf 	bl	8018248 <_calloc_r>
 8017cca:	b160      	cbz	r0, 8017ce6 <_Balloc+0x56>
 8017ccc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017cd0:	e00e      	b.n	8017cf0 <_Balloc+0x60>
 8017cd2:	2221      	movs	r2, #33	; 0x21
 8017cd4:	2104      	movs	r1, #4
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f000 fab6 	bl	8018248 <_calloc_r>
 8017cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cde:	60e8      	str	r0, [r5, #12]
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d1e4      	bne.n	8017cb0 <_Balloc+0x20>
 8017ce6:	2000      	movs	r0, #0
 8017ce8:	bd70      	pop	{r4, r5, r6, pc}
 8017cea:	6802      	ldr	r2, [r0, #0]
 8017cec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017cf6:	e7f7      	b.n	8017ce8 <_Balloc+0x58>

08017cf8 <_Bfree>:
 8017cf8:	b570      	push	{r4, r5, r6, lr}
 8017cfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	460d      	mov	r5, r1
 8017d00:	b93c      	cbnz	r4, 8017d12 <_Bfree+0x1a>
 8017d02:	2010      	movs	r0, #16
 8017d04:	f7ff ffbc 	bl	8017c80 <malloc>
 8017d08:	6270      	str	r0, [r6, #36]	; 0x24
 8017d0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017d0e:	6004      	str	r4, [r0, #0]
 8017d10:	60c4      	str	r4, [r0, #12]
 8017d12:	b13d      	cbz	r5, 8017d24 <_Bfree+0x2c>
 8017d14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017d16:	686a      	ldr	r2, [r5, #4]
 8017d18:	68db      	ldr	r3, [r3, #12]
 8017d1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017d1e:	6029      	str	r1, [r5, #0]
 8017d20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017d24:	bd70      	pop	{r4, r5, r6, pc}

08017d26 <__multadd>:
 8017d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d2a:	690d      	ldr	r5, [r1, #16]
 8017d2c:	461f      	mov	r7, r3
 8017d2e:	4606      	mov	r6, r0
 8017d30:	460c      	mov	r4, r1
 8017d32:	f101 0c14 	add.w	ip, r1, #20
 8017d36:	2300      	movs	r3, #0
 8017d38:	f8dc 0000 	ldr.w	r0, [ip]
 8017d3c:	b281      	uxth	r1, r0
 8017d3e:	fb02 7101 	mla	r1, r2, r1, r7
 8017d42:	0c0f      	lsrs	r7, r1, #16
 8017d44:	0c00      	lsrs	r0, r0, #16
 8017d46:	fb02 7000 	mla	r0, r2, r0, r7
 8017d4a:	b289      	uxth	r1, r1
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017d52:	429d      	cmp	r5, r3
 8017d54:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017d58:	f84c 1b04 	str.w	r1, [ip], #4
 8017d5c:	dcec      	bgt.n	8017d38 <__multadd+0x12>
 8017d5e:	b1d7      	cbz	r7, 8017d96 <__multadd+0x70>
 8017d60:	68a3      	ldr	r3, [r4, #8]
 8017d62:	42ab      	cmp	r3, r5
 8017d64:	dc12      	bgt.n	8017d8c <__multadd+0x66>
 8017d66:	6861      	ldr	r1, [r4, #4]
 8017d68:	4630      	mov	r0, r6
 8017d6a:	3101      	adds	r1, #1
 8017d6c:	f7ff ff90 	bl	8017c90 <_Balloc>
 8017d70:	6922      	ldr	r2, [r4, #16]
 8017d72:	3202      	adds	r2, #2
 8017d74:	f104 010c 	add.w	r1, r4, #12
 8017d78:	4680      	mov	r8, r0
 8017d7a:	0092      	lsls	r2, r2, #2
 8017d7c:	300c      	adds	r0, #12
 8017d7e:	f7fe f9a3 	bl	80160c8 <memcpy>
 8017d82:	4621      	mov	r1, r4
 8017d84:	4630      	mov	r0, r6
 8017d86:	f7ff ffb7 	bl	8017cf8 <_Bfree>
 8017d8a:	4644      	mov	r4, r8
 8017d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017d90:	3501      	adds	r5, #1
 8017d92:	615f      	str	r7, [r3, #20]
 8017d94:	6125      	str	r5, [r4, #16]
 8017d96:	4620      	mov	r0, r4
 8017d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d9c <__hi0bits>:
 8017d9c:	0c02      	lsrs	r2, r0, #16
 8017d9e:	0412      	lsls	r2, r2, #16
 8017da0:	4603      	mov	r3, r0
 8017da2:	b9b2      	cbnz	r2, 8017dd2 <__hi0bits+0x36>
 8017da4:	0403      	lsls	r3, r0, #16
 8017da6:	2010      	movs	r0, #16
 8017da8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017dac:	bf04      	itt	eq
 8017dae:	021b      	lsleq	r3, r3, #8
 8017db0:	3008      	addeq	r0, #8
 8017db2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017db6:	bf04      	itt	eq
 8017db8:	011b      	lsleq	r3, r3, #4
 8017dba:	3004      	addeq	r0, #4
 8017dbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017dc0:	bf04      	itt	eq
 8017dc2:	009b      	lsleq	r3, r3, #2
 8017dc4:	3002      	addeq	r0, #2
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	db06      	blt.n	8017dd8 <__hi0bits+0x3c>
 8017dca:	005b      	lsls	r3, r3, #1
 8017dcc:	d503      	bpl.n	8017dd6 <__hi0bits+0x3a>
 8017dce:	3001      	adds	r0, #1
 8017dd0:	4770      	bx	lr
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	e7e8      	b.n	8017da8 <__hi0bits+0xc>
 8017dd6:	2020      	movs	r0, #32
 8017dd8:	4770      	bx	lr

08017dda <__lo0bits>:
 8017dda:	6803      	ldr	r3, [r0, #0]
 8017ddc:	f013 0207 	ands.w	r2, r3, #7
 8017de0:	4601      	mov	r1, r0
 8017de2:	d00b      	beq.n	8017dfc <__lo0bits+0x22>
 8017de4:	07da      	lsls	r2, r3, #31
 8017de6:	d423      	bmi.n	8017e30 <__lo0bits+0x56>
 8017de8:	0798      	lsls	r0, r3, #30
 8017dea:	bf49      	itett	mi
 8017dec:	085b      	lsrmi	r3, r3, #1
 8017dee:	089b      	lsrpl	r3, r3, #2
 8017df0:	2001      	movmi	r0, #1
 8017df2:	600b      	strmi	r3, [r1, #0]
 8017df4:	bf5c      	itt	pl
 8017df6:	600b      	strpl	r3, [r1, #0]
 8017df8:	2002      	movpl	r0, #2
 8017dfa:	4770      	bx	lr
 8017dfc:	b298      	uxth	r0, r3
 8017dfe:	b9a8      	cbnz	r0, 8017e2c <__lo0bits+0x52>
 8017e00:	0c1b      	lsrs	r3, r3, #16
 8017e02:	2010      	movs	r0, #16
 8017e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017e08:	bf04      	itt	eq
 8017e0a:	0a1b      	lsreq	r3, r3, #8
 8017e0c:	3008      	addeq	r0, #8
 8017e0e:	071a      	lsls	r2, r3, #28
 8017e10:	bf04      	itt	eq
 8017e12:	091b      	lsreq	r3, r3, #4
 8017e14:	3004      	addeq	r0, #4
 8017e16:	079a      	lsls	r2, r3, #30
 8017e18:	bf04      	itt	eq
 8017e1a:	089b      	lsreq	r3, r3, #2
 8017e1c:	3002      	addeq	r0, #2
 8017e1e:	07da      	lsls	r2, r3, #31
 8017e20:	d402      	bmi.n	8017e28 <__lo0bits+0x4e>
 8017e22:	085b      	lsrs	r3, r3, #1
 8017e24:	d006      	beq.n	8017e34 <__lo0bits+0x5a>
 8017e26:	3001      	adds	r0, #1
 8017e28:	600b      	str	r3, [r1, #0]
 8017e2a:	4770      	bx	lr
 8017e2c:	4610      	mov	r0, r2
 8017e2e:	e7e9      	b.n	8017e04 <__lo0bits+0x2a>
 8017e30:	2000      	movs	r0, #0
 8017e32:	4770      	bx	lr
 8017e34:	2020      	movs	r0, #32
 8017e36:	4770      	bx	lr

08017e38 <__i2b>:
 8017e38:	b510      	push	{r4, lr}
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	2101      	movs	r1, #1
 8017e3e:	f7ff ff27 	bl	8017c90 <_Balloc>
 8017e42:	2201      	movs	r2, #1
 8017e44:	6144      	str	r4, [r0, #20]
 8017e46:	6102      	str	r2, [r0, #16]
 8017e48:	bd10      	pop	{r4, pc}

08017e4a <__multiply>:
 8017e4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4e:	4614      	mov	r4, r2
 8017e50:	690a      	ldr	r2, [r1, #16]
 8017e52:	6923      	ldr	r3, [r4, #16]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	bfb8      	it	lt
 8017e58:	460b      	movlt	r3, r1
 8017e5a:	4688      	mov	r8, r1
 8017e5c:	bfbc      	itt	lt
 8017e5e:	46a0      	movlt	r8, r4
 8017e60:	461c      	movlt	r4, r3
 8017e62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017e66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017e72:	eb07 0609 	add.w	r6, r7, r9
 8017e76:	42b3      	cmp	r3, r6
 8017e78:	bfb8      	it	lt
 8017e7a:	3101      	addlt	r1, #1
 8017e7c:	f7ff ff08 	bl	8017c90 <_Balloc>
 8017e80:	f100 0514 	add.w	r5, r0, #20
 8017e84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017e88:	462b      	mov	r3, r5
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	4573      	cmp	r3, lr
 8017e8e:	d316      	bcc.n	8017ebe <__multiply+0x74>
 8017e90:	f104 0214 	add.w	r2, r4, #20
 8017e94:	f108 0114 	add.w	r1, r8, #20
 8017e98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017e9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017ea0:	9300      	str	r3, [sp, #0]
 8017ea2:	9b00      	ldr	r3, [sp, #0]
 8017ea4:	9201      	str	r2, [sp, #4]
 8017ea6:	4293      	cmp	r3, r2
 8017ea8:	d80c      	bhi.n	8017ec4 <__multiply+0x7a>
 8017eaa:	2e00      	cmp	r6, #0
 8017eac:	dd03      	ble.n	8017eb6 <__multiply+0x6c>
 8017eae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d05d      	beq.n	8017f72 <__multiply+0x128>
 8017eb6:	6106      	str	r6, [r0, #16]
 8017eb8:	b003      	add	sp, #12
 8017eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ebe:	f843 2b04 	str.w	r2, [r3], #4
 8017ec2:	e7e3      	b.n	8017e8c <__multiply+0x42>
 8017ec4:	f8b2 b000 	ldrh.w	fp, [r2]
 8017ec8:	f1bb 0f00 	cmp.w	fp, #0
 8017ecc:	d023      	beq.n	8017f16 <__multiply+0xcc>
 8017ece:	4689      	mov	r9, r1
 8017ed0:	46ac      	mov	ip, r5
 8017ed2:	f04f 0800 	mov.w	r8, #0
 8017ed6:	f859 4b04 	ldr.w	r4, [r9], #4
 8017eda:	f8dc a000 	ldr.w	sl, [ip]
 8017ede:	b2a3      	uxth	r3, r4
 8017ee0:	fa1f fa8a 	uxth.w	sl, sl
 8017ee4:	fb0b a303 	mla	r3, fp, r3, sl
 8017ee8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017eec:	f8dc 4000 	ldr.w	r4, [ip]
 8017ef0:	4443      	add	r3, r8
 8017ef2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017ef6:	fb0b 840a 	mla	r4, fp, sl, r8
 8017efa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017efe:	46e2      	mov	sl, ip
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017f06:	454f      	cmp	r7, r9
 8017f08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017f0c:	f84a 3b04 	str.w	r3, [sl], #4
 8017f10:	d82b      	bhi.n	8017f6a <__multiply+0x120>
 8017f12:	f8cc 8004 	str.w	r8, [ip, #4]
 8017f16:	9b01      	ldr	r3, [sp, #4]
 8017f18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017f1c:	3204      	adds	r2, #4
 8017f1e:	f1ba 0f00 	cmp.w	sl, #0
 8017f22:	d020      	beq.n	8017f66 <__multiply+0x11c>
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	4689      	mov	r9, r1
 8017f28:	46a8      	mov	r8, r5
 8017f2a:	f04f 0b00 	mov.w	fp, #0
 8017f2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8017f32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017f36:	fb0a 440c 	mla	r4, sl, ip, r4
 8017f3a:	445c      	add	r4, fp
 8017f3c:	46c4      	mov	ip, r8
 8017f3e:	b29b      	uxth	r3, r3
 8017f40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017f44:	f84c 3b04 	str.w	r3, [ip], #4
 8017f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8017f4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017f50:	0c1b      	lsrs	r3, r3, #16
 8017f52:	fb0a b303 	mla	r3, sl, r3, fp
 8017f56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017f5a:	454f      	cmp	r7, r9
 8017f5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017f60:	d805      	bhi.n	8017f6e <__multiply+0x124>
 8017f62:	f8c8 3004 	str.w	r3, [r8, #4]
 8017f66:	3504      	adds	r5, #4
 8017f68:	e79b      	b.n	8017ea2 <__multiply+0x58>
 8017f6a:	46d4      	mov	ip, sl
 8017f6c:	e7b3      	b.n	8017ed6 <__multiply+0x8c>
 8017f6e:	46e0      	mov	r8, ip
 8017f70:	e7dd      	b.n	8017f2e <__multiply+0xe4>
 8017f72:	3e01      	subs	r6, #1
 8017f74:	e799      	b.n	8017eaa <__multiply+0x60>
	...

08017f78 <__pow5mult>:
 8017f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f7c:	4615      	mov	r5, r2
 8017f7e:	f012 0203 	ands.w	r2, r2, #3
 8017f82:	4606      	mov	r6, r0
 8017f84:	460f      	mov	r7, r1
 8017f86:	d007      	beq.n	8017f98 <__pow5mult+0x20>
 8017f88:	3a01      	subs	r2, #1
 8017f8a:	4c21      	ldr	r4, [pc, #132]	; (8018010 <__pow5mult+0x98>)
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f92:	f7ff fec8 	bl	8017d26 <__multadd>
 8017f96:	4607      	mov	r7, r0
 8017f98:	10ad      	asrs	r5, r5, #2
 8017f9a:	d035      	beq.n	8018008 <__pow5mult+0x90>
 8017f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017f9e:	b93c      	cbnz	r4, 8017fb0 <__pow5mult+0x38>
 8017fa0:	2010      	movs	r0, #16
 8017fa2:	f7ff fe6d 	bl	8017c80 <malloc>
 8017fa6:	6270      	str	r0, [r6, #36]	; 0x24
 8017fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017fac:	6004      	str	r4, [r0, #0]
 8017fae:	60c4      	str	r4, [r0, #12]
 8017fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017fb8:	b94c      	cbnz	r4, 8017fce <__pow5mult+0x56>
 8017fba:	f240 2171 	movw	r1, #625	; 0x271
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	f7ff ff3a 	bl	8017e38 <__i2b>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8017fca:	4604      	mov	r4, r0
 8017fcc:	6003      	str	r3, [r0, #0]
 8017fce:	f04f 0800 	mov.w	r8, #0
 8017fd2:	07eb      	lsls	r3, r5, #31
 8017fd4:	d50a      	bpl.n	8017fec <__pow5mult+0x74>
 8017fd6:	4639      	mov	r1, r7
 8017fd8:	4622      	mov	r2, r4
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f7ff ff35 	bl	8017e4a <__multiply>
 8017fe0:	4639      	mov	r1, r7
 8017fe2:	4681      	mov	r9, r0
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	f7ff fe87 	bl	8017cf8 <_Bfree>
 8017fea:	464f      	mov	r7, r9
 8017fec:	106d      	asrs	r5, r5, #1
 8017fee:	d00b      	beq.n	8018008 <__pow5mult+0x90>
 8017ff0:	6820      	ldr	r0, [r4, #0]
 8017ff2:	b938      	cbnz	r0, 8018004 <__pow5mult+0x8c>
 8017ff4:	4622      	mov	r2, r4
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f7ff ff26 	bl	8017e4a <__multiply>
 8017ffe:	6020      	str	r0, [r4, #0]
 8018000:	f8c0 8000 	str.w	r8, [r0]
 8018004:	4604      	mov	r4, r0
 8018006:	e7e4      	b.n	8017fd2 <__pow5mult+0x5a>
 8018008:	4638      	mov	r0, r7
 801800a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801800e:	bf00      	nop
 8018010:	08018b30 	.word	0x08018b30

08018014 <__lshift>:
 8018014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018018:	460c      	mov	r4, r1
 801801a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801801e:	6923      	ldr	r3, [r4, #16]
 8018020:	6849      	ldr	r1, [r1, #4]
 8018022:	eb0a 0903 	add.w	r9, sl, r3
 8018026:	68a3      	ldr	r3, [r4, #8]
 8018028:	4607      	mov	r7, r0
 801802a:	4616      	mov	r6, r2
 801802c:	f109 0501 	add.w	r5, r9, #1
 8018030:	42ab      	cmp	r3, r5
 8018032:	db32      	blt.n	801809a <__lshift+0x86>
 8018034:	4638      	mov	r0, r7
 8018036:	f7ff fe2b 	bl	8017c90 <_Balloc>
 801803a:	2300      	movs	r3, #0
 801803c:	4680      	mov	r8, r0
 801803e:	f100 0114 	add.w	r1, r0, #20
 8018042:	461a      	mov	r2, r3
 8018044:	4553      	cmp	r3, sl
 8018046:	db2b      	blt.n	80180a0 <__lshift+0x8c>
 8018048:	6920      	ldr	r0, [r4, #16]
 801804a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801804e:	f104 0314 	add.w	r3, r4, #20
 8018052:	f016 021f 	ands.w	r2, r6, #31
 8018056:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801805a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801805e:	d025      	beq.n	80180ac <__lshift+0x98>
 8018060:	f1c2 0e20 	rsb	lr, r2, #32
 8018064:	2000      	movs	r0, #0
 8018066:	681e      	ldr	r6, [r3, #0]
 8018068:	468a      	mov	sl, r1
 801806a:	4096      	lsls	r6, r2
 801806c:	4330      	orrs	r0, r6
 801806e:	f84a 0b04 	str.w	r0, [sl], #4
 8018072:	f853 0b04 	ldr.w	r0, [r3], #4
 8018076:	459c      	cmp	ip, r3
 8018078:	fa20 f00e 	lsr.w	r0, r0, lr
 801807c:	d814      	bhi.n	80180a8 <__lshift+0x94>
 801807e:	6048      	str	r0, [r1, #4]
 8018080:	b108      	cbz	r0, 8018086 <__lshift+0x72>
 8018082:	f109 0502 	add.w	r5, r9, #2
 8018086:	3d01      	subs	r5, #1
 8018088:	4638      	mov	r0, r7
 801808a:	f8c8 5010 	str.w	r5, [r8, #16]
 801808e:	4621      	mov	r1, r4
 8018090:	f7ff fe32 	bl	8017cf8 <_Bfree>
 8018094:	4640      	mov	r0, r8
 8018096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801809a:	3101      	adds	r1, #1
 801809c:	005b      	lsls	r3, r3, #1
 801809e:	e7c7      	b.n	8018030 <__lshift+0x1c>
 80180a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80180a4:	3301      	adds	r3, #1
 80180a6:	e7cd      	b.n	8018044 <__lshift+0x30>
 80180a8:	4651      	mov	r1, sl
 80180aa:	e7dc      	b.n	8018066 <__lshift+0x52>
 80180ac:	3904      	subs	r1, #4
 80180ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80180b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80180b6:	459c      	cmp	ip, r3
 80180b8:	d8f9      	bhi.n	80180ae <__lshift+0x9a>
 80180ba:	e7e4      	b.n	8018086 <__lshift+0x72>

080180bc <__mcmp>:
 80180bc:	6903      	ldr	r3, [r0, #16]
 80180be:	690a      	ldr	r2, [r1, #16]
 80180c0:	1a9b      	subs	r3, r3, r2
 80180c2:	b530      	push	{r4, r5, lr}
 80180c4:	d10c      	bne.n	80180e0 <__mcmp+0x24>
 80180c6:	0092      	lsls	r2, r2, #2
 80180c8:	3014      	adds	r0, #20
 80180ca:	3114      	adds	r1, #20
 80180cc:	1884      	adds	r4, r0, r2
 80180ce:	4411      	add	r1, r2
 80180d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80180d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80180d8:	4295      	cmp	r5, r2
 80180da:	d003      	beq.n	80180e4 <__mcmp+0x28>
 80180dc:	d305      	bcc.n	80180ea <__mcmp+0x2e>
 80180de:	2301      	movs	r3, #1
 80180e0:	4618      	mov	r0, r3
 80180e2:	bd30      	pop	{r4, r5, pc}
 80180e4:	42a0      	cmp	r0, r4
 80180e6:	d3f3      	bcc.n	80180d0 <__mcmp+0x14>
 80180e8:	e7fa      	b.n	80180e0 <__mcmp+0x24>
 80180ea:	f04f 33ff 	mov.w	r3, #4294967295
 80180ee:	e7f7      	b.n	80180e0 <__mcmp+0x24>

080180f0 <__mdiff>:
 80180f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f4:	460d      	mov	r5, r1
 80180f6:	4607      	mov	r7, r0
 80180f8:	4611      	mov	r1, r2
 80180fa:	4628      	mov	r0, r5
 80180fc:	4614      	mov	r4, r2
 80180fe:	f7ff ffdd 	bl	80180bc <__mcmp>
 8018102:	1e06      	subs	r6, r0, #0
 8018104:	d108      	bne.n	8018118 <__mdiff+0x28>
 8018106:	4631      	mov	r1, r6
 8018108:	4638      	mov	r0, r7
 801810a:	f7ff fdc1 	bl	8017c90 <_Balloc>
 801810e:	2301      	movs	r3, #1
 8018110:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018118:	bfa4      	itt	ge
 801811a:	4623      	movge	r3, r4
 801811c:	462c      	movge	r4, r5
 801811e:	4638      	mov	r0, r7
 8018120:	6861      	ldr	r1, [r4, #4]
 8018122:	bfa6      	itte	ge
 8018124:	461d      	movge	r5, r3
 8018126:	2600      	movge	r6, #0
 8018128:	2601      	movlt	r6, #1
 801812a:	f7ff fdb1 	bl	8017c90 <_Balloc>
 801812e:	692b      	ldr	r3, [r5, #16]
 8018130:	60c6      	str	r6, [r0, #12]
 8018132:	6926      	ldr	r6, [r4, #16]
 8018134:	f105 0914 	add.w	r9, r5, #20
 8018138:	f104 0214 	add.w	r2, r4, #20
 801813c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018140:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018144:	f100 0514 	add.w	r5, r0, #20
 8018148:	f04f 0e00 	mov.w	lr, #0
 801814c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018150:	f859 4b04 	ldr.w	r4, [r9], #4
 8018154:	fa1e f18a 	uxtah	r1, lr, sl
 8018158:	b2a3      	uxth	r3, r4
 801815a:	1ac9      	subs	r1, r1, r3
 801815c:	0c23      	lsrs	r3, r4, #16
 801815e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018162:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018166:	b289      	uxth	r1, r1
 8018168:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801816c:	45c8      	cmp	r8, r9
 801816e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018172:	4694      	mov	ip, r2
 8018174:	f845 3b04 	str.w	r3, [r5], #4
 8018178:	d8e8      	bhi.n	801814c <__mdiff+0x5c>
 801817a:	45bc      	cmp	ip, r7
 801817c:	d304      	bcc.n	8018188 <__mdiff+0x98>
 801817e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018182:	b183      	cbz	r3, 80181a6 <__mdiff+0xb6>
 8018184:	6106      	str	r6, [r0, #16]
 8018186:	e7c5      	b.n	8018114 <__mdiff+0x24>
 8018188:	f85c 1b04 	ldr.w	r1, [ip], #4
 801818c:	fa1e f381 	uxtah	r3, lr, r1
 8018190:	141a      	asrs	r2, r3, #16
 8018192:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018196:	b29b      	uxth	r3, r3
 8018198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801819c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80181a0:	f845 3b04 	str.w	r3, [r5], #4
 80181a4:	e7e9      	b.n	801817a <__mdiff+0x8a>
 80181a6:	3e01      	subs	r6, #1
 80181a8:	e7e9      	b.n	801817e <__mdiff+0x8e>

080181aa <__d2b>:
 80181aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181ae:	460e      	mov	r6, r1
 80181b0:	2101      	movs	r1, #1
 80181b2:	ec59 8b10 	vmov	r8, r9, d0
 80181b6:	4615      	mov	r5, r2
 80181b8:	f7ff fd6a 	bl	8017c90 <_Balloc>
 80181bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80181c0:	4607      	mov	r7, r0
 80181c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80181c6:	bb34      	cbnz	r4, 8018216 <__d2b+0x6c>
 80181c8:	9301      	str	r3, [sp, #4]
 80181ca:	f1b8 0300 	subs.w	r3, r8, #0
 80181ce:	d027      	beq.n	8018220 <__d2b+0x76>
 80181d0:	a802      	add	r0, sp, #8
 80181d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80181d6:	f7ff fe00 	bl	8017dda <__lo0bits>
 80181da:	9900      	ldr	r1, [sp, #0]
 80181dc:	b1f0      	cbz	r0, 801821c <__d2b+0x72>
 80181de:	9a01      	ldr	r2, [sp, #4]
 80181e0:	f1c0 0320 	rsb	r3, r0, #32
 80181e4:	fa02 f303 	lsl.w	r3, r2, r3
 80181e8:	430b      	orrs	r3, r1
 80181ea:	40c2      	lsrs	r2, r0
 80181ec:	617b      	str	r3, [r7, #20]
 80181ee:	9201      	str	r2, [sp, #4]
 80181f0:	9b01      	ldr	r3, [sp, #4]
 80181f2:	61bb      	str	r3, [r7, #24]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	bf14      	ite	ne
 80181f8:	2102      	movne	r1, #2
 80181fa:	2101      	moveq	r1, #1
 80181fc:	6139      	str	r1, [r7, #16]
 80181fe:	b1c4      	cbz	r4, 8018232 <__d2b+0x88>
 8018200:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018204:	4404      	add	r4, r0
 8018206:	6034      	str	r4, [r6, #0]
 8018208:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801820c:	6028      	str	r0, [r5, #0]
 801820e:	4638      	mov	r0, r7
 8018210:	b003      	add	sp, #12
 8018212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801821a:	e7d5      	b.n	80181c8 <__d2b+0x1e>
 801821c:	6179      	str	r1, [r7, #20]
 801821e:	e7e7      	b.n	80181f0 <__d2b+0x46>
 8018220:	a801      	add	r0, sp, #4
 8018222:	f7ff fdda 	bl	8017dda <__lo0bits>
 8018226:	9b01      	ldr	r3, [sp, #4]
 8018228:	617b      	str	r3, [r7, #20]
 801822a:	2101      	movs	r1, #1
 801822c:	6139      	str	r1, [r7, #16]
 801822e:	3020      	adds	r0, #32
 8018230:	e7e5      	b.n	80181fe <__d2b+0x54>
 8018232:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018236:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801823a:	6030      	str	r0, [r6, #0]
 801823c:	6918      	ldr	r0, [r3, #16]
 801823e:	f7ff fdad 	bl	8017d9c <__hi0bits>
 8018242:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018246:	e7e1      	b.n	801820c <__d2b+0x62>

08018248 <_calloc_r>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	fb02 f401 	mul.w	r4, r2, r1
 801824e:	4621      	mov	r1, r4
 8018250:	f000 f856 	bl	8018300 <_malloc_r>
 8018254:	4605      	mov	r5, r0
 8018256:	b118      	cbz	r0, 8018260 <_calloc_r+0x18>
 8018258:	4622      	mov	r2, r4
 801825a:	2100      	movs	r1, #0
 801825c:	f7fd ff3f 	bl	80160de <memset>
 8018260:	4628      	mov	r0, r5
 8018262:	bd38      	pop	{r3, r4, r5, pc}

08018264 <_free_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4605      	mov	r5, r0
 8018268:	2900      	cmp	r1, #0
 801826a:	d045      	beq.n	80182f8 <_free_r+0x94>
 801826c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018270:	1f0c      	subs	r4, r1, #4
 8018272:	2b00      	cmp	r3, #0
 8018274:	bfb8      	it	lt
 8018276:	18e4      	addlt	r4, r4, r3
 8018278:	f000 fa98 	bl	80187ac <__malloc_lock>
 801827c:	4a1f      	ldr	r2, [pc, #124]	; (80182fc <_free_r+0x98>)
 801827e:	6813      	ldr	r3, [r2, #0]
 8018280:	4610      	mov	r0, r2
 8018282:	b933      	cbnz	r3, 8018292 <_free_r+0x2e>
 8018284:	6063      	str	r3, [r4, #4]
 8018286:	6014      	str	r4, [r2, #0]
 8018288:	4628      	mov	r0, r5
 801828a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801828e:	f000 ba8e 	b.w	80187ae <__malloc_unlock>
 8018292:	42a3      	cmp	r3, r4
 8018294:	d90c      	bls.n	80182b0 <_free_r+0x4c>
 8018296:	6821      	ldr	r1, [r4, #0]
 8018298:	1862      	adds	r2, r4, r1
 801829a:	4293      	cmp	r3, r2
 801829c:	bf04      	itt	eq
 801829e:	681a      	ldreq	r2, [r3, #0]
 80182a0:	685b      	ldreq	r3, [r3, #4]
 80182a2:	6063      	str	r3, [r4, #4]
 80182a4:	bf04      	itt	eq
 80182a6:	1852      	addeq	r2, r2, r1
 80182a8:	6022      	streq	r2, [r4, #0]
 80182aa:	6004      	str	r4, [r0, #0]
 80182ac:	e7ec      	b.n	8018288 <_free_r+0x24>
 80182ae:	4613      	mov	r3, r2
 80182b0:	685a      	ldr	r2, [r3, #4]
 80182b2:	b10a      	cbz	r2, 80182b8 <_free_r+0x54>
 80182b4:	42a2      	cmp	r2, r4
 80182b6:	d9fa      	bls.n	80182ae <_free_r+0x4a>
 80182b8:	6819      	ldr	r1, [r3, #0]
 80182ba:	1858      	adds	r0, r3, r1
 80182bc:	42a0      	cmp	r0, r4
 80182be:	d10b      	bne.n	80182d8 <_free_r+0x74>
 80182c0:	6820      	ldr	r0, [r4, #0]
 80182c2:	4401      	add	r1, r0
 80182c4:	1858      	adds	r0, r3, r1
 80182c6:	4282      	cmp	r2, r0
 80182c8:	6019      	str	r1, [r3, #0]
 80182ca:	d1dd      	bne.n	8018288 <_free_r+0x24>
 80182cc:	6810      	ldr	r0, [r2, #0]
 80182ce:	6852      	ldr	r2, [r2, #4]
 80182d0:	605a      	str	r2, [r3, #4]
 80182d2:	4401      	add	r1, r0
 80182d4:	6019      	str	r1, [r3, #0]
 80182d6:	e7d7      	b.n	8018288 <_free_r+0x24>
 80182d8:	d902      	bls.n	80182e0 <_free_r+0x7c>
 80182da:	230c      	movs	r3, #12
 80182dc:	602b      	str	r3, [r5, #0]
 80182de:	e7d3      	b.n	8018288 <_free_r+0x24>
 80182e0:	6820      	ldr	r0, [r4, #0]
 80182e2:	1821      	adds	r1, r4, r0
 80182e4:	428a      	cmp	r2, r1
 80182e6:	bf04      	itt	eq
 80182e8:	6811      	ldreq	r1, [r2, #0]
 80182ea:	6852      	ldreq	r2, [r2, #4]
 80182ec:	6062      	str	r2, [r4, #4]
 80182ee:	bf04      	itt	eq
 80182f0:	1809      	addeq	r1, r1, r0
 80182f2:	6021      	streq	r1, [r4, #0]
 80182f4:	605c      	str	r4, [r3, #4]
 80182f6:	e7c7      	b.n	8018288 <_free_r+0x24>
 80182f8:	bd38      	pop	{r3, r4, r5, pc}
 80182fa:	bf00      	nop
 80182fc:	2000e000 	.word	0x2000e000

08018300 <_malloc_r>:
 8018300:	b570      	push	{r4, r5, r6, lr}
 8018302:	1ccd      	adds	r5, r1, #3
 8018304:	f025 0503 	bic.w	r5, r5, #3
 8018308:	3508      	adds	r5, #8
 801830a:	2d0c      	cmp	r5, #12
 801830c:	bf38      	it	cc
 801830e:	250c      	movcc	r5, #12
 8018310:	2d00      	cmp	r5, #0
 8018312:	4606      	mov	r6, r0
 8018314:	db01      	blt.n	801831a <_malloc_r+0x1a>
 8018316:	42a9      	cmp	r1, r5
 8018318:	d903      	bls.n	8018322 <_malloc_r+0x22>
 801831a:	230c      	movs	r3, #12
 801831c:	6033      	str	r3, [r6, #0]
 801831e:	2000      	movs	r0, #0
 8018320:	bd70      	pop	{r4, r5, r6, pc}
 8018322:	f000 fa43 	bl	80187ac <__malloc_lock>
 8018326:	4a21      	ldr	r2, [pc, #132]	; (80183ac <_malloc_r+0xac>)
 8018328:	6814      	ldr	r4, [r2, #0]
 801832a:	4621      	mov	r1, r4
 801832c:	b991      	cbnz	r1, 8018354 <_malloc_r+0x54>
 801832e:	4c20      	ldr	r4, [pc, #128]	; (80183b0 <_malloc_r+0xb0>)
 8018330:	6823      	ldr	r3, [r4, #0]
 8018332:	b91b      	cbnz	r3, 801833c <_malloc_r+0x3c>
 8018334:	4630      	mov	r0, r6
 8018336:	f000 f97d 	bl	8018634 <_sbrk_r>
 801833a:	6020      	str	r0, [r4, #0]
 801833c:	4629      	mov	r1, r5
 801833e:	4630      	mov	r0, r6
 8018340:	f000 f978 	bl	8018634 <_sbrk_r>
 8018344:	1c43      	adds	r3, r0, #1
 8018346:	d124      	bne.n	8018392 <_malloc_r+0x92>
 8018348:	230c      	movs	r3, #12
 801834a:	6033      	str	r3, [r6, #0]
 801834c:	4630      	mov	r0, r6
 801834e:	f000 fa2e 	bl	80187ae <__malloc_unlock>
 8018352:	e7e4      	b.n	801831e <_malloc_r+0x1e>
 8018354:	680b      	ldr	r3, [r1, #0]
 8018356:	1b5b      	subs	r3, r3, r5
 8018358:	d418      	bmi.n	801838c <_malloc_r+0x8c>
 801835a:	2b0b      	cmp	r3, #11
 801835c:	d90f      	bls.n	801837e <_malloc_r+0x7e>
 801835e:	600b      	str	r3, [r1, #0]
 8018360:	50cd      	str	r5, [r1, r3]
 8018362:	18cc      	adds	r4, r1, r3
 8018364:	4630      	mov	r0, r6
 8018366:	f000 fa22 	bl	80187ae <__malloc_unlock>
 801836a:	f104 000b 	add.w	r0, r4, #11
 801836e:	1d23      	adds	r3, r4, #4
 8018370:	f020 0007 	bic.w	r0, r0, #7
 8018374:	1ac3      	subs	r3, r0, r3
 8018376:	d0d3      	beq.n	8018320 <_malloc_r+0x20>
 8018378:	425a      	negs	r2, r3
 801837a:	50e2      	str	r2, [r4, r3]
 801837c:	e7d0      	b.n	8018320 <_malloc_r+0x20>
 801837e:	428c      	cmp	r4, r1
 8018380:	684b      	ldr	r3, [r1, #4]
 8018382:	bf16      	itet	ne
 8018384:	6063      	strne	r3, [r4, #4]
 8018386:	6013      	streq	r3, [r2, #0]
 8018388:	460c      	movne	r4, r1
 801838a:	e7eb      	b.n	8018364 <_malloc_r+0x64>
 801838c:	460c      	mov	r4, r1
 801838e:	6849      	ldr	r1, [r1, #4]
 8018390:	e7cc      	b.n	801832c <_malloc_r+0x2c>
 8018392:	1cc4      	adds	r4, r0, #3
 8018394:	f024 0403 	bic.w	r4, r4, #3
 8018398:	42a0      	cmp	r0, r4
 801839a:	d005      	beq.n	80183a8 <_malloc_r+0xa8>
 801839c:	1a21      	subs	r1, r4, r0
 801839e:	4630      	mov	r0, r6
 80183a0:	f000 f948 	bl	8018634 <_sbrk_r>
 80183a4:	3001      	adds	r0, #1
 80183a6:	d0cf      	beq.n	8018348 <_malloc_r+0x48>
 80183a8:	6025      	str	r5, [r4, #0]
 80183aa:	e7db      	b.n	8018364 <_malloc_r+0x64>
 80183ac:	2000e000 	.word	0x2000e000
 80183b0:	2000e004 	.word	0x2000e004

080183b4 <__sfputc_r>:
 80183b4:	6893      	ldr	r3, [r2, #8]
 80183b6:	3b01      	subs	r3, #1
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	b410      	push	{r4}
 80183bc:	6093      	str	r3, [r2, #8]
 80183be:	da08      	bge.n	80183d2 <__sfputc_r+0x1e>
 80183c0:	6994      	ldr	r4, [r2, #24]
 80183c2:	42a3      	cmp	r3, r4
 80183c4:	db01      	blt.n	80183ca <__sfputc_r+0x16>
 80183c6:	290a      	cmp	r1, #10
 80183c8:	d103      	bne.n	80183d2 <__sfputc_r+0x1e>
 80183ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183ce:	f7fe bb67 	b.w	8016aa0 <__swbuf_r>
 80183d2:	6813      	ldr	r3, [r2, #0]
 80183d4:	1c58      	adds	r0, r3, #1
 80183d6:	6010      	str	r0, [r2, #0]
 80183d8:	7019      	strb	r1, [r3, #0]
 80183da:	4608      	mov	r0, r1
 80183dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183e0:	4770      	bx	lr

080183e2 <__sfputs_r>:
 80183e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183e4:	4606      	mov	r6, r0
 80183e6:	460f      	mov	r7, r1
 80183e8:	4614      	mov	r4, r2
 80183ea:	18d5      	adds	r5, r2, r3
 80183ec:	42ac      	cmp	r4, r5
 80183ee:	d101      	bne.n	80183f4 <__sfputs_r+0x12>
 80183f0:	2000      	movs	r0, #0
 80183f2:	e007      	b.n	8018404 <__sfputs_r+0x22>
 80183f4:	463a      	mov	r2, r7
 80183f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183fa:	4630      	mov	r0, r6
 80183fc:	f7ff ffda 	bl	80183b4 <__sfputc_r>
 8018400:	1c43      	adds	r3, r0, #1
 8018402:	d1f3      	bne.n	80183ec <__sfputs_r+0xa>
 8018404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018408 <_vfiprintf_r>:
 8018408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801840c:	460c      	mov	r4, r1
 801840e:	b09d      	sub	sp, #116	; 0x74
 8018410:	4617      	mov	r7, r2
 8018412:	461d      	mov	r5, r3
 8018414:	4606      	mov	r6, r0
 8018416:	b118      	cbz	r0, 8018420 <_vfiprintf_r+0x18>
 8018418:	6983      	ldr	r3, [r0, #24]
 801841a:	b90b      	cbnz	r3, 8018420 <_vfiprintf_r+0x18>
 801841c:	f7ff fb34 	bl	8017a88 <__sinit>
 8018420:	4b7c      	ldr	r3, [pc, #496]	; (8018614 <_vfiprintf_r+0x20c>)
 8018422:	429c      	cmp	r4, r3
 8018424:	d158      	bne.n	80184d8 <_vfiprintf_r+0xd0>
 8018426:	6874      	ldr	r4, [r6, #4]
 8018428:	89a3      	ldrh	r3, [r4, #12]
 801842a:	0718      	lsls	r0, r3, #28
 801842c:	d55e      	bpl.n	80184ec <_vfiprintf_r+0xe4>
 801842e:	6923      	ldr	r3, [r4, #16]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d05b      	beq.n	80184ec <_vfiprintf_r+0xe4>
 8018434:	2300      	movs	r3, #0
 8018436:	9309      	str	r3, [sp, #36]	; 0x24
 8018438:	2320      	movs	r3, #32
 801843a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801843e:	2330      	movs	r3, #48	; 0x30
 8018440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018444:	9503      	str	r5, [sp, #12]
 8018446:	f04f 0b01 	mov.w	fp, #1
 801844a:	46b8      	mov	r8, r7
 801844c:	4645      	mov	r5, r8
 801844e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018452:	b10b      	cbz	r3, 8018458 <_vfiprintf_r+0x50>
 8018454:	2b25      	cmp	r3, #37	; 0x25
 8018456:	d154      	bne.n	8018502 <_vfiprintf_r+0xfa>
 8018458:	ebb8 0a07 	subs.w	sl, r8, r7
 801845c:	d00b      	beq.n	8018476 <_vfiprintf_r+0x6e>
 801845e:	4653      	mov	r3, sl
 8018460:	463a      	mov	r2, r7
 8018462:	4621      	mov	r1, r4
 8018464:	4630      	mov	r0, r6
 8018466:	f7ff ffbc 	bl	80183e2 <__sfputs_r>
 801846a:	3001      	adds	r0, #1
 801846c:	f000 80c2 	beq.w	80185f4 <_vfiprintf_r+0x1ec>
 8018470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018472:	4453      	add	r3, sl
 8018474:	9309      	str	r3, [sp, #36]	; 0x24
 8018476:	f898 3000 	ldrb.w	r3, [r8]
 801847a:	2b00      	cmp	r3, #0
 801847c:	f000 80ba 	beq.w	80185f4 <_vfiprintf_r+0x1ec>
 8018480:	2300      	movs	r3, #0
 8018482:	f04f 32ff 	mov.w	r2, #4294967295
 8018486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801848a:	9304      	str	r3, [sp, #16]
 801848c:	9307      	str	r3, [sp, #28]
 801848e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018492:	931a      	str	r3, [sp, #104]	; 0x68
 8018494:	46a8      	mov	r8, r5
 8018496:	2205      	movs	r2, #5
 8018498:	f818 1b01 	ldrb.w	r1, [r8], #1
 801849c:	485e      	ldr	r0, [pc, #376]	; (8018618 <_vfiprintf_r+0x210>)
 801849e:	f7ef fdd7 	bl	8008050 <memchr>
 80184a2:	9b04      	ldr	r3, [sp, #16]
 80184a4:	bb78      	cbnz	r0, 8018506 <_vfiprintf_r+0xfe>
 80184a6:	06d9      	lsls	r1, r3, #27
 80184a8:	bf44      	itt	mi
 80184aa:	2220      	movmi	r2, #32
 80184ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80184b0:	071a      	lsls	r2, r3, #28
 80184b2:	bf44      	itt	mi
 80184b4:	222b      	movmi	r2, #43	; 0x2b
 80184b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80184ba:	782a      	ldrb	r2, [r5, #0]
 80184bc:	2a2a      	cmp	r2, #42	; 0x2a
 80184be:	d02a      	beq.n	8018516 <_vfiprintf_r+0x10e>
 80184c0:	9a07      	ldr	r2, [sp, #28]
 80184c2:	46a8      	mov	r8, r5
 80184c4:	2000      	movs	r0, #0
 80184c6:	250a      	movs	r5, #10
 80184c8:	4641      	mov	r1, r8
 80184ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184ce:	3b30      	subs	r3, #48	; 0x30
 80184d0:	2b09      	cmp	r3, #9
 80184d2:	d969      	bls.n	80185a8 <_vfiprintf_r+0x1a0>
 80184d4:	b360      	cbz	r0, 8018530 <_vfiprintf_r+0x128>
 80184d6:	e024      	b.n	8018522 <_vfiprintf_r+0x11a>
 80184d8:	4b50      	ldr	r3, [pc, #320]	; (801861c <_vfiprintf_r+0x214>)
 80184da:	429c      	cmp	r4, r3
 80184dc:	d101      	bne.n	80184e2 <_vfiprintf_r+0xda>
 80184de:	68b4      	ldr	r4, [r6, #8]
 80184e0:	e7a2      	b.n	8018428 <_vfiprintf_r+0x20>
 80184e2:	4b4f      	ldr	r3, [pc, #316]	; (8018620 <_vfiprintf_r+0x218>)
 80184e4:	429c      	cmp	r4, r3
 80184e6:	bf08      	it	eq
 80184e8:	68f4      	ldreq	r4, [r6, #12]
 80184ea:	e79d      	b.n	8018428 <_vfiprintf_r+0x20>
 80184ec:	4621      	mov	r1, r4
 80184ee:	4630      	mov	r0, r6
 80184f0:	f7fe fb28 	bl	8016b44 <__swsetup_r>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	d09d      	beq.n	8018434 <_vfiprintf_r+0x2c>
 80184f8:	f04f 30ff 	mov.w	r0, #4294967295
 80184fc:	b01d      	add	sp, #116	; 0x74
 80184fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018502:	46a8      	mov	r8, r5
 8018504:	e7a2      	b.n	801844c <_vfiprintf_r+0x44>
 8018506:	4a44      	ldr	r2, [pc, #272]	; (8018618 <_vfiprintf_r+0x210>)
 8018508:	1a80      	subs	r0, r0, r2
 801850a:	fa0b f000 	lsl.w	r0, fp, r0
 801850e:	4318      	orrs	r0, r3
 8018510:	9004      	str	r0, [sp, #16]
 8018512:	4645      	mov	r5, r8
 8018514:	e7be      	b.n	8018494 <_vfiprintf_r+0x8c>
 8018516:	9a03      	ldr	r2, [sp, #12]
 8018518:	1d11      	adds	r1, r2, #4
 801851a:	6812      	ldr	r2, [r2, #0]
 801851c:	9103      	str	r1, [sp, #12]
 801851e:	2a00      	cmp	r2, #0
 8018520:	db01      	blt.n	8018526 <_vfiprintf_r+0x11e>
 8018522:	9207      	str	r2, [sp, #28]
 8018524:	e004      	b.n	8018530 <_vfiprintf_r+0x128>
 8018526:	4252      	negs	r2, r2
 8018528:	f043 0302 	orr.w	r3, r3, #2
 801852c:	9207      	str	r2, [sp, #28]
 801852e:	9304      	str	r3, [sp, #16]
 8018530:	f898 3000 	ldrb.w	r3, [r8]
 8018534:	2b2e      	cmp	r3, #46	; 0x2e
 8018536:	d10e      	bne.n	8018556 <_vfiprintf_r+0x14e>
 8018538:	f898 3001 	ldrb.w	r3, [r8, #1]
 801853c:	2b2a      	cmp	r3, #42	; 0x2a
 801853e:	d138      	bne.n	80185b2 <_vfiprintf_r+0x1aa>
 8018540:	9b03      	ldr	r3, [sp, #12]
 8018542:	1d1a      	adds	r2, r3, #4
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	9203      	str	r2, [sp, #12]
 8018548:	2b00      	cmp	r3, #0
 801854a:	bfb8      	it	lt
 801854c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018550:	f108 0802 	add.w	r8, r8, #2
 8018554:	9305      	str	r3, [sp, #20]
 8018556:	4d33      	ldr	r5, [pc, #204]	; (8018624 <_vfiprintf_r+0x21c>)
 8018558:	f898 1000 	ldrb.w	r1, [r8]
 801855c:	2203      	movs	r2, #3
 801855e:	4628      	mov	r0, r5
 8018560:	f7ef fd76 	bl	8008050 <memchr>
 8018564:	b140      	cbz	r0, 8018578 <_vfiprintf_r+0x170>
 8018566:	2340      	movs	r3, #64	; 0x40
 8018568:	1b40      	subs	r0, r0, r5
 801856a:	fa03 f000 	lsl.w	r0, r3, r0
 801856e:	9b04      	ldr	r3, [sp, #16]
 8018570:	4303      	orrs	r3, r0
 8018572:	f108 0801 	add.w	r8, r8, #1
 8018576:	9304      	str	r3, [sp, #16]
 8018578:	f898 1000 	ldrb.w	r1, [r8]
 801857c:	482a      	ldr	r0, [pc, #168]	; (8018628 <_vfiprintf_r+0x220>)
 801857e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018582:	2206      	movs	r2, #6
 8018584:	f108 0701 	add.w	r7, r8, #1
 8018588:	f7ef fd62 	bl	8008050 <memchr>
 801858c:	2800      	cmp	r0, #0
 801858e:	d037      	beq.n	8018600 <_vfiprintf_r+0x1f8>
 8018590:	4b26      	ldr	r3, [pc, #152]	; (801862c <_vfiprintf_r+0x224>)
 8018592:	bb1b      	cbnz	r3, 80185dc <_vfiprintf_r+0x1d4>
 8018594:	9b03      	ldr	r3, [sp, #12]
 8018596:	3307      	adds	r3, #7
 8018598:	f023 0307 	bic.w	r3, r3, #7
 801859c:	3308      	adds	r3, #8
 801859e:	9303      	str	r3, [sp, #12]
 80185a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185a2:	444b      	add	r3, r9
 80185a4:	9309      	str	r3, [sp, #36]	; 0x24
 80185a6:	e750      	b.n	801844a <_vfiprintf_r+0x42>
 80185a8:	fb05 3202 	mla	r2, r5, r2, r3
 80185ac:	2001      	movs	r0, #1
 80185ae:	4688      	mov	r8, r1
 80185b0:	e78a      	b.n	80184c8 <_vfiprintf_r+0xc0>
 80185b2:	2300      	movs	r3, #0
 80185b4:	f108 0801 	add.w	r8, r8, #1
 80185b8:	9305      	str	r3, [sp, #20]
 80185ba:	4619      	mov	r1, r3
 80185bc:	250a      	movs	r5, #10
 80185be:	4640      	mov	r0, r8
 80185c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185c4:	3a30      	subs	r2, #48	; 0x30
 80185c6:	2a09      	cmp	r2, #9
 80185c8:	d903      	bls.n	80185d2 <_vfiprintf_r+0x1ca>
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d0c3      	beq.n	8018556 <_vfiprintf_r+0x14e>
 80185ce:	9105      	str	r1, [sp, #20]
 80185d0:	e7c1      	b.n	8018556 <_vfiprintf_r+0x14e>
 80185d2:	fb05 2101 	mla	r1, r5, r1, r2
 80185d6:	2301      	movs	r3, #1
 80185d8:	4680      	mov	r8, r0
 80185da:	e7f0      	b.n	80185be <_vfiprintf_r+0x1b6>
 80185dc:	ab03      	add	r3, sp, #12
 80185de:	9300      	str	r3, [sp, #0]
 80185e0:	4622      	mov	r2, r4
 80185e2:	4b13      	ldr	r3, [pc, #76]	; (8018630 <_vfiprintf_r+0x228>)
 80185e4:	a904      	add	r1, sp, #16
 80185e6:	4630      	mov	r0, r6
 80185e8:	f7fd fe16 	bl	8016218 <_printf_float>
 80185ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80185f0:	4681      	mov	r9, r0
 80185f2:	d1d5      	bne.n	80185a0 <_vfiprintf_r+0x198>
 80185f4:	89a3      	ldrh	r3, [r4, #12]
 80185f6:	065b      	lsls	r3, r3, #25
 80185f8:	f53f af7e 	bmi.w	80184f8 <_vfiprintf_r+0xf0>
 80185fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80185fe:	e77d      	b.n	80184fc <_vfiprintf_r+0xf4>
 8018600:	ab03      	add	r3, sp, #12
 8018602:	9300      	str	r3, [sp, #0]
 8018604:	4622      	mov	r2, r4
 8018606:	4b0a      	ldr	r3, [pc, #40]	; (8018630 <_vfiprintf_r+0x228>)
 8018608:	a904      	add	r1, sp, #16
 801860a:	4630      	mov	r0, r6
 801860c:	f7fe f8ba 	bl	8016784 <_printf_i>
 8018610:	e7ec      	b.n	80185ec <_vfiprintf_r+0x1e4>
 8018612:	bf00      	nop
 8018614:	08018a00 	.word	0x08018a00
 8018618:	08018b3c 	.word	0x08018b3c
 801861c:	08018a20 	.word	0x08018a20
 8018620:	080189e0 	.word	0x080189e0
 8018624:	08018b42 	.word	0x08018b42
 8018628:	08018b46 	.word	0x08018b46
 801862c:	08016219 	.word	0x08016219
 8018630:	080183e3 	.word	0x080183e3

08018634 <_sbrk_r>:
 8018634:	b538      	push	{r3, r4, r5, lr}
 8018636:	4c06      	ldr	r4, [pc, #24]	; (8018650 <_sbrk_r+0x1c>)
 8018638:	2300      	movs	r3, #0
 801863a:	4605      	mov	r5, r0
 801863c:	4608      	mov	r0, r1
 801863e:	6023      	str	r3, [r4, #0]
 8018640:	f7f8 fa40 	bl	8010ac4 <_sbrk>
 8018644:	1c43      	adds	r3, r0, #1
 8018646:	d102      	bne.n	801864e <_sbrk_r+0x1a>
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	b103      	cbz	r3, 801864e <_sbrk_r+0x1a>
 801864c:	602b      	str	r3, [r5, #0]
 801864e:	bd38      	pop	{r3, r4, r5, pc}
 8018650:	2001a7c4 	.word	0x2001a7c4

08018654 <__sread>:
 8018654:	b510      	push	{r4, lr}
 8018656:	460c      	mov	r4, r1
 8018658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801865c:	f000 f8a8 	bl	80187b0 <_read_r>
 8018660:	2800      	cmp	r0, #0
 8018662:	bfab      	itete	ge
 8018664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018666:	89a3      	ldrhlt	r3, [r4, #12]
 8018668:	181b      	addge	r3, r3, r0
 801866a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801866e:	bfac      	ite	ge
 8018670:	6563      	strge	r3, [r4, #84]	; 0x54
 8018672:	81a3      	strhlt	r3, [r4, #12]
 8018674:	bd10      	pop	{r4, pc}

08018676 <__swrite>:
 8018676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801867a:	461f      	mov	r7, r3
 801867c:	898b      	ldrh	r3, [r1, #12]
 801867e:	05db      	lsls	r3, r3, #23
 8018680:	4605      	mov	r5, r0
 8018682:	460c      	mov	r4, r1
 8018684:	4616      	mov	r6, r2
 8018686:	d505      	bpl.n	8018694 <__swrite+0x1e>
 8018688:	2302      	movs	r3, #2
 801868a:	2200      	movs	r2, #0
 801868c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018690:	f000 f868 	bl	8018764 <_lseek_r>
 8018694:	89a3      	ldrh	r3, [r4, #12]
 8018696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801869a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801869e:	81a3      	strh	r3, [r4, #12]
 80186a0:	4632      	mov	r2, r6
 80186a2:	463b      	mov	r3, r7
 80186a4:	4628      	mov	r0, r5
 80186a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186aa:	f000 b817 	b.w	80186dc <_write_r>

080186ae <__sseek>:
 80186ae:	b510      	push	{r4, lr}
 80186b0:	460c      	mov	r4, r1
 80186b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186b6:	f000 f855 	bl	8018764 <_lseek_r>
 80186ba:	1c43      	adds	r3, r0, #1
 80186bc:	89a3      	ldrh	r3, [r4, #12]
 80186be:	bf15      	itete	ne
 80186c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80186c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80186c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80186ca:	81a3      	strheq	r3, [r4, #12]
 80186cc:	bf18      	it	ne
 80186ce:	81a3      	strhne	r3, [r4, #12]
 80186d0:	bd10      	pop	{r4, pc}

080186d2 <__sclose>:
 80186d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186d6:	f000 b813 	b.w	8018700 <_close_r>
	...

080186dc <_write_r>:
 80186dc:	b538      	push	{r3, r4, r5, lr}
 80186de:	4c07      	ldr	r4, [pc, #28]	; (80186fc <_write_r+0x20>)
 80186e0:	4605      	mov	r5, r0
 80186e2:	4608      	mov	r0, r1
 80186e4:	4611      	mov	r1, r2
 80186e6:	2200      	movs	r2, #0
 80186e8:	6022      	str	r2, [r4, #0]
 80186ea:	461a      	mov	r2, r3
 80186ec:	f7f8 f999 	bl	8010a22 <_write>
 80186f0:	1c43      	adds	r3, r0, #1
 80186f2:	d102      	bne.n	80186fa <_write_r+0x1e>
 80186f4:	6823      	ldr	r3, [r4, #0]
 80186f6:	b103      	cbz	r3, 80186fa <_write_r+0x1e>
 80186f8:	602b      	str	r3, [r5, #0]
 80186fa:	bd38      	pop	{r3, r4, r5, pc}
 80186fc:	2001a7c4 	.word	0x2001a7c4

08018700 <_close_r>:
 8018700:	b538      	push	{r3, r4, r5, lr}
 8018702:	4c06      	ldr	r4, [pc, #24]	; (801871c <_close_r+0x1c>)
 8018704:	2300      	movs	r3, #0
 8018706:	4605      	mov	r5, r0
 8018708:	4608      	mov	r0, r1
 801870a:	6023      	str	r3, [r4, #0]
 801870c:	f7f8 f9a5 	bl	8010a5a <_close>
 8018710:	1c43      	adds	r3, r0, #1
 8018712:	d102      	bne.n	801871a <_close_r+0x1a>
 8018714:	6823      	ldr	r3, [r4, #0]
 8018716:	b103      	cbz	r3, 801871a <_close_r+0x1a>
 8018718:	602b      	str	r3, [r5, #0]
 801871a:	bd38      	pop	{r3, r4, r5, pc}
 801871c:	2001a7c4 	.word	0x2001a7c4

08018720 <_fstat_r>:
 8018720:	b538      	push	{r3, r4, r5, lr}
 8018722:	4c07      	ldr	r4, [pc, #28]	; (8018740 <_fstat_r+0x20>)
 8018724:	2300      	movs	r3, #0
 8018726:	4605      	mov	r5, r0
 8018728:	4608      	mov	r0, r1
 801872a:	4611      	mov	r1, r2
 801872c:	6023      	str	r3, [r4, #0]
 801872e:	f7f8 f9a0 	bl	8010a72 <_fstat>
 8018732:	1c43      	adds	r3, r0, #1
 8018734:	d102      	bne.n	801873c <_fstat_r+0x1c>
 8018736:	6823      	ldr	r3, [r4, #0]
 8018738:	b103      	cbz	r3, 801873c <_fstat_r+0x1c>
 801873a:	602b      	str	r3, [r5, #0]
 801873c:	bd38      	pop	{r3, r4, r5, pc}
 801873e:	bf00      	nop
 8018740:	2001a7c4 	.word	0x2001a7c4

08018744 <_isatty_r>:
 8018744:	b538      	push	{r3, r4, r5, lr}
 8018746:	4c06      	ldr	r4, [pc, #24]	; (8018760 <_isatty_r+0x1c>)
 8018748:	2300      	movs	r3, #0
 801874a:	4605      	mov	r5, r0
 801874c:	4608      	mov	r0, r1
 801874e:	6023      	str	r3, [r4, #0]
 8018750:	f7f8 f99f 	bl	8010a92 <_isatty>
 8018754:	1c43      	adds	r3, r0, #1
 8018756:	d102      	bne.n	801875e <_isatty_r+0x1a>
 8018758:	6823      	ldr	r3, [r4, #0]
 801875a:	b103      	cbz	r3, 801875e <_isatty_r+0x1a>
 801875c:	602b      	str	r3, [r5, #0]
 801875e:	bd38      	pop	{r3, r4, r5, pc}
 8018760:	2001a7c4 	.word	0x2001a7c4

08018764 <_lseek_r>:
 8018764:	b538      	push	{r3, r4, r5, lr}
 8018766:	4c07      	ldr	r4, [pc, #28]	; (8018784 <_lseek_r+0x20>)
 8018768:	4605      	mov	r5, r0
 801876a:	4608      	mov	r0, r1
 801876c:	4611      	mov	r1, r2
 801876e:	2200      	movs	r2, #0
 8018770:	6022      	str	r2, [r4, #0]
 8018772:	461a      	mov	r2, r3
 8018774:	f7f8 f998 	bl	8010aa8 <_lseek>
 8018778:	1c43      	adds	r3, r0, #1
 801877a:	d102      	bne.n	8018782 <_lseek_r+0x1e>
 801877c:	6823      	ldr	r3, [r4, #0]
 801877e:	b103      	cbz	r3, 8018782 <_lseek_r+0x1e>
 8018780:	602b      	str	r3, [r5, #0]
 8018782:	bd38      	pop	{r3, r4, r5, pc}
 8018784:	2001a7c4 	.word	0x2001a7c4

08018788 <__ascii_mbtowc>:
 8018788:	b082      	sub	sp, #8
 801878a:	b901      	cbnz	r1, 801878e <__ascii_mbtowc+0x6>
 801878c:	a901      	add	r1, sp, #4
 801878e:	b142      	cbz	r2, 80187a2 <__ascii_mbtowc+0x1a>
 8018790:	b14b      	cbz	r3, 80187a6 <__ascii_mbtowc+0x1e>
 8018792:	7813      	ldrb	r3, [r2, #0]
 8018794:	600b      	str	r3, [r1, #0]
 8018796:	7812      	ldrb	r2, [r2, #0]
 8018798:	1c10      	adds	r0, r2, #0
 801879a:	bf18      	it	ne
 801879c:	2001      	movne	r0, #1
 801879e:	b002      	add	sp, #8
 80187a0:	4770      	bx	lr
 80187a2:	4610      	mov	r0, r2
 80187a4:	e7fb      	b.n	801879e <__ascii_mbtowc+0x16>
 80187a6:	f06f 0001 	mvn.w	r0, #1
 80187aa:	e7f8      	b.n	801879e <__ascii_mbtowc+0x16>

080187ac <__malloc_lock>:
 80187ac:	4770      	bx	lr

080187ae <__malloc_unlock>:
 80187ae:	4770      	bx	lr

080187b0 <_read_r>:
 80187b0:	b538      	push	{r3, r4, r5, lr}
 80187b2:	4c07      	ldr	r4, [pc, #28]	; (80187d0 <_read_r+0x20>)
 80187b4:	4605      	mov	r5, r0
 80187b6:	4608      	mov	r0, r1
 80187b8:	4611      	mov	r1, r2
 80187ba:	2200      	movs	r2, #0
 80187bc:	6022      	str	r2, [r4, #0]
 80187be:	461a      	mov	r2, r3
 80187c0:	f7f8 f912 	bl	80109e8 <_read>
 80187c4:	1c43      	adds	r3, r0, #1
 80187c6:	d102      	bne.n	80187ce <_read_r+0x1e>
 80187c8:	6823      	ldr	r3, [r4, #0]
 80187ca:	b103      	cbz	r3, 80187ce <_read_r+0x1e>
 80187cc:	602b      	str	r3, [r5, #0]
 80187ce:	bd38      	pop	{r3, r4, r5, pc}
 80187d0:	2001a7c4 	.word	0x2001a7c4

080187d4 <__ascii_wctomb>:
 80187d4:	b149      	cbz	r1, 80187ea <__ascii_wctomb+0x16>
 80187d6:	2aff      	cmp	r2, #255	; 0xff
 80187d8:	bf85      	ittet	hi
 80187da:	238a      	movhi	r3, #138	; 0x8a
 80187dc:	6003      	strhi	r3, [r0, #0]
 80187de:	700a      	strbls	r2, [r1, #0]
 80187e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80187e4:	bf98      	it	ls
 80187e6:	2001      	movls	r0, #1
 80187e8:	4770      	bx	lr
 80187ea:	4608      	mov	r0, r1
 80187ec:	4770      	bx	lr
	...

080187f0 <_init>:
 80187f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187f2:	bf00      	nop
 80187f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187f6:	bc08      	pop	{r3}
 80187f8:	469e      	mov	lr, r3
 80187fa:	4770      	bx	lr

080187fc <_fini>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	bf00      	nop
 8018800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018802:	bc08      	pop	{r3}
 8018804:	469e      	mov	lr, r3
 8018806:	4770      	bx	lr
